{
    "project_name": "zanata-zanata-platform",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public void handleRedirect() {\n        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n            urlUtil.redirectToInternal(urlUtil.createUserPage());\n        } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n            urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/30/OpenIdAction.java\nindex b1c021f042e..0fd693a12b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/30/OpenIdAction.java\n@@ -46,7 +46,7 @@ public class OpenIdAction implements Serializable {\n      * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n      */\n     public void handleRedirect() {\n-        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n+        if (authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n             urlUtil.redirectToInternal(urlUtil.createUserPage());\n         } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n             urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/30/OpenIdAction.java\nindex b1c021f042e..cca060da284 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/30/OpenIdAction.java\n@@ -21,45 +21,45 @@ import org.zanata.util.UrlUtil;\n @ViewScoped\n public class OpenIdAction implements Serializable {\n \n-    private static final long serialVersionUID = 1681443557491913852L;\n-    @Inject\n-    private ZanataIdentity identity;\n+  private static final long serialVersionUID = 1681443557491913852L;\n+  @Inject\n+  private ZanataIdentity identity;\n \n-    @Inject\n-    private UserRedirectBean userRedirect;\n+  @Inject\n+  private UserRedirectBean userRedirect;\n \n-    @Inject\n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"CDI proxies are Serializable\")\n-    private AuthenticationManager authenticationManager;\n+  @Inject\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"CDI proxies are Serializable\")\n+  private AuthenticationManager authenticationManager;\n \n-    @Inject\n-    private ApplicationConfiguration applicationConfiguration;\n+  @Inject\n+  private ApplicationConfiguration applicationConfiguration;\n \n-    @Inject\n-    private UrlUtil urlUtil;\n+  @Inject\n+  private UrlUtil urlUtil;\n \n-    /**\n-     * Handle redirection after openId login.\n-     *\n-     * Cannot use faces-config.xml to handle due to <to-view-id> not supporting\n-     * EL expression.\n-     * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n-     */\n-    public void handleRedirect() {\n-        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n-            urlUtil.redirectToInternal(urlUtil.createUserPage());\n-        } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n-            urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n-        } else if (!identity.isLoggedIn() && applicationConfiguration.isSingleOpenIdProvider()) {\n-            urlUtil.redirectToInternal(urlUtil.home());\n-        } else if (identity.isLoggedIn() && userRedirect.shouldRedirectToDashboard()) {\n-            urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n-        } else if (!identity.isLoggedIn()) {\n-            urlUtil.redirectToInternal(urlUtil.signInPage());\n-        } else if (identity.isLoggedIn() && userRedirect.isRedirect()) {\n-            urlUtil.redirectToInternal(userRedirect.getUrl());\n-        } else if (identity.isLoggedIn()) {\n-            urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n-        }\n+  /**\n+   * Handle redirection after openId login.\n+   * <p>\n+   * Cannot use faces-config.xml to handle due to <to-view-id> not supporting\n+   * EL expression.\n+   * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n+   */\n+  public void handleRedirect() {\n+    if (authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n+      urlUtil.redirectToInternal(urlUtil.createUserPage());\n+    } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n+      urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n+    } else if (!identity.isLoggedIn() && applicationConfiguration.isSingleOpenIdProvider()) {\n+      urlUtil.redirectToInternal(urlUtil.home());\n+    } else if (identity.isLoggedIn() && userRedirect.shouldRedirectToDashboard()) {\n+      urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n+    } else if (!identity.isLoggedIn()) {\n+      urlUtil.redirectToInternal(urlUtil.signInPage());\n+    } else if (identity.isLoggedIn() && userRedirect.isRedirect()) {\n+      urlUtil.redirectToInternal(userRedirect.getUrl());\n+    } else if (identity.isLoggedIn()) {\n+      urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n     }\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/30/OpenIdAction.java\nindex b1c021f042e..d37ee865513 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/30/OpenIdAction.java\n@@ -46,7 +46,7 @@ public class OpenIdAction implements Serializable {\n      * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n      */\n     public void handleRedirect() {\n-        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n+        if (authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n             urlUtil.redirectToInternal(urlUtil.createUserPage());\n         } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n             urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n@@ -62,4 +62,4 @@ public class OpenIdAction implements Serializable {\n             urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/30/OpenIdAction.java\nindex b1c021f042e..f7299cec6a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/30/OpenIdAction.java\n@@ -4,7 +4,6 @@ import java.io.Serializable;\n import javax.faces.bean.ViewScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.zanata.ApplicationConfiguration;\n import org.zanata.security.AuthenticationManager;\n@@ -17,24 +16,21 @@ import org.zanata.util.UrlUtil;\n  *\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"openIdAction\")\n @ViewScoped\n public class OpenIdAction implements Serializable {\n-\n     private static final long serialVersionUID = 1681443557491913852L;\n     @Inject\n     private ZanataIdentity identity;\n-\n     @Inject\n     private UserRedirectBean userRedirect;\n-\n     @Inject\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"CDI proxies are Serializable\")\n     private AuthenticationManager authenticationManager;\n-\n     @Inject\n     private ApplicationConfiguration applicationConfiguration;\n-\n     @Inject\n     private UrlUtil urlUtil;\n \n@@ -46,20 +42,20 @@ public class OpenIdAction implements Serializable {\n      * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n      */\n     public void handleRedirect() {\n-        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n+        if (authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n             urlUtil.redirectToInternal(urlUtil.createUserPage());\n         } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n             urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n         } else if (!identity.isLoggedIn() && applicationConfiguration.isSingleOpenIdProvider()) {\n-            urlUtil.redirectToInternal(urlUtil.home());\n-        } else if (identity.isLoggedIn() && userRedirect.shouldRedirectToDashboard()) {\n-            urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n-        } else if (!identity.isLoggedIn()) {\n-            urlUtil.redirectToInternal(urlUtil.signInPage());\n-        } else if (identity.isLoggedIn() && userRedirect.isRedirect()) {\n-            urlUtil.redirectToInternal(userRedirect.getUrl());\n-        } else if (identity.isLoggedIn()) {\n-            urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n-        }\n+                   urlUtil.redirectToInternal(urlUtil.home());\n+               } else if (identity.isLoggedIn() && userRedirect.shouldRedirectToDashboard()) {\n+                   urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n+               } else if (!identity.isLoggedIn()) {\n+                          urlUtil.redirectToInternal(urlUtil.signInPage());\n+                      } else if (identity.isLoggedIn() && userRedirect.isRedirect()) {\n+                          urlUtil.redirectToInternal(userRedirect.getUrl());\n+                      } else if (identity.isLoggedIn()) {\n+                                 urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n+                             }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/30/OpenIdAction.java\nindex b1c021f042e..0fd693a12b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/30/OpenIdAction.java\n@@ -46,7 +46,7 @@ public class OpenIdAction implements Serializable {\n      * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n      */\n     public void handleRedirect() {\n-        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n+        if (authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n             urlUtil.redirectToInternal(urlUtil.createUserPage());\n         } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n             urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/30/OpenIdAction.java\nindex b1c021f042e..0fd693a12b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/30/OpenIdAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/30/OpenIdAction.java\n@@ -46,7 +46,7 @@ public class OpenIdAction implements Serializable {\n      * <to-view-id>#{urlUtil.redirectToInternal(userRedirect.getUrl())}</to-view-id>\n      */\n     public void handleRedirect() {\n-        if(authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n+        if (authenticationManager.isAuthenticated() && authenticationManager.isNewUser()) {\n             urlUtil.redirectToInternal(urlUtil.createUserPage());\n         } else if (!identity.isLoggedIn() && authenticationManager.isAuthenticatedAccountWaitingForActivation()) {\n             urlUtil.redirectToInternal(urlUtil.inactiveAccountPage());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}