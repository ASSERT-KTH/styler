{
    "project_name": "graphfoundation-ongdb",
    "error_id": "139",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/139/BlockLogBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/139/BlockLogBuffer.java\nindex 990920a9fe8..053fbcdb5d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/139/BlockLogBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/139/BlockLogBuffer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.com;\n \n import org.jboss.netty.buffer.ChannelBuffer;\n@@ -40,133 +41,133 @@ import org.neo4j.kernel.monitoring.ByteCounterMonitor;\n  */\n public class BlockLogBuffer implements Closeable\n {\n-    // First byte of every chunk that is not the last one\n-    static final byte FULL_BLOCK_AND_MORE = 0;\n-    static final int MAX_SIZE = 256; /* soft limit, incl. header */\n-    static final int DATA_SIZE = MAX_SIZE - 1;\n-\n-    private final ChannelBuffer target;\n-    private final ByteCounterMonitor monitor;\n-    // MAX_SIZE can be overcome by one primitive put(), the largest is 8 bytes\n-    private final byte[] byteArray = new byte[MAX_SIZE + 8/*largest atom*/];\n-    private final ByteBuffer byteBuffer = ByteBuffer.wrap( byteArray );\n-\n-    public BlockLogBuffer( ChannelBuffer target, ByteCounterMonitor monitor )\n+  // First byte of every chunk that is not the last one\n+  static final byte FULL_BLOCK_AND_MORE = 0;\n+  static final int MAX_SIZE = 256; /* soft limit, incl. header */\n+  static final int DATA_SIZE = MAX_SIZE - 1;\n+\n+  private final ChannelBuffer target;\n+  private final ByteCounterMonitor monitor;\n+  // MAX_SIZE can be overcome by one primitive put(), the largest is 8 bytes\n+  private final byte[] byteArray = new byte[MAX_SIZE + 8/*largest atom*/];\n+  private final ByteBuffer byteBuffer = ByteBuffer.wrap(byteArray);\n+\n+  public BlockLogBuffer(ChannelBuffer target, ByteCounterMonitor monitor)\n+  {\n+    this.target = target;\n+    this.monitor = monitor;\n+    clearInternalBuffer();\n+  }\n+\n+  private void clearInternalBuffer()\n+  {\n+    byteBuffer.clear();\n+    // reserve space for size - assume we are going to fill the buffer\n+    byteBuffer.put(FULL_BLOCK_AND_MORE);\n+  }\n+\n+  /**\n+   * If the position of the byteBuffer is larger than MAX_SIZE then\n+   * MAX_SIZE bytes are flushed to the underlying channel. The remaining\n+   * bytes (1 up to and including 8 - see the byteArray field initializer)\n+   * are moved over at the beginning of the cleared buffer.\n+   *\n+   * @return the buffer\n+   */\n+  private BlockLogBuffer checkFlush()\n+  {\n+    if (byteBuffer.position() > MAX_SIZE)\n     {\n-        this.target = target;\n-        this.monitor = monitor;\n-        clearInternalBuffer();\n+      flush();\n     }\n-\n-    private void clearInternalBuffer()\n-    {\n-        byteBuffer.clear();\n-        // reserve space for size - assume we are going to fill the buffer\n-        byteBuffer.put( FULL_BLOCK_AND_MORE );\n-    }\n-\n-    /**\n-     * If the position of the byteBuffer is larger than MAX_SIZE then\n-     * MAX_SIZE bytes are flushed to the underlying channel. The remaining\n-     * bytes (1 up to and including 8 - see the byteArray field initializer)\n-     * are moved over at the beginning of the cleared buffer.\n-     *\n-     * @return the buffer\n-     */\n-    private BlockLogBuffer checkFlush()\n-    {\n-        if ( byteBuffer.position() > MAX_SIZE )\n-        {\n-            flush();\n-        }\n-        return this;\n-    }\n-\n-    private void flush()\n-    {\n-        int howManyBytesToWrite = MAX_SIZE;\n-        target.writeBytes( byteArray, 0, howManyBytesToWrite );\n-        monitor.bytesWritten( howManyBytesToWrite );\n-        int pos = byteBuffer.position();\n-        clearInternalBuffer();\n-        byteBuffer.put( byteArray, howManyBytesToWrite, pos - howManyBytesToWrite );\n-    }\n-\n-    public BlockLogBuffer put( byte b )\n-    {\n-        byteBuffer.put( b );\n-        return checkFlush();\n-    }\n-\n-    public BlockLogBuffer putShort( short s )\n-    {\n-        byteBuffer.putShort( s );\n-        return checkFlush();\n-    }\n-\n-    public BlockLogBuffer putInt( int i )\n+    return this;\n+  }\n+\n+  private void flush()\n+  {\n+    int howManyBytesToWrite = MAX_SIZE;\n+    target.writeBytes(byteArray, 0, howManyBytesToWrite);\n+    monitor.bytesWritten(howManyBytesToWrite);\n+    int pos = byteBuffer.position();\n+    clearInternalBuffer();\n+    byteBuffer.put(byteArray, howManyBytesToWrite, pos - howManyBytesToWrite);\n+  }\n+\n+  public BlockLogBuffer put(byte b)\n+  {\n+    byteBuffer.put(b);\n+    return checkFlush();\n+  }\n+\n+  public BlockLogBuffer putShort(short s)\n+  {\n+    byteBuffer.putShort(s);\n+    return checkFlush();\n+  }\n+\n+  public BlockLogBuffer putInt(int i)\n+  {\n+    byteBuffer.putInt(i);\n+    return checkFlush();\n+  }\n+\n+  public BlockLogBuffer putLong(long l)\n+  {\n+    byteBuffer.putLong(l);\n+    return checkFlush();\n+  }\n+\n+  public BlockLogBuffer putFloat(float f)\n+  {\n+    byteBuffer.putFloat(f);\n+    return checkFlush();\n+  }\n+\n+  public BlockLogBuffer putDouble(double d)\n+  {\n+    byteBuffer.putDouble(d);\n+    return checkFlush();\n+  }\n+\n+  public BlockLogBuffer put(byte[] bytes, int length)\n+  {\n+    for (int pos = 0; pos < length; )\n     {\n-        byteBuffer.putInt( i );\n-        return checkFlush();\n+      int toWrite = Math.min(byteBuffer.remaining(), length - pos);\n+      byteBuffer.put(bytes, pos, toWrite);\n+      checkFlush();\n+      pos += toWrite;\n     }\n-\n-    public BlockLogBuffer putLong( long l )\n-    {\n-        byteBuffer.putLong( l );\n-        return checkFlush();\n-    }\n-\n-    public BlockLogBuffer putFloat( float f )\n-    {\n-        byteBuffer.putFloat( f );\n-        return checkFlush();\n-    }\n-\n-    public BlockLogBuffer putDouble( double d )\n-    {\n-        byteBuffer.putDouble( d );\n-        return checkFlush();\n-    }\n-\n-    public BlockLogBuffer put( byte[] bytes, int length )\n-    {\n-        for ( int pos = 0; pos < length; )\n-        {\n-            int toWrite = Math.min( byteBuffer.remaining(), length - pos );\n-            byteBuffer.put( bytes, pos, toWrite );\n-            checkFlush();\n-            pos += toWrite;\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * Signals the end of use for this buffer over this channel - first byte of\n-     * the chunk is set to the position of the buffer ( != 0, instead of\n-     * FULL_BLOCK_AND_MORE) and it is written to the channel.\n-     */\n-    @Override\n-    public void close()\n-    {\n-        assert byteBuffer.position() > 1 : \"buffer should contain more than the header\";\n-        assert byteBuffer.position() <= MAX_SIZE : \"buffer should not be over full\";\n-        long howManyBytesToWrite = byteBuffer.position();\n-        byteBuffer.put( 0, (byte) ( byteBuffer.position() - 1 ) );\n-        byteBuffer.flip();\n-        target.writeBytes( byteBuffer );\n-        monitor.bytesWritten( howManyBytesToWrite );\n-        clearInternalBuffer();\n-    }\n-\n-    public int write( ReadableByteChannel data ) throws IOException\n+    return this;\n+  }\n+\n+  /**\n+   * Signals the end of use for this buffer over this channel - first byte of\n+   * the chunk is set to the position of the buffer ( != 0, instead of\n+   * FULL_BLOCK_AND_MORE) and it is written to the channel.\n+   */\n+  @Override\n+  public void close()\n+  {\n+    assert byteBuffer.position() > 1 : \"buffer should contain more than the header\";\n+    assert byteBuffer.position() <= MAX_SIZE : \"buffer should not be over full\";\n+    long howManyBytesToWrite = byteBuffer.position();\n+    byteBuffer.put(0, (byte) (byteBuffer.position() - 1));\n+    byteBuffer.flip();\n+    target.writeBytes(byteBuffer);\n+    monitor.bytesWritten(howManyBytesToWrite);\n+    clearInternalBuffer();\n+  }\n+\n+  public int write(ReadableByteChannel data) throws IOException\n+  {\n+    int result = 0;\n+    int bytesRead;\n+    while ((bytesRead = data.read(byteBuffer)) >= 0)\n     {\n-        int result = 0;\n-        int bytesRead;\n-        while ( (bytesRead = data.read( byteBuffer )) >= 0 )\n-        {\n-            checkFlush();\n-            result += bytesRead;\n-        }\n-        return result;\n+      checkFlush();\n+      result += bytesRead;\n     }\n+    return result;\n+  }\n }\n",
            "diff_size": 156
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}