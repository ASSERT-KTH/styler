{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4284",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4284/NettyServer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4284/NettyServer.java\nindex aceb9b1cf42..1c4019e91ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4284/NettyServer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4284/NettyServer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.transport;\n \n import io.netty.bootstrap.ServerBootstrap;\n@@ -49,96 +50,95 @@ import org.neo4j.util.FeatureToggles;\n public class NettyServer extends LifecycleAdapter\n {\n \n-    private static final boolean USE_EPOLL = FeatureToggles.flag( NettyServer.class, \"useEpoll\", true  );\n-    // Not officially configurable, but leave it modifiable via system properties in case we find we need to\n-    // change it.\n-    private static final int NUM_SELECTOR_THREADS = Math.max( 1, Integer.getInteger(\n-            \"org.neo4j.selectorThreads\", Runtime.getRuntime().availableProcessors() * 2 ) );\n+  private static final boolean USE_EPOLL = FeatureToggles.flag(NettyServer.class, \"useEpoll\", true);\n+  // Not officially configurable, but leave it modifiable via system properties in case we find we need to\n+  // change it.\n+  private static final int NUM_SELECTOR_THREADS = Math.max(1, Integer.getInteger(\n+      \"org.neo4j.selectorThreads\", Runtime.getRuntime().availableProcessors() * 2));\n \n-    private final Map<BoltConnector, ProtocolInitializer> bootstrappersMap;\n-    private final ThreadFactory tf;\n-    private final ConnectorPortRegister connectionRegister;\n-    private final Log log;\n-    private EventLoopGroup bossGroup;\n-    private EventLoopGroup selectorGroup;\n+  private final Map<BoltConnector, ProtocolInitializer> bootstrappersMap;\n+  private final ThreadFactory tf;\n+  private final ConnectorPortRegister connectionRegister;\n+  private final Log log;\n+  private EventLoopGroup bossGroup;\n+  private EventLoopGroup selectorGroup;\n \n-    /**\n-     * Describes how to initialize new channels for a protocol, and which address the protocol should be bolted into.\n-     */\n-    public interface ProtocolInitializer\n-    {\n-        ChannelInitializer<io.netty.channel.socket.SocketChannel> channelInitializer();\n-        ListenSocketAddress address();\n-    }\n+  /**\n+   * Describes how to initialize new channels for a protocol, and which address the protocol should be bolted into.\n+   */\n+  public interface ProtocolInitializer\n+  {\n+    ChannelInitializer<io.netty.channel.socket.SocketChannel> channelInitializer();\n \n-    /**\n-     * @param tf used to create IO threads to listen and handle network events\n-     * @param initializersMap  function per bolt connector map to bootstrap configured protocols\n-     * @param connectorRegister register to keep local address information on all configured connectors\n-     */\n-    public NettyServer( ThreadFactory tf, Map<BoltConnector, ProtocolInitializer> initializersMap,\n-                        ConnectorPortRegister connectorRegister, Log log )\n-    {\n-        this.bootstrappersMap = initializersMap;\n-        this.tf = tf;\n-        this.connectionRegister = connectorRegister;\n-        this.log = log;\n-    }\n+    ListenSocketAddress address();\n+  }\n \n-    @Override\n-    public void start() throws Throwable\n-    {\n-        boolean useEpoll = USE_EPOLL && Epoll.isAvailable();\n-        ServerConfigurationProvider configurationProvider = useEpoll ? EpollConfigurationProvider.INSTANCE :\n-                                                            NioConfigurationProvider.INSTANCE;\n-        bossGroup = configurationProvider.createEventLoopGroup(1, tf);\n+  /**\n+   * @param tf                used to create IO threads to listen and handle network events\n+   * @param initializersMap   function per bolt connector map to bootstrap configured protocols\n+   * @param connectorRegister register to keep local address information on all configured connectors\n+   */\n+  public NettyServer(ThreadFactory tf, Map<BoltConnector, ProtocolInitializer> initializersMap,\n+                     ConnectorPortRegister connectorRegister, Log log)\n+  {\n+    this.bootstrappersMap = initializersMap;\n+    this.tf = tf;\n+    this.connectionRegister = connectorRegister;\n+    this.log = log;\n+  }\n \n-        // These threads handle live channels. Each thread has a set of channels it is responsible for, and it will\n-        // continuously run a #select() loop to react to new events on these channels.\n-        selectorGroup = configurationProvider.createEventLoopGroup( NUM_SELECTOR_THREADS, tf );\n+  @Override\n+  public void start() throws Throwable\n+  {\n+    boolean useEpoll = USE_EPOLL && Epoll.isAvailable();\n+    ServerConfigurationProvider configurationProvider = useEpoll ? EpollConfigurationProvider.INSTANCE :\n+        NioConfigurationProvider.INSTANCE;\n+    bossGroup = configurationProvider.createEventLoopGroup(1, tf);\n \n-        // Bootstrap the various ports and protocols we want to handle\n+    // These threads handle live channels. Each thread has a set of channels it is responsible for, and it will\n+    // continuously run a #select() loop to react to new events on these channels.\n+    selectorGroup = configurationProvider.createEventLoopGroup(NUM_SELECTOR_THREADS, tf);\n \n-        for ( Map.Entry<BoltConnector, ProtocolInitializer> bootstrapEntry : bootstrappersMap.entrySet() )\n+    // Bootstrap the various ports and protocols we want to handle\n+\n+    for (Map.Entry<BoltConnector, ProtocolInitializer> bootstrapEntry : bootstrappersMap.entrySet())\n+    {\n+      try\n+      {\n+        ProtocolInitializer protocolInitializer = bootstrapEntry.getValue();\n+        BoltConnector boltConnector = bootstrapEntry.getKey();\n+        ChannelFuture channelFuture =\n+            new ServerBootstrap().option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n+                .group(bossGroup, selectorGroup).channel(configurationProvider.getChannelClass())\n+                .childHandler(protocolInitializer.channelInitializer())\n+                .bind(protocolInitializer.address().socketAddress()).sync();\n+        InetSocketAddress localAddress = (InetSocketAddress) channelFuture.channel().localAddress();\n+        connectionRegister.register(boltConnector.key(), localAddress);\n+        String host = protocolInitializer.address().getHostname();\n+        int port = localAddress.getPort();\n+        if (host.contains(\":\"))\n+        {\n+          // IPv6\n+          log.info(\"Bolt enabled on [%s]:%s.\", host, port);\n+        } else\n         {\n-            try\n-            {\n-                ProtocolInitializer protocolInitializer = bootstrapEntry.getValue();\n-                BoltConnector boltConnector = bootstrapEntry.getKey();\n-                ChannelFuture channelFuture =\n-                        new ServerBootstrap().option( ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT )\n-                                .group( bossGroup, selectorGroup ).channel( configurationProvider.getChannelClass() )\n-                                .childHandler( protocolInitializer.channelInitializer() )\n-                                .bind( protocolInitializer.address().socketAddress() ).sync();\n-                InetSocketAddress localAddress = (InetSocketAddress) channelFuture.channel().localAddress();\n-                connectionRegister.register( boltConnector.key(), localAddress );\n-                String host = protocolInitializer.address().getHostname();\n-                int port = localAddress.getPort();\n-                if ( host.contains( \":\" ) )\n-                {\n-                    // IPv6\n-                    log.info( \"Bolt enabled on [%s]:%s.\", host, port );\n-                }\n-                else\n-                {\n-                    // IPv4\n-                    log.info( \"Bolt enabled on %s:%s.\", host, port );\n-                }\n-            }\n-            catch ( Throwable e )\n-            {\n-                // We catch throwable here because netty uses clever tricks to have method signatures that look like they do not\n-                // throw checked exceptions, but they actually do. The compiler won't let us catch them explicitly because in theory\n-                // they shouldn't be possible, so we have to catch Throwable and do our own checks to grab them\n-                throw new PortBindException( bootstrapEntry.getValue().address(), e );\n-            }\n+          // IPv4\n+          log.info(\"Bolt enabled on %s:%s.\", host, port);\n         }\n+      } catch (Throwable e)\n+      {\n+        // We catch throwable here because netty uses clever tricks to have method signatures that look like they do not\n+        // throw checked exceptions, but they actually do. The compiler won't let us catch them explicitly because in theory\n+        // they shouldn't be possible, so we have to catch Throwable and do our own checks to grab them\n+        throw new PortBindException(bootstrapEntry.getValue().address(), e);\n+      }\n     }\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        bossGroup.shutdownGracefully();\n-        selectorGroup.shutdownGracefully();\n-    }\n+  @Override\n+  public void stop()\n+  {\n+    bossGroup.shutdownGracefully();\n+    selectorGroup.shutdownGracefully();\n+  }\n }\n",
            "diff_size": 123
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}