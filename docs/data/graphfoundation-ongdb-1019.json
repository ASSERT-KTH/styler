{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1019",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1019/StoreReadLayer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1019/StoreReadLayer.java\nindex 26320bede21..47d8e7ae2b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1019/StoreReadLayer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1019/StoreReadLayer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api;\n \n import java.util.Iterator;\n@@ -53,344 +54,343 @@ import org.neo4j.storageengine.api.schema.PopulationProgress;\n  */\n public interface StoreReadLayer\n {\n-    /**\n-     * @return new {@link StorageStatement}, which can be used after a call to {@link StorageStatement#acquire()}.\n-     */\n-    StorageStatement newStatement();\n-\n-    /**\n-     * @param labelId label to list indexes for.\n-     * @return {@link SchemaIndexDescriptor} associated with the given {@code labelId}.\n-     */\n-    Iterator<SchemaIndexDescriptor> indexesGetForLabel( int labelId );\n-\n-    /**\n-     * @return all {@link SchemaIndexDescriptor} in storage.\n-     */\n-    Iterator<SchemaIndexDescriptor> indexesGetAll();\n-\n-    /**\n-     * Returns all indexes (including unique) related to a property.\n-     */\n-    Iterator<SchemaIndexDescriptor> indexesGetRelatedToProperty( int propertyId );\n-\n-    /**\n-     * @param index {@link SchemaIndexDescriptor} to get related uniqueness constraint for.\n-     * @return schema rule id of uniqueness constraint that owns the given {@code index}, or {@code null}\n-     * if the given index isn't related to a uniqueness constraint.\n-     */\n-    Long indexGetOwningUniquenessConstraintId( SchemaIndexDescriptor index );\n-\n-    /**\n-     * @param index {@link SchemaIndexDescriptor} to get schema rule id for.\n-     * @return schema rule id for matching index.\n-     * @throws SchemaRuleNotFoundException if no such index exists in storage.\n-     */\n-    long indexGetCommittedId( SchemaIndexDescriptor index )\n-            throws SchemaRuleNotFoundException;\n-\n-    /**\n-     * @return iterator with property keys of all stored graph properties.\n-     */\n-    PrimitiveIntIterator graphGetPropertyKeys();\n-\n-    /**\n-     * @param propertyKeyId property key id to get graph property for.\n-     * @return property value of graph property with key {@code propertyKeyId}, or {@code null} if not found.\n-     */\n-    Object graphGetProperty( int propertyKeyId );\n-\n-    /**\n-     * @return all stored graph properties.\n-     */\n-    Iterator<StorageProperty> graphGetAllProperties();\n-\n-    /**\n-     * @param descriptor describing the label and property key (or keys) defining the requested constraint.\n-     * @return node property constraints associated with the label and one or more property keys token ids.\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetForSchema( SchemaDescriptor descriptor );\n-\n-    boolean constraintExists( ConstraintDescriptor descriptor );\n-\n-    /**\n-     * @param labelId label token id.\n-     * @return node property constraints associated with the label token id.\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetForLabel( int labelId );\n-\n-    /**\n-     * @param typeId relationship type token id .\n-     * @return relationship property constraints associated with the relationship type token id.\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetForRelationshipType( int typeId );\n-\n-    /**\n-     * @return all stored property constraints.\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetAll();\n-\n-    /**\n-     *\n-     * @param statement An already acquired {@link StorageStatement} with access to store.\n-     * @param labelId The label id of interest.\n-     * @return {@link PrimitiveLongResourceIterator} over node ids associated with given label id.\n-     */\n-    PrimitiveLongResourceIterator nodesGetForLabel( StorageStatement statement, int labelId );\n-\n-    /**\n-     * Looks for a stored index by given {@code descriptor}\n-     *\n-     * @param descriptor a description of the index.\n-     * @return {@link SchemaIndexDescriptor} for matching index, or {@code null} if not found.\n-     */\n-    SchemaIndexDescriptor indexGetForSchema( SchemaDescriptor descriptor );\n-\n-    /**\n-     * Returns state of a stored index.\n-     *\n-     * @param descriptor {@link SchemaIndexDescriptor} to get state for.\n-     * @return {@link InternalIndexState} for index.\n-     * @throws IndexNotFoundKernelException if index not found.\n-     */\n-    InternalIndexState indexGetState( SchemaIndexDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Return index provider descriptor of a stored index.\n-     *\n-     * @param descriptor {@link SchemaIndexDescriptor} to get provider descriptor for.\n-     * @return {@link IndexProvider.Descriptor} for index.\n-     * @throws IndexNotFoundKernelException if index not found.\n-     */\n-    IndexProvider.Descriptor indexGetProviderDescriptor( SchemaIndexDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Return index reference of a stored index.\n-     *\n-     * @param descriptor {@link SchemaIndexDescriptor} to get provider reference for.\n-     * @return {@link IndexProvider.Descriptor} for index.\n-     * @throws IndexNotFoundKernelException if index not found.\n-     */\n-    CapableIndexReference indexReference( SchemaIndexDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * @param descriptor {@link SchemaDescriptor} to get population progress for.\n-     * @return progress of index population, which is the initial state of an index when it's created.\n-     * @throws IndexNotFoundKernelException if index not found.\n-     */\n-    PopulationProgress indexGetPopulationProgress( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Returns any failure that happened during population or operation of an index. Such failures\n-     * are persisted and can be accessed even after restart.\n-     *\n-     * @param descriptor {@link SchemaDescriptor} to get failure for.\n-     * @return failure of an index, or {@code null} if index is working as it should.\n-     * @throws IndexNotFoundKernelException if index not found.\n-     */\n-    String indexGetFailure( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * @param labelName name of label.\n-     * @return token id of label.\n-     */\n-    int labelGetForName( String labelName );\n-\n-    /**\n-     * @param labelId label id to get name for.\n-     * @return label name for given label id.\n-     * @throws LabelNotFoundKernelException if no label by {@code labelId} was found.\n-     */\n-    String labelGetName( int labelId ) throws LabelNotFoundKernelException;\n-\n-    /**\n-     * @param propertyKeyName name of property key.\n-     * @return token id of property key.\n-     */\n-    int propertyKeyGetForName( String propertyKeyName );\n-\n-    /**\n-     * Gets property key token id for the given {@code propertyKeyName}, or creates one if there is no\n-     * existing property key with the given name.\n-     *\n-     * @param propertyKeyName name of property key.\n-     * @return property key token id for the given name, created if need be.\n-     */\n-    int propertyKeyGetOrCreateForName( String propertyKeyName );\n-\n-    /**\n-     * @param propertyKeyId property key to get name for.\n-     * @return property key name for given property key id.\n-     * @throws PropertyKeyIdNotFoundKernelException if no property key by {@code propertyKeyId} was found.\n-     */\n-    String propertyKeyGetName( int propertyKeyId ) throws PropertyKeyIdNotFoundKernelException;\n-\n-    /**\n-     * @return all stored property key tokens.\n-     */\n-    Iterator<Token> propertyKeyGetAllTokens();\n-\n-    /**\n-     * @return all stored label tokens.\n-     */\n-    Iterator<Token> labelsGetAllTokens();\n-\n-    /**\n-     * @return all stored relationship type tokens.\n-     */\n-    Iterator<Token> relationshipTypeGetAllTokens();\n-\n-    /**\n-     * @param relationshipTypeName name of relationship type.\n-     * @return token id of relationship type.\n-     */\n-    int relationshipTypeGetForName( String relationshipTypeName );\n-\n-    /**\n-     * @param relationshipTypeId relationship type id to get name for.\n-     * @return relationship type name of given relationship type id.\n-     * @throws RelationshipTypeIdNotFoundKernelException if no label by {@code labelId} was found.\n-     */\n-    String relationshipTypeGetName( int relationshipTypeId ) throws RelationshipTypeIdNotFoundKernelException;\n-\n-    /**\n-     * Gets label token id for the given {@code labelName}, or creates one if there is no\n-     * existing label with the given name.\n-     *\n-     * @param labelName name of label.\n-     * @return label token id for the given name, created if need be.\n-     * @throws TooManyLabelsException if creating this label would have exceeded storage limitations for\n-     * number of stored labels.\n-     */\n-    int labelGetOrCreateForName( String labelName ) throws TooManyLabelsException;\n-\n-    /**\n-     * Gets relationship type token id for the given {@code relationshipTypeName}, or creates one if there is no\n-     * existing relationship type with the given name.\n-     *\n-     * @param relationshipTypeName name of relationship type.\n-     * @return relationship type token id for the given name, created if need be.\n-     */\n-    int relationshipTypeGetOrCreateForName( String relationshipTypeName );\n-\n-    /**\n-     * Visits data about a relationship. The given {@code relationshipVisitor} will be notified.\n-     *\n-     * @param relationshipId the id of the relationship to access.\n-     * @param relationshipVisitor {@link RelationshipVisitor} which will see the relationship data.\n-     * @throws EntityNotFoundException if no relationship exists by the given {@code relationshipId}.\n-     */\n-    <EXCEPTION extends Exception> void relationshipVisit( long relationshipId,\n-            RelationshipVisitor<EXCEPTION> relationshipVisitor ) throws EntityNotFoundException, EXCEPTION;\n-\n-    /**\n-     * @return ids of all stored nodes.\n-     */\n-    PrimitiveLongIterator nodesGetAll();\n-\n-    /**\n-     * @return ids of all stored relationships. The returned iterator can optionally visit data about\n-     * each relationship returned.\n-     */\n-    RelationshipIterator relationshipsGetAll();\n-\n-    Cursor<RelationshipItem> nodeGetRelationships( StorageStatement statement, NodeItem nodeItem, Direction direction );\n-\n-    Cursor<RelationshipItem> nodeGetRelationships( StorageStatement statement, NodeItem nodeItem, Direction direction,\n-            IntPredicate typeIds );\n-\n-    Cursor<PropertyItem> nodeGetProperties( StorageStatement statement, NodeItem node, AssertOpen assertOpen );\n-\n-    Cursor<PropertyItem> nodeGetProperty( StorageStatement statement, NodeItem node, int propertyKeyId,\n-            AssertOpen assertOpen );\n-\n-    Cursor<PropertyItem> relationshipGetProperties( StorageStatement statement, RelationshipItem relationship,\n-            AssertOpen assertOpen );\n-\n-    Cursor<PropertyItem> relationshipGetProperty( StorageStatement statement, RelationshipItem relationshipItem,\n-            int propertyKeyId, AssertOpen assertOpen );\n-\n-    /**\n-     * Releases a previously {@link StorageStatement#reserveNode() reserved} node id if it turns out to not actually being used,\n-     * for example in the event of a transaction rolling back.\n-     *\n-     * @param id reserved node id to release.\n-     */\n-    void releaseNode( long id );\n-\n-    /**\n-     * Releases a previously {@link StorageStatement#reserveRelationship() reserved} relationship id if it turns out to not\n-     * actually being used, for example in the event of a transaction rolling back.\n-     *\n-     * @param id reserved relationship id to release.\n-     */\n-    void releaseRelationship( long id );\n-\n-    /**\n-     * Returns number of stored nodes labeled with the label represented by {@code labelId}.\n-     *\n-     * @param labelId label id to match.\n-     * @return number of stored nodes with this label.\n-     */\n-    long countsForNode( int labelId );\n-\n-    /**\n-     * Returns number of stored relationships of a certain {@code typeId} whose start/end nodes are labeled\n-     * with the {@code startLabelId} and {@code endLabelId} respectively.\n-     *\n-     * @param startLabelId label id of start nodes to match.\n-     * @param typeId relationship type id to match.\n-     * @param endLabelId label id of end nodes to match.\n-     * @return number of stored relationships matching these criteria.\n-     */\n-    long countsForRelationship( int startLabelId, int typeId, int endLabelId );\n-\n-    /**\n-     * Returns size of index, i.e. number of entities in that index.\n-     *\n-     * @param descriptor {@link SchemaDescriptor} to return size for.\n-     * @return number of entities in the given index.\n-     * @throws IndexNotFoundKernelException if no such index exists.\n-     */\n-    long indexSize( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Returns percentage of values in the given {@code index} are unique. A value of {@code 1.0} means that\n-     * all values in the index are unique, e.g. that there are no duplicate values. A value of, say {@code 0.9}\n-     * means that 10% of the values are duplicates.\n-     *\n-     * @param descriptor {@link SchemaDescriptor} to get uniqueness percentage for.\n-     * @return percentage of values being unique in this index, max {@code 1.0} for all unique.\n-     * @throws IndexNotFoundKernelException if no such index exists.\n-     */\n-    double indexUniqueValuesPercentage( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException;\n-\n-    long nodesGetCount();\n-\n-    long relationshipsGetCount();\n-\n-    int labelCount();\n-\n-    int propertyKeyCount();\n-\n-    int relationshipTypeCount();\n-\n-    DoubleLongRegister indexUpdatesAndSize( SchemaDescriptor descriptor, DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-\n-    DoubleLongRegister indexSample( SchemaDescriptor descriptor, DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-\n-    boolean nodeExists( long id );\n+  /**\n+   * @return new {@link StorageStatement}, which can be used after a call to {@link StorageStatement#acquire()}.\n+   */\n+  StorageStatement newStatement();\n+\n+  /**\n+   * @param labelId label to list indexes for.\n+   * @return {@link SchemaIndexDescriptor} associated with the given {@code labelId}.\n+   */\n+  Iterator<SchemaIndexDescriptor> indexesGetForLabel(int labelId);\n+\n+  /**\n+   * @return all {@link SchemaIndexDescriptor} in storage.\n+   */\n+  Iterator<SchemaIndexDescriptor> indexesGetAll();\n+\n+  /**\n+   * Returns all indexes (including unique) related to a property.\n+   */\n+  Iterator<SchemaIndexDescriptor> indexesGetRelatedToProperty(int propertyId);\n+\n+  /**\n+   * @param index {@link SchemaIndexDescriptor} to get related uniqueness constraint for.\n+   * @return schema rule id of uniqueness constraint that owns the given {@code index}, or {@code null}\n+   * if the given index isn't related to a uniqueness constraint.\n+   */\n+  Long indexGetOwningUniquenessConstraintId(SchemaIndexDescriptor index);\n+\n+  /**\n+   * @param index {@link SchemaIndexDescriptor} to get schema rule id for.\n+   * @return schema rule id for matching index.\n+   * @throws SchemaRuleNotFoundException if no such index exists in storage.\n+   */\n+  long indexGetCommittedId(SchemaIndexDescriptor index)\n+      throws SchemaRuleNotFoundException;\n+\n+  /**\n+   * @return iterator with property keys of all stored graph properties.\n+   */\n+  PrimitiveIntIterator graphGetPropertyKeys();\n+\n+  /**\n+   * @param propertyKeyId property key id to get graph property for.\n+   * @return property value of graph property with key {@code propertyKeyId}, or {@code null} if not found.\n+   */\n+  Object graphGetProperty(int propertyKeyId);\n+\n+  /**\n+   * @return all stored graph properties.\n+   */\n+  Iterator<StorageProperty> graphGetAllProperties();\n+\n+  /**\n+   * @param descriptor describing the label and property key (or keys) defining the requested constraint.\n+   * @return node property constraints associated with the label and one or more property keys token ids.\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetForSchema(SchemaDescriptor descriptor);\n+\n+  boolean constraintExists(ConstraintDescriptor descriptor);\n+\n+  /**\n+   * @param labelId label token id.\n+   * @return node property constraints associated with the label token id.\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetForLabel(int labelId);\n+\n+  /**\n+   * @param typeId relationship type token id .\n+   * @return relationship property constraints associated with the relationship type token id.\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetForRelationshipType(int typeId);\n+\n+  /**\n+   * @return all stored property constraints.\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetAll();\n+\n+  /**\n+   * @param statement An already acquired {@link StorageStatement} with access to store.\n+   * @param labelId   The label id of interest.\n+   * @return {@link PrimitiveLongResourceIterator} over node ids associated with given label id.\n+   */\n+  PrimitiveLongResourceIterator nodesGetForLabel(StorageStatement statement, int labelId);\n+\n+  /**\n+   * Looks for a stored index by given {@code descriptor}\n+   *\n+   * @param descriptor a description of the index.\n+   * @return {@link SchemaIndexDescriptor} for matching index, or {@code null} if not found.\n+   */\n+  SchemaIndexDescriptor indexGetForSchema(SchemaDescriptor descriptor);\n+\n+  /**\n+   * Returns state of a stored index.\n+   *\n+   * @param descriptor {@link SchemaIndexDescriptor} to get state for.\n+   * @return {@link InternalIndexState} for index.\n+   * @throws IndexNotFoundKernelException if index not found.\n+   */\n+  InternalIndexState indexGetState(SchemaIndexDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Return index provider descriptor of a stored index.\n+   *\n+   * @param descriptor {@link SchemaIndexDescriptor} to get provider descriptor for.\n+   * @return {@link IndexProvider.Descriptor} for index.\n+   * @throws IndexNotFoundKernelException if index not found.\n+   */\n+  IndexProvider.Descriptor indexGetProviderDescriptor(SchemaIndexDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Return index reference of a stored index.\n+   *\n+   * @param descriptor {@link SchemaIndexDescriptor} to get provider reference for.\n+   * @return {@link IndexProvider.Descriptor} for index.\n+   * @throws IndexNotFoundKernelException if index not found.\n+   */\n+  CapableIndexReference indexReference(SchemaIndexDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * @param descriptor {@link SchemaDescriptor} to get population progress for.\n+   * @return progress of index population, which is the initial state of an index when it's created.\n+   * @throws IndexNotFoundKernelException if index not found.\n+   */\n+  PopulationProgress indexGetPopulationProgress(SchemaDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Returns any failure that happened during population or operation of an index. Such failures\n+   * are persisted and can be accessed even after restart.\n+   *\n+   * @param descriptor {@link SchemaDescriptor} to get failure for.\n+   * @return failure of an index, or {@code null} if index is working as it should.\n+   * @throws IndexNotFoundKernelException if index not found.\n+   */\n+  String indexGetFailure(SchemaDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * @param labelName name of label.\n+   * @return token id of label.\n+   */\n+  int labelGetForName(String labelName);\n+\n+  /**\n+   * @param labelId label id to get name for.\n+   * @return label name for given label id.\n+   * @throws LabelNotFoundKernelException if no label by {@code labelId} was found.\n+   */\n+  String labelGetName(int labelId) throws LabelNotFoundKernelException;\n+\n+  /**\n+   * @param propertyKeyName name of property key.\n+   * @return token id of property key.\n+   */\n+  int propertyKeyGetForName(String propertyKeyName);\n+\n+  /**\n+   * Gets property key token id for the given {@code propertyKeyName}, or creates one if there is no\n+   * existing property key with the given name.\n+   *\n+   * @param propertyKeyName name of property key.\n+   * @return property key token id for the given name, created if need be.\n+   */\n+  int propertyKeyGetOrCreateForName(String propertyKeyName);\n+\n+  /**\n+   * @param propertyKeyId property key to get name for.\n+   * @return property key name for given property key id.\n+   * @throws PropertyKeyIdNotFoundKernelException if no property key by {@code propertyKeyId} was found.\n+   */\n+  String propertyKeyGetName(int propertyKeyId) throws PropertyKeyIdNotFoundKernelException;\n+\n+  /**\n+   * @return all stored property key tokens.\n+   */\n+  Iterator<Token> propertyKeyGetAllTokens();\n+\n+  /**\n+   * @return all stored label tokens.\n+   */\n+  Iterator<Token> labelsGetAllTokens();\n+\n+  /**\n+   * @return all stored relationship type tokens.\n+   */\n+  Iterator<Token> relationshipTypeGetAllTokens();\n+\n+  /**\n+   * @param relationshipTypeName name of relationship type.\n+   * @return token id of relationship type.\n+   */\n+  int relationshipTypeGetForName(String relationshipTypeName);\n+\n+  /**\n+   * @param relationshipTypeId relationship type id to get name for.\n+   * @return relationship type name of given relationship type id.\n+   * @throws RelationshipTypeIdNotFoundKernelException if no label by {@code labelId} was found.\n+   */\n+  String relationshipTypeGetName(int relationshipTypeId) throws RelationshipTypeIdNotFoundKernelException;\n+\n+  /**\n+   * Gets label token id for the given {@code labelName}, or creates one if there is no\n+   * existing label with the given name.\n+   *\n+   * @param labelName name of label.\n+   * @return label token id for the given name, created if need be.\n+   * @throws TooManyLabelsException if creating this label would have exceeded storage limitations for\n+   *                                number of stored labels.\n+   */\n+  int labelGetOrCreateForName(String labelName) throws TooManyLabelsException;\n+\n+  /**\n+   * Gets relationship type token id for the given {@code relationshipTypeName}, or creates one if there is no\n+   * existing relationship type with the given name.\n+   *\n+   * @param relationshipTypeName name of relationship type.\n+   * @return relationship type token id for the given name, created if need be.\n+   */\n+  int relationshipTypeGetOrCreateForName(String relationshipTypeName);\n+\n+  /**\n+   * Visits data about a relationship. The given {@code relationshipVisitor} will be notified.\n+   *\n+   * @param relationshipId      the id of the relationship to access.\n+   * @param relationshipVisitor {@link RelationshipVisitor} which will see the relationship data.\n+   * @throws EntityNotFoundException if no relationship exists by the given {@code relationshipId}.\n+   */\n+  <EXCEPTION extends Exception> void relationshipVisit(long relationshipId,\n+                                                       RelationshipVisitor<EXCEPTION> relationshipVisitor) throws EntityNotFoundException, EXCEPTION;\n+\n+  /**\n+   * @return ids of all stored nodes.\n+   */\n+  PrimitiveLongIterator nodesGetAll();\n+\n+  /**\n+   * @return ids of all stored relationships. The returned iterator can optionally visit data about\n+   * each relationship returned.\n+   */\n+  RelationshipIterator relationshipsGetAll();\n+\n+  Cursor<RelationshipItem> nodeGetRelationships(StorageStatement statement, NodeItem nodeItem, Direction direction);\n+\n+  Cursor<RelationshipItem> nodeGetRelationships(StorageStatement statement, NodeItem nodeItem, Direction direction,\n+                                                IntPredicate typeIds);\n+\n+  Cursor<PropertyItem> nodeGetProperties(StorageStatement statement, NodeItem node, AssertOpen assertOpen);\n+\n+  Cursor<PropertyItem> nodeGetProperty(StorageStatement statement, NodeItem node, int propertyKeyId,\n+                                       AssertOpen assertOpen);\n+\n+  Cursor<PropertyItem> relationshipGetProperties(StorageStatement statement, RelationshipItem relationship,\n+                                                 AssertOpen assertOpen);\n+\n+  Cursor<PropertyItem> relationshipGetProperty(StorageStatement statement, RelationshipItem relationshipItem,\n+                                               int propertyKeyId, AssertOpen assertOpen);\n+\n+  /**\n+   * Releases a previously {@link StorageStatement#reserveNode() reserved} node id if it turns out to not actually being used,\n+   * for example in the event of a transaction rolling back.\n+   *\n+   * @param id reserved node id to release.\n+   */\n+  void releaseNode(long id);\n+\n+  /**\n+   * Releases a previously {@link StorageStatement#reserveRelationship() reserved} relationship id if it turns out to not\n+   * actually being used, for example in the event of a transaction rolling back.\n+   *\n+   * @param id reserved relationship id to release.\n+   */\n+  void releaseRelationship(long id);\n+\n+  /**\n+   * Returns number of stored nodes labeled with the label represented by {@code labelId}.\n+   *\n+   * @param labelId label id to match.\n+   * @return number of stored nodes with this label.\n+   */\n+  long countsForNode(int labelId);\n+\n+  /**\n+   * Returns number of stored relationships of a certain {@code typeId} whose start/end nodes are labeled\n+   * with the {@code startLabelId} and {@code endLabelId} respectively.\n+   *\n+   * @param startLabelId label id of start nodes to match.\n+   * @param typeId       relationship type id to match.\n+   * @param endLabelId   label id of end nodes to match.\n+   * @return number of stored relationships matching these criteria.\n+   */\n+  long countsForRelationship(int startLabelId, int typeId, int endLabelId);\n+\n+  /**\n+   * Returns size of index, i.e. number of entities in that index.\n+   *\n+   * @param descriptor {@link SchemaDescriptor} to return size for.\n+   * @return number of entities in the given index.\n+   * @throws IndexNotFoundKernelException if no such index exists.\n+   */\n+  long indexSize(SchemaDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Returns percentage of values in the given {@code index} are unique. A value of {@code 1.0} means that\n+   * all values in the index are unique, e.g. that there are no duplicate values. A value of, say {@code 0.9}\n+   * means that 10% of the values are duplicates.\n+   *\n+   * @param descriptor {@link SchemaDescriptor} to get uniqueness percentage for.\n+   * @return percentage of values being unique in this index, max {@code 1.0} for all unique.\n+   * @throws IndexNotFoundKernelException if no such index exists.\n+   */\n+  double indexUniqueValuesPercentage(SchemaDescriptor descriptor) throws IndexNotFoundKernelException;\n+\n+  long nodesGetCount();\n+\n+  long relationshipsGetCount();\n+\n+  int labelCount();\n+\n+  int propertyKeyCount();\n+\n+  int relationshipTypeCount();\n+\n+  DoubleLongRegister indexUpdatesAndSize(SchemaDescriptor descriptor, DoubleLongRegister target)\n+      throws IndexNotFoundKernelException;\n+\n+  DoubleLongRegister indexSample(SchemaDescriptor descriptor, DoubleLongRegister target)\n+      throws IndexNotFoundKernelException;\n+\n+  boolean nodeExists(long id);\n \n-    boolean relationshipExists( long id );\n-\n-    PrimitiveIntSet relationshipTypes( StorageStatement statement, NodeItem node );\n+  boolean relationshipExists(long id);\n+\n+  PrimitiveIntSet relationshipTypes(StorageStatement statement, NodeItem node);\n \n-    void degrees( StorageStatement statement, NodeItem nodeItem, DegreeVisitor visitor );\n-\n-    int degreeRelationshipsInGroup( StorageStatement storeStatement, long id, long groupId, Direction direction,\n-            Integer relType );\n+  void degrees(StorageStatement statement, NodeItem nodeItem, DegreeVisitor visitor);\n+\n+  int degreeRelationshipsInGroup(StorageStatement storeStatement, long id, long groupId, Direction direction,\n+                                 Integer relType);\n \n-    <T> T getOrCreateSchemaDependantState( Class<T> type, Function<StoreReadLayer, T> factory );\n+  <T> T getOrCreateSchemaDependantState(Class<T> type, Function<StoreReadLayer, T> factory);\n }\n",
            "diff_size": 338
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "282",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "382",
                    "column": "31",
                    "severity": "error",
                    "message": "'<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "382",
                    "column": "121",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1019/StoreReadLayer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1019/StoreReadLayer.java\nindex 26320bede21..3eeeff6a567 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1019/StoreReadLayer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1019/StoreReadLayer.java\n@@ -86,10 +86,9 @@ public interface StoreReadLayer\n      * @return schema rule id for matching index.\n      * @throws SchemaRuleNotFoundException if no such index exists in storage.\n      */\n-    long indexGetCommittedId( SchemaIndexDescriptor index )\n-            throws SchemaRuleNotFoundException;\n+    long indexGetCommittedId( SchemaIndexDescriptor index ) throws SchemaRuleNotFoundException;\n \n-    /**\n+/**\n      * @return iterator with property keys of all stored graph properties.\n      */\n     PrimitiveIntIterator graphGetPropertyKeys();\n@@ -280,10 +279,9 @@ public interface StoreReadLayer\n      * @param relationshipVisitor {@link RelationshipVisitor} which will see the relationship data.\n      * @throws EntityNotFoundException if no relationship exists by the given {@code relationshipId}.\n      */\n-    <EXCEPTION extends Exception> void relationshipVisit( long relationshipId,\n-            RelationshipVisitor<EXCEPTION> relationshipVisitor ) throws EntityNotFoundException, EXCEPTION;\n+    <EXCEPTION extends Exception> void relationshipVisit( long relationshipId, RelationshipVisitor<EXCEPTION> relationshipVisitor ) throws EntityNotFoundException, EXCEPTION;\n \n-    /**\n+/**\n      * @return ids of all stored nodes.\n      */\n     PrimitiveLongIterator nodesGetAll();\n@@ -298,19 +296,15 @@ public interface StoreReadLayer\n \n     Cursor<RelationshipItem> nodeGetRelationships( StorageStatement statement, NodeItem nodeItem, Direction direction,\n             IntPredicate typeIds );\n-\n-    Cursor<PropertyItem> nodeGetProperties( StorageStatement statement, NodeItem node, AssertOpen assertOpen );\n+Cursor<PropertyItem> nodeGetProperties( StorageStatement statement, NodeItem node, AssertOpen assertOpen );\n \n     Cursor<PropertyItem> nodeGetProperty( StorageStatement statement, NodeItem node, int propertyKeyId,\n             AssertOpen assertOpen );\n-\n-    Cursor<PropertyItem> relationshipGetProperties( StorageStatement statement, RelationshipItem relationship,\n+Cursor<PropertyItem> relationshipGetProperties( StorageStatement statement, RelationshipItem relationship,\n             AssertOpen assertOpen );\n+Cursor<PropertyItem> relationshipGetProperty( StorageStatement statement, RelationshipItem relationshipItem, int propertyKeyId, AssertOpen assertOpen );\n \n-    Cursor<PropertyItem> relationshipGetProperty( StorageStatement statement, RelationshipItem relationshipItem,\n-            int propertyKeyId, AssertOpen assertOpen );\n-\n-    /**\n+/**\n      * Releases a previously {@link StorageStatement#reserveNode() reserved} node id if it turns out to not actually being used,\n      * for example in the event of a transaction rolling back.\n      *\n@@ -375,22 +369,15 @@ public interface StoreReadLayer\n \n     int relationshipTypeCount();\n \n-    DoubleLongRegister indexUpdatesAndSize( SchemaDescriptor descriptor, DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-\n-    DoubleLongRegister indexSample( SchemaDescriptor descriptor, DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-\n+    DoubleLongRegister indexUpdatesAndSize( SchemaDescriptor descriptor, DoubleLongRegister target ) throws IndexNotFoundKernelException;\n+DoubleLongRegister indexSample( SchemaDescriptor descriptor, DoubleLongRegister target ) throws IndexNotFoundKernelException;\n     boolean nodeExists( long id );\n \n     boolean relationshipExists( long id );\n-\n-    PrimitiveIntSet relationshipTypes( StorageStatement statement, NodeItem node );\n+PrimitiveIntSet relationshipTypes( StorageStatement statement, NodeItem node );\n \n     void degrees( StorageStatement statement, NodeItem nodeItem, DegreeVisitor visitor );\n \n     int degreeRelationshipsInGroup( StorageStatement storeStatement, long id, long groupId, Direction direction,\n-            Integer relType );\n-\n-    <T> T getOrCreateSchemaDependantState( Class<T> type, Function<StoreReadLayer, T> factory );\n-}\n+            Integer relType );<T> T getOrCreateSchemaDependantState( Class<T> type, Function<StoreReadLayer,T> factory );\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}