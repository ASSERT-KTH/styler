{
    "project_name": "Activiti-Activiti",
    "error_id": "156",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.deployer;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/156/TimerManager.java\nindex 84d5f14f1ad..36cc72496ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/156/TimerManager.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/156/TimerManager.java\nindex 84d5f14f1ad..ffbd2537245 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/156/TimerManager.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.util.ArrayList;\n@@ -34,63 +35,63 @@ import org.activiti.engine.impl.util.CollectionUtil;\n  * Manages timers for newly-deployed process definitions and their previous versions.\n  */\n public class TimerManager {\n-  \n-  protected void removeObsoleteTimers(ProcessDefinitionEntity processDefinition) {\n-    List<TimerJobEntity> jobsToDelete = null;\n \n-    if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {\n-      jobsToDelete = Context.getCommandContext().getTimerJobEntityManager().findJobsByTypeAndProcessDefinitionKeyAndTenantId(\n-          TimerStartEventJobHandler.TYPE, processDefinition.getKey(), processDefinition.getTenantId());\n-    } else {\n-      jobsToDelete = Context.getCommandContext().getTimerJobEntityManager()\n-          .findJobsByTypeAndProcessDefinitionKeyNoTenantId(TimerStartEventJobHandler.TYPE, processDefinition.getKey());\n-    }\n+    protected void removeObsoleteTimers(ProcessDefinitionEntity processDefinition) {\n+        List<TimerJobEntity> jobsToDelete = null;\n+\n+        if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {\n+            jobsToDelete = Context.getCommandContext().getTimerJobEntityManager().findJobsByTypeAndProcessDefinitionKeyAndTenantId(\n+                    TimerStartEventJobHandler.TYPE, processDefinition.getKey(), processDefinition.getTenantId());\n+        } else {\n+            jobsToDelete = Context.getCommandContext().getTimerJobEntityManager()\n+                    .findJobsByTypeAndProcessDefinitionKeyNoTenantId(TimerStartEventJobHandler.TYPE, processDefinition.getKey());\n+        }\n \n-    if (jobsToDelete != null) {\n-      for (TimerJobEntity job :jobsToDelete) {\n-        new CancelJobsCmd(job.getId()).execute(Context.getCommandContext());\n-      }\n+        if (jobsToDelete != null) {\n+            for (TimerJobEntity job : jobsToDelete) {\n+                new CancelJobsCmd(job.getId()).execute(Context.getCommandContext());\n+            }\n+        }\n     }\n-  }\n-  \n-  protected void scheduleTimers(ProcessDefinitionEntity processDefinition, Process process) {\n-    JobManager jobManager = Context.getCommandContext().getJobManager();\n-    List<TimerJobEntity> timers = getTimerDeclarations(processDefinition, process);\n-    for (TimerJobEntity timer : timers) {\n-      jobManager.scheduleTimerJob(timer);\n+\n+    protected void scheduleTimers(ProcessDefinitionEntity processDefinition, Process process) {\n+        JobManager jobManager = Context.getCommandContext().getJobManager();\n+        List<TimerJobEntity> timers = getTimerDeclarations(processDefinition, process);\n+        for (TimerJobEntity timer : timers) {\n+            jobManager.scheduleTimerJob(timer);\n+        }\n     }\n-  }\n-  \n-  protected List<TimerJobEntity> getTimerDeclarations(ProcessDefinitionEntity processDefinition, Process process) {\n-    JobManager jobManager = Context.getCommandContext().getJobManager();\n-    List<TimerJobEntity> timers = new ArrayList<TimerJobEntity>();\n-    if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-      for (FlowElement element : process.getFlowElements()) {\n-        if (element instanceof StartEvent) {\n-          StartEvent startEvent = (StartEvent) element;\n-          if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-            EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-            if (eventDefinition instanceof TimerEventDefinition) {\n-              TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;\n-              TimerJobEntity timerJob = jobManager.createTimerJob(timerEventDefinition, false, null, TimerStartEventJobHandler.TYPE,\n-                  TimerEventHandler.createConfiguration(startEvent.getId(), timerEventDefinition.getEndDate(), timerEventDefinition.getCalendarName()));\n \n-              if (timerJob != null) {\n-                timerJob.setProcessDefinitionId(processDefinition.getId());\n+    protected List<TimerJobEntity> getTimerDeclarations(ProcessDefinitionEntity processDefinition, Process process) {\n+        JobManager jobManager = Context.getCommandContext().getJobManager();\n+        List<TimerJobEntity> timers = new ArrayList<TimerJobEntity>();\n+        if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n+            for (FlowElement element : process.getFlowElements()) {\n+                if (element instanceof StartEvent) {\n+                    StartEvent startEvent = (StartEvent) element;\n+                    if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+                        if (eventDefinition instanceof TimerEventDefinition) {\n+                            TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;\n+                            TimerJobEntity timerJob = jobManager.createTimerJob(timerEventDefinition, false, null, TimerStartEventJobHandler.TYPE,\n+                                    TimerEventHandler.createConfiguration(startEvent.getId(), timerEventDefinition.getEndDate(), timerEventDefinition.getCalendarName()));\n \n-                if (processDefinition.getTenantId() != null) {\n-                  timerJob.setTenantId(processDefinition.getTenantId());\n-                }\n-                timers.add(timerJob);\n-              }\n+                            if (timerJob != null) {\n+                                timerJob.setProcessDefinitionId(processDefinition.getId());\n+\n+                                if (processDefinition.getTenantId() != null) {\n+                                    timerJob.setTenantId(processDefinition.getTenantId());\n+                                }\n+                                timers.add(timerJob);\n+                            }\n \n+                        }\n+                    }\n+                }\n             }\n-          }\n         }\n-      }\n-    }\n \n-    return timers;\n-  }\n+        return timers;\n+    }\n }\n \n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 269).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/156/TimerManager.java\nindex 84d5f14f1ad..539b8fb56c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/156/TimerManager.java\n@@ -14,7 +14,6 @@ package org.activiti.engine.impl.bpmn.deployer;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.activiti.bpmn.model.EventDefinition;\n import org.activiti.bpmn.model.FlowElement;\n import org.activiti.bpmn.model.Process;\n@@ -33,64 +32,57 @@ import org.activiti.engine.impl.util.CollectionUtil;\n /**\n  * Manages timers for newly-deployed process definitions and their previous versions.\n  */\n+\n+\n public class TimerManager {\n-  \n+\n   protected void removeObsoleteTimers(ProcessDefinitionEntity processDefinition) {\n     List<TimerJobEntity> jobsToDelete = null;\n-\n     if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {\n-      jobsToDelete = Context.getCommandContext().getTimerJobEntityManager().findJobsByTypeAndProcessDefinitionKeyAndTenantId(\n-          TimerStartEventJobHandler.TYPE, processDefinition.getKey(), processDefinition.getTenantId());\n+      jobsToDelete = Context.getCommandContext().getTimerJobEntityManager().findJobsByTypeAndProcessDefinitionKeyAndTenantId(TimerStartEventJobHandler.TYPE, processDefinition.getKey(), processDefinition.getTenantId());\n     } else {\n-      jobsToDelete = Context.getCommandContext().getTimerJobEntityManager()\n-          .findJobsByTypeAndProcessDefinitionKeyNoTenantId(TimerStartEventJobHandler.TYPE, processDefinition.getKey());\n+      jobsToDelete = Context.getCommandContext().getTimerJobEntityManager().findJobsByTypeAndProcessDefinitionKeyNoTenantId(TimerStartEventJobHandler.TYPE,\n+                                                                                                                            processDefinition.getKey());\n     }\n-\n     if (jobsToDelete != null) {\n-      for (TimerJobEntity job :jobsToDelete) {\n-        new CancelJobsCmd(job.getId()).execute(Context.getCommandContext());\n-      }\n+        for (TimerJobEntity job : jobsToDelete) {\n+            new CancelJobsCmd(job.getId()).execute(Context.getCommandContext());\n+        }\n     }\n   }\n-  \n+\n   protected void scheduleTimers(ProcessDefinitionEntity processDefinition, Process process) {\n     JobManager jobManager = Context.getCommandContext().getJobManager();\n     List<TimerJobEntity> timers = getTimerDeclarations(processDefinition, process);\n     for (TimerJobEntity timer : timers) {\n-      jobManager.scheduleTimerJob(timer);\n+        jobManager.scheduleTimerJob(timer);\n     }\n   }\n-  \n+\n   protected List<TimerJobEntity> getTimerDeclarations(ProcessDefinitionEntity processDefinition, Process process) {\n     JobManager jobManager = Context.getCommandContext().getJobManager();\n     List<TimerJobEntity> timers = new ArrayList<TimerJobEntity>();\n     if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-      for (FlowElement element : process.getFlowElements()) {\n-        if (element instanceof StartEvent) {\n-          StartEvent startEvent = (StartEvent) element;\n-          if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-            EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-            if (eventDefinition instanceof TimerEventDefinition) {\n-              TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;\n-              TimerJobEntity timerJob = jobManager.createTimerJob(timerEventDefinition, false, null, TimerStartEventJobHandler.TYPE,\n-                  TimerEventHandler.createConfiguration(startEvent.getId(), timerEventDefinition.getEndDate(), timerEventDefinition.getCalendarName()));\n-\n-              if (timerJob != null) {\n-                timerJob.setProcessDefinitionId(processDefinition.getId());\n-\n-                if (processDefinition.getTenantId() != null) {\n-                  timerJob.setTenantId(processDefinition.getTenantId());\n+        for (FlowElement element : process.getFlowElements()) {\n+          if (element instanceof StartEvent) {\n+            StartEvent startEvent = (StartEvent) element;\n+            if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+              EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+              if (eventDefinition instanceof TimerEventDefinition) {\n+                TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;\n+                TimerJobEntity timerJob = jobManager.createTimerJob(timerEventDefinition, false, null, TimerStartEventJobHandler.TYPE, TimerEventHandler.createConfiguration(startEvent.getId(), timerEventDefinition.getEndDate(), timerEventDefinition.getCalendarName()));\n+                if (timerJob != null) {\n+                  timerJob.setProcessDefinitionId(processDefinition.getId());\n+                  if (processDefinition.getTenantId() != null) {\n+                    timerJob.setTenantId(processDefinition.getTenantId());\n+                  }\n+                  timers.add(timerJob);\n                 }\n-                timers.add(timerJob);\n               }\n-\n             }\n           }\n         }\n-      }\n     }\n-\n     return timers;\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/156/TimerManager.java\nindex 84d5f14f1ad..36cc72496ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/156/TimerManager.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/156/TimerManager.java\nindex 84d5f14f1ad..36cc72496ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/156/TimerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/156/TimerManager.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}