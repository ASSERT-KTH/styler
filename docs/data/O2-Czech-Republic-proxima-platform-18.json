{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 97).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * Life-cycle method called after being instantiated to be able to parameterize itself from the\n   * given {@link EntityDescriptor}.\n   *\n   * @param entityDescriptor the entity that this serializer will be used for",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/18/ElementSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/18/ElementSerializer.java\nindex 56711ca9727..59ad3a5691d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/18/ElementSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/18/ElementSerializer.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.kafka;\n \n import cz.o2.proxima.repository.EntityDescriptor;\n@@ -37,7 +38,8 @@ public interface ElementSerializer<K, V> extends Serializable {\n    *\n    * @param entityDescriptor the entity that this serializer will be used for\n    */\n-  default void setup(EntityDescriptor entityDescriptor) {}\n+  default void setup(EntityDescriptor entityDescriptor) {\n+  }\n \n   /**\n    * Parse the raw bytes from Kafka and return a {@link StreamElement}.\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/18/ElementSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/18/ElementSerializer.java\nindex 56711ca9727..22b4ddb6b56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/18/ElementSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/18/ElementSerializer.java\n@@ -80,4 +80,4 @@ public interface ElementSerializer<K, V> extends Serializable {\n   default boolean storesSequentialId() {\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/18/ElementSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/18/ElementSerializer.java\nindex 56711ca9727..c2eaf32b55a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/18/ElementSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/18/ElementSerializer.java\n@@ -29,6 +29,8 @@ import org.apache.kafka.common.serialization.Serde;\n  * @param <K> type of key read from Kafka\n  * @param <V> type of value read from Kafka\n  */\n+\n+\n public interface ElementSerializer<K, V> extends Serializable {\n \n   /**\n@@ -37,6 +39,8 @@ public interface ElementSerializer<K, V> extends Serializable {\n    *\n    * @param entityDescriptor the entity that this serializer will be used for\n    */\n+\n+\n   default void setup(EntityDescriptor entityDescriptor) {}\n \n   /**\n@@ -46,6 +50,8 @@ public interface ElementSerializer<K, V> extends Serializable {\n    * @param entityDesc descriptor of entity being read\n    * @return the {@link StreamElement} or null on parse error\n    */\n+\n+\n   @Nullable\n   StreamElement read(ConsumerRecord<K, V> record, EntityDescriptor entityDesc);\n \n@@ -57,6 +63,8 @@ public interface ElementSerializer<K, V> extends Serializable {\n    * @param element the {@link StreamElement} to convert\n    * @return the {@link ProducerRecord} to write to Kafka\n    */\n+\n+\n   ProducerRecord<K, V> write(String topic, int partition, StreamElement element);\n \n   /**\n@@ -64,6 +72,8 @@ public interface ElementSerializer<K, V> extends Serializable {\n    *\n    * @return {@link Serde} for key\n    */\n+\n+\n   Serde<K> keySerde();\n \n   /**\n@@ -71,13 +81,17 @@ public interface ElementSerializer<K, V> extends Serializable {\n    *\n    * @return {@link Serde} for value\n    */\n+\n+\n   Serde<V> valueSerde();\n \n   /**\n    * @return {@code true} if this serializer reads and writes sequential IDs of {@link\n    *     StreamElement} (if any).\n    */\n+\n+\n   default boolean storesSequentialId() {\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}