{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "125",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 91).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class StreamElementCoderTest {\n\n  private final Repository repo = Repository.of(ConfigFactory.load(\"test-reference.conf\"));\n  private final Coder<StreamElement> coder = StreamElementCoder.of(repo);\n\n  @Test",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/125/StreamElementCoderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/125/StreamElementCoderTest.java\nindex 94847134305..a4fb11d45af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/125/StreamElementCoderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/125/StreamElementCoderTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.core.io;\n \n import static org.junit.Assert.assertTrue;\n@@ -32,7 +33,8 @@ import org.junit.Test;\n /** Test suite for {@link StreamElementCoder}. */\n public class StreamElementCoderTest {\n \n-  private final Repository repo = Repository.of(ConfigFactory.load(\"test-reference.conf\"));\n+  private final Repository repo =\n+      Repository.of(ConfigFactory.load(\"test-reference.conf\"));\n   private final Coder<StreamElement> coder = StreamElementCoder.of(repo);\n \n   @Test\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/125/StreamElementCoderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/125/StreamElementCoderTest.java\nindex 94847134305..2e2d24277f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/125/StreamElementCoderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/125/StreamElementCoderTest.java\n@@ -44,8 +44,7 @@ public class StreamElementCoderTest {\n   public void testCoderOutputReasonableSize() throws IOException {\n     EntityDescriptor gateway = repo.getEntity(\"gateway\");\n     AttributeDescriptor<Object> armed = gateway.getAttribute(\"armed\");\n-    StreamElement element =\n-        StreamElement.upsert(\n+    StreamElement element = StreamElement.upsert(\n             gateway,\n             armed,\n             \"key\",\n@@ -57,4 +56,4 @@ public class StreamElementCoderTest {\n     coder.encode(element, baos);\n     assertTrue(baos.toByteArray().length < 100);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/125/StreamElementCoderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/125/StreamElementCoderTest.java\nindex 94847134305..f4a7b80d6ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/125/StreamElementCoderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/125/StreamElementCoderTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.beam.core.io;\n \n import static org.junit.Assert.assertTrue;\n-\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.repository.AttributeDescriptor;\n import cz.o2.proxima.repository.EntityDescriptor;\n@@ -30,6 +29,8 @@ import org.apache.beam.sdk.coders.Coder;\n import org.junit.Test;\n \n /** Test suite for {@link StreamElementCoder}. */\n+\n+\n public class StreamElementCoderTest {\n \n   private final Repository repo = Repository.of(ConfigFactory.load(\"test-reference.conf\"));\n@@ -44,17 +45,15 @@ public class StreamElementCoderTest {\n   public void testCoderOutputReasonableSize() throws IOException {\n     EntityDescriptor gateway = repo.getEntity(\"gateway\");\n     AttributeDescriptor<Object> armed = gateway.getAttribute(\"armed\");\n-    StreamElement element =\n-        StreamElement.upsert(\n-            gateway,\n-            armed,\n-            \"key\",\n-            UUID.randomUUID().toString(),\n-            armed.getName(),\n-            System.currentTimeMillis(),\n-            new byte[] {1, 2, 3});\n+    StreamElement element = StreamElement.upsert(gateway,\n+                                                 armed,\n+                                                 \"key\",\n+                                                 UUID.randomUUID().toString(),\n+                                                 armed.getName(),\n+                                                 System.currentTimeMillis(),\n+                                                 new byte[]{1, 2, 3});\n     ByteArrayOutputStream baos = new ByteArrayOutputStream();\n     coder.encode(element, baos);\n     assertTrue(baos.toByteArray().length < 100);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}