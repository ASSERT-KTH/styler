{
    "project_name": "apache-ignite-3",
    "error_id": "79",
    "information": {
        "errors": [
            {
                "line": "172",
                "column": "9",
                "severity": "error",
                "message": "'while' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        long stop = System.currentTimeMillis() + timeout;\n\n        while(System.currentTimeMillis() < stop) {\n            if (cluster.allMembers().size() >= expected)\n                return true;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/79/ITRaftCounterServerTest.java\nindex 96eb52b1a25..3f25f337300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/79/ITRaftCounterServerTest.java\n@@ -169,7 +169,7 @@ class ITRaftCounterServerTest {\n     private boolean waitForTopology(NetworkCluster cluster, int expected, int timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cluster.allMembers().size() >= expected)\n                 return true;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/79/ITRaftCounterServerTest.java\nindex 96eb52b1a25..d596fec6a07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/79/ITRaftCounterServerTest.java\n@@ -39,148 +39,166 @@ import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-/** */\n+/**\n+ *\n+ */\n class ITRaftCounterServerTest {\n-    /** */\n-    private static LogWrapper LOG = new LogWrapper(ITRaftCounterServerTest.class);\n-\n-    /** */\n-    private static RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n-\n-    /** */\n-    private RaftServer server;\n-\n-    /** */\n-    private static final String SERVER_ID = \"testServer\";\n-\n-    /** */\n-    private static final String CLIENT_ID = \"testClient\";\n-\n-    /** */\n-    private static final String COUNTER_GROUP_ID_0 = \"counter0\";\n-\n-    /** */\n-    private static final String COUNTER_GROUP_ID_1 = \"counter1\";\n-\n-    /**\n-     * @param testInfo Test info.\n-     */\n-    @BeforeEach\n-    void before(TestInfo testInfo) throws Exception {\n-        LOG.info(\">>>> Starting test \" + testInfo.getTestMethod().orElseThrow().getName());\n-\n-        server = new RaftServerImpl(SERVER_ID,\n-            20100,\n-            FACTORY,\n-            1000,\n-            Map.of(COUNTER_GROUP_ID_0, new CounterCommandListener(), COUNTER_GROUP_ID_1, new CounterCommandListener()));\n-    }\n-\n-    /**\n-     * @throws Exception\n-     */\n-    @AfterEach\n-    void after() throws Exception {\n-        server.shutdown();\n-    }\n-\n-    /**\n-     * @throws Exception\n-     */\n-    @Test\n-    public void testRefreshLeader() throws Exception {\n-        NetworkCluster client = startClient(CLIENT_ID, 20101, List.of(\"localhost:20100\"));\n-\n-        assertTrue(waitForTopology(client, 2, 1000));\n-\n-        Peer server = new Peer(client.allMembers().stream().filter(m -> SERVER_ID.equals(m.name())).findFirst().orElseThrow());\n-\n-        RaftGroupService service = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000,\n-            List.of(server), true, 200);\n-\n-        Peer leader = service.leader();\n-\n-        assertNotNull(leader);\n-        assertEquals(server.getNode().name(), leader.getNode().name());\n-\n-        client.shutdown();\n-    }\n-\n-    /**\n-     * @throws Exception\n-     */\n-    @Test\n-    public void testCounterCommandListener() throws Exception {\n-        NetworkCluster client = startClient(CLIENT_ID, 20101, List.of(\"localhost:20100\"));\n-\n-        assertTrue(waitForTopology(client, 2, 1000));\n-\n-        Peer server = new Peer(client.allMembers().stream().filter(m -> SERVER_ID.equals(m.name())).findFirst().orElseThrow());\n-\n-        RaftGroupService service0 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000,\n-            List.of(server), true, 200);\n-\n-        RaftGroupService service1 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_1, client, FACTORY, 1000,\n-            List.of(server), true, 200);\n-\n-        assertNotNull(service0.leader());\n-        assertNotNull(service1.leader());\n-\n-        assertEquals(2, service0.<Integer>run(new IncrementAndGetCommand(2)).get());\n-        assertEquals(2, service0.<Integer>run(new GetValueCommand()).get());\n-        assertEquals(3, service0.<Integer>run(new IncrementAndGetCommand(1)).get());\n-        assertEquals(3, service0.<Integer>run(new GetValueCommand()).get());\n-\n-        assertEquals(4, service1.<Integer>run(new IncrementAndGetCommand(4)).get());\n-        assertEquals(4, service1.<Integer>run(new GetValueCommand()).get());\n-        assertEquals(7, service1.<Integer>run(new IncrementAndGetCommand(3)).get());\n-        assertEquals(7, service1.<Integer>run(new GetValueCommand()).get());\n-\n-        client.shutdown();\n-    }\n-\n-    /**\n-     * @param name Node name.\n-     * @param port Local port.\n-     * @param servers Server nodes of the cluster.\n-     * @return The client cluster view.\n-     */\n-    private NetworkCluster startClient(String name, int port, List<String> servers) {\n-        Network network = new Network(\n-            new ScaleCubeNetworkClusterFactory(name, port, servers, new ScaleCubeMemberResolver())\n-        );\n-\n-        // TODO: IGNITE-14088: Uncomment and use real serializer provider\n+  /**\n+   *\n+   */\n+  private static LogWrapper LOG = new LogWrapper(ITRaftCounterServerTest.class);\n+\n+  /**\n+   *\n+   */\n+  private static RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n+\n+  /**\n+   *\n+   */\n+  private RaftServer server;\n+\n+  /**\n+   *\n+   */\n+  private static final String SERVER_ID = \"testServer\";\n+\n+  /**\n+   *\n+   */\n+  private static final String CLIENT_ID = \"testClient\";\n+\n+  /**\n+   *\n+   */\n+  private static final String COUNTER_GROUP_ID_0 = \"counter0\";\n+\n+  /**\n+   *\n+   */\n+  private static final String COUNTER_GROUP_ID_1 = \"counter1\";\n+\n+  /**\n+   * @param testInfo Test info.\n+   */\n+  @BeforeEach\n+  void before(TestInfo testInfo) throws Exception {\n+    LOG.info(\">>>> Starting test \" + testInfo.getTestMethod().orElseThrow().getName());\n+\n+    server = new RaftServerImpl(SERVER_ID,\n+        20100,\n+        FACTORY,\n+        1000,\n+        Map.of(COUNTER_GROUP_ID_0, new CounterCommandListener(), COUNTER_GROUP_ID_1, new CounterCommandListener()));\n+  }\n+\n+  /**\n+   * @throws Exception\n+   */\n+  @AfterEach\n+  void after() throws Exception {\n+    server.shutdown();\n+  }\n+\n+  /**\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testRefreshLeader() throws Exception {\n+    NetworkCluster client = startClient(CLIENT_ID, 20101, List.of(\"localhost:20100\"));\n+\n+    assertTrue(waitForTopology(client, 2, 1000));\n+\n+    Peer server =\n+        new Peer(client.allMembers().stream().filter(m -> SERVER_ID.equals(m.name())).findFirst().orElseThrow());\n+\n+    RaftGroupService service = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000,\n+        List.of(server), true, 200);\n+\n+    Peer leader = service.leader();\n+\n+    assertNotNull(leader);\n+    assertEquals(server.getNode().name(), leader.getNode().name());\n+\n+    client.shutdown();\n+  }\n+\n+  /**\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testCounterCommandListener() throws Exception {\n+    NetworkCluster client = startClient(CLIENT_ID, 20101, List.of(\"localhost:20100\"));\n+\n+    assertTrue(waitForTopology(client, 2, 1000));\n+\n+    Peer server =\n+        new Peer(client.allMembers().stream().filter(m -> SERVER_ID.equals(m.name())).findFirst().orElseThrow());\n+\n+    RaftGroupService service0 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000,\n+        List.of(server), true, 200);\n+\n+    RaftGroupService service1 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_1, client, FACTORY, 1000,\n+        List.of(server), true, 200);\n+\n+    assertNotNull(service0.leader());\n+    assertNotNull(service1.leader());\n+\n+    assertEquals(2, service0.<Integer>run(new IncrementAndGetCommand(2)).get());\n+    assertEquals(2, service0.<Integer>run(new GetValueCommand()).get());\n+    assertEquals(3, service0.<Integer>run(new IncrementAndGetCommand(1)).get());\n+    assertEquals(3, service0.<Integer>run(new GetValueCommand()).get());\n+\n+    assertEquals(4, service1.<Integer>run(new IncrementAndGetCommand(4)).get());\n+    assertEquals(4, service1.<Integer>run(new GetValueCommand()).get());\n+    assertEquals(7, service1.<Integer>run(new IncrementAndGetCommand(3)).get());\n+    assertEquals(7, service1.<Integer>run(new GetValueCommand()).get());\n+\n+    client.shutdown();\n+  }\n+\n+  /**\n+   * @param name    Node name.\n+   * @param port    Local port.\n+   * @param servers Server nodes of the cluster.\n+   * @return The client cluster view.\n+   */\n+  private NetworkCluster startClient(String name, int port, List<String> servers) {\n+    Network network = new Network(\n+        new ScaleCubeNetworkClusterFactory(name, port, servers, new ScaleCubeMemberResolver())\n+    );\n+\n+    // TODO: IGNITE-14088: Uncomment and use real serializer provider\n //        network.registerMessageMapper((short)1000, new DefaultMessageMapperProvider());\n //        network.registerMessageMapper((short)1001, new DefaultMessageMapperProvider());\n //        network.registerMessageMapper((short)1005, new DefaultMessageMapperProvider());\n //        network.registerMessageMapper((short)1006, new DefaultMessageMapperProvider());\n //        network.registerMessageMapper((short)1009, new DefaultMessageMapperProvider());\n \n-        return network.start();\n-    }\n-\n-    /**\n-     * @param cluster The cluster.\n-     * @param expected Expected count.\n-     * @param timeout The timeout in millis.\n-     * @return {@code True} if topology size is equal to expected.\n-     */\n-    private boolean waitForTopology(NetworkCluster cluster, int expected, int timeout) {\n-        long stop = System.currentTimeMillis() + timeout;\n-\n-        while(System.currentTimeMillis() < stop) {\n-            if (cluster.allMembers().size() >= expected)\n-                return true;\n-\n-            try {\n-                Thread.sleep(50);\n-            }\n-            catch (InterruptedException e) {\n-                return false;\n-            }\n-        }\n-\n+    return network.start();\n+  }\n+\n+  /**\n+   * @param cluster  The cluster.\n+   * @param expected Expected count.\n+   * @param timeout  The timeout in millis.\n+   * @return {@code True} if topology size is equal to expected.\n+   */\n+  private boolean waitForTopology(NetworkCluster cluster, int expected, int timeout) {\n+    long stop = System.currentTimeMillis() + timeout;\n+\n+    while (System.currentTimeMillis() < stop) {\n+      if (cluster.allMembers().size() >= expected) {\n+        return true;\n+      }\n+\n+      try {\n+        Thread.sleep(50);\n+      } catch (InterruptedException e) {\n         return false;\n+      }\n     }\n+\n+    return false;\n+  }\n }\n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "67",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "72",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "77",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "102",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "137",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "182",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "203",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/79/ITRaftCounterServerTest.java\nindex 96eb52b1a25..113a03f2fc1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/79/ITRaftCounterServerTest.java\n@@ -40,67 +40,90 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /** */\n+\n class ITRaftCounterServerTest {\n     /** */\n+\n     private static LogWrapper LOG = new LogWrapper(ITRaftCounterServerTest.class);\n \n     /** */\n+\n+\n     private static RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n \n     /** */\n+\n+\n     private RaftServer server;\n \n     /** */\n+\n+\n     private static final String SERVER_ID = \"testServer\";\n \n     /** */\n+\n+\n     private static final String CLIENT_ID = \"testClient\";\n \n     /** */\n+\n+\n     private static final String COUNTER_GROUP_ID_0 = \"counter0\";\n \n     /** */\n+\n+\n     private static final String COUNTER_GROUP_ID_1 = \"counter1\";\n \n     /**\n      * @param testInfo Test info.\n      */\n-    @BeforeEach\n-    void before(TestInfo testInfo) throws Exception {\n-        LOG.info(\">>>> Starting test \" + testInfo.getTestMethod().orElseThrow().getName());\n \n-        server = new RaftServerImpl(SERVER_ID,\n+\n+    @BeforeEach void before(TestInfo testInfo) throws Exception {\n+        LOG.info(\">>>> Starting test \" + testInfo.getTestMethod().orElseThrow()\n+                                                                 .getName());\n+\n+        server = new RaftServerImpl(\n+            SERVER_ID,\n             20100,\n             FACTORY,\n             1000,\n-            Map.of(COUNTER_GROUP_ID_0, new CounterCommandListener(), COUNTER_GROUP_ID_1, new CounterCommandListener()));\n+            Map.of(COUNTER_GROUP_ID_0, new CounterCommandListener(), COUNTER_GROUP_ID_1, new CounterCommandListener())\n+        );\n     }\n \n     /**\n      * @throws Exception\n      */\n-    @AfterEach\n-    void after() throws Exception {\n+\n+\n+    @AfterEach void after() throws Exception {\n         server.shutdown();\n     }\n \n     /**\n      * @throws Exception\n      */\n-    @Test\n-    public void testRefreshLeader() throws Exception {\n+\n+\n+    @Test public void testRefreshLeader() throws Exception {\n         NetworkCluster client = startClient(CLIENT_ID, 20101, List.of(\"localhost:20100\"));\n \n         assertTrue(waitForTopology(client, 2, 1000));\n \n-        Peer server = new Peer(client.allMembers().stream().filter(m -> SERVER_ID.equals(m.name())).findFirst().orElseThrow());\n+        Peer server = new Peer(client.allMembers().stream()\n+                                                  .filter(m -> SERVER_ID.equals(m.name()))\n+                                                  .findFirst()\n+                                                  .orElseThrow());\n \n-        RaftGroupService service = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000,\n-            List.of(server), true, 200);\n+        RaftGroupService service = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000, List.of(server), true, 200);\n \n         Peer leader = service.leader();\n \n         assertNotNull(leader);\n+\n         assertEquals(server.getNode().name(), leader.getNode().name());\n \n         client.shutdown();\n@@ -109,31 +132,40 @@ class ITRaftCounterServerTest {\n     /**\n      * @throws Exception\n      */\n-    @Test\n-    public void testCounterCommandListener() throws Exception {\n+\n+\n+    @Test public void testCounterCommandListener() throws Exception {\n         NetworkCluster client = startClient(CLIENT_ID, 20101, List.of(\"localhost:20100\"));\n \n         assertTrue(waitForTopology(client, 2, 1000));\n \n-        Peer server = new Peer(client.allMembers().stream().filter(m -> SERVER_ID.equals(m.name())).findFirst().orElseThrow());\n+        Peer server = new Peer(client.allMembers().stream()\n+                                                  .filter(m -> SERVER_ID.equals(m.name()))\n+                                                  .findFirst()\n+                                                  .orElseThrow());\n \n-        RaftGroupService service0 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000,\n-            List.of(server), true, 200);\n+        RaftGroupService service0 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_0, client, FACTORY, 1000, List.of(server), true, 200);\n \n-        RaftGroupService service1 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_1, client, FACTORY, 1000,\n-            List.of(server), true, 200);\n+        RaftGroupService service1 = new RaftGroupServiceImpl(COUNTER_GROUP_ID_1, client, FACTORY, 1000, List.of(server), true, 200);\n \n         assertNotNull(service0.leader());\n+\n         assertNotNull(service1.leader());\n \n         assertEquals(2, service0.<Integer>run(new IncrementAndGetCommand(2)).get());\n+\n         assertEquals(2, service0.<Integer>run(new GetValueCommand()).get());\n+\n         assertEquals(3, service0.<Integer>run(new IncrementAndGetCommand(1)).get());\n+\n         assertEquals(3, service0.<Integer>run(new GetValueCommand()).get());\n \n         assertEquals(4, service1.<Integer>run(new IncrementAndGetCommand(4)).get());\n+\n         assertEquals(4, service1.<Integer>run(new GetValueCommand()).get());\n+\n         assertEquals(7, service1.<Integer>run(new IncrementAndGetCommand(3)).get());\n+\n         assertEquals(7, service1.<Integer>run(new GetValueCommand()).get());\n \n         client.shutdown();\n@@ -145,10 +177,10 @@ class ITRaftCounterServerTest {\n      * @param servers Server nodes of the cluster.\n      * @return The client cluster view.\n      */\n+\n+\n     private NetworkCluster startClient(String name, int port, List<String> servers) {\n-        Network network = new Network(\n-            new ScaleCubeNetworkClusterFactory(name, port, servers, new ScaleCubeMemberResolver())\n-        );\n+        Network network = new Network(new ScaleCubeNetworkClusterFactory(name, port, servers, new ScaleCubeMemberResolver()));\n \n         // TODO: IGNITE-14088: Uncomment and use real serializer provider\n //        network.registerMessageMapper((short)1000, new DefaultMessageMapperProvider());\n@@ -166,10 +198,12 @@ class ITRaftCounterServerTest {\n      * @param timeout The timeout in millis.\n      * @return {@code True} if topology size is equal to expected.\n      */\n+\n+\n     private boolean waitForTopology(NetworkCluster cluster, int expected, int timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cluster.allMembers().size() >= expected)\n                 return true;\n \n@@ -183,4 +217,4 @@ class ITRaftCounterServerTest {\n \n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/79/ITRaftCounterServerTest.java\nindex 96eb52b1a25..3f25f337300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/79/ITRaftCounterServerTest.java\n@@ -169,7 +169,7 @@ class ITRaftCounterServerTest {\n     private boolean waitForTopology(NetworkCluster cluster, int expected, int timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cluster.allMembers().size() >= expected)\n                 return true;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/79/ITRaftCounterServerTest.java\nindex 96eb52b1a25..3f25f337300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/79/ITRaftCounterServerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/79/ITRaftCounterServerTest.java\n@@ -169,7 +169,7 @@ class ITRaftCounterServerTest {\n     private boolean waitForTopology(NetworkCluster cluster, int expected, int timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cluster.allMembers().size() >= expected)\n                 return true;\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}