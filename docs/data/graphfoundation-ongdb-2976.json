{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2976",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2976/HopScotchHashingAlgorithm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2976/HopScotchHashingAlgorithm.java\nindex 83ed4f7a2e7..9044cc06b34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2976/HopScotchHashingAlgorithm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2976/HopScotchHashingAlgorithm.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.primitive.hopscotch;\n \n import org.neo4j.hashing.HashFunction;\n@@ -38,14 +39,14 @@ import static java.lang.Long.numberOfTrailingZeros;\n  * A neighbor can at most be {@code H} indexes away. This is the collision resolution method of choice\n  * for the hop scotch algorithm. Getting and putting entries at an index first checks the index at hand.\n  * If occupied by another entry its neighbors, dictated by the hop bits, are checked.\n- *\n+ * <p>\n  * When putting an entry and the index and all its neighbors are occupied, the hop scotching begins, where a free\n  * index further away is picked and iteratively moved closer and closer until it's within the neighborhood\n  * of the intended index. The entry is then placed at that newly \"freed\" index.\n- *\n+ * <p>\n  * Removing an entry will put some effort into do reverse hop scotching as well, i.e. moving a neighbor into\n  * the newly removed index and iteratively also move neighbors of the moved neighbor, and so forth.\n- *\n+ * <p>\n  * This behavior has the benefit of keeping entries hashing to the same index very close together,\n  * and so will take more advantage of CPU caches and pre-fetching in general, especially for lookups.\n  * </p>\n@@ -59,339 +60,337 @@ import static java.lang.Long.numberOfTrailingZeros;\n  */\n public class HopScotchHashingAlgorithm\n {\n-    /**\n-     * Default number of hop bits per index, i.e. size of neighborhood.\n-     */\n-    public static final int DEFAULT_H = 32;\n-\n-    private HopScotchHashingAlgorithm()\n-    {\n+  /**\n+   * Default number of hop bits per index, i.e. size of neighborhood.\n+   */\n+  public static final int DEFAULT_H = 32;\n+\n+  private HopScotchHashingAlgorithm()\n+  {\n+  }\n+\n+  public static <VALUE> VALUE get(Table<VALUE> table, Monitor monitor, HashFunction hashFunction, long key)\n+  {\n+    int tableMask = table.mask();\n+    int index = indexOf(hashFunction, key, tableMask);\n+    long existingKey = table.key(index);\n+    if (existingKey == key)\n+    {   // Bulls eye\n+      return table.value(index);\n     }\n \n-    public static <VALUE> VALUE get( Table<VALUE> table, Monitor monitor, HashFunction hashFunction, long key )\n+    // Look in its neighborhood\n+    long hopBits = table.hopBits(index);\n+    while (hopBits > 0)\n     {\n-        int tableMask = table.mask();\n-        int index = indexOf( hashFunction, key, tableMask );\n-        long existingKey = table.key( index );\n-        if ( existingKey == key )\n-        {   // Bulls eye\n-            return table.value( index );\n-        }\n-\n-        // Look in its neighborhood\n-        long hopBits = table.hopBits( index );\n-        while ( hopBits > 0 )\n-        {\n-            int hopIndex = nextIndex( index, numberOfTrailingZeros( hopBits ) + 1, tableMask );\n-            if ( table.key( hopIndex ) == key )\n-            {   // There it is\n-                return table.value( hopIndex );\n-            }\n-            hopBits &= hopBits - 1;\n-        }\n+      int hopIndex = nextIndex(index, numberOfTrailingZeros(hopBits) + 1, tableMask);\n+      if (table.key(hopIndex) == key)\n+      {   // There it is\n+        return table.value(hopIndex);\n+      }\n+      hopBits &= hopBits - 1;\n+    }\n \n-        return null;\n+    return null;\n+  }\n+\n+  public static <VALUE> VALUE remove(Table<VALUE> table, Monitor monitor, HashFunction hashFunction, long key)\n+  {\n+    int tableMask = table.mask();\n+    int index = indexOf(hashFunction, key, tableMask);\n+    int freedIndex = -1;\n+    VALUE result = null;\n+    if (table.key(index) == key)\n+    {   // Bulls eye\n+      freedIndex = index;\n+      result = table.remove(index);\n     }\n \n-    public static <VALUE> VALUE remove( Table<VALUE> table, Monitor monitor, HashFunction hashFunction, long key )\n+    // Look in its neighborhood\n+    long hopBits = table.hopBits(index);\n+    while (hopBits > 0)\n     {\n-        int tableMask = table.mask();\n-        int index = indexOf( hashFunction, key, tableMask );\n-        int freedIndex = -1;\n-        VALUE result = null;\n-        if ( table.key( index ) == key )\n-        {   // Bulls eye\n-            freedIndex = index;\n-            result = table.remove( index );\n-        }\n+      int hd = numberOfTrailingZeros(hopBits);\n+      int hopIndex = nextIndex(index, hd + 1, tableMask);\n+      if (table.key(hopIndex) == key)\n+      {   // there it is\n+        freedIndex = hopIndex;\n+        result = table.remove(hopIndex);\n+        table.removeHopBit(index, hd);\n+      }\n+      hopBits &= hopBits - 1;\n+    }\n \n-        // Look in its neighborhood\n-        long hopBits = table.hopBits( index );\n-        while ( hopBits > 0 )\n-        {\n-            int hd = numberOfTrailingZeros( hopBits );\n-            int hopIndex = nextIndex( index, hd + 1, tableMask );\n-            if ( table.key( hopIndex ) == key )\n-            {   // there it is\n-                freedIndex = hopIndex;\n-                result = table.remove( hopIndex );\n-                table.removeHopBit( index, hd );\n-            }\n-            hopBits &= hopBits - 1;\n-        }\n+    // reversed hop-scotching, i.e. pull in the most distant neighbor, iteratively as long as the\n+    // pulled index has neighbors of its own\n+    while (freedIndex != -1)\n+    {\n+      long freedHopBits = table.hopBits(freedIndex);\n+      if (freedHopBits > 0)\n+      {   // It's got a neighbor, go ahead and move it here\n+        int hd = 63 - numberOfLeadingZeros(freedHopBits);\n+        int candidateIndex = nextIndex(freedIndex, hd + 1, tableMask);\n+        // move key/value\n+        long candidateKey = table.move(candidateIndex, freedIndex);\n+        // remove that hop bit, since that one is no longer a neighbor, it's \"the one\" at the index\n+        table.removeHopBit(freedIndex, hd);\n+        assert monitor.pulledToFreeIndex(index, table.hopBits(freedIndex), candidateKey,\n+            candidateIndex, freedIndex);\n+        freedIndex = candidateIndex;\n+      } else\n+      {\n+        freedIndex = -1;\n+      }\n+    }\n \n-        // reversed hop-scotching, i.e. pull in the most distant neighbor, iteratively as long as the\n-        // pulled index has neighbors of its own\n-        while ( freedIndex != -1 )\n+    return result;\n+  }\n+\n+  public static <VALUE> VALUE put(Table<VALUE> table, Monitor monitor, HashFunction hashFunction,\n+                                  long key, VALUE value, ResizeMonitor<VALUE> resizeMonitor)\n+  {\n+    long nullKey = table.nullKey();\n+    assert key != nullKey;\n+    int tableMask = table.mask();\n+    int index = indexOf(hashFunction, key, tableMask);\n+    long keyAtIndex = table.key(index);\n+    if (keyAtIndex == nullKey)\n+    {   // this index is free, just place it there\n+      table.put(index, key, value);\n+      assert monitor.placedAtFreeAndIntendedIndex(key, index);\n+      return null;\n+    } else if (keyAtIndex == key)\n+    {   // this index is occupied, but actually with the same key\n+      return table.putValue(index, value);\n+    } else\n+    {   // look at the neighbors of this entry to see if any is the requested key\n+      long hopBits = table.hopBits(index);\n+      while (hopBits > 0)\n+      {\n+        int hopIndex = nextIndex(index, numberOfTrailingZeros(hopBits) + 1, tableMask);\n+        if (table.key(hopIndex) == key)\n         {\n-            long freedHopBits = table.hopBits( freedIndex );\n-            if ( freedHopBits > 0 )\n-            {   // It's got a neighbor, go ahead and move it here\n-                int hd = 63 - numberOfLeadingZeros( freedHopBits );\n-                int candidateIndex = nextIndex( freedIndex, hd + 1, tableMask );\n-                // move key/value\n-                long candidateKey = table.move( candidateIndex, freedIndex );\n-                // remove that hop bit, since that one is no longer a neighbor, it's \"the one\" at the index\n-                table.removeHopBit( freedIndex, hd );\n-                assert monitor.pulledToFreeIndex( index, table.hopBits( freedIndex ), candidateKey,\n-                        candidateIndex, freedIndex );\n-                freedIndex = candidateIndex;\n-            }\n-            else\n-            {\n-                freedIndex = -1;\n-            }\n+          return table.putValue(hopIndex, value);\n         }\n+        hopBits &= hopBits - 1;\n+      }\n+    }\n \n-        return result;\n+    // this key does not exist in this set. put it there using hop-scotching\n+    if (hopScotchPut(table, monitor, hashFunction, key, value, index, tableMask, nullKey))\n+    {   // we managed to wiggle our way to a free spot and put it there\n+      return null;\n     }\n \n-    public static <VALUE> VALUE put( Table<VALUE> table, Monitor monitor, HashFunction hashFunction,\n-            long key, VALUE value, ResizeMonitor<VALUE> resizeMonitor )\n-    {\n-        long nullKey = table.nullKey();\n-        assert key != nullKey;\n-        int tableMask = table.mask();\n-        int index = indexOf( hashFunction, key, tableMask );\n-        long keyAtIndex = table.key( index );\n-        if ( keyAtIndex == nullKey )\n-        {   // this index is free, just place it there\n-            table.put( index, key, value );\n-            assert monitor.placedAtFreeAndIntendedIndex( key, index );\n-            return null;\n-        }\n-        else if ( keyAtIndex == key )\n-        {   // this index is occupied, but actually with the same key\n-            return table.putValue( index, value );\n-        }\n-        else\n-        {   // look at the neighbors of this entry to see if any is the requested key\n-            long hopBits = table.hopBits( index );\n-            while ( hopBits > 0 )\n-            {\n-                int hopIndex = nextIndex( index, numberOfTrailingZeros( hopBits ) + 1, tableMask );\n-                if ( table.key( hopIndex ) == key )\n-                {\n-                    return table.putValue( hopIndex, value );\n-                }\n-                hopBits &= hopBits - 1;\n-            }\n-        }\n+    // we couldn't add this value, even in the H-1 neighborhood, so grow table...\n+    growTable(table, monitor, hashFunction, resizeMonitor);\n+    Table<VALUE> resizedTable = resizeMonitor.getLastTable();\n \n-        // this key does not exist in this set. put it there using hop-scotching\n-        if ( hopScotchPut( table, monitor, hashFunction, key, value, index, tableMask, nullKey ) )\n-        {   // we managed to wiggle our way to a free spot and put it there\n-            return null;\n-        }\n+    // ...and try again\n+    return put(resizedTable, monitor, hashFunction, key, value, resizeMonitor);\n+  }\n \n-        // we couldn't add this value, even in the H-1 neighborhood, so grow table...\n-        growTable( table, monitor, hashFunction, resizeMonitor );\n-        Table<VALUE> resizedTable = resizeMonitor.getLastTable();\n+  private static <VALUE> boolean hopScotchPut(Table<VALUE> table, Monitor monitor, HashFunction hashFunction,\n+                                              long key, VALUE value, int index, int tableMask, long nullKey)\n+  {\n+    int freeIndex = nextIndex(index, 1, tableMask);\n+    int h = table.h();\n+    int totalHd = 0; // h delta, i.e. distance from first neighbor to current tentative index, the first neighbor has hd=0\n+    boolean foundFreeSpot = false;\n \n-        // ...and try again\n-        return put( resizedTable, monitor, hashFunction, key, value, resizeMonitor );\n+    // linear probe for finding a free slot in ASC index direction\n+    while (freeIndex != index) // one round is enough, albeit far, but at the same time very unlikely\n+    {\n+      if (table.key(freeIndex) == nullKey)\n+      {   // free slot found\n+        foundFreeSpot = true;\n+        break;\n+      }\n+\n+      // move on to the next index in the search for a free slot\n+      freeIndex = nextIndex(freeIndex, 1, tableMask);\n+      totalHd++;\n     }\n \n-    private static <VALUE> boolean hopScotchPut( Table<VALUE> table, Monitor monitor, HashFunction hashFunction,\n-            long key, VALUE value, int index, int tableMask, long nullKey )\n+    if (!foundFreeSpot)\n     {\n-        int freeIndex = nextIndex( index, 1, tableMask );\n-        int h = table.h();\n-        int totalHd = 0; // h delta, i.e. distance from first neighbor to current tentative index, the first neighbor has hd=0\n-        boolean foundFreeSpot = false;\n+      return false;\n+    }\n \n-        // linear probe for finding a free slot in ASC index direction\n-        while ( freeIndex != index ) // one round is enough, albeit far, but at the same time very unlikely\n+    while (totalHd >= h)\n+    {   // grab a closer index and see which of its neighbors is OK to move further away,\n+      // so that there will be a free space to place the new value. I.e. move the free space closer\n+      // and some close neighbors a bit further away (although never outside its neighborhood)\n+      int neighborIndex = nextIndex(freeIndex, -(h - 1), tableMask); // hopscotch hashing says to try h-1 entries closer\n+\n+      boolean swapped = false;\n+      for (int d = 0; d < (h >> 1) && !swapped; d++)\n+      {   // examine hop information (i.e. is there's someone in the neighborhood here to swap with 'hopIndex'?)\n+        final long neighborHopBitsFixed = table.hopBits(neighborIndex);\n+        long neighborHopBits = neighborHopBitsFixed;\n+        while (neighborHopBits > 0 && !swapped)\n         {\n-            if ( table.key( freeIndex ) == nullKey )\n-            {   // free slot found\n-                foundFreeSpot = true;\n-                break;\n-            }\n-\n-            // move on to the next index in the search for a free slot\n-            freeIndex = nextIndex( freeIndex, 1, tableMask );\n-            totalHd++;\n+          int hd = numberOfTrailingZeros(neighborHopBits);\n+          if (hd + d >= h - 1)\n+          {   // that would be too far\n+            break;\n+          }\n+          neighborHopBits &= neighborHopBits - 1;\n+          int candidateIndex = nextIndex(neighborIndex, hd + 1, tableMask);\n+\n+          // OK, here's a neighbor, let's examine it's neighbors (candidates to move)\n+          //  - move the candidate entry (incl. updating its hop bits) to the free index\n+          int distance = (freeIndex - candidateIndex) & tableMask;\n+          long candidateKey = table.move(candidateIndex, freeIndex);\n+          //  - update the neighbor entry with the move of the candidate entry\n+          table.moveHopBit(neighborIndex, hd, distance);\n+          assert monitor.pushedToFreeIndex(index, neighborHopBitsFixed, table.hopBits(neighborIndex),\n+              neighborIndex, candidateKey, candidateIndex, freeIndex);\n+          freeIndex = candidateIndex;\n+          swapped = true;\n+          totalHd -= distance;\n         }\n-\n-        if ( !foundFreeSpot )\n+        if (!swapped)\n         {\n-            return false;\n-        }\n-\n-        while ( totalHd >= h )\n-        {   // grab a closer index and see which of its neighbors is OK to move further away,\n-            // so that there will be a free space to place the new value. I.e. move the free space closer\n-            // and some close neighbors a bit further away (although never outside its neighborhood)\n-            int neighborIndex = nextIndex( freeIndex, -(h - 1), tableMask ); // hopscotch hashing says to try h-1 entries closer\n-\n-            boolean swapped = false;\n-            for ( int d = 0; d < (h >> 1) && !swapped; d++ )\n-            {   // examine hop information (i.e. is there's someone in the neighborhood here to swap with 'hopIndex'?)\n-                final long neighborHopBitsFixed = table.hopBits( neighborIndex );\n-                long neighborHopBits = neighborHopBitsFixed;\n-                while ( neighborHopBits > 0 && !swapped )\n-                {\n-                    int hd = numberOfTrailingZeros( neighborHopBits );\n-                    if ( hd + d >= h - 1 )\n-                    {   // that would be too far\n-                        break;\n-                    }\n-                    neighborHopBits &= neighborHopBits - 1;\n-                    int candidateIndex = nextIndex( neighborIndex, hd + 1, tableMask );\n-\n-                    // OK, here's a neighbor, let's examine it's neighbors (candidates to move)\n-                    //  - move the candidate entry (incl. updating its hop bits) to the free index\n-                    int distance = (freeIndex - candidateIndex) & tableMask;\n-                    long candidateKey = table.move( candidateIndex, freeIndex );\n-                    //  - update the neighbor entry with the move of the candidate entry\n-                    table.moveHopBit( neighborIndex, hd, distance );\n-                    assert monitor.pushedToFreeIndex( index, neighborHopBitsFixed, table.hopBits( neighborIndex ),\n-                            neighborIndex, candidateKey, candidateIndex, freeIndex );\n-                    freeIndex = candidateIndex;\n-                    swapped = true;\n-                    totalHd -= distance;\n-                }\n-                if ( !swapped )\n-                {\n-                    neighborIndex = nextIndex( neighborIndex, 1, tableMask );\n-                }\n-            }\n-\n-            if ( !swapped )\n-            {   // we could not make any room to swap, tell that to the outside world\n-                return false;\n-            }\n+          neighborIndex = nextIndex(neighborIndex, 1, tableMask);\n         }\n+      }\n \n-        // OK, now we're within distance to just place it there. Do it\n-        table.put( freeIndex, key, value );\n-        // and update the hop bits of \"index\"\n-        table.putHopBit( index, totalHd );\n-        assert monitor.placedAtFreedIndex( index, table.hopBits( index ), key, freeIndex );\n-\n-        return true;\n+      if (!swapped)\n+      {   // we could not make any room to swap, tell that to the outside world\n+        return false;\n+      }\n     }\n \n-    private static int nextIndex( int index, int delta, int mask )\n+    // OK, now we're within distance to just place it there. Do it\n+    table.put(freeIndex, key, value);\n+    // and update the hop bits of \"index\"\n+    table.putHopBit(index, totalHd);\n+    assert monitor.placedAtFreedIndex(index, table.hopBits(index), key, freeIndex);\n+\n+    return true;\n+  }\n+\n+  private static int nextIndex(int index, int delta, int mask)\n+  {\n+    return (index + delta) & mask;\n+  }\n+\n+  private static int indexOf(HashFunction hashFunction, long key, int tableMask)\n+  {\n+    return hashFunction.hashSingleValueToInt(key) & tableMask;\n+  }\n+\n+  private static <VALUE> void growTable(Table<VALUE> oldTable, Monitor monitor,\n+                                        HashFunction hashFunction, ResizeMonitor<VALUE> resizeMonitor)\n+  {\n+    assert monitor.tableGrowing(oldTable.capacity(), oldTable.size());\n+    Table<VALUE> newTable = oldTable.grow();\n+    // Install the new table before populating it with the old data, in case we find it needs to grow even more\n+    // while we are populating it. If that happens, we want to end up with the table installed by the final grow.\n+    resizeMonitor.tableGrew(newTable);\n+    long nullKey = oldTable.nullKey();\n+\n+    // place all entries in the new table\n+    int capacity = oldTable.capacity();\n+    for (int i = 0; i < capacity; i++)\n     {\n-        return (index + delta) & mask;\n-    }\n-\n-    private static int indexOf( HashFunction hashFunction, long key, int tableMask )\n-    {\n-        return hashFunction.hashSingleValueToInt( key ) & tableMask;\n-    }\n-\n-    private static <VALUE> void growTable( Table<VALUE> oldTable, Monitor monitor,\n-            HashFunction hashFunction, ResizeMonitor<VALUE> resizeMonitor )\n-    {\n-        assert monitor.tableGrowing( oldTable.capacity(), oldTable.size() );\n-        Table<VALUE> newTable = oldTable.grow();\n-        // Install the new table before populating it with the old data, in case we find it needs to grow even more\n-        // while we are populating it. If that happens, we want to end up with the table installed by the final grow.\n-        resizeMonitor.tableGrew( newTable );\n-        long nullKey = oldTable.nullKey();\n-\n-        // place all entries in the new table\n-        int capacity = oldTable.capacity();\n-        for ( int i = 0; i < capacity; i++ )\n+      long key = oldTable.key(i);\n+      if (key != nullKey)\n+      {\n+        // Always use the table from the resize monitor, because any put can cause a grow.\n+        Table<VALUE> table = resizeMonitor.getLastTable();\n+        VALUE putResult = put(table, monitor, hashFunction, key, oldTable.value(i), resizeMonitor);\n+        if (putResult != null)\n         {\n-            long key = oldTable.key( i );\n-            if ( key != nullKey )\n-            {\n-                // Always use the table from the resize monitor, because any put can cause a grow.\n-                Table<VALUE> table = resizeMonitor.getLastTable();\n-                VALUE putResult = put( table, monitor, hashFunction, key, oldTable.value( i ), resizeMonitor );\n-                if ( putResult != null )\n-                {\n-                    // If we somehow fail to populate the new table, reinstall the old one.\n-                    resizeMonitor.tableGrew( oldTable );\n-                    newTable.close();\n-                    throw new IllegalStateException( \"Couldn't add \" + key + \" when growing table\" );\n-                }\n-            }\n+          // If we somehow fail to populate the new table, reinstall the old one.\n+          resizeMonitor.tableGrew(oldTable);\n+          newTable.close();\n+          throw new IllegalStateException(\"Couldn't add \" + key + \" when growing table\");\n         }\n-        assert monitor.tableGrew( oldTable.capacity(), newTable.capacity(), newTable.size() );\n-        oldTable.close();\n+      }\n     }\n+    assert monitor.tableGrew(oldTable.capacity(), newTable.capacity(), newTable.size());\n+    oldTable.close();\n+  }\n \n-    /**\n-     * Monitor for what how a {@link HopScotchHashingAlgorithm} changes the items in a {@link Table}.\n-     */\n-    public interface Monitor\n-    {\n-        boolean tableGrowing( int fromCapacity, int currentSize );\n-\n-        boolean tableGrew( int fromCapacity, int toCapacity, int currentSize );\n+  /**\n+   * Monitor for what how a {@link HopScotchHashingAlgorithm} changes the items in a {@link Table}.\n+   */\n+  public interface Monitor\n+  {\n+    boolean tableGrowing(int fromCapacity, int currentSize);\n \n-        boolean placedAtFreeAndIntendedIndex( long key, int index );\n+    boolean tableGrew(int fromCapacity, int toCapacity, int currentSize);\n \n-        boolean pushedToFreeIndex( int intendedIndex, long oldHopBits, long newHopBits, int neighborIndex,\n-                long key, int fromIndex, int toIndex );\n+    boolean placedAtFreeAndIntendedIndex(long key, int index);\n \n-        boolean placedAtFreedIndex( int intendedIndex, long newHopBits, long key, int actualIndex );\n+    boolean pushedToFreeIndex(int intendedIndex, long oldHopBits, long newHopBits, int neighborIndex,\n+                              long key, int fromIndex, int toIndex);\n \n-        boolean pulledToFreeIndex( int intendedIndex, long newHopBits, long key, int fromIndex, int toIndex );\n+    boolean placedAtFreedIndex(int intendedIndex, long newHopBits, long key, int actualIndex);\n \n-        abstract class Adapter implements Monitor\n-        {\n-            @Override\n-            public boolean placedAtFreedIndex( int intendedIndex, long newHopBits, long key, int actualIndex )\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean placedAtFreeAndIntendedIndex( long key, int index )\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean pushedToFreeIndex( int intendedIndex, long oldHopBits, long newHopBits,\n-                    int neighborIndex, long key, int fromIndex, int toIndex )\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean pulledToFreeIndex( int intendedIndex, long newHopBits, long key,\n-                    int fromIndex, int toIndex )\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean tableGrowing( int fromCapacity, int currentSize )\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean tableGrew( int fromCapacity, int toCapacity, int currentSize )\n-            {\n-                return true;\n-            }\n-        }\n-    }\n+    boolean pulledToFreeIndex(int intendedIndex, long newHopBits, long key, int fromIndex, int toIndex);\n \n-    public static final Monitor NO_MONITOR = new Monitor.Adapter()\n+    abstract class Adapter implements Monitor\n     {\n-        /*No additional logic*/\n-    };\n+      @Override\n+      public boolean placedAtFreedIndex(int intendedIndex, long newHopBits, long key, int actualIndex)\n+      {\n+        return true;\n+      }\n \n-    /**\n-     * The default hash function for primitive collections. This hash function is quite fast but has mediocre\n-     * statistics.\n-     * @see org.neo4j.hashing.HashFunction#xorShift32()\n-     */\n-    static final HashFunction DEFAULT_HASHING = HashFunction.xorShift32();\n+      @Override\n+      public boolean placedAtFreeAndIntendedIndex(long key, int index)\n+      {\n+        return true;\n+      }\n \n-    public interface ResizeMonitor<VALUE>\n-    {\n-        void tableGrew( Table<VALUE> newTable );\n+      @Override\n+      public boolean pushedToFreeIndex(int intendedIndex, long oldHopBits, long newHopBits,\n+                                       int neighborIndex, long key, int fromIndex, int toIndex)\n+      {\n+        return true;\n+      }\n+\n+      @Override\n+      public boolean pulledToFreeIndex(int intendedIndex, long newHopBits, long key,\n+                                       int fromIndex, int toIndex)\n+      {\n+        return true;\n+      }\n \n-        Table<VALUE> getLastTable();\n+      @Override\n+      public boolean tableGrowing(int fromCapacity, int currentSize)\n+      {\n+        return true;\n+      }\n+\n+      @Override\n+      public boolean tableGrew(int fromCapacity, int toCapacity, int currentSize)\n+      {\n+        return true;\n+      }\n     }\n+  }\n+\n+  public static final Monitor NO_MONITOR = new Monitor.Adapter()\n+  {\n+    /*No additional logic*/\n+  };\n+\n+  /**\n+   * The default hash function for primitive collections. This hash function is quite fast but has mediocre\n+   * statistics.\n+   *\n+   * @see org.neo4j.hashing.HashFunction#xorShift32()\n+   */\n+  static final HashFunction DEFAULT_HASHING = HashFunction.xorShift32();\n+\n+  public interface ResizeMonitor<VALUE>\n+  {\n+    void tableGrew(Table<VALUE> newTable);\n+\n+    Table<VALUE> getLastTable();\n+  }\n }\n",
            "diff_size": 472
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2976/HopScotchHashingAlgorithm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2976/HopScotchHashingAlgorithm.java\nindex 83ed4f7a2e7..281dbf766ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2976/HopScotchHashingAlgorithm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2976/HopScotchHashingAlgorithm.java\n@@ -74,7 +74,8 @@ public class HopScotchHashingAlgorithm\n         int index = indexOf( hashFunction, key, tableMask );\n         long existingKey = table.key( index );\n         if ( existingKey == key )\n-        {   // Bulls eye\n+        {\n+    // Bulls eye\n             return table.value( index );\n         }\n \n@@ -84,10 +85,12 @@ public class HopScotchHashingAlgorithm\n         {\n             int hopIndex = nextIndex( index, numberOfTrailingZeros( hopBits ) + 1, tableMask );\n             if ( table.key( hopIndex ) == key )\n-            {   // There it is\n+            {\n+    // There it is\n                 return table.value( hopIndex );\n             }\n-            hopBits &= hopBits - 1;\n+\n+hopBits &= hopBits - 1;\n         }\n \n         return null;\n@@ -100,7 +103,8 @@ public class HopScotchHashingAlgorithm\n         int freedIndex = -1;\n         VALUE result = null;\n         if ( table.key( index ) == key )\n-        {   // Bulls eye\n+        {\n+    // Bulls eye\n             freedIndex = index;\n             result = table.remove( index );\n         }\n@@ -112,12 +116,14 @@ public class HopScotchHashingAlgorithm\n             int hd = numberOfTrailingZeros( hopBits );\n             int hopIndex = nextIndex( index, hd + 1, tableMask );\n             if ( table.key( hopIndex ) == key )\n-            {   // there it is\n+            {\n+    // there it is\n                 freedIndex = hopIndex;\n                 result = table.remove( hopIndex );\n                 table.removeHopBit( index, hd );\n             }\n-            hopBits &= hopBits - 1;\n+\n+hopBits &= hopBits - 1;\n         }\n \n         // reversed hop-scotching, i.e. pull in the most distant neighbor, iteratively as long as the\n@@ -126,7 +132,8 @@ public class HopScotchHashingAlgorithm\n         {\n             long freedHopBits = table.hopBits( freedIndex );\n             if ( freedHopBits > 0 )\n-            {   // It's got a neighbor, go ahead and move it here\n+            {\n+    // It's got a neighbor, go ahead and move it here\n                 int hd = 63 - numberOfLeadingZeros( freedHopBits );\n                 int candidateIndex = nextIndex( freedIndex, hd + 1, tableMask );\n                 // move key/value\n@@ -135,7 +142,7 @@ public class HopScotchHashingAlgorithm\n                 table.removeHopBit( freedIndex, hd );\n                 assert monitor.pulledToFreeIndex( index, table.hopBits( freedIndex ), candidateKey,\n                         candidateIndex, freedIndex );\n-                freedIndex = candidateIndex;\n+freedIndex = candidateIndex;\n             }\n             else\n             {\n@@ -155,17 +162,20 @@ public class HopScotchHashingAlgorithm\n         int index = indexOf( hashFunction, key, tableMask );\n         long keyAtIndex = table.key( index );\n         if ( keyAtIndex == nullKey )\n-        {   // this index is free, just place it there\n+        {\n+    // this index is free, just place it there\n             table.put( index, key, value );\n             assert monitor.placedAtFreeAndIntendedIndex( key, index );\n             return null;\n         }\n         else if ( keyAtIndex == key )\n-        {   // this index is occupied, but actually with the same key\n+        {\n+    // this index is occupied, but actually with the same key\n             return table.putValue( index, value );\n         }\n         else\n-        {   // look at the neighbors of this entry to see if any is the requested key\n+        {\n+    // look at the neighbors of this entry to see if any is the requested key\n             long hopBits = table.hopBits( index );\n             while ( hopBits > 0 )\n             {\n@@ -174,13 +184,15 @@ public class HopScotchHashingAlgorithm\n                 {\n                     return table.putValue( hopIndex, value );\n                 }\n-                hopBits &= hopBits - 1;\n+\n+hopBits &= hopBits - 1;\n             }\n         }\n \n         // this key does not exist in this set. put it there using hop-scotching\n         if ( hopScotchPut( table, monitor, hashFunction, key, value, index, tableMask, nullKey ) )\n-        {   // we managed to wiggle our way to a free spot and put it there\n+        {\n+    // we managed to wiggle our way to a free spot and put it there\n             return null;\n         }\n \n@@ -204,7 +216,8 @@ public class HopScotchHashingAlgorithm\n         while ( freeIndex != index ) // one round is enough, albeit far, but at the same time very unlikely\n         {\n             if ( table.key( freeIndex ) == nullKey )\n-            {   // free slot found\n+            {\n+    // free slot found\n                 foundFreeSpot = true;\n                 break;\n             }\n@@ -220,24 +233,28 @@ public class HopScotchHashingAlgorithm\n         }\n \n         while ( totalHd >= h )\n-        {   // grab a closer index and see which of its neighbors is OK to move further away,\n+        {\n+    // grab a closer index and see which of its neighbors is OK to move further away,\n             // so that there will be a free space to place the new value. I.e. move the free space closer\n             // and some close neighbors a bit further away (although never outside its neighborhood)\n-            int neighborIndex = nextIndex( freeIndex, -(h - 1), tableMask ); // hopscotch hashing says to try h-1 entries closer\n+            int neighborIndex = nextIndex( freeIndex, -( h - 1), tableMask ); // hopscotch hashing says to try h-1 entries closer\n \n             boolean swapped = false;\n-            for ( int d = 0; d < (h >> 1) && !swapped; d++ )\n-            {   // examine hop information (i.e. is there's someone in the neighborhood here to swap with 'hopIndex'?)\n+            for ( int d = 0; d < ( h >> 1) && !swapped; d++ )\n+            {\n+    // examine hop information (i.e. is there's someone in the neighborhood here to swap with 'hopIndex'?)\n                 final long neighborHopBitsFixed = table.hopBits( neighborIndex );\n                 long neighborHopBits = neighborHopBitsFixed;\n                 while ( neighborHopBits > 0 && !swapped )\n                 {\n                     int hd = numberOfTrailingZeros( neighborHopBits );\n                     if ( hd + d >= h - 1 )\n-                    {   // that would be too far\n+                    {\n+    // that would be too far\n                         break;\n                     }\n-                    neighborHopBits &= neighborHopBits - 1;\n+\n+neighborHopBits &= neighborHopBits - 1;\n                     int candidateIndex = nextIndex( neighborIndex, hd + 1, tableMask );\n \n                     // OK, here's a neighbor, let's examine it's neighbors (candidates to move)\n@@ -248,18 +265,20 @@ public class HopScotchHashingAlgorithm\n                     table.moveHopBit( neighborIndex, hd, distance );\n                     assert monitor.pushedToFreeIndex( index, neighborHopBitsFixed, table.hopBits( neighborIndex ),\n                             neighborIndex, candidateKey, candidateIndex, freeIndex );\n-                    freeIndex = candidateIndex;\n+freeIndex = candidateIndex;\n                     swapped = true;\n                     totalHd -= distance;\n                 }\n-                if ( !swapped )\n+\n+if ( !swapped )\n                 {\n                     neighborIndex = nextIndex( neighborIndex, 1, tableMask );\n                 }\n             }\n \n             if ( !swapped )\n-            {   // we could not make any room to swap, tell that to the outside world\n+            {\n+    // we could not make any room to swap, tell that to the outside world\n                 return false;\n             }\n         }\n@@ -269,8 +288,7 @@ public class HopScotchHashingAlgorithm\n         // and update the hop bits of \"index\"\n         table.putHopBit( index, totalHd );\n         assert monitor.placedAtFreedIndex( index, table.hopBits( index ), key, freeIndex );\n-\n-        return true;\n+return true;\n     }\n \n     private static int nextIndex( int index, int delta, int mask )\n@@ -312,7 +330,8 @@ public class HopScotchHashingAlgorithm\n                 }\n             }\n         }\n-        assert monitor.tableGrew( oldTable.capacity(), newTable.capacity(), newTable.size() );\n+\n+assert monitor.tableGrew( oldTable.capacity(), newTable.capacity(), newTable.size() );\n         oldTable.close();\n     }\n \n@@ -329,8 +348,7 @@ public class HopScotchHashingAlgorithm\n \n         boolean pushedToFreeIndex( int intendedIndex, long oldHopBits, long newHopBits, int neighborIndex,\n                 long key, int fromIndex, int toIndex );\n-\n-        boolean placedAtFreedIndex( int intendedIndex, long newHopBits, long key, int actualIndex );\n+    boolean placedAtFreedIndex( int intendedIndex, long newHopBits, long key, int actualIndex );\n \n         boolean pulledToFreeIndex( int intendedIndex, long newHopBits, long key, int fromIndex, int toIndex );\n \n@@ -349,15 +367,13 @@ public class HopScotchHashingAlgorithm\n             }\n \n             @Override\n-            public boolean pushedToFreeIndex( int intendedIndex, long oldHopBits, long newHopBits,\n-                    int neighborIndex, long key, int fromIndex, int toIndex )\n+            public boolean pushedToFreeIndex( int intendedIndex, long oldHopBits, long newHopBits, int neighborIndex, long key, int fromIndex, int toIndex )\n             {\n                 return true;\n             }\n \n             @Override\n-            public boolean pulledToFreeIndex( int intendedIndex, long newHopBits, long key,\n-                    int fromIndex, int toIndex )\n+            public boolean pulledToFreeIndex( int intendedIndex, long newHopBits, long key, int fromIndex, int toIndex )\n             {\n                 return true;\n             }\n@@ -394,4 +410,4 @@ public class HopScotchHashingAlgorithm\n \n         Table<VALUE> getLastTable();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}