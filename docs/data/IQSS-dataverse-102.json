{
    "project_name": "IQSS-dataverse",
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "383",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "                        }\n                    }\n\t\t\t\t\tcommandsCalled.push(command);\n                }\n                \n                ",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/102/EjbDataverseEngine.java\nindex 0937f6f6cf7..c5518b813cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/102/EjbDataverseEngine.java\n@@ -380,7 +380,7 @@ public class EjbDataverseEngine {\n                             logger.fine(\"Exception logging command stack(\" + instance + \"): \" + e.getMessage());\n                         }\n                     }\n-\t\t\t\t\tcommandsCalled.push(command);\n+            commandsCalled.push(command);\n                 }\n                 \n                 \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/102/EjbDataverseEngine.java\nindex 0937f6f6cf7..ccecf62c3a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/102/EjbDataverseEngine.java\n@@ -60,565 +60,574 @@ import org.apache.log4j.lf5.LogLevel;\n @Stateless\n @Named\n public class EjbDataverseEngine {\n-    private static final Logger logger = Logger.getLogger(EjbDataverseEngine.class.getCanonicalName());\n-    \n-    @EJB\n-    DatasetServiceBean datasetService;\n-\n-    @EJB\n-    DataverseServiceBean dataverseService;\n-\n-    @EJB\n-    DataverseRoleServiceBean rolesService;\n-\n-    @EJB\n-    BuiltinUserServiceBean usersService;\n-\n-    @EJB\n-    IndexServiceBean indexService;\n-    \n-    @EJB\n-    IndexBatchServiceBean indexBatchService;\n-\n-    @EJB\n-    SolrIndexServiceBean solrIndexService;\n-\n-    @EJB\n-    SearchServiceBean searchService;\n-    \n-    @EJB\n-    IngestServiceBean ingestService;\n-\n-    @EJB\n-    PermissionServiceBean permissionService;\n-\n-    @EJB\n-    DvObjectServiceBean dvObjectService;\n-\n-    @EJB\n-    DataverseFacetServiceBean dataverseFacetService;\n-\n-    @EJB\n-    FeaturedDataverseServiceBean featuredDataverseService;\n-\n-    @EJB\n-    DataFileServiceBean dataFileService;\n-\n-    @EJB\n-    TemplateServiceBean templateService;\n-    \n-    @EJB\n-    SavedSearchServiceBean savedSearchService;\n-\n-    @EJB\n-    DataverseFieldTypeInputLevelServiceBean fieldTypeInputLevels;\n-\n-    @EJB\n-    DOIEZIdServiceBean doiEZId;\n-    \n-    @EJB\n-    DOIDataCiteServiceBean doiDataCite;\n-\n-    @EJB\n-    FakePidProviderServiceBean fakePidProvider;\n-\n-    @EJB\n-    HandlenetServiceBean handleNet;\n-    \n-    @EJB\n-    SettingsServiceBean settings;\n-    \n-    @EJB\n-    GuestbookServiceBean guestbookService;\n-    \n-    @EJB\n-    GuestbookResponseServiceBean responses;\n-    \n-    @EJB\n-    DataverseLinkingServiceBean dvLinking;\n-    \n-    @EJB\n-    DatasetLinkingServiceBean dsLinking;\n-\n-    @EJB\n-    ExplicitGroupServiceBean explicitGroups;\n-\n-    @EJB\n-    GroupServiceBean groups;\n-\n-    @EJB\n-    RoleAssigneeServiceBean roleAssignees;\n-    \n-    @EJB\n-    UserNotificationServiceBean userNotificationService;   \n-    \n-    @EJB\n-    AuthenticationServiceBean authentication; \n-\n-    @EJB\n-    SystemConfig systemConfig;\n-\n-    @EJB\n-    PrivateUrlServiceBean privateUrlService;\n-\n-    @EJB\n-    DatasetVersionServiceBean datasetVersionService;\n-\n-    @EJB\n-    DataCaptureModuleServiceBean dataCaptureModule;\n-\n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-    private EntityManager em;\n-    \n-    @EJB\n-    ActionLogServiceBean logSvc;\n-    \n-    @EJB\n-    WorkflowServiceBean workflowService;\n-    \n-    @EJB\n-    FileDownloadServiceBean fileDownloadService;\n-    \n-    @EJB\n-    ConfirmEmailServiceBean confirmEmailService;\n-    \n-    @EJB\n-    EjbDataverseEngineInner innerEngine;\n-    \n-    \n-    @Resource\n-    EJBContext ejbCtxt;\n-\n-    private CommandContext ctxt;\n-    \n-    @TransactionAttribute(REQUIRES_NEW)\n-    public <R> R submitInNewTransaction(Command<R> aCommand) throws CommandException {\n-        return submit(aCommand);\n+  private static final Logger logger = Logger.getLogger(EjbDataverseEngine.class.getCanonicalName());\n+\n+  @EJB\n+  DatasetServiceBean datasetService;\n+\n+  @EJB\n+  DataverseServiceBean dataverseService;\n+\n+  @EJB\n+  DataverseRoleServiceBean rolesService;\n+\n+  @EJB\n+  BuiltinUserServiceBean usersService;\n+\n+  @EJB\n+  IndexServiceBean indexService;\n+\n+  @EJB\n+  IndexBatchServiceBean indexBatchService;\n+\n+  @EJB\n+  SolrIndexServiceBean solrIndexService;\n+\n+  @EJB\n+  SearchServiceBean searchService;\n+\n+  @EJB\n+  IngestServiceBean ingestService;\n+\n+  @EJB\n+  PermissionServiceBean permissionService;\n+\n+  @EJB\n+  DvObjectServiceBean dvObjectService;\n+\n+  @EJB\n+  DataverseFacetServiceBean dataverseFacetService;\n+\n+  @EJB\n+  FeaturedDataverseServiceBean featuredDataverseService;\n+\n+  @EJB\n+  DataFileServiceBean dataFileService;\n+\n+  @EJB\n+  TemplateServiceBean templateService;\n+\n+  @EJB\n+  SavedSearchServiceBean savedSearchService;\n+\n+  @EJB\n+  DataverseFieldTypeInputLevelServiceBean fieldTypeInputLevels;\n+\n+  @EJB\n+  DOIEZIdServiceBean doiEZId;\n+\n+  @EJB\n+  DOIDataCiteServiceBean doiDataCite;\n+\n+  @EJB\n+  FakePidProviderServiceBean fakePidProvider;\n+\n+  @EJB\n+  HandlenetServiceBean handleNet;\n+\n+  @EJB\n+  SettingsServiceBean settings;\n+\n+  @EJB\n+  GuestbookServiceBean guestbookService;\n+\n+  @EJB\n+  GuestbookResponseServiceBean responses;\n+\n+  @EJB\n+  DataverseLinkingServiceBean dvLinking;\n+\n+  @EJB\n+  DatasetLinkingServiceBean dsLinking;\n+\n+  @EJB\n+  ExplicitGroupServiceBean explicitGroups;\n+\n+  @EJB\n+  GroupServiceBean groups;\n+\n+  @EJB\n+  RoleAssigneeServiceBean roleAssignees;\n+\n+  @EJB\n+  UserNotificationServiceBean userNotificationService;\n+\n+  @EJB\n+  AuthenticationServiceBean authentication;\n+\n+  @EJB\n+  SystemConfig systemConfig;\n+\n+  @EJB\n+  PrivateUrlServiceBean privateUrlService;\n+\n+  @EJB\n+  DatasetVersionServiceBean datasetVersionService;\n+\n+  @EJB\n+  DataCaptureModuleServiceBean dataCaptureModule;\n+\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  private EntityManager em;\n+\n+  @EJB\n+  ActionLogServiceBean logSvc;\n+\n+  @EJB\n+  WorkflowServiceBean workflowService;\n+\n+  @EJB\n+  FileDownloadServiceBean fileDownloadService;\n+\n+  @EJB\n+  ConfirmEmailServiceBean confirmEmailService;\n+\n+  @EJB\n+  EjbDataverseEngineInner innerEngine;\n+\n+\n+  @Resource\n+  EJBContext ejbCtxt;\n+\n+  private CommandContext ctxt;\n+\n+  @TransactionAttribute(REQUIRES_NEW)\n+  public <R> R submitInNewTransaction(Command<R> aCommand) throws CommandException {\n+    return submit(aCommand);\n+  }\n+\n+  private DvObject getRetType(Object r) {\n+\n+    return (DvObject) r;\n+\n+  }\n+\n+\n+  @TransactionAttribute(SUPPORTS)\n+  public <R> R submit(Command<R> aCommand) throws CommandException {\n+\n+    final ActionLogRecord logRec =\n+      new ActionLogRecord(ActionLogRecord.ActionType.Command, aCommand.getClass().getCanonicalName());\n+\n+    try {\n+      logRec.setUserIdentifier(aCommand.getRequest().getUser().getIdentifier());\n+\n+      // Check permissions - or throw an exception\n+      Map<String, ? extends Set<Permission>> requiredMap = aCommand.getRequiredPermissions();\n+      if (requiredMap == null) {\n+        throw new RuntimeException(\"Command \" + aCommand + \" does not define required permissions.\");\n+      }\n+\n+      DataverseRequest dvReq = aCommand.getRequest();\n+\n+      AuthenticatedUser authenticatedUser = dvReq.getAuthenticatedUser();\n+      if (authenticatedUser != null) {\n+        AuthenticatedUser auFreshLookup = authentication.findByID(authenticatedUser.getId());\n+        if (auFreshLookup == null) {\n+          logger.fine(\"submit method found user no longer exists (was deleted).\");\n+          throw new CommandException(BundleUtil\n+            .getStringFromBundle(\"command.exception.user.deleted\", Arrays.asList(aCommand.getClass().getSimpleName())),\n+            aCommand);\n+        } else {\n+          if (auFreshLookup.isDeactivated()) {\n+            logger.fine(\"submit method found user is deactivated.\");\n+            throw new CommandException(BundleUtil.getStringFromBundle(\"command.exception.user.deactivated\",\n+              Arrays.asList(aCommand.getClass().getSimpleName())), aCommand);\n+          }\n+        }\n+      }\n+\n+      Map<String, DvObject> affectedDvObjects = aCommand.getAffectedDvObjects();\n+      logRec.setInfo(aCommand.describe());\n+      for (Map.Entry<String, ? extends Set<Permission>> pair : requiredMap.entrySet()) {\n+        String dvName = pair.getKey();\n+        if (!affectedDvObjects.containsKey(dvName)) {\n+          throw new RuntimeException(\n+            \"Command instance \" + aCommand + \" does not have a DvObject named '\" + dvName + \"'\");\n+        }\n+        DvObject dvo = affectedDvObjects.get(dvName);\n+\n+        Set<Permission> granted = (dvo != null) ? permissionService.permissionsFor(dvReq, dvo)\n+          : EnumSet.allOf(Permission.class);\n+        Set<Permission> required = requiredMap.get(dvName);\n+\n+        if (!granted.containsAll(required)) {\n+          required.removeAll(granted);\n+          logRec.setActionResult(ActionLogRecord.Result.PermissionError);\n+          /**\n+           * @todo Is there any harm in showing the \"granted\" set\n+           * since we already show \"required\"? It would help people\n+           * reason about the mismatch.\n+           */\n+          throw new PermissionException(\"Can't execute command \" + aCommand\n+            + \", because request \" + aCommand.getRequest()\n+            + \" is missing permissions \" + required\n+            + \" on Object \" + dvo.accept(DvObject.NamePrinter),\n+            aCommand,\n+            required, dvo);\n+        }\n+      }\n+      try {\n+        if (getContext().getCommandsCalled() == null) {\n+          getContext().beginCommandSequence();\n+        }\n+        getContext().addCommand(aCommand);\n+        //This list of commands is held by the outermost command's context\n+        //to be run on completeCommand method when the outermost command is completed\n+        Stack<Command> previouslyCalled = getContext().getCommandsCalled();\n+        R r = innerEngine.submit(aCommand, getContext());\n+        if (getContext().getCommandsCalled().empty() && !previouslyCalled.empty()) {\n+          for (Command c : previouslyCalled) {\n+            getContext().getCommandsCalled().add(c);\n+          }\n+        }\n+        //This runs the onSuccess Methods for all commands in the stack when the outermost command completes\n+        this.completeCommand(aCommand, r, getContext().getCommandsCalled());\n+        return r;\n+\n+      } catch (EJBException ejbe) {\n+        throw new CommandException(\"Command \" + aCommand.toString() + \" failed: \" + ejbe.getMessage(),\n+          ejbe.getCausedByException(), aCommand);\n+      }\n+    } catch (CommandException cmdEx) {\n+      if (!(cmdEx instanceof PermissionException)) {\n+        logRec.setActionResult(ActionLogRecord.Result.InternalError);\n+      }\n+      logRec.setInfo(logRec.getInfo() + \" (\" + cmdEx.getMessage() + \")\");\n+      throw cmdEx;\n+    } catch (RuntimeException re) {\n+      logRec.setActionResult(ActionLogRecord.Result.InternalError);\n+      logRec.setInfo(logRec.getInfo() + \" (\" + re.getMessage() + \")\");\n+\n+      Throwable cause = re;\n+      while (cause != null) {\n+        if (cause instanceof ConstraintViolationException) {\n+          StringBuilder sb = new StringBuilder();\n+          sb.append(\"Unexpected bean validation constraint exception:\");\n+          ConstraintViolationException constraintViolationException = (ConstraintViolationException) cause;\n+          for (ConstraintViolation<?> violation : constraintViolationException.getConstraintViolations()) {\n+            sb.append(\" Invalid value: <<<\").append(violation.getInvalidValue()).append(\">>> for \")\n+              .append(violation.getPropertyPath()).append(\" at \").append(violation.getLeafBean()).append(\" - \")\n+              .append(violation.getMessage());\n+          }\n+          logger.log(Level.SEVERE, sb.toString());\n+          // set this more detailed info in action log\n+          logRec.setInfo(logRec.getInfo() + \" (\" + sb.toString() + \")\");\n+        }\n+        cause = cause.getCause();\n+      }\n+\n+      throw re;\n+\n+    } finally {\n+      //when we get here we need to wipe out the command list so that\n+      //failed commands don't have their onSuccess methods run.\n+      getContext().cancelCommandSequence();\n+      if (logRec.getActionResult() == null) {\n+        logRec.setActionResult(ActionLogRecord.Result.OK);\n+      } else {\n+        try {\n+          ejbCtxt.setRollbackOnly();\n+        } catch (IllegalStateException isEx) {\n+          //Not in a transaction nothing to rollback\n+        }\n+      }\n+      logRec.setEndTime(new java.util.Date());\n+      logSvc.log(logRec);\n     }\n-    \n-    private DvObject getRetType(Object r){\n+  }\n \n-        return (DvObject) r;\n-       \n+  protected void completeCommand(Command command, Object r, Stack<Command> called) {\n+\n+    if (called.isEmpty()) {\n+      return;\n     }\n \n+    Command test = called.get(0);\n+    if (!test.equals(command)) {\n+      //if it's not the first command on the stack it must be an \"inner\" command\n+      //and we don't want to run its onSuccess until all commands have comepleted successfully\n+      return;\n+    }\n \n-    @TransactionAttribute(SUPPORTS)\n-    public <R> R submit(Command<R> aCommand) throws CommandException {\n-        \n-        final ActionLogRecord logRec = new ActionLogRecord(ActionLogRecord.ActionType.Command, aCommand.getClass().getCanonicalName());\n+    for (Command commandLoop : called) {\n+      commandLoop.onSuccess(ctxt, r);\n+    }\n \n-        try {\n-            logRec.setUserIdentifier( aCommand.getRequest().getUser().getIdentifier() );\n-            \n-            // Check permissions - or throw an exception\n-            Map<String, ? extends Set<Permission>> requiredMap = aCommand.getRequiredPermissions();\n-            if (requiredMap == null) {\n-                throw new RuntimeException(\"Command \" + aCommand + \" does not define required permissions.\");\n-            }\n+  }\n \n-            DataverseRequest dvReq = aCommand.getRequest();\n-\n-            AuthenticatedUser authenticatedUser = dvReq.getAuthenticatedUser();\n-            if (authenticatedUser != null) {\n-                AuthenticatedUser auFreshLookup = authentication.findByID(authenticatedUser.getId());\n-                if (auFreshLookup == null) {\n-                    logger.fine(\"submit method found user no longer exists (was deleted).\");\n-                    throw new CommandException(BundleUtil.getStringFromBundle(\"command.exception.user.deleted\", Arrays.asList(aCommand.getClass().getSimpleName())), aCommand);\n-                } else {\n-                    if (auFreshLookup.isDeactivated()) {\n-                        logger.fine(\"submit method found user is deactivated.\");\n-                        throw new CommandException(BundleUtil.getStringFromBundle(\"command.exception.user.deactivated\", Arrays.asList(aCommand.getClass().getSimpleName())), aCommand);\n-                    }\n-                }\n-            }\n \n-            Map<String, DvObject> affectedDvObjects = aCommand.getAffectedDvObjects();\n-            logRec.setInfo(aCommand.describe());\n-            for (Map.Entry<String, ? extends Set<Permission>> pair : requiredMap.entrySet()) {\n-                String dvName = pair.getKey();\n-                if (!affectedDvObjects.containsKey(dvName)) {\n-                    throw new RuntimeException(\"Command instance \" + aCommand + \" does not have a DvObject named '\" + dvName + \"'\");\n-                }\n-                DvObject dvo = affectedDvObjects.get(dvName);\n-\n-                Set<Permission> granted = (dvo != null) ? permissionService.permissionsFor(dvReq, dvo)\n-                        : EnumSet.allOf(Permission.class);\n-                Set<Permission> required = requiredMap.get(dvName);\n-                \n-                if (!granted.containsAll(required)) {\n-                    required.removeAll(granted);\n-                    logRec.setActionResult(ActionLogRecord.Result.PermissionError);\n-                    /**\n-                     * @todo Is there any harm in showing the \"granted\" set\n-                     * since we already show \"required\"? It would help people\n-                     * reason about the mismatch.\n-                     */\n-                    throw new PermissionException(\"Can't execute command \" + aCommand\n-                            + \", because request \" + aCommand.getRequest()\n-                            + \" is missing permissions \" + required\n-                            + \" on Object \" + dvo.accept(DvObject.NamePrinter),\n-                            aCommand,\n-                            required, dvo);\n-                }\n-            }\n+  public CommandContext getContext() {\n+    if (ctxt == null) {\n+      ctxt = new CommandContext() {\n+\n+        public Stack<Command> commandsCalled;\n+\n+        @Override\n+        public void addCommand(Command command) {\n+\n+          if (logger.isLoggable(Level.FINE) && !commandsCalled.isEmpty()) {\n+            int instance = (int) (100 * Math.random());\n             try {\n-                if (getContext().getCommandsCalled() == null){\n-                    getContext().beginCommandSequence();\n-                }\n-                getContext().addCommand(aCommand);\n-                //This list of commands is held by the outermost command's context\n-                //to be run on completeCommand method when the outermost command is completed\n-                Stack<Command> previouslyCalled = getContext().getCommandsCalled();\n-                R r = innerEngine.submit(aCommand, getContext());   \n-                if (getContext().getCommandsCalled().empty() && !previouslyCalled.empty()){\n-                    for (Command c: previouslyCalled){\n-                        getContext().getCommandsCalled().add(c);\n-                    }\n-                }\n-                //This runs the onSuccess Methods for all commands in the stack when the outermost command completes\n-                this.completeCommand(aCommand, r, getContext().getCommandsCalled());\n-                return r;\n-                \n-            } catch ( EJBException ejbe ) {\n-                throw new CommandException(\"Command \" + aCommand.toString() + \" failed: \" + ejbe.getMessage(), ejbe.getCausedByException(), aCommand);\n-            } \n-        } catch (CommandException cmdEx) {\n-            if (!(cmdEx instanceof PermissionException)) {            \n-                logRec.setActionResult(ActionLogRecord.Result.InternalError); \n-            } \n-            logRec.setInfo(logRec.getInfo() + \" (\" + cmdEx.getMessage() +\")\");\n-            throw cmdEx;\n-        } catch ( RuntimeException re ) {\n-            logRec.setActionResult(ActionLogRecord.Result.InternalError);\n-            logRec.setInfo(logRec.getInfo() + \" (\" + re.getMessage() +\")\");   \n-            \n-            Throwable cause = re;          \n-            while (cause != null) {\n-                if (cause instanceof ConstraintViolationException) {\n-                    StringBuilder sb = new StringBuilder(); \n-                    sb.append(\"Unexpected bean validation constraint exception:\"); \n-                    ConstraintViolationException constraintViolationException = (ConstraintViolationException) cause;\n-                    for (ConstraintViolation<?> violation : constraintViolationException.getConstraintViolations()) {\n-                        sb.append(\" Invalid value: <<<\").append(violation.getInvalidValue()).append(\">>> for \").append(violation.getPropertyPath()).append(\" at \").append(violation.getLeafBean()).append(\" - \").append(violation.getMessage());\n-                    }\n-                    logger.log(Level.SEVERE, sb.toString());\n-                    // set this more detailed info in action log\n-                    logRec.setInfo(logRec.getInfo() + \" (\" +  sb.toString() +\")\");\n-                }\n-                cause = cause.getCause();\n-            }           \n-            \n-            throw re;\n-            \n-        } finally {\n-            //when we get here we need to wipe out the command list so that\n-            //failed commands don't have their onSuccess methods run.\n-            getContext().cancelCommandSequence();\n-            if (logRec.getActionResult() == null) {\n-                logRec.setActionResult(ActionLogRecord.Result.OK);\n-            } else {\n-                try{\n-                     ejbCtxt.setRollbackOnly();\n-                } catch (IllegalStateException isEx){\n-                    //Not in a transaction nothing to rollback\n-                }                  \n+              logger.fine(\"Current Command Stack (\" + instance + \"): \");\n+              commandsCalled.forEach((c) -> {\n+                logger.fine(\"Command (\" + instance + \"): \" + c.getClass().getSimpleName()\n+                  + \"for DvObjects\");\n+                for (Map.Entry<String, DvObject> e : ((Map<String, DvObject>) c.getAffectedDvObjects())\n+                  .entrySet()) {\n+                  logger.fine(\"(\" + instance + \"): \" + e.getKey() + \" : \" + e.getValue().getId());\n+                }\n+              });\n+              logger.fine(\"Adding command(\" + instance + \"): \" + command.getClass().getSimpleName()\n+                + \" for DvObjects\");\n+              for (Map.Entry<String, DvObject> e : ((Map<String, DvObject>) command\n+                .getAffectedDvObjects()).entrySet()) {\n+                logger.fine(e.getKey() + \" : \" + e.getValue().getId());\n+              }\n+            } catch (Exception e) {\n+              logger.fine(\"Exception logging command stack(\" + instance + \"): \" + e.getMessage());\n             }\n-            logRec.setEndTime(new java.util.Date());\n-            logSvc.log(logRec);\n+          }\n+          commandsCalled.push(command);\n         }\n-    }\n-    \n-    protected void completeCommand(Command command, Object r, Stack<Command> called) {\n-        \n-        if (called.isEmpty()){\n-            return;\n-        }\n-        \n-        Command test = called.get(0);\n-        if (!test.equals(command)) {\n-            //if it's not the first command on the stack it must be an \"inner\" command\n-            //and we don't want to run its onSuccess until all commands have comepleted successfully\n-            return;\n-        }\n-        \n-        for (Command commandLoop : called) {\n-           commandLoop.onSuccess(ctxt, r);\n-        }\n-        \n-    }\n-    \n-\n-    public CommandContext getContext() {\n-        if (ctxt == null) {\n-            ctxt = new CommandContext() {\n-\n-                public Stack<Command> commandsCalled;\n-\n-                @Override\n-                public void addCommand(Command command) {\n-\n-                    if (logger.isLoggable(Level.FINE) && !commandsCalled.isEmpty()) {\n-                        int instance = (int) (100 * Math.random());\n-                        try {\n-                            logger.fine(\"Current Command Stack (\" + instance + \"): \");\n-                            commandsCalled.forEach((c) -> {\n-                                logger.fine(\"Command (\" + instance + \"): \" + c.getClass().getSimpleName()\n-                                        + \"for DvObjects\");\n-                                for (Map.Entry<String, DvObject> e : ((Map<String, DvObject>) c.getAffectedDvObjects())\n-                                        .entrySet()) {\n-                                    logger.fine(\"(\" + instance + \"): \" + e.getKey() + \" : \" + e.getValue().getId());\n-                                }\n-                            });\n-                            logger.fine(\"Adding command(\" + instance + \"): \" + command.getClass().getSimpleName()\n-                                    + \" for DvObjects\");\n-                            for (Map.Entry<String, DvObject> e : ((Map<String, DvObject>) command\n-                                    .getAffectedDvObjects()).entrySet()) {\n-                                logger.fine(e.getKey() + \" : \" + e.getValue().getId());\n-                            }\n-                        } catch (Exception e) {\n-                            logger.fine(\"Exception logging command stack(\" + instance + \"): \" + e.getMessage());\n-                        }\n-                    }\n-\t\t\t\t\tcommandsCalled.push(command);\n-                }\n-                \n-                \n-                @Override\n-                public Stack<Command> getCommandsCalled(){\n-                    return commandsCalled;\n-                }\n-                \n-                \n-                @Override\n-                public DatasetServiceBean datasets() {\n-                    return datasetService;\n-                }\n \n-                @Override\n-                public DataverseServiceBean dataverses() {\n-                    return dataverseService;\n-                }\n \n-                @Override\n-                public DataverseRoleServiceBean roles() {\n-                    return rolesService;\n-                }\n+        @Override\n+        public Stack<Command> getCommandsCalled() {\n+          return commandsCalled;\n+        }\n \n-                @Override\n-                public BuiltinUserServiceBean builtinUsers() {\n-                    return usersService;\n-                }\n \n-                @Override\n-                public IndexServiceBean index() {\n-                    return indexService;\n-                }\n-                \n-                @Override\n-                public IndexBatchServiceBean indexBatch() {\n-                    return indexBatchService;\n-                }\n+        @Override\n+        public DatasetServiceBean datasets() {\n+          return datasetService;\n+        }\n \n-                @Override\n-                public SolrIndexServiceBean solrIndex() {\n-                    return solrIndexService;\n-                }\n+        @Override\n+        public DataverseServiceBean dataverses() {\n+          return dataverseService;\n+        }\n \n-                @Override\n-                public SearchServiceBean search() {\n-                    return searchService;\n-                }\n+        @Override\n+        public DataverseRoleServiceBean roles() {\n+          return rolesService;\n+        }\n \n-                @Override\n-                public IngestServiceBean ingest() {\n-                    return ingestService;\n-                }\n-                \n-                @Override\n-                public PermissionServiceBean permissions() {\n-                    return permissionService;\n-                }\n+        @Override\n+        public BuiltinUserServiceBean builtinUsers() {\n+          return usersService;\n+        }\n \n-                @Override\n-                public DvObjectServiceBean dvObjects() {\n-                    return dvObjectService;\n-                }\n+        @Override\n+        public IndexServiceBean index() {\n+          return indexService;\n+        }\n \n-                @Override\n-                public DataFileServiceBean files() {\n-                    return dataFileService;\n-                }\n+        @Override\n+        public IndexBatchServiceBean indexBatch() {\n+          return indexBatchService;\n+        }\n \n-                @Override\n-                public EntityManager em() {\n-                    return em;\n-                }\n+        @Override\n+        public SolrIndexServiceBean solrIndex() {\n+          return solrIndexService;\n+        }\n \n-                @Override\n-                public DataverseFacetServiceBean facets() {\n-                    return dataverseFacetService;\n-                }\n+        @Override\n+        public SearchServiceBean search() {\n+          return searchService;\n+        }\n \n-                @Override\n-                public FeaturedDataverseServiceBean featuredDataverses() {\n-                    return featuredDataverseService;\n-                }\n+        @Override\n+        public IngestServiceBean ingest() {\n+          return ingestService;\n+        }\n \n-                @Override\n-                public TemplateServiceBean templates() {\n-                    return templateService;\n-                }\n-                \n-                @Override\n-                public SavedSearchServiceBean savedSearches() {\n-                    return savedSearchService;\n-                }\n+        @Override\n+        public PermissionServiceBean permissions() {\n+          return permissionService;\n+        }\n \n-                @Override\n-                public DataverseFieldTypeInputLevelServiceBean fieldTypeInputLevels() {\n-                    return fieldTypeInputLevels;\n-                }\n+        @Override\n+        public DvObjectServiceBean dvObjects() {\n+          return dvObjectService;\n+        }\n \n-                @Override\n-                public DOIEZIdServiceBean doiEZId() {\n-                    return doiEZId;\n-                }\n-                \n-                @Override\n-                public DOIDataCiteServiceBean doiDataCite() {\n-                    return doiDataCite;\n-                }\n+        @Override\n+        public DataFileServiceBean files() {\n+          return dataFileService;\n+        }\n \n-                @Override\n-                public FakePidProviderServiceBean fakePidProvider() {\n-                    return fakePidProvider;\n-                }\n+        @Override\n+        public EntityManager em() {\n+          return em;\n+        }\n \n-                @Override\n-                public HandlenetServiceBean handleNet() {\n-                    return handleNet;\n-                }\n+        @Override\n+        public DataverseFacetServiceBean facets() {\n+          return dataverseFacetService;\n+        }\n \n-                @Override\n-                public SettingsServiceBean settings() {\n-                    return settings;\n-                }\n-                \n-                @Override\n-                public GuestbookServiceBean guestbooks() {\n-                    return guestbookService;\n-                }\n+        @Override\n+        public FeaturedDataverseServiceBean featuredDataverses() {\n+          return featuredDataverseService;\n+        }\n \n-                @Override\n-                public GuestbookResponseServiceBean responses() {\n-                    return responses;\n-                }\n-                \n-                @Override\n-                public DataverseLinkingServiceBean dvLinking() {\n-                    return dvLinking;\n-                }\n-                                \n-                @Override\n-                public DatasetLinkingServiceBean dsLinking() {\n-                    return dsLinking;\n-                }\n-                @Override\n-                public DataverseEngine engine() {\n-                    return new DataverseEngine() {\n-                        @Override\n-                        public <R> R submit(Command<R> aCommand) throws CommandException {\n-                            return EjbDataverseEngine.this.submit(aCommand);\n-                        }\n-                    };\n-                }\n+        @Override\n+        public TemplateServiceBean templates() {\n+          return templateService;\n+        }\n \n-                @Override\n-                public ExplicitGroupServiceBean explicitGroups() {\n-                    return explicitGroups;\n-                }\n-                \n-                @Override\n-                public GroupServiceBean groups() {\n-                    return groups;\n-                }\n+        @Override\n+        public SavedSearchServiceBean savedSearches() {\n+          return savedSearchService;\n+        }\n \n-                @Override\n-                public RoleAssigneeServiceBean roleAssignees() {\n-                    return roleAssignees;\n-                }\n-                \n-                @Override\n-                public UserNotificationServiceBean notifications() {\n-                    return userNotificationService;\n-                } \n-                \n-                @Override\n-                public AuthenticationServiceBean authentication() {\n-                    return authentication;\n-                } \n-\n-                @Override\n-                public SystemConfig systemConfig() {\n-                    return systemConfig;\n-                }\n+        @Override\n+        public DataverseFieldTypeInputLevelServiceBean fieldTypeInputLevels() {\n+          return fieldTypeInputLevels;\n+        }\n \n-                @Override\n-                public PrivateUrlServiceBean privateUrl() {\n-                    return privateUrlService;\n-                }\n+        @Override\n+        public DOIEZIdServiceBean doiEZId() {\n+          return doiEZId;\n+        }\n \n-                @Override\n-                public DatasetVersionServiceBean datasetVersion() {\n-                    return datasetVersionService;\n-                }\n-                \n-                @Override\n-                public WorkflowServiceBean workflows() {\n-                    return workflowService;\n-                }\n+        @Override\n+        public DOIDataCiteServiceBean doiDataCite() {\n+          return doiDataCite;\n+        }\n \n-                @Override\n-                public DataCaptureModuleServiceBean dataCaptureModule() {\n-                    return dataCaptureModule;\n-                }\n-                \n-                @Override\n-                public FileDownloadServiceBean fileDownload() {\n-                    return fileDownloadService;\n-                }\n-                \n-                @Override\n-                public ConfirmEmailServiceBean confirmEmail() {\n-                    return confirmEmailService;\n-                }\n-                \n-                @Override\n-                public ActionLogServiceBean actionLog() {\n-                    return logSvc;\n-                }\n+        @Override\n+        public FakePidProviderServiceBean fakePidProvider() {\n+          return fakePidProvider;\n+        }\n \n-                @Override\n-                public void beginCommandSequence() {\n-                    this.commandsCalled = new Stack();\n-                }\n+        @Override\n+        public HandlenetServiceBean handleNet() {\n+          return handleNet;\n+        }\n \n-                @Override\n-                public boolean completeCommandSequence(Command command) {\n-                    this.commandsCalled.clear();\n-                    return true;\n-                }\n+        @Override\n+        public SettingsServiceBean settings() {\n+          return settings;\n+        }\n \n-                @Override\n-                public void cancelCommandSequence() {\n-                    this.commandsCalled = new Stack();\n-                }\n+        @Override\n+        public GuestbookServiceBean guestbooks() {\n+          return guestbookService;\n+        }\n+\n+        @Override\n+        public GuestbookResponseServiceBean responses() {\n+          return responses;\n+        }\n+\n+        @Override\n+        public DataverseLinkingServiceBean dvLinking() {\n+          return dvLinking;\n+        }\n+\n+        @Override\n+        public DatasetLinkingServiceBean dsLinking() {\n+          return dsLinking;\n+        }\n+\n+        @Override\n+        public DataverseEngine engine() {\n+          return new DataverseEngine() {\n+            @Override\n+            public <R> R submit(Command<R> aCommand) throws CommandException {\n+              return EjbDataverseEngine.this.submit(aCommand);\n+            }\n+          };\n+        }\n+\n+        @Override\n+        public ExplicitGroupServiceBean explicitGroups() {\n+          return explicitGroups;\n+        }\n+\n+        @Override\n+        public GroupServiceBean groups() {\n+          return groups;\n+        }\n+\n+        @Override\n+        public RoleAssigneeServiceBean roleAssignees() {\n+          return roleAssignees;\n+        }\n+\n+        @Override\n+        public UserNotificationServiceBean notifications() {\n+          return userNotificationService;\n+        }\n \n-            };\n+        @Override\n+        public AuthenticationServiceBean authentication() {\n+          return authentication;\n         }\n \n-        return ctxt;\n+        @Override\n+        public SystemConfig systemConfig() {\n+          return systemConfig;\n+        }\n+\n+        @Override\n+        public PrivateUrlServiceBean privateUrl() {\n+          return privateUrlService;\n+        }\n+\n+        @Override\n+        public DatasetVersionServiceBean datasetVersion() {\n+          return datasetVersionService;\n+        }\n+\n+        @Override\n+        public WorkflowServiceBean workflows() {\n+          return workflowService;\n+        }\n+\n+        @Override\n+        public DataCaptureModuleServiceBean dataCaptureModule() {\n+          return dataCaptureModule;\n+        }\n+\n+        @Override\n+        public FileDownloadServiceBean fileDownload() {\n+          return fileDownloadService;\n+        }\n+\n+        @Override\n+        public ConfirmEmailServiceBean confirmEmail() {\n+          return confirmEmailService;\n+        }\n+\n+        @Override\n+        public ActionLogServiceBean actionLog() {\n+          return logSvc;\n+        }\n+\n+        @Override\n+        public void beginCommandSequence() {\n+          this.commandsCalled = new Stack();\n+        }\n+\n+        @Override\n+        public boolean completeCommandSequence(Command command) {\n+          this.commandsCalled.clear();\n+          return true;\n+        }\n+\n+        @Override\n+        public void cancelCommandSequence() {\n+          this.commandsCalled = new Stack();\n+        }\n+\n+      };\n     }\n \n+    return ctxt;\n+  }\n+\n }\n",
            "diff_size": 772
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/102/EjbDataverseEngine.java\nindex 0937f6f6cf7..c5518b813cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/102/EjbDataverseEngine.java\n@@ -380,7 +380,7 @@ public class EjbDataverseEngine {\n                             logger.fine(\"Exception logging command stack(\" + instance + \"): \" + e.getMessage());\n                         }\n                     }\n-\t\t\t\t\tcommandsCalled.push(command);\n+            commandsCalled.push(command);\n                 }\n                 \n                 \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/102/EjbDataverseEngine.java\nindex 0937f6f6cf7..61d2bf0b834 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/102/EjbDataverseEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/102/EjbDataverseEngine.java\n@@ -380,7 +380,7 @@ public class EjbDataverseEngine {\n                             logger.fine(\"Exception logging command stack(\" + instance + \"): \" + e.getMessage());\n                         }\n                     }\n-\t\t\t\t\tcommandsCalled.push(command);\n+                       commandsCalled.push(command);\n                 }\n                 \n                 \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}