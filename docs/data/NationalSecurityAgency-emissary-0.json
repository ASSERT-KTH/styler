{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "190",
                "column": "29",
                "severity": "warning",
                "message": "'}' at column 29 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n    /** This class is not meant to be instantiated. */\n    private PlaceStarter() {}\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "190",
                    "column": "29",
                    "severity": "warning",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "37",
                    "column": "15",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 14, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "183",
                    "column": "15",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 14, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/0/PlaceStarter.java\nindex df5a57478c6..47cb9c56c9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/0/PlaceStarter.java\n@@ -34,7 +34,7 @@ public class PlaceStarter {\n             classConf = ConfigUtil.getMasterClassNames();\n         } catch (IOException | EmissaryException iox) {\n             logger.error(\"Missing MasterClassNames.cfg: all places will become \" + defaultClassName\n-                    + \" which is probably not what you want. Config is now \" + System.getProperty(ConfigUtil.CONFIG_DIR_PROPERTY), iox);\n+              + \" which is probably not what you want. Config is now \" + System.getProperty(ConfigUtil.CONFIG_DIR_PROPERTY), iox);\n             System.exit(1);\n         }\n     }\n@@ -44,7 +44,7 @@ public class PlaceStarter {\n      *\n      * @param theLocation key for the new place\n      * @param theClassStr string name of the class to instantiate\n-     * @param directory the string directory name to register in\n+     * @param directory   the string directory name to register in\n      * @return the place that was found or created, or null if it can't be done\n      */\n     public static IServiceProviderPlace createPlace(final String theLocation, final String theClassStr, final String directory) {\n@@ -59,14 +59,14 @@ public class PlaceStarter {\n     /**\n      * Create a place using Stream based config\n      *\n-     * @param theLocation key for the new place\n+     * @param theLocation     key for the new place\n      * @param theConfigStream stream configuration for the place\n-     * @param theClassStr string name of the class to instantiate\n-     * @param directory the string directory name to register in\n+     * @param theClassStr     string name of the class to instantiate\n+     * @param directory       the string directory name to register in\n      * @return the place that was found or created, or null if it can't be done\n      */\n     public static IServiceProviderPlace createPlace(final String theLocation, final InputStream theConfigStream, final String theClassStr,\n-            final String directory) {\n+                                                    final String directory) {\n         // generate constructor args\n         final Object[] constructorArgs = {theConfigStream, directory, theLocation};\n         return createPlace(theLocation, constructorArgs, theClassStr);\n@@ -76,9 +76,9 @@ public class PlaceStarter {\n      * Create a place using generic Object[] constructor args for maximum flexibility for finding any existing constructor.\n      * Will check to see if the place already exists first and return the existing instance from the Namespace if it does.\n      *\n-     * @param theLocation key for the new place\n+     * @param theLocation     key for the new place\n      * @param constructorArgs array of args to pass to the place constructor\n-     * @param theClassStr string name of the class to instantiate\n+     * @param theClassStr     string name of the class to instantiate\n      * @return the place that was found or created, or null if it can't be done\n      */\n     public static IServiceProviderPlace createPlace(final String theLocation, final Object[] constructorArgs, final String theClassStr) {\n@@ -151,6 +151,7 @@ public class PlaceStarter {\n \n \n     // ////////////////////////////////////////////////////////////\n+\n     /**\n      * method to check if the place already exists.\n      */\n@@ -179,13 +180,16 @@ public class PlaceStarter {\n         final List<String> classStringList = classConf.findEntries(thePlaceName);\n         if (classStringList.size() < 1) {\n             logger.error(\"Need a CLASS config entry for \" + thePlaceName + \" check entry in emissary.admin.MasterClassNames.cfg, using default \"\n-                    + defaultClassName + \" which is probably not what you want.\");\n+              + defaultClassName + \" which is probably not what you want.\");\n             return defaultClassName;\n         }\n         final String out = classStringList.get(0);\n         return out;\n     }\n \n-    /** This class is not meant to be instantiated. */\n-    private PlaceStarter() {}\n+    /**\n+     * This class is not meant to be instantiated.\n+     */\n+    private PlaceStarter() {\n+    }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/0/PlaceStarter.java\nindex df5a57478c6..4421239a785 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/0/PlaceStarter.java\n@@ -187,5 +187,6 @@ public class PlaceStarter {\n     }\n \n     /** This class is not meant to be instantiated. */\n-    private PlaceStarter() {}\n-}\n+    private PlaceStarter() {\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "column": "5",
                    "severity": "warning",
                    "message": "'STATIC_INIT' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 170 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 170 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/0/PlaceStarter.java\nindex df5a57478c6..7adc042c684 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/0/PlaceStarter.java\n@@ -4,7 +4,6 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.List;\n-\n import emissary.config.ConfigUtil;\n import emissary.config.Configurator;\n import emissary.core.EmissaryException;\n@@ -22,19 +21,21 @@ import org.slf4j.LoggerFactory;\n /**\n  * Static methods to start places in the system.\n  */\n+\n+\n public class PlaceStarter {\n+\n     private static final Logger logger = LoggerFactory.getLogger(PlaceStarter.class);\n \n     private static Configurator classConf = null;\n \n-    protected static final String defaultClassName = \"emissary.place.sample.DevNullPlace\";\n \n+    protected static final String defaultClassName = \"emissary.place.sample.DevNullPlace\";\n     static {\n         try {\n             classConf = ConfigUtil.getMasterClassNames();\n         } catch (IOException | EmissaryException iox) {\n-            logger.error(\"Missing MasterClassNames.cfg: all places will become \" + defaultClassName\n-                    + \" which is probably not what you want. Config is now \" + System.getProperty(ConfigUtil.CONFIG_DIR_PROPERTY), iox);\n+            logger.error(\"Missing MasterClassNames.cfg: all places will become \" + defaultClassName + \" which is probably not what you want. Config is now \" + System.getProperty(ConfigUtil.CONFIG_DIR_PROPERTY), iox);\n             System.exit(1);\n         }\n     }\n@@ -47,12 +48,12 @@ public class PlaceStarter {\n      * @param directory the string directory name to register in\n      * @return the place that was found or created, or null if it can't be done\n      */\n+\n+\n     public static IServiceProviderPlace createPlace(final String theLocation, final String theClassStr, final String directory) {\n         // generate constructor args\n         final String theConfigFile = theClassStr + ConfigUtil.CONFIG_FILE_ENDING;\n-\n         final Object[] constructorArgs = {theConfigFile, directory, theLocation};\n-\n         return createPlace(theLocation, constructorArgs, theClassStr);\n     }\n \n@@ -65,8 +66,9 @@ public class PlaceStarter {\n      * @param directory the string directory name to register in\n      * @return the place that was found or created, or null if it can't be done\n      */\n-    public static IServiceProviderPlace createPlace(final String theLocation, final InputStream theConfigStream, final String theClassStr,\n-            final String directory) {\n+\n+\n+    public static IServiceProviderPlace createPlace(final String theLocation, final InputStream theConfigStream, final String theClassStr, final String directory) {\n         // generate constructor args\n         final Object[] constructorArgs = {theConfigStream, directory, theLocation};\n         return createPlace(theLocation, constructorArgs, theClassStr);\n@@ -81,9 +83,10 @@ public class PlaceStarter {\n      * @param theClassStr string name of the class to instantiate\n      * @return the place that was found or created, or null if it can't be done\n      */\n+\n+\n     public static IServiceProviderPlace createPlace(final String theLocation, final Object[] constructorArgs, final String theClassStr) {\n         logger.debug(\"Ready to createPlace \" + theLocation + \" as \" + theClassStr);\n-\n         final long t1 = System.currentTimeMillis();\n \n         // check the input arguments\n@@ -113,13 +116,12 @@ public class PlaceStarter {\n         }\n \n         final long t2 = System.currentTimeMillis();\n-\n         logger.debug(\"Started \" + theLocation + \" in \" + (t2 - t1) / 1000.0 + \"s\");\n         return thePlace;\n     }\n \n-    public static void shutdownFailedPlace(final String loc, final IServiceProviderPlace place) {\n \n+    public static void shutdownFailedPlace(final String loc, final IServiceProviderPlace place) {\n         try {\n             logger.warn(\"shutting down the failed place: \" + loc);\n             if (place != null) {\n@@ -155,6 +157,8 @@ public class PlaceStarter {\n      * method to check if the place already exists.\n      */\n     // ////////////////////////////////////////////////////////////\n+\n+\n     public static IServiceProviderPlace alreadyExists(final String theLocation) {\n         final String thePlaceHost = Startup.placeHost(theLocation);\n         // TODO should we add a check for index of? Can cause an exception if // isn't present\n@@ -165,27 +169,34 @@ public class PlaceStarter {\n             return thePlace;\n         } catch (NamespaceException nse) {\n             // expected when the place doesn't exist\n+\n         } catch (Throwable t) {\n             // empty catch block\n+\n         }\n         return null;\n     }\n \n+\n     public static String getClassString(final String theLocation) {\n         final String thePlaceName = Startup.placeName(theLocation);\n         if (thePlaceName == null || thePlaceName.length() == 0) {\n             logger.error(\"Illegal location specified \" + theLocation + \", has no place name\");\n         }\n+\n         final List<String> classStringList = classConf.findEntries(thePlaceName);\n         if (classStringList.size() < 1) {\n-            logger.error(\"Need a CLASS config entry for \" + thePlaceName + \" check entry in emissary.admin.MasterClassNames.cfg, using default \"\n-                    + defaultClassName + \" which is probably not what you want.\");\n+            logger.error(\"Need a CLASS config entry for \" + thePlaceName + \" check entry in emissary.admin.MasterClassNames.cfg, using default \" + defaultClassName + \" which is probably not what you want.\");\n             return defaultClassName;\n         }\n+\n         final String out = classStringList.get(0);\n         return out;\n     }\n \n     /** This class is not meant to be instantiated. */\n-    private PlaceStarter() {}\n-}\n+\n+    private PlaceStarter() {\n+\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "190",
                    "column": "29",
                    "severity": "warning",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/0/PlaceStarter.java\nindex df5a57478c6..81eb58d86e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/0/PlaceStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/0/PlaceStarter.java\n@@ -188,4 +188,5 @@ public class PlaceStarter {\n \n     /** This class is not meant to be instantiated. */\n     private PlaceStarter() {}\n+\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "190",
                    "column": "29",
                    "severity": "warning",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}