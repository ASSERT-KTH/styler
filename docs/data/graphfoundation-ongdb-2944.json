{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2944",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "291",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2944/IndexMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2944/IndexMap.java\nindex de50c8005cf..af6f2cbfaa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2944/IndexMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2944/IndexMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.util.Collections;\n@@ -38,309 +39,308 @@ import org.neo4j.internal.kernel.api.schema.SchemaDescriptor;\n \n /**\n  * Bundles various mappings to IndexProxy. Used by IndexingService via IndexMapReference.\n- *\n+ * <p>\n  * IndexingService is expected to either make a copy before making any changes or update this\n  * while being single threaded.\n  */\n public final class IndexMap implements Cloneable\n {\n-    private final PrimitiveLongObjectMap<IndexProxy> indexesById;\n-    private final Map<SchemaDescriptor,IndexProxy> indexesByDescriptor;\n-    private final Map<SchemaDescriptor,Long> indexIdsByDescriptor;\n-    private final PrimitiveIntObjectMap<Set<SchemaDescriptor>> descriptorsByLabel;\n-    private final PrimitiveIntObjectMap<Set<SchemaDescriptor>> descriptorsByProperty;\n-\n-    public IndexMap()\n+  private final PrimitiveLongObjectMap<IndexProxy> indexesById;\n+  private final Map<SchemaDescriptor, IndexProxy> indexesByDescriptor;\n+  private final Map<SchemaDescriptor, Long> indexIdsByDescriptor;\n+  private final PrimitiveIntObjectMap<Set<SchemaDescriptor>> descriptorsByLabel;\n+  private final PrimitiveIntObjectMap<Set<SchemaDescriptor>> descriptorsByProperty;\n+\n+  public IndexMap()\n+  {\n+    this(Primitive.longObjectMap(), new HashMap<>(), new HashMap<>());\n+  }\n+\n+  IndexMap(PrimitiveLongObjectMap<IndexProxy> indexesById)\n+  {\n+    this(indexesById, indexesByDescriptor(indexesById), indexIdsByDescriptor(indexesById));\n+  }\n+\n+  private IndexMap(\n+      PrimitiveLongObjectMap<IndexProxy> indexesById,\n+      Map<SchemaDescriptor, IndexProxy> indexesByDescriptor,\n+      Map<SchemaDescriptor, Long> indexIdsByDescriptor)\n+  {\n+    this.indexesById = indexesById;\n+    this.indexesByDescriptor = indexesByDescriptor;\n+    this.indexIdsByDescriptor = indexIdsByDescriptor;\n+    this.descriptorsByLabel = Primitive.intObjectMap();\n+    this.descriptorsByProperty = Primitive.intObjectMap();\n+    for (SchemaDescriptor schema : indexesByDescriptor.keySet())\n     {\n-        this( Primitive.longObjectMap(), new HashMap<>(), new HashMap<>() );\n+      addDescriptorToLookups(schema);\n     }\n-\n-    IndexMap( PrimitiveLongObjectMap<IndexProxy> indexesById )\n+  }\n+\n+  public IndexProxy getIndexProxy(long indexId)\n+  {\n+    return indexesById.get(indexId);\n+  }\n+\n+  public IndexProxy getIndexProxy(SchemaDescriptor descriptor)\n+  {\n+    return indexesByDescriptor.get(descriptor);\n+  }\n+\n+  public long getIndexId(SchemaDescriptor descriptor)\n+  {\n+    return indexIdsByDescriptor.get(descriptor);\n+  }\n+\n+  public void putIndexProxy(long indexId, IndexProxy indexProxy)\n+  {\n+    SchemaDescriptor schema = indexProxy.getDescriptor().schema();\n+    indexesById.put(indexId, indexProxy);\n+    indexesByDescriptor.put(schema, indexProxy);\n+    indexIdsByDescriptor.put(schema, indexId);\n+    addDescriptorToLookups(schema);\n+  }\n+\n+  public IndexProxy removeIndexProxy(long indexId)\n+  {\n+    IndexProxy removedProxy = indexesById.remove(indexId);\n+    if (removedProxy == null)\n     {\n-        this( indexesById, indexesByDescriptor( indexesById ), indexIdsByDescriptor( indexesById ) );\n+      return null;\n     }\n \n-    private IndexMap(\n-            PrimitiveLongObjectMap<IndexProxy> indexesById,\n-            Map<SchemaDescriptor,IndexProxy> indexesByDescriptor,\n-            Map<SchemaDescriptor,Long> indexIdsByDescriptor )\n-    {\n-        this.indexesById = indexesById;\n-        this.indexesByDescriptor = indexesByDescriptor;\n-        this.indexIdsByDescriptor = indexIdsByDescriptor;\n-        this.descriptorsByLabel = Primitive.intObjectMap();\n-        this.descriptorsByProperty = Primitive.intObjectMap();\n-        for ( SchemaDescriptor schema : indexesByDescriptor.keySet() )\n-        {\n-            addDescriptorToLookups( schema );\n-        }\n-    }\n+    SchemaDescriptor schema = removedProxy.getDescriptor().schema();\n+    indexesByDescriptor.remove(schema);\n \n-    public IndexProxy getIndexProxy( long indexId )\n+    removeFromLookup(schema.keyId(), schema, descriptorsByLabel);\n+    for (int propertyId : schema.getPropertyIds())\n     {\n-        return indexesById.get( indexId );\n+      removeFromLookup(propertyId, schema, descriptorsByProperty);\n     }\n \n-    public IndexProxy getIndexProxy( SchemaDescriptor descriptor )\n-    {\n-        return indexesByDescriptor.get( descriptor );\n-    }\n-\n-    public long getIndexId( SchemaDescriptor descriptor )\n-    {\n-        return indexIdsByDescriptor.get( descriptor );\n-    }\n+    return removedProxy;\n+  }\n \n-    public void putIndexProxy( long indexId, IndexProxy indexProxy )\n+  public void forEachIndexProxy(BiConsumer<Long, IndexProxy> consumer)\n+  {\n+    indexesById.visitEntries((key, indexProxy) ->\n     {\n-        SchemaDescriptor schema = indexProxy.getDescriptor().schema();\n-        indexesById.put( indexId, indexProxy );\n-        indexesByDescriptor.put( schema, indexProxy );\n-        indexIdsByDescriptor.put( schema, indexId );\n-        addDescriptorToLookups( schema );\n-    }\n-\n-    public IndexProxy removeIndexProxy( long indexId )\n+      consumer.accept(key, indexProxy);\n+      return false;\n+    });\n+  }\n+\n+  public Iterable<IndexProxy> getAllIndexProxies()\n+  {\n+    return indexesById.values();\n+  }\n+\n+  /**\n+   * Get all indexes that would be affected by changes in the input labels and/or properties. The returned\n+   * indexes are guaranteed to contain all affected indexes, but might also contain unaffected indexes as\n+   * we cannot provide matching without checking unaffected properties for composite indexes.\n+   *\n+   * @param changedLabels   set of labels that have changed\n+   * @param unchangedLabels set of labels that are unchanged\n+   * @param properties      set of properties\n+   * @return set of SchemaDescriptors describing the potentially affected indexes\n+   */\n+  public Set<SchemaDescriptor> getRelatedIndexes(\n+      long[] changedLabels, long[] unchangedLabels, PrimitiveIntSet properties)\n+  {\n+    if (changedLabels.length == 1 && properties.isEmpty())\n     {\n-        IndexProxy removedProxy = indexesById.remove( indexId );\n-        if ( removedProxy == null )\n-        {\n-            return null;\n-        }\n-\n-        SchemaDescriptor schema = removedProxy.getDescriptor().schema();\n-        indexesByDescriptor.remove( schema );\n-\n-        removeFromLookup( schema.keyId(), schema, descriptorsByLabel );\n-        for ( int propertyId : schema.getPropertyIds() )\n-        {\n-            removeFromLookup( propertyId, schema, descriptorsByProperty );\n-        }\n-\n-        return removedProxy;\n+      Set<SchemaDescriptor> descriptors = descriptorsByLabel.get((int) changedLabels[0]);\n+      return descriptors == null ? Collections.emptySet() : descriptors;\n     }\n \n-    public void forEachIndexProxy( BiConsumer<Long, IndexProxy> consumer )\n+    if (changedLabels.length == 0 && properties.size() == 1)\n     {\n-        indexesById.visitEntries( ( key, indexProxy ) ->\n-        {\n-            consumer.accept( key, indexProxy);\n-            return false;\n-        } );\n+      return getDescriptorsByProperties(unchangedLabels, properties);\n     }\n \n-    public Iterable<IndexProxy> getAllIndexProxies()\n+    Set<SchemaDescriptor> descriptors = extractIndexesByLabels(changedLabels);\n+    descriptors.addAll(getDescriptorsByProperties(unchangedLabels, properties));\n+\n+    return descriptors;\n+  }\n+\n+  @Override\n+  public IndexMap clone()\n+  {\n+    return new IndexMap(clonePrimitiveMap(indexesById), cloneMap(indexesByDescriptor),\n+        cloneMap(indexIdsByDescriptor));\n+  }\n+\n+  public Iterator<SchemaDescriptor> descriptors()\n+  {\n+    return indexesByDescriptor.keySet().iterator();\n+  }\n+\n+  public PrimitiveLongIterator indexIds()\n+  {\n+    return indexesById.iterator();\n+  }\n+\n+  public int size()\n+  {\n+    return indexesById.size();\n+  }\n+\n+  // HELPERS\n+\n+  private <K, V> Map<K, V> cloneMap(Map<K, V> map)\n+  {\n+    Map<K, V> shallowCopy = new HashMap<>(map.size());\n+    shallowCopy.putAll(map);\n+    return shallowCopy;\n+  }\n+\n+  private PrimitiveLongObjectMap<IndexProxy> clonePrimitiveMap(PrimitiveLongObjectMap<IndexProxy> indexesById)\n+  {\n+    return PrimitiveLongCollections.copy(indexesById);\n+  }\n+\n+  private void addDescriptorToLookups(SchemaDescriptor schema)\n+  {\n+    addToLookup(schema.keyId(), schema, descriptorsByLabel);\n+\n+    for (int propertyId : schema.getPropertyIds())\n     {\n-        return indexesById.values();\n+      addToLookup(propertyId, schema, descriptorsByProperty);\n     }\n-\n-    /**\n-     * Get all indexes that would be affected by changes in the input labels and/or properties. The returned\n-     * indexes are guaranteed to contain all affected indexes, but might also contain unaffected indexes as\n-     * we cannot provide matching without checking unaffected properties for composite indexes.\n-     *\n-     * @param changedLabels set of labels that have changed\n-     * @param unchangedLabels set of labels that are unchanged\n-     * @param properties set of properties\n-     * @return set of SchemaDescriptors describing the potentially affected indexes\n-     */\n-    public Set<SchemaDescriptor> getRelatedIndexes(\n-            long[] changedLabels, long[] unchangedLabels, PrimitiveIntSet properties )\n+  }\n+\n+  private void addToLookup(\n+      int key,\n+      SchemaDescriptor schema,\n+      PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup)\n+  {\n+    Set<SchemaDescriptor> descriptors = lookup.get(key);\n+    if (descriptors == null)\n     {\n-        if ( changedLabels.length == 1 && properties.isEmpty() )\n-        {\n-            Set<SchemaDescriptor> descriptors = descriptorsByLabel.get( (int)changedLabels[0] );\n-            return descriptors == null ? Collections.emptySet() : descriptors;\n-        }\n-\n-        if ( changedLabels.length == 0 && properties.size() == 1 )\n-        {\n-            return getDescriptorsByProperties( unchangedLabels, properties );\n-        }\n-\n-        Set<SchemaDescriptor> descriptors = extractIndexesByLabels( changedLabels );\n-        descriptors.addAll( getDescriptorsByProperties( unchangedLabels, properties ) );\n-\n-        return descriptors;\n+      descriptors = new HashSet<>();\n+      lookup.put(key, descriptors);\n     }\n-\n-    @Override\n-    public IndexMap clone()\n+    descriptors.add(schema);\n+  }\n+\n+  private void removeFromLookup(\n+      int key,\n+      SchemaDescriptor schema,\n+      PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup)\n+  {\n+    Set<SchemaDescriptor> descriptors = lookup.get(key);\n+    descriptors.remove(schema);\n+    if (descriptors.isEmpty())\n     {\n-        return new IndexMap( clonePrimitiveMap( indexesById ), cloneMap( indexesByDescriptor ),\n-                cloneMap( indexIdsByDescriptor ) );\n+      lookup.remove(key);\n     }\n+  }\n \n-    public Iterator<SchemaDescriptor> descriptors()\n+  private static Map<SchemaDescriptor, IndexProxy> indexesByDescriptor(PrimitiveLongObjectMap<IndexProxy> indexesById)\n+  {\n+    Map<SchemaDescriptor, IndexProxy> map = new HashMap<>();\n+    for (IndexProxy proxy : indexesById.values())\n     {\n-        return indexesByDescriptor.keySet().iterator();\n+      map.put(proxy.schema(), proxy);\n     }\n+    return map;\n+  }\n \n-    public PrimitiveLongIterator indexIds()\n+  private static Map<SchemaDescriptor, Long> indexIdsByDescriptor(PrimitiveLongObjectMap<IndexProxy> indexesById)\n+  {\n+    Map<SchemaDescriptor, Long> map = new HashMap<>();\n+    indexesById.visitEntries((key, indexProxy) ->\n     {\n-        return indexesById.iterator();\n-    }\n-\n-    public int size()\n+      map.put(indexProxy.schema(), key);\n+      return false;\n+    });\n+    return map;\n+  }\n+\n+  /**\n+   * Get descriptors affected by changed properties. Implementation checks whether doing\n+   * the lookup using the unchanged labels or the changed properties given the smallest final\n+   * set of indexes, and chooses the best way.\n+   *\n+   * @param unchangedLabels set of labels that are unchanged\n+   * @param properties      set of properties that have changed\n+   * @return set of SchemaDescriptors describing the potentially affected indexes\n+   */\n+  private Set<SchemaDescriptor> getDescriptorsByProperties(\n+      long[] unchangedLabels,\n+      PrimitiveIntSet properties)\n+  {\n+    int nIndexesForLabels = countIndexesByLabels(unchangedLabels);\n+    int nIndexesForProperties = countIndexesByProperties(properties);\n+\n+    if (nIndexesForLabels == 0 || nIndexesForProperties == 0)\n     {\n-        return indexesById.size();\n+      return Collections.emptySet();\n     }\n-\n-    // HELPERS\n-\n-    private <K, V> Map<K, V> cloneMap( Map<K, V> map )\n+    if (nIndexesForLabels < nIndexesForProperties)\n     {\n-        Map<K, V> shallowCopy = new HashMap<>( map.size() );\n-        shallowCopy.putAll( map );\n-        return shallowCopy;\n-    }\n-\n-    private PrimitiveLongObjectMap<IndexProxy> clonePrimitiveMap( PrimitiveLongObjectMap<IndexProxy> indexesById )\n-    {\n-        return PrimitiveLongCollections.copy( indexesById );\n-    }\n-\n-    private void addDescriptorToLookups( SchemaDescriptor schema )\n-    {\n-        addToLookup( schema.keyId(), schema, descriptorsByLabel );\n-\n-        for ( int propertyId : schema.getPropertyIds() )\n-        {\n-            addToLookup( propertyId, schema, descriptorsByProperty );\n-        }\n-    }\n-\n-    private void addToLookup(\n-            int key,\n-            SchemaDescriptor schema,\n-            PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup )\n-    {\n-        Set<SchemaDescriptor> descriptors = lookup.get( key );\n-        if ( descriptors == null )\n-        {\n-            descriptors = new HashSet<>();\n-            lookup.put( key, descriptors );\n-        }\n-        descriptors.add( schema );\n-    }\n-\n-    private void removeFromLookup(\n-            int key,\n-            SchemaDescriptor schema,\n-            PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup )\n-    {\n-        Set<SchemaDescriptor> descriptors = lookup.get( key );\n-        descriptors.remove( schema );\n-        if ( descriptors.isEmpty() )\n-        {\n-            lookup.remove( key );\n-        }\n-    }\n-\n-    private static Map<SchemaDescriptor, IndexProxy> indexesByDescriptor( PrimitiveLongObjectMap<IndexProxy> indexesById )\n-    {\n-        Map<SchemaDescriptor, IndexProxy> map = new HashMap<>();\n-        for ( IndexProxy proxy : indexesById.values() )\n-        {\n-            map.put( proxy.schema(), proxy );\n-        }\n-        return map;\n-    }\n-\n-    private static Map<SchemaDescriptor, Long> indexIdsByDescriptor( PrimitiveLongObjectMap<IndexProxy> indexesById )\n-    {\n-        Map<SchemaDescriptor, Long> map = new HashMap<>();\n-        indexesById.visitEntries( ( key, indexProxy ) ->\n-        {\n-            map.put( indexProxy.schema(), key );\n-            return false;\n-        } );\n-        return map;\n-    }\n-\n-    /**\n-     * Get descriptors affected by changed properties. Implementation checks whether doing\n-     * the lookup using the unchanged labels or the changed properties given the smallest final\n-     * set of indexes, and chooses the best way.\n-     *\n-     * @param unchangedLabels set of labels that are unchanged\n-     * @param properties set of properties that have changed\n-     * @return set of SchemaDescriptors describing the potentially affected indexes\n-     */\n-    private Set<SchemaDescriptor> getDescriptorsByProperties(\n-            long[] unchangedLabels,\n-            PrimitiveIntSet properties )\n+      return extractIndexesByLabels(unchangedLabels);\n+    } else\n     {\n-        int nIndexesForLabels = countIndexesByLabels( unchangedLabels );\n-        int nIndexesForProperties = countIndexesByProperties( properties );\n-\n-        if ( nIndexesForLabels == 0 || nIndexesForProperties == 0 )\n-        {\n-            return Collections.emptySet();\n-        }\n-        if ( nIndexesForLabels < nIndexesForProperties )\n-        {\n-            return extractIndexesByLabels( unchangedLabels );\n-        }\n-        else\n-        {\n-            return extractIndexesByProperties( properties );\n-        }\n+      return extractIndexesByProperties(properties);\n     }\n+  }\n \n-    private Set<SchemaDescriptor> extractIndexesByLabels( long[] labels )\n+  private Set<SchemaDescriptor> extractIndexesByLabels(long[] labels)\n+  {\n+    Set<SchemaDescriptor> set = new HashSet<>();\n+    for (long label : labels)\n     {\n-        Set<SchemaDescriptor> set = new HashSet<>();\n-        for ( long label : labels )\n-        {\n-            Set<SchemaDescriptor> forLabel = descriptorsByLabel.get( (int) label );\n-            if ( forLabel != null )\n-            {\n-                set.addAll( forLabel );\n-            }\n-        }\n-        return set;\n+      Set<SchemaDescriptor> forLabel = descriptorsByLabel.get((int) label);\n+      if (forLabel != null)\n+      {\n+        set.addAll(forLabel);\n+      }\n     }\n+    return set;\n+  }\n \n-    private int countIndexesByLabels( long[] labels )\n+  private int countIndexesByLabels(long[] labels)\n+  {\n+    int count = 0;\n+    for (long label : labels)\n     {\n-        int count = 0;\n-        for ( long label : labels )\n-        {\n-            Set<SchemaDescriptor> forLabel = descriptorsByLabel.get( (int) label );\n-            if ( forLabel != null )\n-            {\n-                count += forLabel.size();\n-            }\n-        }\n-        return count;\n+      Set<SchemaDescriptor> forLabel = descriptorsByLabel.get((int) label);\n+      if (forLabel != null)\n+      {\n+        count += forLabel.size();\n+      }\n     }\n+    return count;\n+  }\n \n-    private Set<SchemaDescriptor> extractIndexesByProperties( PrimitiveIntSet properties )\n+  private Set<SchemaDescriptor> extractIndexesByProperties(PrimitiveIntSet properties)\n+  {\n+    Set<SchemaDescriptor> set = new HashSet<>();\n+    for (PrimitiveIntIterator iterator = properties.iterator(); iterator.hasNext(); )\n     {\n-        Set<SchemaDescriptor> set = new HashSet<>();\n-        for ( PrimitiveIntIterator iterator = properties.iterator(); iterator.hasNext(); )\n-        {\n-            Set<SchemaDescriptor> forProperty = descriptorsByProperty.get( iterator.next() );\n-            if ( forProperty != null )\n-            {\n-                set.addAll( forProperty );\n-            }\n-        }\n-        return set;\n+      Set<SchemaDescriptor> forProperty = descriptorsByProperty.get(iterator.next());\n+      if (forProperty != null)\n+      {\n+        set.addAll(forProperty);\n+      }\n     }\n+    return set;\n+  }\n \n-    private int countIndexesByProperties( PrimitiveIntSet properties )\n+  private int countIndexesByProperties(PrimitiveIntSet properties)\n+  {\n+    int count = 0;\n+    for (PrimitiveIntIterator iterator = properties.iterator(); iterator.hasNext(); )\n     {\n-        int count = 0;\n-        for ( PrimitiveIntIterator iterator = properties.iterator(); iterator.hasNext(); )\n-        {\n-            Set<SchemaDescriptor> forProperty = descriptorsByProperty.get( iterator.next() );\n-            if ( forProperty != null )\n-            {\n-                count += forProperty.size();\n-            }\n-        }\n-        return count;\n+      Set<SchemaDescriptor> forProperty = descriptorsByProperty.get(iterator.next());\n+      if (forProperty != null)\n+      {\n+        count += forProperty.size();\n+      }\n     }\n+    return count;\n+  }\n }\n",
            "diff_size": 426
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2944/IndexMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2944/IndexMap.java\nindex de50c8005cf..3ff3a0bd656 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2944/IndexMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2944/IndexMap.java\n@@ -60,10 +60,7 @@ public final class IndexMap implements Cloneable\n         this( indexesById, indexesByDescriptor( indexesById ), indexIdsByDescriptor( indexesById ) );\n     }\n \n-    private IndexMap(\n-            PrimitiveLongObjectMap<IndexProxy> indexesById,\n-            Map<SchemaDescriptor,IndexProxy> indexesByDescriptor,\n-            Map<SchemaDescriptor,Long> indexIdsByDescriptor )\n+    private IndexMap( PrimitiveLongObjectMap<IndexProxy> indexesById, Map<SchemaDescriptor,IndexProxy> indexesByDescriptor, Map<SchemaDescriptor,Long> indexIdsByDescriptor )\n     {\n         this.indexesById = indexesById;\n         this.indexesByDescriptor = indexesByDescriptor;\n@@ -120,11 +117,11 @@ public final class IndexMap implements Cloneable\n         return removedProxy;\n     }\n \n-    public void forEachIndexProxy( BiConsumer<Long, IndexProxy> consumer )\n+    public void forEachIndexProxy( BiConsumer<Long,IndexProxy> consumer )\n     {\n         indexesById.visitEntries( ( key, indexProxy ) ->\n         {\n-            consumer.accept( key, indexProxy);\n+            consumer.accept( key, indexProxy );\n             return false;\n         } );\n     }\n@@ -144,12 +141,11 @@ public final class IndexMap implements Cloneable\n      * @param properties set of properties\n      * @return set of SchemaDescriptors describing the potentially affected indexes\n      */\n-    public Set<SchemaDescriptor> getRelatedIndexes(\n-            long[] changedLabels, long[] unchangedLabels, PrimitiveIntSet properties )\n+    public Set<SchemaDescriptor> getRelatedIndexes( long[] changedLabels, long[] unchangedLabels, PrimitiveIntSet properties )\n     {\n         if ( changedLabels.length == 1 && properties.isEmpty() )\n         {\n-            Set<SchemaDescriptor> descriptors = descriptorsByLabel.get( (int)changedLabels[0] );\n+            Set<SchemaDescriptor> descriptors = descriptorsByLabel.get( ( int)changedLabels[0] );\n             return descriptors == null ? Collections.emptySet() : descriptors;\n         }\n \n@@ -160,15 +156,13 @@ public final class IndexMap implements Cloneable\n \n         Set<SchemaDescriptor> descriptors = extractIndexesByLabels( changedLabels );\n         descriptors.addAll( getDescriptorsByProperties( unchangedLabels, properties ) );\n-\n-        return descriptors;\n+return descriptors;\n     }\n \n     @Override\n     public IndexMap clone()\n     {\n-        return new IndexMap( clonePrimitiveMap( indexesById ), cloneMap( indexesByDescriptor ),\n-                cloneMap( indexIdsByDescriptor ) );\n+        return new IndexMap( clonePrimitiveMap( indexesById ), cloneMap( indexesByDescriptor ), cloneMap( indexIdsByDescriptor ) );\n     }\n \n     public Iterator<SchemaDescriptor> descriptors()\n@@ -188,9 +182,9 @@ public final class IndexMap implements Cloneable\n \n     // HELPERS\n \n-    private <K, V> Map<K, V> cloneMap( Map<K, V> map )\n+    private <K,V> Map<K,V> cloneMap( Map<K,V> map )\n     {\n-        Map<K, V> shallowCopy = new HashMap<>( map.size() );\n+        Map<K,V> shallowCopy = new HashMap<>( map.size() );\n         shallowCopy.putAll( map );\n         return shallowCopy;\n     }\n@@ -203,17 +197,14 @@ public final class IndexMap implements Cloneable\n     private void addDescriptorToLookups( SchemaDescriptor schema )\n     {\n         addToLookup( schema.keyId(), schema, descriptorsByLabel );\n-\n-        for ( int propertyId : schema.getPropertyIds() )\n+for ( int propertyId : schema.getPropertyIds() )\n         {\n             addToLookup( propertyId, schema, descriptorsByProperty );\n         }\n     }\n \n-    private void addToLookup(\n-            int key,\n-            SchemaDescriptor schema,\n-            PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup )\n+    private void addToLookup( int key,\n+            SchemaDescriptor schema, PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup )\n     {\n         Set<SchemaDescriptor> descriptors = lookup.get( key );\n         if ( descriptors == null )\n@@ -224,10 +215,8 @@ public final class IndexMap implements Cloneable\n         descriptors.add( schema );\n     }\n \n-    private void removeFromLookup(\n-            int key,\n-            SchemaDescriptor schema,\n-            PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup )\n+    private void removeFromLookup( int key,\n+            SchemaDescriptor schema, PrimitiveIntObjectMap<Set<SchemaDescriptor>> lookup )\n     {\n         Set<SchemaDescriptor> descriptors = lookup.get( key );\n         descriptors.remove( schema );\n@@ -237,19 +226,20 @@ public final class IndexMap implements Cloneable\n         }\n     }\n \n-    private static Map<SchemaDescriptor, IndexProxy> indexesByDescriptor( PrimitiveLongObjectMap<IndexProxy> indexesById )\n+    private static Map<SchemaDescriptor,IndexProxy> indexesByDescriptor( PrimitiveLongObjectMap<IndexProxy> indexesById )\n     {\n-        Map<SchemaDescriptor, IndexProxy> map = new HashMap<>();\n+        Map<SchemaDescriptor,IndexProxy> map = new HashMap<>();\n         for ( IndexProxy proxy : indexesById.values() )\n         {\n             map.put( proxy.schema(), proxy );\n         }\n-        return map;\n+\n+return map;\n     }\n \n-    private static Map<SchemaDescriptor, Long> indexIdsByDescriptor( PrimitiveLongObjectMap<IndexProxy> indexesById )\n+    private static Map<SchemaDescriptor,Long> indexIdsByDescriptor( PrimitiveLongObjectMap<IndexProxy> indexesById )\n     {\n-        Map<SchemaDescriptor, Long> map = new HashMap<>();\n+        Map<SchemaDescriptor,Long> map = new HashMap<>();\n         indexesById.visitEntries( ( key, indexProxy ) ->\n         {\n             map.put( indexProxy.schema(), key );\n@@ -267,18 +257,17 @@ public final class IndexMap implements Cloneable\n      * @param properties set of properties that have changed\n      * @return set of SchemaDescriptors describing the potentially affected indexes\n      */\n-    private Set<SchemaDescriptor> getDescriptorsByProperties(\n-            long[] unchangedLabels,\n+    private Set<SchemaDescriptor> getDescriptorsByProperties( long[] unchangedLabels,\n             PrimitiveIntSet properties )\n     {\n         int nIndexesForLabels = countIndexesByLabels( unchangedLabels );\n         int nIndexesForProperties = countIndexesByProperties( properties );\n-\n-        if ( nIndexesForLabels == 0 || nIndexesForProperties == 0 )\n+if ( nIndexesForLabels == 0 || nIndexesForProperties == 0 )\n         {\n             return Collections.emptySet();\n         }\n-        if ( nIndexesForLabels < nIndexesForProperties )\n+\n+if ( nIndexesForLabels < nIndexesForProperties )\n         {\n             return extractIndexesByLabels( unchangedLabels );\n         }\n@@ -293,7 +282,7 @@ public final class IndexMap implements Cloneable\n         Set<SchemaDescriptor> set = new HashSet<>();\n         for ( long label : labels )\n         {\n-            Set<SchemaDescriptor> forLabel = descriptorsByLabel.get( (int) label );\n+            Set<SchemaDescriptor> forLabel = descriptorsByLabel.get( ( int) label );\n             if ( forLabel != null )\n             {\n                 set.addAll( forLabel );\n@@ -307,7 +296,7 @@ public final class IndexMap implements Cloneable\n         int count = 0;\n         for ( long label : labels )\n         {\n-            Set<SchemaDescriptor> forLabel = descriptorsByLabel.get( (int) label );\n+            Set<SchemaDescriptor> forLabel = descriptorsByLabel.get( ( int) label );\n             if ( forLabel != null )\n             {\n                 count += forLabel.size();\n@@ -319,7 +308,8 @@ public final class IndexMap implements Cloneable\n     private Set<SchemaDescriptor> extractIndexesByProperties( PrimitiveIntSet properties )\n     {\n         Set<SchemaDescriptor> set = new HashSet<>();\n-        for ( PrimitiveIntIterator iterator = properties.iterator(); iterator.hasNext(); )\n+        for ( PrimitiveIntIterator iterator = properties.iterator();\n+iterator.hasNext(); )\n         {\n             Set<SchemaDescriptor> forProperty = descriptorsByProperty.get( iterator.next() );\n             if ( forProperty != null )\n@@ -333,7 +323,8 @@ public final class IndexMap implements Cloneable\n     private int countIndexesByProperties( PrimitiveIntSet properties )\n     {\n         int count = 0;\n-        for ( PrimitiveIntIterator iterator = properties.iterator(); iterator.hasNext(); )\n+        for ( PrimitiveIntIterator iterator = properties.iterator();\n+iterator.hasNext(); )\n         {\n             Set<SchemaDescriptor> forProperty = descriptorsByProperty.get( iterator.next() );\n             if ( forProperty != null )\n@@ -343,4 +334,4 @@ public final class IndexMap implements Cloneable\n         }\n         return count;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}