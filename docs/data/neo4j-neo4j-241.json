{
    "project_name": "neo4j-neo4j",
    "error_id": "241",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/241/Stopwatch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/241/Stopwatch.java\nindex b213e0fa599..7176a3a2916 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/241/Stopwatch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/241/Stopwatch.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.time;\n \n import java.time.Duration;\n@@ -39,10 +40,10 @@ public class Stopwatch\n      */\n     public static Stopwatch start()\n     {\n-        return new Stopwatch( System::nanoTime );\n+        return new Stopwatch(System::nanoTime);\n     }\n \n-    Stopwatch( Ticker ticker )\n+    Stopwatch(Ticker ticker)\n     {\n         this.ticker = ticker;\n         startTimeNano = ticker.get();\n@@ -50,21 +51,23 @@ public class Stopwatch\n \n     /**\n      * Returned the elapsed time from the moment the stopwatch was created.\n+     *\n      * @return the elapsed time since the stopwatch was started.\n      */\n     public Duration elapsed()\n     {\n-        return Duration.ofNanos( elapsed( NANOSECONDS ) );\n+        return Duration.ofNanos(elapsed(NANOSECONDS));\n     }\n \n     /**\n      * Returned the elapsed time from the moment the stopwatch was created.\n+     *\n      * @param unit the desired time unit.\n      * @return the elapsed time since the stopwatch was started, in the provided unit.\n      */\n-    public long elapsed( TimeUnit unit )\n+    public long elapsed(TimeUnit unit)\n     {\n-        return unit.convert( ticker.get() - startTimeNano, NANOSECONDS );\n+        return unit.convert(ticker.get() - startTimeNano, NANOSECONDS);\n     }\n \n     /**\n@@ -73,21 +76,21 @@ public class Stopwatch\n      * @param timeout the timeout duration.\n      * @return {@code true} if the timeout duration is greater or equals to the elapsed time.\n      */\n-    public boolean hasTimedOut( Duration timeout )\n+    public boolean hasTimedOut(Duration timeout)\n     {\n-        return elapsed( NANOSECONDS ) >= timeout.toNanos();\n+        return elapsed(NANOSECONDS) >= timeout.toNanos();\n     }\n \n     /**\n      * Test if a given duration have passed since the stopwatch started.\n      *\n      * @param duration the duration.\n-     * @param unit time unit the duration is specified in.\n+     * @param unit     time unit the duration is specified in.\n      * @return {@code true} if the timeout duration is greater or equals to the elapsed time.\n      */\n-    public boolean hasTimedOut( long duration, TimeUnit unit )\n+    public boolean hasTimedOut(long duration, TimeUnit unit)\n     {\n-        return elapsed( NANOSECONDS ) >= unit.toNanos( duration );\n+        return elapsed(NANOSECONDS) >= unit.toNanos(duration);\n     }\n \n     /**\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}