{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2395",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "6",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2395/ConsoleService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2395/ConsoleService.java\nindex d6a50fdca88..c217b595136 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2395/ConsoleService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2395/ConsoleService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.management.console;\n \n import java.util.ArrayList;\n@@ -49,104 +50,101 @@ import org.neo4j.server.rest.repr.ValueRepresentation;\n \n import static java.util.Arrays.asList;\n \n-@Path( ConsoleService.SERVICE_PATH )\n+@Path(ConsoleService.SERVICE_PATH)\n public class ConsoleService implements AdvertisableService\n {\n-    public static final String SERVICE_PATH = \"server/console\";\n-    private static final String SERVICE_NAME = \"console\";\n-\n-    private final ConsoleSessionFactory sessionFactory;\n-    private final Database database;\n-    private final LogProvider logProvider;\n-    private final OutputFormat output;\n-    private final Log log;\n-\n-    public ConsoleService( @Context Config config, @Context Database database, @Context LogProvider logProvider,\n-            @Context HttpServletRequest req, @Context OutputFormat output, @Context CypherExecutor cypherExecutor )\n+  public static final String SERVICE_PATH = \"server/console\";\n+  private static final String SERVICE_NAME = \"console\";\n+\n+  private final ConsoleSessionFactory sessionFactory;\n+  private final Database database;\n+  private final LogProvider logProvider;\n+  private final OutputFormat output;\n+  private final Log log;\n+\n+  public ConsoleService(@Context Config config, @Context Database database, @Context LogProvider logProvider,\n+                        @Context HttpServletRequest req, @Context OutputFormat output, @Context CypherExecutor cypherExecutor)\n+  {\n+    this(new SessionFactoryImpl(req, config.get(ServerSettings.console_module_engines),\n+        cypherExecutor), database, logProvider, output);\n+  }\n+\n+  public ConsoleService(ConsoleSessionFactory sessionFactory, Database database, LogProvider logProvider, OutputFormat output)\n+  {\n+    this.sessionFactory = sessionFactory;\n+    this.database = database;\n+    this.logProvider = logProvider;\n+    this.output = output;\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  @Override\n+  public String getName()\n+  {\n+    return SERVICE_NAME;\n+  }\n+\n+  @Override\n+  public String getServerPath()\n+  {\n+    return SERVICE_PATH;\n+  }\n+\n+  @GET\n+  public Response getServiceDefinition()\n+  {\n+    ConsoleServiceRepresentation result = new ConsoleServiceRepresentation(SERVICE_PATH, sessionFactory.supportedEngines());\n+\n+    return output.ok(result);\n+  }\n+\n+  @POST\n+  public Response exec(@Context InputFormat input, String data)\n+  {\n+    Map<String, Object> args;\n+    try\n     {\n-        this( new SessionFactoryImpl( req, config.get( ServerSettings.console_module_engines ),\n-                cypherExecutor ), database, logProvider, output );\n-    }\n-\n-    public ConsoleService( ConsoleSessionFactory sessionFactory, Database database, LogProvider logProvider, OutputFormat output )\n+      args = input.readMap(data);\n+    } catch (BadInputException e)\n     {\n-        this.sessionFactory = sessionFactory;\n-        this.database = database;\n-        this.logProvider = logProvider;\n-        this.output = output;\n-        this.log = logProvider.getLog( getClass() );\n+      return output.badRequest(e);\n     }\n \n-    @Override\n-    public String getName()\n+    if (!args.containsKey(\"command\"))\n     {\n-        return SERVICE_NAME;\n+      return Response.status(Status.BAD_REQUEST)\n+          .entity(\"Expected command argument not present.\")\n+          .build();\n     }\n \n-    @Override\n-    public String getServerPath()\n+    ScriptSession scriptSession;\n+    try\n     {\n-        return SERVICE_PATH;\n-    }\n-\n-    @GET\n-    public Response getServiceDefinition()\n+      scriptSession = getSession(args);\n+    } catch (IllegalArgumentException e)\n     {\n-        ConsoleServiceRepresentation result = new ConsoleServiceRepresentation( SERVICE_PATH, sessionFactory.supportedEngines() );\n-\n-        return output.ok( result );\n+      return output.badRequest(e);\n     }\n \n-    @POST\n-    public Response exec( @Context InputFormat input, String data )\n+    log.debug(scriptSession.toString());\n+    try\n     {\n-        Map<String, Object> args;\n-        try\n-        {\n-            args = input.readMap( data );\n-        }\n-        catch ( BadInputException e )\n-        {\n-            return output.badRequest( e );\n-        }\n-\n-        if ( !args.containsKey( \"command\" ) )\n-        {\n-            return Response.status( Status.BAD_REQUEST )\n-                    .entity( \"Expected command argument not present.\" )\n-                    .build();\n-        }\n-\n-        ScriptSession scriptSession;\n-        try\n-        {\n-            scriptSession = getSession( args );\n-        }\n-        catch ( IllegalArgumentException e )\n-        {\n-            return output.badRequest( e );\n-        }\n-\n-        log.debug( scriptSession.toString() );\n-        try\n-        {\n-            Pair<String, String> result = scriptSession.evaluate( (String) args.get( \"command\" ) );\n-            List<Representation> list = new ArrayList<>(\n-                    asList( ValueRepresentation.string( result.first() ), ValueRepresentation.string( result.other() ) ) );\n-\n-            return output.ok( new ListRepresentation( RepresentationType.STRING, list ) );\n-        }\n-        catch ( Exception e )\n-        {\n-            List<Representation> list = new ArrayList<>(\n-                    asList( ValueRepresentation.string( e.getClass() + \" : \" + e.getMessage() + \"\\n\" ),\n-                            ValueRepresentation.string( null ) ) );\n-            return output.ok( new ListRepresentation( RepresentationType.STRING, list ) );\n-        }\n-    }\n+      Pair<String, String> result = scriptSession.evaluate((String) args.get(\"command\"));\n+      List<Representation> list = new ArrayList<>(\n+          asList(ValueRepresentation.string(result.first()), ValueRepresentation.string(result.other())));\n \n-    private ScriptSession getSession( Map<String, Object> args )\n+      return output.ok(new ListRepresentation(RepresentationType.STRING, list));\n+    } catch (Exception e)\n     {\n-        return sessionFactory.createSession( (String) args.get( \"engine\" ), database, logProvider );\n+      List<Representation> list = new ArrayList<>(\n+          asList(ValueRepresentation.string(e.getClass() + \" : \" + e.getMessage() + \"\\n\"),\n+              ValueRepresentation.string(null)));\n+      return output.ok(new ListRepresentation(RepresentationType.STRING, list));\n     }\n+  }\n+\n+  private ScriptSession getSession(Map<String, Object> args)\n+  {\n+    return sessionFactory.createSession((String) args.get(\"engine\"), database, logProvider);\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2395/ConsoleService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2395/ConsoleService.java\nindex d6a50fdca88..d1cc8609200 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2395/ConsoleService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2395/ConsoleService.java\n@@ -54,8 +54,7 @@ public class ConsoleService implements AdvertisableService\n {\n     public static final String SERVICE_PATH = \"server/console\";\n     private static final String SERVICE_NAME = \"console\";\n-\n-    private final ConsoleSessionFactory sessionFactory;\n+private final ConsoleSessionFactory sessionFactory;\n     private final Database database;\n     private final LogProvider logProvider;\n     private final OutputFormat output;\n@@ -93,14 +92,13 @@ public class ConsoleService implements AdvertisableService\n     public Response getServiceDefinition()\n     {\n         ConsoleServiceRepresentation result = new ConsoleServiceRepresentation( SERVICE_PATH, sessionFactory.supportedEngines() );\n-\n-        return output.ok( result );\n+return output.ok( result );\n     }\n \n     @POST\n     public Response exec( @Context InputFormat input, String data )\n     {\n-        Map<String, Object> args;\n+        Map<String,Object> args;\n         try\n         {\n             args = input.readMap( data );\n@@ -112,9 +110,7 @@ public class ConsoleService implements AdvertisableService\n \n         if ( !args.containsKey( \"command\" ) )\n         {\n-            return Response.status( Status.BAD_REQUEST )\n-                    .entity( \"Expected command argument not present.\" )\n-                    .build();\n+            return Response.status( Status.BAD_REQUEST ).entity( \"Expected command argument not present.\" ).build();\n         }\n \n         ScriptSession scriptSession;\n@@ -130,23 +126,19 @@ public class ConsoleService implements AdvertisableService\n         log.debug( scriptSession.toString() );\n         try\n         {\n-            Pair<String, String> result = scriptSession.evaluate( (String) args.get( \"command\" ) );\n-            List<Representation> list = new ArrayList<>(\n-                    asList( ValueRepresentation.string( result.first() ), ValueRepresentation.string( result.other() ) ) );\n-\n-            return output.ok( new ListRepresentation( RepresentationType.STRING, list ) );\n+            Pair<String,String> result = scriptSession.evaluate( (String) args.get( \"command\" ) );\n+            List<Representation> list = new ArrayList<>( asList( ValueRepresentation.string( result.first() ), ValueRepresentation.string( result.other() ) ) );\n+return output.ok( new ListRepresentation( RepresentationType.STRING, list ) );\n         }\n         catch ( Exception e )\n         {\n-            List<Representation> list = new ArrayList<>(\n-                    asList( ValueRepresentation.string( e.getClass() + \" : \" + e.getMessage() + \"\\n\" ),\n-                            ValueRepresentation.string( null ) ) );\n-            return output.ok( new ListRepresentation( RepresentationType.STRING, list ) );\n+            List<Representation> list = new ArrayList<>( asList( ValueRepresentation.string( e.getClass() + \" : \" + e.getMessage() + \"\\n\" ), ValueRepresentation.string( null ) ) );\n+return output.ok( new ListRepresentation( RepresentationType.STRING, list ) );\n         }\n     }\n \n-    private ScriptSession getSession( Map<String, Object> args )\n+    private ScriptSession getSession( Map<String,Object> args )\n     {\n         return sessionFactory.createSession( (String) args.get( \"engine\" ), database, logProvider );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}