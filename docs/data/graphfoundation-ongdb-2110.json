{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2110",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2110/BatchInserter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2110/BatchInserter.java\nindex e53c1344d3e..b195c8ad5a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2110/BatchInserter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2110/BatchInserter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.batchinsert;\n \n import java.util.Map;\n@@ -42,266 +43,264 @@ import org.neo4j.graphdb.schema.IndexCreator;\n  */\n public interface BatchInserter\n {\n-    /**\n-     * Creates a node assigning next available id to id and also adds any\n-     * properties supplied.\n-     *\n-     * @param properties a map containing properties or <code>null</code> if no\n-     * properties should be added.\n-     * @param labels a list of labels to initially create the node with.\n-     *\n-     * @return The id of the created node.\n-     */\n-    long createNode( Map<String,Object> properties, Label... labels );\n+  /**\n+   * Creates a node assigning next available id to id and also adds any\n+   * properties supplied.\n+   *\n+   * @param properties a map containing properties or <code>null</code> if no\n+   *                   properties should be added.\n+   * @param labels     a list of labels to initially create the node with.\n+   * @return The id of the created node.\n+   */\n+  long createNode(Map<String, Object> properties, Label... labels);\n+\n+  /**\n+   * Creates a node with supplied id and properties. If a node with the given\n+   * id exist a runtime exception will be thrown.\n+   *\n+   * @param id         the id of the node to create.\n+   * @param properties map containing properties or <code>null</code> if no\n+   *                   properties should be added.\n+   * @param labels     a list of labels to initially create the node with.\n+   */\n+  void createNode(long id, Map<String, Object> properties, Label... labels);\n \n-    /**\n-     * Creates a node with supplied id and properties. If a node with the given\n-     * id exist a runtime exception will be thrown.\n-     *\n-     * @param id the id of the node to create.\n-     * @param properties map containing properties or <code>null</code> if no\n-     * properties should be added.\n-     * @param labels a list of labels to initially create the node with.\n-     */\n-    void createNode( long id, Map<String,Object> properties, Label... labels );\n+  /**\n+   * Checks if a node with the given id exists.\n+   *\n+   * @param nodeId the id of the node.\n+   * @return <code>true</code> if the node exists.\n+   */\n+  boolean nodeExists(long nodeId);\n \n-    /**\n-     * Checks if a node with the given id exists.\n-     *\n-     * @param nodeId the id of the node.\n-     * @return <code>true</code> if the node exists.\n-     */\n-    boolean nodeExists( long nodeId );\n+  /**\n+   * Sets the properties of a node. This method will remove any properties\n+   * already existing and replace it with properties in the supplied map.\n+   * <p>\n+   * For best performance try supply all the nodes properties upon creation\n+   * of the node. This method will delete any existing properties so using it\n+   * together with {@link #getNodeProperties(long)} will have bad performance.\n+   *\n+   * @param node       the id of the node.\n+   * @param properties map containing the properties or <code>null</code> to\n+   *                   clear all properties.\n+   */\n+  void setNodeProperties(long node, Map<String, Object> properties);\n \n-    /**\n-     * Sets the properties of a node. This method will remove any properties\n-     * already existing and replace it with properties in the supplied map.\n-     * <p>\n-     * For best performance try supply all the nodes properties upon creation\n-     * of the node. This method will delete any existing properties so using it\n-     * together with {@link #getNodeProperties(long)} will have bad performance.\n-     *\n-     * @param node the id of the node.\n-     * @param properties map containing the properties or <code>null</code> to\n-     * clear all properties.\n-     */\n-    void setNodeProperties( long node, Map<String,Object> properties );\n+  /**\n+   * Returns true iff the node with id {@code node} has a property with name\n+   * {@code propertyName}.\n+   *\n+   * @param node         The node id of the node to check.\n+   * @param propertyName The property name to check for\n+   * @return True if the node has the named property - false otherwise.\n+   */\n+  boolean nodeHasProperty(long node, String propertyName);\n \n-    /**\n-     * Returns true iff the node with id {@code node} has a property with name\n-     * {@code propertyName}.\n-     *\n-     * @param node The node id of the node to check.\n-     * @param propertyName The property name to check for\n-     * @return True if the node has the named property - false otherwise.\n-     */\n-    boolean nodeHasProperty( long node, String propertyName );\n+  /**\n+   * Replaces any existing labels for the given node with the supplied list of labels.\n+   *\n+   * @param node   the node to set labels for.\n+   * @param labels the labels to set for the node.\n+   */\n+  void setNodeLabels(long node, Label... labels);\n \n-    /**\n-     * Replaces any existing labels for the given node with the supplied list of labels.\n-     *\n-     * @param node the node to set labels for.\n-     * @param labels the labels to set for the node.\n-     */\n-    void setNodeLabels( long node, Label... labels );\n+  /**\n+   * @param node the node to get labels for.\n+   * @return all labels for the given node.\n+   */\n+  Iterable<Label> getNodeLabels(long node);\n \n-    /**\n-     * @param node the node to get labels for.\n-     * @return all labels for the given node.\n-     */\n-    Iterable<Label> getNodeLabels( long node );\n+  /**\n+   * @param node  the node to check.\n+   * @param label the label to check.\n+   * @return {@code true} if a node has a given label, otherwise {@code false}.\n+   */\n+  boolean nodeHasLabel(long node, Label label);\n \n-    /**\n-     * @param node the node to check.\n-     * @param label the label to check.\n-     * @return {@code true} if a node has a given label, otherwise {@code false}.\n-     */\n-    boolean nodeHasLabel( long node, Label label );\n+  /**\n+   * Returns true iff the relationship with id {@code relationship} has a\n+   * property with name {@code propertyName}.\n+   *\n+   * @param relationship The relationship id of the relationship to check.\n+   * @param propertyName The property name to check for\n+   * @return True if the relationship has the named property - false\n+   * otherwise.\n+   */\n+  boolean relationshipHasProperty(long relationship,\n+                                  String propertyName);\n \n-    /**\n-     * Returns true iff the relationship with id {@code relationship} has a\n-     * property with name {@code propertyName}.\n-     *\n-     * @param relationship The relationship id of the relationship to check.\n-     * @param propertyName The property name to check for\n-     * @return True if the relationship has the named property - false\n-     *         otherwise.\n-     */\n-    boolean relationshipHasProperty( long relationship,\n-            String propertyName );\n+  /**\n+   * Sets the property with name {@code propertyName} of node with id\n+   * {@code node} to the value {@code propertyValue}. If the property exists\n+   * it is updated, otherwise created.\n+   *\n+   * @param node          The node id of the node whose property is to be set\n+   * @param propertyName  The name of the property to set\n+   * @param propertyValue The value of the property to set\n+   */\n+  void setNodeProperty(long node, String propertyName,\n+                       Object propertyValue);\n \n-    /**\n-     * Sets the property with name {@code propertyName} of node with id\n-     * {@code node} to the value {@code propertyValue}. If the property exists\n-     * it is updated, otherwise created.\n-     *\n-     * @param node The node id of the node whose property is to be set\n-     * @param propertyName The name of the property to set\n-     * @param propertyValue The value of the property to set\n-     */\n-    void setNodeProperty( long node, String propertyName,\n-            Object propertyValue );\n+  /**\n+   * Sets the property with name {@code propertyName} of relationship with id\n+   * {@code relationship} to the value {@code propertyValue}. If the property\n+   * exists it is updated, otherwise created.\n+   *\n+   * @param relationship  The node id of the relationship whose property is to\n+   *                      be set\n+   * @param propertyName  The name of the property to set\n+   * @param propertyValue The value of the property to set\n+   */\n+  void setRelationshipProperty(long relationship,\n+                               String propertyName, Object propertyValue);\n \n-    /**\n-     * Sets the property with name {@code propertyName} of relationship with id\n-     * {@code relationship} to the value {@code propertyValue}. If the property\n-     * exists it is updated, otherwise created.\n-     *\n-     * @param relationship The node id of the relationship whose property is to\n-     *            be set\n-     * @param propertyName The name of the property to set\n-     * @param propertyValue The value of the property to set\n-     */\n-    void setRelationshipProperty( long relationship,\n-            String propertyName, Object propertyValue );\n-    /**\n-     * Returns a map containing all the properties of this node.\n-     *\n-     * @param nodeId the id of the node.\n-     *\n-     * @return map containing this node's properties.\n-     */\n-    Map<String,Object> getNodeProperties( long nodeId );\n+  /**\n+   * Returns a map containing all the properties of this node.\n+   *\n+   * @param nodeId the id of the node.\n+   * @return map containing this node's properties.\n+   */\n+  Map<String, Object> getNodeProperties(long nodeId);\n \n-    /**\n-     * Returns an iterable over all the relationship ids connected to node with\n-     * supplied id.\n-     *\n-     * @param nodeId the id of the node.\n-     * @return iterable over the relationship ids connected to the node.\n-     */\n-    Iterable<Long> getRelationshipIds( long nodeId );\n+  /**\n+   * Returns an iterable over all the relationship ids connected to node with\n+   * supplied id.\n+   *\n+   * @param nodeId the id of the node.\n+   * @return iterable over the relationship ids connected to the node.\n+   */\n+  Iterable<Long> getRelationshipIds(long nodeId);\n \n-    /**\n-     * Returns an iterable of {@link BatchRelationship relationships} connected\n-     * to the node with supplied id.\n-     *\n-     * @param nodeId the id of the node.\n-     * @return iterable over the relationships connected to the node.\n-     */\n-    Iterable<BatchRelationship> getRelationships( long nodeId );\n+  /**\n+   * Returns an iterable of {@link BatchRelationship relationships} connected\n+   * to the node with supplied id.\n+   *\n+   * @param nodeId the id of the node.\n+   * @return iterable over the relationships connected to the node.\n+   */\n+  Iterable<BatchRelationship> getRelationships(long nodeId);\n \n-    /**\n-     * Creates a relationship between two nodes of a specific type.\n-     *\n-     * @param node1 the start node.\n-     * @param node2 the end node.\n-     * @param type relationship type.\n-     * @param properties map containing properties or <code>null</code> if no\n-     * properties should be added.\n-     * @return the id of the created relationship.\n-     */\n-    long createRelationship( long node1, long node2, RelationshipType\n-        type, Map<String,Object> properties );\n+  /**\n+   * Creates a relationship between two nodes of a specific type.\n+   *\n+   * @param node1      the start node.\n+   * @param node2      the end node.\n+   * @param type       relationship type.\n+   * @param properties map containing properties or <code>null</code> if no\n+   *                   properties should be added.\n+   * @return the id of the created relationship.\n+   */\n+  long createRelationship(long node1, long node2, RelationshipType\n+      type, Map<String, Object> properties);\n \n-    /**\n-     * Gets a relationship by id.\n-     *\n-     * @param relId the relationship id.\n-     * @return a simple relationship wrapper for the relationship.\n-     */\n-    BatchRelationship getRelationshipById( long relId );\n+  /**\n+   * Gets a relationship by id.\n+   *\n+   * @param relId the relationship id.\n+   * @return a simple relationship wrapper for the relationship.\n+   */\n+  BatchRelationship getRelationshipById(long relId);\n \n-    /**\n-     * Sets the properties of a relationship. This method will remove any\n-     * properties already existing and replace it with properties in the\n-     * supplied map.\n-     * <p>\n-     * For best performance try supply all the relationship properties upon\n-     * creation of the relationship. This method will delete any existing\n-     * properties so using it together with\n-     * {@link #getRelationshipProperties(long)} will have bad performance.\n-     *\n-     * @param rel the id of the relationship.\n-     * @param properties map containing the properties or <code>null</code> to\n-     * clear all properties.\n-     */\n-    void setRelationshipProperties( long rel,\n-        Map<String,Object> properties );\n+  /**\n+   * Sets the properties of a relationship. This method will remove any\n+   * properties already existing and replace it with properties in the\n+   * supplied map.\n+   * <p>\n+   * For best performance try supply all the relationship properties upon\n+   * creation of the relationship. This method will delete any existing\n+   * properties so using it together with\n+   * {@link #getRelationshipProperties(long)} will have bad performance.\n+   *\n+   * @param rel        the id of the relationship.\n+   * @param properties map containing the properties or <code>null</code> to\n+   *                   clear all properties.\n+   */\n+  void setRelationshipProperties(long rel,\n+                                 Map<String, Object> properties);\n \n-    /**\n-     * Returns a map containing all the properties of the relationships.\n-     *\n-     * @param relId the id of the relationship.\n-     * @return map containing the relationship's properties.\n-     */\n-    Map<String,Object> getRelationshipProperties( long relId );\n+  /**\n+   * Returns a map containing all the properties of the relationships.\n+   *\n+   * @param relId the id of the relationship.\n+   * @return map containing the relationship's properties.\n+   */\n+  Map<String, Object> getRelationshipProperties(long relId);\n \n-    /**\n-     * Removes the property named {@code property} from the node with id\n-     * {@code id}, if present.\n-     *\n-     * @param node The id of the node from which to remove the property\n-     * @param property The name of the property\n-     */\n-    void removeNodeProperty( long node, String property );\n+  /**\n+   * Removes the property named {@code property} from the node with id\n+   * {@code id}, if present.\n+   *\n+   * @param node     The id of the node from which to remove the property\n+   * @param property The name of the property\n+   */\n+  void removeNodeProperty(long node, String property);\n \n-    /**\n-     * Removes the property named {@code property} from the relationship with id\n-     * {@code id}, if present.\n-     *\n-     * @param relationship The id of the relationship from which to remove the\n-     *            property\n-     * @param property The name of the property\n-     */\n-    void removeRelationshipProperty( long relationship, String property );\n+  /**\n+   * Removes the property named {@code property} from the relationship with id\n+   * {@code id}, if present.\n+   *\n+   * @param relationship The id of the relationship from which to remove the\n+   *                     property\n+   * @param property     The name of the property\n+   */\n+  void removeRelationshipProperty(long relationship, String property);\n \n-    /**\n-     * Returns an {@link IndexCreator} where details about the index to create can be\n-     * specified. When all details have been entered {@link IndexCreator#create() create}\n-     * must be called for it to actually be created.\n-     *\n-     * Creating an index enables indexing for nodes with the specified label. The index will\n-     * have the details supplied to the {@link IndexCreator returned index creator}.\n-     *\n-     * Indexes created with the method are deferred until the batch inserter is shut down, at\n-     * which point a background job will populate all indexes, i.e. the index\n-     * is not available during the batch insertion itself. It is therefore advisable to\n-     * create deferred indexes just before shutting down the batch inserter.\n-     *\n-     * @param label {@link Label label} on nodes to be indexed\n-     *\n-     * @return an {@link IndexCreator} capable of providing details for, as well as creating\n-     * an index for the given {@link Label label}.\n-     */\n-    IndexCreator createDeferredSchemaIndex( Label label );\n+  /**\n+   * Returns an {@link IndexCreator} where details about the index to create can be\n+   * specified. When all details have been entered {@link IndexCreator#create() create}\n+   * must be called for it to actually be created.\n+   * <p>\n+   * Creating an index enables indexing for nodes with the specified label. The index will\n+   * have the details supplied to the {@link IndexCreator returned index creator}.\n+   * <p>\n+   * Indexes created with the method are deferred until the batch inserter is shut down, at\n+   * which point a background job will populate all indexes, i.e. the index\n+   * is not available during the batch insertion itself. It is therefore advisable to\n+   * create deferred indexes just before shutting down the batch inserter.\n+   *\n+   * @param label {@link Label label} on nodes to be indexed\n+   * @return an {@link IndexCreator} capable of providing details for, as well as creating\n+   * an index for the given {@link Label label}.\n+   */\n+  IndexCreator createDeferredSchemaIndex(Label label);\n \n-    /**\n-     * Returns a {@link ConstraintCreator} where details about the constraint can be\n-     * specified. When all details have been entered {@link ConstraintCreator#create()}\n-     * must be called for it to actually be created.\n-     *\n-     * Note that the batch inserter is not enforcing any constraint on the inserted data\n-     * (also the one created with the batch inserter itself).  Although the batch inserter\n-     * will verify all constraints on {@link #shutdown()} and fail in case of any constraint\n-     * violation.\n-     *\n-     * @param label the label this constraint is for.\n-     * @return a {@link ConstraintCreator} capable of providing details for, as well as creating\n-     * a constraint for the given {@linkplain Label label}.\n-     */\n-    ConstraintCreator createDeferredConstraint( Label label );\n+  /**\n+   * Returns a {@link ConstraintCreator} where details about the constraint can be\n+   * specified. When all details have been entered {@link ConstraintCreator#create()}\n+   * must be called for it to actually be created.\n+   * <p>\n+   * Note that the batch inserter is not enforcing any constraint on the inserted data\n+   * (also the one created with the batch inserter itself).  Although the batch inserter\n+   * will verify all constraints on {@link #shutdown()} and fail in case of any constraint\n+   * violation.\n+   *\n+   * @param label the label this constraint is for.\n+   * @return a {@link ConstraintCreator} capable of providing details for, as well as creating\n+   * a constraint for the given {@linkplain Label label}.\n+   */\n+  ConstraintCreator createDeferredConstraint(Label label);\n \n-    /**\n-     * Shuts down this batch inserter syncing all changes that are still only\n-     * in memory to disk. Failing to invoke this method may leave the Neo4j\n-     * store in a inconsistent state.\n-     *\n-     * Note that this method will trigger population of all indexes, both\n-     * those created in the batch insertion session, as well as those that existed\n-     * previously. This may take a long time, depending on data size.\n-     *\n-     * <p>\n-     * After this method has been invoked any other method call to this batch\n-     * inserter is illegal.\n-     */\n-    void shutdown();\n+  /**\n+   * Shuts down this batch inserter syncing all changes that are still only\n+   * in memory to disk. Failing to invoke this method may leave the Neo4j\n+   * store in a inconsistent state.\n+   * <p>\n+   * Note that this method will trigger population of all indexes, both\n+   * those created in the batch insertion session, as well as those that existed\n+   * previously. This may take a long time, depending on data size.\n+   *\n+   * <p>\n+   * After this method has been invoked any other method call to this batch\n+   * inserter is illegal.\n+   */\n+  void shutdown();\n \n-    /**\n-     * Returns the path to this Neo4j store.\n-     *\n-     * @return the path to this Neo4j store.\n-     */\n-    String getStoreDir();\n+  /**\n+   * Returns the path to this Neo4j store.\n+   *\n+   * @return the path to this Neo4j store.\n+   */\n+  String getStoreDir();\n \n }\n",
            "diff_size": 263
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2110/BatchInserter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2110/BatchInserter.java\nindex e53c1344d3e..6af1649cc10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2110/BatchInserter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2110/BatchInserter.java\n@@ -130,7 +130,7 @@ public interface BatchInserter\n     boolean relationshipHasProperty( long relationship,\n             String propertyName );\n \n-    /**\n+/**\n      * Sets the property with name {@code propertyName} of node with id\n      * {@code node} to the value {@code propertyValue}. If the property exists\n      * it is updated, otherwise created.\n@@ -142,7 +142,7 @@ public interface BatchInserter\n     void setNodeProperty( long node, String propertyName,\n             Object propertyValue );\n \n-    /**\n+/**\n      * Sets the property with name {@code propertyName} of relationship with id\n      * {@code relationship} to the value {@code propertyValue}. If the property\n      * exists it is updated, otherwise created.\n@@ -154,7 +154,8 @@ public interface BatchInserter\n      */\n     void setRelationshipProperty( long relationship,\n             String propertyName, Object propertyValue );\n-    /**\n+\n+/**\n      * Returns a map containing all the properties of this node.\n      *\n      * @param nodeId the id of the node.\n@@ -191,10 +192,9 @@ public interface BatchInserter\n      * properties should be added.\n      * @return the id of the created relationship.\n      */\n-    long createRelationship( long node1, long node2, RelationshipType\n-        type, Map<String,Object> properties );\n+    long createRelationship( long node1, long node2, RelationshipType type, Map<String,Object> properties );\n \n-    /**\n+/**\n      * Gets a relationship by id.\n      *\n      * @param relId the relationship id.\n@@ -216,10 +216,9 @@ public interface BatchInserter\n      * @param properties map containing the properties or <code>null</code> to\n      * clear all properties.\n      */\n-    void setRelationshipProperties( long rel,\n-        Map<String,Object> properties );\n+    void setRelationshipProperties( long rel, Map<String,Object> properties );\n \n-    /**\n+/**\n      * Returns a map containing all the properties of the relationships.\n      *\n      * @param relId the id of the relationship.\n@@ -303,5 +302,4 @@ public interface BatchInserter\n      * @return the path to this Neo4j store.\n      */\n     String getStoreDir();\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}