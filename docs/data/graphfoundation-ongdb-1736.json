{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1736",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1736/DijkstraBidirectional.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1736/DijkstraBidirectional.java\nindex 392272c1988..ddc82ec75cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1736/DijkstraBidirectional.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1736/DijkstraBidirectional.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import org.apache.commons.lang3.mutable.MutableDouble;\n@@ -54,7 +55,7 @@ import static org.neo4j.helpers.collection.Iterators.firstOrNull;\n  * Find (one or all) simple shortest path(s) between two nodes.\n  * Shortest referring to least cost evaluated by provided {@link CostEvaluator}.\n  * It starts a traversal from both ends and terminates when path(s) has been found.\n- *\n+ * <p>\n  * Relationships are traversed in the specified directions from the start node,\n  * but in the reverse direction ( {@link org.neo4j.graphdb.Direction#reverse()} ) from the\n  * end node. This doesn't affect {@link org.neo4j.graphdb.Direction#BOTH}.\n@@ -63,148 +64,149 @@ import static org.neo4j.helpers.collection.Iterators.firstOrNull;\n  */\n public class DijkstraBidirectional implements PathFinder<WeightedPath>\n {\n-    private final PathExpander expander;\n-    private final InitialBranchState stateFactory;\n-    private final CostEvaluator<Double> costEvaluator;\n+  private final PathExpander expander;\n+  private final InitialBranchState stateFactory;\n+  private final CostEvaluator<Double> costEvaluator;\n+  private final double epsilon;\n+  private Traverser lastTraverser;\n+\n+  /**\n+   * See {@link #DijkstraBidirectional(PathExpander, CostEvaluator, double)}\n+   * Using {@link NoneStrictMath#EPSILON} as tolerance.\n+   */\n+  public DijkstraBidirectional(PathExpander expander, CostEvaluator<Double> costEvaluator)\n+  {\n+    this(expander, costEvaluator, NoneStrictMath.EPSILON);\n+  }\n+\n+  /**\n+   * Construct a new bidirectional dijkstra algorithm.\n+   *\n+   * @param expander      The {@link PathExpander} to be used to decide which relationships\n+   *                      to expand for each node\n+   * @param costEvaluator The {@link CostEvaluator} to be used for calculating cost of a\n+   *                      relationship\n+   * @param epsilon       The tolerance level to be used when comparing floating point numbers.\n+   */\n+  public DijkstraBidirectional(PathExpander expander, CostEvaluator<Double> costEvaluator, double epsilon)\n+  {\n+    this.expander = expander;\n+    this.costEvaluator = costEvaluator;\n+    this.epsilon = epsilon;\n+    this.stateFactory = InitialBranchState.DOUBLE_ZERO;\n+  }\n+\n+  @Override\n+  public Iterable<WeightedPath> findAllPaths(Node start, final Node end)\n+  {\n+    final Traverser traverser = traverser(start, end, PathInterestFactory.allShortest(epsilon));\n+    return () -> new TopFetchingWeightedPathIterator(traverser.iterator(), costEvaluator);\n+  }\n+\n+  private Traverser traverser(Node start, final Node end, PathInterest interest)\n+  {\n+    final MutableDouble shortestSoFar = new MutableDouble(Double.MAX_VALUE);\n+    final MutableDouble startSideShortest = new MutableDouble(0);\n+    final MutableDouble endSideShortest = new MutableDouble(0);\n+    PathExpander dijkstraExpander = new DijkstraBidirectionalPathExpander(expander, shortestSoFar, true,\n+        startSideShortest, endSideShortest, epsilon);\n+\n+    GraphDatabaseService db = start.getGraphDatabase();\n+\n+    TraversalDescription side = db.traversalDescription().expand(dijkstraExpander, stateFactory)\n+        .order(new DijkstraSelectorFactory(interest, costEvaluator))\n+        .evaluator(new DijkstraBidirectionalEvaluator(costEvaluator))\n+        .uniqueness(Uniqueness.NODE_PATH);\n+\n+    TraversalDescription startSide = side;\n+    TraversalDescription endSide = side.reverse();\n+\n+    BidirectionalTraversalDescription traversal = db.bidirectionalTraversalDescription()\n+        .startSide(startSide)\n+        .endSide(endSide)\n+        .collisionEvaluator(Evaluators.all())\n+        .collisionPolicy((evaluator, pathPredicate) ->\n+            new DijkstraBranchCollisionDetector(evaluator, costEvaluator, shortestSoFar, epsilon,\n+                pathPredicate));\n+\n+    lastTraverser = traversal.traverse(start, end);\n+    return lastTraverser;\n+  }\n+\n+  @Override\n+  public WeightedPath findSinglePath(Node start, Node end)\n+  {\n+    return firstOrNull(new TopFetchingWeightedPathIterator(\n+        traverser(start, end, PathInterestFactory.single(epsilon)).iterator(), costEvaluator));\n+  }\n+\n+  @Override\n+  public TraversalMetadata metadata()\n+  {\n+    return lastTraverser.metadata();\n+  }\n+\n+  private static class DijkstraBidirectionalPathExpander implements PathExpander<Double>\n+  {\n+    private final PathExpander source;\n+    private final MutableDouble shortestSoFar;\n+    private final MutableDouble otherSideShortest;\n     private final double epsilon;\n-    private Traverser lastTraverser;\n+    private final MutableDouble thisSideShortest;\n+    private final boolean stopAfterLowestCost;\n \n-    /**\n-     * See {@link #DijkstraBidirectional(PathExpander, CostEvaluator, double)}\n-     * Using {@link NoneStrictMath#EPSILON} as tolerance.\n-     */\n-    public DijkstraBidirectional( PathExpander expander, CostEvaluator<Double> costEvaluator )\n+    DijkstraBidirectionalPathExpander(PathExpander source, MutableDouble shortestSoFar,\n+                                      boolean stopAfterLowestCost, MutableDouble thisSideShortest, MutableDouble otherSideShortest,\n+                                      double epsilon)\n     {\n-        this( expander, costEvaluator, NoneStrictMath.EPSILON );\n-    }\n-\n-    /**\n-     * Construct a new bidirectional dijkstra algorithm.\n-     * @param expander          The {@link PathExpander} to be used to decide which relationships\n-     *                          to expand for each node\n-     * @param costEvaluator     The {@link CostEvaluator} to be used for calculating cost of a\n-     *                          relationship\n-     * @param epsilon           The tolerance level to be used when comparing floating point numbers.\n-     */\n-    public DijkstraBidirectional( PathExpander expander, CostEvaluator<Double> costEvaluator, double epsilon )\n-    {\n-        this.expander = expander;\n-        this.costEvaluator = costEvaluator;\n-        this.epsilon = epsilon;\n-        this.stateFactory = InitialBranchState.DOUBLE_ZERO;\n+      this.source = source;\n+      this.shortestSoFar = shortestSoFar;\n+      this.stopAfterLowestCost = stopAfterLowestCost;\n+      this.thisSideShortest = thisSideShortest;\n+      this.otherSideShortest = otherSideShortest;\n+      this.epsilon = epsilon;\n     }\n \n     @Override\n-    public Iterable<WeightedPath> findAllPaths( Node start, final Node end )\n-    {\n-        final Traverser traverser = traverser( start, end, PathInterestFactory.allShortest( epsilon ) );\n-        return () -> new TopFetchingWeightedPathIterator( traverser.iterator(), costEvaluator );\n-    }\n-\n-    private Traverser traverser( Node start, final Node end, PathInterest interest )\n+    public Iterable<Relationship> expand(Path path, BranchState<Double> state)\n     {\n-        final MutableDouble shortestSoFar = new MutableDouble( Double.MAX_VALUE );\n-        final MutableDouble startSideShortest = new MutableDouble( 0 );\n-        final MutableDouble endSideShortest = new MutableDouble( 0 );\n-        PathExpander dijkstraExpander = new DijkstraBidirectionalPathExpander( expander, shortestSoFar, true,\n-                startSideShortest, endSideShortest, epsilon );\n-\n-        GraphDatabaseService db = start.getGraphDatabase();\n-\n-        TraversalDescription side = db.traversalDescription().expand( dijkstraExpander, stateFactory )\n-                .order( new DijkstraSelectorFactory( interest, costEvaluator ) )\n-                .evaluator( new DijkstraBidirectionalEvaluator( costEvaluator ) )\n-                .uniqueness( Uniqueness.NODE_PATH );\n-\n-        TraversalDescription startSide = side;\n-        TraversalDescription endSide = side.reverse();\n-\n-        BidirectionalTraversalDescription traversal = db.bidirectionalTraversalDescription()\n-                .startSide( startSide )\n-                .endSide( endSide )\n-                .collisionEvaluator( Evaluators.all() )\n-                .collisionPolicy( ( evaluator, pathPredicate ) ->\n-                        new DijkstraBranchCollisionDetector( evaluator, costEvaluator, shortestSoFar, epsilon,\n-                                pathPredicate ) );\n-\n-        lastTraverser = traversal.traverse( start, end );\n-        return lastTraverser;\n+      double thisState = state.getState();\n+      thisSideShortest.setValue(thisState);\n+      if (NoneStrictMath.compare(thisState + otherSideShortest.doubleValue(), shortestSoFar.doubleValue(), epsilon) > 0 &&\n+          stopAfterLowestCost)\n+      {\n+        return Iterables.emptyResourceIterable();\n+      }\n+      return source.expand(path, state);\n     }\n \n     @Override\n-    public WeightedPath findSinglePath( Node start, Node end )\n+    public PathExpander<Double> reverse()\n     {\n-        return firstOrNull( new TopFetchingWeightedPathIterator(\n-                traverser( start, end, PathInterestFactory.single( epsilon ) ).iterator(), costEvaluator ) );\n+      return new DijkstraBidirectionalPathExpander(source.reverse(), shortestSoFar, stopAfterLowestCost,\n+          otherSideShortest, thisSideShortest, epsilon);\n     }\n+  }\n \n-    @Override\n-    public TraversalMetadata metadata()\n-    {\n-        return lastTraverser.metadata();\n-    }\n+  private static class DijkstraBidirectionalEvaluator extends PathEvaluator.Adapter<Double>\n+  {\n+    private final CostEvaluator<Double> costEvaluator;\n \n-    private static class DijkstraBidirectionalPathExpander implements PathExpander<Double>\n+    DijkstraBidirectionalEvaluator(CostEvaluator<Double> costEvaluator)\n     {\n-        private final PathExpander source;\n-        private final MutableDouble shortestSoFar;\n-        private final MutableDouble otherSideShortest;\n-        private final double epsilon;\n-        private final MutableDouble thisSideShortest;\n-        private final boolean stopAfterLowestCost;\n-\n-        DijkstraBidirectionalPathExpander( PathExpander source, MutableDouble shortestSoFar,\n-                boolean stopAfterLowestCost, MutableDouble thisSideShortest, MutableDouble otherSideShortest,\n-                double epsilon )\n-        {\n-            this.source = source;\n-            this.shortestSoFar = shortestSoFar;\n-            this.stopAfterLowestCost = stopAfterLowestCost;\n-            this.thisSideShortest = thisSideShortest;\n-            this.otherSideShortest = otherSideShortest;\n-            this.epsilon = epsilon;\n-        }\n-\n-        @Override\n-        public Iterable<Relationship> expand( Path path, BranchState<Double> state )\n-        {\n-            double thisState = state.getState();\n-            thisSideShortest.setValue( thisState );\n-            if ( NoneStrictMath.compare( thisState + otherSideShortest.doubleValue(), shortestSoFar.doubleValue(), epsilon ) > 0 &&\n-                 stopAfterLowestCost )\n-            {\n-                return Iterables.emptyResourceIterable();\n-            }\n-            return source.expand( path, state );\n-        }\n-\n-        @Override\n-        public PathExpander<Double> reverse()\n-        {\n-            return new DijkstraBidirectionalPathExpander( source.reverse(), shortestSoFar, stopAfterLowestCost,\n-                    otherSideShortest, thisSideShortest, epsilon );\n-        }\n+      this.costEvaluator = costEvaluator;\n     }\n \n-    private static class DijkstraBidirectionalEvaluator extends PathEvaluator.Adapter<Double>\n+    @Override\n+    public Evaluation evaluate(Path path, BranchState<Double> state)\n     {\n-        private final CostEvaluator<Double> costEvaluator;\n-\n-        DijkstraBidirectionalEvaluator( CostEvaluator<Double> costEvaluator )\n-        {\n-            this.costEvaluator = costEvaluator;\n-        }\n-\n-        @Override\n-        public Evaluation evaluate( Path path, BranchState<Double> state )\n-        {\n-            double nextState = state.getState();\n-            if ( path.length() > 0 )\n-            {\n-                nextState += costEvaluator.getCost( path.lastRelationship(), OUTGOING );\n-                state.setState( nextState );\n-            }\n-            return Evaluation.EXCLUDE_AND_CONTINUE;\n-        }\n+      double nextState = state.getState();\n+      if (path.length() > 0)\n+      {\n+        nextState += costEvaluator.getCost(path.lastRelationship(), OUTGOING);\n+        state.setState(nextState);\n+      }\n+      return Evaluation.EXCLUDE_AND_CONTINUE;\n     }\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 259).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1736/DijkstraBidirectional.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1736/DijkstraBidirectional.java\nindex 392272c1988..8b37b1e5b80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1736/DijkstraBidirectional.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1736/DijkstraBidirectional.java\n@@ -108,34 +108,22 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n         final MutableDouble endSideShortest = new MutableDouble( 0 );\n         PathExpander dijkstraExpander = new DijkstraBidirectionalPathExpander( expander, shortestSoFar, true,\n                 startSideShortest, endSideShortest, epsilon );\n-\n-        GraphDatabaseService db = start.getGraphDatabase();\n-\n-        TraversalDescription side = db.traversalDescription().expand( dijkstraExpander, stateFactory )\n-                .order( new DijkstraSelectorFactory( interest, costEvaluator ) )\n-                .evaluator( new DijkstraBidirectionalEvaluator( costEvaluator ) )\n-                .uniqueness( Uniqueness.NODE_PATH );\n-\n-        TraversalDescription startSide = side;\n+GraphDatabaseService db = start.getGraphDatabase();\n+TraversalDescription side = db.traversalDescription().expand( dijkstraExpander, stateFactory ).order( new DijkstraSelectorFactory( interest, costEvaluator ) ).evaluator( new DijkstraBidirectionalEvaluator( costEvaluator ) ).uniqueness( Uniqueness.NODE_PATH );\n+TraversalDescription startSide = side;\n         TraversalDescription endSide = side.reverse();\n-\n-        BidirectionalTraversalDescription traversal = db.bidirectionalTraversalDescription()\n-                .startSide( startSide )\n+BidirectionalTraversalDescription traversal = db.bidirectionalTraversalDescription().startSide( startSide )\n                 .endSide( endSide )\n-                .collisionEvaluator( Evaluators.all() )\n-                .collisionPolicy( ( evaluator, pathPredicate ) ->\n-                        new DijkstraBranchCollisionDetector( evaluator, costEvaluator, shortestSoFar, epsilon,\n+                .collisionEvaluator( Evaluators.all() ).collisionPolicy( ( evaluator, pathPredicate ) -> new DijkstraBranchCollisionDetector( evaluator, costEvaluator, shortestSoFar, epsilon,\n                                 pathPredicate ) );\n-\n-        lastTraverser = traversal.traverse( start, end );\n+lastTraverser = traversal.traverse( start, end );\n         return lastTraverser;\n     }\n \n     @Override\n     public WeightedPath findSinglePath( Node start, Node end )\n     {\n-        return firstOrNull( new TopFetchingWeightedPathIterator(\n-                traverser( start, end, PathInterestFactory.single( epsilon ) ).iterator(), costEvaluator ) );\n+        return firstOrNull( new TopFetchingWeightedPathIterator( traverser( start, end, PathInterestFactory.single( epsilon ) ).iterator(), costEvaluator ) );\n     }\n \n     @Override\n@@ -170,12 +158,12 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n         {\n             double thisState = state.getState();\n             thisSideShortest.setValue( thisState );\n-            if ( NoneStrictMath.compare( thisState + otherSideShortest.doubleValue(), shortestSoFar.doubleValue(), epsilon ) > 0 &&\n-                 stopAfterLowestCost )\n-            {\n+            if ( NoneStrictMath.compare( thisState + otherSideShortest.doubleValue(), shortestSoFar.doubleValue(), epsilon ) > 0 && stopAfterLowestCost )\n+{\n                 return Iterables.emptyResourceIterable();\n             }\n-            return source.expand( path, state );\n+\n+return source.expand( path, state );\n         }\n \n         @Override\n@@ -183,7 +171,7 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n         {\n             return new DijkstraBidirectionalPathExpander( source.reverse(), shortestSoFar, stopAfterLowestCost,\n                     otherSideShortest, thisSideShortest, epsilon );\n-        }\n+    }\n     }\n \n     private static class DijkstraBidirectionalEvaluator extends PathEvaluator.Adapter<Double>\n@@ -204,7 +192,8 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n                 nextState += costEvaluator.getCost( path.lastRelationship(), OUTGOING );\n                 state.setState( nextState );\n             }\n-            return Evaluation.EXCLUDE_AND_CONTINUE;\n+\n+return Evaluation.EXCLUDE_AND_CONTINUE;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}