{
    "project_name": "kitodo-kitodo-production",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "350",
                "column": "13",
                "severity": "warning",
                "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        try {\n            Process process = ServiceManager.getProcessService().getById(processDTO.getId());\n            if(Objects.nonNull(process.getTemplate()) && Objects.nonNull(process.getRuleset())) {\n                return CREATE_PROCESS_PATH + \"&templateId=\" + process.getTemplate().getId() + \"&projectId=\"\n                        + process.getProject().getId() + \"&parentId=\" + process.getId();\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/24/ProcessForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/24/ProcessForm.java\nindex fb6404815a8..21bcb73f7f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/24/ProcessForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/24/ProcessForm.java\n@@ -105,7 +105,7 @@ public class ProcessForm extends TemplateBaseForm {\n     private final String processEditPath = MessageFormat.format(REDIRECT_PATH, \"processEdit\");\n     private PieChartModel pieModel;\n     private HorizontalBarChartModel stackedBarModel;\n-    private Map<String,Integer> statisticResult;\n+    private Map<String, Integer> statisticResult;\n     private final List<ProcessMetadataStatistic> processMetadataStatistics = new ArrayList<>();\n     private int numberOfGlobalImages;\n     private int numberOfGlobalStructuralElements;\n@@ -145,7 +145,7 @@ public class ProcessForm extends TemplateBaseForm {\n         SelectItemGroup processColumnGroup;\n         try {\n             processColumnGroup = ServiceManager.getListColumnService()\n-                    .getListColumnsForListAsSelectItemGroup(\"process\");\n+                .getListColumnsForListAsSelectItemGroup(\"process\");\n             columns.add(processColumnGroup);\n         } catch (DAOException e) {\n             Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n@@ -155,11 +155,11 @@ public class ProcessForm extends TemplateBaseForm {\n         customColumns = new ArrayList<>();\n         SelectItemGroup customColumnGroup = new SelectItemGroup(Helper.getTranslation(\"process\"));\n         customColumnGroup.setSelectItems(ServiceManager.getListColumnService().getAllCustomListColumns().stream()\n-                .map(listColumn -> new SelectItem(listColumn, listColumn.getTitle())).toArray(SelectItem[]::new));\n+            .map(listColumn -> new SelectItem(listColumn, listColumn.getTitle())).toArray(SelectItem[]::new));\n         customColumns.add(customColumnGroup);\n \n         selectedColumns =\n-                ServiceManager.getListColumnService().getSelectedListColumnsForListAndClient(\"process\");\n+            ServiceManager.getListColumnService().getSelectedListColumnsForListAndClient(\"process\");\n     }\n \n     /**\n@@ -176,12 +176,10 @@ public class ProcessForm extends TemplateBaseForm {\n      * Retrieve and return process property value of property with given name\n      * 'propertyName' from given ProcessDTO 'process'.\n      *\n-     * @param process\n-     *            the ProcessDTO object from which the property value is retrieved\n-     * @param propertyName\n-     *            name of the property for the property value is retrieved\n+     * @param process      the ProcessDTO object from which the property value is retrieved\n+     * @param propertyName name of the property for the property value is retrieved\n      * @return property value if process has property with name 'propertyName',\n-     *         empty String otherwise\n+     * empty String otherwise\n      */\n     public static String getPropertyValue(ProcessDTO process, String propertyName) {\n         return ProcessService.getPropertyValue(process, propertyName);\n@@ -190,8 +188,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Calculate and return age of given process as a String.\n      *\n-     * @param processDTO\n-     *            ProcessDTO object whose duration/age is calculated\n+     * @param processDTO ProcessDTO object whose duration/age is calculated\n      * @return process age of given process\n      */\n     public static String getProcessDuration(ProcessDTO processDTO) {\n@@ -210,7 +207,7 @@ public class ProcessForm extends TemplateBaseForm {\n          */\n         if (Objects.nonNull(this.process) && Objects.nonNull(this.process.getTitle())) {\n             if (!this.process.getTitle().equals(this.newProcessTitle) && Objects.nonNull(this.newProcessTitle)\n-                    && !renameAfterProcessTitleChanged()) {\n+                && !renameAfterProcessTitleChanged()) {\n                 return this.stayOnCurrentPage;\n             }\n \n@@ -219,7 +216,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 ServiceManager.getProcessService().save(this.process);\n                 return processesPage;\n             } catch (DataException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() },\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular()},\n                     logger, e);\n             }\n         } else {\n@@ -232,14 +229,13 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Delete Process.\n      *\n-     * @param processDTO\n-     *            process to delete.\n+     * @param processDTO process to delete.\n      */\n     public void delete(ProcessDTO processDTO) {\n         try {\n             this.process = ServiceManager.getProcessService().getById(processDTO.getId());\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_DELETING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n+            Helper.setErrorMessage(ERROR_DELETING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n                 e);\n         }\n         delete();\n@@ -253,8 +249,8 @@ public class ProcessForm extends TemplateBaseForm {\n             try {\n                 ProcessService.deleteProcess(this.process);\n             } catch (DataException | IOException e) {\n-                Helper.setErrorMessage(ERROR_DELETING, new Object[] {ObjectType.PROCESS.getTranslationSingular() },\n-                        logger, e);\n+                Helper.setErrorMessage(ERROR_DELETING, new Object[] {ObjectType.PROCESS.getTranslationSingular()},\n+                    logger, e);\n             }\n         } else {\n             PrimeFaces.current().executeScript(\"PF('deleteChildrenDialog').show();\");\n@@ -272,16 +268,15 @@ public class ProcessForm extends TemplateBaseForm {\n             }\n             ProcessService.deleteProcess(this.process);\n         } catch (DataException | IOException e) {\n-            Helper.setErrorMessage(ERROR_DELETING, new Object[] {ObjectType.PROCESS.getTranslationSingular() },\n-                    logger, e);\n+            Helper.setErrorMessage(ERROR_DELETING, new Object[] {ObjectType.PROCESS.getTranslationSingular()},\n+                logger, e);\n         }\n     }\n \n     /**\n      * If processes are generated with calendar.\n      *\n-     * @param processDTO\n-     *            the process dto to check.\n+     * @param processDTO the process dto to check.\n      * @return true if processes are created with calendar, false otherwise\n      */\n     public boolean createProcessesWithCalendar(ProcessDTO processDTO) {\n@@ -295,14 +290,14 @@ public class ProcessForm extends TemplateBaseForm {\n             } else {\n                 Ruleset ruleset = ServiceManager.getRulesetService().getById(rulesetId);\n                 functionalDivisions = ServiceManager.getRulesetService().openRuleset(ruleset)\n-                        .getFunctionalDivisions(FunctionalDivision.CREATE_CHILDREN_WITH_CALENDAR);\n+                    .getFunctionalDivisions(FunctionalDivision.CREATE_CHILDREN_WITH_CALENDAR);\n                 rulesetCacheForCreateFromCalendar.put(rulesetId, functionalDivisions);\n             }\n             if (functionalDivisions.contains(docType)) {\n                 return true;\n             }\n         } catch (IOException | DAOException | RulesetNotFoundException e) {\n-            Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n+            Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n                 e);\n         }\n         return false;\n@@ -311,8 +306,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * If a process can be created as child.\n      *\n-     * @param processDTO\n-     *            the process dto to check.\n+     * @param processDTO the process dto to check.\n      * @return true if processes can be created as child, false otherwise\n      */\n     public boolean createProcessAsChildPossible(ProcessDTO processDTO) {\n@@ -326,33 +320,34 @@ public class ProcessForm extends TemplateBaseForm {\n             } else {\n                 Ruleset ruleset = ServiceManager.getRulesetService().getById(rulesetId);\n                 functionalDivisions = ServiceManager.getRulesetService().openRuleset(ruleset)\n-                        .getFunctionalDivisions(FunctionalDivision.CREATE_CHILDREN_FROM_PARENT);\n+                    .getFunctionalDivisions(FunctionalDivision.CREATE_CHILDREN_FROM_PARENT);\n                 rulesetCacheForCreateChildFromParent.put(rulesetId, functionalDivisions);\n             }\n             if (functionalDivisions.contains(docType)) {\n                 return true;\n             }\n         } catch (IOException | DAOException | RulesetNotFoundException e) {\n-            Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n-                    e);\n+            Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n+                e);\n         }\n         return false;\n     }\n \n     /**\n      * Create Child for given Process.\n+     *\n      * @param processDTO the process to create a child for.\n      * @return path to createProcessForm\n      */\n     public String createProcessAsChild(ProcessDTO processDTO) {\n         try {\n             Process process = ServiceManager.getProcessService().getById(processDTO.getId());\n-            if(Objects.nonNull(process.getTemplate()) && Objects.nonNull(process.getRuleset())) {\n+            if (Objects.nonNull(process.getTemplate()) && Objects.nonNull(process.getRuleset())) {\n                 return CREATE_PROCESS_PATH + \"&templateId=\" + process.getTemplate().getId() + \"&projectId=\"\n-                        + process.getProject().getId() + \"&parentId=\" + process.getId();\n+                    + process.getProject().getId() + \"&parentId=\" + process.getId();\n             }\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n+            Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n                 e);\n         }\n         return \"processes\";\n@@ -371,8 +366,8 @@ public class ProcessForm extends TemplateBaseForm {\n                 ServiceManager.getProcessService().save(child);\n                 ProcessService.deleteProcess(this.process);\n             } catch (DataException | IOException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n-                        e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n+                    e);\n             }\n         }\n     }\n@@ -393,8 +388,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Get translation of task status title.\n      *\n-     * @param taskStatusTitle\n-     *            'statusDone', 'statusLocked' and so on\n+     * @param taskStatusTitle 'statusDone', 'statusLocked' and so on\n      * @return translated message for given task status title\n      */\n     public String getTaskStatusTitle(String taskStatusTitle) {\n@@ -417,7 +411,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 fileService.delete(images);\n             }\n         } catch (IOException | RuntimeException e) {\n-            Helper.setErrorMessage(\"errorDirectoryDeleting\", new Object[] {Helper.getTranslation(\"metadata\") }, logger,\n+            Helper.setErrorMessage(\"errorDirectoryDeleting\", new Object[] {Helper.getTranslation(\"metadata\")}, logger,\n                 e);\n         }\n \n@@ -428,7 +422,7 @@ public class ProcessForm extends TemplateBaseForm {\n     private boolean renameAfterProcessTitleChanged() {\n         String validateRegEx = ConfigCore.getParameterOrDefaultValue(ParameterCore.VALIDATE_PROCESS_TITLE_REGEX);\n         if (!this.newProcessTitle.matches(validateRegEx)) {\n-            Helper.setErrorMessage(\"processTitleInvalid\", new Object[] {validateRegEx });\n+            Helper.setErrorMessage(\"processTitleInvalid\", new Object[] {validateRegEx});\n             return false;\n         } else {\n             renamePropertiesValuesForProcessTitle(this.process.getProperties());\n@@ -440,7 +434,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 renameOcrDirectories();\n                 renameDefinedDirectories();\n             } catch (IOException | RuntimeException e) {\n-                Helper.setErrorMessage(\"errorRenaming\", new Object[] {Helper.getTranslation(\"directory\") }, logger, e);\n+                Helper.setErrorMessage(\"errorRenaming\", new Object[] {Helper.getTranslation(\"directory\")}, logger, e);\n             }\n \n             this.process.setTitle(this.newProcessTitle);\n@@ -489,14 +483,14 @@ public class ProcessForm extends TemplateBaseForm {\n         for (String processDir : processDirs) {\n             // TODO: check it out\n             URI processDirAbsolute = ServiceManager.getProcessService().getProcessDataDirectory(process)\n-                    .resolve(processDir.replace(\"(processtitle)\", process.getTitle()));\n+                .resolve(processDir.replace(\"(processtitle)\", process.getTitle()));\n \n             File dir = new File(processDirAbsolute);\n             boolean renamed;\n             if (dir.isDirectory()) {\n                 renamed = dir.renameTo(new File(dir.getAbsolutePath().replace(process.getTitle(), newProcessTitle)));\n                 if (!renamed) {\n-                    Helper.setErrorMessage(\"errorRenaming\", new Object[] {dir.getName() });\n+                    Helper.setErrorMessage(\"errorRenaming\", new Object[] {dir.getName()});\n                 }\n             }\n         }\n@@ -620,7 +614,7 @@ public class ProcessForm extends TemplateBaseForm {\n             }\n         } catch (DAOException e) {\n             Helper.setErrorMessage(ERROR_DATABASE_READING,\n-                new Object[] {ObjectType.ROLE.getTranslationSingular(), roleId }, logger, e);\n+                new Object[] {ObjectType.ROLE.getTranslationSingular(), roleId}, logger, e);\n         } catch (NumberFormatException e) {\n             Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n         }\n@@ -636,7 +630,7 @@ public class ProcessForm extends TemplateBaseForm {\n             Helper.setMessage(EXPORT_FINISHED);\n         } catch (DAOException | DataException | IOException e) {\n             Helper.setErrorMessage(\"An error occurred while trying to export METS file for process \"\n-                    + processId, logger, e);\n+                + processId, logger, e);\n         }\n     }\n \n@@ -657,7 +651,7 @@ public class ProcessForm extends TemplateBaseForm {\n             Helper.setMessage(EXPORT_FINISHED);\n         } catch (DataException e) {\n             Helper.setErrorMessage(ERROR_EXPORTING,\n-                new Object[] {ObjectType.PROCESS.getTranslationSingular(), this.process.getId() }, logger, e);\n+                new Object[] {ObjectType.PROCESS.getTranslationSingular(), this.process.getId()}, logger, e);\n         }\n     }\n \n@@ -683,7 +677,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 Helper.setMessage(EXPORT_FINISHED);\n             } catch (DataException e) {\n                 Helper.setErrorMessage(ERROR_EXPORTING,\n-                    new Object[] {ObjectType.PROCESS.getTranslationSingular(), processToExport.getId() }, logger, e);\n+                    new Object[] {ObjectType.PROCESS.getTranslationSingular(), processToExport.getId()}, logger, e);\n             }\n         }\n     }\n@@ -767,7 +761,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 workflowControllerService.updateProcessSortHelperStatus(processForStatus);\n             } catch (DataException | IOException e) {\n                 Helper.setErrorMessage(\"errorChangeTaskStatus\",\n-                    new Object[] {Helper.getTranslation(\"up\"), processForStatus.getId() }, logger, e);\n+                    new Object[] {Helper.getTranslation(\"up\"), processForStatus.getId()}, logger, e);\n             }\n         }\n     }\n@@ -794,7 +788,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 workflowControllerService.updateProcessSortHelperStatus(processForStatus);\n             } catch (DataException e) {\n                 Helper.setErrorMessage(\"errorChangeTaskStatus\",\n-                    new Object[] {Helper.getTranslation(\"down\"), processForStatus.getId() }, logger, e);\n+                    new Object[] {Helper.getTranslation(\"down\"), processForStatus.getId()}, logger, e);\n             }\n         }\n     }\n@@ -827,23 +821,21 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set process by ID.\n      *\n-     * @param processID\n-     *            ID of process to set.\n+     * @param processID ID of process to set.\n      */\n     public void setProcessByID(int processID) {\n         try {\n             setProcess(ServiceManager.getProcessService().getById(processID));\n         } catch (DAOException e) {\n             Helper.setErrorMessage(ERROR_LOADING_ONE,\n-                new Object[] {ObjectType.PROCESS.getTranslationSingular(), processID }, logger, e);\n+                new Object[] {ObjectType.PROCESS.getTranslationSingular(), processID}, logger, e);\n         }\n     }\n \n     /**\n      * Set process.\n      *\n-     * @param process\n-     *            Process object\n+     * @param process Process object\n      */\n     public void setProcess(Process process) {\n         this.process = process;\n@@ -865,8 +857,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set task.\n      *\n-     * @param task\n-     *            Task object\n+     * @param task Task object\n      */\n     public void setTask(Task task) {\n         this.task = task;\n@@ -929,7 +920,7 @@ public class ProcessForm extends TemplateBaseForm {\n         try {\n             processesForActions = ServiceManager.getProcessService().convertDtosToBeans(filteredProcesses);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_MANY, new Object[] {ObjectType.PROCESS.getTranslationPlural() },\n+            Helper.setErrorMessage(ERROR_LOADING_MANY, new Object[] {ObjectType.PROCESS.getTranslationPlural()},\n                 logger, e);\n         }\n \n@@ -948,8 +939,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set kitodo script for selected results.\n      *\n-     * @param kitodoScriptSelection\n-     *            the kitodoScript\n+     * @param kitodoScriptSelection the kitodoScript\n      */\n     public void setKitodoScriptSelection(String kitodoScriptSelection) {\n         this.kitodoScriptSelection = kitodoScriptSelection;\n@@ -967,8 +957,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set kitodo script for all results.\n      *\n-     * @param kitodoScriptAll\n-     *            the kitodoScript\n+     * @param kitodoScriptAll the kitodoScript\n      */\n     public void setKitodoScriptAll(String kitodoScriptAll) {\n         this.kitodoScriptAll = kitodoScriptAll;\n@@ -1014,7 +1003,7 @@ public class ProcessForm extends TemplateBaseForm {\n         try {\n             ServiceManager.getProcessService().generateResultAsPdf(this.filter);\n         } catch (IOException | DocumentException e) {\n-            Helper.setErrorMessage(ERROR_CREATING, new Object[] {Helper.getTranslation(\"resultPDF\") }, logger, e);\n+            Helper.setErrorMessage(ERROR_CREATING, new Object[] {Helper.getTranslation(\"resultPDF\")}, logger, e);\n         }\n     }\n \n@@ -1025,7 +1014,7 @@ public class ProcessForm extends TemplateBaseForm {\n         try {\n             ServiceManager.getProcessService().generateResult(this.filter);\n         } catch (IOException e) {\n-            Helper.setErrorMessage(ERROR_CREATING, new Object[] {Helper.getTranslation(\"resultSet\") }, logger, e);\n+            Helper.setErrorMessage(ERROR_CREATING, new Object[] {Helper.getTranslation(\"resultSet\")}, logger, e);\n         }\n     }\n \n@@ -1033,7 +1022,7 @@ public class ProcessForm extends TemplateBaseForm {\n      * Return whether closed processes should be displayed or not.\n      *\n      * @return parameter controlling whether closed processes should be displayed or\n-     *         not\n+     * not\n      */\n     public boolean isShowClosedProcesses() {\n         return this.showClosedProcesses;\n@@ -1042,9 +1031,8 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set whether closed processes should be displayed or not.\n      *\n-     * @param showClosedProcesses\n-     *            boolean flag signaling whether closed processes should be\n-     *            displayed or not\n+     * @param showClosedProcesses boolean flag signaling whether closed processes should be\n+     *                            displayed or not\n      */\n     public void setShowClosedProcesses(boolean showClosedProcesses) {\n         this.showClosedProcesses = showClosedProcesses;\n@@ -1054,9 +1042,8 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set whether inactive projects should be displayed or not.\n      *\n-     * @param showInactiveProjects\n-     *            boolean flag signaling whether inactive projects should be\n-     *            displayed or not\n+     * @param showInactiveProjects boolean flag signaling whether inactive projects should be\n+     *                             displayed or not\n      */\n     public void setShowInactiveProjects(boolean showInactiveProjects) {\n         this.showInactiveProjects = showInactiveProjects;\n@@ -1067,7 +1054,7 @@ public class ProcessForm extends TemplateBaseForm {\n      * Return whether inactive projects should be displayed or not.\n      *\n      * @return parameter controlling whether inactive projects should be displayed\n-     *         or not\n+     * or not\n      */\n     public boolean isShowInactiveProjects() {\n         return this.showInactiveProjects;\n@@ -1085,8 +1072,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set property for process.\n      *\n-     * @param property\n-     *            for process as Property object\n+     * @param property for process as Property object\n      */\n     public void setProperty(Property property) {\n         this.property = property;\n@@ -1104,8 +1090,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set list of properties for process.\n      *\n-     * @param properties\n-     *            for process as Property objects\n+     * @param properties for process as Property objects\n      */\n     public void setProperties(List<Property> properties) {\n         this.properties = properties;\n@@ -1123,8 +1108,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set list of templates for process.\n      *\n-     * @param templates\n-     *            for process as Property objects\n+     * @param templates for process as Property objects\n      */\n     public void setTemplates(List<Property> templates) {\n         this.templates = templates;\n@@ -1142,8 +1126,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Set list of workpieces for process.\n      *\n-     * @param workpieces\n-     *            for process as Property objects\n+     * @param workpieces for process as Property objects\n      */\n     public void setWorkpieces(List<Property> workpieces) {\n         this.workpieces = workpieces;\n@@ -1257,8 +1240,7 @@ public class ProcessForm extends TemplateBaseForm {\n      * parameter 'id' is '0', the form for creating a new process will be\n      * displayed.\n      *\n-     * @param id\n-     *            ID of the process to load\n+     * @param id ID of the process to load\n      */\n     public void load(int id) {\n         SecurityAccessController securityAccessController = new SecurityAccessController();\n@@ -1268,7 +1250,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 context.redirect(DEFAULT_LINK);\n             }\n         } catch (IOException | DataException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), id },\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), id},\n                 logger, e);\n         }\n         try {\n@@ -1277,7 +1259,7 @@ public class ProcessForm extends TemplateBaseForm {\n             }\n             setSaveDisabled(true);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), id },\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), id},\n                 logger, e);\n         }\n     }\n@@ -1293,8 +1275,8 @@ public class ProcessForm extends TemplateBaseForm {\n                 context.redirect(DEFAULT_LINK);\n             }\n         } catch (IOException | DataException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.TASK.getTranslationSingular(), id },\n-                    logger, e);\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.TASK.getTranslationSingular(), id},\n+                logger, e);\n         }\n         try {\n             if (id != 0) {\n@@ -1302,7 +1284,7 @@ public class ProcessForm extends TemplateBaseForm {\n             }\n             setSaveDisabled(true);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.TASK.getTranslationSingular(), id },\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.TASK.getTranslationSingular(), id},\n                 logger, e);\n         }\n     }\n@@ -1319,8 +1301,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Sets selected processes.\n      *\n-     * @param selectedProcesses\n-     *            the list of Process beans\n+     * @param selectedProcesses the list of Process beans\n      */\n     public void setSelectedProcesses(List<Process> selectedProcesses) {\n         this.selectedProcesses = selectedProcesses;\n@@ -1330,8 +1311,7 @@ public class ProcessForm extends TemplateBaseForm {\n      * Set referring view which will be returned when the user clicks \"save\" or\n      * \"cancel\" on the task edit page.\n      *\n-     * @param referer\n-     *            the referring view\n+     * @param referer the referring view\n      */\n     public void setTaskEditReferer(String referer) {\n         if (referer.equals(\"processEdit?id=\" + this.task.getProcess().getId())) {\n@@ -1354,8 +1334,7 @@ public class ProcessForm extends TemplateBaseForm {\n      * Set referring view which will be returned when the user clicks \"save\" or\n      * \"cancel\" on the process edit page.\n      *\n-     * @param referer\n-     *            the referring view\n+     * @param referer the referring view\n      */\n     public void setProcessEditReferer(String referer) {\n         if (!referer.isEmpty()) {\n@@ -1379,8 +1358,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Changes the filter of the ProcessForm and reloads it.\n      *\n-     * @param filter\n-     *            the filter to apply.\n+     * @param filter the filter to apply.\n      * @return reloadpath of th page.\n      */\n     public String changeFilter(String filter) {\n@@ -1402,8 +1380,7 @@ public class ProcessForm extends TemplateBaseForm {\n      * Returns a String containing titles of all current tasks of the given process, e.g. \"OPEN\" tasks and tasks\n      * \"INWORK\".\n      *\n-     * @param processDTO\n-     *          process for which current task titles are returned\n+     * @param processDTO process for which current task titles are returned\n      * @return String containing titles of current tasks of given process\n      */\n     public String getCurrentTaskTitles(ProcessDTO processDTO) {\n@@ -1419,7 +1396,7 @@ public class ProcessForm extends TemplateBaseForm {\n         try {\n             return ProcessService.getAllParentProcesses(ServiceManager.getProcessService().getById(processId));\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId }, logger, e);\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId}, logger, e);\n             return new ArrayList<>();\n         }\n     }\n@@ -1427,15 +1404,14 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Get number of direct child processes for the given process.\n      *\n-     * @param processId\n-     *          process id for given process\n+     * @param processId process id for given process\n      * @return number of child processes\n      */\n     public int getNumberOfChildProcesses(int processId) {\n         try {\n             return ServiceManager.getProcessService().getNumberOfChildren(processId);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId }, logger, e);\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId}, logger, e);\n             return 0;\n         }\n     }\n@@ -1465,10 +1441,10 @@ public class ProcessForm extends TemplateBaseForm {\n      */\n     public void showDurationOfTasks() {\n         chartMode = ChartMode.BAR;\n-        LinkedHashMap<String, LinkedHashMap<String,Integer>> durationOfTasks = new LinkedHashMap<>();\n+        LinkedHashMap<String, LinkedHashMap<String, Integer>> durationOfTasks = new LinkedHashMap<>();\n         for (Process selectedProcess : selectedProcesses) {\n-            LinkedHashMap<String,Integer> taskValues = new LinkedHashMap<>();\n-            for (Task task  : selectedProcess.getTasks()) {\n+            LinkedHashMap<String, Integer> taskValues = new LinkedHashMap<>();\n+            for (Task task : selectedProcess.getTasks()) {\n                 long durationInDays = ServiceManager.getTaskService().getDurationInDays(task);\n                 taskValues.put(task.getTitle(), Math.toIntExact(durationInDays));\n             }\n@@ -1490,7 +1466,7 @@ public class ProcessForm extends TemplateBaseForm {\n                 workpiece = ServiceManager.getMetsService().loadWorkpiece(metadataFilePath);\n             } catch (IOException e) {\n                 Helper.setErrorMessage(ERROR_LOADING_ONE,\n-                    new Object[] {ObjectType.PROCESS.getTranslationSingular(), selectedProcess.getId() }, logger, e);\n+                    new Object[] {ObjectType.PROCESS.getTranslationSingular(), selectedProcess.getId()}, logger, e);\n                 return;\n             }\n             int numberOfProcessImages = workpiece.getAllMediaUnitsSorted().size();\n@@ -1498,11 +1474,11 @@ public class ProcessForm extends TemplateBaseForm {\n             int numberOfProcessStructuralElements = workpiece.getAllIncludedStructuralElements().size();\n             this.numberOfGlobalStructuralElements += numberOfProcessStructuralElements;\n             int numberOfProcessMetadata = Math\n-                    .toIntExact(ServiceManager.getMetsService().countLogicalMetadata(workpiece));\n+                .toIntExact(ServiceManager.getMetsService().countLogicalMetadata(workpiece));\n             this.numberOfGlobalMetadata += numberOfProcessMetadata;\n \n             processMetadataStatistics.add(new ProcessMetadataStatistic(selectedProcess.getTitle(),\n-                    numberOfProcessImages, numberOfProcessStructuralElements, numberOfProcessMetadata));\n+                numberOfProcessImages, numberOfProcessStructuralElements, numberOfProcessMetadata));\n         }\n     }\n \n@@ -1600,7 +1576,7 @@ public class ProcessForm extends TemplateBaseForm {\n \n     public int getRelativeStructuralElementAmount(int numberOfStructuralElements) {\n         return numberOfStructuralElements == 0 ? 0\n-                : numberOfStructuralElements * 100 / this.numberOfGlobalStructuralElements;\n+            : numberOfStructuralElements * 100 / this.numberOfGlobalStructuralElements;\n     }\n \n     public int getRelativeMetadataAmount(int numberOfMetadata) {\n@@ -1634,11 +1610,10 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Check and return whether the process with the ID 'processId' has any correction comments or not.\n      *\n-     * @param processId\n-     *          ID of process to check\n+     * @param processId ID of process to check\n      * @return 0, if process has no correction comment\n-     *         1, if process has correction comments that are all corrected\n-     *         2, if process has at least one open correction comment\n+     * 1, if process has correction comments that are all corrected\n+     * 2, if process has at least one open correction comment\n      */\n     public int hasCorrectionTask(int processId) {\n         try {\n@@ -1653,8 +1628,7 @@ public class ProcessForm extends TemplateBaseForm {\n     /**\n      * Retrieve correction comments of given process and return them as a tooltip String.\n      *\n-     * @param processDTO\n-     *          process for which comment tooltip is created and returned\n+     * @param processDTO process for which comment tooltip is created and returned\n      * @return String containing correction comment messages for given process\n      */\n     public String getCorrectionMessages(ProcessDTO processDTO) {\n@@ -1668,6 +1642,7 @@ public class ProcessForm extends TemplateBaseForm {\n \n     /**\n      * Return path to processes page.\n+     *\n      * @return path to processes page\n      */\n     public String getProcessesPage() {\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}