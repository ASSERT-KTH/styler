{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "321",
    "information": {
        "errors": [
            {
                "line": "42",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "{\n\n\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\n\t{\n\t\treturn new ConvertibleStringExpr()\n\t\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/321/ConvertibleBooleanExpr.java\nindex 266c1684776..f0d150e6f05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/321/ConvertibleBooleanExpr.java\n@@ -39,7 +39,7 @@ public abstract class ConvertibleBooleanExpr\n     implements BooleanExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n+public StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n \t{\r\n \t\treturn new ConvertibleStringExpr()\r\n \t\t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/321/ConvertibleBooleanExpr.java\nindex 266c1684776..6cd2eef214e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/321/ConvertibleBooleanExpr.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import org.genxdm.Model;\r\n@@ -36,45 +37,43 @@ import org.genxdm.xpath.v10.VariantExpr;\n  */\r\n public abstract class ConvertibleBooleanExpr\r\n     extends ConvertibleExprImpl\r\n-    implements BooleanExpr\r\n-{\r\n+    implements BooleanExpr {\r\n \r\n-\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> context) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn Converter.toString(ConvertibleBooleanExpr.this.booleanFunction(model, node, context));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+    public StringExpr makeStringExpr(final ExprContextStatic statEnv) {\r\n+        return new ConvertibleStringExpr() {\r\n+            public <N> String stringFunction(Model<N> model, final N node,\r\n+                                             final ExprContextDynamic<N> context)\r\n+                throws ExprException {\r\n+                return Converter\r\n+                    .toString(ConvertibleBooleanExpr.this.booleanFunction(model, node, context));\r\n+            }\r\n+        };\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic ConvertibleNumberExpr makeNumberExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final ExprContextDynamic<N> context) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn Converter.toNumber(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, context));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+    @Override\r\n+    public ConvertibleNumberExpr makeNumberExpr(final ExprContextStatic statEnv) {\r\n+        return new ConvertibleNumberExpr() {\r\n+            public <N> double numberFunction(Model<N> model, final N contextNode,\r\n+                                             final ExprContextDynamic<N> context)\r\n+                throws ExprException {\r\n+                return Converter.toNumber(\r\n+                    ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, context));\r\n+            }\r\n+        };\r\n+    }\r\n \r\n-\tpublic BooleanExpr makeBooleanExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+    public BooleanExpr makeBooleanExpr(final ExprContextStatic statEnv) {\r\n+        return this;\r\n+    }\r\n \r\n-\tpublic VariantExpr makeVariantExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn new BooleanVariant<N>(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, dynEnv));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+    public VariantExpr makeVariantExpr(final ExprContextStatic statEnv) {\r\n+        return new ConvertibleVariantExpr() {\r\n+            public <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode,\r\n+                                                    final ExprContextDynamic<N> dynEnv)\r\n+                throws ExprException {\r\n+                return new BooleanVariant<N>(\r\n+                    ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, dynEnv));\r\n+            }\r\n+        };\r\n+    }\r\n }\r\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/321/ConvertibleBooleanExpr.java\nindex 266c1684776..577d7de77a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/321/ConvertibleBooleanExpr.java\n@@ -37,44 +37,44 @@ import org.genxdm.xpath.v10.VariantExpr;\n public abstract class ConvertibleBooleanExpr\r\n     extends ConvertibleExprImpl\r\n     implements BooleanExpr\r\n-{\r\n-\r\n-\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> context) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn Converter.toString(ConvertibleBooleanExpr.this.booleanFunction(model, node, context));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+{\n+\n+    public StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n+\t{\n+    return new ConvertibleStringExpr()\r\n+\t\t{\n+    public <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> context) throws ExprException\r\n+\t\t\t{\n+    return Converter.toString(ConvertibleBooleanExpr.this.booleanFunction(model, node, context));\n+    }\n+    };\n+    }\r\n \r\n \t@Override\r\n \tpublic ConvertibleNumberExpr makeNumberExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final ExprContextDynamic<N> context) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn Converter.toNumber(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, context));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+\t{\n+    return new ConvertibleNumberExpr()\r\n+\t\t{\n+    public <N> double numberFunction(Model<N> model, final N contextNode, final ExprContextDynamic<N> context) throws ExprException\r\n+\t\t\t{\n+    return Converter.toNumber(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, context));\n+    }\n+    };\n+    }\r\n \r\n \tpublic BooleanExpr makeBooleanExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+\t{\n+    return this;\n+    }\r\n \r\n \tpublic VariantExpr makeVariantExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn new BooleanVariant<N>(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, dynEnv));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-}\r\n+\t{\n+    return new ConvertibleVariantExpr()\r\n+\t\t{\n+    public <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n+\t\t\t{\n+    return new BooleanVariant<N>(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, dynEnv));\n+    }\n+    };\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/321/ConvertibleBooleanExpr.java\nindex 266c1684776..c84fa52e886 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/321/ConvertibleBooleanExpr.java\n@@ -18,63 +18,61 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.processor.xpath.v10.variants.BooleanVariant;\r\n-import org.genxdm.xpath.v10.BooleanExpr;\r\n-import org.genxdm.xpath.v10.Converter;\r\n-import org.genxdm.xpath.v10.ExprContextDynamic;\r\n-import org.genxdm.xpath.v10.ExprContextStatic;\r\n-import org.genxdm.xpath.v10.ExprException;\r\n-import org.genxdm.xpath.v10.StringExpr;\r\n-import org.genxdm.xpath.v10.Variant;\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.processor.xpath.v10.variants.BooleanVariant;\n+import org.genxdm.xpath.v10.BooleanExpr;\n+import org.genxdm.xpath.v10.Converter;\n+import org.genxdm.xpath.v10.ExprContextDynamic;\n+import org.genxdm.xpath.v10.ExprContextStatic;\n+import org.genxdm.xpath.v10.ExprException;\n+import org.genxdm.xpath.v10.StringExpr;\n+import org.genxdm.xpath.v10.Variant;\n import org.genxdm.xpath.v10.VariantExpr;\r\n \r\n /**\r\n  * An expression which is a boolean, but depending on its use, may be converted to a Number, String or Object on its use, may be converted to a Number, String or Object\r\n- */\r\n-public abstract class ConvertibleBooleanExpr\r\n-    extends ConvertibleExprImpl\r\n-    implements BooleanExpr\r\n-{\r\n-\r\n-\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> context) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn Converter.toString(ConvertibleBooleanExpr.this.booleanFunction(model, node, context));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic ConvertibleNumberExpr makeNumberExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final ExprContextDynamic<N> context) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn Converter.toNumber(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, context));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-\r\n-\tpublic BooleanExpr makeBooleanExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n-\r\n-\tpublic VariantExpr makeVariantExpr(final ExprContextStatic statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn new BooleanVariant<N>(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, dynEnv));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-}\r\n+ */\n+\n+public abstract class ConvertibleBooleanExpr extends ConvertibleExprImpl implements BooleanExpr\n+{\n+    public StringExpr makeStringExpr(final ExprContextStatic statEnv)\n+    {\n+        return new ConvertibleStringExpr()\n+        {\n+            public <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> context) throws ExprException\n+            {\n+                return Converter.toString(ConvertibleBooleanExpr.this.booleanFunction(model, node, context));\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public ConvertibleNumberExpr makeNumberExpr(final ExprContextStatic statEnv)\n+    {\n+        return new ConvertibleNumberExpr()\n+        {\n+            public <N> double numberFunction(Model<N> model, final N contextNode, final ExprContextDynamic<N> context) throws ExprException\n+            {\n+                return Converter.toNumber(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, context));\n+            }\n+        };\n+    }\n+\n+    public BooleanExpr makeBooleanExpr(final ExprContextStatic statEnv)\n+    {\n+        return this;\n+    }\n+\n+    public VariantExpr makeVariantExpr(final ExprContextStatic statEnv)\n+    {\n+        return new ConvertibleVariantExpr()\n+        {\n+            public <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\n+            {\n+                return new BooleanVariant<N>(ConvertibleBooleanExpr.this.booleanFunction(model, contextNode, dynEnv));\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/321/ConvertibleBooleanExpr.java\nindex 266c1684776..f0d150e6f05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/321/ConvertibleBooleanExpr.java\n@@ -39,7 +39,7 @@ public abstract class ConvertibleBooleanExpr\n     implements BooleanExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n+public StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n \t{\r\n \t\treturn new ConvertibleStringExpr()\r\n \t\t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/321/ConvertibleBooleanExpr.java\nindex 266c1684776..d1daa234338 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/321/ConvertibleBooleanExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/321/ConvertibleBooleanExpr.java\n@@ -39,7 +39,7 @@ public abstract class ConvertibleBooleanExpr\n     implements BooleanExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n+    public StringExpr makeStringExpr(final ExprContextStatic statEnv)\r\n \t{\r\n \t\treturn new ConvertibleStringExpr()\r\n \t\t{\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}