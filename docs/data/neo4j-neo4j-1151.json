{
    "project_name": "neo4j-neo4j",
    "error_id": "1151",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1151/FabricExecutionStatementResultImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1151/FabricExecutionStatementResultImpl.java\nindex 0850378e925..6211b35d087 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1151/FabricExecutionStatementResultImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1151/FabricExecutionStatementResultImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.fabric.executor;\n \n import reactor.core.publisher.Flux;\n@@ -34,7 +35,7 @@ class FabricExecutionStatementResultImpl implements StatementResult\n     private final StatementResult statementResult;\n     private final Consumer<Throwable> failureHandler;\n \n-    FabricExecutionStatementResultImpl( StatementResult statementResult, Consumer<Throwable> failureHandler )\n+    FabricExecutionStatementResultImpl(StatementResult statementResult, Consumer<Throwable> failureHandler)\n     {\n         this.statementResult = statementResult;\n         this.failureHandler = failureHandler;\n@@ -43,24 +44,24 @@ class FabricExecutionStatementResultImpl implements StatementResult\n     @Override\n     public Flux<String> columns()\n     {\n-        return statementResult.columns().doOnError( failureHandler );\n+        return statementResult.columns().doOnError(failureHandler);\n     }\n \n     @Override\n     public Flux<Record> records()\n     {\n-        return statementResult.records().doOnError( failureHandler );\n+        return statementResult.records().doOnError(failureHandler);\n     }\n \n     @Override\n     public Mono<Summary> summary()\n     {\n-        return statementResult.summary().doOnError( failureHandler );\n+        return statementResult.summary().doOnError(failureHandler);\n     }\n \n     @Override\n     public Mono<QueryExecutionType> executionType()\n     {\n-        return statementResult.executionType().doOnError( failureHandler );\n+        return statementResult.executionType().doOnError(failureHandler);\n     }\n }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}