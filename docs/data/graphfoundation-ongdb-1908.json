{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1908",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1908/RelationshipRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1908/RelationshipRecordFormat.java\nindex d95c2524d99..056d9a1123f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1908/RelationshipRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1908/RelationshipRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.standard;\n \n import java.io.IOException;\n@@ -30,140 +31,139 @@ import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n \n public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<RelationshipRecord>\n {\n-    // record header size\n-    // directed|in_use(byte)+first_node(int)+second_node(int)+rel_type(int)+\n-    // first_prev_rel_id(int)+first_next_rel_id+second_prev_rel_id(int)+\n-    // second_next_rel_id+next_prop_id(int)+first-in-chain-markers(1)\n-    public static final int RECORD_SIZE = 34;\n-\n-    public RelationshipRecordFormat()\n+  // record header size\n+  // directed|in_use(byte)+first_node(int)+second_node(int)+rel_type(int)+\n+  // first_prev_rel_id(int)+first_next_rel_id+second_prev_rel_id(int)+\n+  // second_next_rel_id+next_prop_id(int)+first-in-chain-markers(1)\n+  public static final int RECORD_SIZE = 34;\n+\n+  public RelationshipRecordFormat()\n+  {\n+    super(fixedRecordSize(RECORD_SIZE), 0, IN_USE_BIT, StandardFormatSettings.RELATIONSHIP_MAXIMUM_ID_BITS);\n+  }\n+\n+  @Override\n+  public RelationshipRecord newRecord()\n+  {\n+    return new RelationshipRecord(-1);\n+  }\n+\n+  @Override\n+  public void read(RelationshipRecord record, PageCursor cursor, RecordLoad mode, int recordSize)\n+  {\n+    byte headerByte = cursor.getByte();\n+    boolean inUse = isInUse(headerByte);\n+    record.setInUse(inUse);\n+    if (mode.shouldLoad(inUse))\n     {\n-        super( fixedRecordSize( RECORD_SIZE ), 0, IN_USE_BIT, StandardFormatSettings.RELATIONSHIP_MAXIMUM_ID_BITS );\n+      // [    ,   x] in use flag\n+      // [    ,xxx ] first node high order bits\n+      // [xxxx,    ] next prop high order bits\n+      long firstNode = cursor.getInt() & 0xFFFFFFFFL;\n+      long firstNodeMod = (headerByte & 0xEL) << 31;\n+\n+      long secondNode = cursor.getInt() & 0xFFFFFFFFL;\n+\n+      // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n+      // [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000\n+      // [    ,   x][xx  ,    ][    ,    ][    ,    ] first next rel high order bits,  0x1C00000\n+      // [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000\n+      // [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000\n+      // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n+      long typeInt = cursor.getInt();\n+      long secondNodeMod = (typeInt & 0x70000000L) << 4;\n+      int type = (int) (typeInt & 0xFFFF);\n+\n+      long firstPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n+      long firstPrevRelMod = (typeInt & 0xE000000L) << 7;\n+\n+      long firstNextRel = cursor.getInt() & 0xFFFFFFFFL;\n+      long firstNextRelMod = (typeInt & 0x1C00000L) << 10;\n+\n+      long secondPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n+      long secondPrevRelMod = (typeInt & 0x380000L) << 13;\n+\n+      long secondNextRel = cursor.getInt() & 0xFFFFFFFFL;\n+      long secondNextRelMod = (typeInt & 0x70000L) << 16;\n+\n+      long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n+      long nextPropMod = (headerByte & 0xF0L) << 28;\n+\n+      byte extraByte = cursor.getByte();\n+\n+      record.initialize(inUse,\n+          BaseRecordFormat.longFromIntAndMod(nextProp, nextPropMod),\n+          BaseRecordFormat.longFromIntAndMod(firstNode, firstNodeMod),\n+          BaseRecordFormat.longFromIntAndMod(secondNode, secondNodeMod),\n+          type,\n+          BaseRecordFormat.longFromIntAndMod(firstPrevRel, firstPrevRelMod),\n+          BaseRecordFormat.longFromIntAndMod(firstNextRel, firstNextRelMod),\n+          BaseRecordFormat.longFromIntAndMod(secondPrevRel, secondPrevRelMod),\n+          BaseRecordFormat.longFromIntAndMod(secondNextRel, secondNextRelMod),\n+          (extraByte & 0x1) != 0,\n+          (extraByte & 0x2) != 0);\n     }\n+  }\n \n-    @Override\n-    public RelationshipRecord newRecord()\n+  @Override\n+  public void write(RelationshipRecord record, PageCursor cursor, int recordSize)\n+  {\n+    if (record.inUse())\n     {\n-        return new RelationshipRecord( -1 );\n-    }\n-\n-    @Override\n-    public void read( RelationshipRecord record, PageCursor cursor, RecordLoad mode, int recordSize )\n-    {\n-        byte headerByte = cursor.getByte();\n-        boolean inUse = isInUse( headerByte );\n-        record.setInUse( inUse );\n-        if ( mode.shouldLoad( inUse ) )\n-        {\n-            // [    ,   x] in use flag\n-            // [    ,xxx ] first node high order bits\n-            // [xxxx,    ] next prop high order bits\n-            long firstNode = cursor.getInt() & 0xFFFFFFFFL;\n-            long firstNodeMod = (headerByte & 0xEL) << 31;\n-\n-            long secondNode = cursor.getInt() & 0xFFFFFFFFL;\n-\n-            // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n-            // [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000\n-            // [    ,   x][xx  ,    ][    ,    ][    ,    ] first next rel high order bits,  0x1C00000\n-            // [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000\n-            // [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000\n-            // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n-            long typeInt = cursor.getInt();\n-            long secondNodeMod = (typeInt & 0x70000000L) << 4;\n-            int type = (int)(typeInt & 0xFFFF);\n-\n-            long firstPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n-            long firstPrevRelMod = (typeInt & 0xE000000L) << 7;\n-\n-            long firstNextRel = cursor.getInt() & 0xFFFFFFFFL;\n-            long firstNextRelMod = (typeInt & 0x1C00000L) << 10;\n-\n-            long secondPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n-            long secondPrevRelMod = (typeInt & 0x380000L) << 13;\n-\n-            long secondNextRel = cursor.getInt() & 0xFFFFFFFFL;\n-            long secondNextRelMod = (typeInt & 0x70000L) << 16;\n-\n-            long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-            long nextPropMod = (headerByte & 0xF0L) << 28;\n-\n-            byte extraByte = cursor.getByte();\n-\n-            record.initialize( inUse,\n-                    BaseRecordFormat.longFromIntAndMod( nextProp, nextPropMod ),\n-                    BaseRecordFormat.longFromIntAndMod( firstNode, firstNodeMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondNode, secondNodeMod ),\n-                    type,\n-                    BaseRecordFormat.longFromIntAndMod( firstPrevRel, firstPrevRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( firstNextRel, firstNextRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondPrevRel, secondPrevRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondNextRel, secondNextRelMod ),\n-                    (extraByte & 0x1) != 0,\n-                    (extraByte & 0x2) != 0 );\n-        }\n-    }\n-\n-    @Override\n-    public void write( RelationshipRecord record, PageCursor cursor, int recordSize )\n+      long firstNode = record.getFirstNode();\n+      short firstNodeMod = (short) ((firstNode & 0x700000000L) >> 31);\n+\n+      long secondNode = record.getSecondNode();\n+      long secondNodeMod = (secondNode & 0x700000000L) >> 4;\n+\n+      long firstPrevRel = record.getFirstPrevRel();\n+      long firstPrevRelMod = firstPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (firstPrevRel & 0x700000000L) >> 7;\n+\n+      long firstNextRel = record.getFirstNextRel();\n+      long firstNextRelMod = firstNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (firstNextRel & 0x700000000L) >> 10;\n+\n+      long secondPrevRel = record.getSecondPrevRel();\n+      long secondPrevRelMod = secondPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (secondPrevRel & 0x700000000L) >> 13;\n+\n+      long secondNextRel = record.getSecondNextRel();\n+      long secondNextRelMod = secondNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (secondNextRel & 0x700000000L) >> 16;\n+\n+      long nextProp = record.getNextProp();\n+      long nextPropMod = nextProp == Record.NO_NEXT_PROPERTY.intValue() ? 0 : (nextProp & 0xF00000000L) >> 28;\n+\n+      // [    ,   x] in use flag\n+      // [    ,xxx ] first node high order bits\n+      // [xxxx,    ] next prop high order bits\n+      short inUseUnsignedByte = (short) ((record.inUse() ? Record.IN_USE :\n+          Record.NOT_IN_USE).byteValue() | firstNodeMod | nextPropMod);\n+\n+      // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n+      // [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000\n+      // [    ,   x][xx  ,    ][    ,    ][    ,    ] first next rel high order bits,  0x1C00000\n+      // [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000\n+      // [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000\n+      // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n+      int typeInt = (int) (record.getType() | secondNodeMod | firstPrevRelMod | firstNextRelMod | secondPrevRelMod | secondNextRelMod);\n+\n+      // [    ,   x] 1:st in start node chain, 0x1\n+      // [    ,  x ] 1:st in end node chain,   0x2\n+      long firstInStartNodeChain = record.isFirstInFirstChain() ? 0x1 : 0;\n+      long firstInEndNodeChain = record.isFirstInSecondChain() ? 0x2 : 0;\n+      byte extraByte = (byte) (firstInEndNodeChain | firstInStartNodeChain);\n+\n+      cursor.putByte((byte) inUseUnsignedByte);\n+      cursor.putInt((int) firstNode);\n+      cursor.putInt((int) secondNode);\n+      cursor.putInt(typeInt);\n+      cursor.putInt((int) firstPrevRel);\n+      cursor.putInt((int) firstNextRel);\n+      cursor.putInt((int) secondPrevRel);\n+      cursor.putInt((int) secondNextRel);\n+      cursor.putInt((int) nextProp);\n+      cursor.putByte(extraByte);\n+    } else\n     {\n-        if ( record.inUse() )\n-        {\n-            long firstNode = record.getFirstNode();\n-            short firstNodeMod = (short)((firstNode & 0x700000000L) >> 31);\n-\n-            long secondNode = record.getSecondNode();\n-            long secondNodeMod = (secondNode & 0x700000000L) >> 4;\n-\n-            long firstPrevRel = record.getFirstPrevRel();\n-            long firstPrevRelMod = firstPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (firstPrevRel & 0x700000000L) >> 7;\n-\n-            long firstNextRel = record.getFirstNextRel();\n-            long firstNextRelMod = firstNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (firstNextRel & 0x700000000L) >> 10;\n-\n-            long secondPrevRel = record.getSecondPrevRel();\n-            long secondPrevRelMod = secondPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (secondPrevRel & 0x700000000L) >> 13;\n-\n-            long secondNextRel = record.getSecondNextRel();\n-            long secondNextRelMod = secondNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (secondNextRel & 0x700000000L) >> 16;\n-\n-            long nextProp = record.getNextProp();\n-            long nextPropMod = nextProp == Record.NO_NEXT_PROPERTY.intValue() ? 0 : (nextProp & 0xF00000000L) >> 28;\n-\n-            // [    ,   x] in use flag\n-            // [    ,xxx ] first node high order bits\n-            // [xxxx,    ] next prop high order bits\n-            short inUseUnsignedByte = (short) ((record.inUse() ? Record.IN_USE :\n-                                                Record.NOT_IN_USE).byteValue() | firstNodeMod | nextPropMod);\n-\n-            // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n-            // [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000\n-            // [    ,   x][xx  ,    ][    ,    ][    ,    ] first next rel high order bits,  0x1C00000\n-            // [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000\n-            // [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000\n-            // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n-            int typeInt = (int)(record.getType() | secondNodeMod | firstPrevRelMod | firstNextRelMod | secondPrevRelMod | secondNextRelMod);\n-\n-            // [    ,   x] 1:st in start node chain, 0x1\n-            // [    ,  x ] 1:st in end node chain,   0x2\n-            long firstInStartNodeChain = record.isFirstInFirstChain() ? 0x1 : 0;\n-            long firstInEndNodeChain = record.isFirstInSecondChain() ? 0x2 : 0;\n-            byte extraByte = (byte) (firstInEndNodeChain | firstInStartNodeChain);\n-\n-            cursor.putByte( (byte)inUseUnsignedByte );\n-            cursor.putInt( (int) firstNode );\n-            cursor.putInt( (int) secondNode );\n-            cursor.putInt( typeInt );\n-            cursor.putInt( (int) firstPrevRel );\n-            cursor.putInt( (int) firstNextRel );\n-            cursor.putInt( (int) secondPrevRel );\n-            cursor.putInt( (int) secondNextRel );\n-            cursor.putInt( (int) nextProp );\n-            cursor.putByte( extraByte );\n-        }\n-        else\n-        {\n-            markAsUnused( cursor );\n-        }\n+      markAsUnused(cursor);\n     }\n+  }\n }\n",
            "diff_size": 197
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1908/RelationshipRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1908/RelationshipRecordFormat.java\nindex d95c2524d99..f61b45a7034 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1908/RelationshipRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1908/RelationshipRecordFormat.java\n@@ -71,7 +71,7 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n             long typeInt = cursor.getInt();\n             long secondNodeMod = (typeInt & 0x70000000L) << 4;\n-            int type = (int)(typeInt & 0xFFFF);\n+            int type = ( int)( typeInt & 0xFFFF );\n \n             long firstPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n             long firstPrevRelMod = (typeInt & 0xE000000L) << 7;\n@@ -89,19 +89,10 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             long nextPropMod = (headerByte & 0xF0L) << 28;\n \n             byte extraByte = cursor.getByte();\n-\n-            record.initialize( inUse,\n-                    BaseRecordFormat.longFromIntAndMod( nextProp, nextPropMod ),\n-                    BaseRecordFormat.longFromIntAndMod( firstNode, firstNodeMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondNode, secondNodeMod ),\n-                    type,\n-                    BaseRecordFormat.longFromIntAndMod( firstPrevRel, firstPrevRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( firstNextRel, firstNextRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondPrevRel, secondPrevRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondNextRel, secondNextRelMod ),\n-                    (extraByte & 0x1) != 0,\n-                    (extraByte & 0x2) != 0 );\n-        }\n+record.initialize( inUse,\n+                    BaseRecordFormat.longFromIntAndMod( nextProp, nextPropMod ), BaseRecordFormat.longFromIntAndMod( firstNode, firstNodeMod ), BaseRecordFormat.longFromIntAndMod( secondNode, secondNodeMod ), type,\n+                    BaseRecordFormat.longFromIntAndMod( firstPrevRel, firstPrevRelMod ), BaseRecordFormat.longFromIntAndMod( firstNextRel, firstNextRelMod ), BaseRecordFormat.longFromIntAndMod( secondPrevRel, secondPrevRelMod ), BaseRecordFormat.longFromIntAndMod( secondNextRel, secondNextRelMod ), ( extraByte & 0x1) != 0, ( extraByte & 0x2) != 0 );\n+    }\n     }\n \n     @Override\n@@ -110,55 +101,52 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n         if ( record.inUse() )\n         {\n             long firstNode = record.getFirstNode();\n-            short firstNodeMod = (short)((firstNode & 0x700000000L) >> 31);\n+            short firstNodeMod = (short)((firstNode & 0x700000000L) >> 31 );\n \n             long secondNode = record.getSecondNode();\n             long secondNodeMod = (secondNode & 0x700000000L) >> 4;\n \n             long firstPrevRel = record.getFirstPrevRel();\n-            long firstPrevRelMod = firstPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (firstPrevRel & 0x700000000L) >> 7;\n+            long firstPrevRelMod = firstPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : ( firstPrevRel & 0x700000000L) >> 7;\n \n             long firstNextRel = record.getFirstNextRel();\n-            long firstNextRelMod = firstNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (firstNextRel & 0x700000000L) >> 10;\n+            long firstNextRelMod = firstNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : ( firstNextRel & 0x700000000L) >> 10;\n \n             long secondPrevRel = record.getSecondPrevRel();\n-            long secondPrevRelMod = secondPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (secondPrevRel & 0x700000000L) >> 13;\n+            long secondPrevRelMod = secondPrevRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : ( secondPrevRel & 0x700000000L) >> 13;\n \n             long secondNextRel = record.getSecondNextRel();\n-            long secondNextRelMod = secondNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (secondNextRel & 0x700000000L) >> 16;\n+            long secondNextRelMod = secondNextRel == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : ( secondNextRel & 0x700000000L) >> 16;\n \n             long nextProp = record.getNextProp();\n-            long nextPropMod = nextProp == Record.NO_NEXT_PROPERTY.intValue() ? 0 : (nextProp & 0xF00000000L) >> 28;\n+            long nextPropMod = nextProp == Record.NO_NEXT_PROPERTY.intValue() ? 0 : ( nextProp & 0xF00000000L) >> 28;\n \n             // [    ,   x] in use flag\n             // [    ,xxx ] first node high order bits\n             // [xxxx,    ] next prop high order bits\n-            short inUseUnsignedByte = (short) ((record.inUse() ? Record.IN_USE :\n-                                                Record.NOT_IN_USE).byteValue() | firstNodeMod | nextPropMod);\n-\n-            // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n+            short inUseUnsignedByte = (short) ((record.inUse() ? Record.IN_USE : Record.NOT_IN_USE).byteValue() | firstNodeMod | nextPropMod );\n+    // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n             // [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000\n             // [    ,   x][xx  ,    ][    ,    ][    ,    ] first next rel high order bits,  0x1C00000\n             // [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000\n             // [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000\n             // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n-            int typeInt = (int)(record.getType() | secondNodeMod | firstPrevRelMod | firstNextRelMod | secondPrevRelMod | secondNextRelMod);\n+            int typeInt = ( int)(record.getType() | secondNodeMod | firstPrevRelMod | firstNextRelMod | secondPrevRelMod | secondNextRelMod);\n \n             // [    ,   x] 1:st in start node chain, 0x1\n             // [    ,  x ] 1:st in end node chain,   0x2\n             long firstInStartNodeChain = record.isFirstInFirstChain() ? 0x1 : 0;\n             long firstInEndNodeChain = record.isFirstInSecondChain() ? 0x2 : 0;\n-            byte extraByte = (byte) (firstInEndNodeChain | firstInStartNodeChain);\n-\n-            cursor.putByte( (byte)inUseUnsignedByte );\n-            cursor.putInt( (int) firstNode );\n-            cursor.putInt( (int) secondNode );\n+            byte extraByte = (byte) ( firstInEndNodeChain | firstInStartNodeChain);\n+cursor.putByte( (byte)inUseUnsignedByte );\n+            cursor.putInt( ( int) firstNode );\n+            cursor.putInt( ( int) secondNode );\n             cursor.putInt( typeInt );\n-            cursor.putInt( (int) firstPrevRel );\n-            cursor.putInt( (int) firstNextRel );\n-            cursor.putInt( (int) secondPrevRel );\n-            cursor.putInt( (int) secondNextRel );\n-            cursor.putInt( (int) nextProp );\n+            cursor.putInt( ( int) firstPrevRel );\n+            cursor.putInt( ( int) firstNextRel );\n+            cursor.putInt( ( int) secondPrevRel );\n+            cursor.putInt( ( int) secondNextRel );\n+            cursor.putInt( ( int) nextProp );\n             cursor.putByte( extraByte );\n         }\n         else\n@@ -166,4 +154,4 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             markAsUnused( cursor );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}