{
    "project_name": "eclipse-kura",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "33",
                "column": "4",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " * <pre>\n * Example Code:\n * \t\ttry {\n *\t\t\tString uri = new CommURI.Builder(\"/dev/tty.PL2303-00001004\")\n *\t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n *\t\t\t\t\t\t\t\t\t\t.withDataBits(8)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "33",
                    "column": "4",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "column": "4",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/28/CommConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/28/CommConnection.java\nindex db7c945acea..0bd6c002e58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/28/CommConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/28/CommConnection.java\n@@ -9,6 +9,7 @@\n  * Contributors:\n  *     Eurotech\n  *******************************************************************************/\n+\n package org.eclipse.kura.comm;\n \n import java.io.IOException;\n@@ -31,85 +32,85 @@ import org.osgi.annotation.versioning.ProviderType;\n  * <pre>\n  * Example Code:\n  * \t\ttry {\n- *\t\t\tString uri = new CommURI.Builder(\"/dev/tty.PL2303-00001004\")\n- *\t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n- *\t\t\t\t\t\t\t\t\t\t.withDataBits(8)\n- *\t\t\t\t\t\t\t\t\t\t.withStopBits(1)\n- *\t\t\t\t\t\t\t\t\t\t.withParity(0)\n- *\t\t\t\t\t\t\t\t\t\t.withTimeout(2000)\n- *\t\t\t\t\t\t\t\t\t\t.build().toString();\n- *\t\t\tCommConnection connOne = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n- *\t\t\tassertNotNull(connOne);\n- *\t\t\turi = new CommURI.Builder(\"/dev/tty.PL2303-00002006\")\n- *\t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n- *\t\t\t\t\t\t\t\t\t\t.withDataBits(8)\n- *\t\t\t\t\t\t\t\t\t\t.withStopBits(1)\n- *\t\t\t\t\t\t\t\t\t\t.withParity(0)\n- *\t\t\t\t\t\t\t\t\t\t.withTimeout(2000)\n- *\t\t\t\t\t\t\t\t\t\t.build().toString();\n- *\t\t\tCommConnection connTwo = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n- *\t\t\tassertNotNull(connTwo);\n+ * \t\t\tString uri = new CommURI.Builder(\"/dev/tty.PL2303-00001004\")\n+ * \t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n+ * \t\t\t\t\t\t\t\t\t\t.withDataBits(8)\n+ * \t\t\t\t\t\t\t\t\t\t.withStopBits(1)\n+ * \t\t\t\t\t\t\t\t\t\t.withParity(0)\n+ * \t\t\t\t\t\t\t\t\t\t.withTimeout(2000)\n+ * \t\t\t\t\t\t\t\t\t\t.build().toString();\n+ * \t\t\tCommConnection connOne = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n+ * \t\t\tassertNotNull(connOne);\n+ * \t\t\turi = new CommURI.Builder(\"/dev/tty.PL2303-00002006\")\n+ * \t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n+ * \t\t\t\t\t\t\t\t\t\t.withDataBits(8)\n+ * \t\t\t\t\t\t\t\t\t\t.withStopBits(1)\n+ * \t\t\t\t\t\t\t\t\t\t.withParity(0)\n+ * \t\t\t\t\t\t\t\t\t\t.withTimeout(2000)\n+ * \t\t\t\t\t\t\t\t\t\t.build().toString();\n+ * \t\t\tCommConnection connTwo = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n+ * \t\t\tassertNotNull(connTwo);\n  *\n- *\t\t\tInputStream isOne = connOne.openInputStream();\n- *\t\t\tOutputStream osOne = connOne.openOutputStream();\n- *\t\t\tInputStream isTwo = connTwo.openInputStream();\n- *\t\t\tOutputStream osTwo = connTwo.openOutputStream();\n+ * \t\t\tInputStream isOne = connOne.openInputStream();\n+ * \t\t\tOutputStream osOne = connOne.openOutputStream();\n+ * \t\t\tInputStream isTwo = connTwo.openInputStream();\n+ * \t\t\tOutputStream osTwo = connTwo.openOutputStream();\n  *\n- *\t\t\tassertNotNull(isOne);\n- *\t\t\tassertNotNull(osOne);\n- *\t\t\tassertNotNull(isTwo);\n- *\t\t\tassertNotNull(osTwo);\n+ * \t\t\tassertNotNull(isOne);\n+ * \t\t\tassertNotNull(osOne);\n+ * \t\t\tassertNotNull(isTwo);\n+ * \t\t\tassertNotNull(osTwo);\n  *\n- *\t\t\t//write from one to two\n- *\t\t\tbyte[] array = \"this is a message from one to two\\n\".getBytes();\n- *\t\t\tosOne.write(array);\n- *\t\t\tStringBuffer sb = new StringBuffer();\n- *\t\t\tint c;\n- *\t\t\twhile((c = isTwo.read()) != 0xa) {\n- *\t\t\t\tsb.append((char)c);\n- *\t\t\t}\n- *\t\t\tSystem.out.println(\"Port 2: Read from serial port two: \" + sb.toString());\n+ * \t\t\t//write from one to two\n+ * \t\t\tbyte[] array = \"this is a message from one to two\\n\".getBytes();\n+ * \t\t\tosOne.write(array);\n+ * \t\t\tStringBuffer sb = new StringBuffer();\n+ * \t\t\tint c;\n+ * \t\t\twhile((c = isTwo.read()) != 0xa) {\n+ * \t\t\t\tsb.append((char)c);\n+ *            }\n+ * \t\t\tSystem.out.println(\"Port 2: Read from serial port two: \" + sb.toString());\n  *\n- *\t\t\tarray = \"this is a message from two to one\\n\".getBytes();\n- *\t\t\tosTwo.write(array);\n- *\t\t\tsb = new StringBuffer();\n- *\t\t\twhile((c = isOne.read()) != 0xa) {\n- *\t\t\t\tsb.append((char)c);\n- *\t\t\t}\n- *\t\t\tSystem.out.println(\"Port 1: Read from serial port: \" + sb.toString());\n+ * \t\t\tarray = \"this is a message from two to one\\n\".getBytes();\n+ * \t\t\tosTwo.write(array);\n+ * \t\t\tsb = new StringBuffer();\n+ * \t\t\twhile((c = isOne.read()) != 0xa) {\n+ * \t\t\t\tsb.append((char)c);\n+ *            }\n+ * \t\t\tSystem.out.println(\"Port 1: Read from serial port: \" + sb.toString());\n  *\n- *\t\t\tisOne.close();\n- *\t\t\tosOne.close();\n- *\t\t\tisOne = null;\n- *\t \t\tosOne = null;\n- *\t\t\tisTwo.close();\n- *\t\t\tosTwo.close();\n- *\t\t\tisTwo = null;\n- *\t\t\tosTwo = null;\n- *\t\t\tconnOne.close();\n- *\t\t\tconnOne = null;\n- *\t\t\tconnTwo.close();\n- *\t\t\tconnTwo = null;\n- *\t\t} catch (Exception e) {\n- *\t\t\te.printStackTrace();\n- *\t\t}\n+ * \t\t\tisOne.close();\n+ * \t\t\tosOne.close();\n+ * \t\t\tisOne = null;\n+ * \t \t\tosOne = null;\n+ * \t\t\tisTwo.close();\n+ * \t\t\tosTwo.close();\n+ * \t\t\tisTwo = null;\n+ * \t\t\tosTwo = null;\n+ * \t\t\tconnOne.close();\n+ * \t\t\tconnOne = null;\n+ * \t\t\tconnTwo.close();\n+ * \t\t\tconnTwo = null;\n+ *        } catch (Exception e) {\n+ * \t\t\te.printStackTrace();\n+ *        }\n  * </pre>\n- *\n+ * <p>\n  * Note: avoid blocking read (InputStream.read()) if the InputStream can be closed on a different thread,\n  * in this case, the read will never exit and the thread will be blocked forever.\n- *\n+ * <p>\n  * It is preferable to test InputStream.available before InputStream.read():\n  *\n  * <pre>\n- *\t\tif (isOne.available() != 0) {\n- *\t\t\tc = isOne.read();\n- *\t\t} else {\n- *\t\ttry {\n- *\t\t\tThread.sleep(100);\n- *\t\t\tcontinue;\n- *\t\t} catch (InterruptedException e) {\n- *\t\t\treturn;\n- *\t\t}\n+ * \t\tif (isOne.available() != 0) {\n+ * \t\t\tc = isOne.read();\n+ *        } else {\n+ * \t\ttry {\n+ * \t\t\tThread.sleep(100);\n+ * \t\t\tcontinue;\n+ *        } catch (InterruptedException e) {\n+ * \t\t\treturn;\n+ *        }\n  * </pre>\n  *\n  * @noimplement This interface is not intended to be implemented by clients.\n@@ -127,8 +128,7 @@ public interface CommConnection extends StreamConnection {\n     /**\n      * Sends and array of bytes to a CommConnection\n      *\n-     * @param message\n-     *            the array of bytes to send to the CommConnection\n+     * @param message the array of bytes to send to the CommConnection\n      * @throws KuraException\n      * @throws IOException\n      */\n@@ -141,11 +141,9 @@ public interface CommConnection extends StreamConnection {\n      * meant to be used in common command/response type situations when communicating\n      * with serial devices\n      *\n-     * @param command\n-     *            the array of bytes to send to the CommConnection\n-     * @param timeout\n-     *            the maximum length of time to wait before returning a null\n-     *            response in the event no response is ever returned.\n+     * @param command the array of bytes to send to the CommConnection\n+     * @param timeout the maximum length of time to wait before returning a null\n+     *                response in the event no response is ever returned.\n      * @return an array of bytes representing the response\n      * @throws KuraException\n      * @throws IOException\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "column": "4",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/28/CommConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/28/CommConnection.java\nindex db7c945acea..257830c6e0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/28/CommConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/28/CommConnection.java\n@@ -167,4 +167,4 @@ public interface CommConnection extends StreamConnection {\n \n     @Override\n     public void close() throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/28/CommConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/28/CommConnection.java\nindex db7c945acea..6794f66f27b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/28/CommConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/28/CommConnection.java\n@@ -12,9 +12,7 @@\n package org.eclipse.kura.comm;\n \n import java.io.IOException;\n-\n import javax.microedition.io.StreamConnection;\n-\n import org.eclipse.kura.KuraException;\n import org.osgi.annotation.versioning.ProviderType;\n \n@@ -30,69 +28,69 @@ import org.osgi.annotation.versioning.ProviderType;\n  *\n  * <pre>\n  * Example Code:\n- * \t\ttry {\n- *\t\t\tString uri = new CommURI.Builder(\"/dev/tty.PL2303-00001004\")\n- *\t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n- *\t\t\t\t\t\t\t\t\t\t.withDataBits(8)\n- *\t\t\t\t\t\t\t\t\t\t.withStopBits(1)\n- *\t\t\t\t\t\t\t\t\t\t.withParity(0)\n- *\t\t\t\t\t\t\t\t\t\t.withTimeout(2000)\n- *\t\t\t\t\t\t\t\t\t\t.build().toString();\n- *\t\t\tCommConnection connOne = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n- *\t\t\tassertNotNull(connOne);\n- *\t\t\turi = new CommURI.Builder(\"/dev/tty.PL2303-00002006\")\n- *\t\t\t\t\t\t\t\t\t\t.withBaudRate(19200)\n- *\t\t\t\t\t\t\t\t\t\t.withDataBits(8)\n- *\t\t\t\t\t\t\t\t\t\t.withStopBits(1)\n- *\t\t\t\t\t\t\t\t\t\t.withParity(0)\n- *\t\t\t\t\t\t\t\t\t\t.withTimeout(2000)\n- *\t\t\t\t\t\t\t\t\t\t.build().toString();\n- *\t\t\tCommConnection connTwo = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n- *\t\t\tassertNotNull(connTwo);\n+ *      try {\n+ *          String uri = new CommURI.Builder(\"/dev/tty.PL2303-00001004\")\n+ *                                      .withBaudRate(19200)\n+ *                                      .withDataBits(8)\n+ *                                      .withStopBits(1)\n+ *                                      .withParity(0)\n+ *                                      .withTimeout(2000)\n+ *                                      .build().toString();\n+ *          CommConnection connOne = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n+ *          assertNotNull(connOne);\n+ *          uri = new CommURI.Builder(\"/dev/tty.PL2303-00002006\")\n+ *                                      .withBaudRate(19200)\n+ *                                      .withDataBits(8)\n+ *                                      .withStopBits(1)\n+ *                                      .withParity(0)\n+ *                                      .withTimeout(2000)\n+ *                                      .build().toString();\n+ *          CommConnection connTwo = (CommConnection) CommTest.connectionFactory.createConnection(uri, 1, false);\n+ *          assertNotNull(connTwo);\n  *\n- *\t\t\tInputStream isOne = connOne.openInputStream();\n- *\t\t\tOutputStream osOne = connOne.openOutputStream();\n- *\t\t\tInputStream isTwo = connTwo.openInputStream();\n- *\t\t\tOutputStream osTwo = connTwo.openOutputStream();\n+ *          InputStream isOne = connOne.openInputStream();\n+ *          OutputStream osOne = connOne.openOutputStream();\n+ *          InputStream isTwo = connTwo.openInputStream();\n+ *          OutputStream osTwo = connTwo.openOutputStream();\n  *\n- *\t\t\tassertNotNull(isOne);\n- *\t\t\tassertNotNull(osOne);\n- *\t\t\tassertNotNull(isTwo);\n- *\t\t\tassertNotNull(osTwo);\n+ *          assertNotNull(isOne);\n+ *          assertNotNull(osOne);\n+ *          assertNotNull(isTwo);\n+ *          assertNotNull(osTwo);\n  *\n- *\t\t\t//write from one to two\n- *\t\t\tbyte[] array = \"this is a message from one to two\\n\".getBytes();\n- *\t\t\tosOne.write(array);\n- *\t\t\tStringBuffer sb = new StringBuffer();\n- *\t\t\tint c;\n- *\t\t\twhile((c = isTwo.read()) != 0xa) {\n- *\t\t\t\tsb.append((char)c);\n- *\t\t\t}\n- *\t\t\tSystem.out.println(\"Port 2: Read from serial port two: \" + sb.toString());\n+ *          //write from one to two\n+ *          byte[] array = \"this is a message from one to two\\n\".getBytes();\n+ *          osOne.write(array);\n+ *          StringBuffer sb = new StringBuffer();\n+ *          int c;\n+ *          while((c = isTwo.read()) != 0xa) {\n+ *              sb.append((char)c);\n+ *          }\n+ *          System.out.println(\"Port 2: Read from serial port two: \" + sb.toString());\n  *\n- *\t\t\tarray = \"this is a message from two to one\\n\".getBytes();\n- *\t\t\tosTwo.write(array);\n- *\t\t\tsb = new StringBuffer();\n- *\t\t\twhile((c = isOne.read()) != 0xa) {\n- *\t\t\t\tsb.append((char)c);\n- *\t\t\t}\n- *\t\t\tSystem.out.println(\"Port 1: Read from serial port: \" + sb.toString());\n+ *          array = \"this is a message from two to one\\n\".getBytes();\n+ *          osTwo.write(array);\n+ *          sb = new StringBuffer();\n+ *          while((c = isOne.read()) != 0xa) {\n+ *              sb.append((char)c);\n+ *          }\n+ *          System.out.println(\"Port 1: Read from serial port: \" + sb.toString());\n  *\n- *\t\t\tisOne.close();\n- *\t\t\tosOne.close();\n- *\t\t\tisOne = null;\n- *\t \t\tosOne = null;\n- *\t\t\tisTwo.close();\n- *\t\t\tosTwo.close();\n- *\t\t\tisTwo = null;\n- *\t\t\tosTwo = null;\n- *\t\t\tconnOne.close();\n- *\t\t\tconnOne = null;\n- *\t\t\tconnTwo.close();\n- *\t\t\tconnTwo = null;\n- *\t\t} catch (Exception e) {\n- *\t\t\te.printStackTrace();\n- *\t\t}\n+ *          isOne.close();\n+ *          osOne.close();\n+ *          isOne = null;\n+ *          osOne = null;\n+ *          isTwo.close();\n+ *          osTwo.close();\n+ *          isTwo = null;\n+ *          osTwo = null;\n+ *          connOne.close();\n+ *          connOne = null;\n+ *          connTwo.close();\n+ *          connTwo = null;\n+ *      } catch (Exception e) {\n+ *          e.printStackTrace();\n+ *      }\n  * </pre>\n  *\n  * Note: avoid blocking read (InputStream.read()) if the InputStream can be closed on a different thread,\n@@ -101,19 +99,21 @@ import org.osgi.annotation.versioning.ProviderType;\n  * It is preferable to test InputStream.available before InputStream.read():\n  *\n  * <pre>\n- *\t\tif (isOne.available() != 0) {\n- *\t\t\tc = isOne.read();\n- *\t\t} else {\n- *\t\ttry {\n- *\t\t\tThread.sleep(100);\n- *\t\t\tcontinue;\n- *\t\t} catch (InterruptedException e) {\n- *\t\t\treturn;\n- *\t\t}\n+ *      if (isOne.available() != 0) {\n+ *          c = isOne.read();\n+ *      } else {\n+ *      try {\n+ *          Thread.sleep(100);\n+ *          continue;\n+ *      } catch (InterruptedException e) {\n+ *          return;\n+ *      }\n  * </pre>\n  *\n  * @noimplement This interface is not intended to be implemented by clients.\n  */\n+\n+\n @ProviderType\n public interface CommConnection extends StreamConnection {\n \n@@ -122,6 +122,8 @@ public interface CommConnection extends StreamConnection {\n      *\n      * @return this connection URI\n      */\n+\n+\n     public CommURI getURI();\n \n     /**\n@@ -132,6 +134,8 @@ public interface CommConnection extends StreamConnection {\n      * @throws KuraException\n      * @throws IOException\n      */\n+\n+\n     public void sendMessage(byte[] message) throws KuraException, IOException;\n \n     /**\n@@ -150,8 +154,11 @@ public interface CommConnection extends StreamConnection {\n      * @throws KuraException\n      * @throws IOException\n      */\n+\n+\n     public byte[] sendCommand(byte[] command, int timeout) throws KuraException, IOException;\n \n+\n     public byte[] sendCommand(byte[] command, int timeout, int demark) throws KuraException, IOException;\n \n     /**\n@@ -163,8 +170,11 @@ public interface CommConnection extends StreamConnection {\n      * @throws KuraException\n      * @throws IOException\n      */\n+\n+\n     public byte[] flushSerialBuffer() throws KuraException, IOException;\n \n+\n     @Override\n     public void close() throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 82
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "33",
                    "column": "4",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "column": "4",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}