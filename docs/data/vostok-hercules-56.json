{
    "project_name": "vostok-hercules",
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "48",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                        for (ConsumerRecord<UUID, Event> record : records) {\n                            Event event = record.value();\n                            if (event == null) {// Received non-deserializable data, should be ignored\n                                droppedEvents++;\n                                if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n                                    DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/56/SimpleSink.java\nindex 37375e17288..e9909e6bbde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/56/SimpleSink.java\n@@ -87,7 +87,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n                                     DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "90",
                    "column": "34",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/56/SimpleSink.java\nindex 37375e17288..46ab8670a82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/56/SimpleSink.java\n@@ -24,106 +24,106 @@ import java.util.concurrent.ExecutorService;\n  * @author Gregory Koshelev\n  */\n public class SimpleSink extends Sink {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleSink.class);\n-    private static final Logger DROPPED_EVENTS_LOGGER = LoggerFactory.getLogger(LoggingConstants.DROPPED_EVENT_LOGGER_NAME);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SimpleSink.class);\n+  private static final Logger DROPPED_EVENTS_LOGGER = LoggerFactory.getLogger(LoggingConstants.DROPPED_EVENT_LOGGER_NAME);\n \n \n-    private final Sender sender;\n+  private final Sender sender;\n \n-    private final Meter droppedEventsMeter;\n-    private final Meter processedEventsMeter;\n-    private final Meter rejectedEventsMeter;\n-    private final Meter totalEventsMeter;\n+  private final Meter droppedEventsMeter;\n+  private final Meter processedEventsMeter;\n+  private final Meter rejectedEventsMeter;\n+  private final Meter totalEventsMeter;\n \n-    private final long senderTimeoutMs;\n+  private final long senderTimeoutMs;\n \n-    public SimpleSink(\n-            ExecutorService executor,\n-            String applicationId,\n-            Properties properties,\n+  public SimpleSink(\n+    ExecutorService executor,\n+    String applicationId,\n+    Properties properties,\n \n-            Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n-        super(executor, applicationId, properties);\n+    Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n+    super(executor, applicationId, properties);\n \n-        this.sender = sender;\n+    this.sender = sender;\n \n-        this.droppedEventsMeter = droppedEventsMeter;\n-        this.processedEventsMeter = processedEventsMeter;\n-        this.rejectedEventsMeter = rejectedEventsMeter;\n-        this.totalEventsMeter = totalEventsMeter;\n+    this.droppedEventsMeter = droppedEventsMeter;\n+    this.processedEventsMeter = processedEventsMeter;\n+    this.rejectedEventsMeter = rejectedEventsMeter;\n+    this.totalEventsMeter = totalEventsMeter;\n \n-        this.senderTimeoutMs = Props.SENDER_TIMEOUT_MS.extract(properties);\n-    }\n+    this.senderTimeoutMs = Props.SENDER_TIMEOUT_MS.extract(properties);\n+  }\n \n-    @Override\n-    public void run() {\n-        while (isRunning()) {\n-            try {\n-                if (!sender.isAvailable()) {\n-                    return;\n-                }\n-                subscribe();\n-\n-                while (sender.isAvailable()) {\n-                    ConsumerRecords<UUID, Event> pollResult;\n-                    try {\n-                        pollResult = poll();\n-                    } catch (WakeupException ex) {\n-                        /*\n-                         * WakeupException is used to terminate polling\n-                         */\n-                        return;\n-                    }\n-\n-                    Set<TopicPartition> partitions = pollResult.partitions();\n-\n-                    // ConsumerRecords::count works for O(n), where n is partition count\n-                    int eventCount = pollResult.count();\n-                    List<Event> events = new ArrayList<>(eventCount);\n-\n-                    int droppedEvents = 0;\n-\n-                    for (TopicPartition partition : partitions) {\n-                        List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n-                        for (ConsumerRecord<UUID, Event> record : records) {\n-                            Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n-                                droppedEvents++;\n-                                if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n-                                    DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n-                                }\n-                                continue;\n-                            }\n-                            events.add(event);\n-                        }\n-                    }\n-\n-                    SenderResult result = sender.process(events);\n-                    if (result.isSuccess()) {\n-                        try {\n-                            commit();\n-                            droppedEventsMeter.mark(droppedEvents);\n-                            processedEventsMeter.mark(result.getProcessedEvents());\n-                            rejectedEventsMeter.mark(result.getRejectedEvents());\n-                            totalEventsMeter.mark(events.size());\n-                        } catch (CommitFailedException ex) {\n-                            LOGGER.warn(\"Commit failed due to rebalancing\", ex);\n-                            continue;\n-                        }\n-                    }\n+  @Override\n+  public void run() {\n+    while (isRunning()) {\n+      try {\n+        if (!sender.isAvailable()) {\n+          return;\n+        }\n+        subscribe();\n+\n+        while (sender.isAvailable()) {\n+          ConsumerRecords<UUID, Event> pollResult;\n+          try {\n+            pollResult = poll();\n+          } catch (WakeupException ex) {\n+            /*\n+             * WakeupException is used to terminate polling\n+             */\n+            return;\n+          }\n+\n+          Set<TopicPartition> partitions = pollResult.partitions();\n+\n+          // ConsumerRecords::count works for O(n), where n is partition count\n+          int eventCount = pollResult.count();\n+          List<Event> events = new ArrayList<>(eventCount);\n+\n+          int droppedEvents = 0;\n+\n+          for (TopicPartition partition : partitions) {\n+            List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n+            for (ConsumerRecord<UUID, Event> record : records) {\n+              Event event = record.value();\n+              if (event == null) {// Received non-deserializable data, should be ignored\n+                droppedEvents++;\n+                if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n+                  DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n                 }\n-            } catch (Exception ex) {\n-                LOGGER.error(\"Unspecified exception has been acquired\", ex);\n-            } finally {\n-                unsubscribe();\n+                continue;\n+              }\n+              events.add(event);\n             }\n+          }\n \n-            sender.awaitAvailability(senderTimeoutMs);\n+          SenderResult result = sender.process(events);\n+          if (result.isSuccess()) {\n+            try {\n+              commit();\n+              droppedEventsMeter.mark(droppedEvents);\n+              processedEventsMeter.mark(result.getProcessedEvents());\n+              rejectedEventsMeter.mark(result.getRejectedEvents());\n+              totalEventsMeter.mark(events.size());\n+            } catch (CommitFailedException ex) {\n+              LOGGER.warn(\"Commit failed due to rebalancing\", ex);\n+              continue;\n+            }\n+          }\n         }\n-    }\n+      } catch (Exception ex) {\n+        LOGGER.error(\"Unspecified exception has been acquired\", ex);\n+      } finally {\n+        unsubscribe();\n+      }\n \n-    private static class Props {\n-        static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n-                PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n+      sender.awaitAvailability(senderTimeoutMs);\n     }\n+  }\n+\n+  private static class Props {\n+    static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n+      PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n+  }\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/56/SimpleSink.java\nindex 37375e17288..567fb612b40 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/56/SimpleSink.java\n@@ -40,10 +40,8 @@ public class SimpleSink extends Sink {\n     public SimpleSink(\n             ExecutorService executor,\n             String applicationId,\n-            Properties properties,\n-\n-            Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n-        super(executor, applicationId, properties);\n+            Properties properties, Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n+    super(executor, applicationId, properties);\n \n         this.sender = sender;\n \n@@ -87,7 +85,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n                                     DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n@@ -126,4 +124,4 @@ public class SimpleSink extends Sink {\n         static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n                 PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "87",
                    "column": "48",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/56/SimpleSink.java\nindex 37375e17288..745bdd06aea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/56/SimpleSink.java\n@@ -12,7 +12,6 @@ import ru.kontur.vostok.hercules.protocol.Event;\n import ru.kontur.vostok.hercules.util.logging.LoggingConstants;\n import ru.kontur.vostok.hercules.util.properties.PropertyDescription;\n import ru.kontur.vostok.hercules.util.properties.PropertyDescriptions;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n@@ -23,35 +22,34 @@ import java.util.concurrent.ExecutorService;\n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class SimpleSink extends Sink {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(SimpleSink.class);\n     private static final Logger DROPPED_EVENTS_LOGGER = LoggerFactory.getLogger(LoggingConstants.DROPPED_EVENT_LOGGER_NAME);\n-\n-\n     private final Sender sender;\n-\n     private final Meter droppedEventsMeter;\n     private final Meter processedEventsMeter;\n     private final Meter rejectedEventsMeter;\n     private final Meter totalEventsMeter;\n-\n     private final long senderTimeoutMs;\n \n     public SimpleSink(\n-            ExecutorService executor,\n-            String applicationId,\n-            Properties properties,\n-\n-            Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n+        ExecutorService executor,\n+        String applicationId,\n+        Properties properties,\n+        Sender sender,\n+        Meter droppedEventsMeter,\n+        Meter processedEventsMeter,\n+        Meter rejectedEventsMeter, Meter totalEventsMeter\n+    ) {\n         super(executor, applicationId, properties);\n-\n         this.sender = sender;\n-\n         this.droppedEventsMeter = droppedEventsMeter;\n         this.processedEventsMeter = processedEventsMeter;\n         this.rejectedEventsMeter = rejectedEventsMeter;\n         this.totalEventsMeter = totalEventsMeter;\n-\n         this.senderTimeoutMs = Props.SENDER_TIMEOUT_MS.extract(properties);\n     }\n \n@@ -62,6 +60,7 @@ public class SimpleSink extends Sink {\n                 if (!sender.isAvailable()) {\n                     return;\n                 }\n+\n                 subscribe();\n \n                 while (sender.isAvailable()) {\n@@ -80,9 +79,7 @@ public class SimpleSink extends Sink {\n                     // ConsumerRecords::count works for O(n), where n is partition count\n                     int eventCount = pollResult.count();\n                     List<Event> events = new ArrayList<>(eventCount);\n-\n                     int droppedEvents = 0;\n-\n                     for (TopicPartition partition : partitions) {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n@@ -92,8 +89,10 @@ public class SimpleSink extends Sink {\n                                 if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n                                     DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n                                 }\n+\n                                 continue;\n                             }\n+\n                             events.add(event);\n                         }\n                     }\n@@ -123,7 +122,8 @@ public class SimpleSink extends Sink {\n     }\n \n     private static class Props {\n-        static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n-                PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n+        static final PropertyDescription<Long> SENDER_TIMEOUT_MS = PropertyDescriptions.longProperty(\"senderTimeoutMs\")\n+        .withDefaultValue(2_000L)\n+        .build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/56/SimpleSink.java\nindex 37375e17288..e9909e6bbde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/56/SimpleSink.java\n@@ -87,7 +87,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n                                     DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/56/SimpleSink.java\nindex 37375e17288..e9909e6bbde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/56/SimpleSink.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/56/SimpleSink.java\n@@ -87,7 +87,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 if (DROPPED_EVENTS_LOGGER.isDebugEnabled()) {\n                                     DROPPED_EVENTS_LOGGER.trace(\"{}\", record.key());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}