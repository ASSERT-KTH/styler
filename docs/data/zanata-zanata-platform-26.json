{
    "project_name": "zanata-zanata-platform",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "118",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        query.setCacheable(false);\n        query.setFirstResult(firstResult);\n        if(maxResult != -1) {\n            query.setMaxResults(maxResult);\n        }\n        query.setComment(\"PersonDAO.findAllEnabledContainingName\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/26/PersonDAO.java\nindex 3bfc5444fef..1659a53bc92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/26/PersonDAO.java\n@@ -115,7 +115,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n         query.setCacheable(false);\n         query.setFirstResult(firstResult);\n-        if(maxResult != -1) {\n+        if (maxResult != -1) {\n             query.setMaxResults(maxResult);\n         }\n         query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/26/PersonDAO.java\nindex 3bfc5444fef..6ffa7214387 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/26/PersonDAO.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.dao;\n \n import java.util.ArrayList;\n@@ -35,183 +36,185 @@ import org.zanata.model.HPerson;\n @RequestScoped\n public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n \n-    private static final long serialVersionUID = -7523118638634663058L;\n-\n-    public PersonDAO() {\n-        super(HPerson.class);\n+  private static final long serialVersionUID = -7523118638634663058L;\n+\n+  public PersonDAO() {\n+    super(HPerson.class);\n+  }\n+\n+  public PersonDAO(Session session) {\n+    super(HPerson.class, session);\n+  }\n+\n+  public HPerson findByEmail(String email) {\n+    return (HPerson) getSession().byNaturalId(HPerson.class)\n+      .using(\"email\", email).load();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<HLocale> getLanguageMembershipByUsername(String userName) {\n+    Query query =\n+      getSession()\n+        .createQuery(\n+          \"select m.id.supportedLanguage from HLocaleMember as m where m.id.person.account.username = :username\");\n+    query.setParameter(\"username\", userName);\n+    query.setCacheable(false);\n+    query.setComment(\"PersonDAO.getLanguageMembershipByUsername\");\n+    List<HLocale> re = new ArrayList<HLocale>();\n+    List<HLocale> su = query.list();\n+    for (HLocale lan : su) {\n+      if (lan.isActive()) {\n+        re.add(lan);\n+      }\n     }\n-\n-    public PersonDAO(Session session) {\n-        super(HPerson.class, session);\n+    return re;\n+  }\n+\n+  public HPerson findByUsername(String username) {\n+    Query query =\n+      getSession()\n+        .createQuery(\n+          \"from HPerson as p where p.account.username = :username\");\n+    query.setParameter(\"username\", username);\n+    query.setCacheable(false);\n+    query.setComment(\"PersonDAO.findByUsername\");\n+    return (HPerson) query.uniqueResult();\n+  }\n+\n+  public String findEmail(String username) {\n+    Query query =\n+      getSession()\n+        .createQuery(\n+          \"select p.email from HPerson as p where p.account.username = :username\");\n+    query.setParameter(\"username\", username);\n+    query.setCacheable(false);\n+    query.setComment(\"PersonDAO.findEmail\");\n+    return (String) query.uniqueResult();\n+\n+  }\n+\n+  public int findAllEnabledContainingNameSize(String name) {\n+    return findAllEnabledContainingName(name).size();\n+  }\n+\n+  public List<HPerson> findAllEnabledContainingName(String name) {\n+    return findAllEnabledContainingName(name, -1, 0);\n+  }\n+\n+  public List<HPerson> findAllEnabledContainingName(String name, int maxResult,\n+                                                    int firstResult) {\n+    if (StringUtils.isEmpty(name)) {\n+      return new ArrayList<>();\n     }\n-\n-    public HPerson findByEmail(String email) {\n-        return (HPerson) getSession().byNaturalId(HPerson.class)\n-                .using(\"email\", email).load();\n+    StringBuilder queryBuilder = new StringBuilder();\n+    queryBuilder.append(\"from HPerson as p \")\n+      .append(\"where p.account.enabled=true \")\n+      .append(\"and (lower(p.account.username) like :name \")\n+      .append(\"or lower(p.name) like lower(:name) escape '!')\");\n+    Query query = getSession().createQuery(queryBuilder.toString());\n+    String escapeName = escapeQuery(name);\n+    query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n+    query.setCacheable(false);\n+    query.setFirstResult(firstResult);\n+    if (maxResult != -1) {\n+      query.setMaxResults(maxResult);\n     }\n-\n+    query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n     @SuppressWarnings(\"unchecked\")\n-    public List<HLocale> getLanguageMembershipByUsername(String userName) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select m.id.supportedLanguage from HLocaleMember as m where m.id.person.account.username = :username\");\n-        query.setParameter(\"username\", userName);\n-        query.setCacheable(false);\n-        query.setComment(\"PersonDAO.getLanguageMembershipByUsername\");\n-        List<HLocale> re = new ArrayList<HLocale>();\n-        List<HLocale> su = query.list();\n-        for (HLocale lan : su) {\n-            if (lan.isActive()) {\n-                re.add(lan);\n-            }\n-        }\n-        return re;\n+    List<HPerson> results = query.list();\n+    return results;\n+  }\n+\n+  public int getTotalTranslator() {\n+    Query query =\n+      getSession()\n+        .createQuery(\n+          \"select count(distinct id.person) from HLocaleMember where isTranslator = :isTranslator\");\n+    query.setParameter(\"isTranslator\", true);\n+\n+    Long totalCount = (Long) query.uniqueResult();\n+    query.setCacheable(true).setComment(\"PersonDAO.getTotalTranslator\");\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    public HPerson findByUsername(String username) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"from HPerson as p where p.account.username = :username\");\n-        query.setParameter(\"username\", username);\n-        query.setCacheable(false);\n-        query.setComment(\"PersonDAO.findByUsername\");\n-        return (HPerson) query.uniqueResult();\n+    return totalCount.intValue();\n+  }\n+\n+  public int getTotalReviewer() {\n+    Query query =\n+      getSession()\n+        .createQuery(\n+          \"select count(distinct id.person) from HLocaleMember where isReviewer = :isReviewer\");\n+    query.setParameter(\"isReviewer\", true);\n+\n+    Long totalCount = (Long) query.uniqueResult();\n+    query.setCacheable(true).setComment(\"PersonDAO.getTotalReviewer\");\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    public String findEmail(String username) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select p.email from HPerson as p where p.account.username = :username\");\n-        query.setParameter(\"username\", username);\n-        query.setCacheable(false);\n-        query.setComment(\"PersonDAO.findEmail\");\n-        return (String) query.uniqueResult();\n-\n+    return totalCount.intValue();\n+  }\n+\n+  /**\n+   * Indicates if a Person is a member of a language team with selected roles.\n+   *\n+   * @param person\n+   * @param language\n+   * @param isTranslator\n+   * @param isReviewer\n+   * @param isCoordinator\n+   * @return True if person is a member of the language team with selected\n+   * roles.\n+   */\n+  public boolean isUserInLanguageTeamWithRoles(HPerson person,\n+                                               HLocale language, Boolean isTranslator, Boolean isReviewer,\n+                                               Boolean isCoordinator) {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"select count(*) from HLocaleMember where \");\n+    sb.append(\"id.person = :person \");\n+    sb.append(\"and id.supportedLanguage = :language \");\n+\n+    if (isTranslator != null) {\n+      sb.append(\"and isTranslator = :isTranslator \");\n     }\n-\n-    public int findAllEnabledContainingNameSize(String name) {\n-        return findAllEnabledContainingName(name).size();\n+    if (isReviewer != null) {\n+      sb.append(\"and isReviewer = :isReviewer \");\n     }\n-\n-    public List<HPerson> findAllEnabledContainingName(String name) {\n-        return findAllEnabledContainingName(name, -1, 0);\n+    if (isCoordinator != null) {\n+      sb.append(\"and isCoordinator = :isCoordinator \");\n     }\n \n-    public List<HPerson> findAllEnabledContainingName(String name, int maxResult,\n-        int firstResult) {\n-        if (StringUtils.isEmpty(name)) {\n-            return new ArrayList<>();\n-        }\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"from HPerson as p \")\n-                .append(\"where p.account.enabled=true \")\n-                .append(\"and (lower(p.account.username) like :name \")\n-                .append(\"or lower(p.name) like lower(:name) escape '!')\");\n-        Query query = getSession().createQuery(queryBuilder.toString());\n-        String escapeName = escapeQuery(name);\n-        query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n-        query.setCacheable(false);\n-        query.setFirstResult(firstResult);\n-        if(maxResult != -1) {\n-            query.setMaxResults(maxResult);\n-        }\n-        query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n-        @SuppressWarnings(\"unchecked\")\n-        List<HPerson> results = query.list();\n-        return results;\n-    }\n+    Query q =\n+      getSession().createQuery(sb.toString().trim())\n+        .setParameter(\"person\", person)\n+        .setParameter(\"language\", language);\n \n-    public int getTotalTranslator() {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(distinct id.person) from HLocaleMember where isTranslator = :isTranslator\");\n-        query.setParameter(\"isTranslator\", true);\n-\n-        Long totalCount = (Long) query.uniqueResult();\n-        query.setCacheable(true).setComment(\"PersonDAO.getTotalTranslator\");\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n+    if (isTranslator != null) {\n+      q.setParameter(\"isTranslator\", isTranslator);\n     }\n-\n-    public int getTotalReviewer() {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(distinct id.person) from HLocaleMember where isReviewer = :isReviewer\");\n-        query.setParameter(\"isReviewer\", true);\n-\n-        Long totalCount = (Long) query.uniqueResult();\n-        query.setCacheable(true).setComment(\"PersonDAO.getTotalReviewer\");\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n+    if (isReviewer != null) {\n+      q.setParameter(\"isReviewer\", isReviewer);\n     }\n-\n-    /**\n-     * Indicates if a Person is a member of a language team with selected roles.\n-     *\n-     * @param person\n-     * @param language\n-     * @param isTranslator\n-     * @param isReviewer\n-     * @param isCoordinator\n-     * @return True if person is a member of the language team with selected\n-     *         roles.\n-     */\n-    public boolean isUserInLanguageTeamWithRoles(HPerson person,\n-            HLocale language, Boolean isTranslator, Boolean isReviewer,\n-            Boolean isCoordinator) {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"select count(*) from HLocaleMember where \");\n-        sb.append(\"id.person = :person \");\n-        sb.append(\"and id.supportedLanguage = :language \");\n-\n-        if (isTranslator != null) {\n-            sb.append(\"and isTranslator = :isTranslator \");\n-        }\n-        if (isReviewer != null) {\n-            sb.append(\"and isReviewer = :isReviewer \");\n-        }\n-        if (isCoordinator != null) {\n-            sb.append(\"and isCoordinator = :isCoordinator \");\n-        }\n-\n-        Query q =\n-                getSession().createQuery(sb.toString().trim())\n-                        .setParameter(\"person\", person)\n-                        .setParameter(\"language\", language);\n-\n-        if (isTranslator != null) {\n-            q.setParameter(\"isTranslator\", isTranslator);\n-        }\n-        if (isReviewer != null) {\n-            q.setParameter(\"isReviewer\", isReviewer);\n-        }\n-        if (isCoordinator != null) {\n-            q.setParameter(\"isCoordinator\", isCoordinator);\n-        }\n-\n-        q.setCacheable(false).setComment(\n-                \"PersonDAO.isUserInLanguageTeamWithRoles\");\n-        Long totalCount = (Long) q.uniqueResult();\n-        return totalCount > 0L;\n+    if (isCoordinator != null) {\n+      q.setParameter(\"isCoordinator\", isCoordinator);\n     }\n \n-    public List<HLocaleMember> getAllLanguageTeamMemberships(HPerson person) {\n-        Query q =\n-                getSession().createQuery(\n-                        \"from HLocaleMember where id.person = :person\")\n-                        .setParameter(\"person\", person);\n-        q.setCacheable(false).setComment(\n-                \"PersonDAO.getAllLanguageTeamMemberships\");\n-        @SuppressWarnings(\"unchecked\")\n-        List<HLocaleMember> list = q.list();\n-        return list;\n-    }\n+    q.setCacheable(false).setComment(\n+      \"PersonDAO.isUserInLanguageTeamWithRoles\");\n+    Long totalCount = (Long) q.uniqueResult();\n+    return totalCount > 0L;\n+  }\n+\n+  public List<HLocaleMember> getAllLanguageTeamMemberships(HPerson person) {\n+    Query q =\n+      getSession().createQuery(\n+        \"from HLocaleMember where id.person = :person\")\n+        .setParameter(\"person\", person);\n+    q.setCacheable(false).setComment(\n+      \"PersonDAO.getAllLanguageTeamMemberships\");\n+    @SuppressWarnings(\"unchecked\")\n+    List<HLocaleMember> list = q.list();\n+    return list;\n+  }\n \n }\n",
            "diff_size": 256
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/26/PersonDAO.java\nindex 3bfc5444fef..ed5d664ecde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/26/PersonDAO.java\n@@ -102,7 +102,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n \n     public List<HPerson> findAllEnabledContainingName(String name, int maxResult,\n         int firstResult) {\n-        if (StringUtils.isEmpty(name)) {\n+    if (StringUtils.isEmpty(name)) {\n             return new ArrayList<>();\n         }\n         StringBuilder queryBuilder = new StringBuilder();\n@@ -115,7 +115,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n         query.setCacheable(false);\n         query.setFirstResult(firstResult);\n-        if(maxResult != -1) {\n+        if (maxResult != -1) {\n             query.setMaxResults(maxResult);\n         }\n         query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n@@ -214,4 +214,4 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         return list;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/26/PersonDAO.java\nindex 3bfc5444fef..9ed89e69def 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/26/PersonDAO.java\n@@ -22,19 +22,17 @@ package org.zanata.dao;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.hibernate.Query;\n import org.hibernate.Session;\n-\n import javax.enterprise.context.RequestScoped;\n import org.zanata.model.HLocale;\n import org.zanata.model.HLocaleMember;\n import org.zanata.model.HPerson;\n \n+\n @RequestScoped\n public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n-\n     private static final long serialVersionUID = -7523118638634663058L;\n \n     public PersonDAO() {\n@@ -46,16 +44,12 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n     }\n \n     public HPerson findByEmail(String email) {\n-        return (HPerson) getSession().byNaturalId(HPerson.class)\n-                .using(\"email\", email).load();\n+        return (HPerson) getSession().byNaturalId(HPerson.class).using(\"email\", email).load();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public List<HLocale> getLanguageMembershipByUsername(String userName) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select m.id.supportedLanguage from HLocaleMember as m where m.id.person.account.username = :username\");\n+        Query query = getSession().createQuery(\"select m.id.supportedLanguage from HLocaleMember as m where m.id.person.account.username = :username\");\n         query.setParameter(\"username\", userName);\n         query.setCacheable(false);\n         query.setComment(\"PersonDAO.getLanguageMembershipByUsername\");\n@@ -70,10 +64,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n     }\n \n     public HPerson findByUsername(String username) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"from HPerson as p where p.account.username = :username\");\n+        Query query = getSession().createQuery(\"from HPerson as p where p.account.username = :username\");\n         query.setParameter(\"username\", username);\n         query.setCacheable(false);\n         query.setComment(\"PersonDAO.findByUsername\");\n@@ -81,15 +72,11 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n     }\n \n     public String findEmail(String username) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select p.email from HPerson as p where p.account.username = :username\");\n+        Query query = getSession().createQuery(\"select p.email from HPerson as p where p.account.username = :username\");\n         query.setParameter(\"username\", username);\n         query.setCacheable(false);\n         query.setComment(\"PersonDAO.findEmail\");\n         return (String) query.uniqueResult();\n-\n     }\n \n     public int findAllEnabledContainingNameSize(String name) {\n@@ -100,22 +87,18 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         return findAllEnabledContainingName(name, -1, 0);\n     }\n \n-    public List<HPerson> findAllEnabledContainingName(String name, int maxResult,\n-        int firstResult) {\n+    public List<HPerson> findAllEnabledContainingName(String name, int maxResult, int firstResult) {\n         if (StringUtils.isEmpty(name)) {\n             return new ArrayList<>();\n         }\n         StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"from HPerson as p \")\n-                .append(\"where p.account.enabled=true \")\n-                .append(\"and (lower(p.account.username) like :name \")\n-                .append(\"or lower(p.name) like lower(:name) escape '!')\");\n+        queryBuilder.append(\"from HPerson as p \").append(\"where p.account.enabled=true \").append(\"and (lower(p.account.username) like :name \").append(\"or lower(p.name) like lower(:name) escape '!')\");\n         Query query = getSession().createQuery(queryBuilder.toString());\n         String escapeName = escapeQuery(name);\n         query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n         query.setCacheable(false);\n         query.setFirstResult(firstResult);\n-        if(maxResult != -1) {\n+        if (maxResult != -1) {\n             query.setMaxResults(maxResult);\n         }\n         query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n@@ -125,12 +108,8 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n     }\n \n     public int getTotalTranslator() {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(distinct id.person) from HLocaleMember where isTranslator = :isTranslator\");\n+        Query query = getSession().createQuery(\"select count(distinct id.person) from HLocaleMember where isTranslator = :isTranslator\");\n         query.setParameter(\"isTranslator\", true);\n-\n         Long totalCount = (Long) query.uniqueResult();\n         query.setCacheable(true).setComment(\"PersonDAO.getTotalTranslator\");\n         if (totalCount == null)\n@@ -139,12 +118,8 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n     }\n \n     public int getTotalReviewer() {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(distinct id.person) from HLocaleMember where isReviewer = :isReviewer\");\n+        Query query = getSession().createQuery(\"select count(distinct id.person) from HLocaleMember where isReviewer = :isReviewer\");\n         query.setParameter(\"isReviewer\", true);\n-\n         Long totalCount = (Long) query.uniqueResult();\n         query.setCacheable(true).setComment(\"PersonDAO.getTotalReviewer\");\n         if (totalCount == null)\n@@ -163,14 +138,15 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n      * @return True if person is a member of the language team with selected\n      *         roles.\n      */\n+\n     public boolean isUserInLanguageTeamWithRoles(HPerson person,\n-            HLocale language, Boolean isTranslator, Boolean isReviewer,\n-            Boolean isCoordinator) {\n+           HLocale language,\n+           Boolean isTranslator,\n+           Boolean isReviewer, Boolean isCoordinator) {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"select count(*) from HLocaleMember where \");\n         sb.append(\"id.person = :person \");\n         sb.append(\"and id.supportedLanguage = :language \");\n-\n         if (isTranslator != null) {\n             sb.append(\"and isTranslator = :isTranslator \");\n         }\n@@ -180,12 +156,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         if (isCoordinator != null) {\n             sb.append(\"and isCoordinator = :isCoordinator \");\n         }\n-\n-        Query q =\n-                getSession().createQuery(sb.toString().trim())\n-                        .setParameter(\"person\", person)\n-                        .setParameter(\"language\", language);\n-\n+        Query q = getSession().createQuery(sb.toString().trim()).setParameter(\"person\", person).setParameter(\"language\", language);\n         if (isTranslator != null) {\n             q.setParameter(\"isTranslator\", isTranslator);\n         }\n@@ -195,23 +166,16 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         if (isCoordinator != null) {\n             q.setParameter(\"isCoordinator\", isCoordinator);\n         }\n-\n-        q.setCacheable(false).setComment(\n-                \"PersonDAO.isUserInLanguageTeamWithRoles\");\n+        q.setCacheable(false).setComment(\"PersonDAO.isUserInLanguageTeamWithRoles\");\n         Long totalCount = (Long) q.uniqueResult();\n         return totalCount > 0L;\n     }\n \n     public List<HLocaleMember> getAllLanguageTeamMemberships(HPerson person) {\n-        Query q =\n-                getSession().createQuery(\n-                        \"from HLocaleMember where id.person = :person\")\n-                        .setParameter(\"person\", person);\n-        q.setCacheable(false).setComment(\n-                \"PersonDAO.getAllLanguageTeamMemberships\");\n+        Query q = getSession().createQuery(\"from HLocaleMember where id.person = :person\").setParameter(\"person\", person);\n+        q.setCacheable(false).setComment(\"PersonDAO.getAllLanguageTeamMemberships\");\n         @SuppressWarnings(\"unchecked\")\n         List<HLocaleMember> list = q.list();\n         return list;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/26/PersonDAO.java\nindex 3bfc5444fef..1659a53bc92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/26/PersonDAO.java\n@@ -115,7 +115,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n         query.setCacheable(false);\n         query.setFirstResult(firstResult);\n-        if(maxResult != -1) {\n+        if (maxResult != -1) {\n             query.setMaxResults(maxResult);\n         }\n         query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/26/PersonDAO.java\nindex 3bfc5444fef..1659a53bc92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/26/PersonDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/26/PersonDAO.java\n@@ -115,7 +115,7 @@ public class PersonDAO extends AbstractDAOImpl<HPerson, Long> {\n         query.setParameter(\"name\", \"%\" + escapeName + \"%\");\n         query.setCacheable(false);\n         query.setFirstResult(firstResult);\n-        if(maxResult != -1) {\n+        if (maxResult != -1) {\n             query.setMaxResults(maxResult);\n         }\n         query.setComment(\"PersonDAO.findAllEnabledContainingName\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}