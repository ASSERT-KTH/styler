{
    "project_name": "graphfoundation-ongdb",
    "error_id": "941",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "56",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/941/NodeDynamicLabelOrphanChainStartCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/941/NodeDynamicLabelOrphanChainStartCheck.java\nindex b18d2aa85f9..5d51e0ead32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/941/NodeDynamicLabelOrphanChainStartCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/941/NodeDynamicLabelOrphanChainStartCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.checking.full.FullCheck;\n@@ -31,64 +32,62 @@ import static org.neo4j.kernel.impl.store.NodeStore.readOwnerFromDynamicLabelsRe\n \n /**\n  * Used by {@link FullCheck} to verify orphanage for node dynamic label records.\n- *\n+ * <p>\n  * Actual list of labels is verified from {@link NodeRecordCheck}\n  */\n public class NodeDynamicLabelOrphanChainStartCheck\n-        implements RecordCheck<DynamicRecord, DynamicLabelConsistencyReport>,\n-        ComparativeRecordChecker<DynamicRecord, DynamicRecord, DynamicLabelConsistencyReport>\n+    implements RecordCheck<DynamicRecord, DynamicLabelConsistencyReport>,\n+    ComparativeRecordChecker<DynamicRecord, DynamicRecord, DynamicLabelConsistencyReport>\n {\n \n-    private static final\n-    ComparativeRecordChecker<DynamicRecord, NodeRecord, DynamicLabelConsistencyReport> VALID_NODE_RECORD =\n-            ( record, nodeRecord, engine, records ) ->\n-            {\n-                if ( ! nodeRecord.inUse() )\n-                {\n-                    // if this node record is not in use it is not a valid owner\n-                    engine.report().orphanDynamicLabelRecordDueToInvalidOwner( nodeRecord );\n-                }\n-                else\n-                {\n-                    // if this node record is in use but doesn't point to the dynamic label record\n-                    // that label record has an invalid owner\n-                    long recordId = record.getId();\n-                    if ( fieldPointsToDynamicRecordOfLabels( nodeRecord.getLabelField() ) )\n-                    {\n-                        long dynamicLabelRecordId = firstDynamicLabelRecordId( nodeRecord.getLabelField() );\n-                        if ( dynamicLabelRecordId != recordId )\n-                        {\n-                            engine.report().orphanDynamicLabelRecordDueToInvalidOwner( nodeRecord );\n-                        }\n-                    }\n-                }\n-            };\n-\n-    @Override\n-    public void check( DynamicRecord record,\n-                       CheckerEngine<DynamicRecord, DynamicLabelConsistencyReport> engine,\n-                       RecordAccess records )\n-    {\n-        if ( record.inUse() && record.isStartRecord() )\n+  private static final\n+  ComparativeRecordChecker<DynamicRecord, NodeRecord, DynamicLabelConsistencyReport> VALID_NODE_RECORD =\n+      (record, nodeRecord, engine, records) ->\n+      {\n+        if (!nodeRecord.inUse())\n         {\n-            Long ownerId = readOwnerFromDynamicLabelsRecord( record );\n-            if ( null == ownerId )\n-            {\n-                // no owner but in use indicates a broken record\n-                engine.report().orphanDynamicLabelRecord();\n-            }\n-            else\n+          // if this node record is not in use it is not a valid owner\n+          engine.report().orphanDynamicLabelRecordDueToInvalidOwner(nodeRecord);\n+        } else\n+        {\n+          // if this node record is in use but doesn't point to the dynamic label record\n+          // that label record has an invalid owner\n+          long recordId = record.getId();\n+          if (fieldPointsToDynamicRecordOfLabels(nodeRecord.getLabelField()))\n+          {\n+            long dynamicLabelRecordId = firstDynamicLabelRecordId(nodeRecord.getLabelField());\n+            if (dynamicLabelRecordId != recordId)\n             {\n-                // look at owning node record to verify consistency\n-                engine.comparativeCheck( records.node( ownerId ), VALID_NODE_RECORD );\n+              engine.report().orphanDynamicLabelRecordDueToInvalidOwner(nodeRecord);\n             }\n+          }\n         }\n-    }\n+      };\n \n-    @Override\n-    public void checkReference( DynamicRecord record, DynamicRecord record2,\n-                                CheckerEngine<DynamicRecord, DynamicLabelConsistencyReport> engine,\n-                                RecordAccess records )\n+  @Override\n+  public void check(DynamicRecord record,\n+                    CheckerEngine<DynamicRecord, DynamicLabelConsistencyReport> engine,\n+                    RecordAccess records)\n+  {\n+    if (record.inUse() && record.isStartRecord())\n     {\n+      Long ownerId = readOwnerFromDynamicLabelsRecord(record);\n+      if (null == ownerId)\n+      {\n+        // no owner but in use indicates a broken record\n+        engine.report().orphanDynamicLabelRecord();\n+      } else\n+      {\n+        // look at owning node record to verify consistency\n+        engine.comparativeCheck(records.node(ownerId), VALID_NODE_RECORD);\n+      }\n     }\n+  }\n+\n+  @Override\n+  public void checkReference(DynamicRecord record, DynamicRecord record2,\n+                             CheckerEngine<DynamicRecord, DynamicLabelConsistencyReport> engine,\n+                             RecordAccess records)\n+  {\n+  }\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/941/NodeDynamicLabelOrphanChainStartCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/941/NodeDynamicLabelOrphanChainStartCheck.java\nindex b18d2aa85f9..ef789e2f36c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/941/NodeDynamicLabelOrphanChainStartCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/941/NodeDynamicLabelOrphanChainStartCheck.java\n@@ -34,14 +34,9 @@ import static org.neo4j.kernel.impl.store.NodeStore.readOwnerFromDynamicLabelsRe\n  *\n  * Actual list of labels is verified from {@link NodeRecordCheck}\n  */\n-public class NodeDynamicLabelOrphanChainStartCheck\n-        implements RecordCheck<DynamicRecord, DynamicLabelConsistencyReport>,\n-        ComparativeRecordChecker<DynamicRecord, DynamicRecord, DynamicLabelConsistencyReport>\n+public class NodeDynamicLabelOrphanChainStartCheck implements RecordCheck<DynamicRecord, DynamicLabelConsistencyReport>, ComparativeRecordChecker<DynamicRecord, DynamicRecord, DynamicLabelConsistencyReport>\n {\n-\n-    private static final\n-    ComparativeRecordChecker<DynamicRecord, NodeRecord, DynamicLabelConsistencyReport> VALID_NODE_RECORD =\n-            ( record, nodeRecord, engine, records ) ->\n+    private static final ComparativeRecordChecker<DynamicRecord, NodeRecord, DynamicLabelConsistencyReport> VALID_NODE_RECORD = ( record, nodeRecord, engine, records ) ->\n             {\n                 if ( ! nodeRecord.inUse() )\n                 {\n@@ -64,11 +59,10 @@ public class NodeDynamicLabelOrphanChainStartCheck\n                 }\n             };\n \n-    @Override\n-    public void check( DynamicRecord record,\n-                       CheckerEngine<DynamicRecord, DynamicLabelConsistencyReport> engine,\n+@Override\n+    public void check( DynamicRecord record, CheckerEngine<DynamicRecord,DynamicLabelConsistencyReport> engine,\n                        RecordAccess records )\n-    {\n+{\n         if ( record.inUse() && record.isStartRecord() )\n         {\n             Long ownerId = readOwnerFromDynamicLabelsRecord( record );\n@@ -86,9 +80,8 @@ public class NodeDynamicLabelOrphanChainStartCheck\n     }\n \n     @Override\n-    public void checkReference( DynamicRecord record, DynamicRecord record2,\n-                                CheckerEngine<DynamicRecord, DynamicLabelConsistencyReport> engine,\n+    public void checkReference( DynamicRecord record, DynamicRecord record2, CheckerEngine<DynamicRecord,DynamicLabelConsistencyReport> engine,\n                                 RecordAccess records )\n-    {\n+{\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}