{
    "project_name": "apache-ignite-3",
    "error_id": "73",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "public final class BytecodeUtils {\n    private static final AtomicLong CLASS_ID = new AtomicLong();\n    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n\n    private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n        = Map.of(boolean.class, Boolean.class,",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/73/BytecodeUtils.java\nindex 66e6a8a0b8d..fe8a38133b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/73/BytecodeUtils.java\n@@ -26,6 +26,7 @@ import static java.time.ZoneOffset.UTC;\n \n public final class BytecodeUtils {\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n+\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n \n     private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/73/BytecodeUtils.java\nindex 66e6a8a0b8d..afc9c0bc60f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/73/BytecodeUtils.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode;\n \n import java.io.StringWriter;\n@@ -25,94 +26,96 @@ import org.jetbrains.annotations.Nullable;\n import static java.time.ZoneOffset.UTC;\n \n public final class BytecodeUtils {\n-    private static final AtomicLong CLASS_ID = new AtomicLong();\n-    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n-\n-    private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n-        = Map.of(boolean.class, Boolean.class,\n-        byte.class, Byte.class,\n-        char.class, Character.class,\n-        double.class, Double.class,\n-        float.class, Float.class,\n-        int.class, Integer.class,\n-        long.class, Long.class,\n-        short.class, Short.class,\n-        void.class, Void.class);\n-\n-    private BytecodeUtils() {\n-    }\n-\n-    public static ParameterizedType makeClassName(String baseName, Optional<String> suffix) {\n-        String className = baseName\n-            + \"_\" + suffix.orElseGet(() -> Instant.now().atZone(UTC).format(TIMESTAMP_FORMAT))\n-            + \"_\" + CLASS_ID.incrementAndGet();\n-        String javaClassName = toJavaIdentifierString(className);\n-        return ParameterizedType.typeFromJavaClassName(\"com.facebook.presto.$gen.\" + javaClassName);\n-    }\n-\n-    public static ParameterizedType makeClassName(String baseName) {\n-        return makeClassName(baseName, Optional.empty());\n+  private static final AtomicLong CLASS_ID = new AtomicLong();\n+\n+  private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n+\n+  private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n+      = Map.of(boolean.class, Boolean.class,\n+      byte.class, Byte.class,\n+      char.class, Character.class,\n+      double.class, Double.class,\n+      float.class, Float.class,\n+      int.class, Integer.class,\n+      long.class, Long.class,\n+      short.class, Short.class,\n+      void.class, Void.class);\n+\n+  private BytecodeUtils() {\n+  }\n+\n+  public static ParameterizedType makeClassName(String baseName, Optional<String> suffix) {\n+    String className = baseName\n+        + \"_\" + suffix.orElseGet(() -> Instant.now().atZone(UTC).format(TIMESTAMP_FORMAT))\n+        + \"_\" + CLASS_ID.incrementAndGet();\n+    String javaClassName = toJavaIdentifierString(className);\n+    return ParameterizedType.typeFromJavaClassName(\"com.facebook.presto.$gen.\" + javaClassName);\n+  }\n+\n+  public static ParameterizedType makeClassName(String baseName) {\n+    return makeClassName(baseName, Optional.empty());\n+  }\n+\n+  public static String toJavaIdentifierString(String className) {\n+    // replace invalid characters with '_'\n+    return className.codePoints().mapToObj(c -> Character.isJavaIdentifierPart(c) ? c : '_' & 0xFFFF)\n+        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n+  }\n+\n+  public static String dumpBytecodeTree(ClassDefinition classDefinition) {\n+    StringWriter writer = new StringWriter();\n+    new DumpBytecodeVisitor(writer).visitClass(classDefinition);\n+    return writer.toString();\n+  }\n+\n+  public static void checkArgument(boolean condition, String errMsg, Object... params) {\n+    if (!condition) {\n+      throw new IllegalArgumentException(String.format(errMsg, params));\n     }\n+  }\n \n-    public static String toJavaIdentifierString(String className) {\n-        // replace invalid characters with '_'\n-        return className.codePoints().mapToObj(c -> Character.isJavaIdentifierPart(c) ? c : '_' & 0xFFFF)\n-            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n+  public static void checkState(boolean expression, @Nullable Object errorMessage) {\n+    if (!expression) {\n+      throw new IllegalStateException(String.valueOf(errorMessage));\n     }\n-\n-    public static String dumpBytecodeTree(ClassDefinition classDefinition) {\n-        StringWriter writer = new StringWriter();\n-        new DumpBytecodeVisitor(writer).visitClass(classDefinition);\n-        return writer.toString();\n+  }\n+\n+  public static void checkState(\n+      boolean expression,\n+      @Nullable String errorMessageTemplate,\n+      Object... errorMessageArgs) {\n+    if (!expression) {\n+      throw new IllegalStateException(String.format(errorMessageTemplate, errorMessageArgs));\n     }\n+  }\n \n-    public static void checkArgument(boolean condition, String errMsg, Object... params) {\n-        if (!condition)\n-            throw new IllegalArgumentException(String.format(errMsg, params));\n-    }\n+  public static <T> Class<T> wrap(Class<T> c) {\n+    return c.isPrimitive() ? (Class<T>) PRIMITIVES_TO_WRAPPERS.get(c) : c;\n+  }\n \n-    public static void checkState(boolean expression, @Nullable Object errorMessage) {\n-        if (!expression) {\n-            throw new IllegalStateException(String.valueOf(errorMessage));\n-        }\n-    }\n+  public static String repeat(String string, int count) {\n+    Objects.requireNonNull(string); // eager for GWT.\n \n-    public static void checkState(\n-        boolean expression,\n-        @Nullable String errorMessageTemplate,\n-        Object... errorMessageArgs) {\n-        if (!expression) {\n-            throw new IllegalStateException(String.format(errorMessageTemplate, errorMessageArgs));\n-        }\n+    if (count <= 1) {\n+      checkArgument(count >= 0, \"invalid count: %s\", count);\n+      return (count == 0) ? \"\" : string;\n     }\n \n-    public static <T> Class<T> wrap(Class<T> c) {\n-        return c.isPrimitive() ? (Class<T>)PRIMITIVES_TO_WRAPPERS.get(c) : c;\n+    // IF YOU MODIFY THE CODE HERE, you must update StringsRepeatBenchmark\n+    final int len = string.length();\n+    final long longSize = (long) len * (long) count;\n+    final int size = (int) longSize;\n+    if (size != longSize) {\n+      throw new ArrayIndexOutOfBoundsException(\"Required array size too large: \" + longSize);\n     }\n \n-    public static String repeat(String string, int count) {\n-        Objects.requireNonNull(string); // eager for GWT.\n-\n-        if (count <= 1) {\n-            checkArgument(count >= 0, \"invalid count: %s\", count);\n-            return (count == 0) ? \"\" : string;\n-        }\n-\n-        // IF YOU MODIFY THE CODE HERE, you must update StringsRepeatBenchmark\n-        final int len = string.length();\n-        final long longSize = (long)len * (long)count;\n-        final int size = (int)longSize;\n-        if (size != longSize) {\n-            throw new ArrayIndexOutOfBoundsException(\"Required array size too large: \" + longSize);\n-        }\n-\n-        final char[] array = new char[size];\n-        string.getChars(0, len, array, 0);\n-        int n;\n-        for (n = len; n < size - n; n <<= 1) {\n-            System.arraycopy(array, 0, array, n, n);\n-        }\n-        System.arraycopy(array, 0, array, n, size - n);\n-        return new String(array);\n+    final char[] array = new char[size];\n+    string.getChars(0, len, array, 0);\n+    int n;\n+    for (n = len; n < size - n; n <<= 1) {\n+      System.arraycopy(array, 0, array, n, n);\n     }\n+    System.arraycopy(array, 0, array, n, size - n);\n+    return new String(array);\n+  }\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "33",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "42",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/73/BytecodeUtils.java\nindex 66e6a8a0b8d..093ee882a7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/73/BytecodeUtils.java\n@@ -24,29 +24,27 @@ import org.jetbrains.annotations.Nullable;\n \n import static java.time.ZoneOffset.UTC;\n \n+\n public final class BytecodeUtils {\n+\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n+\n+\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n \n-    private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n-        = Map.of(boolean.class, Boolean.class,\n-        byte.class, Byte.class,\n-        char.class, Character.class,\n-        double.class, Double.class,\n-        float.class, Float.class,\n-        int.class, Integer.class,\n-        long.class, Long.class,\n-        short.class, Short.class,\n-        void.class, Void.class);\n+\n+    private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS = Map.of(boolean.class, Boolean.class, byte.class, Byte.class, char.class, Character.class, double.class, Double.class, float.class, Float.class, int.class, Integer.class, long.class, Long.class, short.class, Short.class, void.class, Void.class);\n \n     private BytecodeUtils() {\n     }\n \n+\n     public static ParameterizedType makeClassName(String baseName, Optional<String> suffix) {\n-        String className = baseName\n-            + \"_\" + suffix.orElseGet(() -> Instant.now().atZone(UTC).format(TIMESTAMP_FORMAT))\n-            + \"_\" + CLASS_ID.incrementAndGet();\n+        String className = baseName + \"_\" + suffix.orElseGet(() -> Instant.now().atZone(UTC)\n+                                                                                .format(TIMESTAMP_FORMAT)) + \"_\" + CLASS_ID.incrementAndGet();\n+\n         String javaClassName = toJavaIdentifierString(className);\n+\n         return ParameterizedType.typeFromJavaClassName(\"com.facebook.presto.$gen.\" + javaClassName);\n     }\n \n@@ -57,12 +55,15 @@ public final class BytecodeUtils {\n     public static String toJavaIdentifierString(String className) {\n         // replace invalid characters with '_'\n         return className.codePoints().mapToObj(c -> Character.isJavaIdentifierPart(c) ? c : '_' & 0xFFFF)\n-            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n+                                     .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n+                                     .toString();\n     }\n \n     public static String dumpBytecodeTree(ClassDefinition classDefinition) {\n         StringWriter writer = new StringWriter();\n+\n         new DumpBytecodeVisitor(writer).visitClass(classDefinition);\n+\n         return writer.toString();\n     }\n \n@@ -79,8 +80,8 @@ public final class BytecodeUtils {\n \n     public static void checkState(\n         boolean expression,\n-        @Nullable String errorMessageTemplate,\n-        Object... errorMessageArgs) {\n+        @Nullable String errorMessageTemplate, Object... errorMessageArgs\n+    ) {\n         if (!expression) {\n             throw new IllegalStateException(String.format(errorMessageTemplate, errorMessageArgs));\n         }\n@@ -95,24 +96,32 @@ public final class BytecodeUtils {\n \n         if (count <= 1) {\n             checkArgument(count >= 0, \"invalid count: %s\", count);\n+\n             return (count == 0) ? \"\" : string;\n         }\n \n         // IF YOU MODIFY THE CODE HERE, you must update StringsRepeatBenchmark\n+\n         final int len = string.length();\n         final long longSize = (long)len * (long)count;\n         final int size = (int)longSize;\n+\n         if (size != longSize) {\n             throw new ArrayIndexOutOfBoundsException(\"Required array size too large: \" + longSize);\n         }\n \n         final char[] array = new char[size];\n+\n         string.getChars(0, len, array, 0);\n+\n         int n;\n-        for (n = len; n < size - n; n <<= 1) {\n+\n+        for ( n = len; n < size - n; n <<= 1) {\n             System.arraycopy(array, 0, array, n, n);\n         }\n+\n         System.arraycopy(array, 0, array, n, size - n);\n+\n         return new String(array);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/73/BytecodeUtils.java\nindex 66e6a8a0b8d..fe8a38133b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/73/BytecodeUtils.java\n@@ -26,6 +26,7 @@ import static java.time.ZoneOffset.UTC;\n \n public final class BytecodeUtils {\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n+\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n \n     private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/73/BytecodeUtils.java\nindex 66e6a8a0b8d..fe8a38133b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/73/BytecodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/73/BytecodeUtils.java\n@@ -26,6 +26,7 @@ import static java.time.ZoneOffset.UTC;\n \n public final class BytecodeUtils {\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n+\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\n \n     private static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}