{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1477",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "204",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "274",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1477/EigenvectorCentralityBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1477/EigenvectorCentralityBase.java\nindex 0d94dd60719..bfbdc856e75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1477/EigenvectorCentralityBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1477/EigenvectorCentralityBase.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.HashMap;\n@@ -36,354 +37,351 @@ import org.neo4j.graphdb.Relationship;\n  */\n public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n {\n-    protected final Direction relationDirection;\n-    protected final CostEvaluator<Double> costEvaluator;\n-    protected final Set<Relationship> relationshipSet;\n-    protected final double precision;\n-    protected Set<Node> nodeSet;\n-    protected boolean doneCalculation;\n-    protected Map<Node,Double> values;\n-    protected int totalIterations;\n-    protected int maxIterations = Integer.MAX_VALUE;\n+  protected final Direction relationDirection;\n+  protected final CostEvaluator<Double> costEvaluator;\n+  protected final Set<Relationship> relationshipSet;\n+  protected final double precision;\n+  protected Set<Node> nodeSet;\n+  protected boolean doneCalculation;\n+  protected Map<Node, Double> values;\n+  protected int totalIterations;\n+  protected int maxIterations = Integer.MAX_VALUE;\n \n-    /**\n-     * @param relationDirection\n-     *            The direction in which the paths should follow the\n-     *            relationships.\n-     * @param costEvaluator\n-     * @see CostEvaluator\n-     * @param nodeSet\n-     *            The set of nodes the calculation should be run on.\n-     * @param relationshipSet\n-     *            The set of relationships that should be processed.\n-     * @param precision\n-     *            Precision factor (ex. 0.01 for 1% error). Note that this is\n-     *            not the error from the correct values, but the amount of\n-     *            change tolerated in one iteration.\n-     */\n-    public EigenvectorCentralityBase( Direction relationDirection,\n-            CostEvaluator<Double> costEvaluator, Set<Node> nodeSet,\n-            Set<Relationship> relationshipSet, double precision )\n-    {\n-        this.relationDirection = relationDirection;\n-        this.costEvaluator = costEvaluator;\n-        this.nodeSet = nodeSet;\n-        this.relationshipSet = relationshipSet;\n-        this.precision = precision;\n-    }\n+  /**\n+   * @param relationDirection The direction in which the paths should follow the\n+   *                          relationships.\n+   * @param costEvaluator\n+   * @param nodeSet           The set of nodes the calculation should be run on.\n+   * @param relationshipSet   The set of relationships that should be processed.\n+   * @param precision         Precision factor (ex. 0.01 for 1% error). Note that this is\n+   *                          not the error from the correct values, but the amount of\n+   *                          change tolerated in one iteration.\n+   * @see CostEvaluator\n+   */\n+  public EigenvectorCentralityBase(Direction relationDirection,\n+                                   CostEvaluator<Double> costEvaluator, Set<Node> nodeSet,\n+                                   Set<Relationship> relationshipSet, double precision)\n+  {\n+    this.relationDirection = relationDirection;\n+    this.costEvaluator = costEvaluator;\n+    this.nodeSet = nodeSet;\n+    this.relationshipSet = relationshipSet;\n+    this.precision = precision;\n+  }\n \n-    /**\n-     * This can be used to retrieve the result for every node. Will return null\n-     * if the node is not contained in the node set initially given.\n-     * Will return {@link #DETACHED_VERTEX_CENTRALITY} for detached vertices. The calculation is\n-     * done the first time this method is run. Upon successive requests, the old\n-     * result is returned, unless the calculation is reset via {@link #reset()}\n-     * @param node to calculate centrality for\n-     * @return centrality for {@param node}\n-     */\n-    @Override\n-    public Double getCentrality( Node node )\n+  /**\n+   * This can be used to retrieve the result for every node. Will return null\n+   * if the node is not contained in the node set initially given.\n+   * Will return {@link #DETACHED_VERTEX_CENTRALITY} for detached vertices. The calculation is\n+   * done the first time this method is run. Upon successive requests, the old\n+   * result is returned, unless the calculation is reset via {@link #reset()}\n+   *\n+   * @param node to calculate centrality for\n+   * @return centrality for {@param node}\n+   */\n+  @Override\n+  public Double getCentrality(Node node)\n+  {\n+    if (!nodeSet.contains(node))\n     {\n-        if ( !nodeSet.contains( node ) )\n-        {\n-            return null;\n-        }\n-        if ( !node.hasRelationship() )\n-        {\n-            return DETACHED_VERTEX_CENTRALITY;\n-        }\n-        calculate();\n-        return values.get( node );\n+      return null;\n     }\n-\n-    /**\n-     * This resets the calculation if we for some reason would like to redo it.\n-     */\n-    @Override\n-    public void reset()\n+    if (!node.hasRelationship())\n     {\n-        doneCalculation = false;\n+      return DETACHED_VERTEX_CENTRALITY;\n     }\n+    calculate();\n+    return values.get(node);\n+  }\n \n-    /**\n-     * Internal calculate method that will do the calculation. This can however\n-     * be called externally to manually trigger the calculation.The calculation is\n-     * done the first time this method is run. Upon successive requests, the old\n-     * result is returned, unless the calculation is reset via {@link #reset()}\n-     */\n-    @Override\n-    public void calculate()\n-    {\n-        // Don't do it more than once\n-        if ( doneCalculation )\n-        {\n-            return;\n-        }\n-        doneCalculation = true;\n+  /**\n+   * This resets the calculation if we for some reason would like to redo it.\n+   */\n+  @Override\n+  public void reset()\n+  {\n+    doneCalculation = false;\n+  }\n \n-        runIterations( maxIterations );\n+  /**\n+   * Internal calculate method that will do the calculation. This can however\n+   * be called externally to manually trigger the calculation.The calculation is\n+   * done the first time this method is run. Upon successive requests, the old\n+   * result is returned, unless the calculation is reset via {@link #reset()}\n+   */\n+  @Override\n+  public void calculate()\n+  {\n+    // Don't do it more than once\n+    if (doneCalculation)\n+    {\n+      return;\n     }\n+    doneCalculation = true;\n \n-    /**\n-     * This runs a number of iterations in the computation and stops when enough\n-     * precision has been reached. A maximum number of iterations to perform is\n-     * supplied. NOTE: For maxNrIterations > 0 at least one iteration will be\n-     * run, regardless if good precision has already been reached or not. This\n-     * method also ignores the global limit defined by maxIterations.\n-     * @param maxNrIterations\n-     *            The maximum number of iterations to run.\n-     * @return the number of iterations performed. if this is lower than the\n-     *         given maxNrIterations the desired precision has been reached.\n-     */\n-    protected int runIterations( int maxNrIterations )\n-    {\n-        while ( true )\n-        {\n-            values = new HashMap<>();\n-            totalIterations = 0;\n+    runIterations(maxIterations);\n+  }\n \n-            // generate a random start vector\n-            Random random = new Random( System.currentTimeMillis() );\n-            for ( Node node : nodeSet )\n-            {\n-                values.put( node, random.nextDouble() );\n-            }\n-            normalize( values );\n+  /**\n+   * This runs a number of iterations in the computation and stops when enough\n+   * precision has been reached. A maximum number of iterations to perform is\n+   * supplied. NOTE: For maxNrIterations > 0 at least one iteration will be\n+   * run, regardless if good precision has already been reached or not. This\n+   * method also ignores the global limit defined by maxIterations.\n+   *\n+   * @param maxNrIterations The maximum number of iterations to run.\n+   * @return the number of iterations performed. if this is lower than the\n+   * given maxNrIterations the desired precision has been reached.\n+   */\n+  protected int runIterations(int maxNrIterations)\n+  {\n+    while (true)\n+    {\n+      values = new HashMap<>();\n+      totalIterations = 0;\n \n-            if ( maxNrIterations <= 0 )\n-            {\n-                return 0;\n-            }\n-            int localIterations = 0;\n+      // generate a random start vector\n+      Random random = new Random(System.currentTimeMillis());\n+      for (Node node : nodeSet)\n+      {\n+        values.put(node, random.nextDouble());\n+      }\n+      normalize(values);\n \n-            // Do iterations\n-            while ( localIterations < maxNrIterations )\n-            {\n-                Map<Node,Double> oldValues = values;\n-                localIterations += runInternalIteration();\n-                if ( timeToStop( oldValues, values ) )\n-                {\n-                    break;\n-                }\n-            }\n+      if (maxNrIterations <= 0)\n+      {\n+        return 0;\n+      }\n+      int localIterations = 0;\n \n-            // Check result\n-            if ( makeSureValueCorrespondsToMostSignificantEigenvector() )\n-            {\n-                return localIterations;\n-            }\n-            else\n-            {\n-                // Value has not converged to an eigenvector that corresponds to the highest eigenvalue.\n-                // Restart calculation.\n-            }\n+      // Do iterations\n+      while (localIterations < maxNrIterations)\n+      {\n+        Map<Node, Double> oldValues = values;\n+        localIterations += runInternalIteration();\n+        if (timeToStop(oldValues, values))\n+        {\n+          break;\n         }\n+      }\n+\n+      // Check result\n+      if (makeSureValueCorrespondsToMostSignificantEigenvector())\n+      {\n+        return localIterations;\n+      } else\n+      {\n+        // Value has not converged to an eigenvector that corresponds to the highest eigenvalue.\n+        // Restart calculation.\n+      }\n     }\n+  }\n \n-    private boolean makeSureValueCorrespondsToMostSignificantEigenvector()\n+  private boolean makeSureValueCorrespondsToMostSignificantEigenvector()\n+  {\n+    int sign = 0;\n+    int otherSign;\n+    Iterator<Node> iter = nodeSet.iterator();\n+    Node next;\n+    Double value;\n+    while (iter.hasNext())\n     {\n-        int sign = 0;\n-        int otherSign;\n-        Iterator<Node> iter = nodeSet.iterator();\n-        Node next;\n-        Double value;\n-        while ( iter.hasNext() )\n+      next = iter.next();\n+      value = values.get(next);\n+      if (value == null)\n+      {\n+        values.put(next, 0d);\n+        value = 0d;\n+      }\n+      otherSign = value < -precision ? -1 : value > precision ? 1 : 0;\n+      if (otherSign != 0)\n+      {\n+        if (sign == 0)\n         {\n-            next = iter.next();\n-            value = values.get( next );\n-            if ( value == null )\n-            {\n-                values.put( next, 0d );\n-                value = 0d;\n-            }\n-            otherSign = value < - precision ? -1 : value > precision ? 1 : 0;\n-            if ( otherSign != 0 )\n-            {\n-                if ( sign == 0 )\n-                {\n-                    sign = otherSign;\n-                }\n-                else\n-                {\n-                    if ( sign != otherSign )\n-                    {\n-                        return false;\n-                    }\n-                }\n-            }\n-        }\n-\n-        // If the first none zero value is negative (possibly the whole vector), negate\n-        // the whole vector\n-        if ( sign < 0 )\n+          sign = otherSign;\n+        } else\n         {\n-            for ( Node node : nodeSet )\n-            {\n-                values.put( node, -values.get( node ) );\n-            }\n+          if (sign != otherSign)\n+          {\n+            return false;\n+          }\n         }\n-        return true;\n+      }\n     }\n \n-    /**\n-     * Should run iteration and return the number of iterations made.\n-     * @return Number of iterations.\n-     */\n-    protected abstract int runInternalIteration();\n-\n-    /**\n-     * Loops over relationships in {@link #relationshipSet} and calls {@link #processRelationship} for each one.\n-     *\n-     * {@link #relationshipSet} can be viewed as an adjacency matrix, A, and {@link #values} can be viewed as an\n-     * arbitrary vector, x. In that case this process simulates a matrix-vector multiplication Ax.\n-     *\n-     * Result is returned as a {@link Map<Node,Double>}.\n-     */\n-    public Map<Node,Double> processRelationships()\n+    // If the first none zero value is negative (possibly the whole vector), negate\n+    // the whole vector\n+    if (sign < 0)\n     {\n-        Map<Node,Double> newValues = new HashMap<>();\n-        for ( Relationship relationship : relationshipSet )\n-        {\n-            if ( relationDirection.equals( Direction.BOTH )\n-                 || relationDirection.equals( Direction.OUTGOING ) )\n-            {\n-                processRelationship( newValues, relationship, false );\n-            }\n-            if ( relationDirection.equals( Direction.BOTH )\n-                 || relationDirection.equals( Direction.INCOMING ) )\n-            {\n-                processRelationship( newValues, relationship, true );\n-            }\n-        }\n-        return newValues;\n+      for (Node node : nodeSet)\n+      {\n+        values.put(node, -values.get(node));\n+      }\n     }\n+    return true;\n+  }\n+\n+  /**\n+   * Should run iteration and return the number of iterations made.\n+   *\n+   * @return Number of iterations.\n+   */\n+  protected abstract int runInternalIteration();\n \n-    /**\n-     * Internal method used in the \"matrix multiplication\" in each iteration.\n-     */\n-    protected void processRelationship( Map<Node,Double> newValues,\n-            Relationship relationship, boolean backwards )\n+  /**\n+   * Loops over relationships in {@link #relationshipSet} and calls {@link #processRelationship} for each one.\n+   * <p>\n+   * {@link #relationshipSet} can be viewed as an adjacency matrix, A, and {@link #values} can be viewed as an\n+   * arbitrary vector, x. In that case this process simulates a matrix-vector multiplication Ax.\n+   * <p>\n+   * Result is returned as a {@link Map<Node,Double>}.\n+   */\n+  public Map<Node, Double> processRelationships()\n+  {\n+    Map<Node, Double> newValues = new HashMap<>();\n+    for (Relationship relationship : relationshipSet)\n     {\n-        Node startNode;\n-        if ( backwards )\n-        {\n-            startNode = relationship.getEndNode();\n-        }\n-        else\n-        {\n-            startNode = relationship.getStartNode();\n-        }\n-        Node endNode = relationship.getOtherNode( startNode );\n-        Double newValue = newValues.get( endNode );\n-        if ( newValue == null )\n-        {\n-            newValue = 0.0;\n-        }\n-        if ( values.get( startNode ) != null )\n-        {\n-            newValue += values.get( startNode )\n-                        * costEvaluator.getCost( relationship,\n-                    backwards ? Direction.INCOMING\n-                              : Direction.OUTGOING );\n-        }\n-        newValues.put( endNode, newValue );\n+      if (relationDirection.equals(Direction.BOTH)\n+          || relationDirection.equals(Direction.OUTGOING))\n+      {\n+        processRelationship(newValues, relationship, false);\n+      }\n+      if (relationDirection.equals(Direction.BOTH)\n+          || relationDirection.equals(Direction.INCOMING))\n+      {\n+        processRelationship(newValues, relationship, true);\n+      }\n     }\n+    return newValues;\n+  }\n \n-    /**\n-     * Normalizes a vector represented as a Map.\n-     * @param vector\n-     * @return the initial length of the vector.\n-     */\n-    protected double normalize( Map<Node,Double> vector )\n+  /**\n+   * Internal method used in the \"matrix multiplication\" in each iteration.\n+   */\n+  protected void processRelationship(Map<Node, Double> newValues,\n+                                     Relationship relationship, boolean backwards)\n+  {\n+    Node startNode;\n+    if (backwards)\n     {\n-        // Compute vector length\n-        double sum = 0;\n-        for ( Node node : vector.keySet() )\n-        {\n-            Double d = vector.get( node );\n-            if ( d == null )\n-            {\n-                d = 0.0;\n-                vector.put( node, 0.0 );\n-            }\n-            sum += d * d;\n-        }\n-        sum = Math.sqrt( sum );\n-        // Divide all components\n-        if ( sum > 0.0 )\n-        {\n-            for ( Node node : vector.keySet() )\n-            {\n-                vector.put( node, vector.get( node ) / sum );\n-            }\n-        }\n-        return sum;\n+      startNode = relationship.getEndNode();\n+    } else\n+    {\n+      startNode = relationship.getStartNode();\n     }\n-\n-    /**\n-     * Stop condition for the iteration.\n-     * @return true if enough precision has been achieved.\n-     */\n-    private boolean timeToStop( Map<Node,Double> oldValues,\n-            Map<Node,Double> newValues )\n+    Node endNode = relationship.getOtherNode(startNode);\n+    Double newValue = newValues.get(endNode);\n+    if (newValue == null)\n     {\n-        for ( Node node : oldValues.keySet() )\n-        {\n-            if ( newValues.get( node ) == null )\n-            {\n-                return false;\n-            }\n-            if ( oldValues.get( node ) == 0.0 )\n-            {\n-                if ( Math.abs( newValues.get( node ) ) > precision )\n-                {\n-                    return false;\n-                }\n-                continue;\n-            }\n-            double factor = newValues.get( node ) / oldValues.get( node );\n-            factor = Math.abs( factor );\n-            if ( factor - precision > 1.0 || factor + precision < 1.0 )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      newValue = 0.0;\n     }\n-\n-    /**\n-     * Increment the total number of iterations. Used by subclasses.\n-     */\n-    protected void incrementTotalIterations()\n+    if (values.get(startNode) != null)\n     {\n-        totalIterations++;\n+      newValue += values.get(startNode)\n+          * costEvaluator.getCost(relationship,\n+          backwards ? Direction.INCOMING\n+              : Direction.OUTGOING);\n     }\n+    newValues.put(endNode, newValue);\n+  }\n \n-    /**\n-     * @return the number of iterations made.\n-     */\n-    public int getTotalIterations()\n+  /**\n+   * Normalizes a vector represented as a Map.\n+   *\n+   * @param vector\n+   * @return the initial length of the vector.\n+   */\n+  protected double normalize(Map<Node, Double> vector)\n+  {\n+    // Compute vector length\n+    double sum = 0;\n+    for (Node node : vector.keySet())\n     {\n-        return totalIterations;\n+      Double d = vector.get(node);\n+      if (d == null)\n+      {\n+        d = 0.0;\n+        vector.put(node, 0.0);\n+      }\n+      sum += d * d;\n     }\n-\n-    /**\n-     * @return the maxIterations\n-     */\n-    public int getMaxIterations()\n+    sum = Math.sqrt(sum);\n+    // Divide all components\n+    if (sum > 0.0)\n     {\n-        return maxIterations;\n+      for (Node node : vector.keySet())\n+      {\n+        vector.put(node, vector.get(node) / sum);\n+      }\n     }\n+    return sum;\n+  }\n \n-    /**\n-     * Limit the maximum number of iterations to run. Per default,\n-     * the maximum iterations are set to Integer.MAX_VALUE, which should\n-     * be limited to 50-100 normally.\n-     * @param maxIterations\n-     *            the maxIterations to set\n-     */\n-    public void setMaxIterations( int maxIterations )\n+  /**\n+   * Stop condition for the iteration.\n+   *\n+   * @return true if enough precision has been achieved.\n+   */\n+  private boolean timeToStop(Map<Node, Double> oldValues,\n+                             Map<Node, Double> newValues)\n+  {\n+    for (Node node : oldValues.keySet())\n     {\n-        this.maxIterations = maxIterations;\n+      if (newValues.get(node) == null)\n+      {\n+        return false;\n+      }\n+      if (oldValues.get(node) == 0.0)\n+      {\n+        if (Math.abs(newValues.get(node)) > precision)\n+        {\n+          return false;\n+        }\n+        continue;\n+      }\n+      double factor = newValues.get(node) / oldValues.get(node);\n+      factor = Math.abs(factor);\n+      if (factor - precision > 1.0 || factor + precision < 1.0)\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n+\n+  /**\n+   * Increment the total number of iterations. Used by subclasses.\n+   */\n+  protected void incrementTotalIterations()\n+  {\n+    totalIterations++;\n+  }\n+\n+  /**\n+   * @return the number of iterations made.\n+   */\n+  public int getTotalIterations()\n+  {\n+    return totalIterations;\n+  }\n+\n+  /**\n+   * @return the maxIterations\n+   */\n+  public int getMaxIterations()\n+  {\n+    return maxIterations;\n+  }\n+\n+  /**\n+   * Limit the maximum number of iterations to run. Per default,\n+   * the maximum iterations are set to Integer.MAX_VALUE, which should\n+   * be limited to 50-100 normally.\n+   *\n+   * @param maxIterations the maxIterations to set\n+   */\n+  public void setMaxIterations(int maxIterations)\n+  {\n+    this.maxIterations = maxIterations;\n+  }\n }\n",
            "diff_size": 462
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "column": "45",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "249",
                    "column": "60",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "254",
                    "column": "48",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "287",
                    "column": "48",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "287",
                    "column": "117",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1477/EigenvectorCentralityBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1477/EigenvectorCentralityBase.java\nindex 0d94dd60719..5b8f12b0ec6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1477/EigenvectorCentralityBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1477/EigenvectorCentralityBase.java\n@@ -61,9 +61,7 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n      *            not the error from the correct values, but the amount of\n      *            change tolerated in one iteration.\n      */\n-    public EigenvectorCentralityBase( Direction relationDirection,\n-            CostEvaluator<Double> costEvaluator, Set<Node> nodeSet,\n-            Set<Relationship> relationshipSet, double precision )\n+    public EigenvectorCentralityBase( Direction relationDirection, CostEvaluator<Double> costEvaluator, Set<Node> nodeSet, Set<Relationship> relationshipSet, double precision )\n     {\n         this.relationDirection = relationDirection;\n         this.costEvaluator = costEvaluator;\n@@ -88,11 +86,13 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n         {\n             return null;\n         }\n-        if ( !node.hasRelationship() )\n+\n+if ( !node.hasRelationship() )\n         {\n             return DETACHED_VERTEX_CENTRALITY;\n         }\n-        calculate();\n+\n+calculate();\n         return values.get( node );\n     }\n \n@@ -119,7 +119,8 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n         {\n             return;\n         }\n-        doneCalculation = true;\n+\n+doneCalculation = true;\n \n         runIterations( maxIterations );\n     }\n@@ -148,9 +149,9 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n             {\n                 values.put( node, random.nextDouble() );\n             }\n-            normalize( values );\n \n-            if ( maxNrIterations <= 0 )\n+normalize( values );\n+if ( maxNrIterations <= 0 )\n             {\n                 return 0;\n             }\n@@ -196,7 +197,8 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n                 values.put( next, 0d );\n                 value = 0d;\n             }\n-            otherSign = value < - precision ? -1 : value > precision ? 1 : 0;\n+\n+otherSign = value < - precision ? -1 : value> precision ? 1 : 0;\n             if ( otherSign != 0 )\n             {\n                 if ( sign == 0 )\n@@ -244,14 +246,13 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n         Map<Node,Double> newValues = new HashMap<>();\n         for ( Relationship relationship : relationshipSet )\n         {\n-            if ( relationDirection.equals( Direction.BOTH )\n-                 || relationDirection.equals( Direction.OUTGOING ) )\n-            {\n+            if ( relationDirection.equals( Direction.BOTH )|| relationDirection.equals( Direction.OUTGOING ) )\n+{\n                 processRelationship( newValues, relationship, false );\n             }\n-            if ( relationDirection.equals( Direction.BOTH )\n-                 || relationDirection.equals( Direction.INCOMING ) )\n-            {\n+\n+if ( relationDirection.equals( Direction.BOTH )|| relationDirection.equals( Direction.INCOMING ) )\n+{\n                 processRelationship( newValues, relationship, true );\n             }\n         }\n@@ -273,19 +274,18 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n         {\n             startNode = relationship.getStartNode();\n         }\n-        Node endNode = relationship.getOtherNode( startNode );\n+\n+Node endNode = relationship.getOtherNode( startNode );\n         Double newValue = newValues.get( endNode );\n         if ( newValue == null )\n         {\n             newValue = 0.0;\n         }\n-        if ( values.get( startNode ) != null )\n+\n+if ( values.get( startNode ) != null )\n         {\n-            newValue += values.get( startNode )\n-                        * costEvaluator.getCost( relationship,\n-                    backwards ? Direction.INCOMING\n-                              : Direction.OUTGOING );\n-        }\n+            newValue += values.get( startNode )* costEvaluator.getCost( relationship, backwards ? Direction.INCOMING: Direction.OUTGOING );\n+    }\n         newValues.put( endNode, newValue );\n     }\n \n@@ -306,9 +306,11 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n                 d = 0.0;\n                 vector.put( node, 0.0 );\n             }\n-            sum += d * d;\n+\n+sum += d * d;\n         }\n-        sum = Math.sqrt( sum );\n+\n+sum = Math.sqrt( sum );\n         // Divide all components\n         if ( sum > 0.0 )\n         {\n@@ -324,8 +326,7 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n      * Stop condition for the iteration.\n      * @return true if enough precision has been achieved.\n      */\n-    private boolean timeToStop( Map<Node,Double> oldValues,\n-            Map<Node,Double> newValues )\n+    private boolean timeToStop( Map<Node,Double> oldValues, Map<Node,Double> newValues )\n     {\n         for ( Node node : oldValues.keySet() )\n         {\n@@ -333,7 +334,8 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n             {\n                 return false;\n             }\n-            if ( oldValues.get( node ) == 0.0 )\n+\n+if ( oldValues.get( node ) == 0.0 )\n             {\n                 if ( Math.abs( newValues.get( node ) ) > precision )\n                 {\n@@ -386,4 +388,4 @@ public abstract class EigenvectorCentralityBase implements EigenvectorCentrality\n     {\n         this.maxIterations = maxIterations;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}