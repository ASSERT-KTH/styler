{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4472",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4472/GetRoutersForDatabaseProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4472/GetRoutersForDatabaseProcedure.java\nindex a7742be0f64..9a1ac7bc911 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4472/GetRoutersForDatabaseProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4472/GetRoutersForDatabaseProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.routing.multi_cluster.procedure;\n \n import java.util.HashMap;\n@@ -48,50 +49,50 @@ import static org.neo4j.internal.kernel.api.procs.ProcedureSignature.procedureSi\n \n public class GetRoutersForDatabaseProcedure implements CallableProcedure\n {\n-    private static final String DESCRIPTION = \"Returns router capable endpoints for a specific database in a multi-cluster.\";\n+  private static final String DESCRIPTION = \"Returns router capable endpoints for a specific database in a multi-cluster.\";\n \n-    private final ProcedureSignature procedureSignature =\n-            procedureSignature( GET_ROUTERS_FOR_DATABASE.fullyQualifiedProcedureName() )\n-                    .in( DATABASE.parameterName(), Neo4jTypes.NTString )\n-                    .out( TTL.parameterName(), Neo4jTypes.NTInteger )\n-                    .out( ROUTERS.parameterName(), Neo4jTypes.NTList( Neo4jTypes.NTMap ) )\n-                    .description( DESCRIPTION )\n-                    .build();\n+  private final ProcedureSignature procedureSignature =\n+      procedureSignature(GET_ROUTERS_FOR_DATABASE.fullyQualifiedProcedureName())\n+          .in(DATABASE.parameterName(), Neo4jTypes.NTString)\n+          .out(TTL.parameterName(), Neo4jTypes.NTInteger)\n+          .out(ROUTERS.parameterName(), Neo4jTypes.NTList(Neo4jTypes.NTMap))\n+          .description(DESCRIPTION)\n+          .build();\n \n-    private final TopologyService topologyService;\n-    private final long timeToLiveMillis;\n+  private final TopologyService topologyService;\n+  private final long timeToLiveMillis;\n \n-    public GetRoutersForDatabaseProcedure( TopologyService topologyService, Config config )\n-    {\n-        this.topologyService = topologyService;\n-        this.timeToLiveMillis = config.get( CausalClusteringSettings.cluster_routing_ttl ).toMillis();\n-    }\n+  public GetRoutersForDatabaseProcedure(TopologyService topologyService, Config config)\n+  {\n+    this.topologyService = topologyService;\n+    this.timeToLiveMillis = config.get(CausalClusteringSettings.cluster_routing_ttl).toMillis();\n+  }\n \n-    @Override\n-    public ProcedureSignature signature()\n-    {\n-        return procedureSignature;\n-    }\n+  @Override\n+  public ProcedureSignature signature()\n+  {\n+    return procedureSignature;\n+  }\n \n-    @Override\n-    public RawIterator<Object[],ProcedureException> apply( Context ctx, Object[] input, ResourceTracker resourceTracker ) throws ProcedureException\n-    {\n-        @SuppressWarnings( \"unchecked\" )\n-        String dbName = (String) input[0];\n-        List<Endpoint> routers = routeEndpoints( dbName );\n+  @Override\n+  public RawIterator<Object[], ProcedureException> apply(Context ctx, Object[] input, ResourceTracker resourceTracker) throws ProcedureException\n+  {\n+    @SuppressWarnings(\"unchecked\")\n+    String dbName = (String) input[0];\n+    List<Endpoint> routers = routeEndpoints(dbName);\n \n-        HashMap<String,List<Endpoint>> routerMap = new HashMap<>();\n-        routerMap.put( dbName, routers );\n+    HashMap<String, List<Endpoint>> routerMap = new HashMap<>();\n+    routerMap.put(dbName, routers);\n \n-        MultiClusterRoutingResult result = new MultiClusterRoutingResult( routerMap, timeToLiveMillis );\n-        return RawIterator.<Object[], ProcedureException>of( MultiClusterRoutingResultFormat.build( result ) );\n-    }\n+    MultiClusterRoutingResult result = new MultiClusterRoutingResult(routerMap, timeToLiveMillis);\n+    return RawIterator.<Object[], ProcedureException>of(MultiClusterRoutingResultFormat.build(result));\n+  }\n \n-    private List<Endpoint> routeEndpoints( String dbName )\n-    {\n-        CoreTopology filtered = topologyService.allCoreServers().filterTopologyByDb( dbName );\n-        Stream<CoreServerInfo> filteredCoreMemberInfo = filtered.members().values().stream();\n+  private List<Endpoint> routeEndpoints(String dbName)\n+  {\n+    CoreTopology filtered = topologyService.allCoreServers().filterTopologyByDb(dbName);\n+    Stream<CoreServerInfo> filteredCoreMemberInfo = filtered.members().values().stream();\n \n-        return filteredCoreMemberInfo.map( extractBoltAddress() ).map( Endpoint::route ).collect( Collectors.toList() );\n-    }\n+    return filteredCoreMemberInfo.map(extractBoltAddress()).map(Endpoint::route).collect(Collectors.toList());\n+  }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 328).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "column": "57",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4472/GetRoutersForDatabaseProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4472/GetRoutersForDatabaseProcedure.java\nindex a7742be0f64..f7075296370 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4472/GetRoutersForDatabaseProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4472/GetRoutersForDatabaseProcedure.java\n@@ -49,16 +49,9 @@ import static org.neo4j.internal.kernel.api.procs.ProcedureSignature.procedureSi\n public class GetRoutersForDatabaseProcedure implements CallableProcedure\n {\n     private static final String DESCRIPTION = \"Returns router capable endpoints for a specific database in a multi-cluster.\";\n-\n-    private final ProcedureSignature procedureSignature =\n-            procedureSignature( GET_ROUTERS_FOR_DATABASE.fullyQualifiedProcedureName() )\n-                    .in( DATABASE.parameterName(), Neo4jTypes.NTString )\n-                    .out( TTL.parameterName(), Neo4jTypes.NTInteger )\n-                    .out( ROUTERS.parameterName(), Neo4jTypes.NTList( Neo4jTypes.NTMap ) )\n-                    .description( DESCRIPTION )\n+private final ProcedureSignature procedureSignature = procedureSignature( GET_ROUTERS_FOR_DATABASE.fullyQualifiedProcedureName() ).in( DATABASE.parameterName(), Neo4jTypes.NTString ).out( TTL.parameterName(), Neo4jTypes.NTInteger ).out( ROUTERS.parameterName(), Neo4jTypes.NTList( Neo4jTypes.NTMap ) ).description( DESCRIPTION )\n                     .build();\n-\n-    private final TopologyService topologyService;\n+private final TopologyService topologyService;\n     private final long timeToLiveMillis;\n \n     public GetRoutersForDatabaseProcedure( TopologyService topologyService, Config config )\n@@ -82,16 +75,14 @@ public class GetRoutersForDatabaseProcedure implements CallableProcedure\n \n         HashMap<String,List<Endpoint>> routerMap = new HashMap<>();\n         routerMap.put( dbName, routers );\n-\n-        MultiClusterRoutingResult result = new MultiClusterRoutingResult( routerMap, timeToLiveMillis );\n-        return RawIterator.<Object[], ProcedureException>of( MultiClusterRoutingResultFormat.build( result ) );\n+MultiClusterRoutingResult result = new MultiClusterRoutingResult( routerMap, timeToLiveMillis );\n+        return RawIterator.<Object[], ProcedureException> of( MultiClusterRoutingResultFormat.build( result ) );\n     }\n \n     private List<Endpoint> routeEndpoints( String dbName )\n     {\n         CoreTopology filtered = topologyService.allCoreServers().filterTopologyByDb( dbName );\n         Stream<CoreServerInfo> filteredCoreMemberInfo = filtered.members().values().stream();\n-\n-        return filteredCoreMemberInfo.map( extractBoltAddress() ).map( Endpoint::route ).collect( Collectors.toList() );\n+return filteredCoreMemberInfo.map( extractBoltAddress() ).map( Endpoint::route ).collect( Collectors.toList() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}