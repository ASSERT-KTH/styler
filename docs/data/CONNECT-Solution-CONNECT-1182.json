{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1182",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.event.builder;\n\nimport com.google.common.base.Function;\nimport com.google.common.base.Optional;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1182/PayloadSizeExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1182/PayloadSizeExtractor.java\nindex a064b1a1b97..e1f4bdd603c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1182/PayloadSizeExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1182/PayloadSizeExtractor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event.builder;\n \n import com.google.common.base.Function;\n@@ -38,28 +39,27 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * Extracts the payload size off an Extrinsic Object.\n- *\n+ * <p>\n  * ExtrinsicObject/Slot[@name=size]/ValueList/Value[0]\n- *\n  */\n public class PayloadSizeExtractor implements Function<JAXBElement<? extends IdentifiableType>, Optional<String>> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PayloadSizeExtractor.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(PayloadSizeExtractor.class);\n \n-    @Override\n-    public Optional<String> apply(JAXBElement<? extends IdentifiableType> jaxbElement) {\n-        Optional<String> payloadSize = Optional.absent();\n+  @Override\n+  public Optional<String> apply(JAXBElement<? extends IdentifiableType> jaxbElement) {\n+    Optional<String> payloadSize = Optional.absent();\n \n-        IdentifiableType value = jaxbElement.getValue();\n-        if (value instanceof ExtrinsicObjectType) {\n-            ExtrinsicObjectType extrinsicObjectType = (ExtrinsicObjectType) value;\n-            payloadSize = JaxbDocumentUtils.findSlotType(extrinsicObjectType.getSlot(),\n-                    DocumentConstants.EBXML_RESPONSE_SIZE_SLOTNAME);\n-        } else {\n-            LOG.warn(\"Passed in element has an unexpected type.  Expecting ExtrinsicObjectType.  Returning as absent.\");\n-        }\n-\n-        return payloadSize;\n+    IdentifiableType value = jaxbElement.getValue();\n+    if (value instanceof ExtrinsicObjectType) {\n+      ExtrinsicObjectType extrinsicObjectType = (ExtrinsicObjectType) value;\n+      payloadSize = JaxbDocumentUtils.findSlotType(extrinsicObjectType.getSlot(),\n+          DocumentConstants.EBXML_RESPONSE_SIZE_SLOTNAME);\n+    } else {\n+      LOG.warn(\"Passed in element has an unexpected type.  Expecting ExtrinsicObjectType.  Returning as absent.\");\n     }\n \n+    return payloadSize;\n+  }\n+\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1182/PayloadSizeExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1182/PayloadSizeExtractor.java\nindex a064b1a1b97..e2a1e633d57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1182/PayloadSizeExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1182/PayloadSizeExtractor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event.builder;\n \n import com.google.common.base.Function;\n@@ -53,13 +54,12 @@ public class PayloadSizeExtractor implements Function<JAXBElement<? extends Iden\n         IdentifiableType value = jaxbElement.getValue();\n         if (value instanceof ExtrinsicObjectType) {\n             ExtrinsicObjectType extrinsicObjectType = (ExtrinsicObjectType) value;\n-            payloadSize = JaxbDocumentUtils.findSlotType(extrinsicObjectType.getSlot(),\n-                    DocumentConstants.EBXML_RESPONSE_SIZE_SLOTNAME);\n-        } else {\n+            payloadSize = JaxbDocumentUtils.findSlotType(extrinsicObjectType.getSlot(), DocumentConstants.EBXML_RESPONSE_SIZE_SLOTNAME);\n+    } else {\n             LOG.warn(\"Passed in element has an unexpected type.  Expecting ExtrinsicObjectType.  Returning as absent.\");\n         }\n \n         return payloadSize;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1182/PayloadSizeExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1182/PayloadSizeExtractor.java\nindex a064b1a1b97..d4d8bf5760c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1182/PayloadSizeExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1182/PayloadSizeExtractor.java\n@@ -42,24 +42,28 @@ import org.slf4j.LoggerFactory;\n  * ExtrinsicObject/Slot[@name=size]/ValueList/Value[0]\n  *\n  */\n+\n+\n public class PayloadSizeExtractor implements Function<JAXBElement<? extends IdentifiableType>, Optional<String>> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PayloadSizeExtractor.class);\n \n+\n     @Override\n     public Optional<String> apply(JAXBElement<? extends IdentifiableType> jaxbElement) {\n         Optional<String> payloadSize = Optional.absent();\n-\n         IdentifiableType value = jaxbElement.getValue();\n-        if (value instanceof ExtrinsicObjectType) {\n-            ExtrinsicObjectType extrinsicObjectType = (ExtrinsicObjectType) value;\n-            payloadSize = JaxbDocumentUtils.findSlotType(extrinsicObjectType.getSlot(),\n-                    DocumentConstants.EBXML_RESPONSE_SIZE_SLOTNAME);\n-        } else {\n-            LOG.warn(\"Passed in element has an unexpected type.  Expecting ExtrinsicObjectType.  Returning as absent.\");\n+        if(value instanceof ExtrinsicObjectType) {\n+            ExtrinsicObjectType extrinsicObjectType = (ExtrinsicObjectType)\n+                                                          value;\n+            payloadSize = JaxbDocumentUtils.findSlotType(extrinsicObjectType.getSlot(), DocumentConstants.EBXML_RESPONSE_SIZE_SLOTNAME);\n         }\n \n+\n+else {\n+            LOG.warn(\"Passed in element has an unexpected type.  Expecting ExtrinsicObjectType.  Returning as absent.\");\n+        }\n         return payloadSize;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}