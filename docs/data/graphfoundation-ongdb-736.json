{
    "project_name": "graphfoundation-ongdb",
    "error_id": "736",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/736/ZipUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/736/ZipUtils.java\nindex ac45e34e1ca..b7d540311f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/736/ZipUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/736/ZipUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.compress;\n \n import java.io.File;\n@@ -37,53 +38,54 @@ import static java.util.stream.Collectors.toList;\n \n public class ZipUtils\n {\n-    /**\n-     * Create zip archive for requested <code>sourceToCompress</code>.\n-     * If <code>sourceToCompress</code> is a directory then content of that directory and all its sub-directories will be added to the archive.\n-     * If <code>sourceToCompress</code> does not exist or is an empty directory then archive will not be created.\n-     * @param fileSystem source file system\n-     * @param sourceToCompress source file to compress\n-     * @param destinationZip zip file compress source to\n-     * @throws IOException when underlying file system access produce IOException\n-     */\n-    public static void zip( FileSystemAbstraction fileSystem, File sourceToCompress, File destinationZip ) throws IOException\n+  /**\n+   * Create zip archive for requested <code>sourceToCompress</code>.\n+   * If <code>sourceToCompress</code> is a directory then content of that directory and all its sub-directories will be added to the archive.\n+   * If <code>sourceToCompress</code> does not exist or is an empty directory then archive will not be created.\n+   *\n+   * @param fileSystem       source file system\n+   * @param sourceToCompress source file to compress\n+   * @param destinationZip   zip file compress source to\n+   * @throws IOException when underlying file system access produce IOException\n+   */\n+  public static void zip(FileSystemAbstraction fileSystem, File sourceToCompress, File destinationZip) throws IOException\n+  {\n+    if (!fileSystem.fileExists(sourceToCompress))\n     {\n-        if ( !fileSystem.fileExists( sourceToCompress ) )\n-        {\n-            return;\n-        }\n-        if ( isEmptyDirectory( fileSystem, sourceToCompress ) )\n-        {\n-            return;\n-        }\n-        Map<String,String> env = MapUtil.stringMap( \"create\", \"true\" );\n-        Path rootPath = sourceToCompress.toPath();\n-        URI archiveAbsoluteURI = URI.create( \"jar:file:\" + destinationZip.toURI().getRawPath() );\n+      return;\n+    }\n+    if (isEmptyDirectory(fileSystem, sourceToCompress))\n+    {\n+      return;\n+    }\n+    Map<String, String> env = MapUtil.stringMap(\"create\", \"true\");\n+    Path rootPath = sourceToCompress.toPath();\n+    URI archiveAbsoluteURI = URI.create(\"jar:file:\" + destinationZip.toURI().getRawPath());\n \n-        try ( FileSystem zipFs = FileSystems.newFileSystem( archiveAbsoluteURI, env ) )\n+    try (FileSystem zipFs = FileSystems.newFileSystem(archiveAbsoluteURI, env))\n+    {\n+      List<FileHandle> fileHandles = fileSystem.streamFilesRecursive(sourceToCompress).collect(toList());\n+      for (FileHandle fileHandle : fileHandles)\n+      {\n+        Path sourcePath = fileHandle.getFile().toPath();\n+        Path zipFsPath = fileSystem.isDirectory(sourceToCompress) ? zipFs.getPath(rootPath.relativize(sourcePath).toString())\n+            : zipFs.getPath(sourcePath.getFileName().toString());\n+        if (zipFsPath.getParent() != null)\n         {\n-            List<FileHandle> fileHandles = fileSystem.streamFilesRecursive( sourceToCompress ).collect( toList() );\n-            for ( FileHandle fileHandle : fileHandles )\n-            {\n-                Path sourcePath = fileHandle.getFile().toPath();\n-                Path zipFsPath = fileSystem.isDirectory( sourceToCompress ) ? zipFs.getPath( rootPath.relativize( sourcePath ).toString() )\n-                                                                            : zipFs.getPath( sourcePath.getFileName().toString() );\n-                if ( zipFsPath.getParent() != null )\n-                {\n-                    Files.createDirectories( zipFsPath.getParent() );\n-                }\n-                Files.copy( sourcePath, zipFsPath );\n-            }\n+          Files.createDirectories(zipFsPath.getParent());\n         }\n+        Files.copy(sourcePath, zipFsPath);\n+      }\n     }\n+  }\n \n-    private static boolean isEmptyDirectory( FileSystemAbstraction fileSystem, File sourceToCompress )\n+  private static boolean isEmptyDirectory(FileSystemAbstraction fileSystem, File sourceToCompress)\n+  {\n+    if (fileSystem.isDirectory(sourceToCompress))\n     {\n-        if ( fileSystem.isDirectory( sourceToCompress ) )\n-        {\n-            File[] files = fileSystem.listFiles( sourceToCompress );\n-            return files == null || files.length == 0;\n-        }\n-        return false;\n+      File[] files = fileSystem.listFiles(sourceToCompress);\n+      return files == null || files.length == 0;\n     }\n+    return false;\n+  }\n }\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/736/ZipUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/736/ZipUtils.java\nindex ac45e34e1ca..3acef1c4d61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/736/ZipUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/736/ZipUtils.java\n@@ -52,7 +52,8 @@ public class ZipUtils\n         {\n             return;\n         }\n-        if ( isEmptyDirectory( fileSystem, sourceToCompress ) )\n+\n+if ( isEmptyDirectory( fileSystem, sourceToCompress ) )\n         {\n             return;\n         }\n@@ -66,9 +67,8 @@ public class ZipUtils\n             for ( FileHandle fileHandle : fileHandles )\n             {\n                 Path sourcePath = fileHandle.getFile().toPath();\n-                Path zipFsPath = fileSystem.isDirectory( sourceToCompress ) ? zipFs.getPath( rootPath.relativize( sourcePath ).toString() )\n-                                                                            : zipFs.getPath( sourcePath.getFileName().toString() );\n-                if ( zipFsPath.getParent() != null )\n+                Path zipFsPath = fileSystem.isDirectory( sourceToCompress ) ? zipFs.getPath( rootPath.relativize( sourcePath ).toString() ) : zipFs.getPath( sourcePath.getFileName().toString() );\n+if ( zipFsPath.getParent() != null )\n                 {\n                     Files.createDirectories( zipFsPath.getParent() );\n                 }\n@@ -86,4 +86,4 @@ public class ZipUtils\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}