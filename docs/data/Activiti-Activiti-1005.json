{
    "project_name": "Activiti-Activiti",
    "error_id": "1005",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.el;\n\nimport de.odysseus.el.ExpressionFactoryImpl;\nimport java.util.HashMap;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/1005/ExpressionManager.java\nindex dd50a8b76c9..929f81e9e80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/1005/ExpressionManager.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import de.odysseus.el.ExpressionFactoryImpl;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/1005/ExpressionManager.java\nindex dd50a8b76c9..b2c9e91f1e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/1005/ExpressionManager.java\n@@ -61,12 +61,12 @@ public class ExpressionManager {\n \n     public ExpressionManager(boolean initFactory) {\n         this(null,\n-             initFactory);\n+                initFactory);\n     }\n \n     public ExpressionManager(Map<Object, Object> beans) {\n         this(beans,\n-             true);\n+                true);\n     }\n \n     public ExpressionManager(Map<Object, Object> beans,\n@@ -81,10 +81,10 @@ public class ExpressionManager {\n \n     public Expression createExpression(String expression) {\n         ValueExpression valueExpression = expressionFactory.createValueExpression(parsingElContext,\n-                                                                                  expression.trim(),\n-                                                                                  Object.class);\n+                expression.trim(),\n+                Object.class);\n         return new JuelExpression(valueExpression,\n-                                  expression);\n+                expression);\n     }\n \n     public void setExpressionFactory(ExpressionFactory expressionFactory) {\n@@ -136,8 +136,8 @@ public class ExpressionManager {\n         elResolver.add(new MapELResolver());\n         elResolver.add(new CustomMapperJsonNodeELResolver());\n         elResolver.add(new DynamicBeanPropertyELResolver(ItemInstance.class,\n-                                                         \"getFieldValue\",\n-                                                         \"setFieldValue\")); // TODO: needs verification\n+                \"getFieldValue\",\n+                \"setFieldValue\")); // TODO: needs verification\n         elResolver.add(new ELResolverReflectionBlockerDecorator(new BeanELResolver()));\n     }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 57.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 75.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 6, indentation should be the same level as line 125.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/1005/ExpressionManager.java\nindex dd50a8b76c9..00f7bdf4837 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/1005/ExpressionManager.java\n@@ -48,111 +48,108 @@ import org.activiti.engine.impl.persistence.entity.VariableScopeImpl;\n  * Then also this class is used as an entry point for runtime evaluation of the expressions.\n  * </p>\n  */\n+\n+\n public class ExpressionManager {\n \n-    protected ExpressionFactory expressionFactory;\n+  protected ExpressionFactory expressionFactory;\n     // Default implementation (does nothing)\n-    protected ELContext parsingElContext = new ParsingElContext();\n-    protected Map<Object, Object> beans;\n+  protected ELContext parsingElContext = new ParsingElContext();\n+  protected Map<Object, Object> beans;\n \n-    public ExpressionManager() {\n-        this(null);\n-    }\n+  public ExpressionManager() {\n+    this(null);\n+  }\n \n-    public ExpressionManager(boolean initFactory) {\n-        this(null,\n-             initFactory);\n-    }\n+  public ExpressionManager(boolean initFactory) {\n+    this(null, initFactory);\n+  }\n \n-    public ExpressionManager(Map<Object, Object> beans) {\n-        this(beans,\n-             true);\n-    }\n+  public ExpressionManager(Map<Object, Object> beans) {\n+    this(beans, true);\n+  }\n \n-    public ExpressionManager(Map<Object, Object> beans,\n-                             boolean initFactory) {\n+  public ExpressionManager(Map<Object, Object> beans, boolean initFactory) {\n         // Use the ExpressionFactoryImpl in activiti build in version of juel,\n         // with parametrised method expressions enabled\n-        if (initFactory) {\n-            expressionFactory = new ExpressionFactoryImpl();\n-        }\n-        this.beans = beans;\n-    }\n-\n-    public Expression createExpression(String expression) {\n-        ValueExpression valueExpression = expressionFactory.createValueExpression(parsingElContext,\n-                                                                                  expression.trim(),\n-                                                                                  Object.class);\n-        return new JuelExpression(valueExpression,\n-                                  expression);\n-    }\n-\n-    public void setExpressionFactory(ExpressionFactory expressionFactory) {\n-        this.expressionFactory = expressionFactory;\n-    }\n-\n-    public ELContext getElContext(VariableScope variableScope) {\n-        ELContext elContext = null;\n-        if (variableScope instanceof VariableScopeImpl) {\n-            VariableScopeImpl variableScopeImpl = (VariableScopeImpl) variableScope;\n-            elContext = variableScopeImpl.getCachedElContext();\n-        }\n-\n-        if (elContext == null) {\n-            elContext = createElContext(variableScope);\n-            if (variableScope instanceof VariableScopeImpl) {\n-                ((VariableScopeImpl) variableScope).setCachedElContext(elContext);\n-            }\n-        }\n-\n-        return elContext;\n+    if (initFactory) {\n+      expressionFactory = new ExpressionFactoryImpl();\n     }\n-\n-    protected ActivitiElContext createElContext(VariableScope variableScope) {\n-        ELResolver elResolver = createElResolver(variableScope);\n-        return new ActivitiElContext(elResolver);\n+    this.beans = beans;\n+  }\n+\n+  public Expression createExpression(String expression) {\n+    ValueExpression valueExpression = expressionFactory.createValueExpression(parsingElContext,\n+                                                                              expression.trim(),\n+                                                                              Object.class);\n+    return new JuelExpression(valueExpression, expression);\n+  }\n+\n+  public void setExpressionFactory(ExpressionFactory expressionFactory) {\n+    this.expressionFactory = expressionFactory;\n+  }\n+\n+  public ELContext getElContext(VariableScope variableScope) {\n+    ELContext elContext = null;\n+    if (variableScope instanceof VariableScopeImpl) {\n+      VariableScopeImpl variableScopeImpl = (VariableScopeImpl) variableScope;\n+      elContext = variableScopeImpl.getCachedElContext();\n     }\n-\n-    protected ELResolver createElResolver(VariableScope variableScope) {\n-        CompositeELResolver elResolver = new CompositeELResolver();\n-        elResolver.add(new VariableScopeElResolver(variableScope));\n-        addBeansResolver(elResolver);\n-        addBaseResolvers(elResolver);\n-        return elResolver;\n+    if (elContext == null) {\n+      elContext = createElContext(variableScope);\n+      if (variableScope instanceof VariableScopeImpl) {\n+        ((VariableScopeImpl) variableScope).setCachedElContext(elContext);\n+      }\n     }\n-\n-    protected void addBeansResolver(CompositeELResolver elResolver) {\n-        if (beans != null) {\n+    return elContext;\n+  }\n+\n+  protected ActivitiElContext createElContext(VariableScope variableScope) {\n+    ELResolver elResolver = createElResolver(variableScope);\n+    return new ActivitiElContext(elResolver);\n+  }\n+\n+  protected ELResolver createElResolver(VariableScope variableScope) {\n+    CompositeELResolver elResolver = new CompositeELResolver();\n+    elResolver.add(new VariableScopeElResolver(variableScope));\n+    addBeansResolver(elResolver);\n+    addBaseResolvers(elResolver);\n+    return elResolver;\n+  }\n+\n+  protected void addBeansResolver(CompositeELResolver elResolver) {\n+    if (beans != null) {\n             // ACT-1102: Also expose all beans in configuration when using\n             // standalone activiti, not\n             // in spring-context\n-            elResolver.add(new ReadOnlyMapELResolver(beans));\n-        }\n-    }\n-\n-    private void addBaseResolvers(CompositeELResolver elResolver) {\n-        elResolver.add(new ArrayELResolver());\n-        elResolver.add(new ListELResolver());\n-        elResolver.add(new MapELResolver());\n-        elResolver.add(new CustomMapperJsonNodeELResolver());\n-        elResolver.add(new DynamicBeanPropertyELResolver(ItemInstance.class,\n-                                                         \"getFieldValue\",\n-                                                         \"setFieldValue\")); // TODO: needs verification\n-        elResolver.add(new ELResolverReflectionBlockerDecorator(new BeanELResolver()));\n-    }\n-\n-    public Map<Object, Object> getBeans() {\n-        return beans;\n-    }\n-\n-    public void setBeans(Map<Object, Object> beans) {\n-        this.beans = beans;\n-    }\n-\n-    public ELContext getElContext(Map<String, Object> availableVariables) {\n-        CompositeELResolver elResolver = new CompositeELResolver();\n-        elResolver.add(new ReadOnlyMapELResolver(new HashMap<>(availableVariables)));\n-        addBaseResolvers(elResolver);\n-        return new ActivitiElContext(elResolver);\n+      elResolver.add(new ReadOnlyMapELResolver(beans));\n     }\n-}\n+  }\n+\n+  private void addBaseResolvers(CompositeELResolver elResolver) {\n+    elResolver.add(new ArrayELResolver());\n+    elResolver.add(new ListELResolver());\n+    elResolver.add(new MapELResolver());\n+    elResolver.add(new CustomMapperJsonNodeELResolver());\n+    elResolver.add(new DynamicBeanPropertyELResolver(ItemInstance.class,\n+                                                     \"getFieldValue\",\n+                                                     \"setFieldValue\")); // TODO: needs verification\n+    elResolver.add(new ELResolverReflectionBlockerDecorator(new BeanELResolver()));\n+  }\n+\n+  public Map<Object, Object> getBeans() {\n+    return beans;\n+  }\n+\n+  public void setBeans(Map<Object, Object> beans) {\n+    this.beans = beans;\n+  }\n+\n+  public ELContext getElContext(Map<String, Object> availableVariables) {\n+    CompositeELResolver elResolver = new CompositeELResolver();\n+    elResolver.add(new ReadOnlyMapELResolver(new HashMap<>(availableVariables)));\n+    addBaseResolvers(elResolver);\n+    return new ActivitiElContext(elResolver);\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 152
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/1005/ExpressionManager.java\nindex dd50a8b76c9..929f81e9e80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/1005/ExpressionManager.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import de.odysseus.el.ExpressionFactoryImpl;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/1005/ExpressionManager.java\nindex dd50a8b76c9..929f81e9e80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1005/ExpressionManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/1005/ExpressionManager.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import de.odysseus.el.ExpressionFactoryImpl;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}