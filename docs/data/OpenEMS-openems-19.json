{
    "project_name": "OpenEMS-openems",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "38",
                "column": "11",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\n@Designate(ocd = Config.class, factory = true)\n@Component( //\n\t\tname = \"PvInverter.Cluster\", //\n\t\timmediate = true, //\n\t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/19/PvInverterCluster.java\nindex aee7ee258e9..d0075171021 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/19/PvInverterCluster.java\n@@ -35,7 +35,7 @@ import io.openems.edge.meter.api.SymmetricMeter;\n import io.openems.edge.pvinverter.api.ManagedSymmetricPvInverter;\n \n @Designate(ocd = Config.class, factory = true)\n-@Component( //\n+@Component(//\n \t\tname = \"PvInverter.Cluster\", //\n \t\timmediate = true, //\n \t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "38",
                    "column": "11",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/19/PvInverterCluster.java\nindex aee7ee258e9..4ff3fee199e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/19/PvInverterCluster.java\n@@ -36,192 +36,192 @@ import io.openems.edge.pvinverter.api.ManagedSymmetricPvInverter;\n \n @Designate(ocd = Config.class, factory = true)\n @Component( //\n-\t\tname = \"PvInverter.Cluster\", //\n-\t\timmediate = true, //\n-\t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n-\t\tproperty = { //\n-\t\t\t\tEventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE, //\n-\t\t\t\tEventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_AFTER_CONTROLLERS, //\n-\t\t\t\t\"type=PRODUCTION\" //\n-\t\t})\n+    name = \"PvInverter.Cluster\", //\n+    immediate = true, //\n+    configurationPolicy = ConfigurationPolicy.REQUIRE, //\n+    property = { //\n+        EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE, //\n+        EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_AFTER_CONTROLLERS, //\n+        \"type=PRODUCTION\" //\n+    })\n public class PvInverterCluster extends AbstractOpenemsComponent\n-\t\timplements ManagedSymmetricPvInverter, SymmetricMeter, OpenemsComponent, EventHandler {\n-\n-\tprivate final Logger log = LoggerFactory.getLogger(PvInverterCluster.class);\n-\n-\t@Reference\n-\tprotected ComponentManager componentManager;\n-\n-\tprivate Config config = null;\n-\n-\tpublic enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n-\t\tEXECUTION_FAILED(Doc.of(Level.FAULT).text(\"Execution failed\"));\n-\n-\t\tprivate final Doc doc;\n-\n-\t\tprivate ChannelId(Doc doc) {\n-\t\t\tthis.doc = doc;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Doc doc() {\n-\t\t\treturn this.doc;\n-\t\t}\n-\t}\n-\n-\tpublic PvInverterCluster() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tSymmetricMeter.ChannelId.values(), //\n-\t\t\t\tManagedSymmetricPvInverter.ChannelId.values(), //\n-\t\t\t\tChannelId.values() //\n-\t\t);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) throws OpenemsException {\n-\t\tsuper.activate(context, config.id(), config.alias(), config.enabled());\n-\t\tthis.config = config;\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\t@Override\n-\tpublic void handleEvent(Event event) {\n-\t\tif (!this.isEnabled()) {\n-\t\t\tthis.channel(ChannelId.EXECUTION_FAILED).setNextValue(false);\n-\t\t\treturn;\n-\t\t}\n-\t\ttry {\n-\t\t\tswitch (event.getTopic()) {\n-\n-\t\t\tcase EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE:\n-\t\t\t\tthis.calculateChannelValues();\n-\t\t\t\tbreak;\n-\n-\t\t\tcase EdgeEventConstants.TOPIC_CYCLE_AFTER_CONTROLLERS:\n-\t\t\t\tthis.distributePvLimit();\n-\t\t\t\tbreak;\n-\t\t\t}\n-\n-\t\t\tthis.channel(ChannelId.EXECUTION_FAILED).setNextValue(false);\n-\n-\t\t} catch (OpenemsNamedException e) {\n-\t\t\tthis.channel(ChannelId.EXECUTION_FAILED).setNextValue(true);\n-\t\t\tthis.logError(this.log, \"Failed to distribute PV-Limit: \" + e.getMessage());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Calculates the sum-value for each Channel.\n-\t * \n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprivate void calculateChannelValues() throws OpenemsNamedException {\n-\t\tList<ManagedSymmetricPvInverter> pvInverters = this.getPvInverters();\n-\n-\t\t// SymmetricMeter\n-\t\tfinal CalculateAverage frequency = new CalculateAverage();\n-\t\tfinal CalculateIntegerSum minActivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum maxActivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum activePower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum reactivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateLongSum activeProductionEnergy = new CalculateLongSum();\n-\t\tfinal CalculateLongSum activeConsumptionEnergy = new CalculateLongSum();\n-\t\tfinal CalculateAverage voltage = new CalculateAverage();\n-\t\tfinal CalculateIntegerSum current = new CalculateIntegerSum();\n-\t\t// SymmetricPvInverter\n-\t\tfinal CalculateIntegerSum maxApparentPower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum activePowerLimit = new CalculateIntegerSum();\n-\n-\t\tfor (ManagedSymmetricPvInverter pvInverter : pvInverters) {\n-\t\t\t// SymmetricMeter\n-\t\t\tfrequency.addValue(pvInverter.getFrequencyChannel());\n-\t\t\tminActivePower.addValue(pvInverter.getMinActivePowerChannel());\n-\t\t\tmaxActivePower.addValue(pvInverter.getMaxActivePowerChannel());\n-\t\t\tactivePower.addValue(pvInverter.getActivePowerChannel());\n-\t\t\treactivePower.addValue(pvInverter.getReactivePowerChannel());\n-\t\t\tactiveProductionEnergy.addValue(pvInverter.getActiveProductionEnergyChannel());\n-\t\t\tactiveConsumptionEnergy.addValue(pvInverter.getActiveConsumptionEnergyChannel());\n-\t\t\tvoltage.addValue(pvInverter.getVoltageChannel());\n-\t\t\tcurrent.addValue(pvInverter.getCurrentChannel());\n-\t\t\t// SymmetricPvInverter\n-\t\t\tmaxApparentPower.addValue(pvInverter.getMaxApparentPowerChannel());\n-\t\t\tactivePowerLimit.addValue(pvInverter.getActivePowerLimitChannel());\n-\t\t}\n-\n-\t\t// SymmetricMeter\n-\t\tthis.getFrequencyChannel().setNextValue(frequency.calculate());\n-\t\tthis._setMinActivePower(minActivePower.calculate());\n-\t\tthis._setMaxActivePower(maxActivePower.calculate());\n-\t\tthis._setActivePower(activePower.calculate());\n-\t\tthis._setReactivePower(reactivePower.calculate());\n-\t\tthis._setActiveProductionEnergy(activeProductionEnergy.calculate());\n-\t\tthis._setActiveConsumptionEnergy(activeConsumptionEnergy.calculate());\n-\t\tthis.getVoltageChannel().setNextValue(voltage.calculate());\n-\t\tthis._setCurrent(current.calculate());\n-\t\t// SymmetricPvInverter\n-\t\tthis._setMaxApparentPower(maxApparentPower.calculate());\n-\t\tthis._setActivePowerLimit(activePowerLimit.calculate());\n-\t}\n-\n-\tprivate void distributePvLimit() throws OpenemsNamedException {\n-\t\tList<ManagedSymmetricPvInverter> pvInverters = this.getPvInverters();\n-\n-\t\tif (pvInverters.isEmpty()) {\n-\t\t\t// No PV inverters?\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tOptional<Integer> activePowerLimitOpt = this.getActivePowerLimitChannel().getNextWriteValueAndReset();\n-\t\tif (!activePowerLimitOpt.isPresent()) {\n-\t\t\t// no value given -> set all limits to undefined.\n-\t\t\tfor (ManagedSymmetricPvInverter pvInverter : pvInverters) {\n-\t\t\t\tpvInverter.setActivePowerLimit(null);\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tint activePowerLimit = activePowerLimitOpt.get();\n-\t\tint averageActivePowerLimit = activePowerLimit / pvInverters.size();\n-\t\tMap<ManagedSymmetricPvInverter, Integer> values = new HashMap<>();\n-\t\tint toBeDistributed = 0;\n-\t\tfor (ManagedSymmetricPvInverter pvInverter : pvInverters) {\n-\t\t\tint maxPower = pvInverter.getMaxApparentPower().getOrError();\n-\t\t\tint power = averageActivePowerLimit;\n-\t\t\tif (maxPower < power) {\n-\t\t\t\ttoBeDistributed += power - maxPower;\n-\t\t\t\tpower = maxPower;\n-\t\t\t}\n-\t\t\tvalues.put(pvInverter, power);\n-\t\t}\n-\n-\t\tfor (Entry<ManagedSymmetricPvInverter, Integer> entry : values.entrySet()) {\n-\t\t\tif (toBeDistributed > 0) {\n-\t\t\t\tint maxPower = entry.getKey().getMaxApparentPower().getOrError();\n-\t\t\t\tint power = entry.getValue();\n-\t\t\t\tif (maxPower > power) {\n-\t\t\t\t\ttoBeDistributed -= maxPower - power;\n-\t\t\t\t\tentry.setValue(power);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Apply limit\n-\t\tfor (Entry<ManagedSymmetricPvInverter, Integer> entry : values.entrySet()) {\n-\t\t\tentry.getKey().setActivePowerLimit(entry.getValue());\n-\t\t}\n-\t}\n-\n-\tprivate List<ManagedSymmetricPvInverter> getPvInverters() throws OpenemsNamedException {\n-\t\tList<ManagedSymmetricPvInverter> result = new ArrayList<>();\n-\t\tfor (String pvInverterId : this.config.pvInverter_ids()) {\n-\t\t\tManagedSymmetricPvInverter pvInverter = this.componentManager.getComponent(pvInverterId);\n-\t\t\tresult.add(pvInverter);\n-\t\t}\n-\t\treturn result;\n-\t}\n+    implements ManagedSymmetricPvInverter, SymmetricMeter, OpenemsComponent, EventHandler {\n+\n+  private final Logger log = LoggerFactory.getLogger(PvInverterCluster.class);\n+\n+  @Reference\n+  protected ComponentManager componentManager;\n+\n+  private Config config = null;\n+\n+  public enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n+    EXECUTION_FAILED(Doc.of(Level.FAULT).text(\"Execution failed\"));\n+\n+    private final Doc doc;\n+\n+    private ChannelId(Doc doc) {\n+      this.doc = doc;\n+    }\n+\n+    @Override\n+    public Doc doc() {\n+      return this.doc;\n+    }\n+  }\n+\n+  public PvInverterCluster() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        SymmetricMeter.ChannelId.values(), //\n+        ManagedSymmetricPvInverter.ChannelId.values(), //\n+        ChannelId.values() //\n+    );\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) throws OpenemsException {\n+    super.activate(context, config.id(), config.alias(), config.enabled());\n+    this.config = config;\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  @Override\n+  public void handleEvent(Event event) {\n+    if (!this.isEnabled()) {\n+      this.channel(ChannelId.EXECUTION_FAILED).setNextValue(false);\n+      return;\n+    }\n+    try {\n+      switch (event.getTopic()) {\n+\n+        case EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE:\n+          this.calculateChannelValues();\n+          break;\n+\n+        case EdgeEventConstants.TOPIC_CYCLE_AFTER_CONTROLLERS:\n+          this.distributePvLimit();\n+          break;\n+      }\n+\n+      this.channel(ChannelId.EXECUTION_FAILED).setNextValue(false);\n+\n+    } catch (OpenemsNamedException e) {\n+      this.channel(ChannelId.EXECUTION_FAILED).setNextValue(true);\n+      this.logError(this.log, \"Failed to distribute PV-Limit: \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Calculates the sum-value for each Channel.\n+   *\n+   * @throws OpenemsNamedException on error\n+   */\n+  private void calculateChannelValues() throws OpenemsNamedException {\n+    List<ManagedSymmetricPvInverter> pvInverters = this.getPvInverters();\n+\n+    // SymmetricMeter\n+    final CalculateAverage frequency = new CalculateAverage();\n+    final CalculateIntegerSum minActivePower = new CalculateIntegerSum();\n+    final CalculateIntegerSum maxActivePower = new CalculateIntegerSum();\n+    final CalculateIntegerSum activePower = new CalculateIntegerSum();\n+    final CalculateIntegerSum reactivePower = new CalculateIntegerSum();\n+    final CalculateLongSum activeProductionEnergy = new CalculateLongSum();\n+    final CalculateLongSum activeConsumptionEnergy = new CalculateLongSum();\n+    final CalculateAverage voltage = new CalculateAverage();\n+    final CalculateIntegerSum current = new CalculateIntegerSum();\n+    // SymmetricPvInverter\n+    final CalculateIntegerSum maxApparentPower = new CalculateIntegerSum();\n+    final CalculateIntegerSum activePowerLimit = new CalculateIntegerSum();\n+\n+    for (ManagedSymmetricPvInverter pvInverter : pvInverters) {\n+      // SymmetricMeter\n+      frequency.addValue(pvInverter.getFrequencyChannel());\n+      minActivePower.addValue(pvInverter.getMinActivePowerChannel());\n+      maxActivePower.addValue(pvInverter.getMaxActivePowerChannel());\n+      activePower.addValue(pvInverter.getActivePowerChannel());\n+      reactivePower.addValue(pvInverter.getReactivePowerChannel());\n+      activeProductionEnergy.addValue(pvInverter.getActiveProductionEnergyChannel());\n+      activeConsumptionEnergy.addValue(pvInverter.getActiveConsumptionEnergyChannel());\n+      voltage.addValue(pvInverter.getVoltageChannel());\n+      current.addValue(pvInverter.getCurrentChannel());\n+      // SymmetricPvInverter\n+      maxApparentPower.addValue(pvInverter.getMaxApparentPowerChannel());\n+      activePowerLimit.addValue(pvInverter.getActivePowerLimitChannel());\n+    }\n+\n+    // SymmetricMeter\n+    this.getFrequencyChannel().setNextValue(frequency.calculate());\n+    this._setMinActivePower(minActivePower.calculate());\n+    this._setMaxActivePower(maxActivePower.calculate());\n+    this._setActivePower(activePower.calculate());\n+    this._setReactivePower(reactivePower.calculate());\n+    this._setActiveProductionEnergy(activeProductionEnergy.calculate());\n+    this._setActiveConsumptionEnergy(activeConsumptionEnergy.calculate());\n+    this.getVoltageChannel().setNextValue(voltage.calculate());\n+    this._setCurrent(current.calculate());\n+    // SymmetricPvInverter\n+    this._setMaxApparentPower(maxApparentPower.calculate());\n+    this._setActivePowerLimit(activePowerLimit.calculate());\n+  }\n+\n+  private void distributePvLimit() throws OpenemsNamedException {\n+    List<ManagedSymmetricPvInverter> pvInverters = this.getPvInverters();\n+\n+    if (pvInverters.isEmpty()) {\n+      // No PV inverters?\n+      return;\n+    }\n+\n+    Optional<Integer> activePowerLimitOpt = this.getActivePowerLimitChannel().getNextWriteValueAndReset();\n+    if (!activePowerLimitOpt.isPresent()) {\n+      // no value given -> set all limits to undefined.\n+      for (ManagedSymmetricPvInverter pvInverter : pvInverters) {\n+        pvInverter.setActivePowerLimit(null);\n+      }\n+      return;\n+    }\n+\n+    int activePowerLimit = activePowerLimitOpt.get();\n+    int averageActivePowerLimit = activePowerLimit / pvInverters.size();\n+    Map<ManagedSymmetricPvInverter, Integer> values = new HashMap<>();\n+    int toBeDistributed = 0;\n+    for (ManagedSymmetricPvInverter pvInverter : pvInverters) {\n+      int maxPower = pvInverter.getMaxApparentPower().getOrError();\n+      int power = averageActivePowerLimit;\n+      if (maxPower < power) {\n+        toBeDistributed += power - maxPower;\n+        power = maxPower;\n+      }\n+      values.put(pvInverter, power);\n+    }\n+\n+    for (Entry<ManagedSymmetricPvInverter, Integer> entry : values.entrySet()) {\n+      if (toBeDistributed > 0) {\n+        int maxPower = entry.getKey().getMaxApparentPower().getOrError();\n+        int power = entry.getValue();\n+        if (maxPower > power) {\n+          toBeDistributed -= maxPower - power;\n+          entry.setValue(power);\n+        }\n+      }\n+    }\n+\n+    // Apply limit\n+    for (Entry<ManagedSymmetricPvInverter, Integer> entry : values.entrySet()) {\n+      entry.getKey().setActivePowerLimit(entry.getValue());\n+    }\n+  }\n+\n+  private List<ManagedSymmetricPvInverter> getPvInverters() throws OpenemsNamedException {\n+    List<ManagedSymmetricPvInverter> result = new ArrayList<>();\n+    for (String pvInverterId : this.config.pvInverter_ids()) {\n+      ManagedSymmetricPvInverter pvInverter = this.componentManager.getComponent(pvInverterId);\n+      result.add(pvInverter);\n+    }\n+    return result;\n+  }\n }\n",
            "diff_size": 187
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/19/PvInverterCluster.java\nindex aee7ee258e9..4cb2882a37e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/19/PvInverterCluster.java\n@@ -35,7 +35,7 @@ import io.openems.edge.meter.api.SymmetricMeter;\n import io.openems.edge.pvinverter.api.ManagedSymmetricPvInverter;\n \n @Designate(ocd = Config.class, factory = true)\n-@Component( //\n+@Component(//\n \t\tname = \"PvInverter.Cluster\", //\n \t\timmediate = true, //\n \t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n@@ -224,4 +224,4 @@ public class PvInverterCluster extends AbstractOpenemsComponent\n \t\t}\n \t\treturn result;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/19/PvInverterCluster.java\nindex aee7ee258e9..d0075171021 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/19/PvInverterCluster.java\n@@ -35,7 +35,7 @@ import io.openems.edge.meter.api.SymmetricMeter;\n import io.openems.edge.pvinverter.api.ManagedSymmetricPvInverter;\n \n @Designate(ocd = Config.class, factory = true)\n-@Component( //\n+@Component(//\n \t\tname = \"PvInverter.Cluster\", //\n \t\timmediate = true, //\n \t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/19/PvInverterCluster.java\nindex aee7ee258e9..d0075171021 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/19/PvInverterCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/19/PvInverterCluster.java\n@@ -35,7 +35,7 @@ import io.openems.edge.meter.api.SymmetricMeter;\n import io.openems.edge.pvinverter.api.ManagedSymmetricPvInverter;\n \n @Designate(ocd = Config.class, factory = true)\n-@Component( //\n+@Component(//\n \t\tname = \"PvInverter.Cluster\", //\n \t\timmediate = true, //\n \t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}