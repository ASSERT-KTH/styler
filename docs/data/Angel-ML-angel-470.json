{
    "project_name": "Angel-ML-angel",
    "error_id": "470",
    "information": {
        "errors": [
            {
                "line": "12",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " */\npublic class ModelFilesUtils {\n  private static final ConcurrentHashMap<Integer, AtomicInteger> psModelFileGens = new ConcurrentHashMap<>();\n\n  /**\n   * Get a new output file name for ps model, file name format : psId_index",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/470/ModelFilesUtils.java\nindex de373387b86..e0f6a8e5525 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/470/ModelFilesUtils.java\n@@ -9,15 +9,17 @@ import java.util.concurrent.atomic.AtomicInteger;\n  * Model ouput utils\n  */\n public class ModelFilesUtils {\n-  private static final ConcurrentHashMap<Integer, AtomicInteger> psModelFileGens = new ConcurrentHashMap<>();\n+  private static final ConcurrentHashMap<Integer, AtomicInteger> psModelFileGens =\n+      new ConcurrentHashMap<>();\n \n   /**\n    * Get a new output file name for ps model, file name format : psId_index\n+   *\n    * @param psId parameterserver id\n    * @return a new file name\n    */\n   public static String nextFileName(ParameterServerId psId, int matrixId) {\n-    if(!psModelFileGens.containsKey(matrixId)) {\n+    if (!psModelFileGens.containsKey(matrixId)) {\n       psModelFileGens.putIfAbsent(matrixId, new AtomicInteger(0));\n     }\n \n@@ -26,7 +28,8 @@ public class ModelFilesUtils {\n \n   /**\n    * Get a output file name for ps model, file name format : psId_partid\n-   * @param psId parameterserver id\n+   *\n+   * @param psId        parameterserver id\n    * @param startPartId minimal partition id\n    * @return\n    */\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/470/ModelFilesUtils.java\nindex de373387b86..0d088b5b3fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/470/ModelFilesUtils.java\n@@ -33,4 +33,4 @@ public class ModelFilesUtils {\n   public static String fileName(ParameterServerId psId, int startPartId) {\n     return psId + ModelFilesConstent.separator + startPartId;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/470/ModelFilesUtils.java\nindex de373387b86..feab0ebd3d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/470/ModelFilesUtils.java\n@@ -1,14 +1,15 @@\n package com.tencent.angel.model.output.format;\n \n import com.tencent.angel.ps.ParameterServerId;\n-\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * Model ouput utils\n  */\n+\n public class ModelFilesUtils {\n+\n   private static final ConcurrentHashMap<Integer, AtomicInteger> psModelFileGens = new ConcurrentHashMap<>();\n \n   /**\n@@ -16,11 +17,11 @@ public class ModelFilesUtils {\n    * @param psId parameterserver id\n    * @return a new file name\n    */\n+\n   public static String nextFileName(ParameterServerId psId, int matrixId) {\n-    if(!psModelFileGens.containsKey(matrixId)) {\n+    if (!psModelFileGens.containsKey(matrixId)) {\n       psModelFileGens.putIfAbsent(matrixId, new AtomicInteger(0));\n     }\n-\n     return psId + ModelFilesConstent.separator + psModelFileGens.get(matrixId).getAndIncrement();\n   }\n \n@@ -30,7 +31,9 @@ public class ModelFilesUtils {\n    * @param startPartId minimal partition id\n    * @return\n    */\n+\n   public static String fileName(ParameterServerId psId, int startPartId) {\n     return psId + ModelFilesConstent.separator + startPartId;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "12",
                    "column": "39",
                    "severity": "error",
                    "message": "GenericWhitespace '<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/470/ModelFilesUtils.java\nindex de373387b86..d0d45c66678 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/470/ModelFilesUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/470/ModelFilesUtils.java\n@@ -9,14 +9,15 @@ import java.util.concurrent.atomic.AtomicInteger;\n  * Model ouput utils\n  */\n public class ModelFilesUtils {\n-  private static final ConcurrentHashMap<Integer, AtomicInteger> psModelFileGens = new ConcurrentHashMap<>();\n+  private staticfinalConcurrentHashMap <Integer , AtomicInteger> psModelFileGens =new\n+  ConcurrentHashMap<>();\n \n-  /**\n+   /**\n    * Get a new output file name for ps model, file name format : psId_index\n    * @param psId parameterserver id\n    * @return a new file name\n    */\n-  public static String nextFileName(ParameterServerId psId, int matrixId) {\n+   public static public static String nextFileName(ParameterServerId psId, int matrixId) {\n     if(!psModelFileGens.containsKey(matrixId)) {\n       psModelFileGens.putIfAbsent(matrixId, new AtomicInteger(0));\n     }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}