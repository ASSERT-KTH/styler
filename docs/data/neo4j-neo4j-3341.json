{
    "project_name": "neo4j-neo4j",
    "error_id": "3341",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3341/UpdateRecordsStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3341/UpdateRecordsStep.java\nindex 4f88a4a4d68..83234402997 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3341/UpdateRecordsStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3341/UpdateRecordsStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import java.util.Collection;\n@@ -45,56 +46,56 @@ import static org.neo4j.kernel.impl.store.IdUpdateListener.IGNORE;\n  * Updates a batch of records to a store.\n  */\n public class UpdateRecordsStep<RECORD extends AbstractBaseRecord>\n-        extends ProcessorStep<RECORD[]>\n-        implements StatsProvider\n+  extends ProcessorStep<RECORD[]>\n+  implements StatsProvider\n {\n     protected final RecordStore<RECORD> store;\n     private final int recordSize;\n     private final PrepareIdSequence prepareIdSequence;\n     private final LongAdder recordsUpdated = new LongAdder();\n \n-    public UpdateRecordsStep( StageControl control, Configuration config, RecordStore<RECORD> store,\n-            PrepareIdSequence prepareIdSequence, PageCacheTracer pageCacheTracer )\n+    public UpdateRecordsStep(StageControl control, Configuration config, RecordStore<RECORD> store,\n+                             PrepareIdSequence prepareIdSequence, PageCacheTracer pageCacheTracer)\n     {\n-        super( control, \"v\", config, config.parallelRecordWrites() ? 0 : 1, pageCacheTracer );\n+        super(control, \"v\", config, config.parallelRecordWrites() ? 0 : 1, pageCacheTracer);\n         this.store = store;\n         this.prepareIdSequence = prepareIdSequence;\n         this.recordSize = store.getRecordSize();\n     }\n \n     @Override\n-    protected void process( RECORD[] batch, BatchSender sender, PageCursorTracer cursorTracer )\n+    protected void process(RECORD[] batch, BatchSender sender, PageCursorTracer cursorTracer)\n     {\n-        LongFunction<IdSequence> idSequence = prepareIdSequence.apply( store );\n+        LongFunction<IdSequence> idSequence = prepareIdSequence.apply(store);\n         int recordsUpdatedInThisBatch = 0;\n-        try ( PageCursor cursor = store.openPageCursorForWriting( 0, cursorTracer ) )\n+        try (PageCursor cursor = store.openPageCursorForWriting(0, cursorTracer))\n         {\n-            for ( RECORD record : batch )\n+            for (RECORD record : batch)\n             {\n-                if ( record != null && record.inUse() && !IdValidator.isReservedId( record.getId() ) )\n+                if (record != null && record.inUse() && !IdValidator.isReservedId(record.getId()))\n                 {\n-                    store.prepareForCommit( record, idSequence.apply( record.getId() ), cursorTracer );\n+                    store.prepareForCommit(record, idSequence.apply(record.getId()), cursorTracer);\n                     // Don't update id generators because at the time of writing this they require special handling for multi-threaded updates\n                     // instead just note the highId. It will be mostly correct in the end.\n-                    store.updateRecord( record, IGNORE, cursor, cursorTracer );\n+                    store.updateRecord(record, IGNORE, cursor, cursorTracer);\n                     recordsUpdatedInThisBatch++;\n                 }\n             }\n         }\n-        recordsUpdated.add( recordsUpdatedInThisBatch );\n+        recordsUpdated.add(recordsUpdatedInThisBatch);\n     }\n \n     @Override\n-    protected void collectStatsProviders( Collection<StatsProvider> into )\n+    protected void collectStatsProviders(Collection<StatsProvider> into)\n     {\n-        super.collectStatsProviders( into );\n-        into.add( this );\n+        super.collectStatsProviders(into);\n+        into.add(this);\n     }\n \n     @Override\n-    public Stat stat( Key key )\n+    public Stat stat(Key key)\n     {\n-        return key == Keys.io_throughput ? new IoThroughputStat( startTime, endTime, recordSize * recordsUpdated.sum() ) : null;\n+        return key == Keys.io_throughput ? new IoThroughputStat(startTime, endTime, recordSize * recordsUpdated.sum()) : null;\n     }\n \n     @Override\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}