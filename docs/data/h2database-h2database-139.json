{
    "project_name": "h2database-h2database",
    "error_id": "139",
    "information": {
        "errors": [
            {
                "line": "84",
                "column": "13",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return (DataType<?>) obj;\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            if(exceptionHandler != null) {\n                exceptionHandler.uncaughtException(Thread.currentThread(), e);\n            }\n            throw new RuntimeException(e);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/139/MetaType.java\nindex 9e5b7d069fb..20a7026229a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/139/MetaType.java\n@@ -81,7 +81,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/139/MetaType.java\nindex 9e5b7d069fb..5b6e146e47d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/139/MetaType.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.mvstore.type;\n \n import org.h2.engine.Constants;\n@@ -17,16 +18,17 @@ import java.util.Map;\n  * Class DBMetaType is a type for values in the type registry map.\n  *\n  * @param <D> type of opaque parameter passed as an operational context to Factory.create()\n- *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n public final class MetaType<D> extends BasicDataType<DataType<?>> {\n \n     private final D database;\n     private final Thread.UncaughtExceptionHandler exceptionHandler;\n-    private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap<>();\n+    private final Map<String, StatefulDataType.Factory<D>> cache =\n+            new HashMap<>();\n \n-    public MetaType(D database, Thread.UncaughtExceptionHandler exceptionHandler) {\n+    public MetaType(D database,\n+                    Thread.UncaughtExceptionHandler exceptionHandler) {\n         this.database = database;\n         this.exceptionHandler = exceptionHandler;\n     }\n@@ -56,7 +58,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n         String className = clazz.getName();\n         int len = className.length();\n         buff.putVarInt(len)\n-            .putStringData(className, len);\n+                .putStringData(className, len);\n         if (statefulDataType != null) {\n             statefulDataType.save(buff, this);\n         }\n@@ -81,7 +83,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/139/MetaType.java\nindex 9e5b7d069fb..bd9fe3559a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/139/MetaType.java\n@@ -55,8 +55,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n         }\n         String className = clazz.getName();\n         int len = className.length();\n-        buff.putVarInt(len)\n-            .putStringData(className, len);\n+        buff.putVarInt(len).putStringData(className, len);\n         if (statefulDataType != null) {\n             statefulDataType.save(buff, this);\n         }\n@@ -81,7 +80,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n@@ -92,4 +91,4 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n     public DataType<?>[] createStorage(int size) {\n         return new DataType[size];\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "83",
                    "column": "41",
                    "severity": "warning",
                    "message": "'|' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "83",
                    "column": "64",
                    "severity": "warning",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/139/MetaType.java\nindex 9e5b7d069fb..9a2db4b5643 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/139/MetaType.java\n@@ -8,7 +8,6 @@ package org.h2.mvstore.type;\n import org.h2.engine.Constants;\n import org.h2.mvstore.DataUtils;\n import org.h2.mvstore.WriteBuffer;\n-\n import java.nio.ByteBuffer;\n import java.util.HashMap;\n import java.util.Map;\n@@ -20,11 +19,13 @@ import java.util.Map;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n+\n+\n public final class MetaType<D> extends BasicDataType<DataType<?>> {\n \n     private final D database;\n     private final Thread.UncaughtExceptionHandler exceptionHandler;\n-    private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap<>();\n+    private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap< >();\n \n     public MetaType(D database, Thread.UncaughtExceptionHandler exceptionHandler) {\n         this.database = database;\n@@ -55,8 +56,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n         }\n         String className = clazz.getName();\n         int len = className.length();\n-        buff.putVarInt(len)\n-            .putStringData(className, len);\n+        buff.putVarInt(len).putStringData(className, len);\n         if (statefulDataType != null) {\n             statefulDataType.save(buff, this);\n         }\n@@ -80,8 +80,8 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n                 return factory.create(buff, this, database);\n             }\n             return (DataType<?>) obj;\n-        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+        } catch (ClassNotFoundException |InstantiationException| IllegalAccessException e) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n@@ -92,4 +92,5 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n     public DataType<?>[] createStorage(int size) {\n         return new DataType[size];\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/139/MetaType.java\nindex 9e5b7d069fb..20a7026229a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/139/MetaType.java\n@@ -81,7 +81,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/139/MetaType.java\nindex 9e5b7d069fb..20a7026229a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/139/MetaType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/139/MetaType.java\n@@ -81,7 +81,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>> {\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}