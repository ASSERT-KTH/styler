{
    "project_name": "graphfoundation-ongdb",
    "error_id": "907",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "179",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/907/KernelTransactionImplementationHandle.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/907/KernelTransactionImplementationHandle.java\nindex e62ab16625b..4ef6d220f61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/907/KernelTransactionImplementationHandle.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/907/KernelTransactionImplementationHandle.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.Map;\n@@ -39,166 +40,165 @@ import org.neo4j.time.SystemNanoClock;\n  */\n class KernelTransactionImplementationHandle implements KernelTransactionHandle\n {\n-    private static final String USER_TRANSACTION_NAME_PREFIX = \"transaction-\";\n-\n-    private final long txReuseCount;\n-    private final long lastTransactionIdWhenStarted;\n-    private final long lastTransactionTimestampWhenStarted;\n-    private final long startTime;\n-    private final long startTimeNanos;\n-    private final long timeoutMillis;\n-    private final KernelTransactionImplementation tx;\n-    private final SystemNanoClock clock;\n-    private final AuthSubject subject;\n-    private final Optional<Status> terminationReason;\n-    private final ExecutingQueryList executingQueries;\n-    private final Map<String,Object> metaData;\n-    private final long userTransactionId;\n-\n-    KernelTransactionImplementationHandle( KernelTransactionImplementation tx, SystemNanoClock clock )\n-    {\n-        this.txReuseCount = tx.getReuseCount();\n-        this.lastTransactionIdWhenStarted = tx.lastTransactionIdWhenStarted();\n-        this.lastTransactionTimestampWhenStarted = tx.lastTransactionTimestampWhenStarted();\n-        this.startTime = tx.startTime();\n-        this.startTimeNanos = tx.startTimeNanos();\n-        this.timeoutMillis = tx.timeout();\n-        this.subject = tx.subjectOrAnonymous();\n-        this.terminationReason = tx.getReasonIfTerminated();\n-        this.executingQueries = tx.executingQueries();\n-        this.metaData = tx.getMetaData();\n-        this.userTransactionId = tx.userTransactionId();\n-        this.tx = tx;\n-        this.clock = clock;\n-    }\n-\n-    @Override\n-    public long lastTransactionIdWhenStarted()\n-    {\n-        return lastTransactionIdWhenStarted;\n-    }\n-\n-    @Override\n-    public long lastTransactionTimestampWhenStarted()\n-    {\n-        return lastTransactionTimestampWhenStarted;\n-    }\n-\n-    @Override\n-    public long startTime()\n-    {\n-        return startTime;\n-    }\n-\n-    @Override\n-    public long startTimeNanos()\n-    {\n-        return startTimeNanos;\n-    }\n-\n-    @Override\n-    public long timeoutMillis()\n-    {\n-        return timeoutMillis;\n-    }\n-\n-    @Override\n-    public boolean isOpen()\n-    {\n-        return tx.isOpen() && txReuseCount == tx.getReuseCount();\n-    }\n-\n-    @Override\n-    public boolean markForTermination( Status reason )\n-    {\n-        return tx.markForTermination( txReuseCount, reason );\n-    }\n-\n-    @Override\n-    public AuthSubject subject()\n-    {\n-        return subject;\n-    }\n-\n-    @Override\n-    public Map<String,Object> getMetaData()\n-    {\n-        return metaData;\n-    }\n-\n-    @Override\n-    public Optional<Status> terminationReason()\n-    {\n-        return terminationReason;\n-    }\n-\n-    @Override\n-    public boolean isUnderlyingTransaction( KernelTransaction tx )\n-    {\n-        return this.tx == tx;\n-    }\n-\n-    @Override\n-    public long getUserTransactionId()\n-    {\n-        return userTransactionId;\n-    }\n-\n-    @Override\n-    public String getUserTransactionName()\n-    {\n-        return USER_TRANSACTION_NAME_PREFIX + getUserTransactionId();\n-    }\n-\n-    @Override\n-    public Stream<ExecutingQuery> executingQueries()\n-    {\n-        return executingQueries.queries();\n-    }\n-\n-    @Override\n-    public Stream<? extends ActiveLock> activeLocks()\n-    {\n-        return tx.activeLocks();\n-    }\n-\n-    @Override\n-    public TransactionExecutionStatistic transactionStatistic()\n-    {\n-        if ( txReuseCount == tx.getReuseCount() )\n-        {\n-            return new TransactionExecutionStatistic( tx, clock, startTime );\n-        }\n-        else\n-        {\n-            return TransactionExecutionStatistic.NOT_AVAILABLE;\n-        }\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        KernelTransactionImplementationHandle that = (KernelTransactionImplementationHandle) o;\n-        return txReuseCount == that.txReuseCount && tx.equals( that.tx );\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return 31 * (int) (txReuseCount ^ (txReuseCount >>> 32)) + tx.hashCode();\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"KernelTransactionImplementationHandle{txReuseCount=\" + txReuseCount + \", tx=\" + tx + \"}\";\n-    }\n+  private static final String USER_TRANSACTION_NAME_PREFIX = \"transaction-\";\n+\n+  private final long txReuseCount;\n+  private final long lastTransactionIdWhenStarted;\n+  private final long lastTransactionTimestampWhenStarted;\n+  private final long startTime;\n+  private final long startTimeNanos;\n+  private final long timeoutMillis;\n+  private final KernelTransactionImplementation tx;\n+  private final SystemNanoClock clock;\n+  private final AuthSubject subject;\n+  private final Optional<Status> terminationReason;\n+  private final ExecutingQueryList executingQueries;\n+  private final Map<String, Object> metaData;\n+  private final long userTransactionId;\n+\n+  KernelTransactionImplementationHandle(KernelTransactionImplementation tx, SystemNanoClock clock)\n+  {\n+    this.txReuseCount = tx.getReuseCount();\n+    this.lastTransactionIdWhenStarted = tx.lastTransactionIdWhenStarted();\n+    this.lastTransactionTimestampWhenStarted = tx.lastTransactionTimestampWhenStarted();\n+    this.startTime = tx.startTime();\n+    this.startTimeNanos = tx.startTimeNanos();\n+    this.timeoutMillis = tx.timeout();\n+    this.subject = tx.subjectOrAnonymous();\n+    this.terminationReason = tx.getReasonIfTerminated();\n+    this.executingQueries = tx.executingQueries();\n+    this.metaData = tx.getMetaData();\n+    this.userTransactionId = tx.userTransactionId();\n+    this.tx = tx;\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public long lastTransactionIdWhenStarted()\n+  {\n+    return lastTransactionIdWhenStarted;\n+  }\n+\n+  @Override\n+  public long lastTransactionTimestampWhenStarted()\n+  {\n+    return lastTransactionTimestampWhenStarted;\n+  }\n+\n+  @Override\n+  public long startTime()\n+  {\n+    return startTime;\n+  }\n+\n+  @Override\n+  public long startTimeNanos()\n+  {\n+    return startTimeNanos;\n+  }\n+\n+  @Override\n+  public long timeoutMillis()\n+  {\n+    return timeoutMillis;\n+  }\n+\n+  @Override\n+  public boolean isOpen()\n+  {\n+    return tx.isOpen() && txReuseCount == tx.getReuseCount();\n+  }\n+\n+  @Override\n+  public boolean markForTermination(Status reason)\n+  {\n+    return tx.markForTermination(txReuseCount, reason);\n+  }\n+\n+  @Override\n+  public AuthSubject subject()\n+  {\n+    return subject;\n+  }\n+\n+  @Override\n+  public Map<String, Object> getMetaData()\n+  {\n+    return metaData;\n+  }\n+\n+  @Override\n+  public Optional<Status> terminationReason()\n+  {\n+    return terminationReason;\n+  }\n+\n+  @Override\n+  public boolean isUnderlyingTransaction(KernelTransaction tx)\n+  {\n+    return this.tx == tx;\n+  }\n+\n+  @Override\n+  public long getUserTransactionId()\n+  {\n+    return userTransactionId;\n+  }\n+\n+  @Override\n+  public String getUserTransactionName()\n+  {\n+    return USER_TRANSACTION_NAME_PREFIX + getUserTransactionId();\n+  }\n+\n+  @Override\n+  public Stream<ExecutingQuery> executingQueries()\n+  {\n+    return executingQueries.queries();\n+  }\n+\n+  @Override\n+  public Stream<? extends ActiveLock> activeLocks()\n+  {\n+    return tx.activeLocks();\n+  }\n+\n+  @Override\n+  public TransactionExecutionStatistic transactionStatistic()\n+  {\n+    if (txReuseCount == tx.getReuseCount())\n+    {\n+      return new TransactionExecutionStatistic(tx, clock, startTime);\n+    } else\n+    {\n+      return TransactionExecutionStatistic.NOT_AVAILABLE;\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+    {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+    KernelTransactionImplementationHandle that = (KernelTransactionImplementationHandle) o;\n+    return txReuseCount == that.txReuseCount && tx.equals(that.tx);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return 31 * (int) (txReuseCount ^ (txReuseCount >>> 32)) + tx.hashCode();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"KernelTransactionImplementationHandle{txReuseCount=\" + txReuseCount + \", tx=\" + tx + \"}\";\n+  }\n }\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "197",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/907/KernelTransactionImplementationHandle.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/907/KernelTransactionImplementationHandle.java\nindex e62ab16625b..16ffc8e0a56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/907/KernelTransactionImplementationHandle.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/907/KernelTransactionImplementationHandle.java\n@@ -40,8 +40,7 @@ import org.neo4j.time.SystemNanoClock;\n class KernelTransactionImplementationHandle implements KernelTransactionHandle\n {\n     private static final String USER_TRANSACTION_NAME_PREFIX = \"transaction-\";\n-\n-    private final long txReuseCount;\n+private final long txReuseCount;\n     private final long lastTransactionIdWhenStarted;\n     private final long lastTransactionTimestampWhenStarted;\n     private final long startTime;\n@@ -182,18 +181,20 @@ class KernelTransactionImplementationHandle implements KernelTransactionHandle\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        KernelTransactionImplementationHandle that = (KernelTransactionImplementationHandle) o;\n+\n+KernelTransactionImplementationHandle that = (KernelTransactionImplementationHandle) o;\n         return txReuseCount == that.txReuseCount && tx.equals( that.tx );\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return 31 * (int) (txReuseCount ^ (txReuseCount >>> 32)) + tx.hashCode();\n+        return 31 * ( int) ( txReuseCount ^ ( txReuseCount >>> 32 )) + tx.hashCode();\n     }\n \n     @Override\n@@ -201,4 +202,4 @@ class KernelTransactionImplementationHandle implements KernelTransactionHandle\n     {\n         return \"KernelTransactionImplementationHandle{txReuseCount=\" + txReuseCount + \", tx=\" + tx + \"}\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}