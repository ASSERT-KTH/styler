{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3227",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3227/LogicalTransactionStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3227/LogicalTransactionStore.java\nindex f031ff07c51..47374abc86b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3227/LogicalTransactionStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3227/LogicalTransactionStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.IOException;\n@@ -30,69 +31,70 @@ import org.neo4j.kernel.impl.transaction.log.entry.CheckPoint;\n  */\n public interface LogicalTransactionStore\n {\n-    /**\n-     * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n-     * instances for committed transactions, starting from the specified {@code transactionIdToStartFrom}.\n-     * Transactions will be returned from the cursor in transaction-id-sequential order.\n-     *\n-     * @param transactionIdToStartFrom id of the first transaction that the cursor will return.\n-     * @return an {@link TransactionCursor} capable of returning {@link CommittedTransactionRepresentation} instances\n-     * for committed transactions, starting from the specified {@code transactionIdToStartFrom}.\n-     * @throws NoSuchTransactionException if the requested transaction hasn't been committed,\n-     * or if the transaction has been committed, but information about it is no longer available for some reason.\n-     * @throws IOException if there was an I/O related error looking for the start transaction.\n-     */\n-    TransactionCursor getTransactions( long transactionIdToStartFrom )\n-            throws IOException;\n+  /**\n+   * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n+   * instances for committed transactions, starting from the specified {@code transactionIdToStartFrom}.\n+   * Transactions will be returned from the cursor in transaction-id-sequential order.\n+   *\n+   * @param transactionIdToStartFrom id of the first transaction that the cursor will return.\n+   * @return an {@link TransactionCursor} capable of returning {@link CommittedTransactionRepresentation} instances\n+   * for committed transactions, starting from the specified {@code transactionIdToStartFrom}.\n+   * @throws NoSuchTransactionException if the requested transaction hasn't been committed,\n+   *                                    or if the transaction has been committed, but information about it is no longer available for some reason.\n+   * @throws IOException                if there was an I/O related error looking for the start transaction.\n+   */\n+  TransactionCursor getTransactions(long transactionIdToStartFrom)\n+      throws IOException;\n \n-    /**\n-     * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n-     * instances for committed transactions, starting from the specified {@link LogPosition}.\n-     * This is useful for placing a cursor at a position referred to by a {@link CheckPoint}.\n-     * Transactions will be returned from the cursor in transaction-id-sequential order.\n-     *\n-     * @param position {@link LogPosition} of the first transaction that the cursor will return.\n-     * @return an {@link TransactionCursor} capable of returning {@link CommittedTransactionRepresentation} instances\n-     * for committed transactions, starting from the specified {@code position}.\n-     * @throws NoSuchTransactionException if the requested transaction hasn't been committed,\n-     * or if the transaction has been committed, but information about it is no longer available for some reason.\n-     * @throws IOException if there was an I/O related error looking for the start transaction.\n-     */\n-    TransactionCursor getTransactions( LogPosition position ) throws IOException;\n+  /**\n+   * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n+   * instances for committed transactions, starting from the specified {@link LogPosition}.\n+   * This is useful for placing a cursor at a position referred to by a {@link CheckPoint}.\n+   * Transactions will be returned from the cursor in transaction-id-sequential order.\n+   *\n+   * @param position {@link LogPosition} of the first transaction that the cursor will return.\n+   * @return an {@link TransactionCursor} capable of returning {@link CommittedTransactionRepresentation} instances\n+   * for committed transactions, starting from the specified {@code position}.\n+   * @throws NoSuchTransactionException if the requested transaction hasn't been committed,\n+   *                                    or if the transaction has been committed, but information about it is no longer available for some reason.\n+   * @throws IOException                if there was an I/O related error looking for the start transaction.\n+   */\n+  TransactionCursor getTransactions(LogPosition position) throws IOException;\n \n-    /**\n-     * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n-     * instances for committed transactions, starting from the end of the whole transaction stream\n-     * back to (and including) the transaction at {@link LogPosition}.\n-     * Transactions will be returned in reverse order from the end of the transaction stream and backwards in\n-     * descending order of transaction id.\n-     *\n-     * @param backToPosition {@link LogPosition} of the lowest (last to be returned) transaction.\n-     * @return an {@link TransactionCursor} capable of returning {@link CommittedTransactionRepresentation} instances\n-     * for committed transactions in the given range in reverse order.\n-     * @throws IOException if there was an I/O related error looking for the start transaction.\n-     */\n-    TransactionCursor getTransactionsInReverseOrder( LogPosition backToPosition )\n-            throws IOException;\n+  /**\n+   * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n+   * instances for committed transactions, starting from the end of the whole transaction stream\n+   * back to (and including) the transaction at {@link LogPosition}.\n+   * Transactions will be returned in reverse order from the end of the transaction stream and backwards in\n+   * descending order of transaction id.\n+   *\n+   * @param backToPosition {@link LogPosition} of the lowest (last to be returned) transaction.\n+   * @return an {@link TransactionCursor} capable of returning {@link CommittedTransactionRepresentation} instances\n+   * for committed transactions in the given range in reverse order.\n+   * @throws IOException if there was an I/O related error looking for the start transaction.\n+   */\n+  TransactionCursor getTransactionsInReverseOrder(LogPosition backToPosition)\n+      throws IOException;\n \n-    /**\n-     * Looks up meta data about a committed transaction.\n-     *\n-     * @param transactionId id of the transaction to look up meta data for.\n-     * @return {@link TransactionMetadata} containing meta data about the specified transaction.\n-     * @throws NoSuchTransactionException if the requested transaction hasn't been committed,\n-     * or if the transaction has been committed, but information about it is no longer available for some reason.\n-     * @throws IOException if there was an I/O related error during reading the meta data.\n-     */\n-    TransactionMetadataCache.TransactionMetadata getMetadataFor( long transactionId )\n-            throws IOException;\n+  /**\n+   * Looks up meta data about a committed transaction.\n+   *\n+   * @param transactionId id of the transaction to look up meta data for.\n+   * @return {@link TransactionMetadata} containing meta data about the specified transaction.\n+   * @throws NoSuchTransactionException if the requested transaction hasn't been committed,\n+   *                                    or if the transaction has been committed, but information about it is no longer available for some reason.\n+   * @throws IOException                if there was an I/O related error during reading the meta data.\n+   */\n+  TransactionMetadataCache.TransactionMetadata getMetadataFor(long transactionId)\n+      throws IOException;\n \n-    /**\n-     * Checks if a transaction with a given transaction id exists on disk. This is to ensure that a transaction's\n-     * metadata is not found because it is cached, even if the tx has itself been pruned.\n-     * @param transactionId The id of the transaction to check.\n-     * @return true if there is currently a transaction log file containing this transaction, false otherwise.\n-     * @throws IOException If there was an I/O error during the lookup.\n-     */\n-    boolean existsOnDisk( long transactionId ) throws IOException;\n+  /**\n+   * Checks if a transaction with a given transaction id exists on disk. This is to ensure that a transaction's\n+   * metadata is not found because it is cached, even if the tx has itself been pruned.\n+   *\n+   * @param transactionId The id of the transaction to check.\n+   * @return true if there is currently a transaction log file containing this transaction, false otherwise.\n+   * @throws IOException If there was an I/O error during the lookup.\n+   */\n+  boolean existsOnDisk(long transactionId) throws IOException;\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3227/LogicalTransactionStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3227/LogicalTransactionStore.java\nindex f031ff07c51..fc7a166d068 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3227/LogicalTransactionStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3227/LogicalTransactionStore.java\n@@ -42,10 +42,9 @@ public interface LogicalTransactionStore\n      * or if the transaction has been committed, but information about it is no longer available for some reason.\n      * @throws IOException if there was an I/O related error looking for the start transaction.\n      */\n-    TransactionCursor getTransactions( long transactionIdToStartFrom )\n-            throws IOException;\n+    TransactionCursor getTransactions( long transactionIdToStartFrom ) throws IOException;\n \n-    /**\n+/**\n      * Acquires a {@link TransactionCursor cursor} which will provide {@link CommittedTransactionRepresentation}\n      * instances for committed transactions, starting from the specified {@link LogPosition}.\n      * This is useful for placing a cursor at a position referred to by a {@link CheckPoint}.\n@@ -72,10 +71,9 @@ public interface LogicalTransactionStore\n      * for committed transactions in the given range in reverse order.\n      * @throws IOException if there was an I/O related error looking for the start transaction.\n      */\n-    TransactionCursor getTransactionsInReverseOrder( LogPosition backToPosition )\n-            throws IOException;\n+    TransactionCursor getTransactionsInReverseOrder( LogPosition backToPosition ) throws IOException;\n \n-    /**\n+/**\n      * Looks up meta data about a committed transaction.\n      *\n      * @param transactionId id of the transaction to look up meta data for.\n@@ -84,10 +82,9 @@ public interface LogicalTransactionStore\n      * or if the transaction has been committed, but information about it is no longer available for some reason.\n      * @throws IOException if there was an I/O related error during reading the meta data.\n      */\n-    TransactionMetadataCache.TransactionMetadata getMetadataFor( long transactionId )\n-            throws IOException;\n+    TransactionMetadataCache.TransactionMetadata getMetadataFor( long transactionId ) throws IOException;\n \n-    /**\n+/**\n      * Checks if a transaction with a given transaction id exists on disk. This is to ensure that a transaction's\n      * metadata is not found because it is cached, even if the tx has itself been pruned.\n      * @param transactionId The id of the transaction to check.\n@@ -95,4 +92,4 @@ public interface LogicalTransactionStore\n      * @throws IOException If there was an I/O error during the lookup.\n      */\n     boolean existsOnDisk( long transactionId ) throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}