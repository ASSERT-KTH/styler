{
    "project_name": "wayshall-onetwo",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "85",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t\t\tthrow new BaseException(\"varName can not be blank!\");\n\t\t}\n\t\tConstraintValidatorContextImpl ctx = (ConstraintValidatorContextImpl)context;\n\t\tMap<String, Object> newAttributes = Maps.newHashMap(ctx.getConstraintDescriptor().getAttributes());\n\t\tnewAttributes.put(varName, varValue);\n\t\tConfigurablePropertyAccessor constraintDescriptor = SpringUtils.newPropertyAccessor(ctx.getConstraintDescriptor(), true);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "column": "85",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/34/BaseConstraintValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/34/BaseConstraintValidator.java\nindex 8a20ee87bfc..03f70fe943d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/34/BaseConstraintValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/34/BaseConstraintValidator.java\n@@ -17,24 +17,24 @@ import com.google.common.collect.Maps;\n  *\n  */\n abstract public class BaseConstraintValidator {\n-\t\n-\t/***\n-\t * \u6dfb\u52a0\u9519\u8bef\u6d88\u606f\u53d8\u91cf\uff0c\u4ee5\u4fbf\u56fd\u9645\u5316\n-\t * @author weishao zeng\n-\t * @param context\n-\t * @param varName\n-\t * @param varValue\n-\t */\n-\tprotected void addMessageFormatVariable(ConstraintValidatorContext context, String varName, Object varValue) {\n-\t\tif (StringUtils.isBlank(varName)) {\n-\t\t\tthrow new BaseException(\"varName can not be blank!\");\n-\t\t}\n-\t\tConstraintValidatorContextImpl ctx = (ConstraintValidatorContextImpl)context;\n-\t\tMap<String, Object> newAttributes = Maps.newHashMap(ctx.getConstraintDescriptor().getAttributes());\n-\t\tnewAttributes.put(varName, varValue);\n-\t\tConfigurablePropertyAccessor constraintDescriptor = SpringUtils.newPropertyAccessor(ctx.getConstraintDescriptor(), true);\n-\t\tconstraintDescriptor.setPropertyValue(\"attributes\", newAttributes);\n-\t}\n-\n-\t\n+\n+  /***\n+   * \u6dfb\u52a0\u9519\u8bef\u6d88\u606f\u53d8\u91cf\uff0c\u4ee5\u4fbf\u56fd\u9645\u5316\n+   * @author weishao zeng\n+   * @param context\n+   * @param varName\n+   * @param varValue\n+   */\n+  protected void addMessageFormatVariable(ConstraintValidatorContext context, String varName, Object varValue) {\n+    if (StringUtils.isBlank(varName)) {\n+      throw new BaseException(\"varName can not be blank!\");\n+    }\n+    ConstraintValidatorContextImpl ctx = (ConstraintValidatorContextImpl) context;\n+    Map<String, Object> newAttributes = Maps.newHashMap(ctx.getConstraintDescriptor().getAttributes());\n+    newAttributes.put(varName, varValue);\n+    ConfigurablePropertyAccessor constraintDescriptor = SpringUtils.newPropertyAccessor(ctx.getConstraintDescriptor(), true);\n+    constraintDescriptor.setPropertyValue(\"attributes\", newAttributes);\n+  }\n+\n+\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "column": "85",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/34/BaseConstraintValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/naturalize/34/BaseConstraintValidator.java\nindex 8a20ee87bfc..033e52cf19f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/34/BaseConstraintValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/naturalize/34/BaseConstraintValidator.java\n@@ -37,4 +37,4 @@ abstract public class BaseConstraintValidator {\n \t}\n \n \t\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "column": "85",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "column": "85",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}