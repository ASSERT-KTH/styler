{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1060",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "186",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1060/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1060/Configuration.java\nindex cfea5fe838b..09be6f3e022 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1060/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1060/Configuration.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import org.neo4j.io.ByteUnit;\n@@ -37,277 +38,277 @@ import static org.neo4j.io.ByteUnit.gibiBytes;\n  */\n public interface Configuration\n {\n-    /**\n-     * File name in which bad entries from the import will end up. This file will be created in the\n-     * database directory of the imported database, i.e. <into>/bad.log.\n-     */\n-    String BAD_FILE_NAME = \"bad.log\";\n-    long MAX_PAGE_CACHE_MEMORY = gibiBytes( 1 );\n-    int DEFAULT_MAX_MEMORY_PERCENT = 90;\n-\n-    /**\n-     * A {@link Stage} works with batches going through one or more {@link Step steps} where one or more threads\n-     * process batches at each {@link Step}. This setting dictates how big the batches that are passed around are.\n-     */\n-    default int batchSize()\n+  /**\n+   * File name in which bad entries from the import will end up. This file will be created in the\n+   * database directory of the imported database, i.e. <into>/bad.log.\n+   */\n+  String BAD_FILE_NAME = \"bad.log\";\n+  long MAX_PAGE_CACHE_MEMORY = gibiBytes(1);\n+  int DEFAULT_MAX_MEMORY_PERCENT = 90;\n+\n+  /**\n+   * A {@link Stage} works with batches going through one or more {@link Step steps} where one or more threads\n+   * process batches at each {@link Step}. This setting dictates how big the batches that are passed around are.\n+   */\n+  default int batchSize()\n+  {\n+    return 10_000;\n+  }\n+\n+  /**\n+   * For statistics the average processing time is based on total processing time divided by\n+   * number of batches processed. A total average is probably not that interesting so this configuration\n+   * option specifies how many of the latest processed batches counts in the equation above.\n+   */\n+  default int movingAverageSize()\n+  {\n+    return 100;\n+  }\n+\n+  /**\n+   * Rough max number of processors (CPU cores) simultaneously used in total by importer at any given time.\n+   * This value should be set while taking the necessary IO threads into account; the page cache and the operating\n+   * system will require a couple of threads between them, to handle the IO workload the importer generates.\n+   * Defaults to the value provided by the {@link Runtime#availableProcessors() jvm}. There's a discrete\n+   * number of threads that needs to be used just to get the very basics of the import working,\n+   * so for that reason there's no lower bound to this value.\n+   * \"Processor\" in the context of the batch importer is different from \"thread\" since when discovering\n+   * how many processors are fully in use there's a calculation where one thread takes up 0 < fraction <= 1\n+   * of a processor.\n+   */\n+  default int maxNumberOfProcessors()\n+  {\n+    return allAvailableProcessors();\n+  }\n+\n+  static int allAvailableProcessors()\n+  {\n+    return Runtime.getRuntime().availableProcessors();\n+  }\n+\n+  /**\n+   * @return number of relationships threshold for considering a node dense.\n+   */\n+  default int denseNodeThreshold()\n+  {\n+    return Integer.parseInt(dense_node_threshold.getDefaultValue());\n+  }\n+\n+  /**\n+   * @return amount of memory to reserve for the page cache. This should just be \"enough\" for it to be able\n+   * to sequentially read and write a couple of stores at a time. If configured too high then there will\n+   * be less memory available for other caches which are critical during the import. Optimal size is\n+   * estimated to be 100-200 MiB. The importer will figure out an optimal page size from this value,\n+   * with slightly bigger page size than \"normal\" random access use cases.\n+   */\n+  default long pageCacheMemory()\n+  {\n+    // Get the upper bound of what we can get from the default config calculation\n+    // We even want to limit amount of memory a bit more since we don't need very much during import\n+    long defaultPageCacheMemory = ConfiguringPageCacheFactory.defaultHeuristicPageCacheMemory();\n+    return min(MAX_PAGE_CACHE_MEMORY, defaultPageCacheMemory);\n+  }\n+\n+  /**\n+   * @return max memory to use for import cache data structures while importing.\n+   * This should exclude the memory acquired by this JVM. By default this returns total physical\n+   * memory on the machine it's running on minus the max memory of this JVM.\n+   * {@value #DEFAULT_MAX_MEMORY_PERCENT}% of that figure.\n+   * @throws UnsupportedOperationException if available memory couldn't be determined.\n+   */\n+  default long maxMemoryUsage()\n+  {\n+    return calculateMaxMemoryFromPercent(DEFAULT_MAX_MEMORY_PERCENT);\n+  }\n+\n+  /**\n+   * @return whether or not to do sequential flushing of the page cache in the during stages which\n+   * import nodes and relationships. Having this {@code true} will reduce random I/O and make most\n+   * writes happen in this single background thread and will greatly benefit hardware which generally\n+   * benefits from single sequential writer.\n+   */\n+  default boolean sequentialBackgroundFlushing()\n+  {\n+    return true;\n+  }\n+\n+  /**\n+   * Controls whether or not to write records in parallel. Multiple threads writing records in parallel\n+   * doesn't necessarily mean concurrent I/O because writing is separate from page cache eviction/flushing.\n+   */\n+  default boolean parallelRecordWrites()\n+  {\n+    // Defaults to true since this benefits virtually all environments\n+    return true;\n+  }\n+\n+  /**\n+   * Controls whether or not to read records in parallel in stages where there's no record writing.\n+   * Enabling this may result in multiple pages being read from underlying storage concurrently.\n+   */\n+  default boolean parallelRecordReads()\n+  {\n+    // Defaults to true since this benefits most environments\n+    return true;\n+  }\n+\n+  /**\n+   * Controls whether or not to read records in parallel in stages where there's concurrent record writing.\n+   * Enabling will probably increase concurrent I/O to a point which reduces performance if underlying storage\n+   * isn't great at concurrent I/O, especially if also {@link #parallelRecordWrites()} is enabled.\n+   */\n+  default boolean highIO()\n+  {\n+    // Defaults to false since some environments sees less performance with this enabled\n+    return false;\n+  }\n+\n+  /**\n+   * Whether or not to allocate memory for holding the cache on heap. The first alternative is to allocate\n+   * off-heap, but if there's no more available memory, but there might be in the heap the importer will\n+   * try to allocate chunks of the cache on heap instead. This config control whether or not to allow\n+   * this allocation to happen on heap.\n+   */\n+  default boolean allowCacheAllocationOnHeap()\n+  {\n+    return false;\n+  }\n+\n+  Configuration DEFAULT = new Configuration()\n+  {\n+  };\n+\n+  class Overridden implements Configuration\n+  {\n+    private final Configuration defaults;\n+    private final Config config;\n+\n+    public Overridden(Configuration defaults)\n     {\n-        return 10_000;\n+      this(defaults, Config.defaults());\n     }\n \n-    /**\n-     * For statistics the average processing time is based on total processing time divided by\n-     * number of batches processed. A total average is probably not that interesting so this configuration\n-     * option specifies how many of the latest processed batches counts in the equation above.\n-     */\n-    default int movingAverageSize()\n+    public Overridden(Configuration defaults, Config config)\n     {\n-        return 100;\n+      this.defaults = defaults;\n+      this.config = config;\n     }\n \n-    /**\n-     * Rough max number of processors (CPU cores) simultaneously used in total by importer at any given time.\n-     * This value should be set while taking the necessary IO threads into account; the page cache and the operating\n-     * system will require a couple of threads between them, to handle the IO workload the importer generates.\n-     * Defaults to the value provided by the {@link Runtime#availableProcessors() jvm}. There's a discrete\n-     * number of threads that needs to be used just to get the very basics of the import working,\n-     * so for that reason there's no lower bound to this value.\n-     *   \"Processor\" in the context of the batch importer is different from \"thread\" since when discovering\n-     * how many processors are fully in use there's a calculation where one thread takes up 0 < fraction <= 1\n-     * of a processor.\n-     */\n-    default int maxNumberOfProcessors()\n+    public Overridden(Config config)\n     {\n-        return allAvailableProcessors();\n+      this(Configuration.DEFAULT, config);\n     }\n \n-    static int allAvailableProcessors()\n+    @Override\n+    public long pageCacheMemory()\n     {\n-        return Runtime.getRuntime().availableProcessors();\n+      String pageCacheMemory = config.get(pagecache_memory);\n+      if (pageCacheMemory == null)\n+      {\n+        pageCacheMemory = ConfiguringPageCacheFactory.defaultHeuristicPageCacheMemory() + \"\";\n+      }\n+      return min(MAX_PAGE_CACHE_MEMORY, ByteUnit.parse(pageCacheMemory));\n     }\n \n-    /**\n-     * @return number of relationships threshold for considering a node dense.\n-     */\n-    default int denseNodeThreshold()\n+    @Override\n+    public int denseNodeThreshold()\n     {\n-        return Integer.parseInt( dense_node_threshold.getDefaultValue() );\n+      return config.getRaw().containsKey(dense_node_threshold.name())\n+          ? config.get(dense_node_threshold)\n+          : defaults.denseNodeThreshold();\n     }\n \n-    /**\n-     * @return amount of memory to reserve for the page cache. This should just be \"enough\" for it to be able\n-     * to sequentially read and write a couple of stores at a time. If configured too high then there will\n-     * be less memory available for other caches which are critical during the import. Optimal size is\n-     * estimated to be 100-200 MiB. The importer will figure out an optimal page size from this value,\n-     * with slightly bigger page size than \"normal\" random access use cases.\n-     */\n-    default long pageCacheMemory()\n+    @Override\n+    public int movingAverageSize()\n     {\n-        // Get the upper bound of what we can get from the default config calculation\n-        // We even want to limit amount of memory a bit more since we don't need very much during import\n-        long defaultPageCacheMemory = ConfiguringPageCacheFactory.defaultHeuristicPageCacheMemory();\n-        return min( MAX_PAGE_CACHE_MEMORY, defaultPageCacheMemory );\n+      return defaults.movingAverageSize();\n     }\n \n-    /**\n-     * @return max memory to use for import cache data structures while importing.\n-     * This should exclude the memory acquired by this JVM. By default this returns total physical\n-     * memory on the machine it's running on minus the max memory of this JVM.\n-     * {@value #DEFAULT_MAX_MEMORY_PERCENT}% of that figure.\n-     * @throws UnsupportedOperationException if available memory couldn't be determined.\n-     */\n-    default long maxMemoryUsage()\n+    @Override\n+    public boolean sequentialBackgroundFlushing()\n     {\n-        return calculateMaxMemoryFromPercent( DEFAULT_MAX_MEMORY_PERCENT );\n+      return defaults.sequentialBackgroundFlushing();\n     }\n \n-    /**\n-     * @return whether or not to do sequential flushing of the page cache in the during stages which\n-     * import nodes and relationships. Having this {@code true} will reduce random I/O and make most\n-     * writes happen in this single background thread and will greatly benefit hardware which generally\n-     * benefits from single sequential writer.\n-     */\n-    default boolean sequentialBackgroundFlushing()\n+    @Override\n+    public int batchSize()\n     {\n-        return true;\n+      return defaults.batchSize();\n     }\n \n-    /**\n-     * Controls whether or not to write records in parallel. Multiple threads writing records in parallel\n-     * doesn't necessarily mean concurrent I/O because writing is separate from page cache eviction/flushing.\n-     */\n-    default boolean parallelRecordWrites()\n+    @Override\n+    public int maxNumberOfProcessors()\n     {\n-        // Defaults to true since this benefits virtually all environments\n-        return true;\n+      return defaults.maxNumberOfProcessors();\n     }\n \n-    /**\n-     * Controls whether or not to read records in parallel in stages where there's no record writing.\n-     * Enabling this may result in multiple pages being read from underlying storage concurrently.\n-     */\n-    default boolean parallelRecordReads()\n+    @Override\n+    public boolean parallelRecordWrites()\n     {\n-        // Defaults to true since this benefits most environments\n-        return true;\n+      return defaults.parallelRecordWrites();\n     }\n \n-    /**\n-     * Controls whether or not to read records in parallel in stages where there's concurrent record writing.\n-     * Enabling will probably increase concurrent I/O to a point which reduces performance if underlying storage\n-     * isn't great at concurrent I/O, especially if also {@link #parallelRecordWrites()} is enabled.\n-     */\n-    default boolean highIO()\n+    @Override\n+    public boolean parallelRecordReads()\n     {\n-        // Defaults to false since some environments sees less performance with this enabled\n-        return false;\n+      return defaults.parallelRecordReads();\n     }\n \n-    /**\n-     * Whether or not to allocate memory for holding the cache on heap. The first alternative is to allocate\n-     * off-heap, but if there's no more available memory, but there might be in the heap the importer will\n-     * try to allocate chunks of the cache on heap instead. This config control whether or not to allow\n-     * this allocation to happen on heap.\n-     */\n-    default boolean allowCacheAllocationOnHeap()\n+    @Override\n+    public boolean highIO()\n     {\n-        return false;\n+      return defaults.highIO();\n     }\n \n-    Configuration DEFAULT = new Configuration()\n+    @Override\n+    public long maxMemoryUsage()\n     {\n-    };\n+      return defaults.maxMemoryUsage();\n+    }\n \n-    class Overridden implements Configuration\n+    @Override\n+    public boolean allowCacheAllocationOnHeap()\n     {\n-        private final Configuration defaults;\n-        private final Config config;\n-\n-        public Overridden( Configuration defaults )\n-        {\n-            this( defaults, Config.defaults() );\n-        }\n-\n-        public Overridden( Configuration defaults, Config config )\n-        {\n-            this.defaults = defaults;\n-            this.config = config;\n-        }\n-\n-        public Overridden( Config config )\n-        {\n-            this( Configuration.DEFAULT, config );\n-        }\n-\n-        @Override\n-        public long pageCacheMemory()\n-        {\n-            String pageCacheMemory = config.get( pagecache_memory );\n-            if ( pageCacheMemory == null )\n-            {\n-                pageCacheMemory = ConfiguringPageCacheFactory.defaultHeuristicPageCacheMemory() + \"\";\n-            }\n-            return min( MAX_PAGE_CACHE_MEMORY, ByteUnit.parse( pageCacheMemory ) );\n-        }\n-\n-        @Override\n-        public int denseNodeThreshold()\n-        {\n-            return config.getRaw().containsKey( dense_node_threshold.name() )\n-                   ? config.get( dense_node_threshold )\n-                   : defaults.denseNodeThreshold();\n-        }\n-\n-        @Override\n-        public int movingAverageSize()\n-        {\n-            return defaults.movingAverageSize();\n-        }\n-\n-        @Override\n-        public boolean sequentialBackgroundFlushing()\n-        {\n-            return defaults.sequentialBackgroundFlushing();\n-        }\n-\n-        @Override\n-        public int batchSize()\n-        {\n-            return defaults.batchSize();\n-        }\n-\n-        @Override\n-        public int maxNumberOfProcessors()\n-        {\n-            return defaults.maxNumberOfProcessors();\n-        }\n-\n-        @Override\n-        public boolean parallelRecordWrites()\n-        {\n-            return defaults.parallelRecordWrites();\n-        }\n-\n-        @Override\n-        public boolean parallelRecordReads()\n-        {\n-            return defaults.parallelRecordReads();\n-        }\n-\n-        @Override\n-        public boolean highIO()\n-        {\n-            return defaults.highIO();\n-        }\n-\n-        @Override\n-        public long maxMemoryUsage()\n-        {\n-            return defaults.maxMemoryUsage();\n-        }\n-\n-        @Override\n-        public boolean allowCacheAllocationOnHeap()\n-        {\n-            return defaults.allowCacheAllocationOnHeap();\n-        }\n+      return defaults.allowCacheAllocationOnHeap();\n     }\n+  }\n \n-    static Configuration withBatchSize( Configuration config, int batchSize )\n+  static Configuration withBatchSize(Configuration config, int batchSize)\n+  {\n+    return new Overridden(config)\n     {\n-        return new Overridden( config )\n-        {\n-            @Override\n-            public int batchSize()\n-            {\n-                return batchSize;\n-            }\n-        };\n-    }\n+      @Override\n+      public int batchSize()\n+      {\n+        return batchSize;\n+      }\n+    };\n+  }\n \n-    static boolean canDetectFreeMemory()\n+  static boolean canDetectFreeMemory()\n+  {\n+    return OsBeanUtil.getFreePhysicalMemory() != OsBeanUtil.VALUE_UNAVAILABLE;\n+  }\n+\n+  static long calculateMaxMemoryFromPercent(int percent)\n+  {\n+    if (percent < 1)\n     {\n-        return OsBeanUtil.getFreePhysicalMemory() != OsBeanUtil.VALUE_UNAVAILABLE;\n+      throw new IllegalArgumentException(\"Expected percentage to be > 0, was \" + percent);\n     }\n-\n-    static long calculateMaxMemoryFromPercent( int percent )\n+    if (percent > 100)\n     {\n-        if ( percent < 1 )\n-        {\n-            throw new IllegalArgumentException( \"Expected percentage to be > 0, was \" + percent );\n-        }\n-        if ( percent > 100 )\n-        {\n-            throw new IllegalArgumentException( \"Expected percentage to be < 100, was \" + percent );\n-        }\n-        long totalPhysicalMemory = OsBeanUtil.getTotalPhysicalMemory();\n-        if ( totalPhysicalMemory == OsBeanUtil.VALUE_UNAVAILABLE )\n-        {\n-            // Unable to detect amount of free memory, so rather max memory should be explicitly set\n-            // in order to get best performance. However let's just go with a default of 2G in this case.\n-            return gibiBytes( 2 );\n-        }\n-\n-        double factor = percent / 100D;\n-        return round( (totalPhysicalMemory - Runtime.getRuntime().maxMemory()) * factor );\n+      throw new IllegalArgumentException(\"Expected percentage to be < 100, was \" + percent);\n     }\n+    long totalPhysicalMemory = OsBeanUtil.getTotalPhysicalMemory();\n+    if (totalPhysicalMemory == OsBeanUtil.VALUE_UNAVAILABLE)\n+    {\n+      // Unable to detect amount of free memory, so rather max memory should be explicitly set\n+      // in order to get best performance. However let's just go with a default of 2G in this case.\n+      return gibiBytes(2);\n+    }\n+\n+    double factor = percent / 100D;\n+    return round((totalPhysicalMemory - Runtime.getRuntime().maxMemory()) * factor);\n+  }\n }\n",
            "diff_size": 393
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1060/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1060/Configuration.java\nindex cfea5fe838b..cd21b13f47f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1060/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1060/Configuration.java\n@@ -206,16 +206,15 @@ public interface Configuration\n             {\n                 pageCacheMemory = ConfiguringPageCacheFactory.defaultHeuristicPageCacheMemory() + \"\";\n             }\n-            return min( MAX_PAGE_CACHE_MEMORY, ByteUnit.parse( pageCacheMemory ) );\n+\n+return min( MAX_PAGE_CACHE_MEMORY, ByteUnit.parse( pageCacheMemory ) );\n         }\n \n         @Override\n         public int denseNodeThreshold()\n         {\n-            return config.getRaw().containsKey( dense_node_threshold.name() )\n-                   ? config.get( dense_node_threshold )\n-                   : defaults.denseNodeThreshold();\n-        }\n+            return config.getRaw().containsKey( dense_node_threshold.name() ) ? config.get( dense_node_threshold ) : defaults.denseNodeThreshold();\n+    }\n \n         @Override\n         public int movingAverageSize()\n@@ -295,7 +294,8 @@ public interface Configuration\n         {\n             throw new IllegalArgumentException( \"Expected percentage to be > 0, was \" + percent );\n         }\n-        if ( percent > 100 )\n+\n+if ( percent > 100 )\n         {\n             throw new IllegalArgumentException( \"Expected percentage to be < 100, was \" + percent );\n         }\n@@ -308,6 +308,6 @@ public interface Configuration\n         }\n \n         double factor = percent / 100D;\n-        return round( (totalPhysicalMemory - Runtime.getRuntime().maxMemory()) * factor );\n+        return round( ( totalPhysicalMemory - Runtime.getRuntime().maxMemory()) * factor );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}