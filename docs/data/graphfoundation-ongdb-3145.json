{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3145",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3145/Aggregator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3145/Aggregator.java\nindex 287c4294b91..64093f3a6a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3145/Aggregator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3145/Aggregator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.progress;\n \n import java.util.HashMap;\n@@ -28,76 +29,76 @@ import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n \n final class Aggregator\n {\n-    private final Map<ProgressListener, ProgressListener.MultiPartProgressListener.State> states = new HashMap<>();\n-    private final Indicator indicator;\n-    @SuppressWarnings( \"unused\"/*accessed through updater*/ )\n-    private volatile long progress;\n-    @SuppressWarnings( \"unused\"/*accessed through updater*/ )\n-    private volatile int last;\n-    private static final AtomicLongFieldUpdater<Aggregator> PROGRESS_UPDATER = newUpdater( Aggregator.class, \"progress\" );\n-    private static final AtomicIntegerFieldUpdater<Aggregator> LAST_UPDATER =\n-            AtomicIntegerFieldUpdater.newUpdater( Aggregator.class, \"last\" );\n-    private long totalCount;\n+  private final Map<ProgressListener, ProgressListener.MultiPartProgressListener.State> states = new HashMap<>();\n+  private final Indicator indicator;\n+  @SuppressWarnings(\"unused\"/*accessed through updater*/)\n+  private volatile long progress;\n+  @SuppressWarnings(\"unused\"/*accessed through updater*/)\n+  private volatile int last;\n+  private static final AtomicLongFieldUpdater<Aggregator> PROGRESS_UPDATER = newUpdater(Aggregator.class, \"progress\");\n+  private static final AtomicIntegerFieldUpdater<Aggregator> LAST_UPDATER =\n+      AtomicIntegerFieldUpdater.newUpdater(Aggregator.class, \"last\");\n+  private long totalCount;\n \n-    Aggregator( Indicator indicator )\n-    {\n-        this.indicator = indicator;\n-    }\n+  Aggregator(Indicator indicator)\n+  {\n+    this.indicator = indicator;\n+  }\n \n-    synchronized void add( ProgressListener progress, long totalCount )\n-    {\n-        states.put( progress, ProgressListener.MultiPartProgressListener.State.INIT );\n-        this.totalCount += totalCount;\n-    }\n+  synchronized void add(ProgressListener progress, long totalCount)\n+  {\n+    states.put(progress, ProgressListener.MultiPartProgressListener.State.INIT);\n+    this.totalCount += totalCount;\n+  }\n \n-    synchronized void initialize()\n+  synchronized void initialize()\n+  {\n+    indicator.startProcess(totalCount);\n+    if (states.isEmpty())\n     {\n-        indicator.startProcess( totalCount );\n-        if ( states.isEmpty() )\n-        {\n-            indicator.progress( 0, indicator.reportResolution() );\n-            indicator.completeProcess();\n-        }\n+      indicator.progress(0, indicator.reportResolution());\n+      indicator.completeProcess();\n     }\n+  }\n \n-    void update( long delta )\n+  void update(long delta)\n+  {\n+    long progress = PROGRESS_UPDATER.addAndGet(this, delta);\n+    int current = (int) ((progress * indicator.reportResolution()) / totalCount);\n+    for (int last = this.last; current > last; last = this.last)\n     {\n-        long progress = PROGRESS_UPDATER.addAndGet( this, delta );\n-        int current = (int) ((progress * indicator.reportResolution()) / totalCount);\n-        for ( int last = this.last; current > last; last = this.last )\n+      if (LAST_UPDATER.compareAndSet(this, last, current))\n+      {\n+        synchronized (this)\n         {\n-            if ( LAST_UPDATER.compareAndSet( this, last, current ) )\n-            {\n-                synchronized ( this )\n-                {\n-                    indicator.progress( last, current );\n-                }\n-            }\n+          indicator.progress(last, current);\n         }\n+      }\n     }\n+  }\n \n-    synchronized void start( ProgressListener.MultiPartProgressListener part )\n+  synchronized void start(ProgressListener.MultiPartProgressListener part)\n+  {\n+    if (states.put(part, ProgressListener.MultiPartProgressListener.State.LIVE) == ProgressListener.MultiPartProgressListener.State.INIT)\n     {\n-        if ( states.put( part, ProgressListener.MultiPartProgressListener.State.LIVE ) == ProgressListener.MultiPartProgressListener.State.INIT )\n-        {\n-            indicator.startPart( part.part, part.totalCount );\n-        }\n+      indicator.startPart(part.part, part.totalCount);\n     }\n+  }\n \n-    synchronized void complete( ProgressListener.MultiPartProgressListener part )\n+  synchronized void complete(ProgressListener.MultiPartProgressListener part)\n+  {\n+    if (states.remove(part) != null)\n     {\n-        if ( states.remove( part ) != null )\n-        {\n-            indicator.completePart( part.part );\n-            if ( states.isEmpty() )\n-            {\n-                indicator.completeProcess();\n-            }\n-        }\n+      indicator.completePart(part.part);\n+      if (states.isEmpty())\n+      {\n+        indicator.completeProcess();\n+      }\n     }\n+  }\n \n-    synchronized void signalFailure( Throwable e )\n-    {\n-        indicator.failure( e );\n-    }\n+  synchronized void signalFailure(Throwable e)\n+  {\n+    indicator.failure(e);\n+  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "44",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3145/Aggregator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3145/Aggregator.java\nindex 287c4294b91..c29027b8c1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3145/Aggregator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3145/Aggregator.java\n@@ -30,14 +30,15 @@ final class Aggregator\n {\n     private final Map<ProgressListener, ProgressListener.MultiPartProgressListener.State> states = new HashMap<>();\n     private final Indicator indicator;\n-    @SuppressWarnings( \"unused\"/*accessed through updater*/ )\n+\n+@SuppressWarnings( \"unused\"/*accessed through updater*/ )\n     private volatile long progress;\n-    @SuppressWarnings( \"unused\"/*accessed through updater*/ )\n+\n+@SuppressWarnings( \"unused\"/*accessed through updater*/ )\n     private volatile int last;\n     private static final AtomicLongFieldUpdater<Aggregator> PROGRESS_UPDATER = newUpdater( Aggregator.class, \"progress\" );\n-    private static final AtomicIntegerFieldUpdater<Aggregator> LAST_UPDATER =\n-            AtomicIntegerFieldUpdater.newUpdater( Aggregator.class, \"last\" );\n-    private long totalCount;\n+    private static final AtomicIntegerFieldUpdater<Aggregator> LAST_UPDATER = AtomicIntegerFieldUpdater.newUpdater( Aggregator.class, \"last\" );\n+private long totalCount;\n \n     Aggregator( Indicator indicator )\n     {\n@@ -63,8 +64,8 @@ final class Aggregator\n     void update( long delta )\n     {\n         long progress = PROGRESS_UPDATER.addAndGet( this, delta );\n-        int current = (int) ((progress * indicator.reportResolution()) / totalCount);\n-        for ( int last = this.last; current > last; last = this.last )\n+        int current = ( int) ((progress * indicator.reportResolution()) / totalCount);\n+        for ( int last = this.last; current> last; last = this.last )\n         {\n             if ( LAST_UPDATER.compareAndSet( this, last, current ) )\n             {\n@@ -100,4 +101,4 @@ final class Aggregator\n     {\n         indicator.failure( e );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}