{
    "project_name": "moquette-io-moquette",
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "warning",
                "message": "missing copyright header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "package io.moquette.persistence;\n\nimport io.moquette.broker.ISubscriptionsRepository;\nimport io.moquette.broker.subscriptions.Subscription;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/23/H2SubscriptionsRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/23/H2SubscriptionsRepository.java\nindex b4d5ba416fa..9495a2432a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/23/H2SubscriptionsRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/23/H2SubscriptionsRepository.java\n@@ -13,36 +13,36 @@ import java.util.List;\n \n public class H2SubscriptionsRepository implements ISubscriptionsRepository {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(H2SubscriptionsRepository.class);\n-    private static final String SUBSCRIPTIONS_MAP = \"subscriptions\";\n+  private static final Logger LOG = LoggerFactory.getLogger(H2SubscriptionsRepository.class);\n+  private static final String SUBSCRIPTIONS_MAP = \"subscriptions\";\n \n-    private MVMap<String, Subscription> subscriptions;\n+  private MVMap<String, Subscription> subscriptions;\n \n-    H2SubscriptionsRepository(MVStore mvStore) {\n-        this.subscriptions = mvStore.openMap(SUBSCRIPTIONS_MAP);\n-    }\n-\n-    @Override\n-    public List<Subscription> listAllSubscriptions() {\n-        LOG.debug(\"Retrieving existing subscriptions\");\n-\n-        List<Subscription> results = new ArrayList<>();\n-        Cursor<String, Subscription> mapCursor = subscriptions.cursor(null);\n-        while (mapCursor.hasNext()) {\n-            String subscriptionStr = mapCursor.next();\n-            results.add(mapCursor.getValue());\n-        }\n-        LOG.debug(\"Loaded {} subscriptions\", results.size());\n-        return results;\n-    }\n+  H2SubscriptionsRepository(MVStore mvStore) {\n+    this.subscriptions = mvStore.openMap(SUBSCRIPTIONS_MAP);\n+  }\n \n-    @Override\n-    public void addNewSubscription(Subscription subscription) {\n-        subscriptions.put(subscription.getTopicFilter() + \"-\" + subscription.getClientId(), subscription);\n-    }\n+  @Override\n+  public List<Subscription> listAllSubscriptions() {\n+    LOG.debug(\"Retrieving existing subscriptions\");\n \n-    @Override\n-    public void removeSubscription(String topicFilter, String clientID) {\n-        subscriptions.remove(topicFilter + \"-\" + clientID);\n+    List<Subscription> results = new ArrayList<>();\n+    Cursor<String, Subscription> mapCursor = subscriptions.cursor(null);\n+    while (mapCursor.hasNext()) {\n+      String subscriptionStr = mapCursor.next();\n+      results.add(mapCursor.getValue());\n     }\n+    LOG.debug(\"Loaded {} subscriptions\", results.size());\n+    return results;\n+  }\n+\n+  @Override\n+  public void addNewSubscription(Subscription subscription) {\n+    subscriptions.put(subscription.getTopicFilter() + \"-\" + subscription.getClientId(), subscription);\n+  }\n+\n+  @Override\n+  public void removeSubscription(String topicFilter, String clientID) {\n+    subscriptions.remove(topicFilter + \"-\" + clientID);\n+  }\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/23/H2SubscriptionsRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/23/H2SubscriptionsRepository.java\nindex b4d5ba416fa..c386ce65fb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/23/H2SubscriptionsRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/23/H2SubscriptionsRepository.java\n@@ -45,4 +45,4 @@ public class H2SubscriptionsRepository implements ISubscriptionsRepository {\n     public void removeSubscription(String topicFilter, String clientID) {\n         subscriptions.remove(topicFilter + \"-\" + clientID);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/23/H2SubscriptionsRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/23/H2SubscriptionsRepository.java\nindex b4d5ba416fa..4e6411380bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/23/H2SubscriptionsRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/23/H2SubscriptionsRepository.java\n@@ -7,15 +7,14 @@ import org.h2.mvstore.MVMap;\n import org.h2.mvstore.MVStore;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n+\n public class H2SubscriptionsRepository implements ISubscriptionsRepository {\n \n     private static final Logger LOG = LoggerFactory.getLogger(H2SubscriptionsRepository.class);\n     private static final String SUBSCRIPTIONS_MAP = \"subscriptions\";\n-\n     private MVMap<String, Subscription> subscriptions;\n \n     H2SubscriptionsRepository(MVStore mvStore) {\n@@ -25,7 +24,6 @@ public class H2SubscriptionsRepository implements ISubscriptionsRepository {\n     @Override\n     public List<Subscription> listAllSubscriptions() {\n         LOG.debug(\"Retrieving existing subscriptions\");\n-\n         List<Subscription> results = new ArrayList<>();\n         Cursor<String, Subscription> mapCursor = subscriptions.cursor(null);\n         while (mapCursor.hasNext()) {\n@@ -45,4 +43,4 @@ public class H2SubscriptionsRepository implements ISubscriptionsRepository {\n     public void removeSubscription(String topicFilter, String clientID) {\n         subscriptions.remove(topicFilter + \"-\" + clientID);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}