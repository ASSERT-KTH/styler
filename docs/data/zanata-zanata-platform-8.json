{
    "project_name": "zanata-zanata-platform",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "57",
                "column": "23",
                "severity": "error",
                "message": "'=' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n        // Compute the hmac on input data bytes\n        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n        return Base64.encodeBase64String(rawHmac);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/8/HmacUtil.java\nindex 2d8633a9f91..d2ef4b42672 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/8/HmacUtil.java\n@@ -54,7 +54,7 @@ public class HmacUtil {\n             throws IllegalArgumentException {\n \n         // Compute the hmac on input data bytes\n-        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n+        byte[] rawHmac =  getHmacSha1(key).doFinal(valueToDigest);\n         return Base64.encodeBase64String(rawHmac);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/8/HmacUtil.java\nindex 2d8633a9f91..a73a7a6e5fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/8/HmacUtil.java\n@@ -34,53 +34,53 @@ import java.security.NoSuchAlgorithmException;\n  */\n public class HmacUtil {\n \n-    private static final String HMAC_SHA1_ALGORITHM = \"HmacSHA1\";\n+  private static final String HMAC_SHA1_ALGORITHM = \"HmacSHA1\";\n \n-    /**\n-     * Generate SHA with given key and valueToDigest.\n-     * All values will using UTF-8 encoding.\n-     *\n-     * @param key - key for generate sha\n-     * @param valueToDigest - value for generate sha\n-     * @throws IllegalArgumentException\n-     */\n-    public static String hmacSha1(final String key, final String valueToDigest)\n-            throws IllegalArgumentException {\n-        return hmacSha1(StringUtils.getBytesUtf8(key),\n-                StringUtils.getBytesUtf8(valueToDigest));\n-    }\n+  /**\n+   * Generate SHA with given key and valueToDigest.\n+   * All values will using UTF-8 encoding.\n+   *\n+   * @param key           - key for generate sha\n+   * @param valueToDigest - value for generate sha\n+   * @throws IllegalArgumentException\n+   */\n+  public static String hmacSha1(final String key, final String valueToDigest)\n+    throws IllegalArgumentException {\n+    return hmacSha1(StringUtils.getBytesUtf8(key),\n+      StringUtils.getBytesUtf8(valueToDigest));\n+  }\n \n-    public static String hmacSha1(final byte[] key, final byte[] valueToDigest)\n-            throws IllegalArgumentException {\n+  public static String hmacSha1(final byte[] key, final byte[] valueToDigest)\n+    throws IllegalArgumentException {\n \n-        // Compute the hmac on input data bytes\n-        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n-        return Base64.encodeBase64String(rawHmac);\n-    }\n+    // Compute the hmac on input data bytes\n+    byte[] rawHmac = getHmacSha1(key).doFinal(valueToDigest);\n+    return Base64.encodeBase64String(rawHmac);\n+  }\n \n-    // Get an hmac_sha1 key from the raw key bytes\n-    private static Mac getHmacSha1(final byte[] key) {\n-        return getInitializedMac(HMAC_SHA1_ALGORITHM, key);\n-    }\n+  // Get an hmac_sha1 key from the raw key bytes\n+  private static Mac getHmacSha1(final byte[] key) {\n+    return getInitializedMac(HMAC_SHA1_ALGORITHM, key);\n+  }\n \n-    // Get an hmac_sha1 Mac instance and initialize with the signing key\n-    private static Mac\n-            getInitializedMac(final String algorithm, final byte[] key) {\n+  // Get an hmac_sha1 Mac instance and initialize with the signing key\n+  private static Mac\n+  getInitializedMac(final String algorithm, final byte[] key) {\n \n-        if (key == null) {\n-            throw new IllegalArgumentException(\"Null key\");\n-        }\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Null key\");\n+    }\n \n-        try {\n-            final SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);\n-            final Mac mac = Mac.getInstance(algorithm);\n-            mac.init(keySpec);\n-            return mac;\n-        } catch (final NoSuchAlgorithmException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (final InvalidKeyException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+    try {\n+      final SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);\n+      final Mac mac = Mac.getInstance(algorithm);\n+      mac.init(keySpec);\n+      return mac;\n+    } catch (final NoSuchAlgorithmException e) {\n+      throw new IllegalArgumentException(e);\n+    } catch (final InvalidKeyException e) {\n+      throw new IllegalArgumentException(e);\n     }\n+  }\n }\n \n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/8/HmacUtil.java\nindex 2d8633a9f91..f9d255bec2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/8/HmacUtil.java\n@@ -54,7 +54,7 @@ public class HmacUtil {\n             throws IllegalArgumentException {\n \n         // Compute the hmac on input data bytes\n-        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n+        byte[] rawHmac = getHmacSha1(key).doFinal(valueToDigest);\n         return Base64.encodeBase64String(rawHmac);\n     }\n \n@@ -82,5 +82,4 @@ public class HmacUtil {\n             throw new IllegalArgumentException(e);\n         }\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/8/HmacUtil.java\nindex 2d8633a9f91..eca2c5a32de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/8/HmacUtil.java\n@@ -23,7 +23,6 @@ package org.zanata.util;\n \n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.StringUtils;\n-\n import javax.crypto.Mac;\n import javax.crypto.spec.SecretKeySpec;\n import java.security.InvalidKeyException;\n@@ -32,8 +31,9 @@ import java.security.NoSuchAlgorithmException;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n-public class HmacUtil {\n \n+\n+public class HmacUtil {\n     private static final String HMAC_SHA1_ALGORITHM = \"HmacSHA1\";\n \n     /**\n@@ -44,33 +44,32 @@ public class HmacUtil {\n      * @param valueToDigest - value for generate sha\n      * @throws IllegalArgumentException\n      */\n-    public static String hmacSha1(final String key, final String valueToDigest)\n-            throws IllegalArgumentException {\n-        return hmacSha1(StringUtils.getBytesUtf8(key),\n-                StringUtils.getBytesUtf8(valueToDigest));\n+    public static String hmacSha1(final String key,\n+        final String valueToDigest) throws IllegalArgumentException {\n+        return hmacSha1(StringUtils.getBytesUtf8(key), StringUtils.getBytesUtf8(valueToDigest));\n     }\n \n-    public static String hmacSha1(final byte[] key, final byte[] valueToDigest)\n-            throws IllegalArgumentException {\n+    public static String hmacSha1(final byte[] key,\n+        final byte[] valueToDigest) throws IllegalArgumentException {\n \n         // Compute the hmac on input data bytes\n-        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n+        byte[] rawHmac = getHmacSha1(key).doFinal(valueToDigest);\n         return Base64.encodeBase64String(rawHmac);\n     }\n \n     // Get an hmac_sha1 key from the raw key bytes\n+\n     private static Mac getHmacSha1(final byte[] key) {\n         return getInitializedMac(HMAC_SHA1_ALGORITHM, key);\n     }\n \n     // Get an hmac_sha1 Mac instance and initialize with the signing key\n-    private static Mac\n-            getInitializedMac(final String algorithm, final byte[] key) {\n \n+    private static Mac getInitializedMac(final String algorithm,\n+        final byte[] key) {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Null key\");\n         }\n-\n         try {\n             final SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);\n             final Mac mac = Mac.getInstance(algorithm);\n@@ -82,5 +81,4 @@ public class HmacUtil {\n             throw new IllegalArgumentException(e);\n         }\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/8/HmacUtil.java\nindex 2d8633a9f91..d2ef4b42672 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/8/HmacUtil.java\n@@ -54,7 +54,7 @@ public class HmacUtil {\n             throws IllegalArgumentException {\n \n         // Compute the hmac on input data bytes\n-        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n+        byte[] rawHmac =  getHmacSha1(key).doFinal(valueToDigest);\n         return Base64.encodeBase64String(rawHmac);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/8/HmacUtil.java\nindex 2d8633a9f91..e543d92ea46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/8/HmacUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/8/HmacUtil.java\n@@ -54,7 +54,7 @@ public class HmacUtil {\n             throws IllegalArgumentException {\n \n         // Compute the hmac on input data bytes\n-        byte[] rawHmac=  getHmacSha1(key).doFinal(valueToDigest);\n+        byte[] rawHmac = getHmacSha1(key).doFinal(valueToDigest);\n         return Base64.encodeBase64String(rawHmac);\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}