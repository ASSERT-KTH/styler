{
    "project_name": "opencb-opencga",
    "error_id": "210",
    "information": {
        "errors": [
            {
                "line": "208",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        logger.debug(\"Deleting individual information\");\n        ObjectMap params = new ObjectMap();\n        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n\n        return openCGAClient.getIndividualClient().delete(individualsCommandOptions.deleteCommandOptions.individual, params);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/210/IndividualCommandExecutor.java\nindex 12d8fdb54df..a9ec4c6c1df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/210/IndividualCommandExecutor.java\n@@ -205,7 +205,7 @@ public class IndividualCommandExecutor extends OpencgaCommandExecutor {\n     private RestResponse<Individual> delete() throws ClientException {\n         logger.debug(\"Deleting individual information\");\n         ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n+params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n \n         return openCGAClient.getIndividualClient().delete(individualsCommandOptions.deleteCommandOptions.individual, params);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/210/IndividualCommandExecutor.java\nindex 12d8fdb54df..7ebfe818d44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/210/IndividualCommandExecutor.java\n@@ -46,263 +46,263 @@ import java.util.stream.Collectors;\n  */\n public class IndividualCommandExecutor extends OpencgaCommandExecutor {\n \n-    private IndividualCommandOptions individualsCommandOptions;\n-\n-    public IndividualCommandExecutor(IndividualCommandOptions individualsCommandOptions) {\n-        super(individualsCommandOptions.commonCommandOptions);\n-        this.individualsCommandOptions = individualsCommandOptions;\n-    }\n-\n-\n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing individuals command line\");\n-\n-        String subCommandString = getParsedSubCommand(individualsCommandOptions.jCommander);\n-        RestResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"search\":\n-                queryResponse = search();\n-                break;\n-            case \"update\":\n-                queryResponse = update();\n-                break;\n-            case \"delete\":\n-                queryResponse = delete();\n-                break;\n-            case \"stats\":\n-                queryResponse = stats();\n-                break;\n-            case \"samples\":\n-                queryResponse = getSamples();\n-                break;\n-            case \"acl\":\n-                queryResponse = acl();\n-                break;\n-            case \"acl-update\":\n-                queryResponse = updateAcl();\n-                break;\n-            case \"annotation-sets-update\":\n-                queryResponse = updateAnnotations();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private RestResponse<Individual> create() throws ClientException {\n-        logger.debug(\"Creating individual\");\n-\n-        IndividualCommandOptions.CreateCommandOptions commandOptions = individualsCommandOptions.createCommandOptions;\n-\n-        IndividualCreateParams createParams = new IndividualCreateParams()\n-                .setId(commandOptions.id)\n-                .setName(commandOptions.name)\n-                .setFather(commandOptions.fatherId)\n-                .setMother(commandOptions.motherId)\n-                .setSex(commandOptions.sex)\n-                .setParentalConsanguinity(commandOptions.parentalConsanguinity)\n-                .setEthnicity(commandOptions.ethnicity)\n-                .setPopulation(new IndividualPopulation(commandOptions.populationName, commandOptions.populationSubpopulation,\n-                        commandOptions.populationDescription))\n-                .setKaryotypicSex(commandOptions.karyotypicSex)\n-                .setLifeStatus(commandOptions.lifeStatus)\n-                .setDateOfBirth(commandOptions.dateOfBirth)\n-                .setSamples(commandOptions.samples != null\n-                        ? commandOptions.samples.stream().map(s -> new SampleCreateParams().setId(s)).collect(Collectors.toList())\n-                        : Collections.emptyList());\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-\n-        return openCGAClient.getIndividualClient().create(createParams, params);\n-    }\n-\n-    private RestResponse<Individual> info() throws ClientException {\n-        logger.debug(\"Getting individual information\");\n-\n-        IndividualCommandOptions.InfoCommandOptions commandOptions = individualsCommandOptions.infoCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        params.putIfNotNull(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n-        params.putIfNotNull(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n-        params.put(\"flattenAnnotations\", commandOptions.flattenAnnotations);\n-\n-        return openCGAClient.getIndividualClient().info(commandOptions.individual, params);\n-    }\n-\n-    private RestResponse<Individual> search() throws ClientException {\n-        logger.debug(\"Searching individuals\");\n-\n-        IndividualCommandOptions.SearchCommandOptions commandOptions = individualsCommandOptions.searchCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.ID.key(), commandOptions.name);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.FATHER.key(), commandOptions.fatherId);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.MOTHER.key(), commandOptions.motherId);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.SEX.key(), commandOptions.sex);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.ETHNICITY.key(), commandOptions.ethnicity);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.SAMPLES.key(), commandOptions.samples);\n-\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.POPULATION_NAME.key(), commandOptions.populationName);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.POPULATION_SUBPOPULATION.key(), commandOptions.populationSubpopulation);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.POPULATION_DESCRIPTION.key(), commandOptions.populationDescription);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.KARYOTYPIC_SEX.key(), commandOptions.karyotypicSex);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.LIFE_STATUS.key(), commandOptions.lifeStatus);\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.ANNOTATION.key(), commandOptions.annotation);\n-        params.put(\"flattenAnnotations\", commandOptions.flattenAnnotations);\n-        params.putAll(commandOptions.commonOptions.params);\n-\n-        params.put(QueryOptions.COUNT, commandOptions.numericOptions.count);\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n-        params.put(QueryOptions.SKIP, commandOptions.numericOptions.skip);\n-        params.put(QueryOptions.LIMIT, commandOptions.numericOptions.limit);\n-\n-        return openCGAClient.getIndividualClient().search(params);\n-    }\n-\n-\n-    private RestResponse<Individual> update() throws ClientException {\n-        logger.debug(\"Updating individual information\");\n-\n-        IndividualCommandOptions.UpdateCommandOptions commandOptions = individualsCommandOptions.updateCommandOptions;\n-\n-        IndividualUpdateParams updateParams = new IndividualUpdateParams()\n-                .setId(commandOptions.name)\n-                .setName(commandOptions.name)\n-                .setFather(commandOptions.fatherId)\n-                .setMother(commandOptions.motherId)\n-                .setDateOfBirth(commandOptions.dateOfBirth)\n-                .setSex(commandOptions.sex)\n-                .setEthnicity(commandOptions.ethnicity)\n-                .setKaryotypicSex(commandOptions.karyotypicSex)\n-                .setLifeStatus(commandOptions.lifeStatus)\n-                .setAffectationStatus(commandOptions.affectationStatus);\n-        if (StringUtils.isNotEmpty(commandOptions.populationDescription) || StringUtils.isNotEmpty(commandOptions.populationName)\n-                || StringUtils.isNotEmpty(commandOptions.populationSubpopulation)) {\n-            updateParams.setPopulation(new IndividualPopulation(commandOptions.name, commandOptions.populationSubpopulation,\n-                    commandOptions.populationDescription));\n-        }\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-\n-        return openCGAClient.getIndividualClient().update(commandOptions.individual, updateParams, params);\n-    }\n-\n-    private RestResponse<Individual> delete() throws ClientException {\n-        logger.debug(\"Deleting individual information\");\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n-\n-        return openCGAClient.getIndividualClient().delete(individualsCommandOptions.deleteCommandOptions.individual, params);\n+  private IndividualCommandOptions individualsCommandOptions;\n+\n+  public IndividualCommandExecutor(IndividualCommandOptions individualsCommandOptions) {\n+    super(individualsCommandOptions.commonCommandOptions);\n+    this.individualsCommandOptions = individualsCommandOptions;\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing individuals command line\");\n+\n+    String subCommandString = getParsedSubCommand(individualsCommandOptions.jCommander);\n+    RestResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"search\":\n+        queryResponse = search();\n+        break;\n+      case \"update\":\n+        queryResponse = update();\n+        break;\n+      case \"delete\":\n+        queryResponse = delete();\n+        break;\n+      case \"stats\":\n+        queryResponse = stats();\n+        break;\n+      case \"samples\":\n+        queryResponse = getSamples();\n+        break;\n+      case \"acl\":\n+        queryResponse = acl();\n+        break;\n+      case \"acl-update\":\n+        queryResponse = updateAcl();\n+        break;\n+      case \"annotation-sets-update\":\n+        queryResponse = updateAnnotations();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n-    private RestResponse<Sample> getSamples() throws ClientException {\n-        logger.debug(\"Getting samples of individual(s)\");\n-\n-        IndividualCommandOptions.SampleCommandOptions commandOptions = individualsCommandOptions.sampleCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(SampleDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        params.putIfNotEmpty(SampleDBAdaptor.QueryParams.INDIVIDUAL_UID.key(), commandOptions.individual);\n-\n-        params.putIfNotNull(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n-        params.putIfNotNull(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n-\n-        return openCGAClient.getSampleClient().search(params);\n+    createOutput(queryResponse);\n+  }\n+\n+  private RestResponse<Individual> create() throws ClientException {\n+    logger.debug(\"Creating individual\");\n+\n+    IndividualCommandOptions.CreateCommandOptions commandOptions = individualsCommandOptions.createCommandOptions;\n+\n+    IndividualCreateParams createParams = new IndividualCreateParams()\n+        .setId(commandOptions.id)\n+        .setName(commandOptions.name)\n+        .setFather(commandOptions.fatherId)\n+        .setMother(commandOptions.motherId)\n+        .setSex(commandOptions.sex)\n+        .setParentalConsanguinity(commandOptions.parentalConsanguinity)\n+        .setEthnicity(commandOptions.ethnicity)\n+        .setPopulation(new IndividualPopulation(commandOptions.populationName, commandOptions.populationSubpopulation,\n+            commandOptions.populationDescription))\n+        .setKaryotypicSex(commandOptions.karyotypicSex)\n+        .setLifeStatus(commandOptions.lifeStatus)\n+        .setDateOfBirth(commandOptions.dateOfBirth)\n+        .setSamples(commandOptions.samples != null\n+            ? commandOptions.samples.stream().map(s -> new SampleCreateParams().setId(s)).collect(Collectors.toList())\n+            : Collections.emptyList());\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+\n+    return openCGAClient.getIndividualClient().create(createParams, params);\n+  }\n+\n+  private RestResponse<Individual> info() throws ClientException {\n+    logger.debug(\"Getting individual information\");\n+\n+    IndividualCommandOptions.InfoCommandOptions commandOptions = individualsCommandOptions.infoCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    params.putIfNotNull(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n+    params.putIfNotNull(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n+    params.put(\"flattenAnnotations\", commandOptions.flattenAnnotations);\n+\n+    return openCGAClient.getIndividualClient().info(commandOptions.individual, params);\n+  }\n+\n+  private RestResponse<Individual> search() throws ClientException {\n+    logger.debug(\"Searching individuals\");\n+\n+    IndividualCommandOptions.SearchCommandOptions commandOptions = individualsCommandOptions.searchCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.ID.key(), commandOptions.name);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.FATHER.key(), commandOptions.fatherId);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.MOTHER.key(), commandOptions.motherId);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.SEX.key(), commandOptions.sex);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.ETHNICITY.key(), commandOptions.ethnicity);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.SAMPLES.key(), commandOptions.samples);\n+\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.POPULATION_NAME.key(), commandOptions.populationName);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.POPULATION_SUBPOPULATION.key(), commandOptions.populationSubpopulation);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.POPULATION_DESCRIPTION.key(), commandOptions.populationDescription);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.KARYOTYPIC_SEX.key(), commandOptions.karyotypicSex);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.LIFE_STATUS.key(), commandOptions.lifeStatus);\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.ANNOTATION.key(), commandOptions.annotation);\n+    params.put(\"flattenAnnotations\", commandOptions.flattenAnnotations);\n+    params.putAll(commandOptions.commonOptions.params);\n+\n+    params.put(QueryOptions.COUNT, commandOptions.numericOptions.count);\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n+    params.put(QueryOptions.SKIP, commandOptions.numericOptions.skip);\n+    params.put(QueryOptions.LIMIT, commandOptions.numericOptions.limit);\n+\n+    return openCGAClient.getIndividualClient().search(params);\n+  }\n+\n+\n+  private RestResponse<Individual> update() throws ClientException {\n+    logger.debug(\"Updating individual information\");\n+\n+    IndividualCommandOptions.UpdateCommandOptions commandOptions = individualsCommandOptions.updateCommandOptions;\n+\n+    IndividualUpdateParams updateParams = new IndividualUpdateParams()\n+        .setId(commandOptions.name)\n+        .setName(commandOptions.name)\n+        .setFather(commandOptions.fatherId)\n+        .setMother(commandOptions.motherId)\n+        .setDateOfBirth(commandOptions.dateOfBirth)\n+        .setSex(commandOptions.sex)\n+        .setEthnicity(commandOptions.ethnicity)\n+        .setKaryotypicSex(commandOptions.karyotypicSex)\n+        .setLifeStatus(commandOptions.lifeStatus)\n+        .setAffectationStatus(commandOptions.affectationStatus);\n+    if (StringUtils.isNotEmpty(commandOptions.populationDescription) || StringUtils.isNotEmpty(commandOptions.populationName)\n+        || StringUtils.isNotEmpty(commandOptions.populationSubpopulation)) {\n+      updateParams.setPopulation(new IndividualPopulation(commandOptions.name, commandOptions.populationSubpopulation,\n+          commandOptions.populationDescription));\n     }\n \n-    private RestResponse<ObjectMap> updateAcl() throws CatalogException, ClientException {\n-        IndividualCommandOptions.IndividualAclCommandOptions.AclsUpdateCommandOptions commandOptions =\n-                individualsCommandOptions.aclsUpdateCommandOptions;\n-\n-        IndividualAclUpdateParams updateParams = new IndividualAclUpdateParams()\n-                .setIndividual(extractIdsFromListOrFile(commandOptions.id))\n-                .setSample(extractIdsFromListOrFile(commandOptions.sample))\n-                .setPermissions(commandOptions.permissions)\n-                .setAction(commandOptions.action)\n-                .setPropagate(commandOptions.propagate);\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotNull(\"study\", commandOptions.study);\n-\n-        return openCGAClient.getIndividualClient().updateAcl(commandOptions.memberId, updateParams, params);\n-    }\n-\n-    private RestResponse<FacetField> stats() throws ClientException {\n-        logger.debug(\"Individual stats\");\n-\n-        IndividualCommandOptions.StatsCommandOptions commandOptions = individualsCommandOptions.statsCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), commandOptions.study);\n-        params.putIfNotEmpty(\"creationYear\", commandOptions.creationYear);\n-        params.putIfNotEmpty(\"creationMonth\", commandOptions.creationMonth);\n-        params.putIfNotEmpty(\"creationDay\", commandOptions.creationDay);\n-        params.putIfNotEmpty(\"creationDayOfWeek\", commandOptions.creationDayOfWeek);\n-        params.putIfNotEmpty(\"status\", commandOptions.status);\n-        params.putIfNotEmpty(\"lifeStatus\", commandOptions.lifeStatus);\n-        params.putIfNotEmpty(\"affectationStatus\", commandOptions.affectationStatus);\n-        params.putIfNotEmpty(\"numSamples\", commandOptions.numSamples);\n-        params.putIfNotEmpty(\"numMultiples\", commandOptions.numMultiples);\n-        params.putIfNotEmpty(\"multiplesType\", commandOptions.multiplesType);\n-        params.putIfNotEmpty(\"sex\", commandOptions.sex);\n-        params.putIfNotEmpty(\"karyotypicSex\", commandOptions.karyotypicSex);\n-        params.putIfNotEmpty(\"ethnicity\", commandOptions.ethnicity);\n-        params.putIfNotEmpty(\"population\", commandOptions.population);\n-        params.putIfNotEmpty(\"phenotypes\", commandOptions.phenotypes);\n-        params.putIfNotEmpty(\"release\", commandOptions.release);\n-        params.putIfNotEmpty(\"version\", commandOptions.version);\n-        params.putIfNotNull(\"hasFather\", commandOptions.hasFather);\n-        params.putIfNotNull(\"hasMother\", commandOptions.hasMother);\n-        params.putIfNotNull(\"parentalConsanguinity\", commandOptions.parentalConsanguinity);\n-        params.putIfNotEmpty(Constants.ANNOTATION, commandOptions.annotation);\n-\n-        params.put(\"default\", commandOptions.defaultStats);\n-        params.putIfNotNull(\"field\", commandOptions.field);\n-\n-        return openCGAClient.getIndividualClient().aggregationStats(params);\n-    }\n-\n-    private RestResponse<Individual> updateAnnotations() throws ClientException, IOException {\n-        AnnotationCommandOptions.AnnotationSetsUpdateCommandOptions commandOptions =\n-                individualsCommandOptions.annotationUpdateCommandOptions;\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectMap annotations = mapper.readValue(new File(commandOptions.annotations), ObjectMap.class);\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(\"study\", commandOptions.study);\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+\n+    return openCGAClient.getIndividualClient().update(commandOptions.individual, updateParams, params);\n+  }\n+\n+  private RestResponse<Individual> delete() throws ClientException {\n+    logger.debug(\"Deleting individual information\");\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n+\n+    return openCGAClient.getIndividualClient().delete(individualsCommandOptions.deleteCommandOptions.individual, params);\n+  }\n+\n+  private RestResponse<Sample> getSamples() throws ClientException {\n+    logger.debug(\"Getting samples of individual(s)\");\n+\n+    IndividualCommandOptions.SampleCommandOptions commandOptions = individualsCommandOptions.sampleCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(SampleDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    params.putIfNotEmpty(SampleDBAdaptor.QueryParams.INDIVIDUAL_UID.key(), commandOptions.individual);\n+\n+    params.putIfNotNull(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n+    params.putIfNotNull(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n+\n+    return openCGAClient.getSampleClient().search(params);\n+  }\n+\n+  private RestResponse<ObjectMap> updateAcl() throws CatalogException, ClientException {\n+    IndividualCommandOptions.IndividualAclCommandOptions.AclsUpdateCommandOptions commandOptions =\n+        individualsCommandOptions.aclsUpdateCommandOptions;\n+\n+    IndividualAclUpdateParams updateParams = new IndividualAclUpdateParams()\n+        .setIndividual(extractIdsFromListOrFile(commandOptions.id))\n+        .setSample(extractIdsFromListOrFile(commandOptions.sample))\n+        .setPermissions(commandOptions.permissions)\n+        .setAction(commandOptions.action)\n+        .setPropagate(commandOptions.propagate);\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotNull(\"study\", commandOptions.study);\n+\n+    return openCGAClient.getIndividualClient().updateAcl(commandOptions.memberId, updateParams, params);\n+  }\n+\n+  private RestResponse<FacetField> stats() throws ClientException {\n+    logger.debug(\"Individual stats\");\n+\n+    IndividualCommandOptions.StatsCommandOptions commandOptions = individualsCommandOptions.statsCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), commandOptions.study);\n+    params.putIfNotEmpty(\"creationYear\", commandOptions.creationYear);\n+    params.putIfNotEmpty(\"creationMonth\", commandOptions.creationMonth);\n+    params.putIfNotEmpty(\"creationDay\", commandOptions.creationDay);\n+    params.putIfNotEmpty(\"creationDayOfWeek\", commandOptions.creationDayOfWeek);\n+    params.putIfNotEmpty(\"status\", commandOptions.status);\n+    params.putIfNotEmpty(\"lifeStatus\", commandOptions.lifeStatus);\n+    params.putIfNotEmpty(\"affectationStatus\", commandOptions.affectationStatus);\n+    params.putIfNotEmpty(\"numSamples\", commandOptions.numSamples);\n+    params.putIfNotEmpty(\"numMultiples\", commandOptions.numMultiples);\n+    params.putIfNotEmpty(\"multiplesType\", commandOptions.multiplesType);\n+    params.putIfNotEmpty(\"sex\", commandOptions.sex);\n+    params.putIfNotEmpty(\"karyotypicSex\", commandOptions.karyotypicSex);\n+    params.putIfNotEmpty(\"ethnicity\", commandOptions.ethnicity);\n+    params.putIfNotEmpty(\"population\", commandOptions.population);\n+    params.putIfNotEmpty(\"phenotypes\", commandOptions.phenotypes);\n+    params.putIfNotEmpty(\"release\", commandOptions.release);\n+    params.putIfNotEmpty(\"version\", commandOptions.version);\n+    params.putIfNotNull(\"hasFather\", commandOptions.hasFather);\n+    params.putIfNotNull(\"hasMother\", commandOptions.hasMother);\n+    params.putIfNotNull(\"parentalConsanguinity\", commandOptions.parentalConsanguinity);\n+    params.putIfNotEmpty(Constants.ANNOTATION, commandOptions.annotation);\n+\n+    params.put(\"default\", commandOptions.defaultStats);\n+    params.putIfNotNull(\"field\", commandOptions.field);\n+\n+    return openCGAClient.getIndividualClient().aggregationStats(params);\n+  }\n+\n+  private RestResponse<Individual> updateAnnotations() throws ClientException, IOException {\n+    AnnotationCommandOptions.AnnotationSetsUpdateCommandOptions commandOptions =\n+        individualsCommandOptions.annotationUpdateCommandOptions;\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+    ObjectMap annotations = mapper.readValue(new File(commandOptions.annotations), ObjectMap.class);\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(\"study\", commandOptions.study);\n //        queryParams.putIfNotNull(\"action\", updateCommandOptions.action);\n \n-        return openCGAClient.getIndividualClient().updateAnnotations(commandOptions.id, commandOptions.annotationSetId, annotations,\n-                params);\n-    }\n+    return openCGAClient.getIndividualClient().updateAnnotations(commandOptions.id, commandOptions.annotationSetId, annotations,\n+        params);\n+  }\n \n-    private RestResponse<ObjectMap> acl() throws ClientException {\n-        AclCommandOptions.AclsCommandOptions commandOptions = individualsCommandOptions.aclsCommandOptions;\n+  private RestResponse<ObjectMap> acl() throws ClientException {\n+    AclCommandOptions.AclsCommandOptions commandOptions = individualsCommandOptions.aclsCommandOptions;\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(\"study\", commandOptions.study);\n-        params.putIfNotEmpty(\"member\", commandOptions.memberId);\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(\"study\", commandOptions.study);\n+    params.putIfNotEmpty(\"member\", commandOptions.memberId);\n \n-        params.putAll(commandOptions.commonOptions.params);\n+    params.putAll(commandOptions.commonOptions.params);\n \n-        return openCGAClient.getIndividualClient().acl(commandOptions.id, params);\n-    }\n+    return openCGAClient.getIndividualClient().acl(commandOptions.id, params);\n+  }\n \n \n }\n",
            "diff_size": 361
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/210/IndividualCommandExecutor.java\nindex 12d8fdb54df..37206cf1b7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/210/IndividualCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n import org.opencb.commons.datastore.core.FacetField;\n@@ -305,4 +303,4 @@ public class IndividualCommandExecutor extends OpencgaCommandExecutor {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/210/IndividualCommandExecutor.java\nindex 12d8fdb54df..a9ec4c6c1df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/210/IndividualCommandExecutor.java\n@@ -205,7 +205,7 @@ public class IndividualCommandExecutor extends OpencgaCommandExecutor {\n     private RestResponse<Individual> delete() throws ClientException {\n         logger.debug(\"Deleting individual information\");\n         ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n+params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n \n         return openCGAClient.getIndividualClient().delete(individualsCommandOptions.deleteCommandOptions.individual, params);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "208",
                    "column": "74",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "210",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/210/IndividualCommandExecutor.java\nindex 12d8fdb54df..20e59517d3f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/210/IndividualCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/210/IndividualCommandExecutor.java\n@@ -205,7 +205,9 @@ public class IndividualCommandExecutor extends OpencgaCommandExecutor {\n     private RestResponse<Individual> delete() throws ClientException {\n         logger.debug(\"Deleting individual information\");\n         ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(), resolveStudy(individualsCommandOptions.deleteCommandOptions.study));\n+        params.putIfNotEmpty(IndividualDBAdaptor.QueryParams.STUDY.key(),resolveStudy(individualsCommandOptions.deleteCommandOptions.\n+\n+        study ));\n \n         return openCGAClient.getIndividualClient().delete(individualsCommandOptions.deleteCommandOptions.individual, params);\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}