{
    "project_name": "graphfoundation-ongdb",
    "error_id": "684",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "138",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "425",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "473",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "486",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "613",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/684/StoreMigrator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/684/StoreMigrator.java\nindex fa4014dbd60..993b0eae626 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/684/StoreMigrator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/684/StoreMigrator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storemigration.participant;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -125,629 +126,625 @@ import static org.neo4j.unsafe.impl.batchimport.staging.ExecutionSupervisors.wit\n  */\n public class StoreMigrator extends AbstractStoreMigrationParticipant\n {\n-    private static final char TX_LOG_COUNTERS_SEPARATOR = 'A';\n-    public static final String CUSTOM_IO_EXCEPTION_MESSAGE =\n-            \"Migrating this version is not supported for custom IO configurations.\";\n-\n-    private final Config config;\n-    private final LogService logService;\n-    private final FileSystemAbstraction fileSystem;\n-    private final PageCache pageCache;\n-\n-    public StoreMigrator( FileSystemAbstraction fileSystem, PageCache pageCache, Config config,\n-            LogService logService )\n+  private static final char TX_LOG_COUNTERS_SEPARATOR = 'A';\n+  public static final String CUSTOM_IO_EXCEPTION_MESSAGE =\n+      \"Migrating this version is not supported for custom IO configurations.\";\n+\n+  private final Config config;\n+  private final LogService logService;\n+  private final FileSystemAbstraction fileSystem;\n+  private final PageCache pageCache;\n+\n+  public StoreMigrator(FileSystemAbstraction fileSystem, PageCache pageCache, Config config,\n+                       LogService logService)\n+  {\n+    super(\"Store files\");\n+    this.fileSystem = fileSystem;\n+    this.pageCache = pageCache;\n+    this.config = config;\n+    this.logService = logService;\n+  }\n+\n+  @Override\n+  public void migrate(File storeDir, File migrationDir, ProgressReporter progressReporter,\n+                      String versionToMigrateFrom, String versionToMigrateTo) throws IOException\n+  {\n+    if (versionToMigrateFrom.equals(StandardV2_3.STORE_VERSION))\n     {\n-        super( \"Store files\" );\n-        this.fileSystem = fileSystem;\n-        this.pageCache = pageCache;\n-        this.config = config;\n-        this.logService = logService;\n+      // These versions are not supported for block devices.\n+      CustomIOConfigValidator.assertCustomIOConfigNotUsed(config, CUSTOM_IO_EXCEPTION_MESSAGE);\n     }\n-\n-    @Override\n-    public void migrate( File storeDir, File migrationDir, ProgressReporter progressReporter,\n-            String versionToMigrateFrom, String versionToMigrateTo ) throws IOException\n+    // Extract information about the last transaction from legacy neostore\n+    File neoStore = new File(storeDir, DEFAULT_NAME);\n+    long lastTxId = MetaDataStore.getRecord(pageCache, neoStore, Position.LAST_TRANSACTION_ID);\n+    TransactionId lastTxInfo = extractTransactionIdInformation(neoStore, storeDir, lastTxId);\n+    LogPosition lastTxLogPosition = extractTransactionLogPosition(neoStore, storeDir, lastTxId);\n+    // Write the tx checksum to file in migrationDir, because we need it later when moving files into storeDir\n+    writeLastTxInformation(migrationDir, lastTxInfo);\n+    writeLastTxLogPosition(migrationDir, lastTxLogPosition);\n+\n+    if (versionToMigrateFrom.equals(\"vE.H.0\"))\n     {\n-        if ( versionToMigrateFrom.equals( StandardV2_3.STORE_VERSION ) )\n-        {\n-            // These versions are not supported for block devices.\n-            CustomIOConfigValidator.assertCustomIOConfigNotUsed( config, CUSTOM_IO_EXCEPTION_MESSAGE );\n-        }\n-        // Extract information about the last transaction from legacy neostore\n-        File neoStore = new File( storeDir, DEFAULT_NAME );\n-        long lastTxId = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_TRANSACTION_ID );\n-        TransactionId lastTxInfo = extractTransactionIdInformation( neoStore, storeDir, lastTxId );\n-        LogPosition lastTxLogPosition = extractTransactionLogPosition( neoStore, storeDir, lastTxId );\n-        // Write the tx checksum to file in migrationDir, because we need it later when moving files into storeDir\n-        writeLastTxInformation( migrationDir, lastTxInfo );\n-        writeLastTxLogPosition( migrationDir, lastTxLogPosition );\n-\n-        if ( versionToMigrateFrom.equals( \"vE.H.0\" ) )\n-        {\n-            // NOTE for 3.0 here is a special case for vE.H.0 \"from\" record format.\n-            // Legend has it that 3.0.5 enterprise changed store format without changing store version.\n-            // This was done to cheat the migrator to avoid doing store migration since the\n-            // format itself was backwards compatible. Immediately a problem was detected:\n-            // if a user uses 3.0.5 for a while and then goes back to a previous 3.0.x patch release\n-            // the db wouldn't recognize it was an incompatible downgrade and start up normally,\n-            // but read records with scrambled values and pointers, sort of.\n-            //\n-            // This condition has two functions:\n-            //  1. preventing actual store migration between vE.H.0 --> vE.H.0b\n-            //  2. making vE.H.0b used in any migration where either vE.H.0 or vE.H.0b is the existing format,\n-            //     this because vE.H.0b is a superset of vE.H.0 and sometimes (for 3.0.5) vE.H.0\n-            //     actually means vE.H.0b (in later version).\n-            //\n-            // In later versions of neo4j there are better mechanics in place so that a non-migration like this\n-            // can be performed w/o special casing. To not require backporting that functionality\n-            // this condition is here and should be removed in 3.1.\n-            versionToMigrateFrom = \"vE.H.0b\";\n-        }\n-        RecordFormats oldFormat = selectForVersion( versionToMigrateFrom );\n-        RecordFormats newFormat = selectForVersion( versionToMigrateTo );\n-        if ( FormatFamily.isHigherFamilyFormat( newFormat, oldFormat ) ||\n-             (FormatFamily.isSameFamily( oldFormat, newFormat ) && isDifferentCapabilities( oldFormat, newFormat )) )\n-        {\n-            // TODO if this store has relationship indexes then warn user about that they will be incorrect\n-            // after migration, because now we're rewriting the relationship ids.\n-\n-            // Some form of migration is required (a fallback/catch-all option)\n-            migrateWithBatchImporter( storeDir, migrationDir,\n-                    lastTxId, lastTxInfo.checksum(), lastTxLogPosition.getLogVersion(),\n-                    lastTxLogPosition.getByteOffset(), progressReporter, oldFormat, newFormat );\n-        }\n-        // update necessary neostore records\n-        LogPosition logPosition = readLastTxLogPosition( migrationDir );\n-        updateOrAddNeoStoreFieldsAsPartOfMigration( migrationDir, storeDir, versionToMigrateTo, logPosition );\n+      // NOTE for 3.0 here is a special case for vE.H.0 \"from\" record format.\n+      // Legend has it that 3.0.5 enterprise changed store format without changing store version.\n+      // This was done to cheat the migrator to avoid doing store migration since the\n+      // format itself was backwards compatible. Immediately a problem was detected:\n+      // if a user uses 3.0.5 for a while and then goes back to a previous 3.0.x patch release\n+      // the db wouldn't recognize it was an incompatible downgrade and start up normally,\n+      // but read records with scrambled values and pointers, sort of.\n+      //\n+      // This condition has two functions:\n+      //  1. preventing actual store migration between vE.H.0 --> vE.H.0b\n+      //  2. making vE.H.0b used in any migration where either vE.H.0 or vE.H.0b is the existing format,\n+      //     this because vE.H.0b is a superset of vE.H.0 and sometimes (for 3.0.5) vE.H.0\n+      //     actually means vE.H.0b (in later version).\n+      //\n+      // In later versions of neo4j there are better mechanics in place so that a non-migration like this\n+      // can be performed w/o special casing. To not require backporting that functionality\n+      // this condition is here and should be removed in 3.1.\n+      versionToMigrateFrom = \"vE.H.0b\";\n     }\n-\n-    private boolean isDifferentCapabilities( RecordFormats oldFormat, RecordFormats newFormat )\n+    RecordFormats oldFormat = selectForVersion(versionToMigrateFrom);\n+    RecordFormats newFormat = selectForVersion(versionToMigrateTo);\n+    if (FormatFamily.isHigherFamilyFormat(newFormat, oldFormat) ||\n+        (FormatFamily.isSameFamily(oldFormat, newFormat) && isDifferentCapabilities(oldFormat, newFormat)))\n     {\n-        return !oldFormat.hasCompatibleCapabilities( newFormat, CapabilityType.FORMAT );\n-    }\n-\n-    void writeLastTxInformation( File migrationDir, TransactionId txInfo ) throws IOException\n-    {\n-        writeTxLogCounters( fileSystem, lastTxInformationFile( migrationDir ),\n-                txInfo.transactionId(), txInfo.checksum(), txInfo.commitTimestamp() );\n-    }\n+      // TODO if this store has relationship indexes then warn user about that they will be incorrect\n+      // after migration, because now we're rewriting the relationship ids.\n \n-    void writeLastTxLogPosition( File migrationDir, LogPosition lastTxLogPosition ) throws IOException\n-    {\n-        writeTxLogCounters( fileSystem, lastTxLogPositionFile( migrationDir ),\n-                lastTxLogPosition.getLogVersion(), lastTxLogPosition.getByteOffset() );\n+      // Some form of migration is required (a fallback/catch-all option)\n+      migrateWithBatchImporter(storeDir, migrationDir,\n+          lastTxId, lastTxInfo.checksum(), lastTxLogPosition.getLogVersion(),\n+          lastTxLogPosition.getByteOffset(), progressReporter, oldFormat, newFormat);\n     }\n-\n-    TransactionId readLastTxInformation( File migrationDir ) throws IOException\n+    // update necessary neostore records\n+    LogPosition logPosition = readLastTxLogPosition(migrationDir);\n+    updateOrAddNeoStoreFieldsAsPartOfMigration(migrationDir, storeDir, versionToMigrateTo, logPosition);\n+  }\n+\n+  private boolean isDifferentCapabilities(RecordFormats oldFormat, RecordFormats newFormat)\n+  {\n+    return !oldFormat.hasCompatibleCapabilities(newFormat, CapabilityType.FORMAT);\n+  }\n+\n+  void writeLastTxInformation(File migrationDir, TransactionId txInfo) throws IOException\n+  {\n+    writeTxLogCounters(fileSystem, lastTxInformationFile(migrationDir),\n+        txInfo.transactionId(), txInfo.checksum(), txInfo.commitTimestamp());\n+  }\n+\n+  void writeLastTxLogPosition(File migrationDir, LogPosition lastTxLogPosition) throws IOException\n+  {\n+    writeTxLogCounters(fileSystem, lastTxLogPositionFile(migrationDir),\n+        lastTxLogPosition.getLogVersion(), lastTxLogPosition.getByteOffset());\n+  }\n+\n+  TransactionId readLastTxInformation(File migrationDir) throws IOException\n+  {\n+    long[] counters = readTxLogCounters(fileSystem, lastTxInformationFile(migrationDir), 3);\n+    return new TransactionId(counters[0], counters[1], counters[2]);\n+  }\n+\n+  LogPosition readLastTxLogPosition(File migrationDir) throws IOException\n+  {\n+    long[] counters = readTxLogCounters(fileSystem, lastTxLogPositionFile(migrationDir), 2);\n+    return new LogPosition(counters[0], counters[1]);\n+  }\n+\n+  private static void writeTxLogCounters(FileSystemAbstraction fs, File file, long... counters) throws IOException\n+  {\n+    try (Writer writer = fs.openAsWriter(file, StandardCharsets.UTF_8, false))\n     {\n-        long[] counters = readTxLogCounters( fileSystem, lastTxInformationFile( migrationDir ), 3 );\n-        return new TransactionId( counters[0], counters[1], counters[2] );\n+      writer.write(StringUtils.join(counters, TX_LOG_COUNTERS_SEPARATOR));\n     }\n+  }\n \n-    LogPosition readLastTxLogPosition( File migrationDir ) throws IOException\n+  private static long[] readTxLogCounters(FileSystemAbstraction fs, File file, int numberOfCounters)\n+      throws IOException\n+  {\n+    try (BufferedReader reader = new BufferedReader(fs.openAsReader(file, StandardCharsets.UTF_8)))\n     {\n-        long[] counters = readTxLogCounters( fileSystem, lastTxLogPositionFile( migrationDir ), 2 );\n-        return new LogPosition( counters[0], counters[1] );\n+      String line = reader.readLine();\n+      String[] split = StringUtils.split(line, TX_LOG_COUNTERS_SEPARATOR);\n+      if (split.length != numberOfCounters)\n+      {\n+        throw new IllegalArgumentException(\"Unexpected number of tx counters '\" + numberOfCounters +\n+            \"', file contains: '\" + line + \"'\");\n+      }\n+      long[] counters = new long[numberOfCounters];\n+      for (int i = 0; i < split.length; i++)\n+      {\n+        counters[i] = Long.parseLong(split[i]);\n+      }\n+      return counters;\n     }\n-\n-    private static void writeTxLogCounters( FileSystemAbstraction fs, File file, long... counters ) throws IOException\n+  }\n+\n+  private static File lastTxInformationFile(File migrationDir)\n+  {\n+    return new File(migrationDir, \"lastxinformation\");\n+  }\n+\n+  private static File lastTxLogPositionFile(File migrationDir)\n+  {\n+    return new File(migrationDir, \"lastxlogposition\");\n+  }\n+\n+  TransactionId extractTransactionIdInformation(File neoStore, File storeDir, long lastTransactionId)\n+      throws IOException\n+  {\n+    long checksum = MetaDataStore.getRecord(pageCache, neoStore, Position.LAST_TRANSACTION_CHECKSUM);\n+    long commitTimestamp = MetaDataStore.getRecord(pageCache, neoStore,\n+        Position.LAST_TRANSACTION_COMMIT_TIMESTAMP);\n+    if (checksum != FIELD_NOT_PRESENT && commitTimestamp != FIELD_NOT_PRESENT)\n     {\n-        try ( Writer writer = fs.openAsWriter( file, StandardCharsets.UTF_8, false ) )\n-        {\n-            writer.write( StringUtils.join( counters, TX_LOG_COUNTERS_SEPARATOR ) );\n-        }\n+      return new TransactionId(lastTransactionId, checksum, commitTimestamp);\n     }\n \n-    private static long[] readTxLogCounters( FileSystemAbstraction fs, File file, int numberOfCounters )\n-            throws IOException\n+    return specificTransactionInformationSupplier(lastTransactionId);\n+  }\n+\n+  /**\n+   * In case if we can't find information about transaction in logs we will create new transaction\n+   * information record.\n+   * Those should be used <b>only</b> in case if we do not have any transaction logs available during\n+   * migration.\n+   * <p>\n+   * Logs can be absent in two possible scenarios:\n+   * <ol>\n+   *     <li>We do not have any logs since there were not transaction.</li>\n+   *     <li>Logs are missing.</li>\n+   * </ol>\n+   * For both of those cases specific informational records will be produced.\n+   *\n+   * @param lastTransactionId last committed transaction id\n+   * @return supplier of custom id records.\n+   */\n+  private TransactionId specificTransactionInformationSupplier(long lastTransactionId)\n+  {\n+    return lastTransactionId == TransactionIdStore.BASE_TX_ID\n+        ? new TransactionId(lastTransactionId, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP)\n+        : new TransactionId(lastTransactionId, UNKNOWN_TX_CHECKSUM, UNKNOWN_TX_COMMIT_TIMESTAMP);\n+  }\n+\n+  LogPosition extractTransactionLogPosition(File neoStore, File storeDir, long lastTxId) throws IOException\n+  {\n+    long lastClosedTxLogVersion =\n+        MetaDataStore.getRecord(pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION);\n+    long lastClosedTxLogByteOffset =\n+        MetaDataStore.getRecord(pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET);\n+    if (lastClosedTxLogVersion != MetaDataRecordFormat.FIELD_NOT_PRESENT &&\n+        lastClosedTxLogByteOffset != MetaDataRecordFormat.FIELD_NOT_PRESENT)\n     {\n-        try ( BufferedReader reader = new BufferedReader( fs.openAsReader( file, StandardCharsets.UTF_8 ) ) )\n-        {\n-            String line = reader.readLine();\n-            String[] split = StringUtils.split( line, TX_LOG_COUNTERS_SEPARATOR );\n-            if ( split.length != numberOfCounters )\n-            {\n-                throw new IllegalArgumentException( \"Unexpected number of tx counters '\" + numberOfCounters +\n-                                                    \"', file contains: '\" + line + \"'\" );\n-            }\n-            long[] counters = new long[numberOfCounters];\n-            for ( int i = 0; i < split.length; i++ )\n-            {\n-                counters[i] = Long.parseLong( split[i] );\n-            }\n-            return counters;\n-        }\n+      return new LogPosition(lastClosedTxLogVersion, lastClosedTxLogByteOffset);\n     }\n \n-    private static File lastTxInformationFile( File migrationDir )\n+    // The legacy store we're migrating doesn't have this record in neostore so try to extract it from tx log\n+    if (lastTxId == TransactionIdStore.BASE_TX_ID)\n     {\n-        return new File( migrationDir, \"lastxinformation\" );\n+      return new LogPosition(BASE_TX_LOG_VERSION, BASE_TX_LOG_BYTE_OFFSET);\n     }\n \n-    private static File lastTxLogPositionFile( File migrationDir )\n+    LogFiles logFiles = LogFilesBuilder.activeFilesBuilder(storeDir, fileSystem, pageCache)\n+        .withConfig(config)\n+        .build();\n+    long logVersion = logFiles.getHighestLogVersion();\n+    if (logVersion == -1)\n     {\n-        return new File( migrationDir, \"lastxlogposition\" );\n+      return new LogPosition(BASE_TX_LOG_VERSION, BASE_TX_LOG_BYTE_OFFSET);\n     }\n-\n-    TransactionId extractTransactionIdInformation( File neoStore, File storeDir, long lastTransactionId )\n-            throws IOException\n+    long offset = fileSystem.getFileSize(logFiles.getHighestLogFile());\n+    return new LogPosition(logVersion, offset);\n+\n+  }\n+\n+  private void migrateWithBatchImporter(File storeDir, File migrationDir, long lastTxId, long lastTxChecksum,\n+                                        long lastTxLogVersion, long lastTxLogByteOffset, ProgressReporter progressReporter,\n+                                        RecordFormats oldFormat, RecordFormats newFormat)\n+      throws IOException\n+  {\n+    prepareBatchImportMigration(storeDir, migrationDir, oldFormat, newFormat);\n+\n+    boolean requiresDynamicStoreMigration = !newFormat.dynamic().equals(oldFormat.dynamic());\n+    boolean requiresPropertyMigration =\n+        !newFormat.property().equals(oldFormat.property()) || requiresDynamicStoreMigration;\n+    File badFile = new File(storeDir, Configuration.BAD_FILE_NAME);\n+    try (NeoStores legacyStore = instantiateLegacyStore(oldFormat, storeDir);\n+         OutputStream badOutput = new BufferedOutputStream(new FileOutputStream(badFile, false)))\n     {\n-        long checksum = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_TRANSACTION_CHECKSUM );\n-        long commitTimestamp = MetaDataStore.getRecord( pageCache, neoStore,\n-                Position.LAST_TRANSACTION_COMMIT_TIMESTAMP );\n-        if ( checksum != FIELD_NOT_PRESENT && commitTimestamp != FIELD_NOT_PRESENT )\n+      Configuration importConfig = new Configuration.Overridden(config)\n+      {\n+        @Override\n+        public boolean highIO()\n         {\n-            return new TransactionId( lastTransactionId, checksum, commitTimestamp );\n+          return FileUtils.highIODevice(storeDir.toPath(), super.highIO());\n         }\n-\n-        return specificTransactionInformationSupplier( lastTransactionId );\n-    }\n-\n-    /**\n-     * In case if we can't find information about transaction in logs we will create new transaction\n-     * information record.\n-     * Those should be used <b>only</b> in case if we do not have any transaction logs available during\n-     * migration.\n-     *\n-     * Logs can be absent in two possible scenarios:\n-     * <ol>\n-     *     <li>We do not have any logs since there were not transaction.</li>\n-     *     <li>Logs are missing.</li>\n-     * </ol>\n-     * For both of those cases specific informational records will be produced.\n-     *\n-     * @param lastTransactionId last committed transaction id\n-     * @return supplier of custom id records.\n-     */\n-    private TransactionId specificTransactionInformationSupplier( long lastTransactionId )\n-    {\n-        return lastTransactionId == TransactionIdStore.BASE_TX_ID\n-                                          ? new TransactionId( lastTransactionId, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP )\n-                                          : new TransactionId( lastTransactionId, UNKNOWN_TX_CHECKSUM, UNKNOWN_TX_COMMIT_TIMESTAMP );\n+      };\n+      AdditionalInitialIds additionalInitialIds =\n+          readAdditionalIds(lastTxId, lastTxChecksum, lastTxLogVersion, lastTxLogByteOffset);\n+\n+      // We have to make sure to keep the token ids if we're migrating properties/labels\n+      BatchImporter importer = BatchImporterFactory.withHighestPriority().instantiate(migrationDir.getAbsoluteFile(),\n+          fileSystem, pageCache, importConfig, logService,\n+          withDynamicProcessorAssignment(migrationBatchImporterMonitor(legacyStore, progressReporter,\n+              importConfig), importConfig), additionalInitialIds, config, newFormat, NO_MONITOR);\n+      InputIterable nodes = replayable(() -> legacyNodesAsInput(legacyStore, requiresPropertyMigration));\n+      InputIterable relationships = replayable(() ->\n+          legacyRelationshipsAsInput(legacyStore, requiresPropertyMigration));\n+      long propertyStoreSize = storeSize(legacyStore.getPropertyStore()) / 2 +\n+          storeSize(legacyStore.getPropertyStore().getStringStore()) / 2 +\n+          storeSize(legacyStore.getPropertyStore().getArrayStore()) / 2;\n+      Estimates estimates = knownEstimates(\n+          legacyStore.getNodeStore().getNumberOfIdsInUse(),\n+          legacyStore.getRelationshipStore().getNumberOfIdsInUse(),\n+          legacyStore.getPropertyStore().getNumberOfIdsInUse(),\n+          legacyStore.getPropertyStore().getNumberOfIdsInUse(),\n+          propertyStoreSize / 2, propertyStoreSize / 2,\n+          0 /*node labels left as 0 for now*/);\n+      importer.doImport(\n+          Inputs.input(nodes, relationships, IdMappers.actual(), Collectors.badCollector(badOutput, 0), estimates));\n+\n+      // During migration the batch importer doesn't necessarily writes all entities, depending on\n+      // which stores needs migration. Node, relationship, relationship group stores are always written\n+      // anyways and cannot be avoided with the importer, but delete the store files that weren't written\n+      // (left empty) so that we don't overwrite those in the real store directory later.\n+      Collection<StoreFile> storesToDeleteFromMigratedDirectory = new ArrayList<>();\n+      storesToDeleteFromMigratedDirectory.add(StoreFile.NEO_STORE);\n+      if (!requiresPropertyMigration)\n+      {\n+        // We didn't migrate properties, so the property stores in the migrated store are just empty/bogus\n+        storesToDeleteFromMigratedDirectory.addAll(asList(\n+            StoreFile.PROPERTY_STORE,\n+            StoreFile.PROPERTY_STRING_STORE,\n+            StoreFile.PROPERTY_ARRAY_STORE));\n+      }\n+      if (!requiresDynamicStoreMigration)\n+      {\n+        // We didn't migrate labels (dynamic node labels) or any other dynamic store\n+        storesToDeleteFromMigratedDirectory.addAll(asList(\n+            StoreFile.NODE_LABEL_STORE,\n+            StoreFile.LABEL_TOKEN_STORE,\n+            StoreFile.LABEL_TOKEN_NAMES_STORE,\n+            StoreFile.RELATIONSHIP_TYPE_TOKEN_STORE,\n+            StoreFile.RELATIONSHIP_TYPE_TOKEN_NAMES_STORE,\n+            StoreFile.PROPERTY_KEY_TOKEN_STORE,\n+            StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE,\n+            StoreFile.SCHEMA_STORE));\n+      }\n+      StoreFile.fileOperation(DELETE, fileSystem, migrationDir, null, storesToDeleteFromMigratedDirectory,\n+          true, null, StoreFileType.values());\n+      // When migrating on a block device there might be some files only accessible via the file system\n+      // provided by the page cache.\n+      try\n+      {\n+        Predicate<FileHandle> fileHandlePredicate = fileHandle -> storesToDeleteFromMigratedDirectory.stream()\n+            .anyMatch(storeFile -> storeFile.fileName(StoreFileType.STORE)\n+                .equals(fileHandle.getFile().getName()));\n+        pageCache.getCachedFileSystem().streamFilesRecursive(migrationDir).filter(fileHandlePredicate)\n+            .forEach(FileHandle.HANDLE_DELETE);\n+      } catch (NoSuchFileException e)\n+      {\n+        // This means that we had no files only present in the page cache, this is fine.\n+      }\n     }\n-\n-    LogPosition extractTransactionLogPosition( File neoStore, File storeDir, long lastTxId ) throws IOException\n+  }\n+\n+  private static long storeSize(CommonAbstractStore<? extends AbstractBaseRecord, ? extends StoreHeader> store)\n+  {\n+    return store.getNumberOfIdsInUse() * store.getRecordSize();\n+  }\n+\n+  private NeoStores instantiateLegacyStore(RecordFormats format, File storeDir)\n+  {\n+    return new StoreFactory(storeDir, config, new ReadOnlyIdGeneratorFactory(), pageCache, fileSystem,\n+        format, NullLogProvider.getInstance(), EmptyVersionContextSupplier.EMPTY).openAllNeoStores(true);\n+  }\n+\n+  private void prepareBatchImportMigration(File storeDir, File migrationDir, RecordFormats oldFormat,\n+                                           RecordFormats newFormat) throws IOException\n+  {\n+    createStore(migrationDir, newFormat);\n+\n+    // We use the batch importer for migrating the data, and we use it in a special way where we only\n+    // rewrite the stores that have actually changed format. We know that to be node and relationship\n+    // stores. Although since the batch importer also populates the counts store, all labels need to\n+    // be read, i.e. both inlined and those existing in dynamic records. That's why we need to copy\n+    // that dynamic record store over before doing the \"batch import\".\n+    //   Copying this file just as-is assumes that the format hasn't change. If that happens we're in\n+    // a different situation, where we first need to migrate this file.\n+\n+    // The token stores also need to be migrated because we use those as-is and ask for their high ids\n+    // when using the importer in the store migration scenario.\n+    StoreFile[] storesFilesToMigrate = {\n+        StoreFile.LABEL_TOKEN_STORE, StoreFile.LABEL_TOKEN_NAMES_STORE,\n+        StoreFile.PROPERTY_KEY_TOKEN_STORE, StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE,\n+        StoreFile.RELATIONSHIP_TYPE_TOKEN_STORE, StoreFile.RELATIONSHIP_TYPE_TOKEN_NAMES_STORE,\n+        StoreFile.NODE_LABEL_STORE};\n+    if (newFormat.dynamic().equals(oldFormat.dynamic()))\n     {\n-        long lastClosedTxLogVersion =\n-                MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n-        long lastClosedTxLogByteOffset =\n-                MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n-        if ( lastClosedTxLogVersion != MetaDataRecordFormat.FIELD_NOT_PRESENT &&\n-             lastClosedTxLogByteOffset != MetaDataRecordFormat.FIELD_NOT_PRESENT )\n-        {\n-            return new LogPosition( lastClosedTxLogVersion, lastClosedTxLogByteOffset );\n-        }\n-\n-        // The legacy store we're migrating doesn't have this record in neostore so try to extract it from tx log\n-        if ( lastTxId == TransactionIdStore.BASE_TX_ID )\n-        {\n-            return new LogPosition( BASE_TX_LOG_VERSION, BASE_TX_LOG_BYTE_OFFSET );\n-        }\n-\n-        LogFiles logFiles = LogFilesBuilder.activeFilesBuilder( storeDir,fileSystem, pageCache )\n-                                           .withConfig( config )\n-                                           .build();\n-        long logVersion = logFiles.getHighestLogVersion();\n-        if ( logVersion == -1 )\n+      // We use the page cache for copying the STORE files since these might be on a block device.\n+      for (StoreFile file : storesFilesToMigrate)\n+      {\n+        File fromPath = new File(storeDir, file.fileName(StoreFileType.STORE));\n+        File toPath = new File(migrationDir, file.fileName(StoreFileType.STORE));\n+        try\n         {\n-            return new LogPosition( BASE_TX_LOG_VERSION, BASE_TX_LOG_BYTE_OFFSET );\n-        }\n-        long offset = fileSystem.getFileSize( logFiles.getHighestLogFile() );\n-        return new LogPosition( logVersion, offset );\n-\n-    }\n-\n-    private void migrateWithBatchImporter( File storeDir, File migrationDir, long lastTxId, long lastTxChecksum,\n-            long lastTxLogVersion, long lastTxLogByteOffset, ProgressReporter progressReporter,\n-            RecordFormats oldFormat, RecordFormats newFormat )\n-            throws IOException\n-    {\n-        prepareBatchImportMigration( storeDir, migrationDir, oldFormat, newFormat );\n-\n-        boolean requiresDynamicStoreMigration = !newFormat.dynamic().equals( oldFormat.dynamic() );\n-        boolean requiresPropertyMigration =\n-                !newFormat.property().equals( oldFormat.property() ) || requiresDynamicStoreMigration;\n-        File badFile = new File( storeDir, Configuration.BAD_FILE_NAME );\n-        try ( NeoStores legacyStore = instantiateLegacyStore( oldFormat, storeDir );\n-              OutputStream badOutput = new BufferedOutputStream( new FileOutputStream( badFile, false ) ) )\n+          copyWithPageCache(fromPath, toPath);\n+        } catch (NoSuchFileException e)\n         {\n-            Configuration importConfig = new Configuration.Overridden( config )\n-            {\n-                @Override\n-                public boolean highIO()\n-                {\n-                    return FileUtils.highIODevice( storeDir.toPath(), super.highIO() );\n-                }\n-            };\n-            AdditionalInitialIds additionalInitialIds =\n-                    readAdditionalIds( lastTxId, lastTxChecksum, lastTxLogVersion, lastTxLogByteOffset );\n-\n-            // We have to make sure to keep the token ids if we're migrating properties/labels\n-            BatchImporter importer = BatchImporterFactory.withHighestPriority().instantiate( migrationDir.getAbsoluteFile(),\n-                    fileSystem, pageCache, importConfig, logService,\n-                    withDynamicProcessorAssignment( migrationBatchImporterMonitor( legacyStore, progressReporter,\n-                            importConfig ), importConfig ), additionalInitialIds, config, newFormat, NO_MONITOR );\n-            InputIterable nodes = replayable( () -> legacyNodesAsInput( legacyStore, requiresPropertyMigration ) );\n-            InputIterable relationships = replayable( () ->\n-                    legacyRelationshipsAsInput( legacyStore, requiresPropertyMigration ) );\n-            long propertyStoreSize = storeSize( legacyStore.getPropertyStore() ) / 2 +\n-                storeSize( legacyStore.getPropertyStore().getStringStore() ) / 2 +\n-                storeSize( legacyStore.getPropertyStore().getArrayStore() ) / 2;\n-            Estimates estimates = knownEstimates(\n-                    legacyStore.getNodeStore().getNumberOfIdsInUse(),\n-                    legacyStore.getRelationshipStore().getNumberOfIdsInUse(),\n-                    legacyStore.getPropertyStore().getNumberOfIdsInUse(),\n-                    legacyStore.getPropertyStore().getNumberOfIdsInUse(),\n-                    propertyStoreSize / 2, propertyStoreSize / 2,\n-                    0 /*node labels left as 0 for now*/);\n-            importer.doImport(\n-                    Inputs.input( nodes, relationships, IdMappers.actual(), Collectors.badCollector( badOutput, 0 ), estimates ) );\n-\n-            // During migration the batch importer doesn't necessarily writes all entities, depending on\n-            // which stores needs migration. Node, relationship, relationship group stores are always written\n-            // anyways and cannot be avoided with the importer, but delete the store files that weren't written\n-            // (left empty) so that we don't overwrite those in the real store directory later.\n-            Collection<StoreFile> storesToDeleteFromMigratedDirectory = new ArrayList<>();\n-            storesToDeleteFromMigratedDirectory.add( StoreFile.NEO_STORE );\n-            if ( !requiresPropertyMigration )\n-            {\n-                // We didn't migrate properties, so the property stores in the migrated store are just empty/bogus\n-                storesToDeleteFromMigratedDirectory.addAll( asList(\n-                        StoreFile.PROPERTY_STORE,\n-                        StoreFile.PROPERTY_STRING_STORE,\n-                        StoreFile.PROPERTY_ARRAY_STORE ) );\n-            }\n-            if ( !requiresDynamicStoreMigration )\n-            {\n-                // We didn't migrate labels (dynamic node labels) or any other dynamic store\n-                storesToDeleteFromMigratedDirectory.addAll( asList(\n-                        StoreFile.NODE_LABEL_STORE,\n-                        StoreFile.LABEL_TOKEN_STORE,\n-                        StoreFile.LABEL_TOKEN_NAMES_STORE,\n-                        StoreFile.RELATIONSHIP_TYPE_TOKEN_STORE,\n-                        StoreFile.RELATIONSHIP_TYPE_TOKEN_NAMES_STORE,\n-                        StoreFile.PROPERTY_KEY_TOKEN_STORE,\n-                        StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE,\n-                        StoreFile.SCHEMA_STORE ) );\n-            }\n-            StoreFile.fileOperation( DELETE, fileSystem, migrationDir, null, storesToDeleteFromMigratedDirectory,\n-                    true, null, StoreFileType.values() );\n-            // When migrating on a block device there might be some files only accessible via the file system\n-            // provided by the page cache.\n-            try\n-            {\n-                Predicate<FileHandle> fileHandlePredicate = fileHandle -> storesToDeleteFromMigratedDirectory.stream()\n-                        .anyMatch( storeFile -> storeFile.fileName( StoreFileType.STORE )\n-                                .equals( fileHandle.getFile().getName() ) );\n-                pageCache.getCachedFileSystem().streamFilesRecursive( migrationDir ).filter( fileHandlePredicate )\n-                        .forEach( FileHandle.HANDLE_DELETE );\n-            }\n-            catch ( NoSuchFileException e )\n-            {\n-                // This means that we had no files only present in the page cache, this is fine.\n-            }\n+          // It is okay for the file to not be there.\n         }\n-    }\n-\n-    private static long storeSize( CommonAbstractStore<? extends AbstractBaseRecord,? extends StoreHeader> store )\n-    {\n-        return store.getNumberOfIdsInUse() * store.getRecordSize();\n-    }\n-\n-    private NeoStores instantiateLegacyStore( RecordFormats format, File storeDir )\n-    {\n-        return new StoreFactory( storeDir, config, new ReadOnlyIdGeneratorFactory(), pageCache, fileSystem,\n-                format, NullLogProvider.getInstance(), EmptyVersionContextSupplier.EMPTY ).openAllNeoStores( true );\n-    }\n+      }\n \n-    private void prepareBatchImportMigration( File storeDir, File migrationDir, RecordFormats oldFormat,\n-            RecordFormats newFormat ) throws IOException\n+      // The ID files are to be kept on the normal file system, hence we use fileOperation to copy them.\n+      StoreFile.fileOperation(COPY, fileSystem, storeDir, migrationDir, Arrays.asList(storesFilesToMigrate),\n+          true, // OK if it's not there (1.9)\n+          ExistingTargetStrategy.FAIL, StoreFileType.ID);\n+    } else\n     {\n-        createStore( migrationDir, newFormat );\n-\n-        // We use the batch importer for migrating the data, and we use it in a special way where we only\n-        // rewrite the stores that have actually changed format. We know that to be node and relationship\n-        // stores. Although since the batch importer also populates the counts store, all labels need to\n-        // be read, i.e. both inlined and those existing in dynamic records. That's why we need to copy\n-        // that dynamic record store over before doing the \"batch import\".\n-        //   Copying this file just as-is assumes that the format hasn't change. If that happens we're in\n-        // a different situation, where we first need to migrate this file.\n-\n-        // The token stores also need to be migrated because we use those as-is and ask for their high ids\n-        // when using the importer in the store migration scenario.\n-        StoreFile[] storesFilesToMigrate = {\n-                StoreFile.LABEL_TOKEN_STORE, StoreFile.LABEL_TOKEN_NAMES_STORE,\n-                StoreFile.PROPERTY_KEY_TOKEN_STORE, StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE,\n-                StoreFile.RELATIONSHIP_TYPE_TOKEN_STORE, StoreFile.RELATIONSHIP_TYPE_TOKEN_NAMES_STORE,\n-                StoreFile.NODE_LABEL_STORE};\n-        if ( newFormat.dynamic().equals( oldFormat.dynamic() ) )\n-        {\n-            // We use the page cache for copying the STORE files since these might be on a block device.\n-            for ( StoreFile file : storesFilesToMigrate )\n-            {\n-                File fromPath = new File( storeDir, file.fileName( StoreFileType.STORE ) );\n-                File toPath = new File( migrationDir, file.fileName( StoreFileType.STORE ) );\n-                try\n-                {\n-                    copyWithPageCache( fromPath, toPath );\n-                }\n-                catch ( NoSuchFileException e )\n-                {\n-                    // It is okay for the file to not be there.\n-                }\n-            }\n-\n-            // The ID files are to be kept on the normal file system, hence we use fileOperation to copy them.\n-            StoreFile.fileOperation( COPY, fileSystem, storeDir, migrationDir, Arrays.asList( storesFilesToMigrate ),\n-                    true, // OK if it's not there (1.9)\n-                    ExistingTargetStrategy.FAIL, StoreFileType.ID);\n-        }\n-        else\n-        {\n-            // Migrate all token stores, schema store and dynamic node label ids, keeping their ids intact\n-            DirectRecordStoreMigrator migrator = new DirectRecordStoreMigrator( pageCache, fileSystem, config );\n+      // Migrate all token stores, schema store and dynamic node label ids, keeping their ids intact\n+      DirectRecordStoreMigrator migrator = new DirectRecordStoreMigrator(pageCache, fileSystem, config);\n \n-            StoreType[] storesToMigrate = {\n-                    StoreType.LABEL_TOKEN, StoreType.LABEL_TOKEN_NAME,\n-                    StoreType.PROPERTY_KEY_TOKEN, StoreType.PROPERTY_KEY_TOKEN_NAME,\n-                    StoreType.RELATIONSHIP_TYPE_TOKEN, StoreType.RELATIONSHIP_TYPE_TOKEN_NAME,\n-                    StoreType.NODE_LABEL,\n-                    StoreType.SCHEMA};\n+      StoreType[] storesToMigrate = {\n+          StoreType.LABEL_TOKEN, StoreType.LABEL_TOKEN_NAME,\n+          StoreType.PROPERTY_KEY_TOKEN, StoreType.PROPERTY_KEY_TOKEN_NAME,\n+          StoreType.RELATIONSHIP_TYPE_TOKEN, StoreType.RELATIONSHIP_TYPE_TOKEN_NAME,\n+          StoreType.NODE_LABEL,\n+          StoreType.SCHEMA};\n \n-            // Migrate these stores silently because they are usually very small\n-            ProgressReporter progressReporter = SilentProgressReporter.INSTANCE;\n+      // Migrate these stores silently because they are usually very small\n+      ProgressReporter progressReporter = SilentProgressReporter.INSTANCE;\n \n-            migrator.migrate( storeDir, oldFormat, migrationDir, newFormat, progressReporter, storesToMigrate, StoreType.NODE );\n-        }\n+      migrator.migrate(storeDir, oldFormat, migrationDir, newFormat, progressReporter, storesToMigrate, StoreType.NODE);\n     }\n-\n-    private void createStore( File migrationDir, RecordFormats newFormat )\n+  }\n+\n+  private void createStore(File migrationDir, RecordFormats newFormat)\n+  {\n+    IdGeneratorFactory idGeneratorFactory = new ReadOnlyIdGeneratorFactory(fileSystem);\n+    NullLogProvider logProvider = NullLogProvider.getInstance();\n+    StoreFactory storeFactory = new StoreFactory(\n+        migrationDir, config, idGeneratorFactory, pageCache, fileSystem, newFormat, logProvider,\n+        EmptyVersionContextSupplier.EMPTY);\n+    try (NeoStores neoStores = storeFactory.openAllNeoStores(true))\n     {\n-        IdGeneratorFactory idGeneratorFactory = new ReadOnlyIdGeneratorFactory( fileSystem );\n-        NullLogProvider logProvider = NullLogProvider.getInstance();\n-        StoreFactory storeFactory = new StoreFactory(\n-                migrationDir, config, idGeneratorFactory, pageCache, fileSystem, newFormat, logProvider,\n-                EmptyVersionContextSupplier.EMPTY );\n-        try ( NeoStores neoStores = storeFactory.openAllNeoStores( true ) )\n-        {\n-            neoStores.getMetaDataStore();\n-            neoStores.getLabelTokenStore();\n-            neoStores.getNodeStore();\n-            neoStores.getPropertyStore();\n-            neoStores.getRelationshipGroupStore();\n-            neoStores.getRelationshipStore();\n-            neoStores.getSchemaStore();\n-        }\n+      neoStores.getMetaDataStore();\n+      neoStores.getLabelTokenStore();\n+      neoStores.getNodeStore();\n+      neoStores.getPropertyStore();\n+      neoStores.getRelationshipGroupStore();\n+      neoStores.getRelationshipStore();\n+      neoStores.getSchemaStore();\n     }\n+  }\n \n-    private AdditionalInitialIds readAdditionalIds( final long lastTxId, final long lastTxChecksum,\n-            final long lastTxLogVersion, final long lastTxLogByteOffset )\n+  private AdditionalInitialIds readAdditionalIds(final long lastTxId, final long lastTxChecksum,\n+                                                 final long lastTxLogVersion, final long lastTxLogByteOffset)\n+  {\n+    return new AdditionalInitialIds()\n     {\n-        return new AdditionalInitialIds()\n-        {\n-            @Override\n-            public long lastCommittedTransactionId()\n-            {\n-                return lastTxId;\n-            }\n-\n-            @Override\n-            public long lastCommittedTransactionChecksum()\n-            {\n-                return lastTxChecksum;\n-            }\n-\n-            @Override\n-            public long lastCommittedTransactionLogVersion()\n-            {\n-                return lastTxLogVersion;\n-            }\n-\n-            @Override\n-            public long lastCommittedTransactionLogByteOffset()\n-            {\n-                return lastTxLogByteOffset;\n-            }\n-        };\n-    }\n-\n-    private ExecutionMonitor migrationBatchImporterMonitor( NeoStores legacyStore,\n-            final ProgressReporter progressReporter, Configuration config )\n+      @Override\n+      public long lastCommittedTransactionId()\n+      {\n+        return lastTxId;\n+      }\n+\n+      @Override\n+      public long lastCommittedTransactionChecksum()\n+      {\n+        return lastTxChecksum;\n+      }\n+\n+      @Override\n+      public long lastCommittedTransactionLogVersion()\n+      {\n+        return lastTxLogVersion;\n+      }\n+\n+      @Override\n+      public long lastCommittedTransactionLogByteOffset()\n+      {\n+        return lastTxLogByteOffset;\n+      }\n+    };\n+  }\n+\n+  private ExecutionMonitor migrationBatchImporterMonitor(NeoStores legacyStore,\n+                                                         final ProgressReporter progressReporter, Configuration config)\n+  {\n+    return new BatchImporterProgressMonitor(\n+        legacyStore.getNodeStore().getHighId(), legacyStore.getRelationshipStore().getHighId(),\n+        config, progressReporter);\n+  }\n+\n+  private InputIterator legacyRelationshipsAsInput(NeoStores legacyStore, boolean requiresPropertyMigration)\n+  {\n+    return new StoreScanAsInputIterator<RelationshipRecord>(legacyStore.getRelationshipStore())\n     {\n-        return new BatchImporterProgressMonitor(\n-                legacyStore.getNodeStore().getHighId(), legacyStore.getRelationshipStore().getHighId(),\n-                config, progressReporter );\n-    }\n-\n-    private InputIterator legacyRelationshipsAsInput( NeoStores legacyStore, boolean requiresPropertyMigration )\n+      @Override\n+      public InputChunk newChunk()\n+      {\n+        return new RelationshipRecordChunk(createCursor(), legacyStore, requiresPropertyMigration);\n+      }\n+    };\n+  }\n+\n+  private InputIterator legacyNodesAsInput(NeoStores legacyStore, boolean requiresPropertyMigration)\n+  {\n+    return new StoreScanAsInputIterator<NodeRecord>(legacyStore.getNodeStore())\n     {\n-        return new StoreScanAsInputIterator<RelationshipRecord>( legacyStore.getRelationshipStore() )\n-        {\n-            @Override\n-            public InputChunk newChunk()\n-            {\n-                return new RelationshipRecordChunk( createCursor(), legacyStore, requiresPropertyMigration );\n-            }\n-        };\n-    }\n-\n-    private InputIterator legacyNodesAsInput( NeoStores legacyStore, boolean requiresPropertyMigration )\n+      @Override\n+      public InputChunk newChunk()\n+      {\n+        return new NodeRecordChunk(createCursor(), legacyStore, requiresPropertyMigration);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void moveMigratedFiles(File migrationDir, File storeDir, String versionToUpgradeFrom,\n+                                String versionToUpgradeTo) throws IOException\n+  {\n+    // Move the migrated ones into the store directory\n+    StoreFile.fileOperation(MOVE, fileSystem, migrationDir, storeDir, StoreFile.currentStoreFiles(),\n+        true, // allow to skip non existent source files\n+        ExistingTargetStrategy.OVERWRITE, // allow to overwrite target files\n+        StoreFileType.values());\n+    // Since some of the files might only be accessible through the file system provided by the page cache (i.e.\n+    // block devices), we also try to move the files with the page cache.\n+    try\n     {\n-        return new StoreScanAsInputIterator<NodeRecord>( legacyStore.getNodeStore() )\n+      Iterable<FileHandle> fileHandles = pageCache.getCachedFileSystem()\n+          .streamFilesRecursive(migrationDir)::iterator;\n+      for (FileHandle fh : fileHandles)\n+      {\n+        Predicate<StoreFile> predicate =\n+            storeFile -> storeFile.fileName(StoreFileType.STORE).equals(fh.getFile().getName());\n+        if (StreamSupport.stream(StoreFile.currentStoreFiles().spliterator(), false).anyMatch(predicate))\n         {\n-            @Override\n-            public InputChunk newChunk()\n-            {\n-                return new NodeRecordChunk( createCursor(), legacyStore, requiresPropertyMigration );\n-            }\n-        };\n+          final Optional<PagedFile> optionalPagedFile = pageCache.getExistingMapping(fh.getFile());\n+          if (optionalPagedFile.isPresent())\n+          {\n+            optionalPagedFile.get().close();\n+          }\n+          fh.rename(new File(storeDir, fh.getFile().getName()), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+      }\n+    } catch (NoSuchFileException e)\n+    {\n+      //This means that we had no files only present in the page cache, this is fine.\n     }\n-\n-    @Override\n-    public void moveMigratedFiles( File migrationDir, File storeDir, String versionToUpgradeFrom,\n-            String versionToUpgradeTo ) throws IOException\n+  }\n+\n+  private void updateOrAddNeoStoreFieldsAsPartOfMigration(File migrationDir, File storeDir,\n+                                                          String versionToMigrateTo, LogPosition lastClosedTxLogPosition) throws IOException\n+  {\n+    final File storeDirNeoStore = new File(storeDir, DEFAULT_NAME);\n+    final File migrationDirNeoStore = new File(migrationDir, DEFAULT_NAME);\n+    copyWithPageCache(storeDirNeoStore, migrationDirNeoStore);\n+\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_ID,\n+        MetaDataStore.getRecord(pageCache, storeDirNeoStore, Position.LAST_TRANSACTION_ID));\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.UPGRADE_TIME, System.currentTimeMillis());\n+\n+    // Store the checksum of the transaction id the upgrade is at right now. Store it both as\n+    // LAST_TRANSACTION_CHECKSUM and UPGRADE_TRANSACTION_CHECKSUM. Initially the last transaction and the\n+    // upgrade transaction will be the same, but imagine this scenario:\n+    //  - legacy store is migrated on instance A at transaction T\n+    //  - upgraded store is copied, via backup or HA or whatever to instance B\n+    //  - instance A performs a transaction\n+    //  - instance B would like to communicate with A where B's last transaction checksum\n+    //    is verified on A. A, at this point not having logs from pre-migration era, will need to\n+    //    know the checksum of transaction T to accommodate for this request from B. A will be able\n+    //    to look up checksums for transactions succeeding T by looking at its transaction logs,\n+    //    but T needs to be stored in neostore to be accessible. Obviously this scenario is only\n+    //    problematic as long as we don't migrate and translate old logs.\n+    TransactionId lastTxInfo = readLastTxInformation(migrationDir);\n+\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_CHECKSUM,\n+        lastTxInfo.checksum());\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_CHECKSUM,\n+        lastTxInfo.checksum());\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP,\n+        lastTxInfo.commitTimestamp());\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n+        lastTxInfo.commitTimestamp());\n+\n+    // add LAST_CLOSED_TRANSACTION_LOG_VERSION and LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET to the migrated\n+    // NeoStore\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION,\n+        lastClosedTxLogPosition.getLogVersion());\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,\n+        lastClosedTxLogPosition.getByteOffset());\n+\n+    // Upgrade version in NeoStore\n+    MetaDataStore.setRecord(pageCache, migrationDirNeoStore, Position.STORE_VERSION,\n+        MetaDataStore.versionStringToLong(versionToMigrateTo));\n+  }\n+\n+  @Override\n+  public void cleanup(File migrationDir) throws IOException\n+  {\n+    fileSystem.deleteRecursively(migrationDir);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"Kernel StoreMigrator\";\n+  }\n+\n+  private void copyWithPageCache(File sourceFile, File targetFile) throws IOException\n+  {\n+    // We use the page cache for copying the neostore since it might be on a block device.\n+    int pageSize = pageCache.pageSize();\n+    try (PagedFile fromFile = pageCache.map(sourceFile, pageSize);\n+         PagedFile toFile = pageCache.map(targetFile, pageSize, StandardOpenOption.CREATE);\n+         PageCursor fromCursor = fromFile.io(0L, PagedFile.PF_SHARED_READ_LOCK);\n+         PageCursor toCursor = toFile.io(0L, PagedFile.PF_SHARED_WRITE_LOCK))\n     {\n-        // Move the migrated ones into the store directory\n-        StoreFile.fileOperation( MOVE, fileSystem, migrationDir, storeDir, StoreFile.currentStoreFiles(),\n-                true, // allow to skip non existent source files\n-                ExistingTargetStrategy.OVERWRITE, // allow to overwrite target files\n-                StoreFileType.values() );\n-        // Since some of the files might only be accessible through the file system provided by the page cache (i.e.\n-        // block devices), we also try to move the files with the page cache.\n-        try\n-        {\n-            Iterable<FileHandle> fileHandles = pageCache.getCachedFileSystem()\n-                    .streamFilesRecursive( migrationDir )::iterator;\n-            for ( FileHandle fh : fileHandles )\n-            {\n-                Predicate<StoreFile> predicate =\n-                        storeFile -> storeFile.fileName( StoreFileType.STORE ).equals( fh.getFile().getName() );\n-                if ( StreamSupport.stream( StoreFile.currentStoreFiles().spliterator(), false ).anyMatch( predicate ) )\n-                {\n-                    final Optional<PagedFile> optionalPagedFile = pageCache.getExistingMapping( fh.getFile() );\n-                    if ( optionalPagedFile.isPresent() )\n-                    {\n-                        optionalPagedFile.get().close();\n-                    }\n-                    fh.rename( new File( storeDir, fh.getFile().getName() ), StandardCopyOption.REPLACE_EXISTING );\n-                }\n-            }\n-        }\n-        catch ( NoSuchFileException e )\n+      while (fromCursor.next())\n+      {\n+        toCursor.next();\n+        do\n         {\n-            //This means that we had no files only present in the page cache, this is fine.\n+          fromCursor.copyTo(0, toCursor, 0, pageSize);\n         }\n+        while (fromCursor.shouldRetry());\n+      }\n     }\n+  }\n \n-    private void updateOrAddNeoStoreFieldsAsPartOfMigration( File migrationDir, File storeDir,\n-            String versionToMigrateTo, LogPosition lastClosedTxLogPosition ) throws IOException\n+  private static class NodeRecordChunk extends StoreScanChunk<NodeRecord>\n+  {\n+    NodeRecordChunk(RecordCursor<NodeRecord> recordCursor, NeoStores neoStores, boolean requiresPropertyMigration)\n     {\n-        final File storeDirNeoStore = new File( storeDir, DEFAULT_NAME );\n-        final File migrationDirNeoStore = new File( migrationDir, DEFAULT_NAME );\n-        copyWithPageCache( storeDirNeoStore, migrationDirNeoStore );\n-\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_ID,\n-                MetaDataStore.getRecord( pageCache, storeDirNeoStore, Position.LAST_TRANSACTION_ID ) );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TIME, System.currentTimeMillis() );\n-\n-        // Store the checksum of the transaction id the upgrade is at right now. Store it both as\n-        // LAST_TRANSACTION_CHECKSUM and UPGRADE_TRANSACTION_CHECKSUM. Initially the last transaction and the\n-        // upgrade transaction will be the same, but imagine this scenario:\n-        //  - legacy store is migrated on instance A at transaction T\n-        //  - upgraded store is copied, via backup or HA or whatever to instance B\n-        //  - instance A performs a transaction\n-        //  - instance B would like to communicate with A where B's last transaction checksum\n-        //    is verified on A. A, at this point not having logs from pre-migration era, will need to\n-        //    know the checksum of transaction T to accommodate for this request from B. A will be able\n-        //    to look up checksums for transactions succeeding T by looking at its transaction logs,\n-        //    but T needs to be stored in neostore to be accessible. Obviously this scenario is only\n-        //    problematic as long as we don't migrate and translate old logs.\n-        TransactionId lastTxInfo = readLastTxInformation( migrationDir );\n-\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_CHECKSUM,\n-                lastTxInfo.checksum() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_CHECKSUM,\n-                lastTxInfo.checksum() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP,\n-                lastTxInfo.commitTimestamp() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n-                lastTxInfo.commitTimestamp() );\n-\n-        // add LAST_CLOSED_TRANSACTION_LOG_VERSION and LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET to the migrated\n-        // NeoStore\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION,\n-                lastClosedTxLogPosition.getLogVersion() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,\n-                lastClosedTxLogPosition.getByteOffset() );\n-\n-        // Upgrade version in NeoStore\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.STORE_VERSION,\n-                MetaDataStore.versionStringToLong( versionToMigrateTo ) );\n+      super(recordCursor, neoStores, requiresPropertyMigration);\n     }\n \n     @Override\n-    public void cleanup( File migrationDir ) throws IOException\n+    protected void visitRecord(NodeRecord record, InputEntityVisitor visitor)\n     {\n-        fileSystem.deleteRecursively( migrationDir );\n+      visitor.id(record.getId());\n+      visitor.labelField(record.getLabelField());\n+      visitProperties(record, visitor);\n     }\n+  }\n \n-    @Override\n-    public String toString()\n+  private static class RelationshipRecordChunk extends StoreScanChunk<RelationshipRecord>\n+  {\n+    RelationshipRecordChunk(RecordCursor<RelationshipRecord> recordCursor, NeoStores neoStore, boolean requiresPropertyMigration)\n     {\n-        return \"Kernel StoreMigrator\";\n+      super(recordCursor, neoStore, requiresPropertyMigration);\n     }\n \n-    private void copyWithPageCache( File sourceFile, File targetFile ) throws IOException\n+    @Override\n+    protected void visitRecord(RelationshipRecord record, InputEntityVisitor visitor)\n     {\n-        // We use the page cache for copying the neostore since it might be on a block device.\n-        int pageSize = pageCache.pageSize();\n-        try ( PagedFile fromFile = pageCache.map( sourceFile, pageSize );\n-              PagedFile toFile = pageCache.map( targetFile, pageSize, StandardOpenOption.CREATE );\n-              PageCursor fromCursor = fromFile.io( 0L, PagedFile.PF_SHARED_READ_LOCK );\n-              PageCursor toCursor = toFile.io( 0L, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-        {\n-            while ( fromCursor.next() )\n-            {\n-                toCursor.next();\n-                do\n-                {\n-                    fromCursor.copyTo( 0, toCursor, 0, pageSize );\n-                }\n-                while ( fromCursor.shouldRetry() );\n-            }\n-        }\n+      visitor.startId(record.getFirstNode());\n+      visitor.endId(record.getSecondNode());\n+      visitor.type(record.getType());\n+      visitProperties(record, visitor);\n     }\n+  }\n \n-    private static class NodeRecordChunk extends StoreScanChunk<NodeRecord>\n-    {\n-        NodeRecordChunk( RecordCursor<NodeRecord> recordCursor, NeoStores neoStores, boolean requiresPropertyMigration )\n-        {\n-            super( recordCursor, neoStores, requiresPropertyMigration );\n-        }\n-\n-        @Override\n-        protected void visitRecord( NodeRecord record, InputEntityVisitor visitor )\n-        {\n-            visitor.id( record.getId() );\n-            visitor.labelField( record.getLabelField() );\n-            visitProperties( record, visitor );\n-        }\n-    }\n+  private static class BatchImporterProgressMonitor extends CoarseBoundedProgressExecutionMonitor\n+  {\n+    private final ProgressReporter progressReporter;\n \n-    private static class RelationshipRecordChunk extends StoreScanChunk<RelationshipRecord>\n+    BatchImporterProgressMonitor(long highNodeId, long highRelationshipId,\n+                                 org.neo4j.unsafe.impl.batchimport.Configuration configuration,\n+                                 ProgressReporter progressReporter)\n     {\n-        RelationshipRecordChunk( RecordCursor<RelationshipRecord> recordCursor, NeoStores neoStore, boolean requiresPropertyMigration )\n-        {\n-            super( recordCursor, neoStore, requiresPropertyMigration );\n-        }\n-\n-        @Override\n-        protected void visitRecord( RelationshipRecord record, InputEntityVisitor visitor )\n-        {\n-            visitor.startId( record.getFirstNode() );\n-            visitor.endId( record.getSecondNode() );\n-            visitor.type( record.getType() );\n-            visitProperties( record, visitor );\n-        }\n+      super(highNodeId, highRelationshipId, configuration);\n+      this.progressReporter = progressReporter;\n+      this.progressReporter.start(total());\n     }\n \n-    private static class BatchImporterProgressMonitor extends CoarseBoundedProgressExecutionMonitor\n+    @Override\n+    protected void progress(long progress)\n     {\n-        private final ProgressReporter progressReporter;\n-\n-        BatchImporterProgressMonitor( long highNodeId, long highRelationshipId,\n-                org.neo4j.unsafe.impl.batchimport.Configuration configuration,\n-                ProgressReporter progressReporter )\n-        {\n-            super( highNodeId, highRelationshipId, configuration );\n-            this.progressReporter = progressReporter;\n-            this.progressReporter.start( total() );\n-        }\n-\n-        @Override\n-        protected void progress( long progress )\n-        {\n-            progressReporter.progress( progress );\n-        }\n+      progressReporter.progress(progress);\n     }\n+  }\n }\n",
            "diff_size": 894
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 548).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "column": "548",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "389",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "490",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "522",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/684/StoreMigrator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/684/StoreMigrator.java\nindex fa4014dbd60..72ce5ad46ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/684/StoreMigrator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/684/StoreMigrator.java\n@@ -126,10 +126,9 @@ import static org.neo4j.unsafe.impl.batchimport.staging.ExecutionSupervisors.wit\n public class StoreMigrator extends AbstractStoreMigrationParticipant\n {\n     private static final char TX_LOG_COUNTERS_SEPARATOR = 'A';\n-    public static final String CUSTOM_IO_EXCEPTION_MESSAGE =\n-            \"Migrating this version is not supported for custom IO configurations.\";\n \n-    private final Config config;\n+public static final String CUSTOM_IO_EXCEPTION_MESSAGE = \"Migrating this version is not supported for custom IO configurations.\";\n+private final Config config;\n     private final LogService logService;\n     private final FileSystemAbstraction fileSystem;\n     private final PageCache pageCache;\n@@ -147,7 +146,7 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n     @Override\n     public void migrate( File storeDir, File migrationDir, ProgressReporter progressReporter,\n             String versionToMigrateFrom, String versionToMigrateTo ) throws IOException\n-    {\n+{\n         if ( versionToMigrateFrom.equals( StandardV2_3.STORE_VERSION ) )\n         {\n             // These versions are not supported for block devices.\n@@ -161,8 +160,7 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         // Write the tx checksum to file in migrationDir, because we need it later when moving files into storeDir\n         writeLastTxInformation( migrationDir, lastTxInfo );\n         writeLastTxLogPosition( migrationDir, lastTxLogPosition );\n-\n-        if ( versionToMigrateFrom.equals( \"vE.H.0\" ) )\n+if ( versionToMigrateFrom.equals( \"vE.H.0\" ) )\n         {\n             // NOTE for 3.0 here is a special case for vE.H.0 \"from\" record format.\n             // Legend has it that 3.0.5 enterprise changed store format without changing store version.\n@@ -183,18 +181,17 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n             // this condition is here and should be removed in 3.1.\n             versionToMigrateFrom = \"vE.H.0b\";\n         }\n-        RecordFormats oldFormat = selectForVersion( versionToMigrateFrom );\n+\n+RecordFormats oldFormat = selectForVersion( versionToMigrateFrom );\n         RecordFormats newFormat = selectForVersion( versionToMigrateTo );\n-        if ( FormatFamily.isHigherFamilyFormat( newFormat, oldFormat ) ||\n-             (FormatFamily.isSameFamily( oldFormat, newFormat ) && isDifferentCapabilities( oldFormat, newFormat )) )\n-        {\n+        if ( FormatFamily.isHigherFamilyFormat( newFormat, oldFormat ) || (FormatFamily.isSameFamily( oldFormat, newFormat ) && isDifferentCapabilities( oldFormat, newFormat )) )\n+{\n             // TODO if this store has relationship indexes then warn user about that they will be incorrect\n             // after migration, because now we're rewriting the relationship ids.\n \n             // Some form of migration is required (a fallback/catch-all option)\n             migrateWithBatchImporter( storeDir, migrationDir,\n-                    lastTxId, lastTxInfo.checksum(), lastTxLogPosition.getLogVersion(),\n-                    lastTxLogPosition.getByteOffset(), progressReporter, oldFormat, newFormat );\n+                    lastTxId, lastTxInfo.checksum(), lastTxLogPosition.getLogVersion(), lastTxLogPosition.getByteOffset(), progressReporter, oldFormat, newFormat );\n         }\n         // update necessary neostore records\n         LogPosition logPosition = readLastTxLogPosition( migrationDir );\n@@ -208,14 +205,12 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n \n     void writeLastTxInformation( File migrationDir, TransactionId txInfo ) throws IOException\n     {\n-        writeTxLogCounters( fileSystem, lastTxInformationFile( migrationDir ),\n-                txInfo.transactionId(), txInfo.checksum(), txInfo.commitTimestamp() );\n+        writeTxLogCounters( fileSystem, lastTxInformationFile( migrationDir ), txInfo.transactionId(), txInfo.checksum(), txInfo.commitTimestamp() );\n     }\n \n     void writeLastTxLogPosition( File migrationDir, LogPosition lastTxLogPosition ) throws IOException\n     {\n-        writeTxLogCounters( fileSystem, lastTxLogPositionFile( migrationDir ),\n-                lastTxLogPosition.getLogVersion(), lastTxLogPosition.getByteOffset() );\n+        writeTxLogCounters( fileSystem, lastTxLogPositionFile( migrationDir ), lastTxLogPosition.getLogVersion(), lastTxLogPosition.getByteOffset() );\n     }\n \n     TransactionId readLastTxInformation( File migrationDir ) throws IOException\n@@ -238,24 +233,23 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         }\n     }\n \n-    private static long[] readTxLogCounters( FileSystemAbstraction fs, File file, int numberOfCounters )\n-            throws IOException\n-    {\n+    private static long[] readTxLogCounters( FileSystemAbstraction fs, File file, int numberOfCounters ) throws IOException\n+{\n         try ( BufferedReader reader = new BufferedReader( fs.openAsReader( file, StandardCharsets.UTF_8 ) ) )\n         {\n             String line = reader.readLine();\n             String[] split = StringUtils.split( line, TX_LOG_COUNTERS_SEPARATOR );\n             if ( split.length != numberOfCounters )\n             {\n-                throw new IllegalArgumentException( \"Unexpected number of tx counters '\" + numberOfCounters +\n-                                                    \"', file contains: '\" + line + \"'\" );\n-            }\n+                throw new IllegalArgumentException( \"Unexpected number of tx counters '\" + numberOfCounters + \"', file contains: '\" + line + \"'\" );\n+    }\n             long[] counters = new long[numberOfCounters];\n             for ( int i = 0; i < split.length; i++ )\n             {\n                 counters[i] = Long.parseLong( split[i] );\n             }\n-            return counters;\n+\n+return counters;\n         }\n     }\n \n@@ -269,13 +263,12 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         return new File( migrationDir, \"lastxlogposition\" );\n     }\n \n-    TransactionId extractTransactionIdInformation( File neoStore, File storeDir, long lastTransactionId )\n-            throws IOException\n-    {\n+    TransactionId extractTransactionIdInformation( File neoStore, File storeDir, long lastTransactionId ) throws IOException\n+{\n         long checksum = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_TRANSACTION_CHECKSUM );\n         long commitTimestamp = MetaDataStore.getRecord( pageCache, neoStore,\n                 Position.LAST_TRANSACTION_COMMIT_TIMESTAMP );\n-        if ( checksum != FIELD_NOT_PRESENT && commitTimestamp != FIELD_NOT_PRESENT )\n+if ( checksum != FIELD_NOT_PRESENT && commitTimestamp != FIELD_NOT_PRESENT )\n         {\n             return new TransactionId( lastTransactionId, checksum, commitTimestamp );\n         }\n@@ -301,20 +294,15 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n      */\n     private TransactionId specificTransactionInformationSupplier( long lastTransactionId )\n     {\n-        return lastTransactionId == TransactionIdStore.BASE_TX_ID\n-                                          ? new TransactionId( lastTransactionId, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP )\n-                                          : new TransactionId( lastTransactionId, UNKNOWN_TX_CHECKSUM, UNKNOWN_TX_COMMIT_TIMESTAMP );\n+        return lastTransactionId == TransactionIdStore.BASE_TX_ID ? new TransactionId( lastTransactionId, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP ) : new TransactionId( lastTransactionId, UNKNOWN_TX_CHECKSUM, UNKNOWN_TX_COMMIT_TIMESTAMP );\n     }\n \n     LogPosition extractTransactionLogPosition( File neoStore, File storeDir, long lastTxId ) throws IOException\n     {\n-        long lastClosedTxLogVersion =\n-                MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n-        long lastClosedTxLogByteOffset =\n-                MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n-        if ( lastClosedTxLogVersion != MetaDataRecordFormat.FIELD_NOT_PRESENT &&\n-             lastClosedTxLogByteOffset != MetaDataRecordFormat.FIELD_NOT_PRESENT )\n-        {\n+        long lastClosedTxLogVersion = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n+    long lastClosedTxLogByteOffset = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n+if ( lastClosedTxLogVersion != MetaDataRecordFormat.FIELD_NOT_PRESENT && lastClosedTxLogByteOffset != MetaDataRecordFormat.FIELD_NOT_PRESENT )\n+{\n             return new LogPosition( lastClosedTxLogVersion, lastClosedTxLogByteOffset );\n         }\n \n@@ -324,33 +312,30 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n             return new LogPosition( BASE_TX_LOG_VERSION, BASE_TX_LOG_BYTE_OFFSET );\n         }\n \n-        LogFiles logFiles = LogFilesBuilder.activeFilesBuilder( storeDir,fileSystem, pageCache )\n-                                           .withConfig( config )\n+        LogFiles logFiles = LogFilesBuilder.activeFilesBuilder( storeDir, fileSystem, pageCache ).withConfig( config )\n                                            .build();\n-        long logVersion = logFiles.getHighestLogVersion();\n+    long logVersion = logFiles.getHighestLogVersion();\n         if ( logVersion == -1 )\n         {\n             return new LogPosition( BASE_TX_LOG_VERSION, BASE_TX_LOG_BYTE_OFFSET );\n         }\n         long offset = fileSystem.getFileSize( logFiles.getHighestLogFile() );\n         return new LogPosition( logVersion, offset );\n-\n     }\n \n     private void migrateWithBatchImporter( File storeDir, File migrationDir, long lastTxId, long lastTxChecksum,\n             long lastTxLogVersion, long lastTxLogByteOffset, ProgressReporter progressReporter,\n-            RecordFormats oldFormat, RecordFormats newFormat )\n-            throws IOException\n-    {\n+            RecordFormats oldFormat, RecordFormats newFormat ) throws IOException\n+{\n         prepareBatchImportMigration( storeDir, migrationDir, oldFormat, newFormat );\n \n         boolean requiresDynamicStoreMigration = !newFormat.dynamic().equals( oldFormat.dynamic() );\n         boolean requiresPropertyMigration =\n                 !newFormat.property().equals( oldFormat.property() ) || requiresDynamicStoreMigration;\n-        File badFile = new File( storeDir, Configuration.BAD_FILE_NAME );\n+File badFile = new File( storeDir, Configuration.BAD_FILE_NAME );\n         try ( NeoStores legacyStore = instantiateLegacyStore( oldFormat, storeDir );\n-              OutputStream badOutput = new BufferedOutputStream( new FileOutputStream( badFile, false ) ) )\n-        {\n+OutputStream badOutput = new BufferedOutputStream( new FileOutputStream( badFile, false ) ) )\n+{\n             Configuration importConfig = new Configuration.Overridden( config )\n             {\n                 @Override\n@@ -359,31 +344,17 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n                     return FileUtils.highIODevice( storeDir.toPath(), super.highIO() );\n                 }\n             };\n-            AdditionalInitialIds additionalInitialIds =\n-                    readAdditionalIds( lastTxId, lastTxChecksum, lastTxLogVersion, lastTxLogByteOffset );\n-\n-            // We have to make sure to keep the token ids if we're migrating properties/labels\n+            AdditionalInitialIds additionalInitialIds = readAdditionalIds( lastTxId, lastTxChecksum, lastTxLogVersion, lastTxLogByteOffset );\n+    // We have to make sure to keep the token ids if we're migrating properties/labels\n             BatchImporter importer = BatchImporterFactory.withHighestPriority().instantiate( migrationDir.getAbsoluteFile(),\n                     fileSystem, pageCache, importConfig, logService,\n                     withDynamicProcessorAssignment( migrationBatchImporterMonitor( legacyStore, progressReporter,\n                             importConfig ), importConfig ), additionalInitialIds, config, newFormat, NO_MONITOR );\n-            InputIterable nodes = replayable( () -> legacyNodesAsInput( legacyStore, requiresPropertyMigration ) );\n-            InputIterable relationships = replayable( () ->\n-                    legacyRelationshipsAsInput( legacyStore, requiresPropertyMigration ) );\n-            long propertyStoreSize = storeSize( legacyStore.getPropertyStore() ) / 2 +\n-                storeSize( legacyStore.getPropertyStore().getStringStore() ) / 2 +\n-                storeSize( legacyStore.getPropertyStore().getArrayStore() ) / 2;\n-            Estimates estimates = knownEstimates(\n-                    legacyStore.getNodeStore().getNumberOfIdsInUse(),\n-                    legacyStore.getRelationshipStore().getNumberOfIdsInUse(),\n-                    legacyStore.getPropertyStore().getNumberOfIdsInUse(),\n-                    legacyStore.getPropertyStore().getNumberOfIdsInUse(),\n-                    propertyStoreSize / 2, propertyStoreSize / 2,\n-                    0 /*node labels left as 0 for now*/);\n-            importer.doImport(\n-                    Inputs.input( nodes, relationships, IdMappers.actual(), Collectors.badCollector( badOutput, 0 ), estimates ) );\n-\n-            // During migration the batch importer doesn't necessarily writes all entities, depending on\n+InputIterable nodes = replayable( () -> legacyNodesAsInput( legacyStore, requiresPropertyMigration ) );\n+            InputIterable relationships = replayable( () -> legacyRelationshipsAsInput( legacyStore, requiresPropertyMigration ) );\n+    long propertyStoreSize = storeSize( legacyStore.getPropertyStore() ) / 2 + storeSize( legacyStore.getPropertyStore().getStringStore() ) / 2 + storeSize( legacyStore.getPropertyStore().getArrayStore() ) / 2; Estimates estimates = knownEstimates( legacyStore.getNodeStore().getNumberOfIdsInUse(), legacyStore.getRelationshipStore().getNumberOfIdsInUse(), legacyStore.getPropertyStore().getNumberOfIdsInUse(), legacyStore.getPropertyStore().getNumberOfIdsInUse(), propertyStoreSize / 2, propertyStoreSize / 2, 0 /*node labels left as 0 for now*/);\n+importer.doImport( Inputs.input( nodes, relationships, IdMappers.actual(), Collectors.badCollector( badOutput, 0 ), estimates ) );\n+    // During migration the batch importer doesn't necessarily writes all entities, depending on\n             // which stores needs migration. Node, relationship, relationship group stores are always written\n             // anyways and cannot be avoided with the importer, but delete the store files that weren't written\n             // (left empty) so that we don't overwrite those in the real store directory later.\n@@ -392,16 +363,15 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n             if ( !requiresPropertyMigration )\n             {\n                 // We didn't migrate properties, so the property stores in the migrated store are just empty/bogus\n-                storesToDeleteFromMigratedDirectory.addAll( asList(\n-                        StoreFile.PROPERTY_STORE,\n+                storesToDeleteFromMigratedDirectory.addAll( asList( StoreFile.PROPERTY_STORE,\n                         StoreFile.PROPERTY_STRING_STORE,\n                         StoreFile.PROPERTY_ARRAY_STORE ) );\n             }\n-            if ( !requiresDynamicStoreMigration )\n+\n+if ( !requiresDynamicStoreMigration )\n             {\n                 // We didn't migrate labels (dynamic node labels) or any other dynamic store\n-                storesToDeleteFromMigratedDirectory.addAll( asList(\n-                        StoreFile.NODE_LABEL_STORE,\n+                storesToDeleteFromMigratedDirectory.addAll( asList( StoreFile.NODE_LABEL_STORE,\n                         StoreFile.LABEL_TOKEN_STORE,\n                         StoreFile.LABEL_TOKEN_NAMES_STORE,\n                         StoreFile.RELATIONSHIP_TYPE_TOKEN_STORE,\n@@ -412,16 +382,13 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n             }\n             StoreFile.fileOperation( DELETE, fileSystem, migrationDir, null, storesToDeleteFromMigratedDirectory,\n                     true, null, StoreFileType.values() );\n-            // When migrating on a block device there might be some files only accessible via the file system\n+    // When migrating on a block device there might be some files only accessible via the file system\n             // provided by the page cache.\n             try\n             {\n-                Predicate<FileHandle> fileHandlePredicate = fileHandle -> storesToDeleteFromMigratedDirectory.stream()\n-                        .anyMatch( storeFile -> storeFile.fileName( StoreFileType.STORE )\n-                                .equals( fileHandle.getFile().getName() ) );\n-                pageCache.getCachedFileSystem().streamFilesRecursive( migrationDir ).filter( fileHandlePredicate )\n-                        .forEach( FileHandle.HANDLE_DELETE );\n-            }\n+                Predicate<FileHandle> fileHandlePredicate = fileHandle -> storesToDeleteFromMigratedDirectory.stream().anyMatch( storeFile -> storeFile.fileName( StoreFileType.STORE ).equals( fileHandle.getFile().getName() ) );\n+pageCache.getCachedFileSystem().streamFilesRecursive( migrationDir ).filter( fileHandlePredicate ).forEach( FileHandle.HANDLE_DELETE );\n+    }\n             catch ( NoSuchFileException e )\n             {\n                 // This means that we had no files only present in the page cache, this is fine.\n@@ -429,7 +396,7 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         }\n     }\n \n-    private static long storeSize( CommonAbstractStore<? extends AbstractBaseRecord,? extends StoreHeader> store )\n+    private static long storeSize( CommonAbstractStore<? extends AbstractBaseRecord, ? extends StoreHeader> store )\n     {\n         return store.getNumberOfIdsInUse() * store.getRecordSize();\n     }\n@@ -442,7 +409,7 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n \n     private void prepareBatchImportMigration( File storeDir, File migrationDir, RecordFormats oldFormat,\n             RecordFormats newFormat ) throws IOException\n-    {\n+{\n         createStore( migrationDir, newFormat );\n \n         // We use the batch importer for migrating the data, and we use it in a special way where we only\n@@ -456,11 +423,11 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         // The token stores also need to be migrated because we use those as-is and ask for their high ids\n         // when using the importer in the store migration scenario.\n         StoreFile[] storesFilesToMigrate = {\n-                StoreFile.LABEL_TOKEN_STORE, StoreFile.LABEL_TOKEN_NAMES_STORE,\n+    StoreFile.LABEL_TOKEN_STORE, StoreFile.LABEL_TOKEN_NAMES_STORE,\n                 StoreFile.PROPERTY_KEY_TOKEN_STORE, StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE,\n                 StoreFile.RELATIONSHIP_TYPE_TOKEN_STORE, StoreFile.RELATIONSHIP_TYPE_TOKEN_NAMES_STORE,\n                 StoreFile.NODE_LABEL_STORE};\n-        if ( newFormat.dynamic().equals( oldFormat.dynamic() ) )\n+if ( newFormat.dynamic().equals( oldFormat.dynamic() ) )\n         {\n             // We use the page cache for copying the STORE files since these might be on a block device.\n             for ( StoreFile file : storesFilesToMigrate )\n@@ -488,13 +455,13 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n             DirectRecordStoreMigrator migrator = new DirectRecordStoreMigrator( pageCache, fileSystem, config );\n \n             StoreType[] storesToMigrate = {\n-                    StoreType.LABEL_TOKEN, StoreType.LABEL_TOKEN_NAME,\n+    StoreType.LABEL_TOKEN, StoreType.LABEL_TOKEN_NAME,\n                     StoreType.PROPERTY_KEY_TOKEN, StoreType.PROPERTY_KEY_TOKEN_NAME,\n                     StoreType.RELATIONSHIP_TYPE_TOKEN, StoreType.RELATIONSHIP_TYPE_TOKEN_NAME,\n                     StoreType.NODE_LABEL,\n                     StoreType.SCHEMA};\n \n-            // Migrate these stores silently because they are usually very small\n+// Migrate these stores silently because they are usually very small\n             ProgressReporter progressReporter = SilentProgressReporter.INSTANCE;\n \n             migrator.migrate( storeDir, oldFormat, migrationDir, newFormat, progressReporter, storesToMigrate, StoreType.NODE );\n@@ -505,10 +472,10 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n     {\n         IdGeneratorFactory idGeneratorFactory = new ReadOnlyIdGeneratorFactory( fileSystem );\n         NullLogProvider logProvider = NullLogProvider.getInstance();\n-        StoreFactory storeFactory = new StoreFactory(\n-                migrationDir, config, idGeneratorFactory, pageCache, fileSystem, newFormat, logProvider,\n+        StoreFactory storeFactory = new StoreFactory( migrationDir, config, idGeneratorFactory, pageCache, fileSystem, newFormat, logProvider,\n                 EmptyVersionContextSupplier.EMPTY );\n-        try ( NeoStores neoStores = storeFactory.openAllNeoStores( true ) )\n+\n+try ( NeoStores neoStores = storeFactory.openAllNeoStores( true ) )\n         {\n             neoStores.getMetaDataStore();\n             neoStores.getLabelTokenStore();\n@@ -520,8 +487,7 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         }\n     }\n \n-    private AdditionalInitialIds readAdditionalIds( final long lastTxId, final long lastTxChecksum,\n-            final long lastTxLogVersion, final long lastTxLogByteOffset )\n+    private AdditionalInitialIds readAdditionalIds( final long lastTxId, final long lastTxChecksum, final long lastTxLogVersion, final long lastTxLogByteOffset )\n     {\n         return new AdditionalInitialIds()\n         {\n@@ -551,12 +517,9 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         };\n     }\n \n-    private ExecutionMonitor migrationBatchImporterMonitor( NeoStores legacyStore,\n-            final ProgressReporter progressReporter, Configuration config )\n+    private ExecutionMonitor migrationBatchImporterMonitor( NeoStores legacyStore, final ProgressReporter progressReporter, Configuration config )\n     {\n-        return new BatchImporterProgressMonitor(\n-                legacyStore.getNodeStore().getHighId(), legacyStore.getRelationshipStore().getHighId(),\n-                config, progressReporter );\n+        return new BatchImporterProgressMonitor( legacyStore.getNodeStore().getHighId(), legacyStore.getRelationshipStore().getHighId(), config, progressReporter );\n     }\n \n     private InputIterator legacyRelationshipsAsInput( NeoStores legacyStore, boolean requiresPropertyMigration )\n@@ -586,23 +549,22 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n     @Override\n     public void moveMigratedFiles( File migrationDir, File storeDir, String versionToUpgradeFrom,\n             String versionToUpgradeTo ) throws IOException\n-    {\n+{\n         // Move the migrated ones into the store directory\n         StoreFile.fileOperation( MOVE, fileSystem, migrationDir, storeDir, StoreFile.currentStoreFiles(),\n                 true, // allow to skip non existent source files\n                 ExistingTargetStrategy.OVERWRITE, // allow to overwrite target files\n                 StoreFileType.values() );\n-        // Since some of the files might only be accessible through the file system provided by the page cache (i.e.\n+    // Since some of the files might only be accessible through the file system provided by the page cache (i.e.\n         // block devices), we also try to move the files with the page cache.\n         try\n         {\n-            Iterable<FileHandle> fileHandles = pageCache.getCachedFileSystem()\n-                    .streamFilesRecursive( migrationDir )::iterator;\n-            for ( FileHandle fh : fileHandles )\n+            Iterable<FileHandle> fileHandles = pageCache.getCachedFileSystem().streamFilesRecursive( migrationDir )::iterator;\n+for ( FileHandle fh : fileHandles )\n             {\n                 Predicate<StoreFile> predicate =\n                         storeFile -> storeFile.fileName( StoreFileType.STORE ).equals( fh.getFile().getName() );\n-                if ( StreamSupport.stream( StoreFile.currentStoreFiles().spliterator(), false ).anyMatch( predicate ) )\n+if ( StreamSupport.stream( StoreFile.currentStoreFiles().spliterator(), false ).anyMatch( predicate ) )\n                 {\n                     final Optional<PagedFile> optionalPagedFile = pageCache.getExistingMapping( fh.getFile() );\n                     if ( optionalPagedFile.isPresent() )\n@@ -621,14 +583,13 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n \n     private void updateOrAddNeoStoreFieldsAsPartOfMigration( File migrationDir, File storeDir,\n             String versionToMigrateTo, LogPosition lastClosedTxLogPosition ) throws IOException\n-    {\n+{\n         final File storeDirNeoStore = new File( storeDir, DEFAULT_NAME );\n         final File migrationDirNeoStore = new File( migrationDir, DEFAULT_NAME );\n         copyWithPageCache( storeDirNeoStore, migrationDirNeoStore );\n-\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_ID,\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_ID,\n                 MetaDataStore.getRecord( pageCache, storeDirNeoStore, Position.LAST_TRANSACTION_ID ) );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TIME, System.currentTimeMillis() );\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TIME, System.currentTimeMillis() );\n \n         // Store the checksum of the transaction id the upgrade is at right now. Store it both as\n         // LAST_TRANSACTION_CHECKSUM and UPGRADE_TRANSACTION_CHECKSUM. Initially the last transaction and the\n@@ -643,24 +604,21 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         //    but T needs to be stored in neostore to be accessible. Obviously this scenario is only\n         //    problematic as long as we don't migrate and translate old logs.\n         TransactionId lastTxInfo = readLastTxInformation( migrationDir );\n-\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_CHECKSUM,\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_CHECKSUM,\n                 lastTxInfo.checksum() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_CHECKSUM,\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_CHECKSUM,\n                 lastTxInfo.checksum() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP,\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP,\n                 lastTxInfo.commitTimestamp() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n                 lastTxInfo.commitTimestamp() );\n-\n-        // add LAST_CLOSED_TRANSACTION_LOG_VERSION and LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET to the migrated\n+    // add LAST_CLOSED_TRANSACTION_LOG_VERSION and LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET to the migrated\n         // NeoStore\n         MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION,\n                 lastClosedTxLogPosition.getLogVersion() );\n-        MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,\n+MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,\n                 lastClosedTxLogPosition.getByteOffset() );\n-\n-        // Upgrade version in NeoStore\n+    // Upgrade version in NeoStore\n         MetaDataStore.setRecord( pageCache, migrationDirNeoStore, Position.STORE_VERSION,\n                 MetaDataStore.versionStringToLong( versionToMigrateTo ) );\n     }\n@@ -682,10 +640,10 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n         // We use the page cache for copying the neostore since it might be on a block device.\n         int pageSize = pageCache.pageSize();\n         try ( PagedFile fromFile = pageCache.map( sourceFile, pageSize );\n-              PagedFile toFile = pageCache.map( targetFile, pageSize, StandardOpenOption.CREATE );\n+PagedFile toFile = pageCache.map( targetFile, pageSize, StandardOpenOption.CREATE );\n               PageCursor fromCursor = fromFile.io( 0L, PagedFile.PF_SHARED_READ_LOCK );\n               PageCursor toCursor = toFile.io( 0L, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-        {\n+{\n             while ( fromCursor.next() )\n             {\n                 toCursor.next();\n@@ -750,4 +708,4 @@ public class StoreMigrator extends AbstractStoreMigrationParticipant\n             progressReporter.progress( progress );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}