{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3638",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "204",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "259",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "6",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "333",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "352",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "408",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "427",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "483",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "502",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "522",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "587",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "606",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "626",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "786",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "786",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "794",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "794",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "798",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "798",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "800",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "800",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3638/ShortArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3638/ShortArray.java\nindex 464119e5e7e..75c2dda75fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3638/ShortArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3638/ShortArray.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.lang.reflect.Array;\n@@ -32,849 +33,824 @@ import org.neo4j.values.storable.Values;\n \n public enum ShortArray\n {\n-    BOOLEAN( PropertyType.BOOL, 1, Boolean.class, boolean.class )\n-    {\n+  BOOLEAN(PropertyType.BOOL, 1, Boolean.class, boolean.class)\n+      {\n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            return 1;\n+          return 1;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (boolean value : (boolean[]) array)\n             {\n-                for ( boolean value : (boolean[]) array )\n-                {\n-                    result.put( value ? 1 : 0, 1 );\n-                }\n+              result.put(value ? 1 : 0, 1);\n             }\n-            else\n+          } else\n+          {\n+            for (boolean value : (Boolean[]) array)\n             {\n-                for ( boolean value : (Boolean[]) array )\n-                {\n-                    result.put( value ? 1 : 0, 1 );\n-                }\n+              result.put(value ? 1 : 0, 1);\n             }\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_BOOLEAN_ARRAY;\n-            }\n-            final boolean[] result = new boolean[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getByte( requiredBits ) != 0;\n-            }\n-            return Values.booleanArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_BOOLEAN_ARRAY;\n+          }\n+          final boolean[] result = new boolean[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = bits.getByte(requiredBits) != 0;\n+          }\n+          return Values.booleanArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_BOOLEAN_ARRAY;\n+          return Values.EMPTY_BOOLEAN_ARRAY;\n         }\n-    },\n-    BYTE( PropertyType.BYTE, 8, Byte.class, byte.class )\n-    {\n-        int getRequiredBits( byte value )\n+      },\n+  BYTE(PropertyType.BYTE, 8, Byte.class, byte.class)\n+      {\n+        int getRequiredBits(byte value)\n         {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & value) != 0)\n             {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (byte value : (byte[]) array)\n             {\n-                for ( byte value : (byte[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (byte value : (Byte[]) array)\n             {\n-                for ( byte value : (Byte[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (byte b : (byte[]) array)\n             {\n-                for ( byte b : (byte[]) array )\n-                {\n-                    result.put( b, requiredBits );\n-                }\n+              result.put(b, requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (byte b : (Byte[]) array)\n             {\n-                for ( byte b : (Byte[]) array )\n-                {\n-                    result.put( b, requiredBits );\n-                }\n+              result.put(b, requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_BYTE_ARRAY;\n-            }\n-            final byte[] result = new byte[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getByte( requiredBits );\n-            }\n-            return Values.byteArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_BYTE_ARRAY;\n+          }\n+          final byte[] result = new byte[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = bits.getByte(requiredBits);\n+          }\n+          return Values.byteArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_BYTE_ARRAY;\n+          return Values.EMPTY_BYTE_ARRAY;\n         }\n \n-    },\n-    SHORT( PropertyType.SHORT, 16, Short.class, short.class )\n-    {\n-        int getRequiredBits( short value )\n+      },\n+  SHORT(PropertyType.SHORT, 16, Short.class, short.class)\n+      {\n+        int getRequiredBits(short value)\n         {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & value) != 0)\n             {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (short value : (short[]) array)\n             {\n-                for ( short value : (short[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (short value : (Short[]) array)\n             {\n-                for ( short value : (Short[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (short value : (short[]) array)\n             {\n-                for ( short value : (short[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (short value : (Short[]) array)\n             {\n-                for ( short value : (Short[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_SHORT_ARRAY;\n-            }\n-            final short[] result = new short[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getShort( requiredBits );\n-            }\n-            return Values.shortArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_SHORT_ARRAY;\n+          }\n+          final short[] result = new short[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = bits.getShort(requiredBits);\n+          }\n+          return Values.shortArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_SHORT_ARRAY;\n+          return Values.EMPTY_SHORT_ARRAY;\n         }\n-    },\n-    CHAR( PropertyType.CHAR, 16, Character.class, char.class )\n-    {\n-        int getRequiredBits( char value )\n+      },\n+  CHAR(PropertyType.CHAR, 16, Character.class, char.class)\n+      {\n+        int getRequiredBits(char value)\n         {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & value) != 0)\n             {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (char value : (char[]) array)\n             {\n-                for ( char value : (char[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (char value : (Character[]) array)\n             {\n-                for ( char value : (Character[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (char value : (char[]) array)\n             {\n-                for ( char value : (char[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (char value : (Character[]) array)\n             {\n-                for ( char value : (Character[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_CHAR_ARRAY;\n-            }\n-            final char[] result = new char[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = (char) bits.getShort( requiredBits );\n-            }\n-            return Values.charArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_CHAR_ARRAY;\n+          }\n+          final char[] result = new char[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = (char) bits.getShort(requiredBits);\n+          }\n+          return Values.charArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_CHAR_ARRAY;\n+          return Values.EMPTY_CHAR_ARRAY;\n         }\n-    },\n-    INT( PropertyType.INT, 32, Integer.class, int.class )\n-    {\n-        int getRequiredBits( int value )\n+      },\n+  INT(PropertyType.INT, 32, Integer.class, int.class)\n+      {\n+        int getRequiredBits(int value)\n         {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & value) != 0)\n             {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (int value : (int[]) array)\n             {\n-                for ( int value : (int[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (int value : (Integer[]) array)\n             {\n-                for ( int value : (Integer[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (int value : (int[]) array)\n             {\n-                for ( int value : (int[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (int value : (Integer[]) array)\n             {\n-                for ( int value : (Integer[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_INT_ARRAY;\n-            }\n-            final int[] result = new int[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getInt( requiredBits );\n-            }\n-            return Values.intArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_INT_ARRAY;\n+          }\n+          final int[] result = new int[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = bits.getInt(requiredBits);\n+          }\n+          return Values.intArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_INT_ARRAY;\n+          return Values.EMPTY_INT_ARRAY;\n         }\n-    },\n-    LONG( PropertyType.LONG, 64, Long.class, long.class )\n-    {\n+      },\n+  LONG(PropertyType.LONG, 64, Long.class, long.class)\n+      {\n         @Override\n-        public int getRequiredBits( long value )\n+        public int getRequiredBits(long value)\n         {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & value) != 0)\n             {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (long value : (long[]) array)\n             {\n-                for ( long value : (long[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (long value : (Long[]) array)\n             {\n-                for ( long value : (Long[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (long value : (long[]) array)\n             {\n-                for ( long value : (long[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (long value : (Long[]) array)\n             {\n-                for ( long value : (Long[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n+              result.put(value, requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_LONG_ARRAY;\n-            }\n-            final long[] result = new long[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getLong( requiredBits );\n-            }\n-            return Values.longArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_LONG_ARRAY;\n+          }\n+          final long[] result = new long[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = bits.getLong(requiredBits);\n+          }\n+          return Values.longArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_LONG_ARRAY;\n+          return Values.EMPTY_LONG_ARRAY;\n         }\n-    },\n-    FLOAT( PropertyType.FLOAT, 32, Float.class, float.class )\n-    {\n-        int getRequiredBits( float value )\n+      },\n+  FLOAT(PropertyType.FLOAT, 32, Float.class, float.class)\n+      {\n+        int getRequiredBits(float value)\n         {\n-            int v = Float.floatToIntBits( value );\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          int v = Float.floatToIntBits(value);\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & v) != 0)\n             {\n-                if ( (mask & v) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (float value : (float[]) array)\n             {\n-                for ( float value : (float[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (float value : (Float[]) array)\n             {\n-                for ( float value : (Float[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (float value : (float[]) array)\n             {\n-                for ( float value : (float[]) array )\n-                {\n-                    result.put( Float.floatToIntBits( value ), requiredBits );\n-                }\n+              result.put(Float.floatToIntBits(value), requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (float value : (Float[]) array)\n             {\n-                for ( float value : (Float[]) array )\n-                {\n-                    result.put( Float.floatToIntBits( value ), requiredBits );\n-                }\n+              result.put(Float.floatToIntBits(value), requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public void writeAll( Object array, byte[] result, int offset )\n+        public void writeAll(Object array, byte[] result, int offset)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            float[] values = (float[]) array;\n+            for (int i = 0; i < values.length; i++)\n             {\n-                float[] values = (float[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeFloat( values[i], result, offset + i * 4 );\n-                }\n+              writeFloat(values[i], result, offset + i * 4);\n             }\n-            else\n+          } else\n+          {\n+            Float[] values = (Float[]) array;\n+            for (int i = 0; i < values.length; i++)\n             {\n-                Float[] values = (Float[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeFloat( values[i], result, offset + i * 4 );\n-                }\n+              writeFloat(values[i], result, offset + i * 4);\n             }\n+          }\n         }\n \n-        private void writeFloat( float floaValue, byte[] result, int offset )\n+        private void writeFloat(float floaValue, byte[] result, int offset)\n         {\n-            long value = Float.floatToIntBits( floaValue );\n-            for ( int b = 0; b < 4; b++ )\n-            {\n-                result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n-            }\n+          long value = Float.floatToIntBits(floaValue);\n+          for (int b = 0; b < 4; b++)\n+          {\n+            result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_FLOAT_ARRAY;\n-            }\n-            final float[] result = new float[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = Float.intBitsToFloat( bits.getInt( requiredBits ) );\n-            }\n-            return Values.floatArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_FLOAT_ARRAY;\n+          }\n+          final float[] result = new float[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = Float.intBitsToFloat(bits.getInt(requiredBits));\n+          }\n+          return Values.floatArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_FLOAT_ARRAY;\n+          return Values.EMPTY_FLOAT_ARRAY;\n         }\n-    },\n-    DOUBLE( PropertyType.DOUBLE, 64, Double.class, double.class )\n-    {\n-        int getRequiredBits( double value )\n+      },\n+  DOUBLE(PropertyType.DOUBLE, 64, Double.class, double.class)\n+      {\n+        int getRequiredBits(double value)\n         {\n-            long v = Double.doubleToLongBits( value );\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+          long v = Double.doubleToLongBits(value);\n+          long mask = 1L << maxBits - 1;\n+          for (int i = maxBits; i > 0; i--, mask >>= 1)\n+          {\n+            if ((mask & v) != 0)\n             {\n-                if ( (mask & v) != 0 )\n-                {\n-                    return i;\n-                }\n+              return i;\n             }\n-            return 1;\n+          }\n+          return 1;\n         }\n \n         @Override\n-        int getRequiredBits( Object array, int arrayLength )\n+        int getRequiredBits(Object array, int arrayLength)\n         {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n+          int highest = 1;\n+          if (isPrimitive(array))\n+          {\n+            for (double value : (double[]) array)\n             {\n-                for ( double value : (double[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            else\n+          } else\n+          {\n+            for (double value : (Double[]) array)\n             {\n-                for ( double value : (Double[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+              highest = Math.max(getRequiredBits(value), highest);\n             }\n-            return highest;\n+          }\n+          return highest;\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll(Object array, int length, int requiredBits, Bits result)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            for (double value : (double[]) array)\n             {\n-                for ( double value : (double[]) array )\n-                {\n-                    result.put( Double.doubleToLongBits( value ), requiredBits );\n-                }\n+              result.put(Double.doubleToLongBits(value), requiredBits);\n             }\n-            else\n+          } else\n+          {\n+            for (double value : (Double[]) array)\n             {\n-                for ( double value : (Double[]) array )\n-                {\n-                    result.put( Double.doubleToLongBits( value ), requiredBits );\n-                }\n+              result.put(Double.doubleToLongBits(value), requiredBits);\n             }\n+          }\n         }\n \n         @Override\n-        public void writeAll( Object array, byte[] result, int offset )\n+        public void writeAll(Object array, byte[] result, int offset)\n         {\n-            if ( isPrimitive( array ) )\n+          if (isPrimitive(array))\n+          {\n+            double[] values = (double[]) array;\n+            for (int i = 0; i < values.length; i++)\n             {\n-                double[] values = (double[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeDouble( values[i], result, offset + i * 8 );\n-                }\n+              writeDouble(values[i], result, offset + i * 8);\n             }\n-            else\n+          } else\n+          {\n+            Double[] values = (Double[]) array;\n+            for (int i = 0; i < values.length; i++)\n             {\n-                Double[] values = (Double[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeDouble( values[i], result, offset + i * 8 );\n-                }\n+              writeDouble(values[i], result, offset + i * 8);\n             }\n+          }\n         }\n \n-        private void writeDouble( double doubleValue, byte[] result, int offset )\n+        private void writeDouble(double doubleValue, byte[] result, int offset)\n         {\n-            long value = Double.doubleToLongBits( doubleValue );\n-            for ( int b = 0; b < 8; b++ )\n-            {\n-                result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n-            }\n+          long value = Double.doubleToLongBits(doubleValue);\n+          for (int b = 0; b < 8; b++)\n+          {\n+            result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n+          }\n         }\n \n         @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+        public ArrayValue createArray(int length, Bits bits, int requiredBits)\n         {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_DOUBLE_ARRAY;\n-            }\n-            final double[] result = new double[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = Double.longBitsToDouble( bits.getLong( requiredBits ) );\n-            }\n-            return Values.doubleArray( result );\n+          if (length == 0)\n+          {\n+            return Values.EMPTY_DOUBLE_ARRAY;\n+          }\n+          final double[] result = new double[length];\n+          for (int i = 0; i < length; i++)\n+          {\n+            result[i] = Double.longBitsToDouble(bits.getLong(requiredBits));\n+          }\n+          return Values.doubleArray(result);\n         }\n \n         @Override\n         public ArrayValue createEmptyArray()\n         {\n-            return Values.EMPTY_DOUBLE_ARRAY;\n+          return Values.EMPTY_DOUBLE_ARRAY;\n         }\n-    };\n+      };\n \n-    private static boolean isPrimitive( Object array )\n-    {\n-        return array.getClass().getComponentType().isPrimitive();\n-    }\n+  private static boolean isPrimitive(Object array)\n+  {\n+    return array.getClass().getComponentType().isPrimitive();\n+  }\n \n-    private static final ShortArray[] TYPES = ShortArray.values();\n-    private static final Map<Class<?>, ShortArray> all = new IdentityHashMap<>( TYPES.length * 2 );\n+  private static final ShortArray[] TYPES = ShortArray.values();\n+  private static final Map<Class<?>, ShortArray> all = new IdentityHashMap<>(TYPES.length * 2);\n \n-    static\n+  static\n+  {\n+    for (ShortArray shortArray : TYPES)\n     {\n-        for ( ShortArray shortArray : TYPES )\n-        {\n-            all.put( shortArray.primitiveClass, shortArray );\n-            all.put( shortArray.boxedClass, shortArray );\n-        }\n+      all.put(shortArray.primitiveClass, shortArray);\n+      all.put(shortArray.boxedClass, shortArray);\n     }\n-\n-    final int maxBits;\n-\n-    private final Class<?> boxedClass;\n-    private final Class<?> primitiveClass;\n-    private final PropertyType type;\n-\n-    ShortArray( PropertyType type, int maxBits, Class<?> boxedClass, Class<?> primitiveClass )\n+  }\n+\n+  final int maxBits;\n+\n+  private final Class<?> boxedClass;\n+  private final Class<?> primitiveClass;\n+  private final PropertyType type;\n+\n+  ShortArray(PropertyType type, int maxBits, Class<?> boxedClass, Class<?> primitiveClass)\n+  {\n+    this.type = type;\n+    this.maxBits = maxBits;\n+    this.boxedClass = boxedClass;\n+    this.primitiveClass = primitiveClass;\n+  }\n+\n+  public int intValue()\n+  {\n+    return type.intValue();\n+  }\n+\n+  public abstract ArrayValue createArray(int length, Bits bits, int requiredBits);\n+\n+  public static boolean encode(int keyId, Object array,\n+                               PropertyBlock target, int payloadSizeInBytes)\n+  {\n+    /*\n+     *  If the array is huge, we don't have to check anything else.\n+     *  So do the length check first.\n+     */\n+    int arrayLength = Array.getLength(array);\n+    if (arrayLength > 63)/*because we only use 6 bits for length*/\n     {\n-        this.type = type;\n-        this.maxBits = maxBits;\n-        this.boxedClass = boxedClass;\n-        this.primitiveClass = primitiveClass;\n+      return false;\n     }\n \n-    public int intValue()\n+    ShortArray type = typeOf(array);\n+    if (type == null)\n     {\n-        return type.intValue();\n+      return false;\n     }\n \n-    public abstract ArrayValue createArray( int length, Bits bits, int requiredBits );\n-\n-    public static boolean encode( int keyId, Object array,\n-                                  PropertyBlock target, int payloadSizeInBytes )\n+    int requiredBits = type.calculateRequiredBitsForArray(array, arrayLength);\n+    if (!willFit(requiredBits, arrayLength, payloadSizeInBytes))\n     {\n-        /*\n-         *  If the array is huge, we don't have to check anything else.\n-         *  So do the length check first.\n-         */\n-        int arrayLength = Array.getLength( array );\n-        if ( arrayLength > 63 )/*because we only use 6 bits for length*/\n-        {\n-            return false;\n-        }\n-\n-        ShortArray type = typeOf( array );\n-        if ( type == null )\n-        {\n-            return false;\n-        }\n-\n-        int requiredBits = type.calculateRequiredBitsForArray( array, arrayLength );\n-        if ( !willFit( requiredBits, arrayLength, payloadSizeInBytes ) )\n-        {\n-            // Too big array\n-            return false;\n-        }\n-        final int numberOfBytes = calculateNumberOfBlocksUsed( arrayLength, requiredBits ) * 8;\n-        if ( Bits.requiredLongs( numberOfBytes ) > PropertyType.getPayloadSizeLongs() )\n-        {\n-            return false;\n-        }\n-        Bits result = Bits.bits( numberOfBytes );\n-        // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        writeHeader( keyId, type, arrayLength, requiredBits, result );\n-        type.writeAll( array, arrayLength, requiredBits, result );\n-        target.setValueBlocks( result.getLongs() );\n-        return true;\n+      // Too big array\n+      return false;\n     }\n-\n-    private static void writeHeader( int keyId, ShortArray type, int arrayLength, int requiredBits, Bits result )\n+    final int numberOfBytes = calculateNumberOfBlocksUsed(arrayLength, requiredBits) * 8;\n+    if (Bits.requiredLongs(numberOfBytes) > PropertyType.getPayloadSizeLongs())\n     {\n-        result.put( keyId, 24 );\n-        result.put( PropertyType.SHORT_ARRAY.intValue(), 4 );\n-        result.put( type.type.intValue(), 4 );\n-        result.put( arrayLength, 6 );\n-        result.put( requiredBits, 6 );\n+      return false;\n     }\n-\n-    public static Value decode( PropertyBlock block )\n+    Bits result = Bits.bits(numberOfBytes);\n+    // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+    writeHeader(keyId, type, arrayLength, requiredBits, result);\n+    type.writeAll(array, arrayLength, requiredBits, result);\n+    target.setValueBlocks(result.getLongs());\n+    return true;\n+  }\n+\n+  private static void writeHeader(int keyId, ShortArray type, int arrayLength, int requiredBits, Bits result)\n+  {\n+    result.put(keyId, 24);\n+    result.put(PropertyType.SHORT_ARRAY.intValue(), 4);\n+    result.put(type.type.intValue(), 4);\n+    result.put(arrayLength, 6);\n+    result.put(requiredBits, 6);\n+  }\n+\n+  public static Value decode(PropertyBlock block)\n+  {\n+    Bits bits = Bits.bitsFromLongs(Arrays.copyOf(block.getValueBlocks(), block.getValueBlocks().length));\n+    return decode(bits);\n+  }\n+\n+  public static Value decode(Bits bits)\n+  {\n+    // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+    bits.getInt(24); // Get rid of key\n+    bits.getByte(4); // Get rid of short array type\n+    int typeId = bits.getByte(4);\n+    int arrayLength = bits.getByte(6);\n+    int requiredBits = bits.getByte(6);\n+    /*\n+     * So, it can be the case that values require 64 bits to store. However, you cannot encode this\n+     * value with 6 bits. calculateRequiredBitsForArray never returns 0, because even for an array of\n+     * all 0s one bit is required for every value. So when writing, we let it overflow and write out\n+     * 0. When we are reading back, we just have to make sure that reading in 0 means 64.\n+     */\n+    if (requiredBits == 0)\n     {\n-        Bits bits = Bits.bitsFromLongs( Arrays.copyOf( block.getValueBlocks(), block.getValueBlocks().length) );\n-        return decode( bits );\n+      requiredBits = 64;\n     }\n-\n-    public static Value decode( Bits bits )\n+    ShortArray type = typeOf((byte) typeId);\n+    return type.createArray(arrayLength, bits, requiredBits);\n+  }\n+\n+  private static boolean willFit(int requiredBits, int arrayLength, int payloadSizeInBytes)\n+  {\n+    int totalBitsRequired = requiredBits * arrayLength;\n+    int maxBits = payloadSizeInBytes * 8 - 24 - 4 - 4 - 6 - 6;\n+    return totalBitsRequired <= maxBits;\n+  }\n+\n+  public int calculateRequiredBitsForArray(Object array, int arrayLength)\n+  {\n+    if (arrayLength == 0)\n     {\n-        // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        bits.getInt( 24 ); // Get rid of key\n-        bits.getByte( 4 ); // Get rid of short array type\n-        int typeId = bits.getByte( 4 );\n-        int arrayLength = bits.getByte(6);\n-        int requiredBits = bits.getByte( 6 );\n-        /*\n-         * So, it can be the case that values require 64 bits to store. However, you cannot encode this\n-         * value with 6 bits. calculateRequiredBitsForArray never returns 0, because even for an array of\n-         * all 0s one bit is required for every value. So when writing, we let it overflow and write out\n-         * 0. When we are reading back, we just have to make sure that reading in 0 means 64.\n-         */\n-        if ( requiredBits == 0 )\n-        {\n-            requiredBits = 64;\n-        }\n-        ShortArray type = typeOf( (byte)typeId );\n-        return type.createArray(arrayLength, bits, requiredBits);\n+      return 0;\n     }\n-\n-    private static boolean willFit( int requiredBits, int arrayLength, int payloadSizeInBytes )\n+    // return getRequiredBits(findBiggestValue(array, arrayLength));\n+    return getRequiredBits(array, arrayLength);\n+  }\n+\n+  public int getRequiredBits(long value)\n+  {\n+    int highest = 1;\n+    long mask = 1;\n+    for (int i = 1; i <= maxBits; i++, mask <<= 1)\n     {\n-        int totalBitsRequired = requiredBits * arrayLength;\n-        int maxBits = payloadSizeInBytes * 8 - 24 - 4 - 4 - 6 - 6;\n-        return totalBitsRequired <= maxBits;\n+      if ((mask & value) != 0)\n+      {\n+        highest = i;\n+      }\n     }\n-\n-    public int calculateRequiredBitsForArray( Object array, int arrayLength )\n+    return highest;\n+  }\n+\n+  abstract int getRequiredBits(Object array, int arrayLength);\n+\n+  public static ShortArray typeOf(byte typeId)\n+  {\n+    return TYPES[typeId - 1];\n+  }\n+\n+  public static ShortArray typeOf(Object array)\n+  {\n+    return ShortArray.all.get(array.getClass().getComponentType());\n+  }\n+\n+  public static int calculateNumberOfBlocksUsed(long firstBlock)\n+  {\n+    // inside the high 4B of the first block of a short array sits the header\n+    int highInt = (int) (firstBlock >>> 32);\n+    // bits 32-37 contains number of items (length)\n+    int arrayLength = highInt & 0b11_1111;\n+    highInt >>>= 6;\n+    // bits 38-43 contains number of requires bits per item\n+    int requiredBits = highInt & 0b11_1111;\n+    // no values can be represented by 0 bits, so we use that value for 64 instead\n+    if (requiredBits == 0)\n     {\n-        if ( arrayLength == 0 )\n-        {\n-            return 0;\n-        }\n-        // return getRequiredBits(findBiggestValue(array, arrayLength));\n-        return getRequiredBits(array, arrayLength);\n-    }\n-\n-    public int getRequiredBits( long value )\n-    {\n-        int highest = 1;\n-        long mask = 1;\n-        for ( int i = 1; i <= maxBits; i++, mask <<= 1 )\n-        {\n-            if ( (mask & value) != 0 )\n-            {\n-                highest = i;\n-            }\n-        }\n-        return highest;\n+      requiredBits = 64;\n     }\n-\n-    abstract int getRequiredBits( Object array, int arrayLength );\n-\n-    public static ShortArray typeOf( byte typeId )\n-    {\n-        return TYPES[typeId - 1];\n-    }\n-\n-    public static ShortArray typeOf( Object array )\n-    {\n-        return ShortArray.all.get(array.getClass().getComponentType());\n-    }\n-\n-    public static int calculateNumberOfBlocksUsed( long firstBlock )\n-    {\n-        // inside the high 4B of the first block of a short array sits the header\n-        int highInt = (int) (firstBlock >>> 32);\n-        // bits 32-37 contains number of items (length)\n-        int arrayLength = highInt & 0b11_1111;\n-        highInt >>>= 6;\n-        // bits 38-43 contains number of requires bits per item\n-        int requiredBits = highInt & 0b11_1111;\n-        // no values can be represented by 0 bits, so we use that value for 64 instead\n-        if ( requiredBits == 0 )\n-        {\n-            requiredBits = 64;\n-        }\n-        return calculateNumberOfBlocksUsed( arrayLength, requiredBits );\n-    }\n-\n-    public static int calculateNumberOfBlocksUsed( int arrayLength, int requiredBits )\n-    {\n-        int bitsForItems = arrayLength * requiredBits;\n-        /*\n-         * Key, Property Type (ARRAY), Array Type, Array Length, Bits Per Member, Data\n-         */\n-        int totalBits = 24 + 4 + 4 + 6 + 6 + bitsForItems;\n-        int result = ( totalBits - 1 ) / 64 + 1;\n-        return result;\n-    }\n-\n-    public abstract void writeAll( Object array, int length, int requiredBits, Bits result );\n-\n-    public void writeAll( Object array, byte[] result, int offset )\n-    {\n-        throw new IllegalStateException( \"Types that skip bit compaction should implement this method\" );\n-    }\n-\n-    public abstract ArrayValue createEmptyArray();\n+    return calculateNumberOfBlocksUsed(arrayLength, requiredBits);\n+  }\n+\n+  public static int calculateNumberOfBlocksUsed(int arrayLength, int requiredBits)\n+  {\n+    int bitsForItems = arrayLength * requiredBits;\n+    /*\n+     * Key, Property Type (ARRAY), Array Type, Array Length, Bits Per Member, Data\n+     */\n+    int totalBits = 24 + 4 + 4 + 6 + 6 + bitsForItems;\n+    int result = (totalBits - 1) / 64 + 1;\n+    return result;\n+  }\n+\n+  public abstract void writeAll(Object array, int length, int requiredBits, Bits result);\n+\n+  public void writeAll(Object array, byte[] result, int offset)\n+  {\n+    throw new IllegalStateException(\"Types that skip bit compaction should implement this method\");\n+  }\n+\n+  public abstract ArrayValue createEmptyArray();\n }\n",
            "diff_size": 793
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "336",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3638/ShortArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3638/ShortArray.java\nindex 464119e5e7e..41b0be8946a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3638/ShortArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3638/ShortArray.java\n@@ -41,8 +41,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -72,7 +71,8 @@ public enum ShortArray\n             {\n                 result[i] = bits.getByte( requiredBits ) != 0;\n             }\n-            return Values.booleanArray( result );\n+\n+return Values.booleanArray( result );\n         }\n \n         @Override\n@@ -88,7 +88,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & value) != 0 )\n+                if ( ( mask & value) != 0 )\n                 {\n                     return i;\n                 }\n@@ -118,8 +118,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -149,7 +148,8 @@ public enum ShortArray\n             {\n                 result[i] = bits.getByte( requiredBits );\n             }\n-            return Values.byteArray( result );\n+\n+return Values.byteArray( result );\n         }\n \n         @Override\n@@ -157,7 +157,6 @@ public enum ShortArray\n         {\n             return Values.EMPTY_BYTE_ARRAY;\n         }\n-\n     },\n     SHORT( PropertyType.SHORT, 16, Short.class, short.class )\n     {\n@@ -166,7 +165,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & value) != 0 )\n+                if ( ( mask & value) != 0 )\n                 {\n                     return i;\n                 }\n@@ -196,8 +195,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -227,7 +225,8 @@ public enum ShortArray\n             {\n                 result[i] = bits.getShort( requiredBits );\n             }\n-            return Values.shortArray( result );\n+\n+return Values.shortArray( result );\n         }\n \n         @Override\n@@ -243,7 +242,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & value) != 0 )\n+                if ( ( mask & value) != 0 )\n                 {\n                     return i;\n                 }\n@@ -273,8 +272,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -304,7 +302,8 @@ public enum ShortArray\n             {\n                 result[i] = (char) bits.getShort( requiredBits );\n             }\n-            return Values.charArray( result );\n+\n+return Values.charArray( result );\n         }\n \n         @Override\n@@ -320,7 +319,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & value) != 0 )\n+                if ( ( mask & value) != 0 )\n                 {\n                     return i;\n                 }\n@@ -334,7 +333,7 @@ public enum ShortArray\n             int highest = 1;\n             if ( isPrimitive( array ) )\n             {\n-                for ( int value : (int[]) array )\n+                for ( int value : ( int[]) array )\n                 {\n                     highest = Math.max( getRequiredBits( value ), highest );\n                 }\n@@ -350,12 +349,11 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n-                for ( int value : (int[]) array )\n+                for ( int value : ( int[]) array )\n                 {\n                     result.put( value, requiredBits );\n                 }\n@@ -381,7 +379,8 @@ public enum ShortArray\n             {\n                 result[i] = bits.getInt( requiredBits );\n             }\n-            return Values.intArray( result );\n+\n+return Values.intArray( result );\n         }\n \n         @Override\n@@ -398,7 +397,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & value) != 0 )\n+                if ( ( mask & value) != 0 )\n                 {\n                     return i;\n                 }\n@@ -428,8 +427,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -459,7 +457,8 @@ public enum ShortArray\n             {\n                 result[i] = bits.getLong( requiredBits );\n             }\n-            return Values.longArray( result );\n+\n+return Values.longArray( result );\n         }\n \n         @Override\n@@ -476,7 +475,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & v) != 0 )\n+                if ( ( mask & v) != 0 )\n                 {\n                     return i;\n                 }\n@@ -506,8 +505,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -551,7 +549,7 @@ public enum ShortArray\n             long value = Float.floatToIntBits( floaValue );\n             for ( int b = 0; b < 4; b++ )\n             {\n-                result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n+                result[offset + b] = (byte) ((value >> ( b * 8 )) & 0xFFL );\n             }\n         }\n \n@@ -567,7 +565,8 @@ public enum ShortArray\n             {\n                 result[i] = Float.intBitsToFloat( bits.getInt( requiredBits ) );\n             }\n-            return Values.floatArray( result );\n+\n+return Values.floatArray( result );\n         }\n \n         @Override\n@@ -584,7 +583,7 @@ public enum ShortArray\n             long mask = 1L << maxBits - 1;\n             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n             {\n-                if ( (mask & v) != 0 )\n+                if ( ( mask & v) != 0 )\n                 {\n                     return i;\n                 }\n@@ -614,8 +613,7 @@ public enum ShortArray\n         }\n \n         @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n+        public void writeAll( Object array, int length, int requiredBits, Bits result )\n         {\n             if ( isPrimitive( array ) )\n             {\n@@ -659,7 +657,7 @@ public enum ShortArray\n             long value = Double.doubleToLongBits( doubleValue );\n             for ( int b = 0; b < 8; b++ )\n             {\n-                result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n+                result[offset + b] = (byte) ((value >> ( b * 8 )) & 0xFFL );\n             }\n         }\n \n@@ -675,7 +673,8 @@ public enum ShortArray\n             {\n                 result[i] = Double.longBitsToDouble( bits.getLong( requiredBits ) );\n             }\n-            return Values.doubleArray( result );\n+\n+return Values.doubleArray( result );\n         }\n \n         @Override\n@@ -723,9 +722,8 @@ public enum ShortArray\n \n     public abstract ArrayValue createArray( int length, Bits bits, int requiredBits );\n \n-    public static boolean encode( int keyId, Object array,\n-                                  PropertyBlock target, int payloadSizeInBytes )\n-    {\n+    public static boolean encode( int keyId, Object array, PropertyBlock target, int payloadSizeInBytes )\n+{\n         /*\n          *  If the array is huge, we don't have to check anything else.\n          *  So do the length check first.\n@@ -753,7 +751,8 @@ public enum ShortArray\n         {\n             return false;\n         }\n-        Bits result = Bits.bits( numberOfBytes );\n+\n+Bits result = Bits.bits( numberOfBytes );\n         // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n         writeHeader( keyId, type, arrayLength, requiredBits, result );\n         type.writeAll( array, arrayLength, requiredBits, result );\n@@ -782,7 +781,7 @@ public enum ShortArray\n         bits.getInt( 24 ); // Get rid of key\n         bits.getByte( 4 ); // Get rid of short array type\n         int typeId = bits.getByte( 4 );\n-        int arrayLength = bits.getByte(6);\n+        int arrayLength = bits.getByte( 6);\n         int requiredBits = bits.getByte( 6 );\n         /*\n          * So, it can be the case that values require 64 bits to store. However, you cannot encode this\n@@ -794,8 +793,9 @@ public enum ShortArray\n         {\n             requiredBits = 64;\n         }\n-        ShortArray type = typeOf( (byte)typeId );\n-        return type.createArray(arrayLength, bits, requiredBits);\n+\n+ShortArray type = typeOf( (byte)typeId );\n+        return type.createArray( arrayLength, bits, requiredBits );\n     }\n \n     private static boolean willFit( int requiredBits, int arrayLength, int payloadSizeInBytes )\n@@ -812,7 +812,7 @@ public enum ShortArray\n             return 0;\n         }\n         // return getRequiredBits(findBiggestValue(array, arrayLength));\n-        return getRequiredBits(array, arrayLength);\n+        return getRequiredBits( array, arrayLength );\n     }\n \n     public int getRequiredBits( long value )\n@@ -821,7 +821,7 @@ public enum ShortArray\n         long mask = 1;\n         for ( int i = 1; i <= maxBits; i++, mask <<= 1 )\n         {\n-            if ( (mask & value) != 0 )\n+            if ( ( mask & value) != 0 )\n             {\n                 highest = i;\n             }\n@@ -838,13 +838,13 @@ public enum ShortArray\n \n     public static ShortArray typeOf( Object array )\n     {\n-        return ShortArray.all.get(array.getClass().getComponentType());\n+        return ShortArray.all.get(array.getClass().getComponentType() );\n     }\n \n     public static int calculateNumberOfBlocksUsed( long firstBlock )\n     {\n         // inside the high 4B of the first block of a short array sits the header\n-        int highInt = (int) (firstBlock >>> 32);\n+        int highInt = ( int) ( firstBlock >>> 32 );\n         // bits 32-37 contains number of items (length)\n         int arrayLength = highInt & 0b11_1111;\n         highInt >>>= 6;\n@@ -855,7 +855,8 @@ public enum ShortArray\n         {\n             requiredBits = 64;\n         }\n-        return calculateNumberOfBlocksUsed( arrayLength, requiredBits );\n+\n+return calculateNumberOfBlocksUsed( arrayLength, requiredBits );\n     }\n \n     public static int calculateNumberOfBlocksUsed( int arrayLength, int requiredBits )\n@@ -877,4 +878,4 @@ public enum ShortArray\n     }\n \n     public abstract ArrayValue createEmptyArray();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "15",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "46",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "15",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "53",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "28",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "column": "28",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "column": "37",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "89",
                    "column": "29",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "18",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "18",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "111",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "18",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "125",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "18",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "31",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "31",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "40",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "168",
                    "column": "32",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "183",
                    "column": "21",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "183",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "21",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "21",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "204",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "21",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "211",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "34",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "244",
                    "column": "34",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "244",
                    "column": "43",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "247",
                    "column": "35",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "262",
                    "column": "24",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "262",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "24",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "269",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "24",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "283",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "24",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "290",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "37",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "323",
                    "column": "37",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "323",
                    "column": "46",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "326",
                    "column": "38",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "341",
                    "column": "27",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "341",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "27",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "348",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "27",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "362",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "27",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "369",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "40",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "403",
                    "column": "40",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "403",
                    "column": "49",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "406",
                    "column": "41",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "421",
                    "column": "30",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "421",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "30",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "428",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "30",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "442",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "30",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "449",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "43",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "483",
                    "column": "43",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "483",
                    "column": "52",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "486",
                    "column": "44",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "501",
                    "column": "33",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "501",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "33",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "508",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "33",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "522",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "33",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "529",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "79",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "552",
                    "column": "79",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "562",
                    "column": "69",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "562",
                    "column": "75",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "562",
                    "column": "80",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "593",
                    "column": "46",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "593",
                    "column": "46",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "593",
                    "column": "55",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "596",
                    "column": "47",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "611",
                    "column": "36",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "611",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "36",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "618",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "36",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "632",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "36",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "639",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "83",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "662",
                    "column": "83",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "672",
                    "column": "72",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "672",
                    "column": "78",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "672",
                    "column": "83",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "707",
                    "column": "94",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "711",
                    "column": "11",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "711",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "93",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "818",
                    "column": "47",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "819",
                    "column": "43",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "819",
                    "column": "46",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "819",
                    "column": "62",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "840",
                    "column": "26",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "865",
                    "column": "43",
                    "severity": "error",
                    "message": "'>>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "867",
                    "column": "36",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "870",
                    "column": "37",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "882",
                    "column": "41",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "886",
                    "column": "29",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "886",
                    "column": "44",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "887",
                    "column": "40",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3638/ShortArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3638/ShortArray.java\nindex 464119e5e7e..42d8687a7c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3638/ShortArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3638/ShortArray.java\n@@ -23,7 +23,6 @@ import java.lang.reflect.Array;\n import java.util.Arrays;\n import java.util.IdentityHashMap;\n import java.util.Map;\n-\n import org.neo4j.kernel.impl.store.record.PropertyBlock;\n import org.neo4j.kernel.impl.util.Bits;\n import org.neo4j.values.storable.ArrayValue;\n@@ -31,850 +30,871 @@ import org.neo4j.values.storable.Value;\n import org.neo4j.values.storable.Values;\n \n public enum ShortArray\n-{\n-    BOOLEAN( PropertyType.BOOL, 1, Boolean.class, boolean.class )\n-    {\n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            return 1;\n-        }\n-\n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( boolean value : (boolean[]) array )\n-                {\n-                    result.put( value ? 1 : 0, 1 );\n-                }\n-            }\n-            else\n-            {\n-                for ( boolean value : (Boolean[]) array )\n-                {\n-                    result.put( value ? 1 : 0, 1 );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_BOOLEAN_ARRAY;\n-            }\n-            final boolean[] result = new boolean[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getByte( requiredBits ) != 0;\n-            }\n-            return Values.booleanArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_BOOLEAN_ARRAY;\n-        }\n-    },\n-    BYTE( PropertyType.BYTE, 8, Byte.class, byte.class )\n-    {\n-        int getRequiredBits( byte value )\n-        {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n-            {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n-            }\n-            return 1;\n-        }\n-\n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( byte value : (byte[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            else\n-            {\n-                for ( byte value : (Byte[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            return highest;\n-        }\n-\n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( byte b : (byte[]) array )\n-                {\n-                    result.put( b, requiredBits );\n-                }\n-            }\n-            else\n-            {\n-                for ( byte b : (Byte[]) array )\n-                {\n-                    result.put( b, requiredBits );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_BYTE_ARRAY;\n-            }\n-            final byte[] result = new byte[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getByte( requiredBits );\n-            }\n-            return Values.byteArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_BYTE_ARRAY;\n-        }\n-\n-    },\n-    SHORT( PropertyType.SHORT, 16, Short.class, short.class )\n-    {\n-        int getRequiredBits( short value )\n-        {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+{ BOOLEAN( PropertyType.BOOL, 1, Boolean.class, boolean.class )\n+  {\n+      @Override\n+      int getRequiredBits( Object array, int arrayLength )\n+      {\n+          return 1;\n+      }\n+\n+      @Override\n+      public void writeAll( Object array, int length, int requiredBits, Bits result )\n+      {\n+          if ( isPrimitive( array ) )\n+          {\n+              for( boolean value : ( boolean[]) array)\n+              {\n+                  result.put( value ? 1 : 0, 1 );\n+              }\n+          }\n+          else\n+          {\n+              for( boolean value : (Boolean[]) array)\n+              {\n+                  result.put( value ? 1 : 0, 1 );\n+              }\n+          }\n+      }\n+\n+      @Override\n+      public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+      {\n+          if ( length == 0 )\n+          {\n+              return Values.EMPTY_BOOLEAN_ARRAY;\n+          }\n+\n+          final boolean[] result = new boolean[length];\n+          for ( int i = 0; i < length; i++ )\n+          {\n+              result[i] = bits.getByte( requiredBits ) != 0;\n+          }\n+\n+          return Values.booleanArray( result );\n+      }\n+\n+      @Override\n+      public ArrayValue createEmptyArray()\n+      {\n+          return Values.EMPTY_BOOLEAN_ARRAY;\n+      }\n+  }, BYTE( PropertyType.BYTE, 8, Byte.class, byte.class )\n+     {\n+         int getRequiredBits( byte value )\n+         {\n+             long mask = 1L<<maxBits- 1;\n+             for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+             {\n+                 if ( ( mask& value) != 0 )\n+                 {\n+                     return i;\n+                 }\n+             }\n+\n+             return 1;\n+         }\n+\n+         @Override\n+         int getRequiredBits( Object array, int arrayLength )\n+         {\n+             int highest = 1;\n+             if ( isPrimitive( array ) )\n+             {\n+                 for( byte value : ( byte[]) array)\n+                 {\n+                     highest = Math.max( getRequiredBits( value ), highest );\n+                 }\n+             }\n+             else\n+             {\n+                 for( byte value : (Byte[]) array)\n+                 {\n+                     highest = Math.max( getRequiredBits( value ), highest );\n+                 }\n+             }\n+\n+             return highest;\n+         }\n+\n+         @Override\n+         public void writeAll( Object array, int length, int requiredBits, Bits result )\n+         {\n+             if ( isPrimitive( array ) )\n+             {\n+                 for( byte b : ( byte[]) array)\n+                 {\n+                     result.put( b, requiredBits );\n+                 }\n+             }\n+             else\n+             {\n+                 for( byte b : (Byte[]) array)\n+                 {\n+                     result.put( b, requiredBits );\n+                 }\n+             }\n+         }\n+\n+         @Override\n+         public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+         {\n+             if ( length == 0 )\n+             {\n+                 return Values.EMPTY_BYTE_ARRAY;\n+             }\n+\n+             final byte[] result = new byte[length];\n+             for ( int i = 0; i < length; i++ )\n+             {\n+                 result[i] = bits.getByte( requiredBits );\n+             }\n+\n+             return Values.byteArray( result );\n+         }\n+\n+         @Override\n+         public ArrayValue createEmptyArray()\n+         {\n+             return Values.EMPTY_BYTE_ARRAY;\n+         }\n+     }, SHORT( PropertyType.SHORT, 16, Short.class, short.class )\n+        {\n+            int getRequiredBits( short value )\n             {\n-                if ( (mask & value) != 0 )\n+                long mask = 1L<<maxBits- 1;\n+                for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n                 {\n-                    return i;\n+                    if ( ( mask& value) != 0 )\n+                    {\n+                        return i;\n+                    }\n                 }\n-            }\n-            return 1;\n-        }\n \n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( short value : (short[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+                return 1;\n             }\n-            else\n-            {\n-                for ( short value : (Short[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            return highest;\n-        }\n \n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( short value : (short[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n-            }\n-            else\n+            @Override\n+            int getRequiredBits( Object array, int arrayLength )\n             {\n-                for ( short value : (Short[]) array )\n+                int highest = 1;\n+                if ( isPrimitive( array ) )\n                 {\n-                    result.put( value, requiredBits );\n+                    for( short value : ( short[]) array)\n+                    {\n+                        highest = Math.max( getRequiredBits( value ), highest );\n+                    }\n                 }\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_SHORT_ARRAY;\n-            }\n-            final short[] result = new short[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getShort( requiredBits );\n-            }\n-            return Values.shortArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_SHORT_ARRAY;\n-        }\n-    },\n-    CHAR( PropertyType.CHAR, 16, Character.class, char.class )\n-    {\n-        int getRequiredBits( char value )\n-        {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n-            {\n-                if ( (mask & value) != 0 )\n+                else\n                 {\n-                    return i;\n+                    for( short value : (Short[]) array)\n+                    {\n+                        highest = Math.max( getRequiredBits( value ), highest );\n+                    }\n                 }\n-            }\n-            return 1;\n-        }\n \n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( char value : (char[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            else\n-            {\n-                for ( char value : (Character[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n+                return highest;\n             }\n-            return highest;\n-        }\n \n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n+            @Override\n+            public void writeAll( Object array, int length, int requiredBits, Bits result )\n             {\n-                for ( char value : (char[]) array )\n+                if ( isPrimitive( array ) )\n                 {\n-                    result.put( value, requiredBits );\n+                    for( short value : ( short[]) array)\n+                    {\n+                        result.put( value, requiredBits );\n+                    }\n                 }\n-            }\n-            else\n-            {\n-                for ( char value : (Character[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_CHAR_ARRAY;\n-            }\n-            final char[] result = new char[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = (char) bits.getShort( requiredBits );\n-            }\n-            return Values.charArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_CHAR_ARRAY;\n-        }\n-    },\n-    INT( PropertyType.INT, 32, Integer.class, int.class )\n-    {\n-        int getRequiredBits( int value )\n-        {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n-            {\n-                if ( (mask & value) != 0 )\n+                else\n                 {\n-                    return i;\n+                    for( short value : (Short[]) array)\n+                    {\n+                        result.put( value, requiredBits );\n+                    }\n                 }\n             }\n-            return 1;\n-        }\n \n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( int value : (int[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            else\n+            @Override\n+            public ArrayValue createArray( int length, Bits bits, int requiredBits )\n             {\n-                for ( int value : (Integer[]) array )\n+                if ( length == 0 )\n                 {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n+                    return Values.EMPTY_SHORT_ARRAY;\n                 }\n-            }\n-            return highest;\n-        }\n \n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( int value : (int[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n-            }\n-            else\n-            {\n-                for ( int value : (Integer[]) array )\n+                final short[] result = new short[length];\n+                for ( int i = 0; i < length; i++ )\n                 {\n-                    result.put( value, requiredBits );\n+                    result[i] = bits.getShort( requiredBits );\n                 }\n-            }\n-        }\n \n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_INT_ARRAY;\n+                return Values.shortArray( result );\n             }\n-            final int[] result = new int[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getInt( requiredBits );\n-            }\n-            return Values.intArray( result );\n-        }\n \n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_INT_ARRAY;\n-        }\n-    },\n-    LONG( PropertyType.LONG, 64, Long.class, long.class )\n-    {\n-        @Override\n-        public int getRequiredBits( long value )\n-        {\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+            @Override\n+            public ArrayValue createEmptyArray()\n             {\n-                if ( (mask & value) != 0 )\n-                {\n-                    return i;\n-                }\n-            }\n-            return 1;\n-        }\n-\n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( long value : (long[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            else\n-            {\n-                for ( long value : (Long[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            return highest;\n-        }\n-\n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( long value : (long[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n-            }\n-            else\n-            {\n-                for ( long value : (Long[]) array )\n-                {\n-                    result.put( value, requiredBits );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_LONG_ARRAY;\n-            }\n-            final long[] result = new long[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = bits.getLong( requiredBits );\n-            }\n-            return Values.longArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_LONG_ARRAY;\n-        }\n-    },\n-    FLOAT( PropertyType.FLOAT, 32, Float.class, float.class )\n-    {\n-        int getRequiredBits( float value )\n-        {\n-            int v = Float.floatToIntBits( value );\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n-            {\n-                if ( (mask & v) != 0 )\n-                {\n-                    return i;\n-                }\n-            }\n-            return 1;\n-        }\n-\n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( float value : (float[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            else\n-            {\n-                for ( float value : (Float[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            return highest;\n-        }\n-\n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( float value : (float[]) array )\n-                {\n-                    result.put( Float.floatToIntBits( value ), requiredBits );\n-                }\n-            }\n-            else\n-            {\n-                for ( float value : (Float[]) array )\n-                {\n-                    result.put( Float.floatToIntBits( value ), requiredBits );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void writeAll( Object array, byte[] result, int offset )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                float[] values = (float[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeFloat( values[i], result, offset + i * 4 );\n-                }\n-            }\n-            else\n-            {\n-                Float[] values = (Float[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeFloat( values[i], result, offset + i * 4 );\n-                }\n-            }\n-        }\n-\n-        private void writeFloat( float floaValue, byte[] result, int offset )\n-        {\n-            long value = Float.floatToIntBits( floaValue );\n-            for ( int b = 0; b < 4; b++ )\n-            {\n-                result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_FLOAT_ARRAY;\n-            }\n-            final float[] result = new float[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = Float.intBitsToFloat( bits.getInt( requiredBits ) );\n-            }\n-            return Values.floatArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_FLOAT_ARRAY;\n-        }\n-    },\n-    DOUBLE( PropertyType.DOUBLE, 64, Double.class, double.class )\n-    {\n-        int getRequiredBits( double value )\n-        {\n-            long v = Double.doubleToLongBits( value );\n-            long mask = 1L << maxBits - 1;\n-            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n-            {\n-                if ( (mask & v) != 0 )\n-                {\n-                    return i;\n-                }\n-            }\n-            return 1;\n-        }\n-\n-        @Override\n-        int getRequiredBits( Object array, int arrayLength )\n-        {\n-            int highest = 1;\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( double value : (double[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            else\n-            {\n-                for ( double value : (Double[]) array )\n-                {\n-                    highest = Math.max( getRequiredBits( value ), highest );\n-                }\n-            }\n-            return highest;\n-        }\n-\n-        @Override\n-        public\n-        void writeAll( Object array, int length, int requiredBits, Bits result )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                for ( double value : (double[]) array )\n-                {\n-                    result.put( Double.doubleToLongBits( value ), requiredBits );\n-                }\n-            }\n-            else\n-            {\n-                for ( double value : (Double[]) array )\n-                {\n-                    result.put( Double.doubleToLongBits( value ), requiredBits );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void writeAll( Object array, byte[] result, int offset )\n-        {\n-            if ( isPrimitive( array ) )\n-            {\n-                double[] values = (double[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeDouble( values[i], result, offset + i * 8 );\n-                }\n-            }\n-            else\n-            {\n-                Double[] values = (Double[]) array;\n-                for ( int i = 0; i < values.length; i++ )\n-                {\n-                    writeDouble( values[i], result, offset + i * 8 );\n-                }\n-            }\n-        }\n-\n-        private void writeDouble( double doubleValue, byte[] result, int offset )\n-        {\n-            long value = Double.doubleToLongBits( doubleValue );\n-            for ( int b = 0; b < 8; b++ )\n-            {\n-                result[offset + b] = (byte) ((value >> (b * 8)) & 0xFFL);\n-            }\n-        }\n-\n-        @Override\n-        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n-        {\n-            if ( length == 0 )\n-            {\n-                return Values.EMPTY_DOUBLE_ARRAY;\n-            }\n-            final double[] result = new double[length];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[i] = Double.longBitsToDouble( bits.getLong( requiredBits ) );\n+                return Values.EMPTY_SHORT_ARRAY;\n             }\n-            return Values.doubleArray( result );\n-        }\n-\n-        @Override\n-        public ArrayValue createEmptyArray()\n-        {\n-            return Values.EMPTY_DOUBLE_ARRAY;\n-        }\n-    };\n-\n-    private static boolean isPrimitive( Object array )\n-    {\n-        return array.getClass().getComponentType().isPrimitive();\n-    }\n-\n-    private static final ShortArray[] TYPES = ShortArray.values();\n-    private static final Map<Class<?>, ShortArray> all = new IdentityHashMap<>( TYPES.length * 2 );\n-\n-    static\n-    {\n-        for ( ShortArray shortArray : TYPES )\n-        {\n-            all.put( shortArray.primitiveClass, shortArray );\n-            all.put( shortArray.boxedClass, shortArray );\n-        }\n-    }\n-\n-    final int maxBits;\n-\n-    private final Class<?> boxedClass;\n-    private final Class<?> primitiveClass;\n-    private final PropertyType type;\n-\n-    ShortArray( PropertyType type, int maxBits, Class<?> boxedClass, Class<?> primitiveClass )\n-    {\n-        this.type = type;\n-        this.maxBits = maxBits;\n-        this.boxedClass = boxedClass;\n-        this.primitiveClass = primitiveClass;\n-    }\n-\n-    public int intValue()\n-    {\n-        return type.intValue();\n-    }\n-\n-    public abstract ArrayValue createArray( int length, Bits bits, int requiredBits );\n-\n-    public static boolean encode( int keyId, Object array,\n-                                  PropertyBlock target, int payloadSizeInBytes )\n-    {\n+        }, CHAR( PropertyType.CHAR, 16, Character.class, char.class )\n+           {\n+               int getRequiredBits( char value )\n+               {\n+                   long mask = 1L<<maxBits- 1;\n+                   for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+                   {\n+                       if ( ( mask& value) != 0 )\n+                       {\n+                           return i;\n+                       }\n+                   }\n+\n+                   return 1;\n+               }\n+\n+               @Override\n+               int getRequiredBits( Object array, int arrayLength )\n+               {\n+                   int highest = 1;\n+                   if ( isPrimitive( array ) )\n+                   {\n+                       for( char value : ( char[]) array)\n+                       {\n+                           highest = Math.max( getRequiredBits( value ), highest );\n+                       }\n+                   }\n+                   else\n+                   {\n+                       for( char value : (Character[]) array)\n+                       {\n+                           highest = Math.max( getRequiredBits( value ), highest );\n+                       }\n+                   }\n+\n+                   return highest;\n+               }\n+\n+               @Override\n+               public void writeAll( Object array, int length, int requiredBits, Bits result )\n+               {\n+                   if ( isPrimitive( array ) )\n+                   {\n+                       for( char value : ( char[]) array)\n+                       {\n+                           result.put( value, requiredBits );\n+                       }\n+                   }\n+                   else\n+                   {\n+                       for( char value : (Character[]) array)\n+                       {\n+                           result.put( value, requiredBits );\n+                       }\n+                   }\n+               }\n+\n+               @Override\n+               public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+               {\n+                   if ( length == 0 )\n+                   {\n+                       return Values.EMPTY_CHAR_ARRAY;\n+                   }\n+\n+                   final char[] result = new char[length];\n+                   for ( int i = 0; i < length; i++ )\n+                   {\n+                       result[i] = (char) bits.getShort( requiredBits );\n+                   }\n+\n+                   return Values.charArray( result );\n+               }\n+\n+               @Override\n+               public ArrayValue createEmptyArray()\n+               {\n+                   return Values.EMPTY_CHAR_ARRAY;\n+               }\n+           }, INT( PropertyType.INT, 32, Integer.class, int.class )\n+              {\n+                  int getRequiredBits( int value )\n+                  {\n+                      long mask = 1L<<maxBits- 1;\n+                      for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+                      {\n+                          if ( ( mask& value) != 0 )\n+                          {\n+                              return i;\n+                          }\n+                      }\n+\n+                      return 1;\n+                  }\n+\n+                  @Override\n+                  int getRequiredBits( Object array, int arrayLength )\n+                  {\n+                      int highest = 1;\n+                      if ( isPrimitive( array ) )\n+                      {\n+                          for( int value : ( int[]) array)\n+                          {\n+                              highest = Math.max( getRequiredBits( value ), highest );\n+                          }\n+                      }\n+                      else\n+                      {\n+                          for( int value : (Integer[]) array)\n+                          {\n+                              highest = Math.max( getRequiredBits( value ), highest );\n+                          }\n+                      }\n+\n+                      return highest;\n+                  }\n+\n+                  @Override\n+                  public void writeAll( Object array, int length, int requiredBits, Bits result )\n+                  {\n+                      if ( isPrimitive( array ) )\n+                      {\n+                          for( int value : ( int[]) array)\n+                          {\n+                              result.put( value, requiredBits );\n+                          }\n+                      }\n+                      else\n+                      {\n+                          for( int value : (Integer[]) array)\n+                          {\n+                              result.put( value, requiredBits );\n+                          }\n+                      }\n+                  }\n+\n+                  @Override\n+                  public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+                  {\n+                      if ( length == 0 )\n+                      {\n+                          return Values.EMPTY_INT_ARRAY;\n+                      }\n+\n+                      final int[] result = new int[length];\n+                      for ( int i = 0; i < length; i++ )\n+                      {\n+                          result[i] = bits.getInt( requiredBits );\n+                      }\n+\n+                      return Values.intArray( result );\n+                  }\n+\n+                  @Override\n+                  public ArrayValue createEmptyArray()\n+                  {\n+                      return Values.EMPTY_INT_ARRAY;\n+                  }\n+              }, LONG( PropertyType.LONG, 64, Long.class, long.class )\n+                 {\n+                     @Override\n+                     public int getRequiredBits( long value )\n+                     {\n+                         long mask = 1L<<maxBits- 1;\n+                         for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+                         {\n+                             if ( ( mask& value) != 0 )\n+                             {\n+                                 return i;\n+                             }\n+                         }\n+\n+                         return 1;\n+                     }\n+\n+                     @Override\n+                     int getRequiredBits( Object array, int arrayLength )\n+                     {\n+                         int highest = 1;\n+                         if ( isPrimitive( array ) )\n+                         {\n+                             for( long value : ( long[]) array)\n+                             {\n+                                 highest = Math.max( getRequiredBits( value ), highest );\n+                             }\n+                         }\n+                         else\n+                         {\n+                             for( long value : (Long[]) array)\n+                             {\n+                                 highest = Math.max( getRequiredBits( value ), highest );\n+                             }\n+                         }\n+\n+                         return highest;\n+                     }\n+\n+                     @Override\n+                     public void writeAll( Object array, int length, int requiredBits, Bits result )\n+                     {\n+                         if ( isPrimitive( array ) )\n+                         {\n+                             for( long value : ( long[]) array)\n+                             {\n+                                 result.put( value, requiredBits );\n+                             }\n+                         }\n+                         else\n+                         {\n+                             for( long value : (Long[]) array)\n+                             {\n+                                 result.put( value, requiredBits );\n+                             }\n+                         }\n+                     }\n+\n+                     @Override\n+                     public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+                     {\n+                         if ( length == 0 )\n+                         {\n+                             return Values.EMPTY_LONG_ARRAY;\n+                         }\n+\n+                         final long[] result = new long[length];\n+                         for ( int i = 0; i < length; i++ )\n+                         {\n+                             result[i] = bits.getLong( requiredBits );\n+                         }\n+\n+                         return Values.longArray( result );\n+                     }\n+\n+                     @Override\n+                     public ArrayValue createEmptyArray()\n+                     {\n+                         return Values.EMPTY_LONG_ARRAY;\n+                     }\n+                 }, FLOAT( PropertyType.FLOAT, 32, Float.class, float.class )\n+                    {\n+                        int getRequiredBits( float value )\n+                        {\n+                            int v = Float.floatToIntBits( value );\n+                            long mask = 1L<<maxBits- 1;\n+                            for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+                            {\n+                                if ( ( mask& v) != 0 )\n+                                {\n+                                    return i;\n+                                }\n+                            }\n+\n+                            return 1;\n+                        }\n+\n+                        @Override\n+                        int getRequiredBits( Object array, int arrayLength )\n+                        {\n+                            int highest = 1;\n+                            if ( isPrimitive( array ) )\n+                            {\n+                                for( float value : ( float[]) array)\n+                                {\n+                                    highest = Math.max( getRequiredBits( value ), highest );\n+                                }\n+                            }\n+                            else\n+                            {\n+                                for( float value : (Float[]) array)\n+                                {\n+                                    highest = Math.max( getRequiredBits( value ), highest );\n+                                }\n+                            }\n+\n+                            return highest;\n+                        }\n+\n+                        @Override\n+                        public void writeAll( Object array, int length, int requiredBits, Bits result )\n+                        {\n+                            if ( isPrimitive( array ) )\n+                            {\n+                                for( float value : ( float[]) array)\n+                                {\n+                                    result.put( Float.floatToIntBits( value ), requiredBits );\n+                                }\n+                            }\n+                            else\n+                            {\n+                                for( float value : (Float[]) array)\n+                                {\n+                                    result.put( Float.floatToIntBits( value ), requiredBits );\n+                                }\n+                            }\n+                        }\n+\n+                        @Override\n+                        public void writeAll( Object array, byte[] result, int offset )\n+                        {\n+                            if ( isPrimitive( array ) )\n+                            {\n+                                float[] values = ( float[]) array;\n+                                for ( int i = 0; i < values.length; i++ )\n+                                {\n+                                    writeFloat( values[ i], result, offset + i* 4 );\n+                                }\n+                            }\n+                            else\n+                            {\n+                                Float[] values = (Float[]) array;\n+                                for ( int i = 0; i < values.length; i++ )\n+                                {\n+                                    writeFloat( values[ i], result, offset + i* 4 );\n+                                }\n+                            }\n+                        }\n+\n+                        private void writeFloat( float floaValue, byte[] result, int offset )\n+                        {\n+                            long value = Float.floatToIntBits( floaValue );\n+                            for ( int b = 0; b < 4; b++ )\n+                            {\n+                                result[offset + b] = (byte) (( value>> ( b* 8))& 0xFFL);\n+                            }\n+                        }\n+\n+                        @Override\n+                        public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+                        {\n+                            if ( length == 0 )\n+                            {\n+                                return Values.EMPTY_FLOAT_ARRAY;\n+                            }\n+\n+                            final float[] result = new float[length];\n+                            for ( int i = 0; i < length; i++ )\n+                            {\n+                                result[i] = Float.intBitsToFloat( bits.getInt( requiredBits ) );\n+                            }\n+\n+                            return Values.floatArray( result );\n+                        }\n+\n+                        @Override\n+                        public ArrayValue createEmptyArray()\n+                        {\n+                            return Values.EMPTY_FLOAT_ARRAY;\n+                        }\n+                    }, DOUBLE( PropertyType.DOUBLE, 64, Double.class, double.class )\n+                       {\n+                           int getRequiredBits( double value )\n+                           {\n+                               long v = Double.doubleToLongBits( value );\n+                               long mask = 1L<<maxBits- 1;\n+                               for ( int i = maxBits; i > 0; i--, mask >>= 1 )\n+                               {\n+                                   if ( ( mask& v) != 0 )\n+                                   {\n+                                       return i;\n+                                   }\n+                               }\n+\n+                               return 1;\n+                           }\n+\n+                           @Override\n+                           int getRequiredBits( Object array, int arrayLength )\n+                           {\n+                               int highest = 1;\n+                               if ( isPrimitive( array ) )\n+                               {\n+                                   for( double value : ( double[]) array)\n+                                   {\n+                                       highest = Math.max( getRequiredBits( value ), highest );\n+                                   }\n+                               }\n+                               else\n+                               {\n+                                   for( double value : (Double[]) array)\n+                                   {\n+                                       highest = Math.max( getRequiredBits( value ), highest );\n+                                   }\n+                               }\n+\n+                               return highest;\n+                           }\n+\n+                           @Override\n+                           public void writeAll( Object array, int length, int requiredBits, Bits result )\n+                           {\n+                               if ( isPrimitive( array ) )\n+                               {\n+                                   for( double value : ( double[]) array)\n+                                   {\n+                                       result.put( Double.doubleToLongBits( value ), requiredBits );\n+                                   }\n+                               }\n+                               else\n+                               {\n+                                   for( double value : (Double[]) array)\n+                                   {\n+                                       result.put( Double.doubleToLongBits( value ), requiredBits );\n+                                   }\n+                               }\n+                           }\n+\n+                           @Override\n+                           public void writeAll( Object array, byte[] result, int offset )\n+                           {\n+                               if ( isPrimitive( array ) )\n+                               {\n+                                   double[] values = ( double[]) array;\n+                                   for ( int i = 0; i < values.length; i++ )\n+                                   {\n+                                       writeDouble( values[ i], result, offset + i* 8 );\n+                                   }\n+                               }\n+                               else\n+                               {\n+                                   Double[] values = (Double[]) array;\n+                                   for ( int i = 0; i < values.length; i++ )\n+                                   {\n+                                       writeDouble( values[ i], result, offset + i* 8 );\n+                                   }\n+                               }\n+                           }\n+\n+                           private void writeDouble( double doubleValue, byte[] result, int offset )\n+                           {\n+                               long value = Double.doubleToLongBits( doubleValue );\n+                               for ( int b = 0; b < 8; b++ )\n+                               {\n+                                   result[offset + b] = (byte) (( value>> ( b* 8))& 0xFFL);\n+                               }\n+                           }\n+\n+                           @Override\n+                           public ArrayValue createArray( int length, Bits bits, int requiredBits )\n+                           {\n+                               if ( length == 0 )\n+                               {\n+                                   return Values.EMPTY_DOUBLE_ARRAY;\n+                               }\n+\n+                               final double[] result = new double[length];\n+                               for ( int i = 0; i < length; i++ )\n+                               {\n+                                   result[i] = Double.longBitsToDouble( bits.getLong( requiredBits ) );\n+                               }\n+\n+                               return Values.doubleArray( result );\n+                           }\n+\n+                           @Override\n+                           public ArrayValue createEmptyArray()\n+                           {\n+                               return Values.EMPTY_DOUBLE_ARRAY;\n+                           }\n+                       }\n+\n+  ;\n+      private static boolean isPrimitive( Object array )\n+      {\n+          return array.getClass().getComponentType().isPrimitive();\n+      }\n+\n+      private static final ShortArray[] TYPES = ShortArray.values();\n+      private static final Map<Class<?>,ShortArray> all = new IdentityHashMap<>( TYPES.length* 2 );\n+\n+      static\n+      {\n+          for( ShortArray shortArray : TYPES)\n+          {\n+              all.put( shortArray.primitiveClass, shortArray );\n+              all.put( shortArray.boxedClass, shortArray );\n+          }\n+      }\n+\n+      final int maxBits;\n+      private final Class<?> boxedClass;\n+      private final Class<?> primitiveClass;\n+      private final PropertyType type;\n+\n+      ShortArray( PropertyType type, int maxBits, Class<?> boxedClass, Class<?> primitiveClass )\n+      {\n+          this.type = type;\n+          this.maxBits = maxBits;\n+          this.boxedClass = boxedClass;\n+          this.primitiveClass = primitiveClass;\n+      }\n+\n+      public int intValue()\n+      {\n+          return type.intValue();\n+      }\n+\n+      public abstract ArrayValue createArray( int length, Bits bits, int requiredBits )\n+      ;\n+\n+      public static boolean encode( int keyId, Object array, PropertyBlock target, int payloadSizeInBytes )\n+      {\n         /*\n          *  If the array is huge, we don't have to check anything else.\n          *  So do the length check first.\n          */\n-        int arrayLength = Array.getLength( array );\n-        if ( arrayLength > 63 )/*because we only use 6 bits for length*/\n-        {\n-            return false;\n-        }\n+          int arrayLength = Array.getLength( array );\n+          if ( arrayLength > 63 )/*because we only use 6 bits for length*/\n+          {\n+              return false;\n+          }\n+\n+          ShortArray type = typeOf( array );\n+          if ( type == null )\n+          {\n+              return false;\n+          }\n+\n+          int requiredBits = type.calculateRequiredBitsForArray( array, arrayLength );\n+          if ( ! willFit( requiredBits, arrayLength, payloadSizeInBytes ) )\n+          {\n+            // Too big array\n+              return false;\n+          }\n \n-        ShortArray type = typeOf( array );\n-        if ( type == null )\n-        {\n-            return false;\n-        }\n+          final int numberOfBytes = calculateNumberOfBlocksUsed( arrayLength, requiredBits )* 8;\n+          if ( Bits.requiredLongs( numberOfBytes ) > PropertyType.getPayloadSizeLongs() )\n+          {\n+              return false;\n+          }\n \n-        int requiredBits = type.calculateRequiredBitsForArray( array, arrayLength );\n-        if ( !willFit( requiredBits, arrayLength, payloadSizeInBytes ) )\n-        {\n-            // Too big array\n-            return false;\n-        }\n-        final int numberOfBytes = calculateNumberOfBlocksUsed( arrayLength, requiredBits ) * 8;\n-        if ( Bits.requiredLongs( numberOfBytes ) > PropertyType.getPayloadSizeLongs() )\n-        {\n-            return false;\n-        }\n-        Bits result = Bits.bits( numberOfBytes );\n+          Bits result = Bits.bits( numberOfBytes );\n         // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        writeHeader( keyId, type, arrayLength, requiredBits, result );\n-        type.writeAll( array, arrayLength, requiredBits, result );\n-        target.setValueBlocks( result.getLongs() );\n-        return true;\n-    }\n-\n-    private static void writeHeader( int keyId, ShortArray type, int arrayLength, int requiredBits, Bits result )\n-    {\n-        result.put( keyId, 24 );\n-        result.put( PropertyType.SHORT_ARRAY.intValue(), 4 );\n-        result.put( type.type.intValue(), 4 );\n-        result.put( arrayLength, 6 );\n-        result.put( requiredBits, 6 );\n-    }\n-\n-    public static Value decode( PropertyBlock block )\n-    {\n-        Bits bits = Bits.bitsFromLongs( Arrays.copyOf( block.getValueBlocks(), block.getValueBlocks().length) );\n-        return decode( bits );\n-    }\n-\n-    public static Value decode( Bits bits )\n-    {\n+          writeHeader( keyId, type, arrayLength, requiredBits, result );\n+          type.writeAll( array, arrayLength, requiredBits, result );\n+          target.setValueBlocks( result.getLongs() );\n+          return true;\n+      }\n+\n+      private static void writeHeader( int keyId, ShortArray type, int arrayLength, int requiredBits, Bits result )\n+      {\n+          result.put( keyId, 24 );\n+          result.put( PropertyType.SHORT_ARRAY.intValue(), 4 );\n+          result.put( type.type.intValue(), 4 );\n+          result.put( arrayLength, 6 );\n+          result.put( requiredBits, 6 );\n+      }\n+\n+      public static Value decode( PropertyBlock block )\n+      {\n+          Bits bits = Bits.bitsFromLongs( Arrays.copyOf( block.getValueBlocks(), block.getValueBlocks().length ) );\n+          return decode( bits );\n+      }\n+\n+      public static Value decode( Bits bits )\n+      {\n         // [][][    ,bbbb][bbll,llll][yyyy,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        bits.getInt( 24 ); // Get rid of key\n-        bits.getByte( 4 ); // Get rid of short array type\n-        int typeId = bits.getByte( 4 );\n-        int arrayLength = bits.getByte(6);\n-        int requiredBits = bits.getByte( 6 );\n+          bits.getInt( 24 ); // Get rid of key\n+          bits.getByte( 4 ); // Get rid of short array type\n+          int typeId = bits.getByte( 4 );\n+          int arrayLength = bits.getByte( 6 );\n+          int requiredBits = bits.getByte( 6 );\n         /*\n          * So, it can be the case that values require 64 bits to store. However, you cannot encode this\n          * value with 6 bits. calculateRequiredBitsForArray never returns 0, because even for an array of\n          * all 0s one bit is required for every value. So when writing, we let it overflow and write out\n          * 0. When we are reading back, we just have to make sure that reading in 0 means 64.\n          */\n-        if ( requiredBits == 0 )\n-        {\n-            requiredBits = 64;\n-        }\n-        ShortArray type = typeOf( (byte)typeId );\n-        return type.createArray(arrayLength, bits, requiredBits);\n-    }\n-\n-    private static boolean willFit( int requiredBits, int arrayLength, int payloadSizeInBytes )\n-    {\n-        int totalBitsRequired = requiredBits * arrayLength;\n-        int maxBits = payloadSizeInBytes * 8 - 24 - 4 - 4 - 6 - 6;\n-        return totalBitsRequired <= maxBits;\n-    }\n-\n-    public int calculateRequiredBitsForArray( Object array, int arrayLength )\n-    {\n-        if ( arrayLength == 0 )\n-        {\n-            return 0;\n-        }\n+          if ( requiredBits == 0 )\n+          {\n+              requiredBits = 64;\n+          }\n+\n+          ShortArray type = typeOf( (byte) typeId );\n+          return type.createArray( arrayLength, bits, requiredBits );\n+      }\n+\n+      private static boolean willFit( int requiredBits, int arrayLength, int payloadSizeInBytes )\n+      {\n+          int totalBitsRequired = requiredBits* arrayLength;\n+          int maxBits = payloadSizeInBytes* 8- 24 - 4 - 4 - 6- 6;\n+          return totalBitsRequired <= maxBits;\n+      }\n+\n+      public int calculateRequiredBitsForArray( Object array, int arrayLength )\n+      {\n+          if ( arrayLength == 0 )\n+          {\n+              return 0;\n+          }\n         // return getRequiredBits(findBiggestValue(array, arrayLength));\n-        return getRequiredBits(array, arrayLength);\n-    }\n-\n-    public int getRequiredBits( long value )\n-    {\n-        int highest = 1;\n-        long mask = 1;\n-        for ( int i = 1; i <= maxBits; i++, mask <<= 1 )\n-        {\n-            if ( (mask & value) != 0 )\n-            {\n-                highest = i;\n-            }\n-        }\n-        return highest;\n-    }\n-\n-    abstract int getRequiredBits( Object array, int arrayLength );\n-\n-    public static ShortArray typeOf( byte typeId )\n-    {\n-        return TYPES[typeId - 1];\n-    }\n \n-    public static ShortArray typeOf( Object array )\n-    {\n-        return ShortArray.all.get(array.getClass().getComponentType());\n-    }\n-\n-    public static int calculateNumberOfBlocksUsed( long firstBlock )\n-    {\n+          return getRequiredBits( array, arrayLength );\n+      }\n+\n+      public int getRequiredBits( long value )\n+      {\n+          int highest = 1;\n+          long mask = 1;\n+          for ( int i = 1; i <= maxBits; i++, mask <<= 1 )\n+          {\n+              if ( ( mask& value) != 0 )\n+              {\n+                  highest = i;\n+              }\n+          }\n+\n+          return highest;\n+      }\n+\n+      abstract int getRequiredBits( Object array, int arrayLength )\n+      ;\n+\n+      public static ShortArray typeOf( byte typeId )\n+      {\n+          return TYPES[ typeId - 1];\n+      }\n+\n+      public static ShortArray typeOf( Object array )\n+      {\n+          return ShortArray.all.get( array.getClass().getComponentType() );\n+      }\n+\n+      public static int calculateNumberOfBlocksUsed( long firstBlock )\n+      {\n         // inside the high 4B of the first block of a short array sits the header\n-        int highInt = (int) (firstBlock >>> 32);\n+          int highInt = (int) ( firstBlock>>> 32);\n         // bits 32-37 contains number of items (length)\n-        int arrayLength = highInt & 0b11_1111;\n-        highInt >>>= 6;\n+          int arrayLength = highInt& 0b11_1111;\n+          highInt >>>= 6;\n         // bits 38-43 contains number of requires bits per item\n-        int requiredBits = highInt & 0b11_1111;\n+          int requiredBits = highInt& 0b11_1111;\n         // no values can be represented by 0 bits, so we use that value for 64 instead\n-        if ( requiredBits == 0 )\n-        {\n-            requiredBits = 64;\n-        }\n-        return calculateNumberOfBlocksUsed( arrayLength, requiredBits );\n-    }\n-\n-    public static int calculateNumberOfBlocksUsed( int arrayLength, int requiredBits )\n-    {\n-        int bitsForItems = arrayLength * requiredBits;\n+          if ( requiredBits == 0 )\n+          {\n+              requiredBits = 64;\n+          }\n+\n+          return calculateNumberOfBlocksUsed( arrayLength, requiredBits );\n+      }\n+\n+      public static int calculateNumberOfBlocksUsed( int arrayLength, int requiredBits )\n+      {\n+          int bitsForItems = arrayLength* requiredBits;\n         /*\n          * Key, Property Type (ARRAY), Array Type, Array Length, Bits Per Member, Data\n          */\n-        int totalBits = 24 + 4 + 4 + 6 + 6 + bitsForItems;\n-        int result = ( totalBits - 1 ) / 64 + 1;\n-        return result;\n-    }\n+          int totalBits = 24+ 4 + 4 + 6 + 6+ bitsForItems;\n+          int result = ( totalBits - 1)/ 64 + 1;\n+          return result;\n+      }\n \n-    public abstract void writeAll( Object array, int length, int requiredBits, Bits result );\n+      public abstract void writeAll( Object array, int length, int requiredBits, Bits result )\n+      ;\n \n-    public void writeAll( Object array, byte[] result, int offset )\n-    {\n-        throw new IllegalStateException( \"Types that skip bit compaction should implement this method\" );\n-    }\n+      public void writeAll( Object array, byte[] result, int offset )\n+      {\n+          throw new IllegalStateException( \"Types that skip bit compaction should implement this method\" );\n+      }\n \n-    public abstract ArrayValue createEmptyArray();\n-}\n+      public abstract ArrayValue createEmptyArray()\n+      ; }\n\\ No newline at end of file\n",
            "diff_size": 1299
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}