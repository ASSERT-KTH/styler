{
    "project_name": "codefollower-H2-Research",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "31",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n\n    private FakeFileChannel() {}\n\n    @Override\n    protected void implCloseChannel() throws IOException {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/30/FakeFileChannel.java\nindex 7a7b2abbf98..450e0160856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/30/FakeFileChannel.java\n@@ -23,7 +23,7 @@ public class FakeFileChannel extends FileChannel {\n      */\n     public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n \n-    private FakeFileChannel() {}\n+    private FakeFileChannel() { }\n \n     @Override\n     protected void implCloseChannel() throws IOException {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/30/FakeFileChannel.java\nindex 7a7b2abbf98..1f59a9cc87b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/30/FakeFileChannel.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.store.fs;\n \n import java.io.IOException;\n@@ -18,95 +19,96 @@ import java.nio.channels.WritableByteChannel;\n  */\n public class FakeFileChannel extends FileChannel {\n \n-    /**\n-     * No need to allocate these, they have no state\n-     */\n-    public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n-\n-    private FakeFileChannel() {}\n-\n-    @Override\n-    protected void implCloseChannel() throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public FileLock lock(long position, long size, boolean shared) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public long position() throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public FileChannel position(long newPosition) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public int read(ByteBuffer dst) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public int read(ByteBuffer dst, long position) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public long read(ByteBuffer[] dsts, int offset, int length) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public long size() throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public FileChannel truncate(long size) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public FileLock tryLock(long position, long size, boolean shared) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public int write(ByteBuffer src) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public int write(ByteBuffer src, long position) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public long write(ByteBuffer[] srcs, int offset, int len) throws IOException {\n-        throw new IOException();\n-    }\n-\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n-        throw new IOException();\n-    }\n+  /**\n+   * No need to allocate these, they have no state\n+   */\n+  public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n+\n+  private FakeFileChannel() {\n+  }\n+\n+  @Override\n+  protected void implCloseChannel() throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public FileLock lock(long position, long size, boolean shared) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public long position() throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public FileChannel position(long newPosition) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public int read(ByteBuffer dst) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public int read(ByteBuffer dst, long position) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public long read(ByteBuffer[] dsts, int offset, int length) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public long size() throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public FileChannel truncate(long size) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public FileLock tryLock(long position, long size, boolean shared) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public int write(ByteBuffer src) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public int write(ByteBuffer src, long position) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public long write(ByteBuffer[] srcs, int offset, int len) throws IOException {\n+    throw new IOException();\n+  }\n+\n+  @Override\n+  public void force(boolean metaData) throws IOException {\n+    throw new IOException();\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/30/FakeFileChannel.java\nindex 7a7b2abbf98..d0582940131 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/30/FakeFileChannel.java\n@@ -16,14 +16,20 @@ import java.nio.channels.WritableByteChannel;\n /**\n  * Fake file channel to use by in-memory and ZIP file systems.\n  */\n+\n+\n public class FakeFileChannel extends FileChannel {\n \n     /**\n      * No need to allocate these, they have no state\n      */\n+\n+\n     public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n \n-    private FakeFileChannel() {}\n+    private FakeFileChannel() {\n+\n+    }\n \n     @Override\n     protected void implCloseChannel() throws IOException {\n@@ -109,4 +115,5 @@ public class FakeFileChannel extends FileChannel {\n     public void force(boolean metaData) throws IOException {\n         throw new IOException();\n     }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/30/FakeFileChannel.java\nindex 7a7b2abbf98..450e0160856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/30/FakeFileChannel.java\n@@ -23,7 +23,7 @@ public class FakeFileChannel extends FileChannel {\n      */\n     public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n \n-    private FakeFileChannel() {}\n+    private FakeFileChannel() { }\n \n     @Override\n     protected void implCloseChannel() throws IOException {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/30/FakeFileChannel.java\nindex 7a7b2abbf98..450e0160856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/30/FakeFileChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/30/FakeFileChannel.java\n@@ -23,7 +23,7 @@ public class FakeFileChannel extends FileChannel {\n      */\n     public static final FakeFileChannel INSTANCE = new FakeFileChannel();\n \n-    private FakeFileChannel() {}\n+    private FakeFileChannel() { }\n \n     @Override\n     protected void implCloseChannel() throws IOException {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}