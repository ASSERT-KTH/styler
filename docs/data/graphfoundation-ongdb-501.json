{
    "project_name": "graphfoundation-ongdb",
    "error_id": "501",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/501/SecurityFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/501/SecurityFilter.java\nindex 0c4e04aa50c..a542dedc505 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/501/SecurityFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/501/SecurityFilter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.security;\n \n import java.io.IOException;\n@@ -35,166 +36,166 @@ import javax.servlet.http.HttpServletResponse;\n \n public class SecurityFilter implements Filter\n {\n-    private final HashMap<UriPathWildcardMatcher,HashSet<ForbiddingSecurityRule>> rules = new HashMap<>();\n+  private final HashMap<UriPathWildcardMatcher, HashSet<ForbiddingSecurityRule>> rules = new HashMap<>();\n \n-    public SecurityFilter( SecurityRule rule, SecurityRule... rules )\n-    {\n-        this( merge( rule, rules ) );\n-    }\n+  public SecurityFilter(SecurityRule rule, SecurityRule... rules)\n+  {\n+    this(merge(rule, rules));\n+  }\n \n-    public SecurityFilter( Iterable<SecurityRule> securityRules )\n+  public SecurityFilter(Iterable<SecurityRule> securityRules)\n+  {\n+    // For backwards compatibility\n+    for (SecurityRule r : securityRules)\n     {\n-        // For backwards compatibility\n-        for ( SecurityRule r : securityRules )\n-        {\n-            String rulePath = r.forUriPath();\n-            if ( !rulePath.endsWith( \"*\" ) )\n-            {\n-                rulePath = rulePath + \"*\";\n-            }\n-\n-            UriPathWildcardMatcher uriPathWildcardMatcher = new UriPathWildcardMatcher( rulePath );\n-            HashSet<ForbiddingSecurityRule> ruleHashSet = rules.computeIfAbsent( uriPathWildcardMatcher, k -> new HashSet<>() );\n-            ruleHashSet.add( fromSecurityRule( r ) );\n-        }\n+      String rulePath = r.forUriPath();\n+      if (!rulePath.endsWith(\"*\"))\n+      {\n+        rulePath = rulePath + \"*\";\n+      }\n+\n+      UriPathWildcardMatcher uriPathWildcardMatcher = new UriPathWildcardMatcher(rulePath);\n+      HashSet<ForbiddingSecurityRule> ruleHashSet = rules.computeIfAbsent(uriPathWildcardMatcher, k -> new HashSet<>());\n+      ruleHashSet.add(fromSecurityRule(r));\n     }\n+  }\n \n-    private static ForbiddingSecurityRule fromSecurityRule( final SecurityRule rule )\n+  private static ForbiddingSecurityRule fromSecurityRule(final SecurityRule rule)\n+  {\n+    if (rule instanceof ForbiddingSecurityRule)\n     {\n-        if ( rule instanceof ForbiddingSecurityRule )\n-        {\n-            return (ForbiddingSecurityRule) rule;\n-        }\n-        return new ForbiddenRuleDecorator( rule );\n+      return (ForbiddingSecurityRule) rule;\n     }\n+    return new ForbiddenRuleDecorator(rule);\n+  }\n \n-    private static Iterable<SecurityRule> merge( SecurityRule rule, SecurityRule[] rules )\n-    {\n-        ArrayList<SecurityRule> result = new ArrayList<>();\n+  private static Iterable<SecurityRule> merge(SecurityRule rule, SecurityRule[] rules)\n+  {\n+    ArrayList<SecurityRule> result = new ArrayList<>();\n \n-        result.add( rule );\n+    result.add(rule);\n \n-        Collections.addAll( result, rules );\n+    Collections.addAll(result, rules);\n \n-        return result;\n-    }\n+    return result;\n+  }\n \n-    public static String basicAuthenticationResponse( String realm )\n-    {\n-        return \"Basic realm=\\\"\" + realm + \"\\\"\";\n-    }\n+  public static String basicAuthenticationResponse(String realm)\n+  {\n+    return \"Basic realm=\\\"\" + realm + \"\\\"\";\n+  }\n \n-    @Override\n-    public void init( FilterConfig filterConfig )\n-    {\n-    }\n+  @Override\n+  public void init(FilterConfig filterConfig)\n+  {\n+  }\n \n-    @Override\n-    public void doFilter( ServletRequest request, ServletResponse response, FilterChain chain )\n-            throws IOException, ServletException\n-    {\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException\n+  {\n \n-        validateRequestType( request );\n-        validateResponseType( response );\n+    validateRequestType(request);\n+    validateResponseType(response);\n \n-        HttpServletRequest httpReq = (HttpServletRequest) request;\n-        String path = httpReq.getContextPath() + (httpReq.getPathInfo() == null ? \"\" : httpReq.getPathInfo());\n+    HttpServletRequest httpReq = (HttpServletRequest) request;\n+    String path = httpReq.getContextPath() + (httpReq.getPathInfo() == null ? \"\" : httpReq.getPathInfo());\n \n-        boolean requestIsForbidden = false;\n-        for ( UriPathWildcardMatcher uriPathWildcardMatcher : rules.keySet() )\n-        {\n-            if ( uriPathWildcardMatcher.matches( path ) )\n-            {\n-                HashSet<ForbiddingSecurityRule> securityRules = rules.get( uriPathWildcardMatcher );\n-                for ( ForbiddingSecurityRule securityRule : securityRules )\n-                {\n-                    // 401 on the first failed rule we come along\n-                    if ( !securityRule.isAuthorized( httpReq ) )\n-                    {\n-                        createUnauthorizedChallenge( response, securityRule );\n-                        return;\n-                    }\n-                    requestIsForbidden |= securityRule.isForbidden( httpReq );\n-                }\n-            }\n-        }\n-        if ( requestIsForbidden )\n+    boolean requestIsForbidden = false;\n+    for (UriPathWildcardMatcher uriPathWildcardMatcher : rules.keySet())\n+    {\n+      if (uriPathWildcardMatcher.matches(path))\n+      {\n+        HashSet<ForbiddingSecurityRule> securityRules = rules.get(uriPathWildcardMatcher);\n+        for (ForbiddingSecurityRule securityRule : securityRules)\n         {\n-            createForbiddenResponse( response );\n+          // 401 on the first failed rule we come along\n+          if (!securityRule.isAuthorized(httpReq))\n+          {\n+            createUnauthorizedChallenge(response, securityRule);\n             return;\n+          }\n+          requestIsForbidden |= securityRule.isForbidden(httpReq);\n         }\n-\n-        chain.doFilter( request, response );\n+      }\n     }\n-\n-    private void validateRequestType( ServletRequest request ) throws ServletException\n+    if (requestIsForbidden)\n     {\n-        if ( !(request instanceof HttpServletRequest) )\n-        {\n-            throw new ServletException( String.format( \"Expected HttpServletRequest, received [%s]\",\n-                    request.getClass().getCanonicalName() ) );\n-        }\n+      createForbiddenResponse(response);\n+      return;\n     }\n \n-    private void validateResponseType( ServletResponse response ) throws ServletException\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void validateRequestType(ServletRequest request) throws ServletException\n+  {\n+    if (!(request instanceof HttpServletRequest))\n     {\n-        if ( !(response instanceof HttpServletResponse) )\n-        {\n-            throw new ServletException( String.format( \"Expected HttpServletResponse, received [%s]\",\n-                    response.getClass().getCanonicalName() ) );\n-        }\n+      throw new ServletException(String.format(\"Expected HttpServletRequest, received [%s]\",\n+          request.getClass().getCanonicalName()));\n     }\n+  }\n \n-    private void createUnauthorizedChallenge( ServletResponse response, SecurityRule rule )\n+  private void validateResponseType(ServletResponse response) throws ServletException\n+  {\n+    if (!(response instanceof HttpServletResponse))\n     {\n-        HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n-        httpServletResponse.setStatus( 401 );\n-        httpServletResponse.addHeader( \"WWW-Authenticate\", rule.wwwAuthenticateHeader() );\n+      throw new ServletException(String.format(\"Expected HttpServletResponse, received [%s]\",\n+          response.getClass().getCanonicalName()));\n     }\n-\n-    private void createForbiddenResponse( ServletResponse response )\n+  }\n+\n+  private void createUnauthorizedChallenge(ServletResponse response, SecurityRule rule)\n+  {\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    httpServletResponse.setStatus(401);\n+    httpServletResponse.addHeader(\"WWW-Authenticate\", rule.wwwAuthenticateHeader());\n+  }\n+\n+  private void createForbiddenResponse(ServletResponse response)\n+  {\n+    HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n+    httpServletResponse.setStatus(403);\n+  }\n+\n+  @Override\n+  public synchronized void destroy()\n+  {\n+    rules.clear();\n+  }\n+\n+  private static class ForbiddenRuleDecorator implements ForbiddingSecurityRule\n+  {\n+    private final SecurityRule innerRule;\n+\n+    ForbiddenRuleDecorator(SecurityRule rule)\n     {\n-        HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n-        httpServletResponse.setStatus( 403 );\n+      this.innerRule = rule;\n     }\n \n     @Override\n-    public synchronized void destroy()\n+    public boolean isForbidden(HttpServletRequest request)\n     {\n-        rules.clear();\n+      return false;\n     }\n \n-    private static class ForbiddenRuleDecorator implements ForbiddingSecurityRule\n+    @Override\n+    public boolean isAuthorized(HttpServletRequest request)\n     {\n-        private final SecurityRule innerRule;\n-\n-        ForbiddenRuleDecorator( SecurityRule rule )\n-        {\n-            this.innerRule = rule;\n-        }\n-\n-        @Override\n-        public boolean isForbidden( HttpServletRequest request )\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean isAuthorized( HttpServletRequest request )\n-        {\n-            return innerRule.isAuthorized( request );\n-        }\n+      return innerRule.isAuthorized(request);\n+    }\n \n-        @Override\n-        public String forUriPath()\n-        {\n-            return innerRule.forUriPath();\n-        }\n+    @Override\n+    public String forUriPath()\n+    {\n+      return innerRule.forUriPath();\n+    }\n \n-        @Override\n-        public String wwwAuthenticateHeader()\n-        {\n-            return innerRule.wwwAuthenticateHeader();\n-        }\n+    @Override\n+    public String wwwAuthenticateHeader()\n+    {\n+      return innerRule.wwwAuthenticateHeader();\n     }\n+  }\n }\n",
            "diff_size": 170
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/501/SecurityFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/501/SecurityFilter.java\nindex 0c4e04aa50c..d3d40733d94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/501/SecurityFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/501/SecurityFilter.java\n@@ -71,12 +71,9 @@ public class SecurityFilter implements Filter\n     private static Iterable<SecurityRule> merge( SecurityRule rule, SecurityRule[] rules )\n     {\n         ArrayList<SecurityRule> result = new ArrayList<>();\n-\n-        result.add( rule );\n-\n-        Collections.addAll( result, rules );\n-\n-        return result;\n+result.add( rule );\n+Collections.addAll( result, rules );\n+return result;\n     }\n \n     public static String basicAuthenticationResponse( String realm )\n@@ -90,14 +87,12 @@ public class SecurityFilter implements Filter\n     }\n \n     @Override\n-    public void doFilter( ServletRequest request, ServletResponse response, FilterChain chain )\n-            throws IOException, ServletException\n-    {\n+    public void doFilter( ServletRequest request, ServletResponse response, FilterChain chain ) throws IOException, ServletException\n+{\n \n         validateRequestType( request );\n         validateResponseType( response );\n-\n-        HttpServletRequest httpReq = (HttpServletRequest) request;\n+HttpServletRequest httpReq = (HttpServletRequest) request;\n         String path = httpReq.getContextPath() + (httpReq.getPathInfo() == null ? \"\" : httpReq.getPathInfo());\n \n         boolean requestIsForbidden = false;\n@@ -114,7 +109,8 @@ public class SecurityFilter implements Filter\n                         createUnauthorizedChallenge( response, securityRule );\n                         return;\n                     }\n-                    requestIsForbidden |= securityRule.isForbidden( httpReq );\n+\n+requestIsForbidden |= securityRule.isForbidden( httpReq );\n                 }\n             }\n         }\n@@ -129,20 +125,20 @@ public class SecurityFilter implements Filter\n \n     private void validateRequestType( ServletRequest request ) throws ServletException\n     {\n-        if ( !(request instanceof HttpServletRequest) )\n+        if ( !( request instanceof HttpServletRequest) )\n         {\n             throw new ServletException( String.format( \"Expected HttpServletRequest, received [%s]\",\n                     request.getClass().getCanonicalName() ) );\n-        }\n+    }\n     }\n \n     private void validateResponseType( ServletResponse response ) throws ServletException\n     {\n-        if ( !(response instanceof HttpServletResponse) )\n+        if ( !( response instanceof HttpServletResponse) )\n         {\n             throw new ServletException( String.format( \"Expected HttpServletResponse, received [%s]\",\n                     response.getClass().getCanonicalName() ) );\n-        }\n+    }\n     }\n \n     private void createUnauthorizedChallenge( ServletResponse response, SecurityRule rule )\n@@ -197,4 +193,4 @@ public class SecurityFilter implements Filter\n             return innerRule.wwwAuthenticateHeader();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}