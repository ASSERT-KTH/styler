{
    "project_name": "CESNET-perun",
    "error_id": "464",
    "information": {
        "errors": [
            {
                "line": "175",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t}\n\n\t\t\n\t\treturn null;\n\t\t}\n\t},",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/464/ExtSourcesManagerMethod.java\nindex ae4d59d8afd..f3d4413d04c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/464/ExtSourcesManagerMethod.java\n@@ -172,7 +172,7 @@ public enum ExtSourcesManagerMethod implements ManagerMethod {\n \t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n \t\t}\n \n-\t\t\n+\n \t\treturn null;\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/464/ExtSourcesManagerMethod.java\nindex ae4d59d8afd..bb5c395946e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/464/ExtSourcesManagerMethod.java\n@@ -5,187 +5,178 @@ import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.core.api.exceptions.RpcException;\n import cz.metacentrum.perun.rpc.*;\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n+\n import java.util.List;\n \n public enum ExtSourcesManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Creates an external source.\n-\t * @param extSource ExtSource JSON object\n-\t * @return ExtSource Created ExtSource\n-\t */\n-\tcreateExtSource {\n-\n-\t\t@Override\n-\t\tpublic ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getExtSourcesManager().createExtSource(ac.getSession(), parms.read(\"extSource\", ExtSource.class), null);\n-\t\t}\n-\t},\n-\t/*#\n-\t * Delete an external source.\n-\t * @param id int ExtSource <code>id</code>\n-\t */\n-\tdeleteExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getExtSourcesManager().deleteExtSource(ac.getSession(), ac.getExtSourceById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\t/*#\n-\t * Returns an external source by its <code>id</code>.\n-\t *\n-\t * @param id int ExtSource <code>id</code>\n-\t * @return ExtSource Found ExtSource\n-\t */\n-\tgetExtSourceById {\n-\n-\t\t@Override\n-\t\tpublic ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourceById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns an external source by its name.\n-\t *\n-\t * @param name String ExtSource name\n-\t * @return ExtSource Found ExtSource\n-\t */\n-\tgetExtSourceByName {\n-\n-\t\t@Override\n-\t\tpublic ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getExtSourceByName(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"name\"));\n-\t\t}\n-\t},\n-\t/*#\n-\t * Returns the list of external sources associated with a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<ExtSource> VO external sources\n-\t */\n-\tgetVoExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getVoExtSources(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns the list of external sources associated with a GROUP.\n-\t *\n-\t * @param group int GROUP <code>id</code>\n-\t * @return List<ExtSource> GROUP external sources\n-\t */\n-\tgetGroupExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getGroupExtSources(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns the list of all external sources.\n-\t *\n-\t * @return List<ExtSource> all external sources\n-\t */\n-\tgetExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getExtSources(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Associate an external source definition with a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\t/*#\n-\t * Associate an external source definition with a GROUP.\n-\t *\n-\t * @param group int GROUP <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\taddExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms)\n-\t\tthrows PerunException {\n-\t\tac.stateChangingCheck();\n-\n-\t\tif(parms.contains(\"vo\")) {\n-\t\t\tac.getExtSourcesManager().addExtSource(ac.getSession(),\n-\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else if(parms.contains(\"group\")) {\n-\t\t\tac.getExtSourcesManager().addExtSource(ac.getSession(),\n-\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else {\n-\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n-\t\t}\n-\n-\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove an association of an external source from a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove an association of an external source from a GROUP.\n-\t *\n-\t * @param group int GROUP <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\tremoveExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms)\n-\t\tthrows PerunException {\n-\t\tac.stateChangingCheck();\n-\n-\t\tif(parms.contains(\"vo\")) {\n-\t\t\tac.getExtSourcesManager().removeExtSource(ac.getSession(),\n-\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else if(parms.contains(\"group\")) {\n-\t\t\tac.getExtSourcesManager().removeExtSource(ac.getSession(),\n-\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else {\n-\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n-\t\t}\n-\n-\t\t\n-\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Loads ext source definitions from the configuration file and updates entries stored in the DB.\n-\t */\n-\tloadExtSourcesDefinitions {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getExtSourcesManager().loadExtSourcesDefinitions(ac.getSession());\n-\t\t\treturn null;\n-\t\t}\n-\t};\n+    /*#\n+     * Creates an external source.\n+     * @param extSource ExtSource JSON object\n+     * @return ExtSource Created ExtSource\n+     */\n+    createExtSource {\n+        @Override\n+        public ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getExtSourcesManager().createExtSource(ac.getSession(), parms.read(\"extSource\", ExtSource.class), null);\n+        }\n+    },\n+    /*#\n+     * Delete an external source.\n+     * @param id int ExtSource <code>id</code>\n+     */\n+    deleteExtSource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getExtSourcesManager().deleteExtSource(ac.getSession(), ac.getExtSourceById(parms.readInt(\"id\")));\n+            return null;\n+        }\n+    },\n+    /*#\n+     * Returns an external source by its <code>id</code>.\n+     *\n+     * @param id int ExtSource <code>id</code>\n+     * @return ExtSource Found ExtSource\n+     */\n+    getExtSourceById {\n+        @Override\n+        public ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getExtSourceById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns an external source by its name.\n+     *\n+     * @param name String ExtSource name\n+     * @return ExtSource Found ExtSource\n+     */\n+    getExtSourceByName {\n+        @Override\n+        public ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getExtSourcesManager().getExtSourceByName(ac.getSession(),\n+                    parms.readString(\"name\"));\n+        }\n+    },\n+    /*#\n+     * Returns the list of external sources associated with a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return List<ExtSource> VO external sources\n+     */\n+    getVoExtSources {\n+        @Override\n+        public List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getExtSourcesManager().getVoExtSources(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns the list of external sources associated with a GROUP.\n+     *\n+     * @param group int GROUP <code>id</code>\n+     * @return List<ExtSource> GROUP external sources\n+     */\n+    getGroupExtSources {\n+        @Override\n+        public List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getExtSourcesManager().getGroupExtSources(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns the list of all external sources.\n+     *\n+     * @return List<ExtSource> all external sources\n+     */\n+    getExtSources {\n+        @Override\n+        public List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getExtSourcesManager().getExtSources(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Associate an external source definition with a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @param source int ExtSource <code>id</code>\n+     */\n+    /*#\n+     * Associate an external source definition with a GROUP.\n+     *\n+     * @param group int GROUP <code>id</code>\n+     * @param source int ExtSource <code>id</code>\n+     */\n+    addExtSource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms)\n+                throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"vo\")) {\n+                ac.getExtSourcesManager().addExtSource(ac.getSession(),\n+                        ac.getVoById(parms.readInt(\"vo\")),\n+                        ac.getExtSourceById(parms.readInt(\"source\")));\n+            } else if (parms.contains(\"group\")) {\n+                ac.getExtSourcesManager().addExtSource(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        ac.getExtSourceById(parms.readInt(\"source\")));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n+            }\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove an association of an external source from a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @param source int ExtSource <code>id</code>\n+     */\n+    /*#\n+     * Remove an association of an external source from a GROUP.\n+     *\n+     * @param group int GROUP <code>id</code>\n+     * @param source int ExtSource <code>id</code>\n+     */\n+    removeExtSource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms)\n+                throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"vo\")) {\n+                ac.getExtSourcesManager().removeExtSource(ac.getSession(),\n+                        ac.getVoById(parms.readInt(\"vo\")),\n+                        ac.getExtSourceById(parms.readInt(\"source\")));\n+            } else if (parms.contains(\"group\")) {\n+                ac.getExtSourcesManager().removeExtSource(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        ac.getExtSourceById(parms.readInt(\"source\")));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n+            }\n+\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Loads ext source definitions from the configuration file and updates entries stored in the DB.\n+     */\n+    loadExtSourcesDefinitions {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getExtSourcesManager().loadExtSourcesDefinitions(ac.getSession());\n+            return null;\n+        }\n+    };\n }\n",
            "diff_size": 180
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/464/ExtSourcesManagerMethod.java\nindex ae4d59d8afd..b64ed3cb5dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/464/ExtSourcesManagerMethod.java\n@@ -7,185 +7,180 @@ import cz.metacentrum.perun.rpc.*;\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n import java.util.List;\n \n+\n public enum ExtSourcesManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Creates an external source.\n-\t * @param extSource ExtSource JSON object\n-\t * @return ExtSource Created ExtSource\n-\t */\n-\tcreateExtSource {\n-\n-\t\t@Override\n-\t\tpublic ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getExtSourcesManager().createExtSource(ac.getSession(), parms.read(\"extSource\", ExtSource.class), null);\n-\t\t}\n-\t},\n-\t/*#\n-\t * Delete an external source.\n-\t * @param id int ExtSource <code>id</code>\n-\t */\n-\tdeleteExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getExtSourcesManager().deleteExtSource(ac.getSession(), ac.getExtSourceById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\t/*#\n-\t * Returns an external source by its <code>id</code>.\n-\t *\n-\t * @param id int ExtSource <code>id</code>\n-\t * @return ExtSource Found ExtSource\n-\t */\n-\tgetExtSourceById {\n-\n-\t\t@Override\n-\t\tpublic ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourceById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns an external source by its name.\n-\t *\n-\t * @param name String ExtSource name\n-\t * @return ExtSource Found ExtSource\n-\t */\n-\tgetExtSourceByName {\n-\n-\t\t@Override\n-\t\tpublic ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getExtSourceByName(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"name\"));\n-\t\t}\n-\t},\n-\t/*#\n-\t * Returns the list of external sources associated with a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<ExtSource> VO external sources\n-\t */\n-\tgetVoExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getVoExtSources(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns the list of external sources associated with a GROUP.\n-\t *\n-\t * @param group int GROUP <code>id</code>\n-\t * @return List<ExtSource> GROUP external sources\n-\t */\n-\tgetGroupExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getGroupExtSources(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns the list of all external sources.\n-\t *\n-\t * @return List<ExtSource> all external sources\n-\t */\n-\tgetExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getExtSourcesManager().getExtSources(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Associate an external source definition with a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\t/*#\n-\t * Associate an external source definition with a GROUP.\n-\t *\n-\t * @param group int GROUP <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\taddExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms)\n-\t\tthrows PerunException {\n-\t\tac.stateChangingCheck();\n-\n-\t\tif(parms.contains(\"vo\")) {\n-\t\t\tac.getExtSourcesManager().addExtSource(ac.getSession(),\n-\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else if(parms.contains(\"group\")) {\n-\t\t\tac.getExtSourcesManager().addExtSource(ac.getSession(),\n-\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else {\n-\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n-\t\t}\n-\n-\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove an association of an external source from a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove an association of an external source from a GROUP.\n-\t *\n-\t * @param group int GROUP <code>id</code>\n-\t * @param source int ExtSource <code>id</code>\n-\t */\n-\tremoveExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms)\n-\t\tthrows PerunException {\n-\t\tac.stateChangingCheck();\n-\n-\t\tif(parms.contains(\"vo\")) {\n-\t\t\tac.getExtSourcesManager().removeExtSource(ac.getSession(),\n-\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else if(parms.contains(\"group\")) {\n-\t\t\tac.getExtSourcesManager().removeExtSource(ac.getSession(),\n-\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\tac.getExtSourceById(parms.readInt(\"source\")));\n-\t\t} else {\n-\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n-\t\t}\n-\n-\t\t\n-\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Loads ext source definitions from the configuration file and updates entries stored in the DB.\n-\t */\n-\tloadExtSourcesDefinitions {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getExtSourcesManager().loadExtSourcesDefinitions(ac.getSession());\n-\t\t\treturn null;\n-\t\t}\n-\t};\n-}\n+ /*#\n+  * Creates an external source.\n+  * @param extSource ExtSource JSON object\n+  * @return ExtSource Created ExtSource\n+  */\n+\n+\n+ createExtSource {\n+  @Override\n+  public ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getExtSourcesManager().createExtSource(ac.getSession(), parms.read(\"extSource\", ExtSource.class), null);\n+  }\n+ },\n+ /*#\n+  * Delete an external source.\n+  * @param id int ExtSource <code>id</code>\n+  */\n+\n+\n+ deleteExtSource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getExtSourcesManager().deleteExtSource(ac.getSession(), ac.getExtSourceById(parms.readInt(\"id\")));\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Returns an external source by its <code>id</code>.\n+  *\n+  * @param id int ExtSource <code>id</code>\n+  * @return ExtSource Found ExtSource\n+  */\n+\n+\n+ getExtSourceById {\n+  @Override\n+  public ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getExtSourceById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns an external source by its name.\n+  *\n+  * @param name String ExtSource name\n+  * @return ExtSource Found ExtSource\n+  */\n+\n+\n+ getExtSourceByName {\n+  @Override\n+  public ExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getExtSourcesManager().getExtSourceByName(ac.getSession(), parms.readString(\"name\"));\n+  }\n+ },\n+ /*#\n+  * Returns the list of external sources associated with a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return List<ExtSource> VO external sources\n+  */\n+\n+\n+ getVoExtSources {\n+  @Override\n+  public List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getExtSourcesManager().getVoExtSources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns the list of external sources associated with a GROUP.\n+  *\n+  * @param group int GROUP <code>id</code>\n+  * @return List<ExtSource> GROUP external sources\n+  */\n+\n+\n+ getGroupExtSources {\n+  @Override\n+  public List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getExtSourcesManager().getGroupExtSources(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns the list of all external sources.\n+  *\n+  * @return List<ExtSource> all external sources\n+  */\n+\n+\n+ getExtSources {\n+  @Override\n+  public List<ExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getExtSourcesManager().getExtSources(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Associate an external source definition with a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @param source int ExtSource <code>id</code>\n+  */\n+ /*#\n+  * Associate an external source definition with a GROUP.\n+  *\n+  * @param group int GROUP <code>id</code>\n+  * @param source int ExtSource <code>id</code>\n+  */\n+\n+\n+ addExtSource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"vo\")) {\n+    ac.getExtSourcesManager().addExtSource(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), ac.getExtSourceById(parms.readInt(\"source\")));\n+   } else if (parms.contains(\"group\")) {\n+    ac.getExtSourcesManager().addExtSource(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getExtSourceById(parms.readInt(\"source\")));\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove an association of an external source from a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @param source int ExtSource <code>id</code>\n+  */\n+ /*#\n+  * Remove an association of an external source from a GROUP.\n+  *\n+  * @param group int GROUP <code>id</code>\n+  * @param source int ExtSource <code>id</code>\n+  */\n+\n+\n+ removeExtSource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"vo\")) {\n+    ac.getExtSourcesManager().removeExtSource(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), ac.getExtSourceById(parms.readInt(\"source\")));\n+   } else if (parms.contains(\"group\")) {\n+    ac.getExtSourcesManager().removeExtSource(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getExtSourceById(parms.readInt(\"source\")));\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Loads ext source definitions from the configuration file and updates entries stored in the DB.\n+  */\n+\n+\n+ loadExtSourcesDefinitions {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getExtSourcesManager().loadExtSourcesDefinitions(ac.getSession());\n+   return null;\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 181
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/464/ExtSourcesManagerMethod.java\nindex ae4d59d8afd..f3d4413d04c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/464/ExtSourcesManagerMethod.java\n@@ -172,7 +172,7 @@ public enum ExtSourcesManagerMethod implements ManagerMethod {\n \t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n \t\t}\n \n-\t\t\n+\n \t\treturn null;\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/464/ExtSourcesManagerMethod.java\nindex ae4d59d8afd..bb6665f87ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/464/ExtSourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/464/ExtSourcesManagerMethod.java\n@@ -172,7 +172,6 @@ public enum ExtSourcesManagerMethod implements ManagerMethod {\n \t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or group\");\n \t\t}\n \n-\t\t\n \t\treturn null;\n \t\t}\n \t},\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}