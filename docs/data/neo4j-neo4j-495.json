{
    "project_name": "neo4j-neo4j",
    "error_id": "495",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/495/VmPauseMonitorComponent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/495/VmPauseMonitorComponent.java\nindex 659e932b45f..7e68e55f876 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/495/VmPauseMonitorComponent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/495/VmPauseMonitorComponent.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.cache;\n \n import org.neo4j.configuration.Config;\n@@ -38,24 +39,24 @@ public class VmPauseMonitorComponent extends LifecycleAdapter\n     private final Monitors globalMonitors;\n     private volatile VmPauseMonitor vmPauseMonitor;\n \n-    public VmPauseMonitorComponent( Config config, Log log, JobScheduler jobScheduler, Monitors globalMonitors )\n+    public VmPauseMonitorComponent(Config config, Log log, JobScheduler jobScheduler, Monitors globalMonitors)\n     {\n         this.config = config;\n         this.log = log;\n         this.jobScheduler = jobScheduler;\n         this.globalMonitors = globalMonitors;\n-        monitor = globalMonitors.newMonitor( VmPauseMonitor.Monitor.class );\n-        loggingVmPauseMonitor = new LoggingVmPauseMonitor( log );\n+        monitor = globalMonitors.newMonitor(VmPauseMonitor.Monitor.class);\n+        loggingVmPauseMonitor = new LoggingVmPauseMonitor(log);\n     }\n \n     @Override\n     public void start()\n     {\n-        globalMonitors.addMonitorListener( loggingVmPauseMonitor );\n+        globalMonitors.addMonitorListener(loggingVmPauseMonitor);\n         vmPauseMonitor = new VmPauseMonitor(\n-                config.get( GraphDatabaseInternalSettings.vm_pause_monitor_measurement_duration ),\n-                config.get( GraphDatabaseInternalSettings.vm_pause_monitor_stall_alert_threshold ),\n-                monitor, jobScheduler\n+          config.get(GraphDatabaseInternalSettings.vm_pause_monitor_measurement_duration),\n+          config.get(GraphDatabaseInternalSettings.vm_pause_monitor_stall_alert_threshold),\n+          monitor, jobScheduler\n         );\n         vmPauseMonitor.start();\n     }\n@@ -65,6 +66,6 @@ public class VmPauseMonitorComponent extends LifecycleAdapter\n     {\n         vmPauseMonitor.stop();\n         vmPauseMonitor = null;\n-        globalMonitors.removeMonitorListener( loggingVmPauseMonitor );\n+        globalMonitors.removeMonitorListener(loggingVmPauseMonitor);\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}