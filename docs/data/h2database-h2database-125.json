{
    "project_name": "h2database-h2database",
    "error_id": "125",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "23",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        // offset is 0 because we start writing from src.position()\n        long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n        int len = (int)(newPosition - position);\n        src.position(src.position() + len);\n        return len;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/125/FileNioMem.java\nindex 5b9e2717b02..b236344595c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/125/FileNioMem.java\n@@ -59,7 +59,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/125/FileNioMem.java\nindex 5b9e2717b02..e3a700ab4d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/125/FileNioMem.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.store.fs.niomem;\n \n import java.io.IOException;\n@@ -58,8 +59,9 @@ class FileNioMem extends FileBaseDefault {\n         }\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n-        long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        long newPosition =\n+                data.readWrite(position, src, 0, src.remaining(), true);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n@@ -95,7 +97,7 @@ class FileNioMem extends FileBaseDefault {\n \n     @Override\n     public FileLock tryLock(long position, long size,\n-            boolean shared) throws IOException {\n+                            boolean shared) throws IOException {\n         if (closed) {\n             throw new ClosedChannelException();\n         }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/125/FileNioMem.java\nindex 5b9e2717b02..21f19ca9507 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/125/FileNioMem.java\n@@ -16,13 +16,16 @@ import org.h2.store.fs.FileBaseDefault;\n /**\n  * This class represents an in-memory file.\n  */\n+\n+\n class FileNioMem extends FileBaseDefault {\n \n     /**\n      * The file data.\n      */\n-    final FileNioMemData data;\n \n+\n+    final FileNioMemData data;\n     private final boolean readOnly;\n     private volatile boolean closed;\n \n@@ -59,7 +62,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n@@ -91,11 +94,11 @@ class FileNioMem extends FileBaseDefault {\n     @Override\n     public void force(boolean metaData) throws IOException {\n         // do nothing\n+\n     }\n \n     @Override\n-    public FileLock tryLock(long position, long size,\n-            boolean shared) throws IOException {\n+    public FileLock tryLock(long position, long size, boolean shared) throws IOException {\n         if (closed) {\n             throw new ClosedChannelException();\n         }\n@@ -108,19 +111,16 @@ class FileNioMem extends FileBaseDefault {\n                 return null;\n             }\n         }\n-\n         return new FileLock(FakeFileChannel.INSTANCE, position, size, shared) {\n-\n-            @Override\n-            public boolean isValid() {\n-                return true;\n-            }\n-\n-            @Override\n-            public void release() throws IOException {\n-                data.unlock();\n-            }\n-        };\n+@Override\n+public boolean isValid() {\n+    return true;\n+}\n+\n+@Override\n+public void release() throws IOException {\n+    data.unlock();\n+}};\n     }\n \n     @Override\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/125/FileNioMem.java\nindex 5b9e2717b02..b236344595c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/125/FileNioMem.java\n@@ -59,7 +59,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/125/FileNioMem.java\nindex 5b9e2717b02..b236344595c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/125/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/125/FileNioMem.java\n@@ -59,7 +59,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}