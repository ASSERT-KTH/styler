{
    "project_name": "intuit-Tank",
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "126",
                "column": "5",
                "severity": "warning",
                "message": "';' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "    )\n\n    ;\n    private String displayName;\n    private String description;\n    private LogFields[] fieldsToLog;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/86/LoggingProfile.java\nindex f641970da8b..74f017efc5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/86/LoggingProfile.java\n@@ -121,9 +121,8 @@ public enum LoggingProfile {\n             LogFields.TestIteration,\n             LogFields.ThreadId,\n             LogFields.TransactionId\n-    )\n+    );\n \n-    ;\n     private String displayName;\n     private String description;\n     private LogFields[] fieldsToLog;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/86/LoggingProfile.java\nindex f641970da8b..18398fb8a69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/86/LoggingProfile.java\n@@ -17,159 +17,157 @@ import java.util.Arrays;\n \n public enum LoggingProfile {\n \n-    STANDARD(\"Standard\", \"Logs common fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.TestIteration\n-    ),\n-    USER_VARIABLE(\"User Variables\", \"Logs common fields plus user variables.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables\n-    ),\n-    TRACE(\"Trace Calls\", \"Logs all calls made.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables\n-    ),\n-    VERBOSE(\"Verbose\", \"Logs all available fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpRequestHeaders,\n-            LogFields.HttpRequestBody,\n-            LogFields.HttpResponseHeaders,\n-            LogFields.HttpResponseBody,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables,\n-            LogFields.ValidationStatus,\n-            LogFields.ValidationCriteria,\n-            LogFields.PreValidationCriteria\n-    ),\n-    TERSE(\"Terse\", \"Logs minimum fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.TestIteration,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId\n-    )\n+  STANDARD(\"Standard\", \"Logs common fields.\",\n+    LogFields.EventType,\n+    LogFields.SourceType,\n+    LogFields.InstanceId,\n+    LogFields.PublicIp,\n+    LogFields.Hostname,\n+    LogFields.JobId,\n+    LogFields.ThreadId,\n+    LogFields.TransactionId,\n+    LogFields.LoggingKey,\n+    LogFields.ProjectName,\n+    LogFields.TestPlanName,\n+    LogFields.GroupName,\n+    LogFields.ScriptName,\n+    LogFields.StepName,\n+    LogFields.StepIndex,\n+    LogFields.StepGroupName,\n+    LogFields.RequestUrl,\n+    LogFields.HttpResponseTime,\n+    LogFields.TestIteration\n+  ),\n+  USER_VARIABLE(\"User Variables\", \"Logs common fields plus user variables.\",\n+    LogFields.EventType,\n+    LogFields.SourceType,\n+    LogFields.InstanceId,\n+    LogFields.PublicIp,\n+    LogFields.Hostname,\n+    LogFields.JobId,\n+    LogFields.ThreadId,\n+    LogFields.TransactionId,\n+    LogFields.LoggingKey,\n+    LogFields.ProjectName,\n+    LogFields.TestPlanName,\n+    LogFields.GroupName,\n+    LogFields.ScriptName,\n+    LogFields.StepName,\n+    LogFields.StepIndex,\n+    LogFields.StepGroupName,\n+    LogFields.TestIteration,\n+    LogFields.RequestUrl,\n+    LogFields.HttpResponseTime,\n+    LogFields.UserVariables\n+  ),\n+  TRACE(\"Trace Calls\", \"Logs all calls made.\",\n+    LogFields.EventType,\n+    LogFields.SourceType,\n+    LogFields.InstanceId,\n+    LogFields.PublicIp,\n+    LogFields.Hostname,\n+    LogFields.JobId,\n+    LogFields.ThreadId,\n+    LogFields.TransactionId,\n+    LogFields.LoggingKey,\n+    LogFields.ProjectName,\n+    LogFields.TestPlanName,\n+    LogFields.GroupName,\n+    LogFields.ScriptName,\n+    LogFields.StepName,\n+    LogFields.StepIndex,\n+    LogFields.StepGroupName,\n+    LogFields.TestIteration,\n+    LogFields.RequestUrl,\n+    LogFields.HttpResponseTime,\n+    LogFields.UserVariables\n+  ),\n+  VERBOSE(\"Verbose\", \"Logs all available fields.\",\n+    LogFields.EventType,\n+    LogFields.SourceType,\n+    LogFields.InstanceId,\n+    LogFields.PublicIp,\n+    LogFields.Hostname,\n+    LogFields.JobId,\n+    LogFields.ThreadId,\n+    LogFields.TransactionId,\n+    LogFields.LoggingKey,\n+    LogFields.ProjectName,\n+    LogFields.TestPlanName,\n+    LogFields.GroupName,\n+    LogFields.ScriptName,\n+    LogFields.StepName,\n+    LogFields.StepIndex,\n+    LogFields.StepGroupName,\n+    LogFields.TestIteration,\n+    LogFields.RequestUrl,\n+    LogFields.HttpRequestHeaders,\n+    LogFields.HttpRequestBody,\n+    LogFields.HttpResponseHeaders,\n+    LogFields.HttpResponseBody,\n+    LogFields.HttpResponseTime,\n+    LogFields.UserVariables,\n+    LogFields.ValidationStatus,\n+    LogFields.ValidationCriteria,\n+    LogFields.PreValidationCriteria\n+  ),\n+  TERSE(\"Terse\", \"Logs minimum fields.\",\n+    LogFields.EventType,\n+    LogFields.SourceType,\n+    LogFields.InstanceId,\n+    LogFields.PublicIp,\n+    LogFields.Hostname,\n+    LogFields.JobId,\n+    LogFields.TestIteration,\n+    LogFields.ThreadId,\n+    LogFields.TransactionId\n+  );\n+  private String displayName;\n+  private String description;\n+  private LogFields[] fieldsToLog;\n \n-    ;\n-    private String displayName;\n-    private String description;\n-    private LogFields[] fieldsToLog;\n+  private LoggingProfile(String displayName, String description, LogFields... fieldsToLog) {\n+    this.displayName = displayName;\n+    this.description = description;\n+    this.fieldsToLog = fieldsToLog;\n+  }\n \n-    private LoggingProfile(String displayName, String description, LogFields... fieldsToLog) {\n-        this.displayName = displayName;\n-        this.description = description;\n-        this.fieldsToLog = fieldsToLog;\n-    }\n+  public String getDisplayName() {\n+    return displayName;\n+  }\n \n-    public String getDisplayName() {\n-        return displayName;\n-    }\n+  public void setDisplayName(String displayName) {\n+    this.displayName = displayName;\n+  }\n \n-    public void setDisplayName(String displayName) {\n-        this.displayName = displayName;\n-    }\n+  public String getDescription() {\n+    return description;\n+  }\n \n-    public String getDescription() {\n-        return description;\n-    }\n+  public void setDescription(String description) {\n+    this.description = description;\n+  }\n \n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n+  public void setFieldsToLog(LogFields[] fieldsToLog) {\n+    this.fieldsToLog = fieldsToLog;\n+  }\n \n-    public void setFieldsToLog(LogFields[] fieldsToLog) {\n-        this.fieldsToLog = fieldsToLog;\n-    }\n-\n-    public LogFields[] getFieldsToLog() {\n-        return fieldsToLog;\n-    }\n+  public LogFields[] getFieldsToLog() {\n+    return fieldsToLog;\n+  }\n \n-    public boolean isFieldLogged(LogFields field) {\n-        return Arrays.stream(fieldsToLog).anyMatch(f -> f == field);\n-    }\n+  public boolean isFieldLogged(LogFields field) {\n+    return Arrays.stream(fieldsToLog).anyMatch(f -> f == field);\n+  }\n \n-    public static LoggingProfile fromString(String s) {\n-        LoggingProfile ret = LoggingProfile.STANDARD;\n-        try {\n-            ret = LoggingProfile.valueOf(s);\n-        } catch (Exception e) {\n-            // ignore\n-        }\n-        return ret;\n+  public static LoggingProfile fromString(String s) {\n+    LoggingProfile ret = LoggingProfile.STANDARD;\n+    try {\n+      ret = LoggingProfile.valueOf(s);\n+    } catch (Exception e) {\n+      // ignore\n     }\n+    return ret;\n+  }\n \n }\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 432).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 457).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 457).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 664).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/86/LoggingProfile.java\nindex f641970da8b..7ae0c20fa12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/86/LoggingProfile.java\n@@ -18,112 +18,15 @@ import java.util.Arrays;\n public enum LoggingProfile {\n \n     STANDARD(\"Standard\", \"Logs common fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.TestIteration\n-    ),\n+            LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.RequestUrl, LogFields.HttpResponseTime, LogFields.TestIteration),\n     USER_VARIABLE(\"User Variables\", \"Logs common fields plus user variables.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables\n-    ),\n+            LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.TestIteration, LogFields.RequestUrl, LogFields.HttpResponseTime, LogFields.UserVariables),\n     TRACE(\"Trace Calls\", \"Logs all calls made.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables\n-    ),\n+            LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.TestIteration, LogFields.RequestUrl, LogFields.HttpResponseTime, LogFields.UserVariables),\n     VERBOSE(\"Verbose\", \"Logs all available fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpRequestHeaders,\n-            LogFields.HttpRequestBody,\n-            LogFields.HttpResponseHeaders,\n-            LogFields.HttpResponseBody,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables,\n-            LogFields.ValidationStatus,\n-            LogFields.ValidationCriteria,\n-            LogFields.PreValidationCriteria\n-    ),\n+            LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.TestIteration, LogFields.RequestUrl, LogFields.HttpRequestHeaders, LogFields.HttpRequestBody, LogFields.HttpResponseHeaders, LogFields.HttpResponseBody, LogFields.HttpResponseTime, LogFields.UserVariables, LogFields.ValidationStatus, LogFields.ValidationCriteria, LogFields.PreValidationCriteria),\n     TERSE(\"Terse\", \"Logs minimum fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.TestIteration,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId\n-    )\n-\n-    ;\n+            LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.TestIteration, LogFields.ThreadId, LogFields.TransactionId);\n     private String displayName;\n     private String description;\n     private LogFields[] fieldsToLog;\n@@ -172,4 +75,4 @@ public enum LoggingProfile {\n         return ret;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 103
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 468).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 524).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 494).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 705).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 235).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/86/LoggingProfile.java\nindex f641970da8b..f0b59750ee5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/86/LoggingProfile.java\n@@ -13,117 +13,19 @@ package com.intuit.tank.logging;\n  * #L%\n  */\n \n+\n+\n import java.util.Arrays;\n \n+\n public enum LoggingProfile {\n \n-    STANDARD(\"Standard\", \"Logs common fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.TestIteration\n-    ),\n-    USER_VARIABLE(\"User Variables\", \"Logs common fields plus user variables.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables\n-    ),\n-    TRACE(\"Trace Calls\", \"Logs all calls made.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables\n-    ),\n-    VERBOSE(\"Verbose\", \"Logs all available fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId,\n-            LogFields.LoggingKey,\n-            LogFields.ProjectName,\n-            LogFields.TestPlanName,\n-            LogFields.GroupName,\n-            LogFields.ScriptName,\n-            LogFields.StepName,\n-            LogFields.StepIndex,\n-            LogFields.StepGroupName,\n-            LogFields.TestIteration,\n-            LogFields.RequestUrl,\n-            LogFields.HttpRequestHeaders,\n-            LogFields.HttpRequestBody,\n-            LogFields.HttpResponseHeaders,\n-            LogFields.HttpResponseBody,\n-            LogFields.HttpResponseTime,\n-            LogFields.UserVariables,\n-            LogFields.ValidationStatus,\n-            LogFields.ValidationCriteria,\n-            LogFields.PreValidationCriteria\n-    ),\n-    TERSE(\"Terse\", \"Logs minimum fields.\",\n-            LogFields.EventType,\n-            LogFields.SourceType,\n-            LogFields.InstanceId,\n-            LogFields.PublicIp,\n-            LogFields.Hostname,\n-            LogFields.JobId,\n-            LogFields.TestIteration,\n-            LogFields.ThreadId,\n-            LogFields.TransactionId\n-    )\n-\n-    ;\n+    STANDARD(\"Standard\", \"Logs common fields.\", LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.RequestUrl, LogFields.HttpResponseTime, LogFields.TestIteration),\n+    USER_VARIABLE(\"User Variables\", \"Logs common fields plus user variables.\", LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.TestIteration, LogFields.RequestUrl, LogFields.HttpResponseTime, LogFields.UserVariables),\n+    TRACE(\"Trace Calls\", \"Logs all calls made.\", LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.TestIteration, LogFields.RequestUrl, LogFields.HttpResponseTime, LogFields.UserVariables),\n+    VERBOSE(\"Verbose\", \"Logs all available fields.\", LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.ThreadId, LogFields.TransactionId, LogFields.LoggingKey, LogFields.ProjectName, LogFields.TestPlanName, LogFields.GroupName, LogFields.ScriptName, LogFields.StepName, LogFields.StepIndex, LogFields.StepGroupName, LogFields.TestIteration, LogFields.RequestUrl, LogFields.HttpRequestHeaders, LogFields.HttpRequestBody, LogFields.HttpResponseHeaders, LogFields.HttpResponseBody, LogFields.HttpResponseTime, LogFields.UserVariables, LogFields.ValidationStatus, LogFields.ValidationCriteria, LogFields.PreValidationCriteria),\n+    TERSE(\"Terse\", \"Logs minimum fields.\", LogFields.EventType, LogFields.SourceType, LogFields.InstanceId, LogFields.PublicIp, LogFields.Hostname, LogFields.JobId, LogFields.TestIteration, LogFields.ThreadId, LogFields.TransactionId);\n+\n     private String displayName;\n     private String description;\n     private LogFields[] fieldsToLog;\n@@ -134,42 +36,51 @@ public enum LoggingProfile {\n         this.fieldsToLog = fieldsToLog;\n     }\n \n+\n     public String getDisplayName() {\n         return displayName;\n     }\n \n+\n     public void setDisplayName(String displayName) {\n         this.displayName = displayName;\n     }\n \n+\n     public String getDescription() {\n         return description;\n     }\n \n+\n     public void setDescription(String description) {\n         this.description = description;\n     }\n \n+\n     public void setFieldsToLog(LogFields[] fieldsToLog) {\n         this.fieldsToLog = fieldsToLog;\n     }\n \n+\n     public LogFields[] getFieldsToLog() {\n         return fieldsToLog;\n     }\n \n+\n     public boolean isFieldLogged(LogFields field) {\n-        return Arrays.stream(fieldsToLog).anyMatch(f -> f == field);\n+        return Arrays.stream(fieldsToLog).anyMatch(f-> f == field);\n     }\n \n+\n     public static LoggingProfile fromString(String s) {\n         LoggingProfile ret = LoggingProfile.STANDARD;\n         try {\n             ret = LoggingProfile.valueOf(s);\n         } catch (Exception e) {\n             // ignore\n+\n         }\n         return ret;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 121
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/86/LoggingProfile.java\nindex f641970da8b..74f017efc5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/86/LoggingProfile.java\n@@ -121,9 +121,8 @@ public enum LoggingProfile {\n             LogFields.TestIteration,\n             LogFields.ThreadId,\n             LogFields.TransactionId\n-    )\n+    );\n \n-    ;\n     private String displayName;\n     private String description;\n     private LogFields[] fieldsToLog;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/86/LoggingProfile.java\nindex f641970da8b..e57344d190a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/86/LoggingProfile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/86/LoggingProfile.java\n@@ -121,9 +121,7 @@ public enum LoggingProfile {\n             LogFields.TestIteration,\n             LogFields.ThreadId,\n             LogFields.TransactionId\n-    )\n-\n-    ;\n+    );\n     private String displayName;\n     private String description;\n     private LogFields[] fieldsToLog;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}