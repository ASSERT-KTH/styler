{
    "project_name": "IQSS-dataverse",
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "44",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "@RequiredPermissionsMap({\n    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions, Permission.EditDataverse}),\n\t@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n\t@RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n})\npublic class MoveDataverseCommand extends AbstractVoidCommand {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/86/MoveDataverseCommand.java\nindex dcae4e039e6..392463b0cfe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/86/MoveDataverseCommand.java\n@@ -41,7 +41,7 @@ import org.apache.solr.client.solrj.SolrServerException;\n // checks that would need to be revisited if regular users were able to use this\n @RequiredPermissionsMap({\n     @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions, Permission.EditDataverse}),\n-\t@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n+@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n \t@RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n })\n public class MoveDataverseCommand extends AbstractVoidCommand {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/86/MoveDataverseCommand.java\nindex dcae4e039e6..15f4213c92c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/86/MoveDataverseCommand.java\n@@ -40,278 +40,292 @@ import org.apache.solr.client.solrj.SolrServerException;\n // since the current implementation is superuser only, we can ignore these permission\n // checks that would need to be revisited if regular users were able to use this\n @RequiredPermissionsMap({\n-    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions, Permission.EditDataverse}),\n-\t@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n-\t@RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n+  @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions,\n+    Permission.EditDataverse}),\n+  @RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n+  @RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n })\n public class MoveDataverseCommand extends AbstractVoidCommand {\n-    private static final Logger logger = Logger.getLogger(MoveDataverseCommand.class.getName());\n-    final Dataverse moved;\n-    final Dataverse destination;\n-    final Boolean force;\n+  private static final Logger logger = Logger.getLogger(MoveDataverseCommand.class.getName());\n+  final Dataverse moved;\n+  final Dataverse destination;\n+  final Boolean force;\n \n-    public MoveDataverseCommand(DataverseRequest aRequest, Dataverse moved, Dataverse destination, Boolean force) {\n-        super(aRequest, dv(\"moved\", moved),\n-                dv(\"source\", moved.getOwner()),\n-                dv(\"destination\", destination));\n-        this.moved = moved;\n-        this.destination = destination;\n-        this.force = force;\n+  public MoveDataverseCommand(DataverseRequest aRequest, Dataverse moved, Dataverse destination, Boolean force) {\n+    super(aRequest, dv(\"moved\", moved),\n+      dv(\"source\", moved.getOwner()),\n+      dv(\"destination\", destination));\n+    this.moved = moved;\n+    this.destination = destination;\n+    this.force = force;\n+  }\n+\n+  @Override\n+  public void executeImpl(CommandContext ctxt) throws CommandException {\n+    long moveDvStart = System.currentTimeMillis();\n+    logger.info(\"Starting dataverse move...\");\n+    boolean removeGuestbook = false, removeTemplate = false, removeFeatDv = false, removeMetadataBlock = false,\n+      removeLinkDv = false, removeLinkDs = false;\n+\n+    // first check if user is a superuser\n+    if ((!(getUser() instanceof AuthenticatedUser) || !getUser().isSuperuser())) {\n+      throw new PermissionException(\n+        BundleUtil.getStringFromBundle(\"command.exception.only.superusers\", Arrays.asList(this.toString())),\n+        this, Collections.singleton(Permission.DeleteDataverse), moved);\n     }\n \n-    @Override\n-    public void executeImpl(CommandContext ctxt) throws CommandException {\n-        long moveDvStart = System.currentTimeMillis();\n-        logger.info(\"Starting dataverse move...\");\n-        boolean removeGuestbook = false, removeTemplate = false, removeFeatDv = false, removeMetadataBlock = false, removeLinkDv = false, removeLinkDs = false;\n-        \n-        // first check if user is a superuser\n-        if ((!(getUser() instanceof AuthenticatedUser) || !getUser().isSuperuser())) {\n-            throw new PermissionException(BundleUtil.getStringFromBundle(\"command.exception.only.superusers\", Arrays.asList(this.toString())),\n-                    this, Collections.singleton(Permission.DeleteDataverse), moved);\n-        }\n+    // validate the move makes sense\n+    if (destination.getOwners().contains(moved)) {\n+      throw new IllegalCommandException(\n+        BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.descendent\"), this);\n+    }\n+    if (moved.getOwner().equals(destination)) {\n+      throw new IllegalCommandException(\n+        BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.already.member\"), this);\n+    }\n+    if (moved.equals(destination)) {\n+      throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.itself\"),\n+        this);\n+    }\n+    // if dataverse is published make sure that its destination is published\n+    if (moved.isReleased() && !destination.isReleased()) {\n+      throw new IllegalCommandException(BundleUtil\n+        .getStringFromBundle(\"dataverses.api.move.dataverse.failure.not.published\",\n+          Arrays.asList(destination.getDisplayName())), this);\n+    }\n \n-        // validate the move makes sense\n-        if (destination.getOwners().contains(moved)) {\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.descendent\"), this);\n-        }\n-        if (moved.getOwner().equals(destination)) {\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.already.member\"), this);\n-        }\n-        if (moved.equals(destination)) {\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.itself\"), this);\n-        }\n-        // if dataverse is published make sure that its destination is published\n-        if (moved.isReleased() && !destination.isReleased()) {\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.not.published\", Arrays.asList(destination.getDisplayName())), this);\n-        }\n-        \n-        logger.info(\"Getting dataset children of dataverse...\");\n-        List<Dataset> datasetChildren = new ArrayList<>();\n-        List<Long> datasetChildrenIds = ctxt.dataverses().findAllDataverseDatasetChildren(moved.getId());\n-        datasetChildrenIds.forEach( (dsId) -> datasetChildren.add(ctxt.datasets().find(dsId)) );\n+    logger.info(\"Getting dataset children of dataverse...\");\n+    List<Dataset> datasetChildren = new ArrayList<>();\n+    List<Long> datasetChildrenIds = ctxt.dataverses().findAllDataverseDatasetChildren(moved.getId());\n+    datasetChildrenIds.forEach((dsId) -> datasetChildren.add(ctxt.datasets().find(dsId)));\n \n-        logger.info(\"Getting dataverse children of dataverse...\");\n-        List<Dataverse> dataverseChildren = new ArrayList<>();\n-        List<Long> dataverseChildrenIds = ctxt.dataverses().findAllDataverseDataverseChildren(moved.getId());\n-        dataverseChildrenIds.forEach( (dvId) -> dataverseChildren.add(ctxt.dataverses().find(dvId)) );\n+    logger.info(\"Getting dataverse children of dataverse...\");\n+    List<Dataverse> dataverseChildren = new ArrayList<>();\n+    List<Long> dataverseChildrenIds = ctxt.dataverses().findAllDataverseDataverseChildren(moved.getId());\n+    dataverseChildrenIds.forEach((dvId) -> dataverseChildren.add(ctxt.dataverses().find(dvId)));\n \n-        dataverseChildren.add(moved); // include the root of the children\n+    dataverseChildren.add(moved); // include the root of the children\n \n-        \n-        // generate list of all possible parent dataverses to check against\n-        List<Dataverse> ownersToCheck = new ArrayList<>();\n-        ownersToCheck.add(destination);\n-        ownersToCheck.add(moved);\n-        if (destination.getOwners() != null) {\n-            ownersToCheck.addAll(destination.getOwners());\n-        }\n-        \n-        // generate list of destination guestbooks to check against\n-        List<Guestbook> destinationGbs = null;\n-        if (moved.getGuestbooks() != null) {\n-            List<Guestbook> movedGbs = moved.getGuestbooks();\n-            destinationGbs = destination.getGuestbooks();\n-            boolean inheritGuestbooksValue = !destination.isGuestbookRoot();\n-            if (inheritGuestbooksValue && destination.getOwner() != null) {\n-                destinationGbs.addAll(destination.getParentGuestbooks());\n-            }\n-            // include guestbooks in moved dataverse since they will also be there\n-            // in the destination\n-            destinationGbs.addAll(movedGbs);\n-        }\n \n-        // if the dataverse is FEATURED by its parent, remove it\n-        List<DataverseFeaturedDataverse> ownerFeaturedDv = moved.getOwner().getDataverseFeaturedDataverses();\n-        if (ownerFeaturedDv != null) {\n-            logger.info(\"Checking featured dataverses...\");\n-            for (DataverseFeaturedDataverse dfdv : ownerFeaturedDv) {\n-                if (moved.equals(dfdv.getFeaturedDataverse())) {\n-                    if (force == null || !force) {\n-                        removeFeatDv = true;\n-                        break;\n-                    }\n-                    ctxt.featuredDataverses().delete(dfdv);\n-                }\n-            }\n-        }\n-        \n-        // generate a list of templates in destination to check against\n-        List<Template> destinationTemplates = null;\n-        if (moved.getTemplates() != null) {\n-            List<Template> movedTemplates = moved.getTemplates();\n-            destinationTemplates = destination.getTemplates();\n-            boolean inheritTemplateValue = !destination.isTemplateRoot();\n-            if (inheritTemplateValue && destination.getOwner() != null) {\n-                destinationTemplates.addAll(destination.getParentTemplates());\n-            }\n-            // include templates in moved dataverse since they will also be there\n-            // in the destination\n-            destinationTemplates.addAll(movedTemplates);\n+    // generate list of all possible parent dataverses to check against\n+    List<Dataverse> ownersToCheck = new ArrayList<>();\n+    ownersToCheck.add(destination);\n+    ownersToCheck.add(moved);\n+    if (destination.getOwners() != null) {\n+      ownersToCheck.addAll(destination.getOwners());\n+    }\n+\n+    // generate list of destination guestbooks to check against\n+    List<Guestbook> destinationGbs = null;\n+    if (moved.getGuestbooks() != null) {\n+      List<Guestbook> movedGbs = moved.getGuestbooks();\n+      destinationGbs = destination.getGuestbooks();\n+      boolean inheritGuestbooksValue = !destination.isGuestbookRoot();\n+      if (inheritGuestbooksValue && destination.getOwner() != null) {\n+        destinationGbs.addAll(destination.getParentGuestbooks());\n+      }\n+      // include guestbooks in moved dataverse since they will also be there\n+      // in the destination\n+      destinationGbs.addAll(movedGbs);\n+    }\n+\n+    // if the dataverse is FEATURED by its parent, remove it\n+    List<DataverseFeaturedDataverse> ownerFeaturedDv = moved.getOwner().getDataverseFeaturedDataverses();\n+    if (ownerFeaturedDv != null) {\n+      logger.info(\"Checking featured dataverses...\");\n+      for (DataverseFeaturedDataverse dfdv : ownerFeaturedDv) {\n+        if (moved.equals(dfdv.getFeaturedDataverse())) {\n+          if (force == null || !force) {\n+            removeFeatDv = true;\n+            break;\n+          }\n+          ctxt.featuredDataverses().delete(dfdv);\n         }\n+      }\n+    }\n+\n+    // generate a list of templates in destination to check against\n+    List<Template> destinationTemplates = null;\n+    if (moved.getTemplates() != null) {\n+      List<Template> movedTemplates = moved.getTemplates();\n+      destinationTemplates = destination.getTemplates();\n+      boolean inheritTemplateValue = !destination.isTemplateRoot();\n+      if (inheritTemplateValue && destination.getOwner() != null) {\n+        destinationTemplates.addAll(destination.getParentTemplates());\n+      }\n+      // include templates in moved dataverse since they will also be there\n+      // in the destination\n+      destinationTemplates.addAll(movedTemplates);\n+    }\n+\n+    // generate a list of metadatablocks in destination to check against\n+    Boolean inheritMbValue = null;\n+    List<Dataverse> mbParentsToCheck = new ArrayList<>();\n+    mbParentsToCheck.addAll(ownersToCheck);\n+    mbParentsToCheck.addAll(dataverseChildren);\n+    if (moved.getMetadataBlocks() != null) {\n+      inheritMbValue = !destination.isMetadataBlockRoot();\n+    }\n \n-        // generate a list of metadatablocks in destination to check against\n-        Boolean inheritMbValue = null;\n-        List<Dataverse> mbParentsToCheck = new ArrayList<>();\n-        mbParentsToCheck.addAll(ownersToCheck);\n-        mbParentsToCheck.addAll(dataverseChildren);\n-        if (moved.getMetadataBlocks() != null) {\n-            inheritMbValue = !destination.isMetadataBlockRoot();\n+    List<DataverseLinkingDataverse> linkingDataverses = new ArrayList();\n+\n+    logger.info(\"Checking templates and metadata blocks\");\n+    for (Dataverse dv : dataverseChildren) {\n+      // if the dataverses default TEMPLATE is not contained in the\n+      // destination dataverse, remove it\n+      if (destinationTemplates != null) {\n+        Template dvt = dv.getDefaultTemplate();\n+        if (dvt != null && !destinationTemplates.contains(dvt)) {\n+          if (force == null || !force) {\n+            removeTemplate = true;\n+            break;\n+          }\n+          dv.setDefaultTemplate(null);\n         }\n-                \n-        List<DataverseLinkingDataverse> linkingDataverses = new ArrayList();\n-    \n-        logger.info(\"Checking templates and metadata blocks\");\n-        for (Dataverse dv : dataverseChildren) {\n-            // if the dataverses default TEMPLATE is not contained in the \n-            // destination dataverse, remove it\n-            if (destinationTemplates != null) {\n-                Template dvt = dv.getDefaultTemplate();\n-                if (dvt != null && !destinationTemplates.contains(dvt)) {\n-                    if (force == null || !force) {\n-                        removeTemplate = true;\n-                        break;\n-                    }\n-                    dv.setDefaultTemplate(null);\n-                }\n-            }\n+      }\n \n-            // if all the dataverses METADATA BLOCKS are not contained in the new dataverse then remove the\n-            // ones that aren't available in the destination\n-            // i.e. the case where a custom metadata block is available through a parent \n-            // but then the dataverse is moved outside of that parent-child structure\n-            if (inheritMbValue != null) {\n-                List<MetadataBlock> metadataBlocksToKeep = new ArrayList<>();\n-                List<MetadataBlock> movedMbs = dv.getMetadataBlocks(true);\n-                Iterator<MetadataBlock> iter = movedMbs.iterator();\n-                while (iter.hasNext()) {\n-                    MetadataBlock mb = iter.next();\n-                    // if the owner is null, it means that the owner is the root dataverse\n-                    // because technically only custom metadata blocks have owners\n-                    Dataverse mbOwner = (mb.getOwner() != null) ? mb.getOwner() : ctxt.dataverses().findByAlias(\":root\");\n-                    if (!mbParentsToCheck.contains(mbOwner)) {\n-                        if (force == null || !force) {\n-                            removeMetadataBlock = true;\n-                            break;\n-                        }\n-                    } else if (mbParentsToCheck.contains(mbOwner) || inheritMbValue) {\n-                        // only keep metadata block if\n-                        // it is being inherited from its parent\n-                        metadataBlocksToKeep.add(mb);\n-                    }\n-                }\n-                if (force != null && force) {\n-                    dv.setMetadataBlocks(metadataBlocksToKeep);\n-                }\n-            }\n-            \n-            // get list of dataverses each child links to\n-            if (dv.getDataverseLinkingDataverses() != null) {\n-                linkingDataverses.addAll(dv.getDataverseLinkingDataverses());\n+      // if all the dataverses METADATA BLOCKS are not contained in the new dataverse then remove the\n+      // ones that aren't available in the destination\n+      // i.e. the case where a custom metadata block is available through a parent\n+      // but then the dataverse is moved outside of that parent-child structure\n+      if (inheritMbValue != null) {\n+        List<MetadataBlock> metadataBlocksToKeep = new ArrayList<>();\n+        List<MetadataBlock> movedMbs = dv.getMetadataBlocks(true);\n+        Iterator<MetadataBlock> iter = movedMbs.iterator();\n+        while (iter.hasNext()) {\n+          MetadataBlock mb = iter.next();\n+          // if the owner is null, it means that the owner is the root dataverse\n+          // because technically only custom metadata blocks have owners\n+          Dataverse mbOwner = (mb.getOwner() != null) ? mb.getOwner() : ctxt.dataverses().findByAlias(\":root\");\n+          if (!mbParentsToCheck.contains(mbOwner)) {\n+            if (force == null || !force) {\n+              removeMetadataBlock = true;\n+              break;\n             }\n+          } else if (mbParentsToCheck.contains(mbOwner) || inheritMbValue) {\n+            // only keep metadata block if\n+            // it is being inherited from its parent\n+            metadataBlocksToKeep.add(mb);\n+          }\n         }\n-        \n-        List<DatasetLinkingDataverse> linkingDatasets = new ArrayList();\n-        logger.info(\"Checking guestbooks...\");\n-        for (Dataset ds : datasetChildren) {\n-            // if all the dataverse's datasets GUESTBOOKS are not \n-            //contained in the new dataverse, then remove them\n-            Guestbook dsgb = ds.getGuestbook();\n-            if (dsgb != null && (destinationGbs == null || !destinationGbs.contains(dsgb))) {\n-                if (force == null || !force) {\n-                    removeGuestbook = true;\n-                    break;\n-                }\n-                ds.setGuestbook(null);\n-            }\n-            \n-            // get list of dataverses each child dataset links to\n-            if (ds.getDatasetLinkingDataverses() != null) {\n-                linkingDatasets.addAll(ds.getDatasetLinkingDataverses());\n-            }\n+        if (force != null && force) {\n+          dv.setMetadataBlocks(metadataBlocksToKeep);\n         }\n-        \n-        // if a dataverse links to its destination dataverse or any of \n-        // its destinations owners, remove the link\n-        logger.info(\"Checking linked dataverses....\");\n-        for (DataverseLinkingDataverse dvld : linkingDataverses) {\n-            for (Dataverse owner : ownersToCheck){\n-                if ((dvld.getLinkingDataverse()).equals(owner)){\n-                    if (force == null || !force) {\n-                        removeLinkDv = true;\n-                        break;\n-                    }\n-                    boolean index = false;\n-                    ctxt.engine().submit(new DeleteDataverseLinkingDataverseCommand(getRequest(), dvld.getDataverse(), dvld, index));\n-                    (dvld.getDataverse()).getDataverseLinkingDataverses().remove(dvld);\n-                }\n-            }\n+      }\n+\n+      // get list of dataverses each child links to\n+      if (dv.getDataverseLinkingDataverses() != null) {\n+        linkingDataverses.addAll(dv.getDataverseLinkingDataverses());\n+      }\n+    }\n+\n+    List<DatasetLinkingDataverse> linkingDatasets = new ArrayList();\n+    logger.info(\"Checking guestbooks...\");\n+    for (Dataset ds : datasetChildren) {\n+      // if all the dataverse's datasets GUESTBOOKS are not\n+      //contained in the new dataverse, then remove them\n+      Guestbook dsgb = ds.getGuestbook();\n+      if (dsgb != null && (destinationGbs == null || !destinationGbs.contains(dsgb))) {\n+        if (force == null || !force) {\n+          removeGuestbook = true;\n+          break;\n         }\n-        \n-        // if a dataset links to its destination dataverse or any of \n-        // its destinations owners, remove the link\n-        logger.info(\"Checking linked datasets...\");\n-        for (DatasetLinkingDataverse dsld : linkingDatasets) {\n-            for (Dataverse owner : ownersToCheck) {\n-                if ((dsld.getLinkingDataverse()).equals(owner)) {\n-                    if (force == null || !force) {\n-                        removeLinkDs = true;\n-                        break;\n-                    }\n-                    boolean index = false;\n-                    ctxt.engine().submit(new DeleteDatasetLinkingDataverseCommand(getRequest(), dsld.getDataset(), dsld, index));\n-                    (dsld.getDataset()).getDatasetLinkingDataverses().remove(dsld);\n-                }\n-            }\n+        ds.setGuestbook(null);\n+      }\n+\n+      // get list of dataverses each child dataset links to\n+      if (ds.getDatasetLinkingDataverses() != null) {\n+        linkingDatasets.addAll(ds.getDatasetLinkingDataverses());\n+      }\n+    }\n+\n+    // if a dataverse links to its destination dataverse or any of\n+    // its destinations owners, remove the link\n+    logger.info(\"Checking linked dataverses....\");\n+    for (DataverseLinkingDataverse dvld : linkingDataverses) {\n+      for (Dataverse owner : ownersToCheck) {\n+        if ((dvld.getLinkingDataverse()).equals(owner)) {\n+          if (force == null || !force) {\n+            removeLinkDv = true;\n+            break;\n+          }\n+          boolean index = false;\n+          ctxt.engine()\n+            .submit(new DeleteDataverseLinkingDataverseCommand(getRequest(), dvld.getDataverse(), dvld, index));\n+          (dvld.getDataverse()).getDataverseLinkingDataverses().remove(dvld);\n         }\n+      }\n+    }\n \n-        if (removeGuestbook || removeTemplate || removeFeatDv || removeMetadataBlock || removeLinkDv || removeLinkDs) {\n-            StringBuilder errorString = new StringBuilder();\n-            if (removeGuestbook) {\n-                errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.guestbook\")).append(\" \");\n-            }\n-            if (removeTemplate) {\n-                errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.template\")).append(\" \");\n-            } \n-            if (removeFeatDv) {               \n-               errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.featured\")).append(\" \");\n-            }\n-            if (removeMetadataBlock) {                \n-               errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.metadataBlock\")).append(\" \");\n-            }\n-            if (removeLinkDv) {                \n-                errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.dataverseLink\")).append(\" \");\n-            }\n-            if (removeLinkDs) {\n-                errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.datasetLink\")).append(\" \");\n-            }            \n-            errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.forceMove\")).append(\" \");\n-            throw new IllegalCommandException(errorString.toString(), this);\n+    // if a dataset links to its destination dataverse or any of\n+    // its destinations owners, remove the link\n+    logger.info(\"Checking linked datasets...\");\n+    for (DatasetLinkingDataverse dsld : linkingDatasets) {\n+      for (Dataverse owner : ownersToCheck) {\n+        if ((dsld.getLinkingDataverse()).equals(owner)) {\n+          if (force == null || !force) {\n+            removeLinkDs = true;\n+            break;\n+          }\n+          boolean index = false;\n+          ctxt.engine().submit(new DeleteDatasetLinkingDataverseCommand(getRequest(), dsld.getDataset(), dsld, index));\n+          (dsld.getDataset()).getDatasetLinkingDataverses().remove(dsld);\n         }\n-        // OK, move\n-        moved.setOwner(destination);\n-        ctxt.dataverses().save(moved);\n-        \n-        long moveDvEnd = System.currentTimeMillis();\n-        logger.info(\"Dataverse move took \" + (moveDvEnd - moveDvStart) + \" milliseconds\");\n-        \n-\t//TODO: indexing should be moved to an on Success method\n-        ctxt.indexBatch().indexDataverseRecursively(moved);\n-        \n-        //REindex datasets linked to moved dv\n-        if (moved.getDatasetLinkingDataverses() != null && !moved.getDatasetLinkingDataverses().isEmpty()) {\n-            for (DatasetLinkingDataverse dld : moved.getDatasetLinkingDataverses()) {\n-                Dataset linkedDS = ctxt.datasets().find(dld.getDataset().getId());\n-                try {\n-                    ctxt.index().indexDataset(linkedDS, true);\n-                } catch (IOException | SolrServerException e) {\n-                    String failureLogText = \"Post move dataverse dataset indexing failed. You can kickoff a re-index of this dataset with: \\r\\n curl http://localhost:8080/api/admin/index/datasets/\" + linkedDS.getId().toString();\n-                    failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-                    LoggingUtil.writeOnSuccessFailureLog(this, failureLogText, linkedDS);\n+      }\n+    }\n \n-                }\n+    if (removeGuestbook || removeTemplate || removeFeatDv || removeMetadataBlock || removeLinkDv || removeLinkDs) {\n+      StringBuilder errorString = new StringBuilder();\n+      if (removeGuestbook) {\n+        errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.guestbook\")).append(\" \");\n+      }\n+      if (removeTemplate) {\n+        errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.template\")).append(\" \");\n+      }\n+      if (removeFeatDv) {\n+        errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.featured\")).append(\" \");\n+      }\n+      if (removeMetadataBlock) {\n+        errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.metadataBlock\"))\n+          .append(\" \");\n+      }\n+      if (removeLinkDv) {\n+        errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.dataverseLink\"))\n+          .append(\" \");\n+      }\n+      if (removeLinkDs) {\n+        errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.datasetLink\"))\n+          .append(\" \");\n+      }\n+      errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.forceMove\")).append(\" \");\n+      throw new IllegalCommandException(errorString.toString(), this);\n+    }\n+    // OK, move\n+    moved.setOwner(destination);\n+    ctxt.dataverses().save(moved);\n+\n+    long moveDvEnd = System.currentTimeMillis();\n+    logger.info(\"Dataverse move took \" + (moveDvEnd - moveDvStart) + \" milliseconds\");\n+\n+    //TODO: indexing should be moved to an on Success method\n+    ctxt.indexBatch().indexDataverseRecursively(moved);\n+\n+    //REindex datasets linked to moved dv\n+    if (moved.getDatasetLinkingDataverses() != null && !moved.getDatasetLinkingDataverses().isEmpty()) {\n+      for (DatasetLinkingDataverse dld : moved.getDatasetLinkingDataverses()) {\n+        Dataset linkedDS = ctxt.datasets().find(dld.getDataset().getId());\n+        try {\n+          ctxt.index().indexDataset(linkedDS, true);\n+        } catch (IOException | SolrServerException e) {\n+          String failureLogText =\n+            \"Post move dataverse dataset indexing failed. You can kickoff a re-index of this dataset with: \\r\\n curl http://localhost:8080/api/admin/index/datasets/\" +\n+              linkedDS.getId().toString();\n+          failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n+          LoggingUtil.writeOnSuccessFailureLog(this, failureLogText, linkedDS);\n \n-            }\n         }\n+\n+      }\n     }\n+  }\n }\n",
            "diff_size": 376
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/86/MoveDataverseCommand.java\nindex dcae4e039e6..6c5ceb2f6f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/86/MoveDataverseCommand.java\n@@ -39,21 +39,22 @@ import org.apache.solr.client.solrj.SolrServerException;\n //versus published which checks publish \n // since the current implementation is superuser only, we can ignore these permission\n // checks that would need to be revisited if regular users were able to use this\n+\n+\n @RequiredPermissionsMap({\n     @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions, Permission.EditDataverse}),\n-\t@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n-\t@RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n+    @RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n+    @RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n })\n public class MoveDataverseCommand extends AbstractVoidCommand {\n+\n     private static final Logger logger = Logger.getLogger(MoveDataverseCommand.class.getName());\n     final Dataverse moved;\n     final Dataverse destination;\n     final Boolean force;\n \n     public MoveDataverseCommand(DataverseRequest aRequest, Dataverse moved, Dataverse destination, Boolean force) {\n-        super(aRequest, dv(\"moved\", moved),\n-                dv(\"source\", moved.getOwner()),\n-                dv(\"destination\", destination));\n+        super(aRequest, dv(\"moved\", moved), dv(\"source\", moved.getOwner()), dv(\"destination\", destination));\n         this.moved = moved;\n         this.destination = destination;\n         this.force = force;\n@@ -67,35 +68,36 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         \n         // first check if user is a superuser\n         if ((!(getUser() instanceof AuthenticatedUser) || !getUser().isSuperuser())) {\n-            throw new PermissionException(BundleUtil.getStringFromBundle(\"command.exception.only.superusers\", Arrays.asList(this.toString())),\n-                    this, Collections.singleton(Permission.DeleteDataverse), moved);\n+            throw new PermissionException(BundleUtil.getStringFromBundle(\"command.exception.only.superusers\", Arrays.asList(this.toString())), this, Collections.singleton(Permission.DeleteDataverse), moved);\n         }\n \n         // validate the move makes sense\n+\n         if (destination.getOwners().contains(moved)) {\n             throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.descendent\"), this);\n         }\n+\n         if (moved.getOwner().equals(destination)) {\n             throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.already.member\"), this);\n         }\n+\n         if (moved.equals(destination)) {\n             throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.itself\"), this);\n         }\n         // if dataverse is published make sure that its destination is published\n+\n         if (moved.isReleased() && !destination.isReleased()) {\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.not.published\", Arrays.asList(destination.getDisplayName())), this);\n+            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.failure.not.published\",\n+                                                                             Arrays.asList(destination.getDisplayName())), this);\n         }\n-        \n         logger.info(\"Getting dataset children of dataverse...\");\n         List<Dataset> datasetChildren = new ArrayList<>();\n         List<Long> datasetChildrenIds = ctxt.dataverses().findAllDataverseDatasetChildren(moved.getId());\n-        datasetChildrenIds.forEach( (dsId) -> datasetChildren.add(ctxt.datasets().find(dsId)) );\n-\n+        datasetChildrenIds.forEach((dsId) -> datasetChildren.add(ctxt.datasets().find(dsId)));\n         logger.info(\"Getting dataverse children of dataverse...\");\n         List<Dataverse> dataverseChildren = new ArrayList<>();\n         List<Long> dataverseChildrenIds = ctxt.dataverses().findAllDataverseDataverseChildren(moved.getId());\n-        dataverseChildrenIds.forEach( (dvId) -> dataverseChildren.add(ctxt.dataverses().find(dvId)) );\n-\n+        dataverseChildrenIds.forEach((dvId) -> dataverseChildren.add(ctxt.dataverses().find(dvId)));\n         dataverseChildren.add(moved); // include the root of the children\n \n         \n@@ -108,6 +110,7 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         }\n         \n         // generate list of destination guestbooks to check against\n+\n         List<Guestbook> destinationGbs = null;\n         if (moved.getGuestbooks() != null) {\n             List<Guestbook> movedGbs = moved.getGuestbooks();\n@@ -122,9 +125,11 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         }\n \n         // if the dataverse is FEATURED by its parent, remove it\n+\n         List<DataverseFeaturedDataverse> ownerFeaturedDv = moved.getOwner().getDataverseFeaturedDataverses();\n         if (ownerFeaturedDv != null) {\n             logger.info(\"Checking featured dataverses...\");\n+\n             for (DataverseFeaturedDataverse dfdv : ownerFeaturedDv) {\n                 if (moved.equals(dfdv.getFeaturedDataverse())) {\n                     if (force == null || !force) {\n@@ -137,6 +142,7 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         }\n         \n         // generate a list of templates in destination to check against\n+\n         List<Template> destinationTemplates = null;\n         if (moved.getTemplates() != null) {\n             List<Template> movedTemplates = moved.getTemplates();\n@@ -151,6 +157,7 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         }\n \n         // generate a list of metadatablocks in destination to check against\n+\n         Boolean inheritMbValue = null;\n         List<Dataverse> mbParentsToCheck = new ArrayList<>();\n         mbParentsToCheck.addAll(ownersToCheck);\n@@ -158,10 +165,10 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         if (moved.getMetadataBlocks() != null) {\n             inheritMbValue = !destination.isMetadataBlockRoot();\n         }\n-                \n+\n         List<DataverseLinkingDataverse> linkingDataverses = new ArrayList();\n-    \n         logger.info(\"Checking templates and metadata blocks\");\n+\n         for (Dataverse dv : dataverseChildren) {\n             // if the dataverses default TEMPLATE is not contained in the \n             // destination dataverse, remove it\n@@ -180,6 +187,7 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n             // ones that aren't available in the destination\n             // i.e. the case where a custom metadata block is available through a parent \n             // but then the dataverse is moved outside of that parent-child structure\n+\n             if (inheritMbValue != null) {\n                 List<MetadataBlock> metadataBlocksToKeep = new ArrayList<>();\n                 List<MetadataBlock> movedMbs = dv.getMetadataBlocks(true);\n@@ -200,19 +208,22 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n                         metadataBlocksToKeep.add(mb);\n                     }\n                 }\n+\n                 if (force != null && force) {\n                     dv.setMetadataBlocks(metadataBlocksToKeep);\n                 }\n             }\n             \n             // get list of dataverses each child links to\n+\n             if (dv.getDataverseLinkingDataverses() != null) {\n                 linkingDataverses.addAll(dv.getDataverseLinkingDataverses());\n             }\n         }\n-        \n+\n         List<DatasetLinkingDataverse> linkingDatasets = new ArrayList();\n         logger.info(\"Checking guestbooks...\");\n+\n         for (Dataset ds : datasetChildren) {\n             // if all the dataverse's datasets GUESTBOOKS are not \n             //contained in the new dataverse, then remove them\n@@ -226,6 +237,7 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n             }\n             \n             // get list of dataverses each child dataset links to\n+\n             if (ds.getDatasetLinkingDataverses() != null) {\n                 linkingDatasets.addAll(ds.getDatasetLinkingDataverses());\n             }\n@@ -234,15 +246,18 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         // if a dataverse links to its destination dataverse or any of \n         // its destinations owners, remove the link\n         logger.info(\"Checking linked dataverses....\");\n+\n         for (DataverseLinkingDataverse dvld : linkingDataverses) {\n-            for (Dataverse owner : ownersToCheck){\n-                if ((dvld.getLinkingDataverse()).equals(owner)){\n+            for (Dataverse owner : ownersToCheck) {\n+                if ((dvld.getLinkingDataverse()).equals(owner)) {\n                     if (force == null || !force) {\n                         removeLinkDv = true;\n                         break;\n                     }\n+\n                     boolean index = false;\n                     ctxt.engine().submit(new DeleteDataverseLinkingDataverseCommand(getRequest(), dvld.getDataverse(), dvld, index));\n+\n                     (dvld.getDataverse()).getDataverseLinkingDataverses().remove(dvld);\n                 }\n             }\n@@ -251,6 +266,7 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n         // if a dataset links to its destination dataverse or any of \n         // its destinations owners, remove the link\n         logger.info(\"Checking linked datasets...\");\n+\n         for (DatasetLinkingDataverse dsld : linkingDatasets) {\n             for (Dataverse owner : ownersToCheck) {\n                 if ((dsld.getLinkingDataverse()).equals(owner)) {\n@@ -258,44 +274,55 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n                         removeLinkDs = true;\n                         break;\n                     }\n+\n                     boolean index = false;\n                     ctxt.engine().submit(new DeleteDatasetLinkingDataverseCommand(getRequest(), dsld.getDataset(), dsld, index));\n+\n                     (dsld.getDataset()).getDatasetLinkingDataverses().remove(dsld);\n                 }\n             }\n         }\n \n-        if (removeGuestbook || removeTemplate || removeFeatDv || removeMetadataBlock || removeLinkDv || removeLinkDs) {\n+        if (removeGuestbook\n+            || removeTemplate\n+            || removeFeatDv\n+            || removeMetadataBlock\n+            || removeLinkDv\n+            || removeLinkDs) {\n             StringBuilder errorString = new StringBuilder();\n             if (removeGuestbook) {\n                 errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.guestbook\")).append(\" \");\n             }\n+\n             if (removeTemplate) {\n                 errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.template\")).append(\" \");\n-            } \n-            if (removeFeatDv) {               \n-               errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.featured\")).append(\" \");\n             }\n-            if (removeMetadataBlock) {                \n-               errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.metadataBlock\")).append(\" \");\n+\n+            if (removeFeatDv) {\n+                errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.featured\")).append(\" \");\n             }\n-            if (removeLinkDv) {                \n+\n+            if (removeMetadataBlock) {\n+                errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.metadataBlock\")).append(\" \");\n+            }\n+\n+            if (removeLinkDv) {\n                 errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.dataverseLink\")).append(\" \");\n             }\n+\n             if (removeLinkDs) {\n                 errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.datasetLink\")).append(\" \");\n-            }            \n+            }\n             errorString.append(BundleUtil.getStringFromBundle(\"dataverses.api.move.dataverse.error.forceMove\")).append(\" \");\n             throw new IllegalCommandException(errorString.toString(), this);\n         }\n         // OK, move\n         moved.setOwner(destination);\n         ctxt.dataverses().save(moved);\n-        \n         long moveDvEnd = System.currentTimeMillis();\n         logger.info(\"Dataverse move took \" + (moveDvEnd - moveDvStart) + \" milliseconds\");\n         \n-\t//TODO: indexing should be moved to an on Success method\n+    //TODO: indexing should be moved to an on Success method\n         ctxt.indexBatch().indexDataverseRecursively(moved);\n         \n         //REindex datasets linked to moved dv\n@@ -308,10 +335,8 @@ public class MoveDataverseCommand extends AbstractVoidCommand {\n                     String failureLogText = \"Post move dataverse dataset indexing failed. You can kickoff a re-index of this dataset with: \\r\\n curl http://localhost:8080/api/admin/index/datasets/\" + linkedDS.getId().toString();\n                     failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n                     LoggingUtil.writeOnSuccessFailureLog(this, failureLogText, linkedDS);\n-\n                 }\n-\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/86/MoveDataverseCommand.java\nindex dcae4e039e6..392463b0cfe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/86/MoveDataverseCommand.java\n@@ -41,7 +41,7 @@ import org.apache.solr.client.solrj.SolrServerException;\n // checks that would need to be revisited if regular users were able to use this\n @RequiredPermissionsMap({\n     @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions, Permission.EditDataverse}),\n-\t@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n+@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n \t@RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n })\n public class MoveDataverseCommand extends AbstractVoidCommand {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/86/MoveDataverseCommand.java\nindex dcae4e039e6..f98770d9343 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/86/MoveDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/86/MoveDataverseCommand.java\n@@ -41,7 +41,7 @@ import org.apache.solr.client.solrj.SolrServerException;\n // checks that would need to be revisited if regular users were able to use this\n @RequiredPermissionsMap({\n     @RequiredPermissions(dataverseName = \"moved\", value = {Permission.ManageDataversePermissions, Permission.EditDataverse}),\n-\t@RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n+    @RequiredPermissions(dataverseName = \"source\", value = Permission.DeleteDataverse),\n \t@RequiredPermissions(dataverseName = \"destination\", value = Permission.AddDataverse)\n })\n public class MoveDataverseCommand extends AbstractVoidCommand {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}