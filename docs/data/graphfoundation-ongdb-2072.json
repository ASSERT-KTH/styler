{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2072",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2072/LimitingResourceIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2072/LimitingResourceIterable.java\nindex 2c64f52e300..060bee472e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2072/LimitingResourceIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2072/LimitingResourceIterable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.collection;\n \n import org.neo4j.graphdb.ResourceIterable;\n@@ -31,25 +32,25 @@ import org.neo4j.graphdb.ResourceIterator;\n  */\n public class LimitingResourceIterable<T> implements ResourceIterable<T>\n {\n-    private final Iterable<T> source;\n-    private final int limit;\n+  private final Iterable<T> source;\n+  private final int limit;\n \n-    /**\n-     * Instantiates a new limiting {@link Iterable} which can limit the number\n-     * of items returned from iterators it spawns.\n-     *\n-     * @param source the source of items.\n-     * @param limit the limit, i.e. the max number of items to return.\n-     */\n-    public LimitingResourceIterable( ResourceIterable<T> source, int limit )\n-    {\n-        this.source = source;\n-        this.limit = limit;\n-    }\n+  /**\n+   * Instantiates a new limiting {@link Iterable} which can limit the number\n+   * of items returned from iterators it spawns.\n+   *\n+   * @param source the source of items.\n+   * @param limit  the limit, i.e. the max number of items to return.\n+   */\n+  public LimitingResourceIterable(ResourceIterable<T> source, int limit)\n+  {\n+    this.source = source;\n+    this.limit = limit;\n+  }\n \n-    @Override\n-    public ResourceIterator<T> iterator()\n-    {\n-        return new LimitingResourceIterator<>( Iterators.asResourceIterator( source.iterator() ), limit );\n-    }\n+  @Override\n+  public ResourceIterator<T> iterator()\n+  {\n+    return new LimitingResourceIterator<>(Iterators.asResourceIterator(source.iterator()), limit);\n+  }\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2072/LimitingResourceIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2072/LimitingResourceIterable.java\nindex 2c64f52e300..5b3ba3a35f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2072/LimitingResourceIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2072/LimitingResourceIterable.java\n@@ -52,4 +52,4 @@ public class LimitingResourceIterable<T> implements ResourceIterable<T>\n     {\n         return new LimitingResourceIterator<>( Iterators.asResourceIterator( source.iterator() ), limit );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}