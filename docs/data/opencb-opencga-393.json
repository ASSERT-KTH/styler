{
    "project_name": "opencb-opencga",
    "error_id": "393",
    "information": {
        "errors": [
            {
                "line": "175",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 148).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private static long getTotalVariants(String studyId, String sampleId, VariantStorageManager storageManager, String token) throws ToolException {\n        // Create query to count the total number of variants\n        Query query = new Query()\n                .append(VariantQueryParam.STUDY.key(), studyId)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/393/MendelianInconsistenciesComputation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/393/MendelianInconsistenciesComputation.java\nindex 75897f23bd2..29db93c7822 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/393/MendelianInconsistenciesComputation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/393/MendelianInconsistenciesComputation.java\n@@ -41,213 +41,214 @@ import java.util.Map;\n \n public class MendelianInconsistenciesComputation {\n \n-    public static MendelianErrorReport compute(String studyId, String childId, String motherId, String fatherId,\n-                                               VariantStorageManager storageManager, String token) throws ToolException {\n-        List<String> sampleIds = new ArrayList<>();\n+  public static MendelianErrorReport compute(String studyId, String childId, String motherId, String fatherId,\n+                                             VariantStorageManager storageManager, String token) throws ToolException {\n+    List<String> sampleIds = new ArrayList<>();\n \n-        // Sanity check\n-        if (StringUtils.isEmpty(childId)) {\n-            throw new ToolException(\"Missing child sample ID.\");\n-        }\n-        sampleIds.add(childId);\n-        if (StringUtils.isNotEmpty(motherId)) {\n-            sampleIds.add(motherId);\n-        }\n-        if (StringUtils.isNotEmpty(fatherId)) {\n-            sampleIds.add(fatherId);\n-        }\n-        if (sampleIds.size() == 1) {\n-            throw new ToolException(\"Invalid parameters: both mother and father sample IDs are empty but in order to compute mendelian\"\n-                    + \" errors at least one of them has to be not empty.\");\n-        }\n-\n-        // Query to retrive mendelian error variants from childId, motherId, fatherId\n-        Query query = new Query();\n-        query.put(VariantQueryParam.STUDY.key(), studyId);\n-        query.put(VariantQueryParam.SAMPLE.key(), childId + \":MendelianError\");\n-        query.put(\"includeSample\", StringUtils.join(sampleIds, \",\"));\n+    // Sanity check\n+    if (StringUtils.isEmpty(childId)) {\n+      throw new ToolException(\"Missing child sample ID.\");\n+    }\n+    sampleIds.add(childId);\n+    if (StringUtils.isNotEmpty(motherId)) {\n+      sampleIds.add(motherId);\n+    }\n+    if (StringUtils.isNotEmpty(fatherId)) {\n+      sampleIds.add(fatherId);\n+    }\n+    if (sampleIds.size() == 1) {\n+      throw new ToolException(\"Invalid parameters: both mother and father sample IDs are empty but in order to compute mendelian\"\n+          + \" errors at least one of them has to be not empty.\");\n+    }\n \n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.put(QueryOptions.EXCLUDE, \"annotation\");\n+    // Query to retrive mendelian error variants from childId, motherId, fatherId\n+    Query query = new Query();\n+    query.put(VariantQueryParam.STUDY.key(), studyId);\n+    query.put(VariantQueryParam.SAMPLE.key(), childId + \":MendelianError\");\n+    query.put(\"includeSample\", StringUtils.join(sampleIds, \",\"));\n \n-        System.out.println(\"---> Query = \" + query.toJson());\n-        System.out.println(\"---> QueryOptions = \" + queryOptions.toJson());\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.put(QueryOptions.EXCLUDE, \"annotation\");\n \n-        VariantDBIterator iterator;\n-        try {\n-            iterator = storageManager.iterator(query, queryOptions, token);\n-        } catch (CatalogException | StorageEngineException e) {\n-            throw new ToolException(e);\n-        }\n+    System.out.println(\"---> Query = \" + query.toJson());\n+    System.out.println(\"---> QueryOptions = \" + queryOptions.toJson());\n \n-        return buildMendelianErrorReport(iterator, getTotalVariants(studyId, childId, storageManager, token));\n+    VariantDBIterator iterator;\n+    try {\n+      iterator = storageManager.iterator(query, queryOptions, token);\n+    } catch (CatalogException | StorageEngineException e) {\n+      throw new ToolException(e);\n     }\n \n+    return buildMendelianErrorReport(iterator, getTotalVariants(studyId, childId, storageManager, token));\n+  }\n \n-    @Deprecated\n-    public static MendelianErrorReport compute(String studyId, String familyId, VariantStorageManager storageManager,\n-                                               String token) throws ToolException {\n-        // Create query to count the total number of variants\n-        Query query = new Query();\n-        query.put(VariantQueryParam.STUDY.key(), studyId);\n \n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.put(QueryOptions.EXCLUDE, \"annotation\");\n+  @Deprecated\n+  public static MendelianErrorReport compute(String studyId, String familyId, VariantStorageManager storageManager,\n+                                             String token) throws ToolException {\n+    // Create query to count the total number of variants\n+    Query query = new Query();\n+    query.put(VariantQueryParam.STUDY.key(), studyId);\n \n-        // Get total number of variants\n-        long numVariants;\n-        try {\n-            numVariants = storageManager.count(query, token).first();\n-        } catch (CatalogException | StorageEngineException | IOException e) {\n-            throw new ToolException(e);\n-        }\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.put(QueryOptions.EXCLUDE, \"annotation\");\n \n-        // Update quey to retrive mendelian error variants\n-        query.put(VariantCatalogQueryUtils.FAMILY.key(), familyId);\n-        query.put(VariantCatalogQueryUtils.FAMILY_SEGREGATION.key(), \"MendelianError\");\n-\n-        // Create auxiliary map\n-        //   sample      chrom      error    count\n-        Map<String, Map<String, Map<String, Integer>>> counter = new HashMap<>();\n-        int numErrors = 0;\n-        try {\n-            VariantDBIterator iterator = storageManager.iterator(query, queryOptions, token);\n-            while (iterator.hasNext()) {\n-                Variant variant = iterator.next();\n-\n-                // Get sampleId and error code from variant issues\n-                boolean foundError = false;\n-                for (IssueEntry issue : variant.getStudies().get(0).getIssues()) {\n-                    if (\"MENDELIAN_ERROR\".equals(issue.getType()) || \"DE_NOVO\".equals(issue.getType())) {\n-                        foundError = true;\n-\n-                        String sampleId = issue.getSample().getSampleId();\n-                        String errorCode = issue.getSample().getData().get(0);\n-                        if (!counter.containsKey(sampleId)) {\n-                            counter.put(sampleId, new HashMap<>());\n-                        }\n-                        if (!counter.get(sampleId).containsKey(variant.getChromosome())) {\n-                            counter.get(sampleId).put(variant.getChromosome(), new HashMap<>());\n-                        }\n-                        int val = 0;\n-                        if (counter.get(sampleId).get(variant.getChromosome()).containsKey(errorCode)) {\n-                            val = counter.get(sampleId).get(variant.getChromosome()).get(errorCode);\n-                        }\n-                        counter.get(sampleId).get(variant.getChromosome()).put(errorCode, val + 1);\n-                    }\n-                }\n-                if (foundError) {\n-                    numErrors++;\n-                }\n-            }\n-        } catch (CatalogException | StorageEngineException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Create mendelian error report from auxiliary map\n-        MendelianErrorReport meReport = new MendelianErrorReport();\n-        meReport.setNumErrors(numErrors);\n-        for (String sampleId : counter.keySet()) {\n-            SampleAggregation sampleAgg = new SampleAggregation();\n-            int numSampleErrors = 0;\n-            for (String chrom : counter.get(sampleId).keySet()) {\n-                int numChromErrors = counter.get(sampleId).get(chrom).values().stream().mapToInt(Integer::intValue).sum();\n-\n-                ChromosomeAggregation chromAgg = new ChromosomeAggregation();\n-                chromAgg.setChromosome(chrom);\n-                chromAgg.setNumErrors(numChromErrors);\n-                chromAgg.setErrorCodeAggregation(counter.get(sampleId).get(chrom));\n-\n-                // Update sample aggregation\n-                sampleAgg.getChromAggregation().add(chromAgg);\n-                numSampleErrors += numChromErrors;\n-            }\n-            sampleAgg.setSample(sampleId);\n-            sampleAgg.setNumErrors(numSampleErrors);\n-            sampleAgg.setRatio(1.0d * numSampleErrors / numVariants);\n-\n-            meReport.getSampleAggregation().add(sampleAgg);\n-        }\n-\n-        return meReport;\n+    // Get total number of variants\n+    long numVariants;\n+    try {\n+      numVariants = storageManager.count(query, token).first();\n+    } catch (CatalogException | StorageEngineException | IOException e) {\n+      throw new ToolException(e);\n     }\n \n-    private static long getTotalVariants(String studyId, String sampleId, VariantStorageManager storageManager, String token) throws ToolException {\n-        // Create query to count the total number of variants\n-        Query query = new Query()\n-                .append(VariantQueryParam.STUDY.key(), studyId)\n-                .append(VariantQueryParam.SAMPLE.key(), sampleId);\n-\n-        // Get total number of variants\n-        long numVariants;\n-        try {\n-            numVariants = storageManager.count(query, token).first();\n-        } catch (CatalogException | StorageEngineException | IOException e) {\n-            throw new ToolException(e);\n-        }\n-        return numVariants;\n-    }\n-\n-    private static MendelianErrorReport buildMendelianErrorReport(VariantDBIterator iterator, long numVariants) {\n-        // Create auxiliary map\n-        //   sample      chrom      error    count\n-        Map<String, Map<String, Map<String, Integer>>> counter = new HashMap<>();\n-        int numErrors = 0;\n-        while (iterator.hasNext()) {\n-            Variant variant = iterator.next();\n-\n-            // Get sampleId and error code from variant issues\n-            boolean foundError = false;\n-            for (IssueEntry issue : variant.getStudies().get(0).getIssues()) {\n-                if (IssueType.MENDELIAN_ERROR == issue.getType() || IssueType.DE_NOVO == issue.getType()) {\n-                    foundError = true;\n-\n-                    String sampleId = issue.getSample().getSampleId();\n-                    String errorCode = issue.getSample().getData().get(0);\n-                    if (!counter.containsKey(sampleId)) {\n-                        counter.put(sampleId, new HashMap<>());\n-                    }\n-                    if (!counter.get(sampleId).containsKey(variant.getChromosome())) {\n-                        counter.get(sampleId).put(variant.getChromosome(), new HashMap<>());\n-                    }\n-                    int val = 0;\n-                    if (counter.get(sampleId).get(variant.getChromosome()).containsKey(errorCode)) {\n-                        val = counter.get(sampleId).get(variant.getChromosome()).get(errorCode);\n-                    }\n-                    counter.get(sampleId).get(variant.getChromosome()).put(errorCode, val + 1);\n-                    break;\n-                }\n+    // Update quey to retrive mendelian error variants\n+    query.put(VariantCatalogQueryUtils.FAMILY.key(), familyId);\n+    query.put(VariantCatalogQueryUtils.FAMILY_SEGREGATION.key(), \"MendelianError\");\n+\n+    // Create auxiliary map\n+    //   sample      chrom      error    count\n+    Map<String, Map<String, Map<String, Integer>>> counter = new HashMap<>();\n+    int numErrors = 0;\n+    try {\n+      VariantDBIterator iterator = storageManager.iterator(query, queryOptions, token);\n+      while (iterator.hasNext()) {\n+        Variant variant = iterator.next();\n+\n+        // Get sampleId and error code from variant issues\n+        boolean foundError = false;\n+        for (IssueEntry issue : variant.getStudies().get(0).getIssues()) {\n+          if (\"MENDELIAN_ERROR\".equals(issue.getType()) || \"DE_NOVO\".equals(issue.getType())) {\n+            foundError = true;\n+\n+            String sampleId = issue.getSample().getSampleId();\n+            String errorCode = issue.getSample().getData().get(0);\n+            if (!counter.containsKey(sampleId)) {\n+              counter.put(sampleId, new HashMap<>());\n+            }\n+            if (!counter.get(sampleId).containsKey(variant.getChromosome())) {\n+              counter.get(sampleId).put(variant.getChromosome(), new HashMap<>());\n             }\n-            if (foundError) {\n-                numErrors++;\n+            int val = 0;\n+            if (counter.get(sampleId).get(variant.getChromosome()).containsKey(errorCode)) {\n+              val = counter.get(sampleId).get(variant.getChromosome()).get(errorCode);\n             }\n+            counter.get(sampleId).get(variant.getChromosome()).put(errorCode, val + 1);\n+          }\n         }\n+        if (foundError) {\n+          numErrors++;\n+        }\n+      }\n+    } catch (CatalogException | StorageEngineException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // Create mendelian error report from auxiliary map\n-        MendelianErrorReport meReport = new MendelianErrorReport();\n-        meReport.setNumErrors(numErrors);\n-        for (String sampleId : counter.keySet()) {\n-            SampleAggregation sampleAgg = new SampleAggregation();\n-            int numSampleErrors = 0;\n-            for (String chrom : counter.get(sampleId).keySet()) {\n-                int numChromErrors = counter.get(sampleId).get(chrom).values().stream().mapToInt(Integer::intValue).sum();\n-\n-                ChromosomeAggregation chromAgg = new ChromosomeAggregation();\n-                chromAgg.setChromosome(chrom);\n-                chromAgg.setNumErrors(numChromErrors);\n-                chromAgg.setErrorCodeAggregation(counter.get(sampleId).get(chrom));\n-\n-                // Update sample aggregation\n-                sampleAgg.getChromAggregation().add(chromAgg);\n-                numSampleErrors += numChromErrors;\n-            }\n-            sampleAgg.setSample(sampleId);\n-            sampleAgg.setNumErrors(numSampleErrors);\n-            sampleAgg.setRatio(1.0d * numSampleErrors / numVariants);\n+    // Create mendelian error report from auxiliary map\n+    MendelianErrorReport meReport = new MendelianErrorReport();\n+    meReport.setNumErrors(numErrors);\n+    for (String sampleId : counter.keySet()) {\n+      SampleAggregation sampleAgg = new SampleAggregation();\n+      int numSampleErrors = 0;\n+      for (String chrom : counter.get(sampleId).keySet()) {\n+        int numChromErrors = counter.get(sampleId).get(chrom).values().stream().mapToInt(Integer::intValue).sum();\n+\n+        ChromosomeAggregation chromAgg = new ChromosomeAggregation();\n+        chromAgg.setChromosome(chrom);\n+        chromAgg.setNumErrors(numChromErrors);\n+        chromAgg.setErrorCodeAggregation(counter.get(sampleId).get(chrom));\n+\n+        // Update sample aggregation\n+        sampleAgg.getChromAggregation().add(chromAgg);\n+        numSampleErrors += numChromErrors;\n+      }\n+      sampleAgg.setSample(sampleId);\n+      sampleAgg.setNumErrors(numSampleErrors);\n+      sampleAgg.setRatio(1.0d * numSampleErrors / numVariants);\n+\n+      meReport.getSampleAggregation().add(sampleAgg);\n+    }\n \n-            meReport.getSampleAggregation().add(sampleAgg);\n+    return meReport;\n+  }\n+\n+  private static long getTotalVariants(String studyId, String sampleId, VariantStorageManager storageManager, String token)\n+      throws ToolException {\n+    // Create query to count the total number of variants\n+    Query query = new Query()\n+        .append(VariantQueryParam.STUDY.key(), studyId)\n+        .append(VariantQueryParam.SAMPLE.key(), sampleId);\n+\n+    // Get total number of variants\n+    long numVariants;\n+    try {\n+      numVariants = storageManager.count(query, token).first();\n+    } catch (CatalogException | StorageEngineException | IOException e) {\n+      throw new ToolException(e);\n+    }\n+    return numVariants;\n+  }\n+\n+  private static MendelianErrorReport buildMendelianErrorReport(VariantDBIterator iterator, long numVariants) {\n+    // Create auxiliary map\n+    //   sample      chrom      error    count\n+    Map<String, Map<String, Map<String, Integer>>> counter = new HashMap<>();\n+    int numErrors = 0;\n+    while (iterator.hasNext()) {\n+      Variant variant = iterator.next();\n+\n+      // Get sampleId and error code from variant issues\n+      boolean foundError = false;\n+      for (IssueEntry issue : variant.getStudies().get(0).getIssues()) {\n+        if (IssueType.MENDELIAN_ERROR == issue.getType() || IssueType.DE_NOVO == issue.getType()) {\n+          foundError = true;\n+\n+          String sampleId = issue.getSample().getSampleId();\n+          String errorCode = issue.getSample().getData().get(0);\n+          if (!counter.containsKey(sampleId)) {\n+            counter.put(sampleId, new HashMap<>());\n+          }\n+          if (!counter.get(sampleId).containsKey(variant.getChromosome())) {\n+            counter.get(sampleId).put(variant.getChromosome(), new HashMap<>());\n+          }\n+          int val = 0;\n+          if (counter.get(sampleId).get(variant.getChromosome()).containsKey(errorCode)) {\n+            val = counter.get(sampleId).get(variant.getChromosome()).get(errorCode);\n+          }\n+          counter.get(sampleId).get(variant.getChromosome()).put(errorCode, val + 1);\n+          break;\n         }\n+      }\n+      if (foundError) {\n+        numErrors++;\n+      }\n+    }\n \n-        return meReport;\n+    // Create mendelian error report from auxiliary map\n+    MendelianErrorReport meReport = new MendelianErrorReport();\n+    meReport.setNumErrors(numErrors);\n+    for (String sampleId : counter.keySet()) {\n+      SampleAggregation sampleAgg = new SampleAggregation();\n+      int numSampleErrors = 0;\n+      for (String chrom : counter.get(sampleId).keySet()) {\n+        int numChromErrors = counter.get(sampleId).get(chrom).values().stream().mapToInt(Integer::intValue).sum();\n+\n+        ChromosomeAggregation chromAgg = new ChromosomeAggregation();\n+        chromAgg.setChromosome(chrom);\n+        chromAgg.setNumErrors(numChromErrors);\n+        chromAgg.setErrorCodeAggregation(counter.get(sampleId).get(chrom));\n+\n+        // Update sample aggregation\n+        sampleAgg.getChromAggregation().add(chromAgg);\n+        numSampleErrors += numChromErrors;\n+      }\n+      sampleAgg.setSample(sampleId);\n+      sampleAgg.setNumErrors(numSampleErrors);\n+      sampleAgg.setRatio(1.0d * numSampleErrors / numVariants);\n+\n+      meReport.getSampleAggregation().add(sampleAgg);\n     }\n+\n+    return meReport;\n+  }\n }\n",
            "diff_size": 291
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/393/MendelianInconsistenciesComputation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/393/MendelianInconsistenciesComputation.java\nindex 75897f23bd2..c0f44eb59e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/393/MendelianInconsistenciesComputation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/393/MendelianInconsistenciesComputation.java\n@@ -87,7 +87,7 @@ public class MendelianInconsistenciesComputation {\n     @Deprecated\n     public static MendelianErrorReport compute(String studyId, String familyId, VariantStorageManager storageManager,\n                                                String token) throws ToolException {\n-        // Create query to count the total number of variants\n+    // Create query to count the total number of variants\n         Query query = new Query();\n         query.put(VariantQueryParam.STUDY.key(), studyId);\n \n@@ -250,4 +250,4 @@ public class MendelianInconsistenciesComputation {\n \n         return meReport;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}