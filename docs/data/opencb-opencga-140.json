{
    "project_name": "opencb-opencga",
    "error_id": "140",
    "information": {
        "errors": [
            {
                "line": "138",
                "column": "118",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     * @throws RgaException RgaException\n     */\n    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException{\n        SolrQuery solrQuery = parser.parseQuery(query);\n        fixIndividualOptions(queryOptions, solrQuery);\n//        solrQuery.setRows(Integer.MAX_VALUE);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/140/RgaEngine.java\nindex 91051170175..18b34faa396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/140/RgaEngine.java\n@@ -135,7 +135,7 @@ public class RgaEngine implements Closeable {\n      * @return RgaIterator.\n      * @throws RgaException RgaException\n      */\n-    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException{\n+    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n         SolrQuery solrQuery = parser.parseQuery(query);\n         fixIndividualOptions(queryOptions, solrQuery);\n //        solrQuery.setRows(Integer.MAX_VALUE);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/140/RgaEngine.java\nindex 91051170175..d384ec15f36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/140/RgaEngine.java\n@@ -28,319 +28,318 @@ import java.util.concurrent.TimeUnit;\n \n public class RgaEngine implements Closeable {\n \n-    private SolrManager solrManager;\n-    private RgaQueryParser parser;\n-    private IndividualRgaConverter individualRgaConverter;\n-    private GeneRgaConverter geneConverter;\n-    private VariantRgaConverter variantConverter;\n-    private StorageConfiguration storageConfiguration;\n-    private static Map<String, SolrCollection> solrCollectionMap;\n-\n-    private Logger logger;\n-\n-    static {\n-        solrCollectionMap = new HashMap<>();\n+  private SolrManager solrManager;\n+  private RgaQueryParser parser;\n+  private IndividualRgaConverter individualRgaConverter;\n+  private GeneRgaConverter geneConverter;\n+  private VariantRgaConverter variantConverter;\n+  private StorageConfiguration storageConfiguration;\n+  private static Map<String, SolrCollection> solrCollectionMap;\n+\n+  private Logger logger;\n+\n+  static {\n+    solrCollectionMap = new HashMap<>();\n+  }\n+\n+  public RgaEngine(StorageConfiguration storageConfiguration) {\n+    this.individualRgaConverter = new IndividualRgaConverter();\n+    this.geneConverter = new GeneRgaConverter();\n+    this.variantConverter = new VariantRgaConverter();\n+    this.parser = new RgaQueryParser();\n+    this.storageConfiguration = storageConfiguration;\n+\n+    this.solrManager = new SolrManager(storageConfiguration.getRga().getHosts(), storageConfiguration.getRga().getMode(),\n+        storageConfiguration.getRga().getTimeout());\n+\n+    logger = LoggerFactory.getLogger(RgaEngine.class);\n+  }\n+\n+  public boolean isAlive(String collection) {\n+    return solrManager.isAlive(collection);\n+  }\n+\n+  public void createMainCollection(String dbName) throws RgaException {\n+    try {\n+      solrManager.create(dbName, this.storageConfiguration.getRga().getConfigSet());\n+    } catch (SolrException e) {\n+      throw new RgaException(\"Error creating Solr collection '\" + dbName + \"'\", e);\n     }\n+  }\n \n-    public RgaEngine(StorageConfiguration storageConfiguration) {\n-        this.individualRgaConverter = new IndividualRgaConverter();\n-        this.geneConverter = new GeneRgaConverter();\n-        this.variantConverter = new VariantRgaConverter();\n-        this.parser = new RgaQueryParser();\n-        this.storageConfiguration = storageConfiguration;\n-\n-        this.solrManager = new SolrManager(storageConfiguration.getRga().getHosts(), storageConfiguration.getRga().getMode(),\n-                storageConfiguration.getRga().getTimeout());\n-\n-        logger = LoggerFactory.getLogger(RgaEngine.class);\n-    }\n-\n-    public boolean isAlive(String collection) {\n-        return solrManager.isAlive(collection);\n-    }\n-\n-    public void createMainCollection(String dbName) throws RgaException {\n-        try {\n-            solrManager.create(dbName, this.storageConfiguration.getRga().getConfigSet());\n-        } catch (SolrException e) {\n-            throw new RgaException(\"Error creating Solr collection '\" + dbName + \"'\", e);\n-        }\n-    }\n-\n-    public void createAuxCollection(String dbName) throws RgaException {\n-        try {\n-            solrManager.create(dbName, this.storageConfiguration.getRga().getConfigSet().replace(\"-rga-\", \"-rga-aux-\"));\n-        } catch (SolrException e) {\n-            throw new RgaException(\"Error creating Solr collection '\" + dbName + \"'\", e);\n-        }\n+  public void createAuxCollection(String dbName) throws RgaException {\n+    try {\n+      solrManager.create(dbName, this.storageConfiguration.getRga().getConfigSet().replace(\"-rga-\", \"-rga-aux-\"));\n+    } catch (SolrException e) {\n+      throw new RgaException(\"Error creating Solr collection '\" + dbName + \"'\", e);\n     }\n+  }\n \n-    public void create(String dbName, String configSet) throws RgaException {\n-        try {\n-            solrManager.create(dbName, configSet);\n-        } catch (SolrException e) {\n-            throw new RgaException(\"Error creating Solr collection '\" + dbName + \"'\", e);\n-        }\n+  public void create(String dbName, String configSet) throws RgaException {\n+    try {\n+      solrManager.create(dbName, configSet);\n+    } catch (SolrException e) {\n+      throw new RgaException(\"Error creating Solr collection '\" + dbName + \"'\", e);\n     }\n+  }\n \n \n-    public boolean exists(String dbName) throws RgaException {\n-        try {\n-            return solrManager.exists(dbName);\n-        } catch (SolrException e) {\n-            throw new RgaException(\"Error asking if Solr collection '\" + dbName + \"' exists\", e);\n-        }\n+  public boolean exists(String dbName) throws RgaException {\n+    try {\n+      return solrManager.exists(dbName);\n+    } catch (SolrException e) {\n+      throw new RgaException(\"Error asking if Solr collection '\" + dbName + \"' exists\", e);\n     }\n+  }\n \n-    public boolean existsCore(String coreName) throws RgaException {\n-        try {\n-            return solrManager.existsCore(coreName);\n-        } catch (SolrException e) {\n-            throw new RgaException(\"Error asking if Solr core '\" + coreName + \"' exists\", e);\n-        }\n+  public boolean existsCore(String coreName) throws RgaException {\n+    try {\n+      return solrManager.existsCore(coreName);\n+    } catch (SolrException e) {\n+      throw new RgaException(\"Error asking if Solr core '\" + coreName + \"' exists\", e);\n     }\n+  }\n \n-    public boolean existsCollection(String collectionName) throws RgaException {\n-        try {\n-            return solrManager.exists(collectionName);\n-        } catch (SolrException e) {\n-            throw new RgaException(\"Error asking if Solr collection '\" + collectionName + \"' exists\", e);\n-        }\n+  public boolean existsCollection(String collectionName) throws RgaException {\n+    try {\n+      return solrManager.exists(collectionName);\n+    } catch (SolrException e) {\n+      throw new RgaException(\"Error asking if Solr collection '\" + collectionName + \"' exists\", e);\n     }\n-\n-    /**\n-     * Insert a list of RGA models into the given Solr collection.\n-     *\n-     * @param collection Solr collection where to insert\n-     * @param rgaModelList List of RGA models to insert\n-     * @throws IOException   IOException\n-     * @throws SolrServerException SolrServerException\n-     */\n-    public void insert(String collection, List<?> rgaModelList) throws IOException, SolrServerException {\n-        if (CollectionUtils.isNotEmpty(rgaModelList)) {\n-            UpdateResponse updateResponse;\n-            updateResponse = solrManager.getSolrClient().addBeans(collection, rgaModelList);\n-            if (updateResponse.getStatus() == 0) {\n-                solrManager.getSolrClient().commit(collection);\n-            }\n-        }\n+  }\n+\n+  /**\n+   * Insert a list of RGA models into the given Solr collection.\n+   *\n+   * @param collection   Solr collection where to insert\n+   * @param rgaModelList List of RGA models to insert\n+   * @throws IOException         IOException\n+   * @throws SolrServerException SolrServerException\n+   */\n+  public void insert(String collection, List<?> rgaModelList) throws IOException, SolrServerException {\n+    if (CollectionUtils.isNotEmpty(rgaModelList)) {\n+      UpdateResponse updateResponse;\n+      updateResponse = solrManager.getSolrClient().addBeans(collection, rgaModelList);\n+      if (updateResponse.getStatus() == 0) {\n+        solrManager.getSolrClient().commit(collection);\n+      }\n     }\n-\n-    /**\n-     * Return an RgaDataModel iterator given a query.\n-     *\n-     * @param collection   Collection name\n-     * @param query        Query\n-     * @param queryOptions Query options\n-     * @return RgaIterator.\n-     * @throws RgaException RgaException\n-     */\n-    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException{\n-        SolrQuery solrQuery = parser.parseQuery(query);\n-        fixIndividualOptions(queryOptions, solrQuery);\n+  }\n+\n+  /**\n+   * Return an RgaDataModel iterator given a query.\n+   *\n+   * @param collection   Collection name\n+   * @param query        Query\n+   * @param queryOptions Query options\n+   * @return RgaIterator.\n+   * @throws RgaException RgaException\n+   */\n+  public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n+    SolrQuery solrQuery = parser.parseQuery(query);\n+    fixIndividualOptions(queryOptions, solrQuery);\n //        solrQuery.setRows(Integer.MAX_VALUE);\n-        solrQuery.setRows(queryOptions.getInt(QueryOptions.LIMIT, Integer.MAX_VALUE));\n-        try {\n-            return new RgaIterator(solrManager.getSolrClient(), collection, solrQuery);\n-        } catch (SolrServerException e) {\n-            throw new RgaException(\"Error executing KnockoutByIndividual query\", e);\n-        }\n-    }\n-\n-    private void fixIndividualOptions(QueryOptions queryOptions, SolrQuery solrQuery) {\n-        if (queryOptions.containsKey(QueryOptions.INCLUDE)) {\n-            for (String include : individualRgaConverter.getIncludeFields(queryOptions.getAsStringList(QueryOptions.INCLUDE))) {\n-                solrQuery.addField(include);\n-            }\n-        } else if (queryOptions.containsKey(QueryOptions.EXCLUDE)) {\n-            for (String include : individualRgaConverter.getIncludeFromExcludeFields(queryOptions.getAsStringList(QueryOptions.EXCLUDE))) {\n-                solrQuery.addField(include);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Return an RgaDataModel iterator given a query.\n-     *\n-     * @param collection   Collection name\n-     * @param query        Query\n-     * @param queryOptions Query options\n-     * @return RgaIterator.\n-     * @throws RgaException RgaException\n-     */\n-    public RgaIterator geneQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n-        SolrQuery solrQuery = parser.parseQuery(query);\n-        fixGeneOptions(queryOptions, solrQuery);\n-        solrQuery.setRows(Integer.MAX_VALUE);\n-        try {\n-            return new RgaIterator(solrManager.getSolrClient(), collection, solrQuery);\n-        } catch (SolrServerException e) {\n-            throw new RgaException(\"Error executing RgaKnockoutByGene query\", e);\n-        }\n+    solrQuery.setRows(queryOptions.getInt(QueryOptions.LIMIT, Integer.MAX_VALUE));\n+    try {\n+      return new RgaIterator(solrManager.getSolrClient(), collection, solrQuery);\n+    } catch (SolrServerException e) {\n+      throw new RgaException(\"Error executing KnockoutByIndividual query\", e);\n     }\n-\n-    private void fixGeneOptions(QueryOptions queryOptions, SolrQuery solrQuery) {\n-        if (queryOptions.containsKey(QueryOptions.INCLUDE)) {\n-            for (String include : geneConverter.getIncludeFields(queryOptions.getAsStringList(QueryOptions.INCLUDE))) {\n-                solrQuery.addField(include);\n-            }\n-        } else if (queryOptions.containsKey(QueryOptions.EXCLUDE)) {\n-            for (String include : geneConverter.getIncludeFromExcludeFields(queryOptions.getAsStringList(QueryOptions.EXCLUDE))) {\n-                solrQuery.addField(include);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Return an RgaDataModel iterator given a query.\n-     *\n-     * @param collection   Collection name\n-     * @param query        Query\n-     * @param queryOptions Query options\n-     * @return RgaIterator object.\n-     * @throws RgaException RgaException\n-     */\n-    public RgaIterator variantQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n-        SolrQuery solrQuery = parser.parseQuery(query);\n-        fixVariantOptions(queryOptions, solrQuery);\n-        solrQuery.setRows(Integer.MAX_VALUE);\n-        try {\n-            return new RgaIterator(solrManager.getSolrClient(), collection, solrQuery);\n-        } catch (SolrServerException e) {\n-            throw new RgaException(\"Error executing KnockoutByVariant query\", e);\n-        }\n+  }\n+\n+  private void fixIndividualOptions(QueryOptions queryOptions, SolrQuery solrQuery) {\n+    if (queryOptions.containsKey(QueryOptions.INCLUDE)) {\n+      for (String include : individualRgaConverter.getIncludeFields(queryOptions.getAsStringList(QueryOptions.INCLUDE))) {\n+        solrQuery.addField(include);\n+      }\n+    } else if (queryOptions.containsKey(QueryOptions.EXCLUDE)) {\n+      for (String include : individualRgaConverter.getIncludeFromExcludeFields(queryOptions.getAsStringList(QueryOptions.EXCLUDE))) {\n+        solrQuery.addField(include);\n+      }\n     }\n-\n-\n-    private void fixVariantOptions(QueryOptions queryOptions, SolrQuery solrQuery) {\n-        if (queryOptions.containsKey(QueryOptions.INCLUDE)) {\n-            for (String include : variantConverter.getIncludeFields(queryOptions.getAsStringList(QueryOptions.INCLUDE))) {\n-                solrQuery.addField(include);\n-            }\n-        } else if (queryOptions.containsKey(QueryOptions.EXCLUDE)) {\n-            for (String include : variantConverter.getIncludeFromExcludeFields(queryOptions.getAsStringList(QueryOptions.EXCLUDE))) {\n-                solrQuery.addField(include);\n-            }\n-        }\n-    }\n-\n-    /**\n-     *\n-     * @param collection Collection name\n-     * @param query      Query\n-     * @return Number of results\n-     * @throws RgaException RgaException\n-     * @throws IOException IOException\n-     */\n-    public long count(String collection, Query query) throws RgaException, IOException {\n-        SolrQuery solrQuery = parser.parseQuery(query);\n-        SolrCollection solrCollection = getSolrCollection(collection);\n-\n-        try {\n-            return solrCollection.count(solrQuery).getResults().get(0);\n-        } catch (SolrServerException e) {\n-            throw new RgaException(\"Error executing count for a given query\", e);\n-        }\n+  }\n+\n+  /**\n+   * Return an RgaDataModel iterator given a query.\n+   *\n+   * @param collection   Collection name\n+   * @param query        Query\n+   * @param queryOptions Query options\n+   * @return RgaIterator.\n+   * @throws RgaException RgaException\n+   */\n+  public RgaIterator geneQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n+    SolrQuery solrQuery = parser.parseQuery(query);\n+    fixGeneOptions(queryOptions, solrQuery);\n+    solrQuery.setRows(Integer.MAX_VALUE);\n+    try {\n+      return new RgaIterator(solrManager.getSolrClient(), collection, solrQuery);\n+    } catch (SolrServerException e) {\n+      throw new RgaException(\"Error executing RgaKnockoutByGene query\", e);\n     }\n-\n-    /**\n-     * Return faceted data from the auxiliar RGA Solr core/collection given a query.\n-     *\n-     * @param collection   Collection name\n-     * @param query        Query\n-     * @param queryOptions Query options (contains the facet and facetRange options)\n-     * @return List of KnockoutByIndividual objects\n-     * @throws RgaException RgaException\n-     * @throws IOException IOException\n-     */\n-    public DataResult<FacetField> auxFacetedQuery(String collection, Query query, QueryOptions queryOptions)\n-            throws RgaException, IOException {\n-        SolrQuery solrQuery = parser.parseAuxQuery(query);\n-        return facetedQuery(collection, solrQuery, queryOptions);\n+  }\n+\n+  private void fixGeneOptions(QueryOptions queryOptions, SolrQuery solrQuery) {\n+    if (queryOptions.containsKey(QueryOptions.INCLUDE)) {\n+      for (String include : geneConverter.getIncludeFields(queryOptions.getAsStringList(QueryOptions.INCLUDE))) {\n+        solrQuery.addField(include);\n+      }\n+    } else if (queryOptions.containsKey(QueryOptions.EXCLUDE)) {\n+      for (String include : geneConverter.getIncludeFromExcludeFields(queryOptions.getAsStringList(QueryOptions.EXCLUDE))) {\n+        solrQuery.addField(include);\n+      }\n     }\n-\n-\n-    /**\n-     * Return faceted data from the main RGA Solr core/collection given a query.\n-     *\n-     * @param collection   Collection name\n-     * @param query        Query\n-     * @param queryOptions Query options (contains the facet and facetRange options)\n-     * @return List of KnockoutByIndividual objects\n-     * @throws RgaException RgaException\n-     * @throws IOException IOException\n-     */\n-    public DataResult<FacetField> facetedQuery(String collection, Query query, QueryOptions queryOptions)\n-            throws RgaException, IOException {\n-        SolrQuery solrQuery = parser.parseQuery(query);\n-        return facetedQuery(collection, solrQuery, queryOptions);\n+  }\n+\n+  /**\n+   * Return an RgaDataModel iterator given a query.\n+   *\n+   * @param collection   Collection name\n+   * @param query        Query\n+   * @param queryOptions Query options\n+   * @return RgaIterator object.\n+   * @throws RgaException RgaException\n+   */\n+  public RgaIterator variantQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n+    SolrQuery solrQuery = parser.parseQuery(query);\n+    fixVariantOptions(queryOptions, solrQuery);\n+    solrQuery.setRows(Integer.MAX_VALUE);\n+    try {\n+      return new RgaIterator(solrManager.getSolrClient(), collection, solrQuery);\n+    } catch (SolrServerException e) {\n+      throw new RgaException(\"Error executing KnockoutByVariant query\", e);\n     }\n-\n-    /**\n-     * Return faceted data from a Solr core/collection given a query.\n-     *\n-     * @param collection   Collection name\n-     * @param solrQuery    SolrQuery object.\n-     * @param queryOptions Query options (contains the facet and facetRange options)\n-     * @return List of KnockoutByIndividual objects\n-     * @throws RgaException RgaException\n-     * @throws IOException IOException\n-     */\n-    private DataResult<FacetField> facetedQuery(String collection, SolrQuery solrQuery, QueryOptions queryOptions) throws IOException {\n-        StopWatch stopWatch = StopWatch.createStarted();\n-\n-        if (queryOptions.containsKey(QueryOptions.FACET)\n-                && org.apache.commons.lang3.StringUtils.isNotEmpty(queryOptions.getString(QueryOptions.FACET))) {\n-            try {\n-                FacetQueryParser facetQueryParser = new FacetQueryParser();\n-\n-                String facetQuery = parser.parseFacet(queryOptions.getString(QueryOptions.FACET));\n-                String jsonFacet = facetQueryParser.parse(facetQuery, queryOptions);\n-\n-                solrQuery.set(\"json.facet\", jsonFacet);\n-                solrQuery.setRows(0);\n-                solrQuery.setStart(0);\n-                solrQuery.setFields();\n-\n-                logger.debug(\">>>>>> Solr Facet: \" + solrQuery.toString());\n-            } catch (Exception e) {\n-                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr parse exception: \" + e.getMessage(), e);\n-            }\n-        }\n-\n-        SolrCollection solrCollection = getSolrCollection(collection);\n-        DataResult<FacetField> facetResult;\n-        try {\n-            facetResult = solrCollection.facet(solrQuery, null);\n-        } catch (SolrServerException e) {\n-            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n-        }\n-        logger.info(\"Facet '{}': {} milliseconds\", solrQuery.toString(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n-\n-        return facetResult;\n+  }\n+\n+\n+  private void fixVariantOptions(QueryOptions queryOptions, SolrQuery solrQuery) {\n+    if (queryOptions.containsKey(QueryOptions.INCLUDE)) {\n+      for (String include : variantConverter.getIncludeFields(queryOptions.getAsStringList(QueryOptions.INCLUDE))) {\n+        solrQuery.addField(include);\n+      }\n+    } else if (queryOptions.containsKey(QueryOptions.EXCLUDE)) {\n+      for (String include : variantConverter.getIncludeFromExcludeFields(queryOptions.getAsStringList(QueryOptions.EXCLUDE))) {\n+        solrQuery.addField(include);\n+      }\n     }\n-\n-    @Override\n-    public void close() throws IOException {\n-        solrManager.close();\n+  }\n+\n+  /**\n+   * @param collection Collection name\n+   * @param query      Query\n+   * @return Number of results\n+   * @throws RgaException RgaException\n+   * @throws IOException  IOException\n+   */\n+  public long count(String collection, Query query) throws RgaException, IOException {\n+    SolrQuery solrQuery = parser.parseQuery(query);\n+    SolrCollection solrCollection = getSolrCollection(collection);\n+\n+    try {\n+      return solrCollection.count(solrQuery).getResults().get(0);\n+    } catch (SolrServerException e) {\n+      throw new RgaException(\"Error executing count for a given query\", e);\n     }\n-\n-    public SolrManager getSolrManager() {\n-        return solrManager;\n+  }\n+\n+  /**\n+   * Return faceted data from the auxiliar RGA Solr core/collection given a query.\n+   *\n+   * @param collection   Collection name\n+   * @param query        Query\n+   * @param queryOptions Query options (contains the facet and facetRange options)\n+   * @return List of KnockoutByIndividual objects\n+   * @throws RgaException RgaException\n+   * @throws IOException  IOException\n+   */\n+  public DataResult<FacetField> auxFacetedQuery(String collection, Query query, QueryOptions queryOptions)\n+      throws RgaException, IOException {\n+    SolrQuery solrQuery = parser.parseAuxQuery(query);\n+    return facetedQuery(collection, solrQuery, queryOptions);\n+  }\n+\n+\n+  /**\n+   * Return faceted data from the main RGA Solr core/collection given a query.\n+   *\n+   * @param collection   Collection name\n+   * @param query        Query\n+   * @param queryOptions Query options (contains the facet and facetRange options)\n+   * @return List of KnockoutByIndividual objects\n+   * @throws RgaException RgaException\n+   * @throws IOException  IOException\n+   */\n+  public DataResult<FacetField> facetedQuery(String collection, Query query, QueryOptions queryOptions)\n+      throws RgaException, IOException {\n+    SolrQuery solrQuery = parser.parseQuery(query);\n+    return facetedQuery(collection, solrQuery, queryOptions);\n+  }\n+\n+  /**\n+   * Return faceted data from a Solr core/collection given a query.\n+   *\n+   * @param collection   Collection name\n+   * @param solrQuery    SolrQuery object.\n+   * @param queryOptions Query options (contains the facet and facetRange options)\n+   * @return List of KnockoutByIndividual objects\n+   * @throws RgaException RgaException\n+   * @throws IOException  IOException\n+   */\n+  private DataResult<FacetField> facetedQuery(String collection, SolrQuery solrQuery, QueryOptions queryOptions) throws IOException {\n+    StopWatch stopWatch = StopWatch.createStarted();\n+\n+    if (queryOptions.containsKey(QueryOptions.FACET)\n+        && org.apache.commons.lang3.StringUtils.isNotEmpty(queryOptions.getString(QueryOptions.FACET))) {\n+      try {\n+        FacetQueryParser facetQueryParser = new FacetQueryParser();\n+\n+        String facetQuery = parser.parseFacet(queryOptions.getString(QueryOptions.FACET));\n+        String jsonFacet = facetQueryParser.parse(facetQuery, queryOptions);\n+\n+        solrQuery.set(\"json.facet\", jsonFacet);\n+        solrQuery.setRows(0);\n+        solrQuery.setStart(0);\n+        solrQuery.setFields();\n+\n+        logger.debug(\">>>>>> Solr Facet: \" + solrQuery.toString());\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr parse exception: \" + e.getMessage(), e);\n+      }\n     }\n \n-    public RgaEngine setSolrManager(SolrManager solrManager) {\n-        this.solrManager = solrManager;\n-        return this;\n+    SolrCollection solrCollection = getSolrCollection(collection);\n+    DataResult<FacetField> facetResult;\n+    try {\n+      facetResult = solrCollection.facet(solrQuery, null);\n+    } catch (SolrServerException e) {\n+      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n     }\n-\n-    private SolrCollection getSolrCollection(String collection) {\n-        if (solrCollectionMap.containsKey(collection)) {\n-            return solrCollectionMap.get(collection);\n-        } else {\n-            SolrCollection solrCollection = solrManager.getCollection(collection);\n-            solrCollectionMap.put(collection, solrCollection);\n-            return solrCollection;\n-        }\n+    logger.info(\"Facet '{}': {} milliseconds\", solrQuery.toString(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n+\n+    return facetResult;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    solrManager.close();\n+  }\n+\n+  public SolrManager getSolrManager() {\n+    return solrManager;\n+  }\n+\n+  public RgaEngine setSolrManager(SolrManager solrManager) {\n+    this.solrManager = solrManager;\n+    return this;\n+  }\n+\n+  private SolrCollection getSolrCollection(String collection) {\n+    if (solrCollectionMap.containsKey(collection)) {\n+      return solrCollectionMap.get(collection);\n+    } else {\n+      SolrCollection solrCollection = solrManager.getCollection(collection);\n+      solrCollectionMap.put(collection, solrCollection);\n+      return solrCollection;\n     }\n+  }\n }\n",
            "diff_size": 419
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/140/RgaEngine.java\nindex 91051170175..d348d46cd0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/140/RgaEngine.java\n@@ -135,7 +135,7 @@ public class RgaEngine implements Closeable {\n      * @return RgaIterator.\n      * @throws RgaException RgaException\n      */\n-    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException{\n+    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n         SolrQuery solrQuery = parser.parseQuery(query);\n         fixIndividualOptions(queryOptions, solrQuery);\n //        solrQuery.setRows(Integer.MAX_VALUE);\n@@ -343,4 +343,4 @@ public class RgaEngine implements Closeable {\n             return solrCollection;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/140/RgaEngine.java\nindex 91051170175..18b34faa396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/140/RgaEngine.java\n@@ -135,7 +135,7 @@ public class RgaEngine implements Closeable {\n      * @return RgaIterator.\n      * @throws RgaException RgaException\n      */\n-    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException{\n+    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n         SolrQuery solrQuery = parser.parseQuery(query);\n         fixIndividualOptions(queryOptions, solrQuery);\n //        solrQuery.setRows(Integer.MAX_VALUE);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/140/RgaEngine.java\nindex 91051170175..18b34faa396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/140/RgaEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/140/RgaEngine.java\n@@ -135,7 +135,7 @@ public class RgaEngine implements Closeable {\n      * @return RgaIterator.\n      * @throws RgaException RgaException\n      */\n-    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException{\n+    public RgaIterator individualQuery(String collection, Query query, QueryOptions queryOptions) throws RgaException {\n         SolrQuery solrQuery = parser.parseQuery(query);\n         fixIndividualOptions(queryOptions, solrQuery);\n //        solrQuery.setRows(Integer.MAX_VALUE);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}