{
    "project_name": "GluuFederation-oxCore",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " */\npublic class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n\t/**\n\t * <p>\n\t * /faces-config/navigation-rule\n\t * </p>",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/66/FacesConfigPopulator.java\nindex 04b4a38fe1d..c5e5c0fef61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/66/FacesConfigPopulator.java\n@@ -26,7 +26,7 @@ import com.sun.faces.util.FacesLogger;\n  * Created by eugeniuparvan on 5/1/17.\n  */\n public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n-\t/**\n+/**\n \t * <p>\n \t * /faces-config/navigation-rule\n \t * </p>\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/66/FacesConfigPopulator.java\nindex 04b4a38fe1d..58152eaa7e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/66/FacesConfigPopulator.java\n@@ -26,96 +26,96 @@ import com.sun.faces.util.FacesLogger;\n  * Created by eugeniuparvan on 5/1/17.\n  */\n public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n-\t/**\n-\t * <p>\n-\t * /faces-config/navigation-rule\n-\t * </p>\n-\t */\n-\tprivate static final String NAVIGATION_RULE = \"navigation-rule\";\n-\tprivate static final String FACES_CONFIG_PATTERN = \".*\\\\.navigation\\\\.xml$\";\n-\tprivate static final String DEFAULT_NAVIGATION_PATH = \"META-INF/navigation\";\n-\n-\tprivate Logger log = LoggerFactory.getLogger(FacesConfigPopulator.class);\n-\n-\t@Override\n-\tpublic void populateApplicationConfiguration(Document toPopulate) {\n-\t\tpopulateNavigationRules(toPopulate);\n-\t}\n-\n-\t// Navigation Rules\n-\tprotected void populateNavigationRules(Document toPopulate) {\n-\t\tlog.debug(\"Starting configuration populator\");\n-\n-\t\tif (Utils.isCustomPagesDirExists()) {\n-\t\t\tString customPath = Utils.getCustomPagesPath();\n-\t\t\tlog.debug(\"Adding navigation rules from custom dir folder: {}\", customPath);\n-\t\t\ttry {\n-\t\t\t\tfindAndUpdateNavigationRules(toPopulate, customPath);\n-\t\t\t} catch (Exception ex) {\n-\t\t\t\tFacesLogger.CONFIG.getLogger().log(Level.SEVERE, \"Can't add customized navigation rules\");\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tlog.debug(\"Adding navigation rules from application resurces\");\n-\t\t\tEnumeration<URL> urlEnumeration = getClass().getClassLoader().getResources(DEFAULT_NAVIGATION_PATH);\n-\t\t\tif (urlEnumeration.hasMoreElements()) {\n-\t\t\t\tURL url = urlEnumeration.nextElement();\n-\t\t\t\tfindAndUpdateNavigationRules(toPopulate, url.getPath());\n-\t\t\t}\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to populate application configuraton\", ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Recursively finds all *.navigation.xml files located in custom pages\n-\t * directory, and adds navigation rules to navigation handler\n-\t *\n-\t * @param path to custom pages directory\n-\t * @throws Exception\n-\t */\n-\tprivate void findAndUpdateNavigationRules(Document toPopulate, String path) throws Exception {\n-\t\tFile file = new File(path);\n-\t\tRegexFileFilter regexFileFilter = new RegexFileFilter(FACES_CONFIG_PATTERN);\n-\t\tCollection<File> facesConfigFiles = FileUtils.listFiles(file, regexFileFilter, DirectoryFileFilter.DIRECTORY);\n-\t\tlog.debug(\"Found '{}' navigation rules files\", facesConfigFiles.size());\n-\n-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-\t\tfactory.setNamespaceAware(true);\n-\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n-\n-\t\tfor (File files : facesConfigFiles) {\n-\t\t\tString faceConfig = files.getAbsolutePath();\n-\t\t\tupdateDocument(toPopulate, builder, faceConfig);\n-\t\t\tlog.debug(\"Added navigation rules from {}\", faceConfig);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Validates *.faces-config.xml file and creates DocumentInfo class\n-\t *\n-\t * @param docBuilder\n-\t * @param faceConfig\n-\t * @return\n-\t */\n-\tprivate void updateDocument(Document toPopulate, DocumentBuilder docBuilder, String faceConfig) {\n-\t\ttry {\n-\t\t\tDocument document = docBuilder.parse(new File(faceConfig));\n-\t\t\tElement root = toPopulate.getDocumentElement();\n-\t\t\tNodeList navigationRules = getNavigationRules(document);\n-\t\t\tfor (int i = 0; i < navigationRules.getLength(); ++i) {\n-\t\t\t\tNode importedNode = toPopulate.importNode(navigationRules.item(i), true);\n-\t\t\t\troot.appendChild(importedNode);\n-\t\t\t}\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to update navigation rules\", ex);\n-\t\t}\n-\t}\n-\n-\tprivate NodeList getNavigationRules(Document document) {\n-\t\tString namespace = document.getDocumentElement().getNamespaceURI();\n-\t\treturn document.getDocumentElement().getElementsByTagNameNS(namespace, NAVIGATION_RULE);\n-\t}\n+    /**\n+     * <p>\n+     * /faces-config/navigation-rule\n+     * </p>\n+     */\n+    private static final String NAVIGATION_RULE = \"navigation-rule\";\n+    private static final String FACES_CONFIG_PATTERN = \".*\\\\.navigation\\\\.xml$\";\n+    private static final String DEFAULT_NAVIGATION_PATH = \"META-INF/navigation\";\n+\n+    private Logger log = LoggerFactory.getLogger(FacesConfigPopulator.class);\n+\n+    @Override\n+    public void populateApplicationConfiguration(Document toPopulate) {\n+        populateNavigationRules(toPopulate);\n+    }\n+\n+    // Navigation Rules\n+    protected void populateNavigationRules(Document toPopulate) {\n+        log.debug(\"Starting configuration populator\");\n+\n+        if (Utils.isCustomPagesDirExists()) {\n+            String customPath = Utils.getCustomPagesPath();\n+            log.debug(\"Adding navigation rules from custom dir folder: {}\", customPath);\n+            try {\n+                findAndUpdateNavigationRules(toPopulate, customPath);\n+            } catch (Exception ex) {\n+                FacesLogger.CONFIG.getLogger().log(Level.SEVERE, \"Can't add customized navigation rules\");\n+            }\n+        }\n+\n+        try {\n+            log.debug(\"Adding navigation rules from application resurces\");\n+            Enumeration<URL> urlEnumeration = getClass().getClassLoader().getResources(DEFAULT_NAVIGATION_PATH);\n+            if (urlEnumeration.hasMoreElements()) {\n+                URL url = urlEnumeration.nextElement();\n+                findAndUpdateNavigationRules(toPopulate, url.getPath());\n+            }\n+        } catch (Exception ex) {\n+            log.error(\"Failed to populate application configuraton\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Recursively finds all *.navigation.xml files located in custom pages\n+     * directory, and adds navigation rules to navigation handler\n+     *\n+     * @param path to custom pages directory\n+     * @throws Exception\n+     */\n+    private void findAndUpdateNavigationRules(Document toPopulate, String path) throws Exception {\n+        File file = new File(path);\n+        RegexFileFilter regexFileFilter = new RegexFileFilter(FACES_CONFIG_PATTERN);\n+        Collection<File> facesConfigFiles = FileUtils.listFiles(file, regexFileFilter, DirectoryFileFilter.DIRECTORY);\n+        log.debug(\"Found '{}' navigation rules files\", facesConfigFiles.size());\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+        DocumentBuilder builder = factory.newDocumentBuilder();\n+\n+        for (File files : facesConfigFiles) {\n+            String faceConfig = files.getAbsolutePath();\n+            updateDocument(toPopulate, builder, faceConfig);\n+            log.debug(\"Added navigation rules from {}\", faceConfig);\n+        }\n+    }\n+\n+    /**\n+     * Validates *.faces-config.xml file and creates DocumentInfo class\n+     *\n+     * @param docBuilder\n+     * @param faceConfig\n+     * @return\n+     */\n+    private void updateDocument(Document toPopulate, DocumentBuilder docBuilder, String faceConfig) {\n+        try {\n+            Document document = docBuilder.parse(new File(faceConfig));\n+            Element root = toPopulate.getDocumentElement();\n+            NodeList navigationRules = getNavigationRules(document);\n+            for (int i = 0; i < navigationRules.getLength(); ++i) {\n+                Node importedNode = toPopulate.importNode(navigationRules.item(i), true);\n+                root.appendChild(importedNode);\n+            }\n+        } catch (Exception ex) {\n+            log.error(\"Failed to update navigation rules\", ex);\n+        }\n+    }\n+\n+    private NodeList getNavigationRules(Document document) {\n+        String namespace = document.getDocumentElement().getNamespaceURI();\n+        return document.getDocumentElement().getElementsByTagNameNS(namespace, NAVIGATION_RULE);\n+    }\n \n }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/66/FacesConfigPopulator.java\nindex 04b4a38fe1d..9ff0e591d2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/66/FacesConfigPopulator.java\n@@ -26,7 +26,8 @@ import com.sun.faces.util.FacesLogger;\n  * Created by eugeniuparvan on 5/1/17.\n  */\n public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n-\t/**\n+\n+    /**\n \t * <p>\n \t * /faces-config/navigation-rule\n \t * </p>\n@@ -39,34 +40,34 @@ public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n \n \t@Override\n \tpublic void populateApplicationConfiguration(Document toPopulate) {\n-\t\tpopulateNavigationRules(toPopulate);\n-\t}\n+    populateNavigationRules(toPopulate);\n+    }\n \n \t// Navigation Rules\n \tprotected void populateNavigationRules(Document toPopulate) {\n-\t\tlog.debug(\"Starting configuration populator\");\n+    log.debug(\"Starting configuration populator\");\n \n \t\tif (Utils.isCustomPagesDirExists()) {\n-\t\t\tString customPath = Utils.getCustomPagesPath();\n+    String customPath = Utils.getCustomPagesPath();\n \t\t\tlog.debug(\"Adding navigation rules from custom dir folder: {}\", customPath);\n \t\t\ttry {\n-\t\t\t\tfindAndUpdateNavigationRules(toPopulate, customPath);\n-\t\t\t} catch (Exception ex) {\n-\t\t\t\tFacesLogger.CONFIG.getLogger().log(Level.SEVERE, \"Can't add customized navigation rules\");\n-\t\t\t}\n-\t\t}\n+    findAndUpdateNavigationRules(toPopulate, customPath);\n+    } catch (Exception ex) {\n+    FacesLogger.CONFIG.getLogger().log(Level.SEVERE, \"Can't add customized navigation rules\");\n+    }\n+    }\n \n \t\ttry {\n-\t\t\tlog.debug(\"Adding navigation rules from application resurces\");\n+    log.debug(\"Adding navigation rules from application resurces\");\n \t\t\tEnumeration<URL> urlEnumeration = getClass().getClassLoader().getResources(DEFAULT_NAVIGATION_PATH);\n \t\t\tif (urlEnumeration.hasMoreElements()) {\n-\t\t\t\tURL url = urlEnumeration.nextElement();\n+    URL url = urlEnumeration.nextElement();\n \t\t\t\tfindAndUpdateNavigationRules(toPopulate, url.getPath());\n-\t\t\t}\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to populate application configuraton\", ex);\n-\t\t}\n-\t}\n+    }\n+    } catch (Exception ex) {\n+    log.error(\"Failed to populate application configuraton\", ex);\n+    }\n+    }\n \n \t/**\n \t * Recursively finds all *.navigation.xml files located in custom pages\n@@ -76,7 +77,7 @@ public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n \t * @throws Exception\n \t */\n \tprivate void findAndUpdateNavigationRules(Document toPopulate, String path) throws Exception {\n-\t\tFile file = new File(path);\n+    File file = new File(path);\n \t\tRegexFileFilter regexFileFilter = new RegexFileFilter(FACES_CONFIG_PATTERN);\n \t\tCollection<File> facesConfigFiles = FileUtils.listFiles(file, regexFileFilter, DirectoryFileFilter.DIRECTORY);\n \t\tlog.debug(\"Found '{}' navigation rules files\", facesConfigFiles.size());\n@@ -86,11 +87,11 @@ public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n \t\tDocumentBuilder builder = factory.newDocumentBuilder();\n \n \t\tfor (File files : facesConfigFiles) {\n-\t\t\tString faceConfig = files.getAbsolutePath();\n+    String faceConfig = files.getAbsolutePath();\n \t\t\tupdateDocument(toPopulate, builder, faceConfig);\n \t\t\tlog.debug(\"Added navigation rules from {}\", faceConfig);\n-\t\t}\n-\t}\n+    }\n+    }\n \n \t/**\n \t * Validates *.faces-config.xml file and creates DocumentInfo class\n@@ -100,22 +101,22 @@ public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n \t * @return\n \t */\n \tprivate void updateDocument(Document toPopulate, DocumentBuilder docBuilder, String faceConfig) {\n-\t\ttry {\n-\t\t\tDocument document = docBuilder.parse(new File(faceConfig));\n+    try {\n+    Document document = docBuilder.parse(new File(faceConfig));\n \t\t\tElement root = toPopulate.getDocumentElement();\n \t\t\tNodeList navigationRules = getNavigationRules(document);\n \t\t\tfor (int i = 0; i < navigationRules.getLength(); ++i) {\n-\t\t\t\tNode importedNode = toPopulate.importNode(navigationRules.item(i), true);\n+    Node importedNode = toPopulate.importNode(navigationRules.item(i), true);\n \t\t\t\troot.appendChild(importedNode);\n-\t\t\t}\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to update navigation rules\", ex);\n-\t\t}\n-\t}\n+    }\n+    } catch (Exception ex) {\n+    log.error(\"Failed to update navigation rules\", ex);\n+    }\n+    }\n \n \tprivate NodeList getNavigationRules(Document document) {\n-\t\tString namespace = document.getDocumentElement().getNamespaceURI();\n+    String namespace = document.getDocumentElement().getNamespaceURI();\n \t\treturn document.getDocumentElement().getElementsByTagNameNS(namespace, NAVIGATION_RULE);\n-\t}\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/66/FacesConfigPopulator.java\nindex 04b4a38fe1d..d5040ee8285 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/66/FacesConfigPopulator.java\n@@ -5,11 +5,9 @@ import java.net.URL;\n import java.util.Collection;\n import java.util.Enumeration;\n import java.util.logging.Level;\n-\n import javax.faces.application.ApplicationConfigurationPopulator;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n import org.apache.commons.io.filefilter.RegexFileFilter;\n@@ -19,103 +17,108 @@ import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-\n import com.sun.faces.util.FacesLogger;\n \n /**\n  * Created by eugeniuparvan on 5/1/17.\n  */\n+\n+\n public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n-\t/**\n-\t * <p>\n-\t * /faces-config/navigation-rule\n-\t * </p>\n-\t */\n-\tprivate static final String NAVIGATION_RULE = \"navigation-rule\";\n-\tprivate static final String FACES_CONFIG_PATTERN = \".*\\\\.navigation\\\\.xml$\";\n-\tprivate static final String DEFAULT_NAVIGATION_PATH = \"META-INF/navigation\";\n-\n-\tprivate Logger log = LoggerFactory.getLogger(FacesConfigPopulator.class);\n-\n-\t@Override\n-\tpublic void populateApplicationConfiguration(Document toPopulate) {\n-\t\tpopulateNavigationRules(toPopulate);\n-\t}\n-\n-\t// Navigation Rules\n-\tprotected void populateNavigationRules(Document toPopulate) {\n-\t\tlog.debug(\"Starting configuration populator\");\n-\n-\t\tif (Utils.isCustomPagesDirExists()) {\n-\t\t\tString customPath = Utils.getCustomPagesPath();\n-\t\t\tlog.debug(\"Adding navigation rules from custom dir folder: {}\", customPath);\n-\t\t\ttry {\n-\t\t\t\tfindAndUpdateNavigationRules(toPopulate, customPath);\n-\t\t\t} catch (Exception ex) {\n-\t\t\t\tFacesLogger.CONFIG.getLogger().log(Level.SEVERE, \"Can't add customized navigation rules\");\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tlog.debug(\"Adding navigation rules from application resurces\");\n-\t\t\tEnumeration<URL> urlEnumeration = getClass().getClassLoader().getResources(DEFAULT_NAVIGATION_PATH);\n-\t\t\tif (urlEnumeration.hasMoreElements()) {\n-\t\t\t\tURL url = urlEnumeration.nextElement();\n-\t\t\t\tfindAndUpdateNavigationRules(toPopulate, url.getPath());\n-\t\t\t}\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to populate application configuraton\", ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Recursively finds all *.navigation.xml files located in custom pages\n-\t * directory, and adds navigation rules to navigation handler\n-\t *\n-\t * @param path to custom pages directory\n-\t * @throws Exception\n-\t */\n-\tprivate void findAndUpdateNavigationRules(Document toPopulate, String path) throws Exception {\n-\t\tFile file = new File(path);\n-\t\tRegexFileFilter regexFileFilter = new RegexFileFilter(FACES_CONFIG_PATTERN);\n-\t\tCollection<File> facesConfigFiles = FileUtils.listFiles(file, regexFileFilter, DirectoryFileFilter.DIRECTORY);\n-\t\tlog.debug(\"Found '{}' navigation rules files\", facesConfigFiles.size());\n-\n-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-\t\tfactory.setNamespaceAware(true);\n-\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n-\n-\t\tfor (File files : facesConfigFiles) {\n-\t\t\tString faceConfig = files.getAbsolutePath();\n-\t\t\tupdateDocument(toPopulate, builder, faceConfig);\n-\t\t\tlog.debug(\"Added navigation rules from {}\", faceConfig);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Validates *.faces-config.xml file and creates DocumentInfo class\n-\t *\n-\t * @param docBuilder\n-\t * @param faceConfig\n-\t * @return\n-\t */\n-\tprivate void updateDocument(Document toPopulate, DocumentBuilder docBuilder, String faceConfig) {\n-\t\ttry {\n-\t\t\tDocument document = docBuilder.parse(new File(faceConfig));\n-\t\t\tElement root = toPopulate.getDocumentElement();\n-\t\t\tNodeList navigationRules = getNavigationRules(document);\n-\t\t\tfor (int i = 0; i < navigationRules.getLength(); ++i) {\n-\t\t\t\tNode importedNode = toPopulate.importNode(navigationRules.item(i), true);\n-\t\t\t\troot.appendChild(importedNode);\n-\t\t\t}\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to update navigation rules\", ex);\n-\t\t}\n-\t}\n-\n-\tprivate NodeList getNavigationRules(Document document) {\n-\t\tString namespace = document.getDocumentElement().getNamespaceURI();\n-\t\treturn document.getDocumentElement().getElementsByTagNameNS(namespace, NAVIGATION_RULE);\n-\t}\n-\n-}\n+    /**\n+     * <p>\n+     * /faces-config/navigation-rule\n+     * </p>\n+     */\n+\n+    private static final String NAVIGATION_RULE = \"navigation-rule\";\n+    private static final String FACES_CONFIG_PATTERN = \".*\\\\.navigation\\\\.xml$\";\n+    private static final String DEFAULT_NAVIGATION_PATH = \"META-INF/navigation\";\n+    private Logger log = LoggerFactory.getLogger(FacesConfigPopulator.class);\n+\n+    @Override\n+    public void populateApplicationConfiguration(Document toPopulate) {\n+        populateNavigationRules(toPopulate);\n+    }\n+\n+    // Navigation Rules\n+\n+    protected void populateNavigationRules(Document toPopulate) {\n+        log.debug(\"Starting configuration populator\");\n+        if (Utils.isCustomPagesDirExists()) {\n+            String customPath = Utils.getCustomPagesPath();\n+            log.debug(\"Adding navigation rules from custom dir folder: {}\", customPath);\n+            try {\n+                findAndUpdateNavigationRules(toPopulate, customPath);\n+            } catch (Exception ex) {\n+                FacesLogger.CONFIG.getLogger().log(Level.SEVERE, \"Can't add customized navigation rules\");\n+            }\n+        }\n+\n+        try {\n+            log.debug(\"Adding navigation rules from application resurces\");\n+\n+            Enumeration<URL> urlEnumeration = getClass().getClassLoader().getResources(DEFAULT_NAVIGATION_PATH);\n+            if (urlEnumeration.hasMoreElements()) {\n+                URL url = urlEnumeration.nextElement();\n+                findAndUpdateNavigationRules(toPopulate, url.getPath());\n+            }\n+        } catch (Exception ex) {\n+            log.error(\"Failed to populate application configuraton\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Recursively finds all *.navigation.xml files located in custom pages\n+     * directory, and adds navigation rules to navigation handler\n+     *\n+     * @param path to custom pages directory\n+     * @throws Exception\n+     */\n+\n+    private void findAndUpdateNavigationRules(Document toPopulate, String path) throws Exception {\n+        File file = new File(path);\n+        RegexFileFilter regexFileFilter = new RegexFileFilter(FACES_CONFIG_PATTERN);\n+        Collection<File> facesConfigFiles = FileUtils.listFiles(file, regexFileFilter, DirectoryFileFilter.DIRECTORY);\n+        log.debug(\"Found '{}' navigation rules files\", facesConfigFiles.size());\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        DocumentBuilder builder = factory.newDocumentBuilder();\n+        for (File files : facesConfigFiles) {\n+            String faceConfig = files.getAbsolutePath();\n+            updateDocument(toPopulate, builder, faceConfig);\n+            log.debug(\"Added navigation rules from {}\", faceConfig);\n+        }\n+    }\n+\n+    /**\n+     * Validates *.faces-config.xml file and creates DocumentInfo class\n+     *\n+     * @param docBuilder\n+     * @param faceConfig\n+     * @return\n+     */\n+\n+    private void updateDocument(Document toPopulate, DocumentBuilder docBuilder, String faceConfig) {\n+        try {\n+            Document document = docBuilder.parse(new File(faceConfig));\n+            Element root = toPopulate.getDocumentElement();\n+            NodeList navigationRules = getNavigationRules(document);\n+            for (int i = 0; i < navigationRules.getLength(); ++i) {\n+                Node importedNode = toPopulate.importNode(navigationRules.item(i), true);\n+                root.appendChild(importedNode);\n+            }\n+        } catch (Exception ex) {\n+            log.error(\"Failed to update navigation rules\", ex);\n+        }\n+    }\n+\n+    private NodeList getNavigationRules(Document document) {\n+        String namespace = document.getDocumentElement().getNamespaceURI();\n+\n+        return document.getDocumentElement().getElementsByTagNameNS(namespace, NAVIGATION_RULE);\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 102
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/66/FacesConfigPopulator.java\nindex 04b4a38fe1d..c5e5c0fef61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/66/FacesConfigPopulator.java\n@@ -26,7 +26,7 @@ import com.sun.faces.util.FacesLogger;\n  * Created by eugeniuparvan on 5/1/17.\n  */\n public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n-\t/**\n+/**\n \t * <p>\n \t * /faces-config/navigation-rule\n \t * </p>\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/66/FacesConfigPopulator.java\nindex 04b4a38fe1d..136b8412cf3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/66/FacesConfigPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/66/FacesConfigPopulator.java\n@@ -26,12 +26,12 @@ import com.sun.faces.util.FacesLogger;\n  * Created by eugeniuparvan on 5/1/17.\n  */\n public class FacesConfigPopulator extends ApplicationConfigurationPopulator {\n-\t/**\n+    /**\n \t * <p>\n \t * /faces-config/navigation-rule\n \t * </p>\n \t */\n-\tprivate static final String NAVIGATION_RULE = \"navigation-rule\";\n+ private static final String NAVIGATION_RULE = \"navigation-rule\";\n \tprivate static final String FACES_CONFIG_PATTERN = \".*\\\\.navigation\\\\.xml$\";\n \tprivate static final String DEFAULT_NAVIGATION_PATH = \"META-INF/navigation\";\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}