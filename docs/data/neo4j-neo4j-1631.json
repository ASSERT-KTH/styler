{
    "project_name": "neo4j-neo4j",
    "error_id": "1631",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "115",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "221",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "234",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1631/DiagnosticsReportCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1631/DiagnosticsReportCommand.java\nindex 8ec0894c3bc..6139d97e9db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1631/DiagnosticsReportCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1631/DiagnosticsReportCommand.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.commandline.dbms;\n \n import org.jutils.jprocesses.JProcesses;\n@@ -58,255 +59,251 @@ import static picocli.CommandLine.Option;\n import static picocli.CommandLine.Parameters;\n \n @Command(\n-        name = \"report\",\n-        header = \"Produces a zip/tar of the most common information needed for remote assessments.\",\n-        description = \"Will collect information about the system and package everything in an archive. If you specify 'all', \" +\n-                \"everything will be included. You can also fine tune the selection by passing classifiers to the tool, \" +\n-                \"e.g 'logs tx threads'.\"\n+  name = \"report\",\n+  header = \"Produces a zip/tar of the most common information needed for remote assessments.\",\n+  description = \"Will collect information about the system and package everything in an archive. If you specify 'all', \" +\n+    \"everything will be included. You can also fine tune the selection by passing classifiers to the tool, \" +\n+    \"e.g 'logs tx threads'.\"\n )\n public class DiagnosticsReportCommand extends AbstractCommand\n {\n     static final String[] DEFAULT_CLASSIFIERS = {\"logs\", \"config\", \"plugins\", \"tree\", \"metrics\", \"threads\", \"sysprop\", \"ps\", \"version\"};\n-    private static final DateTimeFormatter filenameDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd_HHmmss\" );\n+    private static final DateTimeFormatter filenameDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd_HHmmss\");\n     private static final long NO_PID = 0;\n \n-    @Option( names = \"--list\", arity = \"0\", description = \"List all available classifiers\" )\n+    @Option(names = \"--list\", arity = \"0\", description = \"List all available classifiers\")\n     private boolean list;\n \n-    @Option( names = \"--force\", arity = \"0\", description = \"Ignore disk full warning\" )\n+    @Option(names = \"--force\", arity = \"0\", description = \"Ignore disk full warning\")\n     private boolean force;\n \n-    @Option( names = \"--to\", paramLabel = \"<path>\", description = \"Destination directory for reports. Defaults to a system tmp directory.\" )\n+    @Option(names = \"--to\", paramLabel = \"<path>\", description = \"Destination directory for reports. Defaults to a system tmp directory.\")\n     private Path reportDir;\n \n-    @Option( names = \"--pid\", description = \"Specify process id of running neo4j instance\", showDefaultValue = NEVER )\n+    @Option(names = \"--pid\", description = \"Specify process id of running neo4j instance\", showDefaultValue = NEVER)\n     private long pid;\n \n-    @Parameters( arity = \"0..*\", paramLabel = \"<classifier>\" )\n-    private Set<String> classifiers = new TreeSet<>( List.of( DEFAULT_CLASSIFIERS ) );\n+    @Parameters(arity = \"0..*\", paramLabel = \"<classifier>\")\n+    private Set<String> classifiers = new TreeSet<>(List.of(DEFAULT_CLASSIFIERS));\n \n     private JMXDumper jmxDumper;\n \n-    DiagnosticsReportCommand( ExecutionContext ctx )\n+    DiagnosticsReportCommand(ExecutionContext ctx)\n     {\n-        super( ctx );\n+        super(ctx);\n     }\n \n     @Override\n     public void execute()\n     {\n-        jmxDumper = new JMXDumper( ctx.homeDir(), ctx.fs(), ctx.out(), ctx.err(), verbose );\n+        jmxDumper = new JMXDumper(ctx.homeDir(), ctx.fs(), ctx.out(), ctx.err(), verbose);\n         DiagnosticsReporter reporter = createAndRegisterSources();\n \n-        if ( list )\n+        if (list)\n         {\n-            listClassifiers( reporter.getAvailableClassifiers() );\n+            listClassifiers(reporter.getAvailableClassifiers());\n             return;\n         }\n \n-        validateClassifiers( reporter );\n+        validateClassifiers(reporter);\n \n         DiagnosticsReporterProgress progress = buildProgress();\n \n         // Start dumping\n         try\n         {\n-            if ( reportDir == null )\n+            if (reportDir == null)\n             {\n-                 reportDir = Path.of( System.getProperty( \"java.io.tmpdir\" ) ).resolve( \"reports\" ).toAbsolutePath();\n+                reportDir = Path.of(System.getProperty(\"java.io.tmpdir\")).resolve(\"reports\").toAbsolutePath();\n             }\n-            Path reportFile = reportDir.resolve( getDefaultFilename() );\n-            ctx.out().println( \"Writing report to \" + reportFile.toAbsolutePath() );\n-            reporter.dump( classifiers, reportFile, progress, force );\n-        }\n-        catch ( IOException e )\n+            Path reportFile = reportDir.resolve(getDefaultFilename());\n+            ctx.out().println(\"Writing report to \" + reportFile.toAbsolutePath());\n+            reporter.dump(classifiers, reportFile, progress, force);\n+        } catch (IOException e)\n         {\n-            throw new CommandFailedException( \"Creating archive failed\", e );\n+            throw new CommandFailedException(\"Creating archive failed\", e);\n         }\n     }\n \n     private static String getDefaultFilename() throws UnknownHostException\n     {\n         String hostName = InetAddress.getLocalHost().getHostName();\n-        String safeFilename = hostName.replaceAll( \"[^a-zA-Z0-9._]+\", \"_\" );\n-        return safeFilename + \"-\" + LocalDateTime.now().format( filenameDateTimeFormatter ) + \".zip\";\n+        String safeFilename = hostName.replaceAll(\"[^a-zA-Z0-9._]+\", \"_\");\n+        return safeFilename + \"-\" + LocalDateTime.now().format(filenameDateTimeFormatter) + \".zip\";\n     }\n \n     private DiagnosticsReporterProgress buildProgress()\n     {\n-        return System.console() == null ? new NonInteractiveProgress( ctx.out(), verbose ) : new InteractiveProgress( ctx.out(), verbose );\n+        return System.console() == null ? new NonInteractiveProgress(ctx.out(), verbose) : new InteractiveProgress(ctx.out(), verbose);\n     }\n \n-    private void validateClassifiers( DiagnosticsReporter reporter )\n+    private void validateClassifiers(DiagnosticsReporter reporter)\n     {\n         Set<String> availableClassifiers = reporter.getAvailableClassifiers();\n-        if ( classifiers.contains( \"all\" ) )\n+        if (classifiers.contains(\"all\"))\n         {\n-            if ( classifiers.size() != 1 )\n+            if (classifiers.size() != 1)\n             {\n-                classifiers.remove( \"all\" );\n-                throw new CommandFailedException( \"If you specify 'all' this has to be the only classifier. Found ['\" +\n-                        join( \"','\", classifiers ) + \"'] as well.\" );\n+                classifiers.remove(\"all\");\n+                throw new CommandFailedException(\"If you specify 'all' this has to be the only classifier. Found ['\" +\n+                  join(\"','\", classifiers) + \"'] as well.\");\n             }\n-        }\n-        else\n+        } else\n         {\n-            if ( classifiers.equals( Set.of( DEFAULT_CLASSIFIERS ) ) )\n+            if (classifiers.equals(Set.of(DEFAULT_CLASSIFIERS)))\n             {\n-                classifiers = new HashSet<>( classifiers );\n-                classifiers.retainAll( availableClassifiers );\n+                classifiers = new HashSet<>(classifiers);\n+                classifiers.retainAll(availableClassifiers);\n             }\n-            validateOrphanClassifiers( availableClassifiers, classifiers );\n+            validateOrphanClassifiers(availableClassifiers, classifiers);\n         }\n     }\n \n-    private static void validateOrphanClassifiers( Set<String> availableClassifiers, Set<String> orphans )\n+    private static void validateOrphanClassifiers(Set<String> availableClassifiers, Set<String> orphans)\n     {\n-        for ( String classifier : orphans )\n+        for (String classifier : orphans)\n         {\n-            if ( !availableClassifiers.contains( classifier ) )\n+            if (!availableClassifiers.contains(classifier))\n             {\n-                throw new CommandFailedException( \"Unknown classifier: \" + classifier );\n+                throw new CommandFailedException(\"Unknown classifier: \" + classifier);\n             }\n         }\n     }\n \n-    private void listClassifiers( Set<String> availableClassifiers )\n+    private void listClassifiers(Set<String> availableClassifiers)\n     {\n-        ctx.out().println( \"All available classifiers:\" );\n-        for ( String classifier : availableClassifiers )\n+        ctx.out().println(\"All available classifiers:\");\n+        for (String classifier : availableClassifiers)\n         {\n-            ctx.out().printf( \"  %-10s %s%n\", classifier, describeClassifier( classifier ) );\n+            ctx.out().printf(\"  %-10s %s%n\", classifier, describeClassifier(classifier));\n         }\n     }\n \n     private DiagnosticsReporter createAndRegisterSources()\n     {\n         DiagnosticsReporter reporter = new DiagnosticsReporter();\n-        Path configFile = ctx.confDir().resolve( Config.DEFAULT_CONFIG_FILE_NAME );\n-        Config config = getConfig( configFile );\n+        Path configFile = ctx.confDir().resolve(Config.DEFAULT_CONFIG_FILE_NAME);\n+        Config config = getConfig(configFile);\n \n-        Path storeDirectory = config.get( databases_root_path );\n+        Path storeDirectory = config.get(databases_root_path);\n \n-        reporter.registerAllOfflineProviders( config, storeDirectory, ctx.fs(), config.get( GraphDatabaseSettings.default_database ) );\n+        reporter.registerAllOfflineProviders(config, storeDirectory, ctx.fs(), config.get(GraphDatabaseSettings.default_database));\n \n         // Register sources provided by this tool\n-        reporter.registerSource( \"config\",\n-                DiagnosticsReportSources.newDiagnosticsFile( \"neo4j.conf\", ctx.fs(), configFile ) );\n+        reporter.registerSource(\"config\",\n+          DiagnosticsReportSources.newDiagnosticsFile(\"neo4j.conf\", ctx.fs(), configFile));\n \n-        reporter.registerSource( \"ps\", runningProcesses() );\n+        reporter.registerSource(\"ps\", runningProcesses());\n \n         // Online connection\n-        registerJMXSources( reporter );\n+        registerJMXSources(reporter);\n         return reporter;\n     }\n \n-    private void registerJMXSources( DiagnosticsReporter reporter )\n+    private void registerJMXSources(DiagnosticsReporter reporter)\n     {\n         Optional<JmxDump> jmxDump;\n-        if ( pid == NO_PID )\n+        if (pid == NO_PID)\n         {\n             jmxDump = jmxDumper.getJMXDump();\n-        }\n-        else\n+        } else\n         {\n-            jmxDump = jmxDumper.getJMXDump( pid );\n+            jmxDump = jmxDumper.getJMXDump(pid);\n         }\n-        jmxDump.ifPresent( jmx ->\n+        jmxDump.ifPresent(jmx ->\n         {\n-            reporter.registerSource( \"threads\", jmx.threadDump() );\n-            reporter.registerSource( \"heap\", jmx.heapDump() );\n-            reporter.registerSource( \"sysprop\", jmx.systemProperties() );\n-        } );\n+            reporter.registerSource(\"threads\", jmx.threadDump());\n+            reporter.registerSource(\"heap\", jmx.heapDump());\n+            reporter.registerSource(\"sysprop\", jmx.systemProperties());\n+        });\n     }\n \n-    private Config getConfig( Path configFile )\n+    private Config getConfig(Path configFile)\n     {\n-        if ( !ctx.fs().fileExists( configFile ) )\n+        if (!ctx.fs().fileExists(configFile))\n         {\n-            throw new CommandFailedException( \"Unable to find config file, tried: \" + configFile.toAbsolutePath() );\n+            throw new CommandFailedException(\"Unable to find config file, tried: \" + configFile.toAbsolutePath());\n         }\n         try\n         {\n             Config cfg = Config.newBuilder()\n-                    .fromFileNoThrow( configFile )\n-                    .set( GraphDatabaseSettings.neo4j_home, ctx.homeDir() ).build();\n-            ConfigUtils.disableAllConnectors( cfg );\n+              .fromFileNoThrow(configFile)\n+              .set(GraphDatabaseSettings.neo4j_home, ctx.homeDir()).build();\n+            ConfigUtils.disableAllConnectors(cfg);\n             return cfg;\n-        }\n-        catch ( Exception e )\n+        } catch (Exception e)\n         {\n-            throw new CommandFailedException( \"Failed to read config file: \" + configFile.toAbsolutePath(), e );\n+            throw new CommandFailedException(\"Failed to read config file: \" + configFile.toAbsolutePath(), e);\n         }\n     }\n \n-    static String describeClassifier( String classifier )\n+    static String describeClassifier(String classifier)\n     {\n-        switch ( classifier )\n+        switch (classifier)\n         {\n-        case \"logs\":\n-            return \"include log files\";\n-        case \"config\":\n-            return \"include configuration file\";\n-        case \"plugins\":\n-            return \"include a view of the plugin directory\";\n-        case \"tree\":\n-            return \"include a view of the tree structure of the data directory\";\n-        case \"tx\":\n-            return \"include transaction logs\";\n-        case \"metrics\":\n-            return \"include metrics\";\n-        case \"threads\":\n-            return \"include a thread dump of the running instance\";\n-        case \"heap\":\n-            return \"include a heap dump\";\n-        case \"sysprop\":\n-            return \"include a list of java system properties\";\n-        case \"raft\":\n-            return \"include the raft log\";\n-        case \"ccstate\":\n-            return \"include the current cluster state\";\n-        case \"ps\":\n-            return \"include a list of running processes\";\n-        case \"version\":\n-            return \"include version of neo4j\";\n-        default:\n+            case \"logs\":\n+                return \"include log files\";\n+            case \"config\":\n+                return \"include configuration file\";\n+            case \"plugins\":\n+                return \"include a view of the plugin directory\";\n+            case \"tree\":\n+                return \"include a view of the tree structure of the data directory\";\n+            case \"tx\":\n+                return \"include transaction logs\";\n+            case \"metrics\":\n+                return \"include metrics\";\n+            case \"threads\":\n+                return \"include a thread dump of the running instance\";\n+            case \"heap\":\n+                return \"include a heap dump\";\n+            case \"sysprop\":\n+                return \"include a list of java system properties\";\n+            case \"raft\":\n+                return \"include the raft log\";\n+            case \"ccstate\":\n+                return \"include the current cluster state\";\n+            case \"ps\":\n+                return \"include a list of running processes\";\n+            case \"version\":\n+                return \"include version of neo4j\";\n+            default:\n         }\n-        throw new IllegalArgumentException( \"Unknown classifier: \" + classifier );\n+        throw new IllegalArgumentException(\"Unknown classifier: \" + classifier);\n     }\n \n     private static DiagnosticsReportSource runningProcesses()\n     {\n-        return DiagnosticsReportSources.newDiagnosticsString( \"ps.csv\", () ->\n+        return DiagnosticsReportSources.newDiagnosticsString(\"ps.csv\", () ->\n         {\n             List<ProcessInfo> processesList = JProcesses.getProcessList();\n \n             StringBuilder sb = new StringBuilder();\n-            sb.append( escapeCsv( \"Process PID\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Process Name\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Process Time\" ) ).append( ',' )\n-                    .append( escapeCsv( \"User\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Virtual Memory\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Physical Memory\" ) ).append( ',' )\n-                    .append( escapeCsv( \"CPU usage\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Start Time\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Priority\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Full command\" ) ).append( '\\n' );\n-\n-            for ( final ProcessInfo processInfo : processesList )\n+            sb.append(escapeCsv(\"Process PID\")).append(',')\n+              .append(escapeCsv(\"Process Name\")).append(',')\n+              .append(escapeCsv(\"Process Time\")).append(',')\n+              .append(escapeCsv(\"User\")).append(',')\n+              .append(escapeCsv(\"Virtual Memory\")).append(',')\n+              .append(escapeCsv(\"Physical Memory\")).append(',')\n+              .append(escapeCsv(\"CPU usage\")).append(',')\n+              .append(escapeCsv(\"Start Time\")).append(',')\n+              .append(escapeCsv(\"Priority\")).append(',')\n+              .append(escapeCsv(\"Full command\")).append('\\n');\n+\n+            for (final ProcessInfo processInfo : processesList)\n             {\n-                sb.append( processInfo.getPid() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getName() ) ).append( ',' )\n-                        .append( processInfo.getTime() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getUser() ) ).append( ',' )\n-                        .append( processInfo.getVirtualMemory() ).append( ',' )\n-                        .append( processInfo.getPhysicalMemory() ).append( ',' )\n-                        .append( processInfo.getCpuUsage() ).append( ',' )\n-                        .append( processInfo.getStartTime() ).append( ',' )\n-                        .append( processInfo.getPriority() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getCommand() ) ).append( '\\n' );\n+                sb.append(processInfo.getPid()).append(',')\n+                  .append(escapeCsv(processInfo.getName())).append(',')\n+                  .append(processInfo.getTime()).append(',')\n+                  .append(escapeCsv(processInfo.getUser())).append(',')\n+                  .append(processInfo.getVirtualMemory()).append(',')\n+                  .append(processInfo.getPhysicalMemory()).append(',')\n+                  .append(processInfo.getCpuUsage()).append(',')\n+                  .append(processInfo.getStartTime()).append(',')\n+                  .append(processInfo.getPriority()).append(',')\n+                  .append(escapeCsv(processInfo.getCommand())).append('\\n');\n             }\n             return sb.toString();\n-        } );\n+        });\n     }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}