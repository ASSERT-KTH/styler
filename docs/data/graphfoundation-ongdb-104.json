{
    "project_name": "graphfoundation-ongdb",
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/104/Recovery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/104/Recovery.java\nindex 82c5cef5d84..cc39326bc0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/104/Recovery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/104/Recovery.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.recovery;\n \n import java.io.IOException;\n@@ -42,140 +43,137 @@ import static org.neo4j.storageengine.api.TransactionApplicationMode.REVERSE_REC\n public class Recovery extends LifecycleAdapter\n {\n \n-    private final RecoveryService recoveryService;\n-    private final RecoveryMonitor monitor;\n-    private final StartupStatisticsProvider startupStatistics;\n-    private final CorruptedLogsTruncator logsTruncator;\n-    private final ProgressReporter progressReporter;\n-    private final boolean failOnCorruptedLogFiles;\n-    private int numberOfRecoveredTransactions;\n-\n-    public Recovery( RecoveryService recoveryService, StartupStatisticsProvider startupStatistics,\n-            CorruptedLogsTruncator logsTruncator, RecoveryMonitor monitor, ProgressReporter progressReporter,\n-            boolean failOnCorruptedLogFiles )\n+  private final RecoveryService recoveryService;\n+  private final RecoveryMonitor monitor;\n+  private final StartupStatisticsProvider startupStatistics;\n+  private final CorruptedLogsTruncator logsTruncator;\n+  private final ProgressReporter progressReporter;\n+  private final boolean failOnCorruptedLogFiles;\n+  private int numberOfRecoveredTransactions;\n+\n+  public Recovery(RecoveryService recoveryService, StartupStatisticsProvider startupStatistics,\n+                  CorruptedLogsTruncator logsTruncator, RecoveryMonitor monitor, ProgressReporter progressReporter,\n+                  boolean failOnCorruptedLogFiles)\n+  {\n+    this.recoveryService = recoveryService;\n+    this.monitor = monitor;\n+    this.startupStatistics = startupStatistics;\n+    this.logsTruncator = logsTruncator;\n+    this.progressReporter = progressReporter;\n+    this.failOnCorruptedLogFiles = failOnCorruptedLogFiles;\n+  }\n+\n+  @Override\n+  public void init() throws IOException\n+  {\n+    RecoveryStartInformation recoveryStartInformation = recoveryService.getRecoveryStartInformation();\n+    if (!recoveryStartInformation.isRecoveryRequired())\n     {\n-        this.recoveryService = recoveryService;\n-        this.monitor = monitor;\n-        this.startupStatistics = startupStatistics;\n-        this.logsTruncator = logsTruncator;\n-        this.progressReporter = progressReporter;\n-        this.failOnCorruptedLogFiles = failOnCorruptedLogFiles;\n+      return;\n     }\n \n-    @Override\n-    public void init() throws IOException\n+    LogPosition recoveryPosition = recoveryStartInformation.getRecoveryPosition();\n+\n+    monitor.recoveryRequired(recoveryPosition);\n+    recoveryService.startRecovery();\n+\n+    LogPosition recoveryToPosition = recoveryPosition;\n+    CommittedTransactionRepresentation lastTransaction = null;\n+    CommittedTransactionRepresentation lastReversedTransaction = null;\n+    try\n     {\n-        RecoveryStartInformation recoveryStartInformation = recoveryService.getRecoveryStartInformation();\n-        if ( !recoveryStartInformation.isRecoveryRequired() )\n+      long lowestRecoveredTxId = TransactionIdStore.BASE_TX_ID;\n+      try (TransactionCursor transactionsToRecover = recoveryService.getTransactionsInReverseOrder(recoveryPosition);\n+           RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier(REVERSE_RECOVERY))\n+      {\n+        while (transactionsToRecover.next())\n         {\n-            return;\n+          CommittedTransactionRepresentation transaction = transactionsToRecover.get();\n+          if (lastReversedTransaction == null)\n+          {\n+            lastReversedTransaction = transaction;\n+            initProgressReporter(recoveryStartInformation, lastReversedTransaction);\n+          }\n+          recoveryVisitor.visit(transaction);\n+          lowestRecoveredTxId = transaction.getCommitEntry().getTxId();\n+          reportProgress();\n         }\n+      }\n \n-        LogPosition recoveryPosition = recoveryStartInformation.getRecoveryPosition();\n+      monitor.reverseStoreRecoveryCompleted(lowestRecoveredTxId);\n \n-        monitor.recoveryRequired( recoveryPosition );\n-        recoveryService.startRecovery();\n-\n-        LogPosition recoveryToPosition = recoveryPosition;\n-        CommittedTransactionRepresentation lastTransaction = null;\n-        CommittedTransactionRepresentation lastReversedTransaction = null;\n-        try\n-        {\n-            long lowestRecoveredTxId = TransactionIdStore.BASE_TX_ID;\n-            try ( TransactionCursor transactionsToRecover = recoveryService.getTransactionsInReverseOrder( recoveryPosition );\n-                    RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( REVERSE_RECOVERY ) )\n-            {\n-                while ( transactionsToRecover.next() )\n-                {\n-                    CommittedTransactionRepresentation transaction = transactionsToRecover.get();\n-                    if ( lastReversedTransaction == null )\n-                    {\n-                        lastReversedTransaction = transaction;\n-                        initProgressReporter( recoveryStartInformation, lastReversedTransaction );\n-                    }\n-                    recoveryVisitor.visit( transaction );\n-                    lowestRecoveredTxId = transaction.getCommitEntry().getTxId();\n-                    reportProgress();\n-                }\n-            }\n-\n-            monitor.reverseStoreRecoveryCompleted( lowestRecoveredTxId );\n-\n-            try ( TransactionCursor transactionsToRecover = recoveryService.getTransactions( recoveryPosition );\n-                    RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( RECOVERY ) )\n-            {\n-                while ( transactionsToRecover.next() )\n-                {\n-                    lastTransaction = transactionsToRecover.get();\n-                    long txId = lastTransaction.getCommitEntry().getTxId();\n-                    recoveryVisitor.visit( lastTransaction );\n-                    monitor.transactionRecovered( txId );\n-                    numberOfRecoveredTransactions++;\n-                    recoveryToPosition = transactionsToRecover.position();\n-                    reportProgress();\n-                }\n-                recoveryToPosition = transactionsToRecover.position();\n-            }\n-        }\n-        catch ( Error | ClosedByInterruptException e )\n-        {\n-            // We do not want to truncate logs based on these exceptions. Since users can influence them with config changes\n-            // the users are able to workaround this if truncations is really needed.\n-            throw e;\n-        }\n-        catch ( Throwable t )\n+      try (TransactionCursor transactionsToRecover = recoveryService.getTransactions(recoveryPosition);\n+           RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier(RECOVERY))\n+      {\n+        while (transactionsToRecover.next())\n         {\n-            if ( failOnCorruptedLogFiles )\n-            {\n-                throwUnableToCleanRecover( t );\n-            }\n-            if ( lastTransaction != null )\n-            {\n-                LogEntryCommit commitEntry = lastTransaction.getCommitEntry();\n-                monitor.failToRecoverTransactionsAfterCommit( t, commitEntry, recoveryToPosition );\n-            }\n-            else\n-            {\n-                monitor.failToRecoverTransactionsAfterPosition( t, recoveryPosition );\n-                recoveryToPosition = recoveryPosition;\n-            }\n+          lastTransaction = transactionsToRecover.get();\n+          long txId = lastTransaction.getCommitEntry().getTxId();\n+          recoveryVisitor.visit(lastTransaction);\n+          monitor.transactionRecovered(txId);\n+          numberOfRecoveredTransactions++;\n+          recoveryToPosition = transactionsToRecover.position();\n+          reportProgress();\n         }\n-        progressReporter.completed();\n-        logsTruncator.truncate( recoveryToPosition );\n-\n-        recoveryService.transactionsRecovered( lastTransaction, recoveryToPosition );\n-        startupStatistics.setNumberOfRecoveredTransactions( numberOfRecoveredTransactions );\n-        monitor.recoveryCompleted( numberOfRecoveredTransactions );\n-    }\n-\n-    static void throwUnableToCleanRecover( Throwable t )\n+        recoveryToPosition = transactionsToRecover.position();\n+      }\n+    } catch (Error | ClosedByInterruptException e)\n     {\n-        throw new RuntimeException(\n-                \"Error reading transaction logs, recovery not possible. To force the database to start anyway, you can specify '\" +\n-                        GraphDatabaseSettings.fail_on_corrupted_log_files.name() + \"=false'. This will try to recover as much \" +\n-                        \"as possible and then truncate the corrupt part of the transaction log. Doing this means your database \" +\n-                        \"integrity might be compromised, please consider restoring from a consistent backup instead.\", t );\n-    }\n-\n-    private void initProgressReporter( RecoveryStartInformation recoveryStartInformation,\n-            CommittedTransactionRepresentation lastReversedTransaction )\n-    {\n-        long numberOfTransactionToRecover =\n-                getNumberOfTransactionToRecover( recoveryStartInformation, lastReversedTransaction );\n-        // since we will process each transaction twice (doing reverse and direct detour) we need to\n-        // multiply number of transactions that we want to recover by 2 to be able to report correct progress\n-        progressReporter.start( numberOfTransactionToRecover * 2 );\n-    }\n-\n-    private void reportProgress()\n-    {\n-        progressReporter.progress( 1 );\n-    }\n-\n-    private long getNumberOfTransactionToRecover( RecoveryStartInformation recoveryStartInformation,\n-            CommittedTransactionRepresentation lastReversedTransaction )\n+      // We do not want to truncate logs based on these exceptions. Since users can influence them with config changes\n+      // the users are able to workaround this if truncations is really needed.\n+      throw e;\n+    } catch (Throwable t)\n     {\n-        return lastReversedTransaction.getCommitEntry().getTxId() -\n-                recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() + 1;\n+      if (failOnCorruptedLogFiles)\n+      {\n+        throwUnableToCleanRecover(t);\n+      }\n+      if (lastTransaction != null)\n+      {\n+        LogEntryCommit commitEntry = lastTransaction.getCommitEntry();\n+        monitor.failToRecoverTransactionsAfterCommit(t, commitEntry, recoveryToPosition);\n+      } else\n+      {\n+        monitor.failToRecoverTransactionsAfterPosition(t, recoveryPosition);\n+        recoveryToPosition = recoveryPosition;\n+      }\n     }\n+    progressReporter.completed();\n+    logsTruncator.truncate(recoveryToPosition);\n+\n+    recoveryService.transactionsRecovered(lastTransaction, recoveryToPosition);\n+    startupStatistics.setNumberOfRecoveredTransactions(numberOfRecoveredTransactions);\n+    monitor.recoveryCompleted(numberOfRecoveredTransactions);\n+  }\n+\n+  static void throwUnableToCleanRecover(Throwable t)\n+  {\n+    throw new RuntimeException(\n+        \"Error reading transaction logs, recovery not possible. To force the database to start anyway, you can specify '\" +\n+            GraphDatabaseSettings.fail_on_corrupted_log_files.name() + \"=false'. This will try to recover as much \" +\n+            \"as possible and then truncate the corrupt part of the transaction log. Doing this means your database \" +\n+            \"integrity might be compromised, please consider restoring from a consistent backup instead.\", t);\n+  }\n+\n+  private void initProgressReporter(RecoveryStartInformation recoveryStartInformation,\n+                                    CommittedTransactionRepresentation lastReversedTransaction)\n+  {\n+    long numberOfTransactionToRecover =\n+        getNumberOfTransactionToRecover(recoveryStartInformation, lastReversedTransaction);\n+    // since we will process each transaction twice (doing reverse and direct detour) we need to\n+    // multiply number of transactions that we want to recover by 2 to be able to report correct progress\n+    progressReporter.start(numberOfTransactionToRecover * 2);\n+  }\n+\n+  private void reportProgress()\n+  {\n+    progressReporter.progress(1);\n+  }\n+\n+  private long getNumberOfTransactionToRecover(RecoveryStartInformation recoveryStartInformation,\n+                                               CommittedTransactionRepresentation lastReversedTransaction)\n+  {\n+    return lastReversedTransaction.getCommitEntry().getTxId() -\n+        recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() + 1;\n+  }\n }\n",
            "diff_size": 206
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 464).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "172",
                    "column": "67",
                    "severity": "error",
                    "message": "'-' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/104/Recovery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/104/Recovery.java\nindex 82c5cef5d84..4c349c9915f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/104/Recovery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/104/Recovery.java\n@@ -41,7 +41,6 @@ import static org.neo4j.storageengine.api.TransactionApplicationMode.REVERSE_REC\n  */\n public class Recovery extends LifecycleAdapter\n {\n-\n     private final RecoveryService recoveryService;\n     private final RecoveryMonitor monitor;\n     private final StartupStatisticsProvider startupStatistics;\n@@ -72,18 +71,16 @@ public class Recovery extends LifecycleAdapter\n         }\n \n         LogPosition recoveryPosition = recoveryStartInformation.getRecoveryPosition();\n-\n-        monitor.recoveryRequired( recoveryPosition );\n+monitor.recoveryRequired( recoveryPosition );\n         recoveryService.startRecovery();\n-\n-        LogPosition recoveryToPosition = recoveryPosition;\n+LogPosition recoveryToPosition = recoveryPosition;\n         CommittedTransactionRepresentation lastTransaction = null;\n         CommittedTransactionRepresentation lastReversedTransaction = null;\n         try\n         {\n             long lowestRecoveredTxId = TransactionIdStore.BASE_TX_ID;\n             try ( TransactionCursor transactionsToRecover = recoveryService.getTransactionsInReverseOrder( recoveryPosition );\n-                    RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( REVERSE_RECOVERY ) )\n+RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( REVERSE_RECOVERY ) )\n             {\n                 while ( transactionsToRecover.next() )\n                 {\n@@ -91,7 +88,8 @@ public class Recovery extends LifecycleAdapter\n                     if ( lastReversedTransaction == null )\n                     {\n                         lastReversedTransaction = transaction;\n-                        initProgressReporter( recoveryStartInformation, lastReversedTransaction );\n+\n+initProgressReporter( recoveryStartInformation, lastReversedTransaction );\n                     }\n                     recoveryVisitor.visit( transaction );\n                     lowestRecoveredTxId = transaction.getCommitEntry().getTxId();\n@@ -102,7 +100,7 @@ public class Recovery extends LifecycleAdapter\n             monitor.reverseStoreRecoveryCompleted( lowestRecoveredTxId );\n \n             try ( TransactionCursor transactionsToRecover = recoveryService.getTransactions( recoveryPosition );\n-                    RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( RECOVERY ) )\n+RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( RECOVERY ) )\n             {\n                 while ( transactionsToRecover.next() )\n                 {\n@@ -114,7 +112,8 @@ public class Recovery extends LifecycleAdapter\n                     recoveryToPosition = transactionsToRecover.position();\n                     reportProgress();\n                 }\n-                recoveryToPosition = transactionsToRecover.position();\n+\n+recoveryToPosition = transactionsToRecover.position();\n             }\n         }\n         catch ( Error | ClosedByInterruptException e )\n@@ -129,7 +128,8 @@ public class Recovery extends LifecycleAdapter\n             {\n                 throwUnableToCleanRecover( t );\n             }\n-            if ( lastTransaction != null )\n+\n+if ( lastTransaction != null )\n             {\n                 LogEntryCommit commitEntry = lastTransaction.getCommitEntry();\n                 monitor.failToRecoverTransactionsAfterCommit( t, commitEntry, recoveryToPosition );\n@@ -142,27 +142,21 @@ public class Recovery extends LifecycleAdapter\n         }\n         progressReporter.completed();\n         logsTruncator.truncate( recoveryToPosition );\n-\n-        recoveryService.transactionsRecovered( lastTransaction, recoveryToPosition );\n+recoveryService.transactionsRecovered( lastTransaction, recoveryToPosition );\n         startupStatistics.setNumberOfRecoveredTransactions( numberOfRecoveredTransactions );\n         monitor.recoveryCompleted( numberOfRecoveredTransactions );\n     }\n \n     static void throwUnableToCleanRecover( Throwable t )\n     {\n-        throw new RuntimeException(\n-                \"Error reading transaction logs, recovery not possible. To force the database to start anyway, you can specify '\" +\n-                        GraphDatabaseSettings.fail_on_corrupted_log_files.name() + \"=false'. This will try to recover as much \" +\n-                        \"as possible and then truncate the corrupt part of the transaction log. Doing this means your database \" +\n-                        \"integrity might be compromised, please consider restoring from a consistent backup instead.\", t );\n+        throw new RuntimeException( \"Error reading transaction logs, recovery not possible. To force the database to start anyway, you can specify '\" + GraphDatabaseSettings.fail_on_corrupted_log_files.name() + \"=false'. This will try to recover as much \" + \"as possible and then truncate the corrupt part of the transaction log. Doing this means your database \" + \"integrity might be compromised, please consider restoring from a consistent backup instead.\", t );\n     }\n \n     private void initProgressReporter( RecoveryStartInformation recoveryStartInformation,\n             CommittedTransactionRepresentation lastReversedTransaction )\n     {\n-        long numberOfTransactionToRecover =\n-                getNumberOfTransactionToRecover( recoveryStartInformation, lastReversedTransaction );\n-        // since we will process each transaction twice (doing reverse and direct detour) we need to\n+        long numberOfTransactionToRecover = getNumberOfTransactionToRecover( recoveryStartInformation, lastReversedTransaction );\n+    // since we will process each transaction twice (doing reverse and direct detour) we need to\n         // multiply number of transactions that we want to recover by 2 to be able to report correct progress\n         progressReporter.start( numberOfTransactionToRecover * 2 );\n     }\n@@ -175,7 +169,6 @@ public class Recovery extends LifecycleAdapter\n     private long getNumberOfTransactionToRecover( RecoveryStartInformation recoveryStartInformation,\n             CommittedTransactionRepresentation lastReversedTransaction )\n     {\n-        return lastReversedTransaction.getCommitEntry().getTxId() -\n-                recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() + 1;\n+        return lastReversedTransaction.getCommitEntry().getTxId() -recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() + 1;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'try' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "215",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'try' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "193",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "17",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 464).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "column": "61",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "167",
                    "column": "66",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/104/Recovery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/104/Recovery.java\nindex 82c5cef5d84..b3a4bfffc14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/104/Recovery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/104/Recovery.java\n@@ -21,7 +21,6 @@ package org.neo4j.kernel.recovery;\n \n import java.io.IOException;\n import java.nio.channels.ClosedByInterruptException;\n-\n import org.neo4j.graphdb.factory.GraphDatabaseSettings;\n import org.neo4j.kernel.impl.core.StartupStatisticsProvider;\n import org.neo4j.kernel.impl.transaction.CommittedTransactionRepresentation;\n@@ -31,17 +30,17 @@ import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;\n import org.neo4j.kernel.impl.transaction.log.entry.LogEntryCommit;\n import org.neo4j.kernel.impl.util.monitoring.ProgressReporter;\n import org.neo4j.kernel.lifecycle.LifecycleAdapter;\n-\n import static org.neo4j.storageengine.api.TransactionApplicationMode.RECOVERY;\n+\n import static org.neo4j.storageengine.api.TransactionApplicationMode.REVERSE_RECOVERY;\n \n /**\n  * This is the process of doing a recovery on the transaction log and store, and is executed\n  * at startup of {@link org.neo4j.kernel.NeoStoreDataSource}.\n  */\n+\n public class Recovery extends LifecycleAdapter\n {\n-\n     private final RecoveryService recoveryService;\n     private final RecoveryMonitor monitor;\n     private final StartupStatisticsProvider startupStatistics;\n@@ -50,9 +49,7 @@ public class Recovery extends LifecycleAdapter\n     private final boolean failOnCorruptedLogFiles;\n     private int numberOfRecoveredTransactions;\n \n-    public Recovery( RecoveryService recoveryService, StartupStatisticsProvider startupStatistics,\n-            CorruptedLogsTruncator logsTruncator, RecoveryMonitor monitor, ProgressReporter progressReporter,\n-            boolean failOnCorruptedLogFiles )\n+    public Recovery( RecoveryService recoveryService, StartupStatisticsProvider startupStatistics, CorruptedLogsTruncator logsTruncator, RecoveryMonitor monitor, ProgressReporter progressReporter, boolean failOnCorruptedLogFiles )\n     {\n         this.recoveryService = recoveryService;\n         this.monitor = monitor;\n@@ -66,26 +63,23 @@ public class Recovery extends LifecycleAdapter\n     public void init() throws IOException\n     {\n         RecoveryStartInformation recoveryStartInformation = recoveryService.getRecoveryStartInformation();\n-        if ( !recoveryStartInformation.isRecoveryRequired() )\n+        if ( ! recoveryStartInformation.isRecoveryRequired() )\n         {\n             return;\n         }\n \n         LogPosition recoveryPosition = recoveryStartInformation.getRecoveryPosition();\n-\n         monitor.recoveryRequired( recoveryPosition );\n         recoveryService.startRecovery();\n-\n         LogPosition recoveryToPosition = recoveryPosition;\n         CommittedTransactionRepresentation lastTransaction = null;\n         CommittedTransactionRepresentation lastReversedTransaction = null;\n         try\n         {\n             long lowestRecoveredTxId = TransactionIdStore.BASE_TX_ID;\n-            try ( TransactionCursor transactionsToRecover = recoveryService.getTransactionsInReverseOrder( recoveryPosition );\n-                    RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( REVERSE_RECOVERY ) )\n+            try( TransactionCursor transactionsToRecover = recoveryService.getTransactionsInReverseOrder( recoveryPosition ); RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( REVERSE_RECOVERY ))\n             {\n-                while ( transactionsToRecover.next() )\n+                while( transactionsToRecover.next())\n                 {\n                     CommittedTransactionRepresentation transaction = transactionsToRecover.get();\n                     if ( lastReversedTransaction == null )\n@@ -93,6 +87,7 @@ public class Recovery extends LifecycleAdapter\n                         lastReversedTransaction = transaction;\n                         initProgressReporter( recoveryStartInformation, lastReversedTransaction );\n                     }\n+\n                     recoveryVisitor.visit( transaction );\n                     lowestRecoveredTxId = transaction.getCommitEntry().getTxId();\n                     reportProgress();\n@@ -100,11 +95,9 @@ public class Recovery extends LifecycleAdapter\n             }\n \n             monitor.reverseStoreRecoveryCompleted( lowestRecoveredTxId );\n-\n-            try ( TransactionCursor transactionsToRecover = recoveryService.getTransactions( recoveryPosition );\n-                    RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( RECOVERY ) )\n+            try( TransactionCursor transactionsToRecover = recoveryService.getTransactions( recoveryPosition ); RecoveryApplier recoveryVisitor = recoveryService.getRecoveryApplier( RECOVERY ))\n             {\n-                while ( transactionsToRecover.next() )\n+                while( transactionsToRecover.next())\n                 {\n                     lastTransaction = transactionsToRecover.get();\n                     long txId = lastTransaction.getCommitEntry().getTxId();\n@@ -114,6 +107,7 @@ public class Recovery extends LifecycleAdapter\n                     recoveryToPosition = transactionsToRecover.position();\n                     reportProgress();\n                 }\n+\n                 recoveryToPosition = transactionsToRecover.position();\n             }\n         }\n@@ -123,26 +117,28 @@ public class Recovery extends LifecycleAdapter\n             // the users are able to workaround this if truncations is really needed.\n             throw e;\n         }\n-        catch ( Throwable t )\n-        {\n-            if ( failOnCorruptedLogFiles )\n-            {\n-                throwUnableToCleanRecover( t );\n-            }\n-            if ( lastTransaction != null )\n-            {\n-                LogEntryCommit commitEntry = lastTransaction.getCommitEntry();\n-                monitor.failToRecoverTransactionsAfterCommit( t, commitEntry, recoveryToPosition );\n-            }\n-            else\n+\n+            catch ( Throwable t )\n             {\n-                monitor.failToRecoverTransactionsAfterPosition( t, recoveryPosition );\n-                recoveryToPosition = recoveryPosition;\n+                if ( failOnCorruptedLogFiles )\n+                {\n+                    throwUnableToCleanRecover( t );\n+                }\n+\n+                if ( lastTransaction != null )\n+                {\n+                    LogEntryCommit commitEntry = lastTransaction.getCommitEntry();\n+                    monitor.failToRecoverTransactionsAfterCommit( t, commitEntry, recoveryToPosition );\n+                }\n+                else\n+                {\n+                    monitor.failToRecoverTransactionsAfterPosition( t, recoveryPosition );\n+                    recoveryToPosition = recoveryPosition;\n+                }\n             }\n-        }\n+\n         progressReporter.completed();\n         logsTruncator.truncate( recoveryToPosition );\n-\n         recoveryService.transactionsRecovered( lastTransaction, recoveryToPosition );\n         startupStatistics.setNumberOfRecoveredTransactions( numberOfRecoveredTransactions );\n         monitor.recoveryCompleted( numberOfRecoveredTransactions );\n@@ -150,21 +146,15 @@ public class Recovery extends LifecycleAdapter\n \n     static void throwUnableToCleanRecover( Throwable t )\n     {\n-        throw new RuntimeException(\n-                \"Error reading transaction logs, recovery not possible. To force the database to start anyway, you can specify '\" +\n-                        GraphDatabaseSettings.fail_on_corrupted_log_files.name() + \"=false'. This will try to recover as much \" +\n-                        \"as possible and then truncate the corrupt part of the transaction log. Doing this means your database \" +\n-                        \"integrity might be compromised, please consider restoring from a consistent backup instead.\", t );\n+        throw new RuntimeException( \"Error reading transaction logs, recovery not possible. To force the database to start anyway, you can specify '\" + GraphDatabaseSettings.fail_on_corrupted_log_files.name() + \"=false'. This will try to recover as much \" + \"as possible and then truncate the corrupt part of the transaction log. Doing this means your database \" + \"integrity might be compromised, please consider restoring from a consistent backup instead.\", t );\n     }\n \n-    private void initProgressReporter( RecoveryStartInformation recoveryStartInformation,\n-            CommittedTransactionRepresentation lastReversedTransaction )\n+    private void initProgressReporter( RecoveryStartInformation recoveryStartInformation, CommittedTransactionRepresentation lastReversedTransaction )\n     {\n-        long numberOfTransactionToRecover =\n-                getNumberOfTransactionToRecover( recoveryStartInformation, lastReversedTransaction );\n+        long numberOfTransactionToRecover = getNumberOfTransactionToRecover( recoveryStartInformation, lastReversedTransaction );\n         // since we will process each transaction twice (doing reverse and direct detour) we need to\n         // multiply number of transactions that we want to recover by 2 to be able to report correct progress\n-        progressReporter.start( numberOfTransactionToRecover * 2 );\n+        progressReporter.start( numberOfTransactionToRecover* 2 );\n     }\n \n     private void reportProgress()\n@@ -172,10 +162,8 @@ public class Recovery extends LifecycleAdapter\n         progressReporter.progress( 1 );\n     }\n \n-    private long getNumberOfTransactionToRecover( RecoveryStartInformation recoveryStartInformation,\n-            CommittedTransactionRepresentation lastReversedTransaction )\n+    private long getNumberOfTransactionToRecover( RecoveryStartInformation recoveryStartInformation, CommittedTransactionRepresentation lastReversedTransaction )\n     {\n-        return lastReversedTransaction.getCommitEntry().getTxId() -\n-                recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() + 1;\n+        return lastReversedTransaction.getCommitEntry().getTxId()- recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() + 1;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}