{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2449",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "119",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "212",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "218",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "221",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "224",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "227",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "355",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "684",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "687",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "696",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "701",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "710",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "749",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "788",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "819",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "819",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2449/ByteCodeExpressionVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2449/ByteCodeExpressionVisitor.java\nindex 8d53f42db4b..163aca7a250 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2449/ByteCodeExpressionVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2449/ByteCodeExpressionVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.objectweb.asm.Label;\n@@ -113,735 +114,716 @@ import static org.objectweb.asm.Opcodes.T_SHORT;\n \n class ByteCodeExpressionVisitor implements ExpressionVisitor\n {\n-    private final MethodVisitor methodVisitor;\n-\n-    ByteCodeExpressionVisitor( MethodVisitor methodVisitor )\n-    {\n-        this.methodVisitor = methodVisitor;\n-    }\n-\n-    @Override\n-    public void invoke( Expression target, MethodReference method, Expression[] arguments )\n-    {\n-        target.accept( this );\n-        for ( Expression argument : arguments )\n-        {\n-            argument.accept( this );\n-        }\n-        if ( Modifier.isInterface( method.owner().modifiers() ) )\n-        {\n-            methodVisitor\n-                    .visitMethodInsn( INVOKEINTERFACE, byteCodeName( method.owner() ), method.name(),\n-                            desc( method ),\n-                            true );\n-        }\n-        else if ( method.isConstructor() )\n-        {\n-            methodVisitor\n-                    .visitMethodInsn( INVOKESPECIAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n-                            false );\n-        }\n-        else\n-        {\n-            methodVisitor\n-                    .visitMethodInsn( INVOKEVIRTUAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n-                            false );\n-        }\n-    }\n-\n-    @Override\n-    public void invoke( MethodReference method, Expression[] arguments )\n-    {\n-        for ( Expression argument : arguments )\n-        {\n-            argument.accept( this );\n-        }\n-        methodVisitor.visitMethodInsn( INVOKESTATIC,\n-                byteCodeName( method.owner() ),\n-                method.name(), desc( method ), Modifier.isInterface( method.owner().modifiers() ) );\n-    }\n-\n-    @Override\n-    public void load( LocalVariable variable )\n-    {\n-        if ( variable.type().isPrimitive() )\n-        {\n-            switch ( variable.type().name() )\n-            {\n-            case \"int\":\n-            case \"byte\":\n-            case \"short\":\n-            case \"char\":\n-            case \"boolean\":\n-                methodVisitor.visitVarInsn( ILOAD, variable.index() );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitVarInsn( LLOAD, variable.index() );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitVarInsn( FLOAD, variable.index() );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitVarInsn( DLOAD, variable.index() );\n-                break;\n-            default:\n-                methodVisitor.visitVarInsn( ALOAD, variable.index() );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitVarInsn( ALOAD, variable.index() );\n-        }\n-    }\n-\n-    @Override\n-    public void getField( Expression target, FieldReference field )\n-    {\n-        target.accept( this );\n-        methodVisitor\n-                .visitFieldInsn( GETFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n-    }\n-\n-    @Override\n-    public void constant( Object value )\n-    {\n-        if ( value == null )\n-        {\n-            methodVisitor.visitInsn( ACONST_NULL );\n-        }\n-        else if ( value instanceof Integer )\n-        {\n-            pushInteger( (Integer) value );\n-        }\n-        else if ( value instanceof Byte )\n-        {\n-            pushInteger( (Byte) value );\n-        }\n-        else if ( value instanceof Short )\n-        {\n-            pushInteger( (Short) value );\n-        }\n-        else if ( value instanceof Long )\n-        {\n-            pushLong( (Long) value );\n-        }\n-        else if ( value instanceof Double )\n-        {\n-            methodVisitor.visitLdcInsn( value );\n-        }\n-        else if ( value instanceof Float )\n-        {\n-            methodVisitor.visitLdcInsn( value );\n-        }\n-        else if ( value instanceof Boolean )\n-        {\n-            boolean b = (boolean) value;\n-            methodVisitor.visitInsn( b ? ICONST_1 : ICONST_0 );\n-        }\n-        else\n-        {\n-            methodVisitor.visitLdcInsn( value );\n-        }\n-    }\n-\n-    @Override\n-    public void getStatic( FieldReference field )\n-    {\n-        methodVisitor\n-                .visitFieldInsn( GETSTATIC, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n-    }\n+  private final MethodVisitor methodVisitor;\n \n-    @Override\n-    public void loadThis( String sourceName )\n-    {\n-        methodVisitor.visitVarInsn( ALOAD, 0 );\n-    }\n+  ByteCodeExpressionVisitor(MethodVisitor methodVisitor)\n+  {\n+    this.methodVisitor = methodVisitor;\n+  }\n \n-    @Override\n-    public void newInstance( TypeReference type )\n+  @Override\n+  public void invoke(Expression target, MethodReference method, Expression[] arguments)\n+  {\n+    target.accept(this);\n+    for (Expression argument : arguments)\n     {\n-        methodVisitor.visitTypeInsn( NEW, byteCodeName( type ) );\n-        methodVisitor.visitInsn( DUP );\n+      argument.accept(this);\n     }\n-\n-    @Override\n-    public void not( Expression expression )\n+    if (Modifier.isInterface(method.owner().modifiers()))\n     {\n-        test( IFNE, expression, Expression.TRUE, Expression.FALSE );\n-    }\n-\n-    @Override\n-    public void isNull( Expression expression )\n+      methodVisitor\n+          .visitMethodInsn(INVOKEINTERFACE, byteCodeName(method.owner()), method.name(),\n+              desc(method),\n+              true);\n+    } else if (method.isConstructor())\n     {\n-        test( IFNONNULL, expression, Expression.TRUE, Expression.FALSE );\n-    }\n-\n-    @Override\n-    public void notNull( Expression expression )\n-    {\n-        test( IFNULL, expression, Expression.TRUE, Expression.FALSE );\n-    }\n-\n-    @Override\n-    public void ternary( Expression test, Expression onTrue, Expression onFalse )\n-    {\n-        test( IFEQ, test, onTrue, onFalse );\n-    }\n-\n-    public void ternaryOnNull( Expression test, Expression onTrue, Expression onFalse )\n-    {\n-        test( IFNONNULL, test, onTrue, onFalse );\n-    }\n-\n-    public void ternaryOnNonNull( Expression test, Expression onTrue, Expression onFalse )\n-    {\n-        test( IFNULL, test, onTrue, onFalse );\n-    }\n-\n-    private void test( int test, Expression predicate, Expression onTrue, Expression onFalse )\n-    {\n-        predicate.accept( this );\n-        Label isFalse = new Label();\n-        methodVisitor.visitJumpInsn( test, isFalse );\n-        onTrue.accept( this );\n-        Label after = new Label();\n-        methodVisitor.visitJumpInsn( GOTO, after );\n-        methodVisitor.visitLabel( isFalse );\n-        onFalse.accept( this );\n-        methodVisitor.visitLabel( after );\n-    }\n-\n-    @Override\n-    public void equal( Expression lhs, Expression rhs )\n-    {\n-        equal( lhs, rhs, true );\n-    }\n-\n-    @Override\n-    public void notEqual( Expression lhs, Expression rhs )\n-    {\n-        equal( lhs, rhs, false );\n-    }\n-\n-    private void equal( Expression lhs, Expression rhs, boolean equal )\n-    {\n-        if ( lhs.type().isPrimitive() )\n-        {\n-            assert rhs.type().isPrimitive();\n-\n-            switch ( lhs.type().name() )\n-            {\n-            case \"int\":\n-            case \"byte\":\n-            case \"short\":\n-            case \"char\":\n-            case \"boolean\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareIntOrReferenceType( lhs, rhs, equal ? IF_ICMPNE : IF_ICMPEQ );\n-                break;\n-            case \"long\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareLongOrFloatType( lhs, rhs, LCMP, equal ? IFNE : IFEQ );\n-                break;\n-            case \"float\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareLongOrFloatType( lhs, rhs, FCMPL, equal ? IFNE : IFEQ );\n-                break;\n-            case \"double\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareLongOrFloatType( lhs, rhs, DCMPL, equal ? IFNE : IFEQ );\n-                break;\n-            default:\n-                compareIntOrReferenceType( lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ );\n-            }\n-        }\n-        else\n-        {\n-            assert !(rhs.type().isPrimitive());\n-            compareIntOrReferenceType( lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ );\n-        }\n-    }\n-\n-    @Override\n-    public void or( Expression... expressions )\n-    {\n-        assert expressions.length >= 2;\n-        /*\n-         * something like:\n-         *\n-         * LOAD expression1\n-         * IF TRUE GOTO 0\n-         * LOAD expression2\n-         * IF TRUE GOTO 0\n-         * ...\n-         * LOAD expressionN\n-         * IF FALSE GOTO 1\n-         * 0: // The reason we have this extra block for the true case is because we mimic what javac does\n-         *    // hoping that it will be nice to the JIT compiler\n-         *  LOAD TRUE\n-         *  GOTO 2\n-         * 1:\n-         *  LOAD FALSE\n-         * 2:\n-         *  ...continue doing stuff\n-         */\n-        Label l0 = new Label();\n-        Label l1 = new Label();\n-        Label l2 = new Label();\n-        for ( int i = 0; i < expressions.length; i++ )\n-        {\n-            expressions[i].accept( this );\n-            if ( i < expressions.length - 1 )\n-            {\n-                methodVisitor.visitJumpInsn( IFNE, l0 );\n-            }\n-        }\n-        methodVisitor.visitJumpInsn( IFEQ, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_1 );\n-        methodVisitor.visitJumpInsn( GOTO, l2 );\n-        methodVisitor.visitLabel( l1 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l2 );\n-    }\n-\n-    @Override\n-    public void and( Expression... expressions )\n-    {\n-        assert expressions.length >= 2;\n-        /*\n-         * something like:\n-         *\n-         * LOAD expression1\n-         * IF FALSE GOTO 0\n-         * LOAD expression2\n-         * IF FALSE GOTO 0\n-         * LOAD TRUE\n-         * ...\n-         * LOAD expressionN\n-         * IF FALSE GOTO 0\n-         * GOTO 1\n-         * 0:\n-         *  LOAD FALSE\n-         * 1:\n-         *  ...continue doing stuff\n-         */\n-        Label l0 = new Label();\n-        Label l1 = new Label();\n-        for ( Expression expression : expressions )\n-        {\n-            expression.accept( this );\n-            methodVisitor.visitJumpInsn( IFEQ, l0 );\n-        }\n-        methodVisitor.visitInsn( ICONST_1 );\n-        methodVisitor.visitJumpInsn( GOTO, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l1 );\n-    }\n-\n-    @Override\n-    public void add( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"add\" );\n-        lhs.accept( this );\n-        rhs.accept( this );\n-\n-        numberOperation( lhs.type(),\n-                () -> methodVisitor.visitInsn( IADD ),\n-                () -> methodVisitor.visitInsn( LADD ),\n-                () -> methodVisitor.visitInsn( FADD ),\n-                () -> methodVisitor.visitInsn( DADD ) );\n-    }\n-\n-    @Override\n-    public void gt( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPL, IFLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLE )\n-        );\n-    }\n-\n-    @Override\n-    public void gte( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPL, IFLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLT )\n-        );\n-    }\n-\n-    @Override\n-    public void lt( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPG, IFGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGE )\n-        );\n-    }\n-\n-    @Override\n-    public void lte( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPG, IFGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGT )\n-        );\n-    }\n-\n-    @Override\n-    public void subtract( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"subtract\" );\n-        lhs.accept( this );\n-        rhs.accept( this );\n-        numberOperation( lhs.type(),\n-                () -> methodVisitor.visitInsn( ISUB ),\n-                () -> methodVisitor.visitInsn( LSUB ),\n-                () -> methodVisitor.visitInsn( FSUB ),\n-                () -> methodVisitor.visitInsn( DSUB ) );\n-    }\n-\n-    @Override\n-    public void multiply( Expression lhs, Expression rhs )\n-    {\n-        assertSameType( lhs, rhs, \"multiply\" );\n-        lhs.accept( this );\n-        rhs.accept( this );\n-        numberOperation( lhs.type(),\n-                () -> methodVisitor.visitInsn( IMUL ),\n-                () -> methodVisitor.visitInsn( LMUL ),\n-                () -> methodVisitor.visitInsn( FMUL ),\n-                () -> methodVisitor.visitInsn( DMUL ) );\n-    }\n-\n-    @Override\n-    public void cast( TypeReference type, Expression expression )\n+      methodVisitor\n+          .visitMethodInsn(INVOKESPECIAL, byteCodeName(method.owner()), method.name(), desc(method),\n+              false);\n+    } else\n     {\n-        expression.accept( this );\n-        if ( !type.equals( expression.type() ) )\n-        {\n-            methodVisitor.visitTypeInsn( CHECKCAST, byteCodeName( type ) );\n-        }\n+      methodVisitor\n+          .visitMethodInsn(INVOKEVIRTUAL, byteCodeName(method.owner()), method.name(), desc(method),\n+              false);\n     }\n+  }\n \n-    @Override\n-    public void newArray( TypeReference type, Expression... exprs )\n-    {\n-        pushInteger( exprs.length );\n-        createArray( type );\n-        for ( int i = 0; i < exprs.length; i++ )\n-        {\n-            methodVisitor.visitInsn( DUP );\n-            pushInteger( i );\n-            exprs[i].accept( this );\n-            arrayStore( type );\n-        }\n-    }\n-\n-    @Override\n-    public void longToDouble( Expression expression )\n+  @Override\n+  public void invoke(MethodReference method, Expression[] arguments)\n+  {\n+    for (Expression argument : arguments)\n     {\n-        expression.accept( this );\n-        methodVisitor.visitInsn( L2D );\n+      argument.accept(this);\n     }\n+    methodVisitor.visitMethodInsn(INVOKESTATIC,\n+        byteCodeName(method.owner()),\n+        method.name(), desc(method), Modifier.isInterface(method.owner().modifiers()));\n+  }\n \n-    @Override\n-    public void pop( Expression expression )\n+  @Override\n+  public void load(LocalVariable variable)\n+  {\n+    if (variable.type().isPrimitive())\n     {\n-        expression.accept( this );\n-        switch ( expression.type().simpleName() )\n-        {\n+      switch (variable.type().name())\n+      {\n+        case \"int\":\n+        case \"byte\":\n+        case \"short\":\n+        case \"char\":\n+        case \"boolean\":\n+          methodVisitor.visitVarInsn(ILOAD, variable.index());\n+          break;\n         case \"long\":\n+          methodVisitor.visitVarInsn(LLOAD, variable.index());\n+          break;\n+        case \"float\":\n+          methodVisitor.visitVarInsn(FLOAD, variable.index());\n+          break;\n         case \"double\":\n-            methodVisitor.visitInsn( POP2 );\n-            break;\n-        default:\n-            methodVisitor.visitInsn( POP );\n-            break;\n-        }\n-    }\n-\n-    @Override\n-    public void box( Expression expression )\n-    {\n-        expression.accept( this );\n-        if ( expression.type().isPrimitive() )\n-        {\n-            switch ( expression.type().name() )\n-            {\n-            case \"byte\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\", false );\n-                break;\n-            case \"short\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\", false );\n-                break;\n-            case \"int\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\", false );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\", false );\n-                break;\n-            case \"char\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\", false );\n-                break;\n-            case \"boolean\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\", false );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\", false );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\", false );\n-                break;\n-            default:\n-                //do nothing, expression is already boxed\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void unbox( Expression expression )\n-    {\n-        expression.accept( this );\n-        switch ( expression.type().fullName() )\n-        {\n-        case \"java.lang.Byte\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Byte\", \"byteValue\", \"()B\", false);\n-            break;\n-        case \"java.lang.Short\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Short\", \"shortValue\", \"()S\", false);\n-            break;\n-        case \"java.lang.Integer\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Integer\", \"intValue\", \"()I\", false);\n-            break;\n-        case \"java.lang.Long\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Long\", \"longValue\", \"()J\", false);\n-            break;\n-        case \"java.lang.Character\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Character\", \"charValue\", \"()C\", false);\n-            break;\n-        case \"java.lang.Boolean\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\", false);\n-            break;\n-        case \"java.lang.Float\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Float\", \"floatValue\", \"()F\", false);\n-            break;\n-        case \"java.lang.Double\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Double\", \"doubleValue\", \"()D\", false);\n-            break;\n+          methodVisitor.visitVarInsn(DLOAD, variable.index());\n+          break;\n         default:\n-            throw new IllegalStateException( \"Cannot unbox \" + expression.type().fullName() );\n-        }\n-    }\n-\n-    private void compareIntOrReferenceType( Expression lhs, Expression rhs, int opcode )\n-    {\n-        lhs.accept( this );\n-        rhs.accept( this );\n-\n-        Label l0 = new Label();\n-        methodVisitor.visitJumpInsn( opcode, l0 );\n-        methodVisitor.visitInsn( ICONST_1 );\n-        Label l1 = new Label();\n-        methodVisitor.visitJumpInsn( GOTO, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l1 );\n-    }\n-\n-    private void compareLongOrFloatType( Expression lhs, Expression rhs, int opcode, int compare )\n-    {\n-        lhs.accept( this );\n-        rhs.accept( this );\n-\n-        methodVisitor.visitInsn( opcode );\n-        Label l0 = new Label();\n-        methodVisitor.visitJumpInsn( compare, l0 );\n-        methodVisitor.visitInsn( ICONST_1 );\n-        Label l1 = new Label();\n-        methodVisitor.visitJumpInsn( GOTO, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l1 );\n-    }\n-\n-    private void pushInteger( int integer )\n-    {\n-        if ( integer < 6 && integer >= -1 )\n-        {\n-            //LOAD fast, specialized constant instructions\n-            //ICONST_M1 = 2;\n-            //ICONST_0 = 3;\n-            //ICONST_1 = 4;\n-            //ICONST_2 = 5;\n-            //ICONST_3 = 6;\n-            //ICONST_4 = 7;\n-            //ICONST_5 = 8;\n-            methodVisitor.visitInsn( ICONST_0 + integer );\n-        }\n-        else if ( integer < Byte.MAX_VALUE && integer > Byte.MIN_VALUE )\n-        {\n-            methodVisitor.visitIntInsn( BIPUSH, integer );\n-        }\n-        else if ( integer < Short.MAX_VALUE && integer > Short.MIN_VALUE )\n-        {\n-            methodVisitor.visitIntInsn( SIPUSH, integer );\n-        }\n-        else\n-        {\n-            methodVisitor.visitLdcInsn( integer );\n-        }\n-    }\n-\n-    private void pushLong( long integer )\n-    {\n-        if ( integer == 0L )\n-        {\n-            methodVisitor.visitInsn( LCONST_0 );\n-        }\n-        else if ( integer == 1L )\n-        {\n-            methodVisitor.visitInsn( LCONST_1 );\n-        }\n-        else\n-        {\n-            methodVisitor.visitLdcInsn( integer );\n-        }\n-    }\n-\n-    private void createArray( TypeReference reference )\n-    {\n-        if ( reference.isPrimitive() )\n-        {\n-            switch ( reference.name() )\n-            {\n-            case \"int\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_INT );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_LONG );\n-                break;\n-            case \"byte\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_BYTE );\n-                break;\n-            case \"short\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_SHORT );\n-                break;\n-            case \"char\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_CHAR );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_FLOAT );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_DOUBLE );\n-                break;\n-            case \"boolean\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_BOOLEAN );\n-                break;\n-            default:\n-                methodVisitor.visitTypeInsn( ANEWARRAY, byteCodeName( reference ) );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitTypeInsn( ANEWARRAY, byteCodeName( reference ) );\n-        }\n-    }\n-\n-    private void arrayStore( TypeReference reference )\n-    {\n-        if ( reference.isPrimitive() )\n-        {\n-            switch ( reference.name() )\n-            {\n-            case \"int\":\n-                methodVisitor.visitInsn( IASTORE );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitInsn( LASTORE );\n-                break;\n-            case \"byte\":\n-                methodVisitor.visitInsn( BASTORE );\n-                break;\n-            case \"short\":\n-                methodVisitor.visitInsn( SASTORE );\n-                break;\n-            case \"char\":\n-                methodVisitor.visitInsn( CASTORE );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitInsn( FASTORE );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitInsn( DASTORE );\n-                break;\n-            case \"boolean\":\n-                methodVisitor.visitInsn( BASTORE );\n-                break;\n-            default:\n-                methodVisitor.visitInsn( AASTORE );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitInsn( AASTORE );\n-        }\n-    }\n-\n-    private void numberOperation( TypeReference type, Runnable onInt, Runnable onLong, Runnable onFloat,\n-            Runnable onDouble )\n-    {\n-        if ( !type.isPrimitive() )\n-        {\n-            throw new IllegalStateException( \"Cannot compare reference types\" );\n-        }\n-\n-        switch ( type.name() )\n-        {\n+          methodVisitor.visitVarInsn(ALOAD, variable.index());\n+      }\n+    } else\n+    {\n+      methodVisitor.visitVarInsn(ALOAD, variable.index());\n+    }\n+  }\n+\n+  @Override\n+  public void getField(Expression target, FieldReference field)\n+  {\n+    target.accept(this);\n+    methodVisitor\n+        .visitFieldInsn(GETFIELD, byteCodeName(field.owner()), field.name(), typeName(field.type()));\n+  }\n+\n+  @Override\n+  public void constant(Object value)\n+  {\n+    if (value == null)\n+    {\n+      methodVisitor.visitInsn(ACONST_NULL);\n+    } else if (value instanceof Integer)\n+    {\n+      pushInteger((Integer) value);\n+    } else if (value instanceof Byte)\n+    {\n+      pushInteger((Byte) value);\n+    } else if (value instanceof Short)\n+    {\n+      pushInteger((Short) value);\n+    } else if (value instanceof Long)\n+    {\n+      pushLong((Long) value);\n+    } else if (value instanceof Double)\n+    {\n+      methodVisitor.visitLdcInsn(value);\n+    } else if (value instanceof Float)\n+    {\n+      methodVisitor.visitLdcInsn(value);\n+    } else if (value instanceof Boolean)\n+    {\n+      boolean b = (boolean) value;\n+      methodVisitor.visitInsn(b ? ICONST_1 : ICONST_0);\n+    } else\n+    {\n+      methodVisitor.visitLdcInsn(value);\n+    }\n+  }\n+\n+  @Override\n+  public void getStatic(FieldReference field)\n+  {\n+    methodVisitor\n+        .visitFieldInsn(GETSTATIC, byteCodeName(field.owner()), field.name(), typeName(field.type()));\n+  }\n+\n+  @Override\n+  public void loadThis(String sourceName)\n+  {\n+    methodVisitor.visitVarInsn(ALOAD, 0);\n+  }\n+\n+  @Override\n+  public void newInstance(TypeReference type)\n+  {\n+    methodVisitor.visitTypeInsn(NEW, byteCodeName(type));\n+    methodVisitor.visitInsn(DUP);\n+  }\n+\n+  @Override\n+  public void not(Expression expression)\n+  {\n+    test(IFNE, expression, Expression.TRUE, Expression.FALSE);\n+  }\n+\n+  @Override\n+  public void isNull(Expression expression)\n+  {\n+    test(IFNONNULL, expression, Expression.TRUE, Expression.FALSE);\n+  }\n+\n+  @Override\n+  public void notNull(Expression expression)\n+  {\n+    test(IFNULL, expression, Expression.TRUE, Expression.FALSE);\n+  }\n+\n+  @Override\n+  public void ternary(Expression test, Expression onTrue, Expression onFalse)\n+  {\n+    test(IFEQ, test, onTrue, onFalse);\n+  }\n+\n+  public void ternaryOnNull(Expression test, Expression onTrue, Expression onFalse)\n+  {\n+    test(IFNONNULL, test, onTrue, onFalse);\n+  }\n+\n+  public void ternaryOnNonNull(Expression test, Expression onTrue, Expression onFalse)\n+  {\n+    test(IFNULL, test, onTrue, onFalse);\n+  }\n+\n+  private void test(int test, Expression predicate, Expression onTrue, Expression onFalse)\n+  {\n+    predicate.accept(this);\n+    Label isFalse = new Label();\n+    methodVisitor.visitJumpInsn(test, isFalse);\n+    onTrue.accept(this);\n+    Label after = new Label();\n+    methodVisitor.visitJumpInsn(GOTO, after);\n+    methodVisitor.visitLabel(isFalse);\n+    onFalse.accept(this);\n+    methodVisitor.visitLabel(after);\n+  }\n+\n+  @Override\n+  public void equal(Expression lhs, Expression rhs)\n+  {\n+    equal(lhs, rhs, true);\n+  }\n+\n+  @Override\n+  public void notEqual(Expression lhs, Expression rhs)\n+  {\n+    equal(lhs, rhs, false);\n+  }\n+\n+  private void equal(Expression lhs, Expression rhs, boolean equal)\n+  {\n+    if (lhs.type().isPrimitive())\n+    {\n+      assert rhs.type().isPrimitive();\n+\n+      switch (lhs.type().name())\n+      {\n         case \"int\":\n         case \"byte\":\n         case \"short\":\n         case \"char\":\n         case \"boolean\":\n-            onInt.run();\n-            break;\n+          assertSameType(lhs, rhs, \"compare\");\n+          compareIntOrReferenceType(lhs, rhs, equal ? IF_ICMPNE : IF_ICMPEQ);\n+          break;\n         case \"long\":\n-            onLong.run();\n-            break;\n+          assertSameType(lhs, rhs, \"compare\");\n+          compareLongOrFloatType(lhs, rhs, LCMP, equal ? IFNE : IFEQ);\n+          break;\n         case \"float\":\n-            onFloat.run();\n-            break;\n+          assertSameType(lhs, rhs, \"compare\");\n+          compareLongOrFloatType(lhs, rhs, FCMPL, equal ? IFNE : IFEQ);\n+          break;\n         case \"double\":\n-            onDouble.run();\n-            break;\n+          assertSameType(lhs, rhs, \"compare\");\n+          compareLongOrFloatType(lhs, rhs, DCMPL, equal ? IFNE : IFEQ);\n+          break;\n         default:\n-            throw new IllegalStateException( \"Cannot compare reference types\" );\n-        }\n+          compareIntOrReferenceType(lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ);\n+      }\n+    } else\n+    {\n+      assert !(rhs.type().isPrimitive());\n+      compareIntOrReferenceType(lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ);\n+    }\n+  }\n+\n+  @Override\n+  public void or(Expression... expressions)\n+  {\n+    assert expressions.length >= 2;\n+    /*\n+     * something like:\n+     *\n+     * LOAD expression1\n+     * IF TRUE GOTO 0\n+     * LOAD expression2\n+     * IF TRUE GOTO 0\n+     * ...\n+     * LOAD expressionN\n+     * IF FALSE GOTO 1\n+     * 0: // The reason we have this extra block for the true case is because we mimic what javac does\n+     *    // hoping that it will be nice to the JIT compiler\n+     *  LOAD TRUE\n+     *  GOTO 2\n+     * 1:\n+     *  LOAD FALSE\n+     * 2:\n+     *  ...continue doing stuff\n+     */\n+    Label l0 = new Label();\n+    Label l1 = new Label();\n+    Label l2 = new Label();\n+    for (int i = 0; i < expressions.length; i++)\n+    {\n+      expressions[i].accept(this);\n+      if (i < expressions.length - 1)\n+      {\n+        methodVisitor.visitJumpInsn(IFNE, l0);\n+      }\n+    }\n+    methodVisitor.visitJumpInsn(IFEQ, l1);\n+    methodVisitor.visitLabel(l0);\n+    methodVisitor.visitInsn(ICONST_1);\n+    methodVisitor.visitJumpInsn(GOTO, l2);\n+    methodVisitor.visitLabel(l1);\n+    methodVisitor.visitInsn(ICONST_0);\n+    methodVisitor.visitLabel(l2);\n+  }\n+\n+  @Override\n+  public void and(Expression... expressions)\n+  {\n+    assert expressions.length >= 2;\n+    /*\n+     * something like:\n+     *\n+     * LOAD expression1\n+     * IF FALSE GOTO 0\n+     * LOAD expression2\n+     * IF FALSE GOTO 0\n+     * LOAD TRUE\n+     * ...\n+     * LOAD expressionN\n+     * IF FALSE GOTO 0\n+     * GOTO 1\n+     * 0:\n+     *  LOAD FALSE\n+     * 1:\n+     *  ...continue doing stuff\n+     */\n+    Label l0 = new Label();\n+    Label l1 = new Label();\n+    for (Expression expression : expressions)\n+    {\n+      expression.accept(this);\n+      methodVisitor.visitJumpInsn(IFEQ, l0);\n+    }\n+    methodVisitor.visitInsn(ICONST_1);\n+    methodVisitor.visitJumpInsn(GOTO, l1);\n+    methodVisitor.visitLabel(l0);\n+    methodVisitor.visitInsn(ICONST_0);\n+    methodVisitor.visitLabel(l1);\n+  }\n+\n+  @Override\n+  public void add(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"add\");\n+    lhs.accept(this);\n+    rhs.accept(this);\n+\n+    numberOperation(lhs.type(),\n+        () -> methodVisitor.visitInsn(IADD),\n+        () -> methodVisitor.visitInsn(LADD),\n+        () -> methodVisitor.visitInsn(FADD),\n+        () -> methodVisitor.visitInsn(DADD));\n+  }\n+\n+  @Override\n+  public void gt(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"compare\");\n+    numberOperation(lhs.type(),\n+        () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPLE),\n+        () -> compareLongOrFloatType(lhs, rhs, LCMP, IFLE),\n+        () -> compareLongOrFloatType(lhs, rhs, FCMPL, IFLE),\n+        () -> compareLongOrFloatType(lhs, rhs, DCMPL, IFLE)\n+    );\n+  }\n+\n+  @Override\n+  public void gte(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"compare\");\n+    numberOperation(lhs.type(),\n+        () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPLT),\n+        () -> compareLongOrFloatType(lhs, rhs, LCMP, IFLT),\n+        () -> compareLongOrFloatType(lhs, rhs, FCMPL, IFLT),\n+        () -> compareLongOrFloatType(lhs, rhs, DCMPL, IFLT)\n+    );\n+  }\n+\n+  @Override\n+  public void lt(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"compare\");\n+    numberOperation(lhs.type(),\n+        () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPGE),\n+        () -> compareLongOrFloatType(lhs, rhs, LCMP, IFGE),\n+        () -> compareLongOrFloatType(lhs, rhs, FCMPG, IFGE),\n+        () -> compareLongOrFloatType(lhs, rhs, DCMPG, IFGE)\n+    );\n+  }\n+\n+  @Override\n+  public void lte(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"compare\");\n+    numberOperation(lhs.type(),\n+        () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPGT),\n+        () -> compareLongOrFloatType(lhs, rhs, LCMP, IFGT),\n+        () -> compareLongOrFloatType(lhs, rhs, FCMPG, IFGT),\n+        () -> compareLongOrFloatType(lhs, rhs, DCMPG, IFGT)\n+    );\n+  }\n+\n+  @Override\n+  public void subtract(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"subtract\");\n+    lhs.accept(this);\n+    rhs.accept(this);\n+    numberOperation(lhs.type(),\n+        () -> methodVisitor.visitInsn(ISUB),\n+        () -> methodVisitor.visitInsn(LSUB),\n+        () -> methodVisitor.visitInsn(FSUB),\n+        () -> methodVisitor.visitInsn(DSUB));\n+  }\n+\n+  @Override\n+  public void multiply(Expression lhs, Expression rhs)\n+  {\n+    assertSameType(lhs, rhs, \"multiply\");\n+    lhs.accept(this);\n+    rhs.accept(this);\n+    numberOperation(lhs.type(),\n+        () -> methodVisitor.visitInsn(IMUL),\n+        () -> methodVisitor.visitInsn(LMUL),\n+        () -> methodVisitor.visitInsn(FMUL),\n+        () -> methodVisitor.visitInsn(DMUL));\n+  }\n+\n+  @Override\n+  public void cast(TypeReference type, Expression expression)\n+  {\n+    expression.accept(this);\n+    if (!type.equals(expression.type()))\n+    {\n+      methodVisitor.visitTypeInsn(CHECKCAST, byteCodeName(type));\n+    }\n+  }\n+\n+  @Override\n+  public void newArray(TypeReference type, Expression... exprs)\n+  {\n+    pushInteger(exprs.length);\n+    createArray(type);\n+    for (int i = 0; i < exprs.length; i++)\n+    {\n+      methodVisitor.visitInsn(DUP);\n+      pushInteger(i);\n+      exprs[i].accept(this);\n+      arrayStore(type);\n+    }\n+  }\n+\n+  @Override\n+  public void longToDouble(Expression expression)\n+  {\n+    expression.accept(this);\n+    methodVisitor.visitInsn(L2D);\n+  }\n+\n+  @Override\n+  public void pop(Expression expression)\n+  {\n+    expression.accept(this);\n+    switch (expression.type().simpleName())\n+    {\n+      case \"long\":\n+      case \"double\":\n+        methodVisitor.visitInsn(POP2);\n+        break;\n+      default:\n+        methodVisitor.visitInsn(POP);\n+        break;\n+    }\n+  }\n+\n+  @Override\n+  public void box(Expression expression)\n+  {\n+    expression.accept(this);\n+    if (expression.type().isPrimitive())\n+    {\n+      switch (expression.type().name())\n+      {\n+        case \"byte\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\", false);\n+          break;\n+        case \"short\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\", false);\n+          break;\n+        case \"int\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\", false);\n+          break;\n+        case \"long\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\", false);\n+          break;\n+        case \"char\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\", false);\n+          break;\n+        case \"boolean\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\", false);\n+          break;\n+        case \"float\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\", false);\n+          break;\n+        case \"double\":\n+          methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\", false);\n+          break;\n+        default:\n+          //do nothing, expression is already boxed\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void unbox(Expression expression)\n+  {\n+    expression.accept(this);\n+    switch (expression.type().fullName())\n+    {\n+      case \"java.lang.Byte\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Byte\", \"byteValue\", \"()B\", false);\n+        break;\n+      case \"java.lang.Short\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Short\", \"shortValue\", \"()S\", false);\n+        break;\n+      case \"java.lang.Integer\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Integer\", \"intValue\", \"()I\", false);\n+        break;\n+      case \"java.lang.Long\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Long\", \"longValue\", \"()J\", false);\n+        break;\n+      case \"java.lang.Character\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Character\", \"charValue\", \"()C\", false);\n+        break;\n+      case \"java.lang.Boolean\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\", false);\n+        break;\n+      case \"java.lang.Float\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Float\", \"floatValue\", \"()F\", false);\n+        break;\n+      case \"java.lang.Double\":\n+        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Double\", \"doubleValue\", \"()D\", false);\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Cannot unbox \" + expression.type().fullName());\n+    }\n+  }\n+\n+  private void compareIntOrReferenceType(Expression lhs, Expression rhs, int opcode)\n+  {\n+    lhs.accept(this);\n+    rhs.accept(this);\n+\n+    Label l0 = new Label();\n+    methodVisitor.visitJumpInsn(opcode, l0);\n+    methodVisitor.visitInsn(ICONST_1);\n+    Label l1 = new Label();\n+    methodVisitor.visitJumpInsn(GOTO, l1);\n+    methodVisitor.visitLabel(l0);\n+    methodVisitor.visitInsn(ICONST_0);\n+    methodVisitor.visitLabel(l1);\n+  }\n+\n+  private void compareLongOrFloatType(Expression lhs, Expression rhs, int opcode, int compare)\n+  {\n+    lhs.accept(this);\n+    rhs.accept(this);\n+\n+    methodVisitor.visitInsn(opcode);\n+    Label l0 = new Label();\n+    methodVisitor.visitJumpInsn(compare, l0);\n+    methodVisitor.visitInsn(ICONST_1);\n+    Label l1 = new Label();\n+    methodVisitor.visitJumpInsn(GOTO, l1);\n+    methodVisitor.visitLabel(l0);\n+    methodVisitor.visitInsn(ICONST_0);\n+    methodVisitor.visitLabel(l1);\n+  }\n+\n+  private void pushInteger(int integer)\n+  {\n+    if (integer < 6 && integer >= -1)\n+    {\n+      //LOAD fast, specialized constant instructions\n+      //ICONST_M1 = 2;\n+      //ICONST_0 = 3;\n+      //ICONST_1 = 4;\n+      //ICONST_2 = 5;\n+      //ICONST_3 = 6;\n+      //ICONST_4 = 7;\n+      //ICONST_5 = 8;\n+      methodVisitor.visitInsn(ICONST_0 + integer);\n+    } else if (integer < Byte.MAX_VALUE && integer > Byte.MIN_VALUE)\n+    {\n+      methodVisitor.visitIntInsn(BIPUSH, integer);\n+    } else if (integer < Short.MAX_VALUE && integer > Short.MIN_VALUE)\n+    {\n+      methodVisitor.visitIntInsn(SIPUSH, integer);\n+    } else\n+    {\n+      methodVisitor.visitLdcInsn(integer);\n+    }\n+  }\n+\n+  private void pushLong(long integer)\n+  {\n+    if (integer == 0L)\n+    {\n+      methodVisitor.visitInsn(LCONST_0);\n+    } else if (integer == 1L)\n+    {\n+      methodVisitor.visitInsn(LCONST_1);\n+    } else\n+    {\n+      methodVisitor.visitLdcInsn(integer);\n+    }\n+  }\n+\n+  private void createArray(TypeReference reference)\n+  {\n+    if (reference.isPrimitive())\n+    {\n+      switch (reference.name())\n+      {\n+        case \"int\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_INT);\n+          break;\n+        case \"long\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_LONG);\n+          break;\n+        case \"byte\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);\n+          break;\n+        case \"short\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_SHORT);\n+          break;\n+        case \"char\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_CHAR);\n+          break;\n+        case \"float\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_FLOAT);\n+          break;\n+        case \"double\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_DOUBLE);\n+          break;\n+        case \"boolean\":\n+          methodVisitor.visitIntInsn(NEWARRAY, T_BOOLEAN);\n+          break;\n+        default:\n+          methodVisitor.visitTypeInsn(ANEWARRAY, byteCodeName(reference));\n+      }\n+    } else\n+    {\n+      methodVisitor.visitTypeInsn(ANEWARRAY, byteCodeName(reference));\n     }\n+  }\n \n-    private void assertSameType( Expression lhs, Expression rhs, String operation )\n+  private void arrayStore(TypeReference reference)\n+  {\n+    if (reference.isPrimitive())\n     {\n-        if ( !lhs.type().equals( rhs.type() ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Can only %s values of the same type (lhs: %s, rhs: %s)\", operation, lhs.type().toString(), rhs.type().toString() )\n-            );\n-        }\n-    }\n+      switch (reference.name())\n+      {\n+        case \"int\":\n+          methodVisitor.visitInsn(IASTORE);\n+          break;\n+        case \"long\":\n+          methodVisitor.visitInsn(LASTORE);\n+          break;\n+        case \"byte\":\n+          methodVisitor.visitInsn(BASTORE);\n+          break;\n+        case \"short\":\n+          methodVisitor.visitInsn(SASTORE);\n+          break;\n+        case \"char\":\n+          methodVisitor.visitInsn(CASTORE);\n+          break;\n+        case \"float\":\n+          methodVisitor.visitInsn(FASTORE);\n+          break;\n+        case \"double\":\n+          methodVisitor.visitInsn(DASTORE);\n+          break;\n+        case \"boolean\":\n+          methodVisitor.visitInsn(BASTORE);\n+          break;\n+        default:\n+          methodVisitor.visitInsn(AASTORE);\n+      }\n+    } else\n+    {\n+      methodVisitor.visitInsn(AASTORE);\n+    }\n+  }\n+\n+  private void numberOperation(TypeReference type, Runnable onInt, Runnable onLong, Runnable onFloat,\n+                               Runnable onDouble)\n+  {\n+    if (!type.isPrimitive())\n+    {\n+      throw new IllegalStateException(\"Cannot compare reference types\");\n+    }\n+\n+    switch (type.name())\n+    {\n+      case \"int\":\n+      case \"byte\":\n+      case \"short\":\n+      case \"char\":\n+      case \"boolean\":\n+        onInt.run();\n+        break;\n+      case \"long\":\n+        onLong.run();\n+        break;\n+      case \"float\":\n+        onFloat.run();\n+        break;\n+      case \"double\":\n+        onDouble.run();\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Cannot compare reference types\");\n+    }\n+  }\n+\n+  private void assertSameType(Expression lhs, Expression rhs, String operation)\n+  {\n+    if (!lhs.type().equals(rhs.type()))\n+    {\n+      throw new IllegalArgumentException(\n+          String.format(\"Can only %s values of the same type (lhs: %s, rhs: %s)\", operation, lhs.type().toString(), rhs.type().toString())\n+      );\n+    }\n+  }\n \n }\n",
            "diff_size": 1198
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "684",
                    "column": "54",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "688",
                    "column": "55",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "829",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2449/ByteCodeExpressionVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2449/ByteCodeExpressionVisitor.java\nindex 8d53f42db4b..a600da48b5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2449/ByteCodeExpressionVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2449/ByteCodeExpressionVisitor.java\n@@ -128,25 +128,23 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n         {\n             argument.accept( this );\n         }\n-        if ( Modifier.isInterface( method.owner().modifiers() ) )\n+\n+if ( Modifier.isInterface( method.owner().modifiers() ) )\n         {\n-            methodVisitor\n-                    .visitMethodInsn( INVOKEINTERFACE, byteCodeName( method.owner() ), method.name(),\n+            methodVisitor.visitMethodInsn( INVOKEINTERFACE, byteCodeName( method.owner() ), method.name(),\n                             desc( method ),\n                             true );\n-        }\n+    }\n         else if ( method.isConstructor() )\n         {\n-            methodVisitor\n-                    .visitMethodInsn( INVOKESPECIAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n+            methodVisitor.visitMethodInsn( INVOKESPECIAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n                             false );\n-        }\n+    }\n         else\n         {\n-            methodVisitor\n-                    .visitMethodInsn( INVOKEVIRTUAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n                             false );\n-        }\n+    }\n     }\n \n     @Override\n@@ -157,8 +155,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n             argument.accept( this );\n         }\n         methodVisitor.visitMethodInsn( INVOKESTATIC,\n-                byteCodeName( method.owner() ),\n-                method.name(), desc( method ), Modifier.isInterface( method.owner().modifiers() ) );\n+                byteCodeName( method.owner() ), method.name(), desc( method ), Modifier.isInterface( method.owner().modifiers() ) );\n     }\n \n     @Override\n@@ -198,8 +195,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n     public void getField( Expression target, FieldReference field )\n     {\n         target.accept( this );\n-        methodVisitor\n-                .visitFieldInsn( GETFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n+        methodVisitor.visitFieldInsn( GETFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n     }\n \n     @Override\n@@ -247,8 +243,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n     @Override\n     public void getStatic( FieldReference field )\n     {\n-        methodVisitor\n-                .visitFieldInsn( GETSTATIC, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n+        methodVisitor.visitFieldInsn( GETSTATIC, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n     }\n \n     @Override\n@@ -328,8 +323,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n         if ( lhs.type().isPrimitive() )\n         {\n             assert rhs.type().isPrimitive();\n-\n-            switch ( lhs.type().name() )\n+switch ( lhs.type().name() )\n             {\n             case \"int\":\n             case \"byte\":\n@@ -357,7 +351,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n         }\n         else\n         {\n-            assert !(rhs.type().isPrimitive());\n+            assert !(rhs.type().isPrimitive() );\n             compareIntOrReferenceType( lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ );\n         }\n     }\n@@ -462,8 +456,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n                 () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPLE ),\n                 () -> compareLongOrFloatType( lhs, rhs, LCMP, IFLE ),\n                 () -> compareLongOrFloatType( lhs, rhs, FCMPL, IFLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLE )\n-        );\n+                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLE ) );\n     }\n \n     @Override\n@@ -474,8 +467,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n                 () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPLT ),\n                 () -> compareLongOrFloatType( lhs, rhs, LCMP, IFLT ),\n                 () -> compareLongOrFloatType( lhs, rhs, FCMPL, IFLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLT )\n-        );\n+                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLT ) );\n     }\n \n     @Override\n@@ -486,8 +478,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n                 () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPGE ),\n                 () -> compareLongOrFloatType( lhs, rhs, LCMP, IFGE ),\n                 () -> compareLongOrFloatType( lhs, rhs, FCMPG, IFGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGE )\n-        );\n+                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGE ) );\n     }\n \n     @Override\n@@ -498,8 +489,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n                 () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPGT ),\n                 () -> compareLongOrFloatType( lhs, rhs, LCMP, IFGT ),\n                 () -> compareLongOrFloatType( lhs, rhs, FCMPG, IFGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGT )\n-        );\n+                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGT ) );\n     }\n \n     @Override\n@@ -620,28 +610,28 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n         switch ( expression.type().fullName() )\n         {\n         case \"java.lang.Byte\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Byte\", \"byteValue\", \"()B\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Byte\", \"byteValue\", \"()B\", false);\n             break;\n         case \"java.lang.Short\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Short\", \"shortValue\", \"()S\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Short\", \"shortValue\", \"()S\", false);\n             break;\n         case \"java.lang.Integer\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Integer\", \"intValue\", \"()I\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Integer\", \"intValue\", \"()I\", false);\n             break;\n         case \"java.lang.Long\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Long\", \"longValue\", \"()J\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Long\", \"longValue\", \"()J\", false);\n             break;\n         case \"java.lang.Character\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Character\", \"charValue\", \"()C\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Character\", \"charValue\", \"()C\", false);\n             break;\n         case \"java.lang.Boolean\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\", false);\n             break;\n         case \"java.lang.Float\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Float\", \"floatValue\", \"()F\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Float\", \"floatValue\", \"()F\", false);\n             break;\n         case \"java.lang.Double\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Double\", \"doubleValue\", \"()D\", false);\n+            methodVisitor.visitMethodInsn( INVOKEVIRTUAL, \"java/lang/Double\", \"doubleValue\", \"()D\", false);\n             break;\n         default:\n             throw new IllegalStateException( \"Cannot unbox \" + expression.type().fullName() );\n@@ -652,8 +642,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n     {\n         lhs.accept( this );\n         rhs.accept( this );\n-\n-        Label l0 = new Label();\n+Label l0 = new Label();\n         methodVisitor.visitJumpInsn( opcode, l0 );\n         methodVisitor.visitInsn( ICONST_1 );\n         Label l1 = new Label();\n@@ -667,8 +656,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n     {\n         lhs.accept( this );\n         rhs.accept( this );\n-\n-        methodVisitor.visitInsn( opcode );\n+methodVisitor.visitInsn( opcode );\n         Label l0 = new Label();\n         methodVisitor.visitJumpInsn( compare, l0 );\n         methodVisitor.visitInsn( ICONST_1 );\n@@ -693,11 +681,11 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n             //ICONST_5 = 8;\n             methodVisitor.visitInsn( ICONST_0 + integer );\n         }\n-        else if ( integer < Byte.MAX_VALUE && integer > Byte.MIN_VALUE )\n+        else if ( integer < Byte.MAX_VALUE && integer> Byte.MIN_VALUE )\n         {\n             methodVisitor.visitIntInsn( BIPUSH, integer );\n         }\n-        else if ( integer < Short.MAX_VALUE && integer > Short.MIN_VALUE )\n+        else if ( integer < Short.MAX_VALUE && integer> Short.MIN_VALUE )\n         {\n             methodVisitor.visitIntInsn( SIPUSH, integer );\n         }\n@@ -838,10 +826,7 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n     {\n         if ( !lhs.type().equals( rhs.type() ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Can only %s values of the same type (lhs: %s, rhs: %s)\", operation, lhs.type().toString(), rhs.type().toString() )\n-            );\n+            throw new IllegalArgumentException( String.format( \"Can only %s values of the same type (lhs: %s, rhs: %s)\", operation, lhs.type().toString(), rhs.type().toString() ) );\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}