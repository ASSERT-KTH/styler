{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "81",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 104).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public void testTranslateAndThrow() throws Exception {\n    DatastoreException cause = new DatastoreException(503, \"message\", \"UNAVAILABLE\");\n    RetryHelper.RetryHelperException exceptionMock = createMock(RetryHelper.RetryHelperException.class);\n    expect(exceptionMock.getCause()).andReturn(cause).times(2);\n    replay(exceptionMock);\n    try {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/69/DatastoreExceptionTest.java\nindex 4d62224172f..f7bdcb89bce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/69/DatastoreExceptionTest.java\n@@ -78,7 +78,8 @@ public class DatastoreExceptionTest {\n   @Test\n   public void testTranslateAndThrow() throws Exception {\n     DatastoreException cause = new DatastoreException(503, \"message\", \"UNAVAILABLE\");\n-    RetryHelper.RetryHelperException exceptionMock = createMock(RetryHelper.RetryHelperException.class);\n+    RetryHelper.RetryHelperException exceptionMock =\n+        createMock(RetryHelper.RetryHelperException.class);\n     expect(exceptionMock.getCause()).andReturn(cause).times(2);\n     replay(exceptionMock);\n     try {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/69/DatastoreExceptionTest.java\nindex 4d62224172f..15215169c3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/69/DatastoreExceptionTest.java\n@@ -72,7 +72,6 @@ public class DatastoreExceptionTest {\n     assertNull(exception.getMessage());\n     assertTrue(exception.retryable());\n     assertTrue(exception.idempotent());\n-\n   }\n \n   @Test\n@@ -103,4 +102,4 @@ public class DatastoreExceptionTest {\n       assertEquals(\"message a 1\", ex.getMessage());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/69/DatastoreExceptionTest.java\nindex 4d62224172f..b543bd574fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/69/DatastoreExceptionTest.java\n@@ -28,14 +28,12 @@ import static org.junit.Assert.fail;\n \n import com.google.gcloud.BaseServiceException;\n import com.google.gcloud.RetryHelper;\n-\n import org.junit.Test;\n-\n import java.io.IOException;\n import java.net.SocketTimeoutException;\n \n-public class DatastoreExceptionTest {\n \n+public class DatastoreExceptionTest {\n   @Test\n   public void testDatastoreException() throws Exception {\n     DatastoreException exception = new DatastoreException(409, \"message\", \"ABORTED\");\n@@ -44,35 +42,30 @@ public class DatastoreExceptionTest {\n     assertEquals(\"message\", exception.getMessage());\n     assertTrue(exception.retryable());\n     assertTrue(exception.idempotent());\n-\n     exception = new DatastoreException(403, \"message\", \"DEADLINE_EXCEEDED\");\n     assertEquals(403, exception.code());\n     assertEquals(\"DEADLINE_EXCEEDED\", exception.reason());\n     assertEquals(\"message\", exception.getMessage());\n     assertTrue(exception.retryable());\n     assertTrue(exception.idempotent());\n-\n     exception = new DatastoreException(503, \"message\", \"UNAVAILABLE\");\n     assertEquals(503, exception.code());\n     assertEquals(\"UNAVAILABLE\", exception.reason());\n     assertEquals(\"message\", exception.getMessage());\n     assertTrue(exception.retryable());\n     assertTrue(exception.idempotent());\n-\n     exception = new DatastoreException(500, \"message\", \"INTERNAL\");\n     assertEquals(500, exception.code());\n     assertEquals(\"INTERNAL\", exception.reason());\n     assertEquals(\"message\", exception.getMessage());\n     assertFalse(exception.retryable());\n     assertTrue(exception.idempotent());\n-\n     IOException cause = new SocketTimeoutException();\n     exception = new DatastoreException(cause);\n     assertNull(exception.reason());\n     assertNull(exception.getMessage());\n     assertTrue(exception.retryable());\n     assertTrue(exception.idempotent());\n-\n   }\n \n   @Test\n@@ -103,4 +96,4 @@ public class DatastoreExceptionTest {\n       assertEquals(\"message a 1\", ex.getMessage());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "column": "49",
                    "severity": "warning",
                    "message": "WhitespaceAround: '=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "64",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/69/DatastoreExceptionTest.java\nindex 4d62224172f..44eba7075ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/69/DatastoreExceptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/69/DatastoreExceptionTest.java\n@@ -78,8 +78,8 @@ public class DatastoreExceptionTest {\n   @Test\n   public void testTranslateAndThrow() throws Exception {\n     DatastoreException cause = new DatastoreException(503, \"message\", \"UNAVAILABLE\");\n-    RetryHelper.RetryHelperException exceptionMock = createMock(RetryHelper.RetryHelperException.class);\n-    expect(exceptionMock.getCause()).andReturn(cause).times(2);\n+RetryHelper.RetryHelperException exceptionMock =createMock(RetryHelper.RetryHelperException.class)\n+    ;expect(exceptionMock.getCause()).andReturn(cause).times(2);\n     replay(exceptionMock);\n     try {\n       DatastoreException.translateAndThrow(exceptionMock);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}