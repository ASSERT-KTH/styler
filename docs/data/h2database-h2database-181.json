{
    "project_name": "h2database-h2database",
    "error_id": "181",
    "information": {
        "errors": [
            {
                "line": "71",
                "column": "69",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                            }\n                        }\n                        left = newList.size() == 1 ? newList.get(0) //\n                                : new ExpressionList(newList.toArray(new Expression[0]), false);\n                        break;\n                    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/181/NullPredicate.java\nindex 8517bf6b474..6f6ccd4cc33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/181/NullPredicate.java\n@@ -68,8 +68,9 @@ public final class NullPredicate extends SimplePredicate {\n                                 newList.add(e);\n                             }\n                         }\n-                        left = newList.size() == 1 ? newList.get(0) //\n-                                : new ExpressionList(newList.toArray(new Expression[0]), false);\n+                        left = newList.size() == 1 ? newList.get(0)\n+                            //\n+                                 : new ExpressionList(newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n                 }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "75",
                    "column": "69",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/181/NullPredicate.java\nindex 8517bf6b474..7af19dea377 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/181/NullPredicate.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression.condition;\n \n import java.util.ArrayList;\n@@ -32,7 +33,8 @@ public final class NullPredicate extends SimplePredicate {\n \n     @Override\n     public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n-        return getWhenSQL(left.getSQL(builder, sqlFlags, AUTO_PARENTHESES), sqlFlags);\n+        return getWhenSQL(left.getSQL(builder, sqlFlags, AUTO_PARENTHESES),\n+                sqlFlags);\n     }\n \n     @Override\n@@ -53,12 +55,14 @@ public final class NullPredicate extends SimplePredicate {\n         if (!whenOperand && left instanceof ExpressionList) {\n             ExpressionList list = (ExpressionList) left;\n             if (!list.isArray()) {\n-                for (int i = 0, count = list.getSubexpressionCount(); i < count; i++) {\n+                for (int i = 0, count = list.getSubexpressionCount(); i < count;\n+                     i++) {\n                     if (list.getSubexpression(i).isNullConstant()) {\n                         if (not) {\n                             return ValueExpression.FALSE;\n                         }\n-                        ArrayList<Expression> newList = new ArrayList<>(count - 1);\n+                        ArrayList<Expression> newList =\n+                                new ArrayList<>(count - 1);\n                         for (int j = 0; j < i; j++) {\n                             newList.add(list.getSubexpression(j));\n                         }\n@@ -69,7 +73,8 @@ public final class NullPredicate extends SimplePredicate {\n                             }\n                         }\n                         left = newList.size() == 1 ? newList.get(0) //\n-                                : new ExpressionList(newList.toArray(new Expression[0]), false);\n+                                : new ExpressionList(\n+                                newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n                 }\n@@ -113,15 +118,16 @@ public final class NullPredicate extends SimplePredicate {\n             return o.getNotIfPossible(session);\n         }\n         switch (left.getType().getValueType()) {\n-        case Value.UNKNOWN:\n-        case Value.ROW:\n-            return null;\n+            case Value.UNKNOWN:\n+            case Value.ROW:\n+                return null;\n         }\n         return new NullPredicate(left, !not, false);\n     }\n \n     @Override\n-    public void createIndexConditions(SessionLocal session, TableFilter filter) {\n+    public void createIndexConditions(SessionLocal session,\n+                                      TableFilter filter) {\n         if (not || whenOperand || !filter.getTable().isQueryComparable()) {\n             return;\n         }\n@@ -130,7 +136,8 @@ public final class NullPredicate extends SimplePredicate {\n         } else if (left instanceof ExpressionList) {\n             ExpressionList list = (ExpressionList) left;\n             if (!list.isArray()) {\n-                for (int i = 0, count = list.getSubexpressionCount(); i < count; i++) {\n+                for (int i = 0, count = list.getSubexpressionCount(); i < count;\n+                     i++) {\n                     Expression e = list.getSubexpression(i);\n                     if (e instanceof ExpressionColumn) {\n                         createNullIndexCondition(filter, (ExpressionColumn) e);\n@@ -140,13 +147,16 @@ public final class NullPredicate extends SimplePredicate {\n         }\n     }\n \n-    private static void createNullIndexCondition(TableFilter filter, ExpressionColumn c) {\n+    private static void createNullIndexCondition(TableFilter filter,\n+                                                 ExpressionColumn c) {\n         /*\n          * Columns with row value data type aren't valid, but perform such check\n          * to be sure.\n          */\n-        if (filter == c.getTableFilter() && c.getType().getValueType() != Value.ROW) {\n-            filter.addIndexCondition(IndexCondition.get(Comparison.EQUAL_NULL_SAFE, c, ValueExpression.NULL));\n+        if (filter == c.getTableFilter() &&\n+                c.getType().getValueType() != Value.ROW) {\n+            filter.addIndexCondition(IndexCondition\n+                    .get(Comparison.EQUAL_NULL_SAFE, c, ValueExpression.NULL));\n         }\n     }\n \n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "71",
                    "column": "69",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/181/NullPredicate.java\nindex 8517bf6b474..06aef0f2e8f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/181/NullPredicate.java\n@@ -150,4 +150,4 @@ public final class NullPredicate extends SimplePredicate {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "71",
                    "column": "68",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/181/NullPredicate.java\nindex 8517bf6b474..81afd0bde49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/181/NullPredicate.java\n@@ -68,7 +68,7 @@ public final class NullPredicate extends SimplePredicate {\n                                 newList.add(e);\n                             }\n                         }\n-                        left = newList.size() == 1 ? newList.get(0) //\n+                        left = newList.size() == 1 ? newList.get(0)//\n                                 : new ExpressionList(newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/181/NullPredicate.java\nindex 8517bf6b474..6f6ccd4cc33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/181/NullPredicate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/181/NullPredicate.java\n@@ -68,8 +68,9 @@ public final class NullPredicate extends SimplePredicate {\n                                 newList.add(e);\n                             }\n                         }\n-                        left = newList.size() == 1 ? newList.get(0) //\n-                                : new ExpressionList(newList.toArray(new Expression[0]), false);\n+                        left = newList.size() == 1 ? newList.get(0)\n+                            //\n+                                 : new ExpressionList(newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n                 }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}