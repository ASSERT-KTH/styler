{
    "project_name": "neo4j-neo4j",
    "error_id": "99",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/99/PathWrappingPathValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/99/PathWrappingPathValue.java\nindex 1e58e34eb96..edf48cc5964 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/99/PathWrappingPathValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/99/PathWrappingPathValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import org.neo4j.graphdb.Node;\n@@ -30,11 +31,11 @@ import static org.neo4j.memory.HeapEstimator.shallowSizeOfInstance;\n \n public class PathWrappingPathValue extends PathValue\n {\n-    static final long SHALLOW_SIZE = shallowSizeOfInstance( PathWrappingPathValue.class );\n+    static final long SHALLOW_SIZE = shallowSizeOfInstance(PathWrappingPathValue.class);\n \n     private final Path path;\n \n-    PathWrappingPathValue( Path path )\n+    PathWrappingPathValue(Path path)\n     {\n         this.path = path;\n     }\n@@ -42,19 +43,19 @@ public class PathWrappingPathValue extends PathValue\n     @Override\n     public NodeValue startNode()\n     {\n-        return ValueUtils.fromNodeEntity( path.startNode() );\n+        return ValueUtils.fromNodeEntity(path.startNode());\n     }\n \n     @Override\n     public NodeValue endNode()\n     {\n-        return ValueUtils.fromNodeEntity( path.endNode() );\n+        return ValueUtils.fromNodeEntity(path.endNode());\n     }\n \n     @Override\n     public RelationshipValue lastRelationship()\n     {\n-        return ValueUtils.fromRelationshipEntity( path.lastRelationship() );\n+        return ValueUtils.fromRelationshipEntity(path.lastRelationship());\n     }\n \n     @Override\n@@ -63,9 +64,9 @@ public class PathWrappingPathValue extends PathValue\n         int length = path.length() + 1;\n         NodeValue[] values = new NodeValue[length];\n         int i = 0;\n-        for ( Node node : path.nodes() )\n+        for (Node node : path.nodes())\n         {\n-            values[i++] = ValueUtils.fromNodeEntity( node );\n+            values[i++] = ValueUtils.fromNodeEntity(node);\n         }\n         return values;\n     }\n@@ -76,9 +77,9 @@ public class PathWrappingPathValue extends PathValue\n         int length = path.length();\n         RelationshipValue[] values = new RelationshipValue[length];\n         int i = 0;\n-        for ( Relationship relationship : path.relationships() )\n+        for (Relationship relationship : path.relationships())\n         {\n-            values[i++] = ValueUtils.fromRelationshipEntity( relationship );\n+            values[i++] = ValueUtils.fromRelationshipEntity(relationship);\n         }\n         return values;\n     }\n@@ -96,7 +97,7 @@ public class PathWrappingPathValue extends PathValue\n         // There are many different implementations of Path, so here we are left guessing.\n         // We calculate some size for each node and relationship, but that will not include any potentially cached properties, labels, etc.\n         return SHALLOW_SIZE\n-               + length * RelationshipEntityWrappingValue.SHALLOW_SIZE\n-               + (length + 1) * NodeEntityWrappingNodeValue.SHALLOW_SIZE;\n+          + length * RelationshipEntityWrappingValue.SHALLOW_SIZE\n+          + (length + 1) * NodeEntityWrappingNodeValue.SHALLOW_SIZE;\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}