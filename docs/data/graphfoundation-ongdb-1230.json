{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1230",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "339",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "454",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "463",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "510",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "563",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "603",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1230/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1230/Command.java\nindex 558bfc9b4c2..6ce1dbfb4d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1230/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1230/Command.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.command;\n \n import java.io.IOException;\n@@ -55,753 +56,746 @@ import static org.neo4j.kernel.impl.util.IdPrettyPrinter.relationshipType;\n  */\n public abstract class Command implements StorageCommand\n {\n-    private int keyHash;\n-    private long key;\n-    private Mode mode;\n-\n-    /*\n-     * TODO: This is techdebt\n-     * This is used to control the order of how commands are applied, which is done because\n-     * we don't take read locks, and so the order or how we change things lowers the risk\n-     * of reading invalid state. This should be removed once eg. MVCC or read locks has been\n-     * implemented.\n-     */\n-    public enum Mode\n+  private int keyHash;\n+  private long key;\n+  private Mode mode;\n+\n+  /*\n+   * TODO: This is techdebt\n+   * This is used to control the order of how commands are applied, which is done because\n+   * we don't take read locks, and so the order or how we change things lowers the risk\n+   * of reading invalid state. This should be removed once eg. MVCC or read locks has been\n+   * implemented.\n+   */\n+  public enum Mode\n+  {\n+    CREATE,\n+    UPDATE,\n+    DELETE;\n+\n+    public static Mode fromRecordState(boolean created, boolean inUse)\n     {\n-        CREATE,\n-        UPDATE,\n-        DELETE;\n-\n-        public static Mode fromRecordState( boolean created, boolean inUse )\n-        {\n-            if ( !inUse )\n-            {\n-                return DELETE;\n-            }\n-            if ( created )\n-            {\n-                return CREATE;\n-            }\n-            return UPDATE;\n-        }\n-\n-        public static Mode fromRecordState( AbstractBaseRecord record )\n-        {\n-            return fromRecordState( record.isCreated(), record.inUse() );\n-        }\n+      if (!inUse)\n+      {\n+        return DELETE;\n+      }\n+      if (created)\n+      {\n+        return CREATE;\n+      }\n+      return UPDATE;\n     }\n \n+    public static Mode fromRecordState(AbstractBaseRecord record)\n+    {\n+      return fromRecordState(record.isCreated(), record.inUse());\n+    }\n+  }\n+\n+  /**\n+   * Many commands have before/after versions of their records. In some scenarios there's a need\n+   * to parameterize which of those to work with.\n+   */\n+  public enum Version\n+  {\n     /**\n-     * Many commands have before/after versions of their records. In some scenarios there's a need\n-     * to parameterize which of those to work with.\n+     * The \"before\" version of a command's record. I.e. the record how it looked before changes took place.\n      */\n-    public enum Version\n-    {\n-        /**\n-         * The \"before\" version of a command's record. I.e. the record how it looked before changes took place.\n-         */\n-        BEFORE\n+    BEFORE\n         {\n-            @Override\n-            <RECORD extends AbstractBaseRecord> RECORD select( BaseCommand<RECORD> command )\n-            {\n-                return command.getBefore();\n-            }\n+          @Override\n+          <RECORD extends AbstractBaseRecord> RECORD select(BaseCommand<RECORD> command)\n+          {\n+            return command.getBefore();\n+          }\n         },\n-        /**\n-         * The \"after\" version of a command's record. I.e. the record how it looks after changes took place.\n-         */\n-        AFTER\n+    /**\n+     * The \"after\" version of a command's record. I.e. the record how it looks after changes took place.\n+     */\n+    AFTER\n         {\n-            @Override\n-            <RECORD extends AbstractBaseRecord> RECORD select( BaseCommand<RECORD> command )\n-            {\n-                return command.getAfter();\n-            }\n+          @Override\n+          <RECORD extends AbstractBaseRecord> RECORD select(BaseCommand<RECORD> command)\n+          {\n+            return command.getAfter();\n+          }\n         };\n \n-        /**\n-         * Selects one of the versions of a {@link BaseCommand}.\n-         *\n-         * @param command command to select a version from.\n-         * @return the specific record version in this command.\n-         */\n-        abstract <RECORD extends AbstractBaseRecord> RECORD select( BaseCommand<RECORD> command );\n+    /**\n+     * Selects one of the versions of a {@link BaseCommand}.\n+     *\n+     * @param command command to select a version from.\n+     * @return the specific record version in this command.\n+     */\n+    abstract <RECORD extends AbstractBaseRecord> RECORD select(BaseCommand<RECORD> command);\n+  }\n+\n+  protected final void setup(long key, Mode mode)\n+  {\n+    this.mode = mode;\n+    this.keyHash = (int) ((key >>> 32) ^ key);\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return keyHash;\n+  }\n+\n+  // Force implementors to implement toString\n+  @Override\n+  public abstract String toString();\n+\n+  public long getKey()\n+  {\n+    return key;\n+  }\n+\n+  public Mode getMode()\n+  {\n+    return mode;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    return o != null && o.getClass().equals(getClass()) && getKey() == ((Command) o).getKey();\n+  }\n+\n+  public abstract boolean handle(CommandVisitor handler) throws IOException;\n+\n+  protected String beforeAndAfterToString(AbstractBaseRecord before, AbstractBaseRecord after)\n+  {\n+    return format(\" -%s%n         +%s\", before, after);\n+  }\n+\n+  void writeDynamicRecords(WritableChannel channel, Collection<DynamicRecord> records) throws IOException\n+  {\n+    writeDynamicRecords(channel, records, records.size());\n+  }\n+\n+  void writeDynamicRecords(WritableChannel channel, Iterable<DynamicRecord> records, int size) throws IOException\n+  {\n+    channel.putInt(size); // 4\n+    for (DynamicRecord record : records)\n+    {\n+      writeDynamicRecord(channel, record);\n     }\n+  }\n \n-    protected final void setup( long key, Mode mode )\n+  void writeDynamicRecord(WritableChannel channel, DynamicRecord record) throws IOException\n+  {\n+    // id+type+in_use(byte)+nr_of_bytes(int)+next_block(long)\n+    if (record.inUse())\n+    {\n+      byte inUse = Record.IN_USE.byteValue();\n+      if (record.isStartRecord())\n+      {\n+        inUse |= Record.FIRST_IN_CHAIN.byteValue();\n+      }\n+      channel.putLong(record.getId())\n+          .putInt(record.getTypeAsInt())\n+          .put(inUse)\n+          .putInt(record.getLength())\n+          .putLong(record.getNextBlock());\n+      byte[] data = record.getData();\n+      assert data != null;\n+      channel.put(data, data.length);\n+    } else\n     {\n-        this.mode = mode;\n-        this.keyHash = (int) ((key >>> 32) ^ key);\n-        this.key = key;\n+      byte inUse = Record.NOT_IN_USE.byteValue();\n+      channel.putLong(record.getId())\n+          .putInt(record.getTypeAsInt())\n+          .put(inUse);\n     }\n+  }\n \n-    @Override\n-    public int hashCode()\n+  public abstract static class BaseCommand<RECORD extends AbstractBaseRecord> extends Command\n+  {\n+    protected final RECORD before;\n+    protected final RECORD after;\n+\n+    public BaseCommand(RECORD before, RECORD after)\n     {\n-        return keyHash;\n+      setup(after.getId(), Mode.fromRecordState(after));\n+      this.before = before;\n+      this.after = after;\n     }\n \n-    // Force implementors to implement toString\n     @Override\n-    public abstract String toString();\n-\n-    public long getKey()\n+    public String toString()\n     {\n-        return key;\n+      return beforeAndAfterToString(before, after);\n     }\n \n-    public Mode getMode()\n+    public RECORD getBefore()\n     {\n-        return mode;\n+      return before;\n     }\n \n-    @Override\n-    public boolean equals( Object o )\n+    public RECORD getAfter()\n     {\n-        return o != null && o.getClass().equals( getClass() ) && getKey() == ((Command) o).getKey();\n+      return after;\n     }\n+  }\n \n-    public abstract boolean handle( CommandVisitor handler ) throws IOException;\n-\n-    protected String beforeAndAfterToString( AbstractBaseRecord before, AbstractBaseRecord after )\n+  public static class NodeCommand extends BaseCommand<NodeRecord>\n+  {\n+    public NodeCommand(NodeRecord before, NodeRecord after)\n     {\n-        return format( \" -%s%n         +%s\", before, after );\n+      super(before, after);\n     }\n \n-    void writeDynamicRecords( WritableChannel channel, Collection<DynamicRecord> records ) throws IOException\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n     {\n-        writeDynamicRecords( channel, records, records.size() );\n+      return handler.visitNodeCommand(this);\n     }\n \n-    void writeDynamicRecords( WritableChannel channel, Iterable<DynamicRecord> records, int size ) throws IOException\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        channel.putInt( size ); // 4\n-        for ( DynamicRecord record : records )\n-        {\n-            writeDynamicRecord( channel, record );\n-        }\n+      channel.put(NeoCommandType.NODE_COMMAND);\n+      channel.putLong(after.getId());\n+      writeNodeRecord(channel, before);\n+      writeNodeRecord(channel, after);\n     }\n \n-    void writeDynamicRecord( WritableChannel channel, DynamicRecord record ) throws IOException\n+    private void writeNodeRecord(WritableChannel channel, NodeRecord record) throws IOException\n     {\n-        // id+type+in_use(byte)+nr_of_bytes(int)+next_block(long)\n-        if ( record.inUse() )\n-        {\n-            byte inUse = Record.IN_USE.byteValue();\n-            if ( record.isStartRecord() )\n-            {\n-                inUse |= Record.FIRST_IN_CHAIN.byteValue();\n-            }\n-            channel.putLong( record.getId() )\n-                   .putInt( record.getTypeAsInt() )\n-                   .put( inUse )\n-                   .putInt( record.getLength() )\n-                   .putLong( record.getNextBlock() );\n-            byte[] data = record.getData();\n-            assert data != null;\n-            channel.put( data, data.length );\n-        }\n-        else\n-        {\n-            byte inUse = Record.NOT_IN_USE.byteValue();\n-            channel.putLong( record.getId() )\n-                   .putInt( record.getTypeAsInt() )\n-                   .put( inUse );\n-        }\n+      byte flags = bitFlags(bitFlag(record.inUse(), Record.IN_USE.byteValue()),\n+          bitFlag(record.isCreated(), Record.CREATED_IN_TX),\n+          bitFlag(record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT),\n+          bitFlag(record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT),\n+          bitFlag(record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT));\n+      channel.put(flags);\n+      if (record.inUse())\n+      {\n+        channel.put(record.isDense() ? (byte) 1 : (byte) 0);\n+        channel.putLong(record.getNextRel()).putLong(record.getNextProp());\n+        channel.putLong(record.getLabelField());\n+        if (record.hasSecondaryUnitId())\n+        {\n+          channel.putLong(record.getSecondaryUnitId());\n+        }\n+      }\n+      // Always write dynamic label records because we want to know which ones have been deleted\n+      // especially if the node has been deleted.\n+      writeDynamicRecords(channel, record.getDynamicLabelRecords());\n     }\n+  }\n \n-    public abstract static class BaseCommand<RECORD extends AbstractBaseRecord> extends Command\n+  public static class RelationshipCommand extends BaseCommand<RelationshipRecord>\n+  {\n+    public RelationshipCommand(RelationshipRecord before, RelationshipRecord after)\n     {\n-        protected final RECORD before;\n-        protected final RECORD after;\n-\n-        public BaseCommand( RECORD before, RECORD after )\n-        {\n-            setup( after.getId(), Mode.fromRecordState( after ) );\n-            this.before = before;\n-            this.after = after;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return beforeAndAfterToString( before, after );\n-        }\n-\n-        public RECORD getBefore()\n-        {\n-            return before;\n-        }\n-\n-        public RECORD getAfter()\n-        {\n-            return after;\n-        }\n+      super(before, after);\n     }\n \n-    public static class NodeCommand extends BaseCommand<NodeRecord>\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n     {\n-        public NodeCommand( NodeRecord before, NodeRecord after )\n-        {\n-            super( before, after );\n-        }\n-\n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitNodeCommand( this );\n-        }\n-\n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.NODE_COMMAND );\n-            channel.putLong( after.getId() );\n-            writeNodeRecord( channel, before );\n-            writeNodeRecord( channel, after );\n-        }\n-\n-        private void writeNodeRecord( WritableChannel channel, NodeRecord record ) throws IOException\n-        {\n-            byte flags = bitFlags( bitFlag( record.inUse(), Record.IN_USE.byteValue() ),\n-                                   bitFlag( record.isCreated(), Record.CREATED_IN_TX ),\n-                                   bitFlag( record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT ),\n-                                   bitFlag( record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT ),\n-                                   bitFlag( record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT ) );\n-            channel.put( flags );\n-            if ( record.inUse() )\n-            {\n-                channel.put( record.isDense() ? (byte) 1 : (byte) 0 );\n-                channel.putLong( record.getNextRel() ).putLong( record.getNextProp() );\n-                channel.putLong( record.getLabelField() );\n-                if ( record.hasSecondaryUnitId() )\n-                {\n-                    channel.putLong( record.getSecondaryUnitId() );\n-                }\n-            }\n-            // Always write dynamic label records because we want to know which ones have been deleted\n-            // especially if the node has been deleted.\n-            writeDynamicRecords( channel, record.getDynamicLabelRecords() );\n-        }\n+      return handler.visitRelationshipCommand(this);\n     }\n \n-    public static class RelationshipCommand extends BaseCommand<RelationshipRecord>\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        public RelationshipCommand( RelationshipRecord before, RelationshipRecord after )\n-        {\n-            super( before, after );\n-        }\n+      channel.put(NeoCommandType.REL_COMMAND);\n+      channel.putLong(after.getId());\n+      writeRelationshipRecord(channel, before);\n+      writeRelationshipRecord(channel, after);\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitRelationshipCommand( this );\n-        }\n+    private void writeRelationshipRecord(WritableChannel channel, RelationshipRecord record) throws IOException\n+    {\n+      byte flags = bitFlags(bitFlag(record.inUse(), Record.IN_USE.byteValue()),\n+          bitFlag(record.isCreated(), Record.CREATED_IN_TX),\n+          bitFlag(record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT),\n+          bitFlag(record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT),\n+          bitFlag(record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT));\n+      channel.put(flags);\n+      if (record.inUse())\n+      {\n+        channel.putLong(record.getFirstNode()).putLong(record.getSecondNode()).putInt(record.getType())\n+            .putLong(record.getFirstPrevRel()).putLong(record.getFirstNextRel())\n+            .putLong(record.getSecondPrevRel()).putLong(record.getSecondNextRel())\n+            .putLong(record.getNextProp())\n+            .put((byte) ((record.isFirstInFirstChain() ? 1 : 0) | (record.isFirstInSecondChain() ? 2 : 0)));\n+        if (record.hasSecondaryUnitId())\n+        {\n+          channel.putLong(record.getSecondaryUnitId());\n+        }\n+      } else\n+      {\n+        channel.putInt(record.getType());\n+      }\n+    }\n+  }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.REL_COMMAND );\n-            channel.putLong( after.getId() );\n-            writeRelationshipRecord( channel, before );\n-            writeRelationshipRecord( channel, after );\n-        }\n+  public static class RelationshipGroupCommand extends BaseCommand<RelationshipGroupRecord>\n+  {\n+    public RelationshipGroupCommand(RelationshipGroupRecord before, RelationshipGroupRecord after)\n+    {\n+      super(before, after);\n+    }\n \n-        private void writeRelationshipRecord( WritableChannel channel, RelationshipRecord record ) throws IOException\n-        {\n-            byte flags = bitFlags( bitFlag( record.inUse(), Record.IN_USE.byteValue() ),\n-                                   bitFlag( record.isCreated(), Record.CREATED_IN_TX ),\n-                                   bitFlag( record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT ),\n-                                   bitFlag( record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT ),\n-                                   bitFlag( record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT ) );\n-            channel.put( flags );\n-            if ( record.inUse() )\n-            {\n-                channel.putLong( record.getFirstNode() ).putLong( record.getSecondNode() ).putInt( record.getType() )\n-                       .putLong( record.getFirstPrevRel() ).putLong( record.getFirstNextRel() )\n-                       .putLong( record.getSecondPrevRel() ).putLong( record.getSecondNextRel() )\n-                       .putLong( record.getNextProp() )\n-                       .put( (byte) ((record.isFirstInFirstChain() ? 1 : 0) | (record.isFirstInSecondChain() ? 2 : 0)) );\n-                if ( record.hasSecondaryUnitId() )\n-                {\n-                    channel.putLong( record.getSecondaryUnitId() );\n-                }\n-            }\n-            else\n-            {\n-                channel.putInt( record.getType() );\n-            }\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitRelationshipGroupCommand(this);\n     }\n \n-    public static class RelationshipGroupCommand extends BaseCommand<RelationshipGroupRecord>\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        public RelationshipGroupCommand( RelationshipGroupRecord before, RelationshipGroupRecord after )\n-        {\n-            super( before, after );\n-        }\n+      channel.put(NeoCommandType.REL_GROUP_COMMAND);\n+      channel.putLong(after.getId());\n+      writeRelationshipGroupRecord(channel, before);\n+      writeRelationshipGroupRecord(channel, after);\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitRelationshipGroupCommand( this );\n-        }\n+    private void writeRelationshipGroupRecord(WritableChannel channel, RelationshipGroupRecord record)\n+        throws IOException\n+    {\n+      byte flags = bitFlags(bitFlag(record.inUse(), Record.IN_USE.byteValue()),\n+          bitFlag(record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT),\n+          bitFlag(record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT),\n+          bitFlag(record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT));\n+      channel.put(flags);\n+      channel.putShort((short) record.getType());\n+      channel.putLong(record.getNext());\n+      channel.putLong(record.getFirstOut());\n+      channel.putLong(record.getFirstIn());\n+      channel.putLong(record.getFirstLoop());\n+      channel.putLong(record.getOwningNode());\n+      if (record.hasSecondaryUnitId())\n+      {\n+        channel.putLong(record.getSecondaryUnitId());\n+      }\n+    }\n+  }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.REL_GROUP_COMMAND );\n-            channel.putLong( after.getId() );\n-            writeRelationshipGroupRecord( channel, before );\n-            writeRelationshipGroupRecord( channel, after );\n-        }\n+  public static class NeoStoreCommand extends BaseCommand<NeoStoreRecord>\n+  {\n+    public NeoStoreCommand(NeoStoreRecord before, NeoStoreRecord after)\n+    {\n+      super(before, after);\n+    }\n \n-        private void writeRelationshipGroupRecord( WritableChannel channel, RelationshipGroupRecord record )\n-                throws IOException\n-        {\n-            byte flags = bitFlags( bitFlag( record.inUse(), Record.IN_USE.byteValue() ),\n-                                   bitFlag( record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT ),\n-                                   bitFlag( record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT ),\n-                                   bitFlag( record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT ) );\n-            channel.put( flags );\n-            channel.putShort( (short) record.getType() );\n-            channel.putLong( record.getNext() );\n-            channel.putLong( record.getFirstOut() );\n-            channel.putLong( record.getFirstIn() );\n-            channel.putLong( record.getFirstLoop() );\n-            channel.putLong( record.getOwningNode() );\n-            if ( record.hasSecondaryUnitId() )\n-            {\n-                channel.putLong( record.getSecondaryUnitId() );\n-            }\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitNeoStoreCommand(this);\n     }\n \n-    public static class NeoStoreCommand extends BaseCommand<NeoStoreRecord>\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        public NeoStoreCommand( NeoStoreRecord before, NeoStoreRecord after )\n-        {\n-            super( before, after );\n-        }\n+      channel.put(NeoCommandType.NEOSTORE_COMMAND);\n+      writeNeoStoreRecord(channel, before);\n+      writeNeoStoreRecord(channel, after);\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitNeoStoreCommand( this );\n-        }\n+    private void writeNeoStoreRecord(WritableChannel channel, NeoStoreRecord record) throws IOException\n+    {\n+      channel.putLong(record.getNextProp());\n+    }\n+  }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.NEOSTORE_COMMAND );\n-            writeNeoStoreRecord( channel, before );\n-            writeNeoStoreRecord( channel, after );\n-        }\n+  public static class PropertyCommand extends BaseCommand<PropertyRecord> implements PropertyRecordChange\n+  {\n+    public PropertyCommand(PropertyRecord before, PropertyRecord after)\n+    {\n+      super(before, after);\n+    }\n \n-        private void writeNeoStoreRecord( WritableChannel channel, NeoStoreRecord record ) throws IOException\n-        {\n-            channel.putLong( record.getNextProp() );\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitPropertyCommand(this);\n     }\n \n-    public static class PropertyCommand extends BaseCommand<PropertyRecord> implements PropertyRecordChange\n+    public long getNodeId()\n     {\n-        public PropertyCommand( PropertyRecord before, PropertyRecord after )\n-        {\n-            super( before, after );\n-        }\n+      return after.getNodeId();\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitPropertyCommand( this );\n-        }\n+    public long getRelId()\n+    {\n+      return after.getRelId();\n+    }\n \n-        public long getNodeId()\n-        {\n-            return after.getNodeId();\n-        }\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.PROP_COMMAND);\n+      channel.putLong(after.getId());\n+      writePropertyRecord(channel, before);\n+      writePropertyRecord(channel, after);\n+    }\n \n-        public long getRelId()\n-        {\n-            return after.getRelId();\n-        }\n+    private void writePropertyRecord(WritableChannel channel, PropertyRecord record) throws IOException\n+    {\n+      byte flags = bitFlags(bitFlag(record.inUse(), Record.IN_USE.byteValue()),\n+          bitFlag(record.getRelId() != -1, Record.REL_PROPERTY.byteValue()),\n+          bitFlag(record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT),\n+          bitFlag(record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT),\n+          bitFlag(record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT));\n+\n+      channel.put(flags); // 1\n+      channel.putLong(record.getNextProp()).putLong(record.getPrevProp()); // 8 + 8\n+      long nodeId = record.getNodeId();\n+      long relId = record.getRelId();\n+      if (nodeId != -1)\n+      {\n+        channel.putLong(nodeId); // 8 or\n+      } else if (relId != -1)\n+      {\n+        channel.putLong(relId); // 8 or\n+      } else\n+      {\n+        // means this records value has not changed, only place in\n+        // prop chain\n+        channel.putLong(-1); // 8\n+      }\n+      if (record.hasSecondaryUnitId())\n+      {\n+        channel.putLong(record.getSecondaryUnitId());\n+      }\n+      channel.put((byte) record.numberOfProperties()); // 1\n+      for (PropertyBlock block : record)\n+      {\n+        assert block.getSize() > 0 : record + \" seems kinda broken\";\n+        writePropertyBlock(channel, block);\n+      }\n+      writeDynamicRecords(channel, record.getDeletedRecords());\n+    }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.PROP_COMMAND );\n-            channel.putLong( after.getId() );\n-            writePropertyRecord( channel, before );\n-            writePropertyRecord( channel, after );\n-        }\n+    private void writePropertyBlock(WritableChannel channel, PropertyBlock block) throws IOException\n+    {\n+      byte blockSize = (byte) block.getSize();\n+      assert blockSize > 0 : blockSize + \" is not a valid block size value\";\n+      channel.put(blockSize); // 1\n+      long[] propBlockValues = block.getValueBlocks();\n+      for (long propBlockValue : propBlockValues)\n+      {\n+        channel.putLong(propBlockValue);\n+      }\n+      /*\n+       * For each block we need to keep its dynamic record chain if\n+       * it is just created. Deleted dynamic records are in the property\n+       * record and dynamic records are never modified. Also, they are\n+       * assigned as a whole, so just checking the first should be enough.\n+       */\n+      if (block.isLight())\n+      {\n+        /*\n+         *  This has to be int. If this record is not light\n+         *  then we have the number of DynamicRecords that follow,\n+         *  which is an int. We do not currently want/have a flag bit so\n+         *  we simplify by putting an int here always\n+         */\n+        channel.putInt(0); // 4 or\n+      } else\n+      {\n+        writeDynamicRecords(channel, block.getValueRecords());\n+      }\n+    }\n+  }\n \n-        private void writePropertyRecord( WritableChannel channel, PropertyRecord record ) throws IOException\n-        {\n-            byte flags = bitFlags( bitFlag( record.inUse(), Record.IN_USE.byteValue() ),\n-                                   bitFlag( record.getRelId() != -1, Record.REL_PROPERTY.byteValue() ),\n-                                   bitFlag( record.requiresSecondaryUnit(), Record.REQUIRE_SECONDARY_UNIT ),\n-                                   bitFlag( record.hasSecondaryUnitId(), Record.HAS_SECONDARY_UNIT ),\n-                                   bitFlag( record.isUseFixedReferences(), Record.USES_FIXED_REFERENCE_FORMAT ) );\n-\n-            channel.put( flags ); // 1\n-            channel.putLong( record.getNextProp() ).putLong( record.getPrevProp() ); // 8 + 8\n-            long nodeId = record.getNodeId();\n-            long relId = record.getRelId();\n-            if ( nodeId != -1 )\n-            {\n-                channel.putLong( nodeId ); // 8 or\n-            }\n-            else if ( relId != -1 )\n-            {\n-                channel.putLong( relId ); // 8 or\n-            }\n-            else\n-            {\n-                // means this records value has not changed, only place in\n-                // prop chain\n-                channel.putLong( -1 ); // 8\n-            }\n-            if ( record.hasSecondaryUnitId() )\n-            {\n-                channel.putLong( record.getSecondaryUnitId() );\n-            }\n-            channel.put( (byte) record.numberOfProperties() ); // 1\n-            for ( PropertyBlock block : record )\n-            {\n-                assert block.getSize() > 0 : record + \" seems kinda broken\";\n-                writePropertyBlock( channel, block );\n-            }\n-            writeDynamicRecords( channel, record.getDeletedRecords() );\n-        }\n+  public abstract static class TokenCommand<RECORD extends TokenRecord> extends BaseCommand<RECORD>\n+  {\n+    public TokenCommand(RECORD before, RECORD after)\n+    {\n+      super(before, after);\n+    }\n \n-        private void writePropertyBlock( WritableChannel channel, PropertyBlock block ) throws IOException\n-        {\n-            byte blockSize = (byte) block.getSize();\n-            assert blockSize > 0 : blockSize + \" is not a valid block size value\";\n-            channel.put( blockSize ); // 1\n-            long[] propBlockValues = block.getValueBlocks();\n-            for ( long propBlockValue : propBlockValues )\n-            {\n-                channel.putLong( propBlockValue );\n-            }\n-            /*\n-             * For each block we need to keep its dynamic record chain if\n-             * it is just created. Deleted dynamic records are in the property\n-             * record and dynamic records are never modified. Also, they are\n-             * assigned as a whole, so just checking the first should be enough.\n-             */\n-            if ( block.isLight() )\n-            {\n-                /*\n-                 *  This has to be int. If this record is not light\n-                 *  then we have the number of DynamicRecords that follow,\n-                 *  which is an int. We do not currently want/have a flag bit so\n-                 *  we simplify by putting an int here always\n-                 */\n-                channel.putInt( 0 ); // 4 or\n-            }\n-            else\n-            {\n-                writeDynamicRecords( channel, block.getValueRecords() );\n-            }\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return beforeAndAfterToString(before, after);\n     }\n+  }\n \n-    public abstract static class TokenCommand<RECORD extends TokenRecord> extends BaseCommand<RECORD>\n+  public static class PropertyKeyTokenCommand extends TokenCommand<PropertyKeyTokenRecord>\n+  {\n+    public PropertyKeyTokenCommand(PropertyKeyTokenRecord before, PropertyKeyTokenRecord after)\n     {\n-        public TokenCommand( RECORD before, RECORD after )\n-        {\n-            super( before, after );\n-        }\n+      super(before, after);\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return beforeAndAfterToString( before, after );\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitPropertyKeyTokenCommand(this);\n     }\n \n-    public static class PropertyKeyTokenCommand extends TokenCommand<PropertyKeyTokenRecord>\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        public PropertyKeyTokenCommand( PropertyKeyTokenRecord before, PropertyKeyTokenRecord after )\n-        {\n-            super( before, after );\n-        }\n+      channel.put(NeoCommandType.PROP_INDEX_COMMAND);\n+      channel.putInt(after.getIntId());\n+      writePropertyKeyTokenRecord(channel, before);\n+      writePropertyKeyTokenRecord(channel, after);\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitPropertyKeyTokenCommand( this );\n-        }\n+    private void writePropertyKeyTokenRecord(WritableChannel channel, PropertyKeyTokenRecord record)\n+        throws IOException\n+    {\n+      // id+in_use(byte)+count(int)+key_blockId(int)+nr_key_records(int)\n+      byte inUse = record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();\n+      channel.put(inUse);\n+      channel.putInt(record.getPropertyCount()).putInt(record.getNameId());\n+      if (record.isLight())\n+      {\n+        channel.putInt(0);\n+      } else\n+      {\n+        writeDynamicRecords(channel, record.getNameRecords());\n+      }\n+    }\n+  }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.PROP_INDEX_COMMAND );\n-            channel.putInt( after.getIntId() );\n-            writePropertyKeyTokenRecord( channel, before );\n-            writePropertyKeyTokenRecord( channel, after );\n-        }\n+  public static class RelationshipTypeTokenCommand extends TokenCommand<RelationshipTypeTokenRecord>\n+  {\n+    public RelationshipTypeTokenCommand(RelationshipTypeTokenRecord before,\n+                                        RelationshipTypeTokenRecord after)\n+    {\n+      super(before, after);\n+    }\n \n-        private void writePropertyKeyTokenRecord( WritableChannel channel, PropertyKeyTokenRecord record )\n-                throws IOException\n-        {\n-            // id+in_use(byte)+count(int)+key_blockId(int)+nr_key_records(int)\n-            byte inUse = record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();\n-            channel.put( inUse );\n-            channel.putInt( record.getPropertyCount() ).putInt( record.getNameId() );\n-            if ( record.isLight() )\n-            {\n-                channel.putInt( 0 );\n-            }\n-            else\n-            {\n-                writeDynamicRecords( channel, record.getNameRecords() );\n-            }\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitRelationshipTypeTokenCommand(this);\n     }\n \n-    public static class RelationshipTypeTokenCommand extends TokenCommand<RelationshipTypeTokenRecord>\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        public RelationshipTypeTokenCommand( RelationshipTypeTokenRecord before,\n-                RelationshipTypeTokenRecord after )\n-        {\n-            super( before, after );\n-        }\n+      channel.put(NeoCommandType.REL_TYPE_COMMAND);\n+      channel.putInt(after.getIntId());\n+      writeRelationshipTypeTokenRecord(channel, before);\n+      writeRelationshipTypeTokenRecord(channel, after);\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitRelationshipTypeTokenCommand( this );\n-        }\n+    private void writeRelationshipTypeTokenRecord(WritableChannel channel, RelationshipTypeTokenRecord record)\n+        throws IOException\n+    {\n+      // id+in_use(byte)+count(int)+key_blockId(int)+nr_key_records(int)\n+      byte inUse = record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();\n+      channel.put(inUse);\n+      channel.putInt(record.getNameId());\n+      if (record.isLight())\n+      {\n+        channel.putInt(0);\n+      } else\n+      {\n+        writeDynamicRecords(channel, record.getNameRecords());\n+      }\n+    }\n+  }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.REL_TYPE_COMMAND );\n-            channel.putInt( after.getIntId() );\n-            writeRelationshipTypeTokenRecord( channel, before );\n-            writeRelationshipTypeTokenRecord( channel, after );\n-        }\n+  public static class LabelTokenCommand extends TokenCommand<LabelTokenRecord>\n+  {\n+    public LabelTokenCommand(LabelTokenRecord before, LabelTokenRecord after)\n+    {\n+      super(before, after);\n+    }\n \n-        private void writeRelationshipTypeTokenRecord( WritableChannel channel, RelationshipTypeTokenRecord record )\n-                throws IOException\n-        {\n-            // id+in_use(byte)+count(int)+key_blockId(int)+nr_key_records(int)\n-            byte inUse = record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();\n-            channel.put( inUse );\n-            channel.putInt( record.getNameId() );\n-            if ( record.isLight() )\n-            {\n-                channel.putInt( 0 );\n-            }\n-            else\n-            {\n-                writeDynamicRecords( channel, record.getNameRecords() );\n-            }\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitLabelTokenCommand(this);\n     }\n \n-    public static class LabelTokenCommand extends TokenCommand<LabelTokenRecord>\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        public LabelTokenCommand( LabelTokenRecord before, LabelTokenRecord after )\n-        {\n-            super( before, after );\n-        }\n+      channel.put(NeoCommandType.LABEL_KEY_COMMAND);\n+      channel.putInt(after.getIntId());\n+      writeLabelTokenRecord(channel, before);\n+      writeLabelTokenRecord(channel, after);\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitLabelTokenCommand( this );\n-        }\n+    private void writeLabelTokenRecord(WritableChannel channel, LabelTokenRecord record) throws IOException\n+    {\n+      // id+in_use(byte)+type_blockId(int)+nr_type_records(int)\n+      byte inUse = record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();\n+      channel.put(inUse).putInt(record.getNameId());\n+      writeDynamicRecords(channel, record.getNameRecords());\n+    }\n+  }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.LABEL_KEY_COMMAND );\n-            channel.putInt( after.getIntId() );\n-            writeLabelTokenRecord( channel, before );\n-            writeLabelTokenRecord( channel, after );\n-        }\n+  public static class SchemaRuleCommand extends Command\n+  {\n+    private final SchemaRecord recordsBefore;\n+    private final SchemaRecord recordsAfter;\n+    private final SchemaRule schemaRule;\n \n-        private void writeLabelTokenRecord( WritableChannel channel, LabelTokenRecord record ) throws IOException\n-        {\n-            // id+in_use(byte)+type_blockId(int)+nr_type_records(int)\n-            byte inUse = record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();\n-            channel.put( inUse ).putInt( record.getNameId() );\n-            writeDynamicRecords( channel, record.getNameRecords() );\n-        }\n+    public SchemaRuleCommand(Collection<DynamicRecord> recordsBefore, Collection<DynamicRecord> recordsAfter,\n+                             SchemaRule schemaRule)\n+    {\n+      this(new SchemaRecord(recordsBefore), new SchemaRecord(recordsAfter), schemaRule);\n     }\n \n-    public static class SchemaRuleCommand extends Command\n+    public SchemaRuleCommand(SchemaRecord recordsBefore, SchemaRecord recordsAfter,\n+                             SchemaRule schemaRule)\n     {\n-        private final SchemaRecord recordsBefore;\n-        private final SchemaRecord recordsAfter;\n-        private final SchemaRule schemaRule;\n+      setup(Iterables.first(recordsAfter).getId(), Mode.fromRecordState(Iterables.first(recordsAfter)));\n+      this.recordsBefore = recordsBefore;\n+      this.recordsAfter = recordsAfter;\n+      this.schemaRule = schemaRule;\n+    }\n \n-        public SchemaRuleCommand( Collection<DynamicRecord> recordsBefore, Collection<DynamicRecord> recordsAfter,\n-                SchemaRule schemaRule )\n-        {\n-            this( new SchemaRecord( recordsBefore ), new SchemaRecord( recordsAfter ), schemaRule );\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      if (schemaRule != null)\n+      {\n+        return getMode() + \":\" + schemaRule.toString();\n+      }\n+      return \"SchemaRule\" + recordsAfter;\n+    }\n \n-        public SchemaRuleCommand( SchemaRecord recordsBefore, SchemaRecord recordsAfter,\n-                SchemaRule schemaRule )\n-        {\n-            setup( Iterables.first( recordsAfter ).getId(), Mode.fromRecordState( Iterables.first( recordsAfter ) ) );\n-            this.recordsBefore = recordsBefore;\n-            this.recordsAfter = recordsAfter;\n-            this.schemaRule = schemaRule;\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitSchemaRuleCommand(this);\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            if ( schemaRule != null )\n-            {\n-                return getMode() + \":\" + schemaRule.toString();\n-            }\n-            return \"SchemaRule\" + recordsAfter;\n-        }\n+    public SchemaRecord getRecordsAfter()\n+    {\n+      return recordsAfter;\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitSchemaRuleCommand( this );\n-        }\n+    public SchemaRule getSchemaRule()\n+    {\n+      return schemaRule;\n+    }\n \n-        public SchemaRecord getRecordsAfter()\n-        {\n-            return recordsAfter;\n-        }\n+    public SchemaRecord getRecordsBefore()\n+    {\n+      return recordsBefore;\n+    }\n \n-        public SchemaRule getSchemaRule()\n-        {\n-            return schemaRule;\n-        }\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.SCHEMA_RULE_COMMAND);\n+      writeDynamicRecords(channel, recordsBefore, recordsBefore.size());\n+      writeDynamicRecords(channel, recordsAfter, recordsAfter.size());\n+      channel.put(Iterables.first(recordsAfter).isCreated() ? (byte) 1 : 0);\n+    }\n+  }\n \n-        public SchemaRecord getRecordsBefore()\n-        {\n-            return recordsBefore;\n-        }\n+  public static class NodeCountsCommand extends Command\n+  {\n+    private final int labelId;\n+    private final long delta;\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.SCHEMA_RULE_COMMAND );\n-            writeDynamicRecords( channel, recordsBefore, recordsBefore.size() );\n-            writeDynamicRecords( channel, recordsAfter, recordsAfter.size() );\n-            channel.put( Iterables.first( recordsAfter ).isCreated() ? (byte) 1 : 0 );\n-        }\n+    public NodeCountsCommand(int labelId, long delta)\n+    {\n+      setup(labelId, Mode.UPDATE);\n+      assert delta != 0 : \"Tried to create a NodeCountsCommand for something that didn't change any count\";\n+      this.labelId = labelId;\n+      this.delta = delta;\n     }\n \n-    public static class NodeCountsCommand extends Command\n+    @Override\n+    public String toString()\n     {\n-        private final int labelId;\n-        private final long delta;\n+      return String.format(\"UpdateCounts[(%s) %s %d]\",\n+          label(labelId), delta < 0 ? \"-\" : \"+\", Math.abs(delta));\n+    }\n \n-        public NodeCountsCommand( int labelId, long delta )\n-        {\n-            setup( labelId, Mode.UPDATE );\n-            assert delta != 0 : \"Tried to create a NodeCountsCommand for something that didn't change any count\";\n-            this.labelId = labelId;\n-            this.delta = delta;\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitNodeCountsCommand(this);\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"UpdateCounts[(%s) %s %d]\",\n-                    label( labelId ), delta < 0 ? \"-\" : \"+\", Math.abs( delta ) );\n-        }\n+    public int labelId()\n+    {\n+      return labelId;\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitNodeCountsCommand( this );\n-        }\n+    public long delta()\n+    {\n+      return delta;\n+    }\n \n-        public int labelId()\n-        {\n-            return labelId;\n-        }\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.UPDATE_NODE_COUNTS_COMMAND);\n+      channel.putInt(labelId())\n+          .putLong(delta());\n+    }\n+  }\n \n-        public long delta()\n-        {\n-            return delta;\n-        }\n+  public static class RelationshipCountsCommand extends Command\n+  {\n+    private final int startLabelId;\n+    private final int typeId;\n+    private final int endLabelId;\n+    private final long delta;\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.UPDATE_NODE_COUNTS_COMMAND );\n-            channel.putInt( labelId() )\n-                   .putLong( delta() );\n-        }\n+    public RelationshipCountsCommand(int startLabelId, int typeId, int endLabelId, long delta)\n+    {\n+      setup(typeId, Mode.UPDATE);\n+      assert delta !=\n+          0 : \"Tried to create a RelationshipCountsCommand for something that didn't change any count\";\n+      this.startLabelId = startLabelId;\n+      this.typeId = typeId;\n+      this.endLabelId = endLabelId;\n+      this.delta = delta;\n     }\n \n-    public static class RelationshipCountsCommand extends Command\n+    @Override\n+    public String toString()\n     {\n-        private final int startLabelId;\n-        private final int typeId;\n-        private final int endLabelId;\n-        private final long delta;\n-\n-        public RelationshipCountsCommand( int startLabelId, int typeId, int endLabelId, long delta )\n-        {\n-            setup( typeId, Mode.UPDATE );\n-            assert delta !=\n-                   0 : \"Tried to create a RelationshipCountsCommand for something that didn't change any count\";\n-            this.startLabelId = startLabelId;\n-            this.typeId = typeId;\n-            this.endLabelId = endLabelId;\n-            this.delta = delta;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"UpdateCounts[(%s)-%s->(%s) %s %d]\",\n-                    label( startLabelId ), relationshipType( typeId ), label( endLabelId ),\n-                    delta < 0 ? \"-\" : \"+\", Math.abs( delta ) );\n-        }\n+      return String.format(\"UpdateCounts[(%s)-%s->(%s) %s %d]\",\n+          label(startLabelId), relationshipType(typeId), label(endLabelId),\n+          delta < 0 ? \"-\" : \"+\", Math.abs(delta));\n+    }\n \n-        @Override\n-        public boolean handle( CommandVisitor handler ) throws IOException\n-        {\n-            return handler.visitRelationshipCountsCommand( this );\n-        }\n+    @Override\n+    public boolean handle(CommandVisitor handler) throws IOException\n+    {\n+      return handler.visitRelationshipCountsCommand(this);\n+    }\n \n-        public int startLabelId()\n-        {\n-            return startLabelId;\n-        }\n+    public int startLabelId()\n+    {\n+      return startLabelId;\n+    }\n \n-        public int typeId()\n-        {\n-            return typeId;\n-        }\n+    public int typeId()\n+    {\n+      return typeId;\n+    }\n \n-        public int endLabelId()\n-        {\n-            return endLabelId;\n-        }\n+    public int endLabelId()\n+    {\n+      return endLabelId;\n+    }\n \n-        public long delta()\n-        {\n-            return delta;\n-        }\n+    public long delta()\n+    {\n+      return delta;\n+    }\n \n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.UPDATE_RELATIONSHIP_COUNTS_COMMAND );\n-            channel.putInt( startLabelId() )\n-                   .putInt( typeId() )\n-                   .putInt( endLabelId() )\n-                   .putLong( delta() );\n-        }\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.UPDATE_RELATIONSHIP_COUNTS_COMMAND);\n+      channel.putInt(startLabelId())\n+          .putInt(typeId())\n+          .putInt(endLabelId())\n+          .putLong(delta());\n     }\n+  }\n }\n",
            "diff_size": 888
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}