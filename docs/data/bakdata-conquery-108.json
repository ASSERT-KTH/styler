{
    "project_name": "bakdata-conquery",
    "error_id": "108",
    "information": {
        "errors": [
            {
                "line": "44",
                "column": "13",
                "severity": "warning",
                "message": "'}' at column 4 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t}\n\t\t\t\treturn idParser.parse(text);\n\t\t\t} catch(Exception e) {\n\t\t\t\treturn (ID) ctxt.handleWeirdStringValue(idClass, text, \"Could not parse an \"+idClass.getSimpleName()+\" from \"+text);\n\t\t\t}\n\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "44",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 4 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/108/IdDeserializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/intellij/108/IdDeserializer.java\nindex e8db4f00f8f..d8f0aacb84e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/108/IdDeserializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/intellij/108/IdDeserializer.java\n@@ -20,57 +20,58 @@ import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import lombok.AllArgsConstructor;\n import lombok.NoArgsConstructor;\n \n-@AllArgsConstructor @NoArgsConstructor\n+@AllArgsConstructor\n+@NoArgsConstructor\n public class IdDeserializer<ID extends IId<?>> extends JsonDeserializer<ID> implements ContextualDeserializer {\n \n-\tprivate Class<ID> idClass;\n-\tprivate Parser<ID> idParser;\n-\tprivate boolean checkForInjectedPrefix;\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic ID deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n-\t\tif(parser.getCurrentToken()==JsonToken.VALUE_STRING) {\n-\t\t\tString text = parser.getText();\n-\t\t\ttry {\n-\t\t\t\tif(checkForInjectedPrefix) {\n-\t\t\t\t\t//check if there was a dataset injected and if it is already a prefix\n-\t\t\t\t\tDataset dataset = (Dataset) ctxt.findInjectableValue(Dataset.class.getName(), null, null);\n-\t\t\t\t\tif(dataset != null) {\n-\t\t\t\t\t\treturn idParser.parsePrefixed(dataset.getName(), text);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\treturn idParser.parse(text);\n-\t\t\t} catch(Exception e) {\n-\t\t\t\treturn (ID) ctxt.handleWeirdStringValue(idClass, text, \"Could not parse an \"+idClass.getSimpleName()+\" from \"+text);\n-\t\t\t}\n-\t\t}\n-\t\treturn (ID) ctxt.handleUnexpectedToken(IId.class, parser.getCurrentToken(), parser, \"name references should be strings\");\n-\t}\n-\t\n-\t@Override\n-\tpublic ID deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n-\t\treturn this.deserialize(p, ctxt);\n-\t}\n+    private Class<ID> idClass;\n+    private Parser<ID> idParser;\n+    private boolean checkForInjectedPrefix;\n \n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@Override\n-\tpublic JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n-\t\tJavaType type = Optional\n-\t\t\t\t.ofNullable(ctxt.getContextualType())\n-\t\t\t\t.orElseGet(Optional.ofNullable(property).map(BeanProperty::getType)::get);\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public ID deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n+        if (parser.getCurrentToken() == JsonToken.VALUE_STRING) {\n+            String text = parser.getText();\n+            try {\n+                if (checkForInjectedPrefix) {\n+                    //check if there was a dataset injected and if it is already a prefix\n+                    Dataset dataset = (Dataset) ctxt.findInjectableValue(Dataset.class.getName(), null, null);\n+                    if (dataset != null) {\n+                        return idParser.parsePrefixed(dataset.getName(), text);\n+                    }\n+                }\n+                return idParser.parse(text);\n+            } catch (Exception e) {\n+                return (ID) ctxt.handleWeirdStringValue(idClass, text, \"Could not parse an \" + idClass.getSimpleName() + \" from \" + text);\n+            }\n+        }\n+        return (ID) ctxt.handleUnexpectedToken(IId.class, parser.getCurrentToken(), parser, \"name references should be strings\");\n+    }\n \n-\t\twhile(type.isContainerType()) {\n-\t\t\ttype = type.getContentType();\n-\t\t}\n-\t\tClass<IId<?>> idClass = (Class<IId<?>>) type.getRawClass();\n-\t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n-\t\t\n-\t\treturn new IdDeserializer(\n-\t\t\tidClass,\n-\t\t\tparser,\n-\t\t\t//we only need to check for the dataset prefix if the id requires it\n-\t\t\tNamespacedId.class.isAssignableFrom(idClass)\n-\t\t);\n-\t}\n+    @Override\n+    public ID deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n+        return this.deserialize(p, ctxt);\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n+        JavaType type = Optional\n+            .ofNullable(ctxt.getContextualType())\n+            .orElseGet(Optional.ofNullable(property).map(BeanProperty::getType)::get);\n+\n+        while (type.isContainerType()) {\n+            type = type.getContentType();\n+        }\n+        Class<IId<?>> idClass = (Class<IId<?>>) type.getRawClass();\n+        Parser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class) idClass);\n+\n+        return new IdDeserializer(\n+            idClass,\n+            parser,\n+            //we only need to check for the dataset prefix if the id requires it\n+            NamespacedId.class.isAssignableFrom(idClass)\n+        );\n+    }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "column": "1",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 3, indentation should be the same level as line 75.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/108/IdDeserializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/naturalize/108/IdDeserializer.java\nindex e8db4f00f8f..ca1d02e6b77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/108/IdDeserializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/naturalize/108/IdDeserializer.java\n@@ -41,7 +41,8 @@ public class IdDeserializer<ID extends IId<?>> extends JsonDeserializer<ID> impl\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn idParser.parse(text);\n-\t\t\t} catch(Exception e) {\n+\t\t\t}\n+catch(Exception e) {\n \t\t\t\treturn (ID) ctxt.handleWeirdStringValue(idClass, text, \"Could not parse an \"+idClass.getSimpleName()+\" from \"+text);\n \t\t\t}\n \t\t}\n@@ -67,10 +68,11 @@ public class IdDeserializer<ID extends IId<?>> extends JsonDeserializer<ID> impl\n \t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n \t\t\n \t\treturn new IdDeserializer(\n-\t\t\tidClass,\n+\tidClass,\n \t\t\tparser,\n-\t\t\t//we only need to check for the dataset prefix if the id requires it\n+\n+//we only need to check for the dataset prefix if the id requires it\n \t\t\tNamespacedId.class.isAssignableFrom(idClass)\n \t\t);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "44",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 4 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "44",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 4 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}