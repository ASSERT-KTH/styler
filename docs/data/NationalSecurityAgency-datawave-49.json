{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "49",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.client.TableNotFoundException;\nimport org.apache.accumulo.core.client.admin.TableOperations;\nimport org.apache.accumulo.core.conf.Property;\nimport org.apache.accumulo.core.iterators.IteratorUtil;\nimport org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\nimport org.apache.hadoop.conf.Configuration;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler/49/AbstractTableConfigHelper.java\nindex df72882c64c..068c8684ef8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler/49/AbstractTableConfigHelper.java\n@@ -16,8 +16,9 @@ import org.apache.accumulo.core.client.AccumuloSecurityException;\n import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.TableNotFoundException;\n import org.apache.accumulo.core.client.admin.TableOperations;\n-import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.iterators.IteratorUtil;\n+import\n+org.apache.accumulo.core.conf.Property;\n+ import org.apache.accumulo.core.iterators.IteratorUtil;\n import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.io.Text;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/49/AbstractTableConfigHelper.java\nindex df72882c64c..f44560d0f06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/49/AbstractTableConfigHelper.java\n@@ -24,235 +24,228 @@ import org.apache.hadoop.io.Text;\n import org.apache.log4j.Logger;\n \n public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n-    \n-    @Override\n-    public abstract void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException;\n-    \n-    @Override\n-    public abstract void configure(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;\n-    \n-    /**\n-     * Sets {@code propertyName} to {@code propertyValue} on table {@code tableName}, unless the property is already set to {@code propertyValue}.\n-     * \n-     * @param tableName\n-     *            the name of the table whose properties are to be modified\n-     * @param propertyName\n-     *            the name of the property to conditionally set\n-     * @param propertyValue\n-     *            the value to which {@code propertyName} will be set\n-     * @param tops\n-     *            accumulo table operations helper for configuring tables\n-     * @param log\n-     *            a {@link Logger} for diagnostic messages\n-     * \n-     * @throws AccumuloException\n-     * @throws AccumuloSecurityException\n-     * @throws TableNotFoundException\n-     */\n-    public static void setPropertyIfNecessary(String tableName, String propertyName, String propertyValue, TableOperations tops, Logger log)\n-                    throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n-        boolean propertySet = false;\n-        for (Entry<String,String> prop : tops.getProperties(tableName)) {\n-            if (prop.getKey().equals(propertyName) && prop.getValue().equals(propertyValue)) {\n-                propertySet = true;\n-                break;\n-            }\n-        }\n-        if (!propertySet) {\n-            tops.setProperty(tableName, propertyName, propertyValue);\n-        }\n+\n+  @Override\n+  public abstract void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException;\n+\n+  @Override\n+  public abstract void configure(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException;\n+\n+  /**\n+   * Sets {@code propertyName} to {@code propertyValue} on table {@code tableName}, unless the property is already set to {@code propertyValue}.\n+   *\n+   * @param tableName     the name of the table whose properties are to be modified\n+   * @param propertyName  the name of the property to conditionally set\n+   * @param propertyValue the value to which {@code propertyName} will be set\n+   * @param tops          accumulo table operations helper for configuring tables\n+   * @param log           a {@link Logger} for diagnostic messages\n+   * @throws AccumuloException\n+   * @throws AccumuloSecurityException\n+   * @throws TableNotFoundException\n+   */\n+  public static void setPropertyIfNecessary(String tableName, String propertyName, String propertyValue,\n+                                            TableOperations tops, Logger log)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+\n+    boolean propertySet = false;\n+    for (Entry<String, String> prop : tops.getProperties(tableName)) {\n+      if (prop.getKey().equals(propertyName) && prop.getValue().equals(propertyValue)) {\n+        propertySet = true;\n+        break;\n+      }\n     }\n-    \n-    /**\n-     * Sets the aggregator configuration on table {@code tableName} to that contained in {@code aggregators}, if {@code tableName} is not already configured\n-     * with the specified aggregators.\n-     * \n-     * @param tableName\n-     *            the name of the table whose configuration is to be modified\n-     * @param aggregators\n-     *            the aggregators that should be set on {@code tableName}\n-     * @param tops\n-     *            accumulo table operations helper for configuring tables\n-     * @param log\n-     *            a {@link Logger} for diagnostic messages\n-     * \n-     * @throws AccumuloException\n-     * @throws AccumuloSecurityException\n-     * @throws TableNotFoundException\n-     */\n-    protected void setAggregatorConfigurationIfNecessary(String tableName, List<CombinerConfiguration> aggregators, TableOperations tops, Logger log)\n-                    throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        if (areAggregatorsConfigured(tableName, aggregators, tops)) {\n-            log.debug(tableName + \" appears to have its aggregators configured already.\");\n-            return;\n-        }\n-        \n-        log.info(\"Configuring aggregators for \" + tableName);\n-        Map<String,String> props = generateInitialTableProperties();\n-        props.putAll(generateAggTableProperties(aggregators));\n-        for (Entry<String,String> prop : props.entrySet()) {\n-            tops.setProperty(tableName, prop.getKey(), prop.getValue());\n-        }\n+    if (!propertySet) {\n+      tops.setProperty(tableName, propertyName, propertyValue);\n     }\n-    \n-    /**\n-     * This calls the generateInitialTableProperties on the IteratorUtil class using reflection because they changed the signature between 1.4.1 and 1.4.2 of\n-     * ACCUMULO and did not supply any backward compatibility (argh).\n-     * \n-     * @return\n-     */\n-    public static Map<String,String> generateInitialTableProperties() {\n-        Map<String,String> props = null;\n-        try {\n-            Method method = IteratorUtil.class.getMethod(\"generateInitialTableProperties\");\n-            props = (Map<String,String>) (method.invoke(null));\n-        } catch (SecurityException e) {\n-            try {\n-                Method method = IteratorUtil.class.getMethod(\"generateInitialTableProperties\", boolean.class);\n-                props = (Map<String,String>) (method.invoke(null, true));\n-            } catch (Exception ex) {\n-                throw new RuntimeException(\"Unable to call generateInitialTableProperties\", ex);\n-            }\n-        } catch (NoSuchMethodException e) {\n-            try {\n-                Method method = IteratorUtil.class.getMethod(\"generateInitialTableProperties\", boolean.class);\n-                props = (Map<String,String>) (method.invoke(null, true));\n-            } catch (Exception ex) {\n-                throw new RuntimeException(\"Unable to call generateInitialTableProperties\", ex);\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Unable to call IteratorUtil.generateInitialTableProperties()\", e);\n-        }\n-        return props;\n+  }\n+\n+  /**\n+   * Sets the aggregator configuration on table {@code tableName} to that contained in {@code aggregators}, if {@code tableName} is not already configured\n+   * with the specified aggregators.\n+   *\n+   * @param tableName   the name of the table whose configuration is to be modified\n+   * @param aggregators the aggregators that should be set on {@code tableName}\n+   * @param tops        accumulo table operations helper for configuring tables\n+   * @param log         a {@link Logger} for diagnostic messages\n+   * @throws AccumuloException\n+   * @throws AccumuloSecurityException\n+   * @throws TableNotFoundException\n+   */\n+  protected void setAggregatorConfigurationIfNecessary(String tableName, List<CombinerConfiguration> aggregators,\n+                                                       TableOperations tops, Logger log)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    if (areAggregatorsConfigured(tableName, aggregators, tops)) {\n+      log.debug(tableName + \" appears to have its aggregators configured already.\");\n+      return;\n     }\n-    \n-    /**\n-     * Indicates whether or not the aggregators specified in {@code aggregators} have been configured on the table {@code tableName}. Note that this does not\n-     * check whether other aggregators are configured on {@code tableName} are configured, only whether the specified ones are or are not.\n-     * \n-     * @param tableName\n-     *            the name of the table to check for {@code aggregators}\n-     * @param aggregators\n-     *            the aggregators to check for on {@code tableName}\n-     * @param tops\n-     *            accumulo table operations helper for configuring tables\n-     * @return {@code true} if {@code aggregators} are configured on {@code tableName} and {@code false} if not\n-     * \n-     * @throws TableNotFoundException\n-     */\n-    protected boolean areAggregatorsConfigured(String tableName, List<CombinerConfiguration> aggregators, TableOperations tops) throws TableNotFoundException {\n-        boolean aggregatorsConfigured = false;\n-        Map<String,String> props = generateInitialTableProperties();\n-        props.putAll(generateAggTableProperties(aggregators));\n-        Iterable<Entry<String,String>> properties;\n-        try {\n-            properties = tops.getProperties(tableName);\n-        } catch (Exception ex) {\n-            throw new RuntimeException(\"Unexpected error checking on aggregators\", ex);\n-        }\n-        for (Entry<String,String> entry : properties) {\n-            String key = entry.getKey();\n-            String actualValue = entry.getValue();\n-            \n-            // Removes the properties already defined on the table\n-            // from set of properties being defined by the caller\n-            String requiredValue = props.remove(key);\n-            \n-            // Check to make sure that caller's expected settings are\n-            // actually going to be set on the table\n-            if (requiredValue != null && !requiredValue.equals(actualValue)) {\n-                // mismatch in value -- put it back in the props map\n-                props.put(key, actualValue);\n-                break;\n-            }\n-        }\n-        // We removed each property from the map if it was already set on the table.\n-        // So, if the aggregators are configured on the table, the props map should be\n-        // empty when we're done iterating over the table configuration.\n-        aggregatorsConfigured = props.isEmpty();\n-        return aggregatorsConfigured;\n+\n+    log.info(\"Configuring aggregators for \" + tableName);\n+    Map<String, String> props = generateInitialTableProperties();\n+    props.putAll(generateAggTableProperties(aggregators));\n+    for (Entry<String, String> prop : props.entrySet()) {\n+      tops.setProperty(tableName, prop.getKey(), prop.getValue());\n     }\n-    \n-    /**\n-     * Set the locality group configuration for a table if necessary. If the specified configuration is not already included in the current group configuration,\n-     * then the new locality groups are merged with the current set and the locality groups are reset for the table.\n-     * \n-     * @param tableName\n-     * @param newLocalityGroups\n-     * @param tops\n-     * @param log\n-     * @throws AccumuloException\n-     * @throws TableNotFoundException\n-     * @throws AccumuloSecurityException\n-     */\n-    protected void setLocalityGroupConfigurationIfNecessary(String tableName, Map<String,Set<Text>> newLocalityGroups, TableOperations tops, Logger log)\n-                    throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n-        if (areLocalityGroupsConfigured(tableName, newLocalityGroups, tops)) {\n-            log.debug(\"Verified the following locality groups are configured for \" + tableName + \": \" + newLocalityGroups);\n-            return;\n-        }\n-        \n-        log.info(\"Creating the locality groups for \" + tableName + \": \" + newLocalityGroups);\n-        Map<String,Set<Text>> localityGroups = tops.getLocalityGroups(tableName);\n-        for (Map.Entry<String,Set<Text>> entry : newLocalityGroups.entrySet()) {\n-            Set<Text> families = localityGroups.get(entry.getKey());\n-            if (families == null) {\n-                families = new HashSet<>();\n-                localityGroups.put(entry.getKey(), families);\n-            }\n-            families.addAll(entry.getValue());\n-        }\n-        tops.setLocalityGroups(tableName, localityGroups);\n-        log.info(\"Reset the locality groups for \" + tableName + \" to \" + localityGroups);\n+  }\n+\n+  /**\n+   * This calls the generateInitialTableProperties on the IteratorUtil class using reflection because they changed the signature between 1.4.1 and 1.4.2 of\n+   * ACCUMULO and did not supply any backward compatibility (argh).\n+   *\n+   * @return\n+   */\n+  public static Map<String, String> generateInitialTableProperties() {\n+    Map<String, String> props = null;\n+    try {\n+      Method method = IteratorUtil.class.getMethod(\"generateInitialTableProperties\");\n+      props = (Map<String, String>) (method.invoke(null));\n+    } catch (SecurityException e) {\n+      try {\n+        Method method = IteratorUtil.class.getMethod(\"generateInitialTableProperties\", boolean.class);\n+        props = (Map<String, String>) (method.invoke(null, true));\n+      } catch (Exception ex) {\n+        throw new RuntimeException(\"Unable to call generateInitialTableProperties\", ex);\n+      }\n+    } catch (NoSuchMethodException e) {\n+      try {\n+        Method method = IteratorUtil.class.getMethod(\"generateInitialTableProperties\", boolean.class);\n+        props = (Map<String, String>) (method.invoke(null, true));\n+      } catch (Exception ex) {\n+        throw new RuntimeException(\"Unable to call generateInitialTableProperties\", ex);\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to call IteratorUtil.generateInitialTableProperties()\", e);\n     }\n-    \n-    /**\n-     * Is the specified configuration already included in the current table configuration for locality groups.\n-     * \n-     * @param tableName\n-     * @param newLocalityGroups\n-     * @param tops\n-     * @return true if the new configuration is already included in the current configuration\n-     * @throws AccumuloException\n-     * @throws TableNotFoundException\n-     * @throws AccumuloSecurityException\n-     */\n-    protected boolean areLocalityGroupsConfigured(String tableName, Map<String,Set<Text>> newLocalityGroups, TableOperations tops) throws AccumuloException,\n-                    TableNotFoundException, AccumuloSecurityException {\n-        Map<String,Set<Text>> localityGroups = tops.getLocalityGroups(tableName);\n-        for (Map.Entry<String,Set<Text>> entry : newLocalityGroups.entrySet()) {\n-            Set<Text> families = localityGroups.get(entry.getKey());\n-            if (families == null) {\n-                return false;\n-            }\n-            if (!families.containsAll(entry.getValue())) {\n-                return false;\n-            }\n-        }\n-        return true;\n+    return props;\n+  }\n+\n+  /**\n+   * Indicates whether or not the aggregators specified in {@code aggregators} have been configured on the table {@code tableName}. Note that this does not\n+   * check whether other aggregators are configured on {@code tableName} are configured, only whether the specified ones are or are not.\n+   *\n+   * @param tableName   the name of the table to check for {@code aggregators}\n+   * @param aggregators the aggregators to check for on {@code tableName}\n+   * @param tops        accumulo table operations helper for configuring tables\n+   * @return {@code true} if {@code aggregators} are configured on {@code tableName} and {@code false} if not\n+   * @throws TableNotFoundException\n+   */\n+  protected boolean areAggregatorsConfigured(String tableName, List<CombinerConfiguration> aggregators,\n+                                             TableOperations tops) throws TableNotFoundException {\n+    boolean aggregatorsConfigured = false;\n+    Map<String, String> props = generateInitialTableProperties();\n+    props.putAll(generateAggTableProperties(aggregators));\n+    Iterable<Entry<String, String>> properties;\n+    try {\n+      properties = tops.getProperties(tableName);\n+    } catch (Exception ex) {\n+      throw new RuntimeException(\"Unexpected error checking on aggregators\", ex);\n     }\n-    \n-    public static Map<String,String> generateAggTableProperties(List<CombinerConfiguration> aggregators) {\n-        \n-        Map<String,String> props = new TreeMap<>();\n-        \n+    for (Entry<String, String> entry : properties) {\n+      String key = entry.getKey();\n+      String actualValue = entry.getValue();\n+\n+      // Removes the properties already defined on the table\n+      // from set of properties being defined by the caller\n+      String requiredValue = props.remove(key);\n+\n+      // Check to make sure that caller's expected settings are\n+      // actually going to be set on the table\n+      if (requiredValue != null && !requiredValue.equals(actualValue)) {\n+        // mismatch in value -- put it back in the props map\n+        props.put(key, actualValue);\n+        break;\n+      }\n+    }\n+    // We removed each property from the map if it was already set on the table.\n+    // So, if the aggregators are configured on the table, the props map should be\n+    // empty when we're done iterating over the table configuration.\n+    aggregatorsConfigured = props.isEmpty();\n+    return aggregatorsConfigured;\n+  }\n+\n+  /**\n+   * Set the locality group configuration for a table if necessary. If the specified configuration is not already included in the current group configuration,\n+   * then the new locality groups are merged with the current set and the locality groups are reset for the table.\n+   *\n+   * @param tableName\n+   * @param newLocalityGroups\n+   * @param tops\n+   * @param log\n+   * @throws AccumuloException\n+   * @throws TableNotFoundException\n+   * @throws AccumuloSecurityException\n+   */\n+  protected void setLocalityGroupConfigurationIfNecessary(String tableName, Map<String, Set<Text>> newLocalityGroups,\n+                                                          TableOperations tops, Logger log)\n+      throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n+    if (areLocalityGroupsConfigured(tableName, newLocalityGroups, tops)) {\n+      log.debug(\"Verified the following locality groups are configured for \" + tableName + \": \" + newLocalityGroups);\n+      return;\n+    }\n+\n+    log.info(\"Creating the locality groups for \" + tableName + \": \" + newLocalityGroups);\n+    Map<String, Set<Text>> localityGroups = tops.getLocalityGroups(tableName);\n+    for (Map.Entry<String, Set<Text>> entry : newLocalityGroups.entrySet()) {\n+      Set<Text> families = localityGroups.get(entry.getKey());\n+      if (families == null) {\n+        families = new HashSet<>();\n+        localityGroups.put(entry.getKey(), families);\n+      }\n+      families.addAll(entry.getValue());\n+    }\n+    tops.setLocalityGroups(tableName, localityGroups);\n+    log.info(\"Reset the locality groups for \" + tableName + \" to \" + localityGroups);\n+  }\n+\n+  /**\n+   * Is the specified configuration already included in the current table configuration for locality groups.\n+   *\n+   * @param tableName\n+   * @param newLocalityGroups\n+   * @param tops\n+   * @return true if the new configuration is already included in the current configuration\n+   * @throws AccumuloException\n+   * @throws TableNotFoundException\n+   * @throws AccumuloSecurityException\n+   */\n+  protected boolean areLocalityGroupsConfigured(String tableName, Map<String, Set<Text>> newLocalityGroups,\n+                                                TableOperations tops) throws AccumuloException,\n+      TableNotFoundException, AccumuloSecurityException {\n+    Map<String, Set<Text>> localityGroups = tops.getLocalityGroups(tableName);\n+    for (Map.Entry<String, Set<Text>> entry : newLocalityGroups.entrySet()) {\n+      Set<Text> families = localityGroups.get(entry.getKey());\n+      if (families == null) {\n+        return false;\n+      }\n+      if (!families.containsAll(entry.getValue())) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  public static Map<String, String> generateAggTableProperties(List<CombinerConfiguration> aggregators) {\n+\n+    Map<String, String> props = new TreeMap<>();\n+\n+    for (IteratorScope iterScope : IteratorScope.values()) {\n+      if (!aggregators.isEmpty()) {\n+        props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg\",\n+            \"10,\" + PropogatingIterator.class.getName());\n+      }\n+    }\n+\n+    for (CombinerConfiguration ac : aggregators) {\n+      for (IteratorSetting.Column column : ac.getColumns()) {\n         for (IteratorScope iterScope : IteratorScope.values()) {\n-            if (!aggregators.isEmpty()) {\n-                props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg\", \"10,\" + PropogatingIterator.class.getName());\n-            }\n-        }\n-        \n-        for (CombinerConfiguration ac : aggregators) {\n-            for (IteratorSetting.Column column : ac.getColumns()) {\n-                for (IteratorScope iterScope : IteratorScope.values()) {\n-                    \n-                    props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg.opt.\" + column.getColumnFamily(), ac.getSettings().getIteratorClass());\n-                }\n-            }\n+\n+          props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg.opt.\" + column.getColumnFamily(),\n+              ac.getSettings().getIteratorClass());\n         }\n-        \n-        return props;\n+      }\n     }\n-    \n+\n+    return props;\n+  }\n+\n }\n",
            "diff_size": 317
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/49/AbstractTableConfigHelper.java\nindex df72882c64c..caa1679eed5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/49/AbstractTableConfigHelper.java\n@@ -51,8 +51,7 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      */\n     public static void setPropertyIfNecessary(String tableName, String propertyName, String propertyValue, TableOperations tops, Logger log)\n                     throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n-        boolean propertySet = false;\n+    boolean propertySet = false;\n         for (Entry<String,String> prop : tops.getProperties(tableName)) {\n             if (prop.getKey().equals(propertyName) && prop.getValue().equals(propertyValue)) {\n                 propertySet = true;\n@@ -255,4 +254,4 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n         return props;\n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/49/AbstractTableConfigHelper.java\nindex df72882c64c..604861e4969 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/49/AbstractTableConfigHelper.java\n@@ -7,10 +7,8 @@ import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n import java.util.TreeMap;\n-\n import datawave.ingest.table.aggregator.CombinerConfiguration;\n import datawave.iterators.PropogatingIterator;\n-\n import org.apache.accumulo.core.client.AccumuloException;\n import org.apache.accumulo.core.client.AccumuloSecurityException;\n import org.apache.accumulo.core.client.IteratorSetting;\n@@ -23,11 +21,11 @@ import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.io.Text;\n import org.apache.log4j.Logger;\n \n+\n public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n-    \n     @Override\n     public abstract void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException;\n-    \n+\n     @Override\n     public abstract void configure(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;\n     \n@@ -49,9 +47,8 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      * @throws AccumuloSecurityException\n      * @throws TableNotFoundException\n      */\n-    public static void setPropertyIfNecessary(String tableName, String propertyName, String propertyValue, TableOperations tops, Logger log)\n-                    throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n+\n+    public static void setPropertyIfNecessary(String tableName, String propertyName, String propertyValue, TableOperations tops, Logger log) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         boolean propertySet = false;\n         for (Entry<String,String> prop : tops.getProperties(tableName)) {\n             if (prop.getKey().equals(propertyName) && prop.getValue().equals(propertyValue)) {\n@@ -59,6 +56,8 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n                 break;\n             }\n         }\n+\n+\n         if (!propertySet) {\n             tops.setProperty(tableName, propertyName, propertyValue);\n         }\n@@ -81,16 +80,17 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      * @throws AccumuloSecurityException\n      * @throws TableNotFoundException\n      */\n-    protected void setAggregatorConfigurationIfNecessary(String tableName, List<CombinerConfiguration> aggregators, TableOperations tops, Logger log)\n-                    throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+\n+    protected void setAggregatorConfigurationIfNecessary(String tableName, List<CombinerConfiguration> aggregators, TableOperations tops, Logger log) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         if (areAggregatorsConfigured(tableName, aggregators, tops)) {\n             log.debug(tableName + \" appears to have its aggregators configured already.\");\n             return;\n         }\n-        \n         log.info(\"Configuring aggregators for \" + tableName);\n+\n         Map<String,String> props = generateInitialTableProperties();\n         props.putAll(generateAggTableProperties(aggregators));\n+\n         for (Entry<String,String> prop : props.entrySet()) {\n             tops.setProperty(tableName, prop.getKey(), prop.getValue());\n         }\n@@ -102,6 +102,7 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      * \n      * @return\n      */\n+\n     public static Map<String,String> generateInitialTableProperties() {\n         Map<String,String> props = null;\n         try {\n@@ -141,10 +142,12 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      * \n      * @throws TableNotFoundException\n      */\n+\n     protected boolean areAggregatorsConfigured(String tableName, List<CombinerConfiguration> aggregators, TableOperations tops) throws TableNotFoundException {\n         boolean aggregatorsConfigured = false;\n         Map<String,String> props = generateInitialTableProperties();\n         props.putAll(generateAggTableProperties(aggregators));\n+\n         Iterable<Entry<String,String>> properties;\n         try {\n             properties = tops.getProperties(tableName);\n@@ -186,14 +189,14 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      * @throws TableNotFoundException\n      * @throws AccumuloSecurityException\n      */\n-    protected void setLocalityGroupConfigurationIfNecessary(String tableName, Map<String,Set<Text>> newLocalityGroups, TableOperations tops, Logger log)\n-                    throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n+\n+    protected void setLocalityGroupConfigurationIfNecessary(String tableName, Map<String,Set<Text>> newLocalityGroups, TableOperations tops, Logger log) throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n         if (areLocalityGroupsConfigured(tableName, newLocalityGroups, tops)) {\n             log.debug(\"Verified the following locality groups are configured for \" + tableName + \": \" + newLocalityGroups);\n             return;\n         }\n-        \n         log.info(\"Creating the locality groups for \" + tableName + \": \" + newLocalityGroups);\n+\n         Map<String,Set<Text>> localityGroups = tops.getLocalityGroups(tableName);\n         for (Map.Entry<String,Set<Text>> entry : newLocalityGroups.entrySet()) {\n             Set<Text> families = localityGroups.get(entry.getKey());\n@@ -218,41 +221,38 @@ public abstract class AbstractTableConfigHelper implements TableConfigHelper {\n      * @throws TableNotFoundException\n      * @throws AccumuloSecurityException\n      */\n-    protected boolean areLocalityGroupsConfigured(String tableName, Map<String,Set<Text>> newLocalityGroups, TableOperations tops) throws AccumuloException,\n-                    TableNotFoundException, AccumuloSecurityException {\n+\n+    protected boolean areLocalityGroupsConfigured(String tableName, Map<String,Set<Text>> newLocalityGroups, TableOperations tops) throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n         Map<String,Set<Text>> localityGroups = tops.getLocalityGroups(tableName);\n         for (Map.Entry<String,Set<Text>> entry : newLocalityGroups.entrySet()) {\n             Set<Text> families = localityGroups.get(entry.getKey());\n             if (families == null) {\n                 return false;\n             }\n+\n+\n             if (!families.containsAll(entry.getValue())) {\n                 return false;\n             }\n         }\n         return true;\n     }\n-    \n+\n     public static Map<String,String> generateAggTableProperties(List<CombinerConfiguration> aggregators) {\n-        \n         Map<String,String> props = new TreeMap<>();\n-        \n         for (IteratorScope iterScope : IteratorScope.values()) {\n             if (!aggregators.isEmpty()) {\n                 props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg\", \"10,\" + PropogatingIterator.class.getName());\n             }\n         }\n-        \n         for (CombinerConfiguration ac : aggregators) {\n             for (IteratorSetting.Column column : ac.getColumns()) {\n                 for (IteratorScope iterScope : IteratorScope.values()) {\n-                    \n-                    props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg.opt.\" + column.getColumnFamily(), ac.getSettings().getIteratorClass());\n+                    props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".agg.opt.\" + column.getColumnFamily(),\n+                        ac.getSettings().getIteratorClass());\n                 }\n             }\n         }\n-        \n         return props;\n     }\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler_three_grams/49/AbstractTableConfigHelper.java\nindex df72882c64c..068c8684ef8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/49/AbstractTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler_three_grams/49/AbstractTableConfigHelper.java\n@@ -16,8 +16,9 @@ import org.apache.accumulo.core.client.AccumuloSecurityException;\n import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.TableNotFoundException;\n import org.apache.accumulo.core.client.admin.TableOperations;\n-import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.iterators.IteratorUtil;\n+import\n+org.apache.accumulo.core.conf.Property;\n+ import org.apache.accumulo.core.iterators.IteratorUtil;\n import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.io.Text;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}