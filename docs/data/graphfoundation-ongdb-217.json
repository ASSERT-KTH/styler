{
    "project_name": "graphfoundation-ongdb",
    "error_id": "217",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "214",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "247",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "257",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "657",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "659",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "659",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/217/NeoStores.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/217/NeoStores.java\nindex c98f135dae3..459d2be9526 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/217/NeoStores.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/217/NeoStores.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -71,624 +72,615 @@ import static org.neo4j.kernel.impl.store.MetaDataStore.versionLongToString;\n  */\n public class NeoStores implements AutoCloseable\n {\n-    private static final String STORE_ALREADY_CLOSED_MESSAGE = \"Specified store was already closed.\";\n-    private static final String STORE_NOT_INITIALIZED_TEMPLATE = \"Specified store was not initialized. Please specify\" +\n-                                                                 \" %s as one of the stores types that should be open\" +\n-                                                                 \" to be able to use it.\";\n-\n-    public static boolean isStorePresent( PageCache pageCache, File storeDir )\n-    {\n-        File metaDataStore = new File( storeDir, MetaDataStore.DEFAULT_NAME );\n-        try ( PagedFile ignore = pageCache.map( metaDataStore, MetaDataStore.getPageSize( pageCache ) ) )\n-        {\n-            return true;\n-        }\n-        catch ( IOException e )\n-        {\n-            return false;\n-        }\n-    }\n-\n-    private static final StoreType[] STORE_TYPES = StoreType.values();\n+  private static final String STORE_ALREADY_CLOSED_MESSAGE = \"Specified store was already closed.\";\n+  private static final String STORE_NOT_INITIALIZED_TEMPLATE = \"Specified store was not initialized. Please specify\" +\n+      \" %s as one of the stores types that should be open\" +\n+      \" to be able to use it.\";\n \n-    private final Predicate<StoreType> INSTANTIATED_RECORD_STORES = new Predicate<StoreType>()\n+  public static boolean isStorePresent(PageCache pageCache, File storeDir)\n+  {\n+    File metaDataStore = new File(storeDir, MetaDataStore.DEFAULT_NAME);\n+    try (PagedFile ignore = pageCache.map(metaDataStore, MetaDataStore.getPageSize(pageCache)))\n     {\n-        @Override\n-        public boolean test( StoreType type )\n-        {\n-            return type.isRecordStore() && stores[type.ordinal()] != null;\n-        }\n-    };\n-\n-    private final Config config;\n-    private final IdGeneratorFactory idGeneratorFactory;\n-    private final PageCache pageCache;\n-    private final LogProvider logProvider;\n-    private final VersionContextSupplier versionContextSupplier;\n-    private final boolean createIfNotExist;\n-    private final File storeDir;\n-    private final File neoStoreFileName;\n-    private final StoreType[] initializedStores;\n-    private final FileSystemAbstraction fileSystemAbstraction;\n-    private final RecordFormats recordFormats;\n-    // All stores, as Object due to CountsTracker being different that all other stores.\n-    private final Object[] stores;\n-    private final OpenOption[] openOptions;\n-\n-    NeoStores(\n-            File neoStoreFileName,\n-            Config config,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            final LogProvider logProvider,\n-            FileSystemAbstraction fileSystemAbstraction,\n-            VersionContextSupplier versionContextSupplier,\n-            RecordFormats recordFormats,\n-            boolean createIfNotExist,\n-            StoreType[] storeTypes,\n-            OpenOption[] openOptions )\n+      return true;\n+    } catch (IOException e)\n     {\n-        this.neoStoreFileName = neoStoreFileName;\n-        this.config = config;\n-        this.idGeneratorFactory = idGeneratorFactory;\n-        this.pageCache = pageCache;\n-        this.logProvider = logProvider;\n-        this.fileSystemAbstraction = fileSystemAbstraction;\n-        this.versionContextSupplier = versionContextSupplier;\n-        this.recordFormats = recordFormats;\n-        this.createIfNotExist = createIfNotExist;\n-        this.openOptions = openOptions;\n-        this.storeDir = neoStoreFileName.getParentFile();\n-\n-        verifyRecordFormat();\n-        stores = new Object[StoreType.values().length];\n-        try\n-        {\n-            for ( StoreType type : storeTypes )\n-            {\n-                getOrCreateStore( type );\n-            }\n-        }\n-        catch ( RuntimeException initException )\n-        {\n-            try\n-            {\n-                close();\n-            }\n-            catch ( RuntimeException closeException )\n-            {\n-                initException.addSuppressed( closeException );\n-            }\n-            throw initException;\n-        }\n-        initializedStores = storeTypes;\n+      return false;\n     }\n+  }\n \n-    public File getStoreDir()\n-    {\n-        return storeDir;\n-    }\n+  private static final StoreType[] STORE_TYPES = StoreType.values();\n \n-    private File getStoreFile( String substoreName )\n-    {\n-        return new File( neoStoreFileName.getPath() + substoreName );\n-    }\n-\n-    /**\n-     * Closes the node,relationship,property and relationship type stores.\n-     */\n+  private final Predicate<StoreType> INSTANTIATED_RECORD_STORES = new Predicate<StoreType>()\n+  {\n     @Override\n-    public void close()\n-    {\n-        RuntimeException ex = null;\n-        for ( StoreType type : STORE_TYPES )\n-        {\n-            try\n-            {\n-                closeStore( type );\n-            }\n-            catch ( RuntimeException t )\n-            {\n-                ex = Exceptions.chain( ex, t );\n-            }\n-        }\n-\n-        if ( ex != null )\n-        {\n-            throw ex;\n-        }\n-    }\n-\n-    private void verifyRecordFormat()\n-    {\n-        try\n-        {\n-            String expectedStoreVersion = recordFormats.storeVersion();\n-            long record = getRecord( pageCache, neoStoreFileName, STORE_VERSION );\n-            if ( record != MetaDataRecordFormat.FIELD_NOT_PRESENT )\n-            {\n-                String actualStoreVersion = versionLongToString( record );\n-                RecordFormats actualStoreFormat = RecordFormatSelector.selectForVersion( actualStoreVersion );\n-                if ( !isCompatibleFormats( actualStoreFormat ) )\n-                {\n-                    throw new UnexpectedStoreVersionException( actualStoreVersion, expectedStoreVersion );\n-                }\n-            }\n-        }\n-        catch ( NoSuchFileException e )\n-        {\n-            // Occurs when there is no file, which is obviously when creating a store.\n-            // Caught as an exception because we want to leave as much interaction with files as possible\n-            // to the page cache.\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( e );\n-        }\n-    }\n-\n-    private boolean isCompatibleFormats( RecordFormats storeFormat )\n-    {\n-        return FormatFamily.isSameFamily( recordFormats, storeFormat ) &&\n-               recordFormats.hasCompatibleCapabilities( storeFormat, CapabilityType.FORMAT ) &&\n-               recordFormats.generation() >= storeFormat.generation();\n-    }\n-\n-    private void closeStore( StoreType type )\n-    {\n-        int i = type.ordinal();\n-        if ( stores[i] != null )\n-        {\n-            try\n-            {\n-                type.close( this, stores[i] );\n-            }\n-            finally\n-            {\n-                stores[i] = null;\n-            }\n-        }\n-    }\n-\n-    public void flush( IOLimiter limiter )\n-    {\n-        try\n-        {\n-            CountsTracker counts = (CountsTracker) stores[StoreType.COUNTS.ordinal()];\n-            if ( counts != null )\n-            {\n-                counts.rotate( getMetaDataStore().getLastCommittedTransactionId() );\n-            }\n-            pageCache.flushAndForce( limiter );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Failed to flush\", e );\n-        }\n-    }\n-\n-    private Object openStore( StoreType type )\n-    {\n-        int storeIndex = type.ordinal();\n-        Object store = type.open( this );\n-        stores[storeIndex] = store;\n-        return store;\n-    }\n-\n-    <T extends CommonAbstractStore> T initialize( T store )\n-    {\n-        store.initialise( createIfNotExist );\n-        return store;\n-    }\n-\n-    /**\n-     * Returns specified store by type from already opened store array. If store is not opened exception will be\n-     * thrown.\n-     *\n-     * @see #getOrCreateStore\n-     * @param storeType store type to retrieve\n-     * @return store of requested type\n-     * @throws IllegalStateException if opened store not found\n-     */\n-    private Object getStore( StoreType storeType )\n-    {\n-        Object store = stores[storeType.ordinal()];\n-        if ( store == null )\n-        {\n-            String message = ArrayUtil.contains( initializedStores, storeType ) ? STORE_ALREADY_CLOSED_MESSAGE :\n-                             String.format( STORE_NOT_INITIALIZED_TEMPLATE, storeType.name() );\n-            throw new IllegalStateException( message );\n-        }\n-        return store;\n-    }\n-\n-    /**\n-     * Returns specified store by type from already opened store array. Will open a new store if can't find any.\n-     * Should be used only during construction of stores.\n-     *\n-     * @see #getStore\n-     * @param storeType store type to get or create\n-     * @return store of requested type\n-     */\n-    private Object getOrCreateStore( StoreType storeType )\n-    {\n-        Object store = stores[storeType.ordinal()];\n-        if ( store == null )\n-        {\n-            store = openStore( storeType );\n-        }\n-        return store;\n-    }\n-\n-    /**\n-     * @return the NeoStore.\n-     */\n-    public MetaDataStore getMetaDataStore()\n-    {\n-        return (MetaDataStore) getStore( StoreType.META_DATA );\n-    }\n-\n-    /**\n-     * @return The node store\n-     */\n-    public NodeStore getNodeStore()\n-    {\n-        return (NodeStore) getStore( StoreType.NODE );\n-    }\n-\n-    private DynamicArrayStore getNodeLabelStore()\n-    {\n-        return (DynamicArrayStore) getStore( StoreType.NODE_LABEL );\n-    }\n-\n-    /**\n-     * The relationship store.\n-     *\n-     * @return The relationship store\n-     */\n-    public RelationshipStore getRelationshipStore()\n-    {\n-        return (RelationshipStore) getStore( StoreType.RELATIONSHIP );\n-    }\n-\n-    /**\n-     * Returns the relationship type store.\n-     *\n-     * @return The relationship type store\n-     */\n-    public RelationshipTypeTokenStore getRelationshipTypeTokenStore()\n-    {\n-        return (RelationshipTypeTokenStore) getStore( StoreType.RELATIONSHIP_TYPE_TOKEN );\n-    }\n-\n-    private DynamicStringStore getRelationshipTypeTokenNamesStore()\n-    {\n-        return (DynamicStringStore) getStore( StoreType.RELATIONSHIP_TYPE_TOKEN_NAME );\n-    }\n-\n-    /**\n-     * Returns the label store.\n-     *\n-     * @return The label store\n-     */\n-    public LabelTokenStore getLabelTokenStore()\n-    {\n-        return (LabelTokenStore) getStore( StoreType.LABEL_TOKEN );\n-    }\n-\n-    private DynamicStringStore getLabelTokenNamesStore()\n-    {\n-        return (DynamicStringStore) getStore( StoreType.LABEL_TOKEN_NAME );\n-    }\n-\n-    /**\n-     * Returns the property store.\n-     *\n-     * @return The property store\n-     */\n-    public PropertyStore getPropertyStore()\n-    {\n-        return (PropertyStore) getStore( StoreType.PROPERTY );\n-    }\n-\n-    private DynamicStringStore getStringPropertyStore()\n-    {\n-        return (DynamicStringStore) getStore( StoreType.PROPERTY_STRING );\n-    }\n-\n-    private DynamicArrayStore getArrayPropertyStore()\n-    {\n-        return (DynamicArrayStore) getStore( StoreType.PROPERTY_ARRAY );\n-    }\n-\n-    /**\n-     * @return the {@link PropertyKeyTokenStore}\n-     */\n-    public PropertyKeyTokenStore getPropertyKeyTokenStore()\n-    {\n-        return (PropertyKeyTokenStore) getStore( StoreType.PROPERTY_KEY_TOKEN );\n-    }\n-\n-    private DynamicStringStore getPropertyKeyTokenNamesStore()\n-    {\n-        return (DynamicStringStore) getStore( StoreType.PROPERTY_KEY_TOKEN_NAME );\n-    }\n-\n-    /**\n-     * The relationship group store.\n-     *\n-     * @return The relationship group store.\n-     */\n-    public RelationshipGroupStore getRelationshipGroupStore()\n-    {\n-        return (RelationshipGroupStore) getStore( StoreType.RELATIONSHIP_GROUP );\n-    }\n-\n-    /**\n-     * @return the schema store.\n-     */\n-    public SchemaStore getSchemaStore()\n-    {\n-        return (SchemaStore) getStore( StoreType.SCHEMA );\n-    }\n-\n-    public CountsTracker getCounts()\n-    {\n-        return (CountsTracker) getStore( StoreType.COUNTS );\n-    }\n-\n-    private CountsTracker createWritableCountsTracker( File fileName )\n-    {\n-        return new CountsTracker( logProvider, fileSystemAbstraction, pageCache, config, fileName,\n-                versionContextSupplier );\n-    }\n-\n-    private ReadOnlyCountsTracker createReadOnlyCountsTracker( File fileName )\n-    {\n-        return new ReadOnlyCountsTracker( logProvider, fileSystemAbstraction, pageCache, config, fileName );\n-    }\n-\n-    private Iterable<CommonAbstractStore> instantiatedRecordStores()\n-    {\n-        Iterator<StoreType> storeTypes = new FilteringIterator<>( iterator( STORE_TYPES ), INSTANTIATED_RECORD_STORES );\n-        return loop( new IteratorWrapper<CommonAbstractStore,StoreType>( storeTypes )\n-        {\n-            @Override\n-            protected CommonAbstractStore underlyingObjectToObject( StoreType type )\n-            {\n-                return (CommonAbstractStore) stores[type.ordinal()];\n-            }\n-        } );\n-    }\n-\n-    public void makeStoreOk()\n-    {\n-        visitStore( store ->\n-        {\n-            store.makeStoreOk();\n-            return false;\n-        } );\n-    }\n-\n-    /**\n-     * Throws cause of store not being OK.\n-     */\n-    public void verifyStoreOk()\n-    {\n-        visitStore( store ->\n-        {\n-            store.checkStoreOk();\n-            return false;\n-        } );\n-    }\n-\n-    public void logVersions( Logger msgLog )\n-    {\n-        msgLog.log( \"Store versions:\" );\n-        visitStore( store ->\n-        {\n-            store.logVersions( msgLog );\n-            return false;\n-        } );\n-    }\n-\n-    public void logIdUsage( Logger msgLog )\n-    {\n-        msgLog.log( \"Id usage:\" );\n-        visitStore( store ->\n-        {\n-            store.logIdUsage( msgLog );\n-            return false;\n-        } );\n-    }\n-\n-    /**\n-     * Visits this store, and any other store managed by this store.\n-     * TODO this could, and probably should, replace all override-and-do-the-same-thing-to-all-my-managed-stores\n-     * methods like:\n-     * {@link #close()} (where that method could be deleted all together, note a specific behaviour of Counts'Store'})\n-     */\n-    public void visitStore( Visitor<CommonAbstractStore,RuntimeException> visitor )\n-    {\n-        for ( CommonAbstractStore store : instantiatedRecordStores() )\n+    public boolean test(StoreType type)\n+    {\n+      return type.isRecordStore() && stores[type.ordinal()] != null;\n+    }\n+  };\n+\n+  private final Config config;\n+  private final IdGeneratorFactory idGeneratorFactory;\n+  private final PageCache pageCache;\n+  private final LogProvider logProvider;\n+  private final VersionContextSupplier versionContextSupplier;\n+  private final boolean createIfNotExist;\n+  private final File storeDir;\n+  private final File neoStoreFileName;\n+  private final StoreType[] initializedStores;\n+  private final FileSystemAbstraction fileSystemAbstraction;\n+  private final RecordFormats recordFormats;\n+  // All stores, as Object due to CountsTracker being different that all other stores.\n+  private final Object[] stores;\n+  private final OpenOption[] openOptions;\n+\n+  NeoStores(\n+      File neoStoreFileName,\n+      Config config,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      final LogProvider logProvider,\n+      FileSystemAbstraction fileSystemAbstraction,\n+      VersionContextSupplier versionContextSupplier,\n+      RecordFormats recordFormats,\n+      boolean createIfNotExist,\n+      StoreType[] storeTypes,\n+      OpenOption[] openOptions)\n+  {\n+    this.neoStoreFileName = neoStoreFileName;\n+    this.config = config;\n+    this.idGeneratorFactory = idGeneratorFactory;\n+    this.pageCache = pageCache;\n+    this.logProvider = logProvider;\n+    this.fileSystemAbstraction = fileSystemAbstraction;\n+    this.versionContextSupplier = versionContextSupplier;\n+    this.recordFormats = recordFormats;\n+    this.createIfNotExist = createIfNotExist;\n+    this.openOptions = openOptions;\n+    this.storeDir = neoStoreFileName.getParentFile();\n+\n+    verifyRecordFormat();\n+    stores = new Object[StoreType.values().length];\n+    try\n+    {\n+      for (StoreType type : storeTypes)\n+      {\n+        getOrCreateStore(type);\n+      }\n+    } catch (RuntimeException initException)\n+    {\n+      try\n+      {\n+        close();\n+      } catch (RuntimeException closeException)\n+      {\n+        initException.addSuppressed(closeException);\n+      }\n+      throw initException;\n+    }\n+    initializedStores = storeTypes;\n+  }\n+\n+  public File getStoreDir()\n+  {\n+    return storeDir;\n+  }\n+\n+  private File getStoreFile(String substoreName)\n+  {\n+    return new File(neoStoreFileName.getPath() + substoreName);\n+  }\n+\n+  /**\n+   * Closes the node,relationship,property and relationship type stores.\n+   */\n+  @Override\n+  public void close()\n+  {\n+    RuntimeException ex = null;\n+    for (StoreType type : STORE_TYPES)\n+    {\n+      try\n+      {\n+        closeStore(type);\n+      } catch (RuntimeException t)\n+      {\n+        ex = Exceptions.chain(ex, t);\n+      }\n+    }\n+\n+    if (ex != null)\n+    {\n+      throw ex;\n+    }\n+  }\n+\n+  private void verifyRecordFormat()\n+  {\n+    try\n+    {\n+      String expectedStoreVersion = recordFormats.storeVersion();\n+      long record = getRecord(pageCache, neoStoreFileName, STORE_VERSION);\n+      if (record != MetaDataRecordFormat.FIELD_NOT_PRESENT)\n+      {\n+        String actualStoreVersion = versionLongToString(record);\n+        RecordFormats actualStoreFormat = RecordFormatSelector.selectForVersion(actualStoreVersion);\n+        if (!isCompatibleFormats(actualStoreFormat))\n         {\n-            store.visitStore( visitor );\n+          throw new UnexpectedStoreVersionException(actualStoreVersion, expectedStoreVersion);\n         }\n-    }\n-\n-    public void startCountStore() throws IOException\n-    {\n-        // TODO: move this to LifeCycle\n-        getCounts().start();\n-    }\n-\n-    public void deleteIdGenerators()\n-    {\n-        visitStore( store ->\n-        {\n-            store.deleteIdGenerator();\n-            return false;\n-        } );\n-    }\n-\n-    public void assertOpen()\n-    {\n-        if ( stores[StoreType.NODE.ordinal()] == null )\n-        {\n-            throw new IllegalStateException( \"Database has been shutdown\" );\n-        }\n-    }\n-\n-    CommonAbstractStore createDynamicArrayStore( String storeName, IdType idType, Setting<Integer> blockSizeProperty )\n-    {\n-        return createDynamicArrayStore( storeName, idType, config.get( blockSizeProperty ) );\n-    }\n-\n-    CommonAbstractStore createDynamicArrayStore( String storeName, IdType idType, int blockSize )\n-    {\n-        if ( blockSize <= 0 )\n-        {\n-            throw new IllegalArgumentException( \"Block size of dynamic array store should be positive integer.\" );\n-        }\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new DynamicArrayStore( storeFile, config, idType, idGeneratorFactory, pageCache,\n-                logProvider, blockSize, recordFormats, openOptions ) );\n-    }\n-\n-    CommonAbstractStore createNodeStore( String storeName )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new NodeStore( storeFile, config, idGeneratorFactory, pageCache, logProvider,\n-                (DynamicArrayStore) getOrCreateStore( StoreType.NODE_LABEL ), recordFormats, openOptions ) );\n-    }\n-\n-    CommonAbstractStore createPropertyKeyTokenStore( String storeName )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new PropertyKeyTokenStore( storeFile, config, idGeneratorFactory,\n-                pageCache, logProvider, (DynamicStringStore) getOrCreateStore( StoreType.PROPERTY_KEY_TOKEN_NAME ),\n-                recordFormats, openOptions ) );\n-    }\n-\n-    CommonAbstractStore createPropertyStore( String storeName )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new PropertyStore( storeFile, config, idGeneratorFactory, pageCache, logProvider,\n-                (DynamicStringStore) getOrCreateStore( StoreType.PROPERTY_STRING ),\n-                (PropertyKeyTokenStore) getOrCreateStore( StoreType.PROPERTY_KEY_TOKEN ),\n-                (DynamicArrayStore) getOrCreateStore( StoreType.PROPERTY_ARRAY ), recordFormats, openOptions ) );\n-    }\n-\n-    CommonAbstractStore createRelationshipStore( String storeName )\n-    {\n-        File file = getStoreFile( storeName );\n-        return initialize( new RelationshipStore( file, config, idGeneratorFactory, pageCache, logProvider,\n-                recordFormats, openOptions ) );\n-    }\n-\n-    CommonAbstractStore createDynamicStringStore( String storeName, IdType idType,\n-            Setting<Integer> blockSizeProperty )\n-    {\n-        return createDynamicStringStore( storeName, idType, config.get( blockSizeProperty ) );\n-    }\n-\n-    CommonAbstractStore createDynamicStringStore( String storeName, IdType idType, int blockSize )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new DynamicStringStore( storeFile, config, idType, idGeneratorFactory,\n-                pageCache, logProvider, blockSize, recordFormats.dynamic(), recordFormats.storeVersion(),\n-                openOptions ) );\n-    }\n-\n-    CommonAbstractStore createRelationshipTypeTokenStore( String storeName )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new RelationshipTypeTokenStore( storeFile, config, idGeneratorFactory,\n-                pageCache, logProvider,\n-                (DynamicStringStore) getOrCreateStore( StoreType.RELATIONSHIP_TYPE_TOKEN_NAME ), recordFormats,\n-                openOptions ) );\n-    }\n-\n-    CommonAbstractStore createLabelTokenStore( String storeName )\n-    {\n-        File fileName = getStoreFile( storeName );\n-        return initialize( new LabelTokenStore( fileName, config, idGeneratorFactory, pageCache,\n-                logProvider, (DynamicStringStore) getOrCreateStore( StoreType.LABEL_TOKEN_NAME ), recordFormats,\n-                openOptions ) );\n-    }\n-\n-    CommonAbstractStore createSchemaStore( String storeName )\n-    {\n-        File fileName = getStoreFile( storeName );\n-        return initialize( new SchemaStore( fileName, config, IdType.SCHEMA, idGeneratorFactory, pageCache,\n-                logProvider, recordFormats, openOptions ) );\n-    }\n-\n-    CommonAbstractStore createRelationshipGroupStore( String storeName )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        return initialize( new RelationshipGroupStore( storeFile, config, idGeneratorFactory, pageCache, logProvider,\n-                recordFormats, openOptions ) );\n-    }\n-\n-    CountsTracker createCountStore( String storeName )\n-    {\n-        File storeFile = getStoreFile( storeName );\n-        boolean readOnly = config.get( GraphDatabaseSettings.read_only );\n-        CountsTracker counts = readOnly\n-                               ? createReadOnlyCountsTracker( storeFile )\n-                               : createWritableCountsTracker( storeFile );\n-        NeoStores neoStores = this;\n-        counts.setInitializer( new DataInitializer<CountsAccessor.Updater>()\n-        {\n-            private final Log log = logProvider.getLog( MetaDataStore.class );\n-\n-            @Override\n-            public void initialize( CountsAccessor.Updater updater )\n-            {\n-                log.warn( \"Missing counts store, rebuilding it.\" );\n-                new CountsComputer( neoStores, pageCache ).initialize( updater );\n-                log.warn( \"Counts store rebuild completed.\" );\n-            }\n-\n-            @Override\n-            public long initialVersion()\n-            {\n-                return ((MetaDataStore) getOrCreateStore( StoreType.META_DATA )).getLastCommittedTransactionId();\n-            }\n-        } );\n-\n-        try\n-        {\n-            counts.init(); // TODO: move this to LifeCycle\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Failed to initialize counts store\", e );\n-        }\n-        return counts;\n-    }\n-\n-    CommonAbstractStore createMetadataStore()\n-    {\n-        return initialize( new MetaDataStore( neoStoreFileName, config, idGeneratorFactory, pageCache, logProvider,\n-                recordFormats.metaData(), recordFormats.storeVersion(), openOptions ) );\n-    }\n-\n-    public void registerDiagnostics( DiagnosticsManager diagnosticsManager )\n-    {\n-        diagnosticsManager.registerAll( NeoStoresDiagnostics.class, this );\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public <RECORD extends AbstractBaseRecord> RecordStore<RECORD> getRecordStore( StoreType type )\n-    {\n-        assert type.isRecordStore();\n-        return (RecordStore<RECORD>) getStore( type );\n-    }\n-\n-    public RecordFormats getRecordFormats()\n-    {\n-        return recordFormats;\n-    }\n+      }\n+    } catch (NoSuchFileException e)\n+    {\n+      // Occurs when there is no file, which is obviously when creating a store.\n+      // Caught as an exception because we want to leave as much interaction with files as possible\n+      // to the page cache.\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(e);\n+    }\n+  }\n+\n+  private boolean isCompatibleFormats(RecordFormats storeFormat)\n+  {\n+    return FormatFamily.isSameFamily(recordFormats, storeFormat) &&\n+        recordFormats.hasCompatibleCapabilities(storeFormat, CapabilityType.FORMAT) &&\n+        recordFormats.generation() >= storeFormat.generation();\n+  }\n+\n+  private void closeStore(StoreType type)\n+  {\n+    int i = type.ordinal();\n+    if (stores[i] != null)\n+    {\n+      try\n+      {\n+        type.close(this, stores[i]);\n+      } finally\n+      {\n+        stores[i] = null;\n+      }\n+    }\n+  }\n+\n+  public void flush(IOLimiter limiter)\n+  {\n+    try\n+    {\n+      CountsTracker counts = (CountsTracker) stores[StoreType.COUNTS.ordinal()];\n+      if (counts != null)\n+      {\n+        counts.rotate(getMetaDataStore().getLastCommittedTransactionId());\n+      }\n+      pageCache.flushAndForce(limiter);\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(\"Failed to flush\", e);\n+    }\n+  }\n+\n+  private Object openStore(StoreType type)\n+  {\n+    int storeIndex = type.ordinal();\n+    Object store = type.open(this);\n+    stores[storeIndex] = store;\n+    return store;\n+  }\n+\n+  <T extends CommonAbstractStore> T initialize(T store)\n+  {\n+    store.initialise(createIfNotExist);\n+    return store;\n+  }\n+\n+  /**\n+   * Returns specified store by type from already opened store array. If store is not opened exception will be\n+   * thrown.\n+   *\n+   * @param storeType store type to retrieve\n+   * @return store of requested type\n+   * @throws IllegalStateException if opened store not found\n+   * @see #getOrCreateStore\n+   */\n+  private Object getStore(StoreType storeType)\n+  {\n+    Object store = stores[storeType.ordinal()];\n+    if (store == null)\n+    {\n+      String message = ArrayUtil.contains(initializedStores, storeType) ? STORE_ALREADY_CLOSED_MESSAGE :\n+          String.format(STORE_NOT_INITIALIZED_TEMPLATE, storeType.name());\n+      throw new IllegalStateException(message);\n+    }\n+    return store;\n+  }\n+\n+  /**\n+   * Returns specified store by type from already opened store array. Will open a new store if can't find any.\n+   * Should be used only during construction of stores.\n+   *\n+   * @param storeType store type to get or create\n+   * @return store of requested type\n+   * @see #getStore\n+   */\n+  private Object getOrCreateStore(StoreType storeType)\n+  {\n+    Object store = stores[storeType.ordinal()];\n+    if (store == null)\n+    {\n+      store = openStore(storeType);\n+    }\n+    return store;\n+  }\n+\n+  /**\n+   * @return the NeoStore.\n+   */\n+  public MetaDataStore getMetaDataStore()\n+  {\n+    return (MetaDataStore) getStore(StoreType.META_DATA);\n+  }\n+\n+  /**\n+   * @return The node store\n+   */\n+  public NodeStore getNodeStore()\n+  {\n+    return (NodeStore) getStore(StoreType.NODE);\n+  }\n+\n+  private DynamicArrayStore getNodeLabelStore()\n+  {\n+    return (DynamicArrayStore) getStore(StoreType.NODE_LABEL);\n+  }\n+\n+  /**\n+   * The relationship store.\n+   *\n+   * @return The relationship store\n+   */\n+  public RelationshipStore getRelationshipStore()\n+  {\n+    return (RelationshipStore) getStore(StoreType.RELATIONSHIP);\n+  }\n+\n+  /**\n+   * Returns the relationship type store.\n+   *\n+   * @return The relationship type store\n+   */\n+  public RelationshipTypeTokenStore getRelationshipTypeTokenStore()\n+  {\n+    return (RelationshipTypeTokenStore) getStore(StoreType.RELATIONSHIP_TYPE_TOKEN);\n+  }\n+\n+  private DynamicStringStore getRelationshipTypeTokenNamesStore()\n+  {\n+    return (DynamicStringStore) getStore(StoreType.RELATIONSHIP_TYPE_TOKEN_NAME);\n+  }\n+\n+  /**\n+   * Returns the label store.\n+   *\n+   * @return The label store\n+   */\n+  public LabelTokenStore getLabelTokenStore()\n+  {\n+    return (LabelTokenStore) getStore(StoreType.LABEL_TOKEN);\n+  }\n+\n+  private DynamicStringStore getLabelTokenNamesStore()\n+  {\n+    return (DynamicStringStore) getStore(StoreType.LABEL_TOKEN_NAME);\n+  }\n+\n+  /**\n+   * Returns the property store.\n+   *\n+   * @return The property store\n+   */\n+  public PropertyStore getPropertyStore()\n+  {\n+    return (PropertyStore) getStore(StoreType.PROPERTY);\n+  }\n+\n+  private DynamicStringStore getStringPropertyStore()\n+  {\n+    return (DynamicStringStore) getStore(StoreType.PROPERTY_STRING);\n+  }\n+\n+  private DynamicArrayStore getArrayPropertyStore()\n+  {\n+    return (DynamicArrayStore) getStore(StoreType.PROPERTY_ARRAY);\n+  }\n+\n+  /**\n+   * @return the {@link PropertyKeyTokenStore}\n+   */\n+  public PropertyKeyTokenStore getPropertyKeyTokenStore()\n+  {\n+    return (PropertyKeyTokenStore) getStore(StoreType.PROPERTY_KEY_TOKEN);\n+  }\n+\n+  private DynamicStringStore getPropertyKeyTokenNamesStore()\n+  {\n+    return (DynamicStringStore) getStore(StoreType.PROPERTY_KEY_TOKEN_NAME);\n+  }\n+\n+  /**\n+   * The relationship group store.\n+   *\n+   * @return The relationship group store.\n+   */\n+  public RelationshipGroupStore getRelationshipGroupStore()\n+  {\n+    return (RelationshipGroupStore) getStore(StoreType.RELATIONSHIP_GROUP);\n+  }\n+\n+  /**\n+   * @return the schema store.\n+   */\n+  public SchemaStore getSchemaStore()\n+  {\n+    return (SchemaStore) getStore(StoreType.SCHEMA);\n+  }\n+\n+  public CountsTracker getCounts()\n+  {\n+    return (CountsTracker) getStore(StoreType.COUNTS);\n+  }\n+\n+  private CountsTracker createWritableCountsTracker(File fileName)\n+  {\n+    return new CountsTracker(logProvider, fileSystemAbstraction, pageCache, config, fileName,\n+        versionContextSupplier);\n+  }\n+\n+  private ReadOnlyCountsTracker createReadOnlyCountsTracker(File fileName)\n+  {\n+    return new ReadOnlyCountsTracker(logProvider, fileSystemAbstraction, pageCache, config, fileName);\n+  }\n+\n+  private Iterable<CommonAbstractStore> instantiatedRecordStores()\n+  {\n+    Iterator<StoreType> storeTypes = new FilteringIterator<>(iterator(STORE_TYPES), INSTANTIATED_RECORD_STORES);\n+    return loop(new IteratorWrapper<CommonAbstractStore, StoreType>(storeTypes)\n+    {\n+      @Override\n+      protected CommonAbstractStore underlyingObjectToObject(StoreType type)\n+      {\n+        return (CommonAbstractStore) stores[type.ordinal()];\n+      }\n+    });\n+  }\n+\n+  public void makeStoreOk()\n+  {\n+    visitStore(store ->\n+    {\n+      store.makeStoreOk();\n+      return false;\n+    });\n+  }\n+\n+  /**\n+   * Throws cause of store not being OK.\n+   */\n+  public void verifyStoreOk()\n+  {\n+    visitStore(store ->\n+    {\n+      store.checkStoreOk();\n+      return false;\n+    });\n+  }\n+\n+  public void logVersions(Logger msgLog)\n+  {\n+    msgLog.log(\"Store versions:\");\n+    visitStore(store ->\n+    {\n+      store.logVersions(msgLog);\n+      return false;\n+    });\n+  }\n+\n+  public void logIdUsage(Logger msgLog)\n+  {\n+    msgLog.log(\"Id usage:\");\n+    visitStore(store ->\n+    {\n+      store.logIdUsage(msgLog);\n+      return false;\n+    });\n+  }\n+\n+  /**\n+   * Visits this store, and any other store managed by this store.\n+   * TODO this could, and probably should, replace all override-and-do-the-same-thing-to-all-my-managed-stores\n+   * methods like:\n+   * {@link #close()} (where that method could be deleted all together, note a specific behaviour of Counts'Store'})\n+   */\n+  public void visitStore(Visitor<CommonAbstractStore, RuntimeException> visitor)\n+  {\n+    for (CommonAbstractStore store : instantiatedRecordStores())\n+    {\n+      store.visitStore(visitor);\n+    }\n+  }\n+\n+  public void startCountStore() throws IOException\n+  {\n+    // TODO: move this to LifeCycle\n+    getCounts().start();\n+  }\n+\n+  public void deleteIdGenerators()\n+  {\n+    visitStore(store ->\n+    {\n+      store.deleteIdGenerator();\n+      return false;\n+    });\n+  }\n+\n+  public void assertOpen()\n+  {\n+    if (stores[StoreType.NODE.ordinal()] == null)\n+    {\n+      throw new IllegalStateException(\"Database has been shutdown\");\n+    }\n+  }\n+\n+  CommonAbstractStore createDynamicArrayStore(String storeName, IdType idType, Setting<Integer> blockSizeProperty)\n+  {\n+    return createDynamicArrayStore(storeName, idType, config.get(blockSizeProperty));\n+  }\n+\n+  CommonAbstractStore createDynamicArrayStore(String storeName, IdType idType, int blockSize)\n+  {\n+    if (blockSize <= 0)\n+    {\n+      throw new IllegalArgumentException(\"Block size of dynamic array store should be positive integer.\");\n+    }\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new DynamicArrayStore(storeFile, config, idType, idGeneratorFactory, pageCache,\n+        logProvider, blockSize, recordFormats, openOptions));\n+  }\n+\n+  CommonAbstractStore createNodeStore(String storeName)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new NodeStore(storeFile, config, idGeneratorFactory, pageCache, logProvider,\n+        (DynamicArrayStore) getOrCreateStore(StoreType.NODE_LABEL), recordFormats, openOptions));\n+  }\n+\n+  CommonAbstractStore createPropertyKeyTokenStore(String storeName)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new PropertyKeyTokenStore(storeFile, config, idGeneratorFactory,\n+        pageCache, logProvider, (DynamicStringStore) getOrCreateStore(StoreType.PROPERTY_KEY_TOKEN_NAME),\n+        recordFormats, openOptions));\n+  }\n+\n+  CommonAbstractStore createPropertyStore(String storeName)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new PropertyStore(storeFile, config, idGeneratorFactory, pageCache, logProvider,\n+        (DynamicStringStore) getOrCreateStore(StoreType.PROPERTY_STRING),\n+        (PropertyKeyTokenStore) getOrCreateStore(StoreType.PROPERTY_KEY_TOKEN),\n+        (DynamicArrayStore) getOrCreateStore(StoreType.PROPERTY_ARRAY), recordFormats, openOptions));\n+  }\n+\n+  CommonAbstractStore createRelationshipStore(String storeName)\n+  {\n+    File file = getStoreFile(storeName);\n+    return initialize(new RelationshipStore(file, config, idGeneratorFactory, pageCache, logProvider,\n+        recordFormats, openOptions));\n+  }\n+\n+  CommonAbstractStore createDynamicStringStore(String storeName, IdType idType,\n+                                               Setting<Integer> blockSizeProperty)\n+  {\n+    return createDynamicStringStore(storeName, idType, config.get(blockSizeProperty));\n+  }\n+\n+  CommonAbstractStore createDynamicStringStore(String storeName, IdType idType, int blockSize)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new DynamicStringStore(storeFile, config, idType, idGeneratorFactory,\n+        pageCache, logProvider, blockSize, recordFormats.dynamic(), recordFormats.storeVersion(),\n+        openOptions));\n+  }\n+\n+  CommonAbstractStore createRelationshipTypeTokenStore(String storeName)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new RelationshipTypeTokenStore(storeFile, config, idGeneratorFactory,\n+        pageCache, logProvider,\n+        (DynamicStringStore) getOrCreateStore(StoreType.RELATIONSHIP_TYPE_TOKEN_NAME), recordFormats,\n+        openOptions));\n+  }\n+\n+  CommonAbstractStore createLabelTokenStore(String storeName)\n+  {\n+    File fileName = getStoreFile(storeName);\n+    return initialize(new LabelTokenStore(fileName, config, idGeneratorFactory, pageCache,\n+        logProvider, (DynamicStringStore) getOrCreateStore(StoreType.LABEL_TOKEN_NAME), recordFormats,\n+        openOptions));\n+  }\n+\n+  CommonAbstractStore createSchemaStore(String storeName)\n+  {\n+    File fileName = getStoreFile(storeName);\n+    return initialize(new SchemaStore(fileName, config, IdType.SCHEMA, idGeneratorFactory, pageCache,\n+        logProvider, recordFormats, openOptions));\n+  }\n+\n+  CommonAbstractStore createRelationshipGroupStore(String storeName)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    return initialize(new RelationshipGroupStore(storeFile, config, idGeneratorFactory, pageCache, logProvider,\n+        recordFormats, openOptions));\n+  }\n+\n+  CountsTracker createCountStore(String storeName)\n+  {\n+    File storeFile = getStoreFile(storeName);\n+    boolean readOnly = config.get(GraphDatabaseSettings.read_only);\n+    CountsTracker counts = readOnly\n+        ? createReadOnlyCountsTracker(storeFile)\n+        : createWritableCountsTracker(storeFile);\n+    NeoStores neoStores = this;\n+    counts.setInitializer(new DataInitializer<CountsAccessor.Updater>()\n+    {\n+      private final Log log = logProvider.getLog(MetaDataStore.class);\n+\n+      @Override\n+      public void initialize(CountsAccessor.Updater updater)\n+      {\n+        log.warn(\"Missing counts store, rebuilding it.\");\n+        new CountsComputer(neoStores, pageCache).initialize(updater);\n+        log.warn(\"Counts store rebuild completed.\");\n+      }\n+\n+      @Override\n+      public long initialVersion()\n+      {\n+        return ((MetaDataStore) getOrCreateStore(StoreType.META_DATA)).getLastCommittedTransactionId();\n+      }\n+    });\n+\n+    try\n+    {\n+      counts.init(); // TODO: move this to LifeCycle\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(\"Failed to initialize counts store\", e);\n+    }\n+    return counts;\n+  }\n+\n+  CommonAbstractStore createMetadataStore()\n+  {\n+    return initialize(new MetaDataStore(neoStoreFileName, config, idGeneratorFactory, pageCache, logProvider,\n+        recordFormats.metaData(), recordFormats.storeVersion(), openOptions));\n+  }\n+\n+  public void registerDiagnostics(DiagnosticsManager diagnosticsManager)\n+  {\n+    diagnosticsManager.registerAll(NeoStoresDiagnostics.class, this);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <RECORD extends AbstractBaseRecord> RecordStore<RECORD> getRecordStore(StoreType type)\n+  {\n+    assert type.isRecordStore();\n+    return (RecordStore<RECORD>) getStore(type);\n+  }\n+\n+  public RecordFormats getRecordFormats()\n+  {\n+    return recordFormats;\n+  }\n }\n",
            "diff_size": 912
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "229",
                    "column": "72",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "294",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "559",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "572",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 348).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/217/NeoStores.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/217/NeoStores.java\nindex c98f135dae3..cd2797c0620 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/217/NeoStores.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/217/NeoStores.java\n@@ -72,11 +72,9 @@ import static org.neo4j.kernel.impl.store.MetaDataStore.versionLongToString;\n public class NeoStores implements AutoCloseable\n {\n     private static final String STORE_ALREADY_CLOSED_MESSAGE = \"Specified store was already closed.\";\n-    private static final String STORE_NOT_INITIALIZED_TEMPLATE = \"Specified store was not initialized. Please specify\" +\n-                                                                 \" %s as one of the stores types that should be open\" +\n-                                                                 \" to be able to use it.\";\n+    private static final String STORE_NOT_INITIALIZED_TEMPLATE = \"Specified store was not initialized. Please specify\" + \" %s as one of the stores types that should be open\" + \" to be able to use it.\";\n \n-    public static boolean isStorePresent( PageCache pageCache, File storeDir )\n+public static boolean isStorePresent( PageCache pageCache, File storeDir )\n     {\n         File metaDataStore = new File( storeDir, MetaDataStore.DEFAULT_NAME );\n         try ( PagedFile ignore = pageCache.map( metaDataStore, MetaDataStore.getPageSize( pageCache ) ) )\n@@ -115,12 +113,10 @@ public class NeoStores implements AutoCloseable\n     private final Object[] stores;\n     private final OpenOption[] openOptions;\n \n-    NeoStores(\n-            File neoStoreFileName,\n+    NeoStores( File neoStoreFileName,\n             Config config,\n             IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            final LogProvider logProvider,\n+            PageCache pageCache, final LogProvider logProvider,\n             FileSystemAbstraction fileSystemAbstraction,\n             VersionContextSupplier versionContextSupplier,\n             RecordFormats recordFormats,\n@@ -161,7 +157,8 @@ public class NeoStores implements AutoCloseable\n             }\n             throw initException;\n         }\n-        initializedStores = storeTypes;\n+\n+initializedStores = storeTypes;\n     }\n \n     public File getStoreDir()\n@@ -229,8 +226,7 @@ public class NeoStores implements AutoCloseable\n \n     private boolean isCompatibleFormats( RecordFormats storeFormat )\n     {\n-        return FormatFamily.isSameFamily( recordFormats, storeFormat ) &&\n-               recordFormats.hasCompatibleCapabilities( storeFormat, CapabilityType.FORMAT ) &&\n+        return FormatFamily.isSameFamily( recordFormats, storeFormat ) &&recordFormats.hasCompatibleCapabilities( storeFormat, CapabilityType.FORMAT ) &&\n                recordFormats.generation() >= storeFormat.generation();\n     }\n \n@@ -295,11 +291,11 @@ public class NeoStores implements AutoCloseable\n         Object store = stores[storeType.ordinal()];\n         if ( store == null )\n         {\n-            String message = ArrayUtil.contains( initializedStores, storeType ) ? STORE_ALREADY_CLOSED_MESSAGE :\n-                             String.format( STORE_NOT_INITIALIZED_TEMPLATE, storeType.name() );\n-            throw new IllegalStateException( message );\n+            String message = ArrayUtil.contains( initializedStores, storeType ) ? STORE_ALREADY_CLOSED_MESSAGE : String.format( STORE_NOT_INITIALIZED_TEMPLATE, storeType.name() );\n+    throw new IllegalStateException( message );\n         }\n-        return store;\n+\n+return store;\n     }\n \n     /**\n@@ -317,7 +313,8 @@ public class NeoStores implements AutoCloseable\n         {\n             store = openStore( storeType );\n         }\n-        return store;\n+\n+return store;\n     }\n \n     /**\n@@ -550,7 +547,8 @@ public class NeoStores implements AutoCloseable\n         {\n             throw new IllegalArgumentException( \"Block size of dynamic array store should be positive integer.\" );\n         }\n-        File storeFile = getStoreFile( storeName );\n+\n+File storeFile = getStoreFile( storeName );\n         return initialize( new DynamicArrayStore( storeFile, config, idType, idGeneratorFactory, pageCache,\n                 logProvider, blockSize, recordFormats, openOptions ) );\n     }\n@@ -558,25 +556,20 @@ public class NeoStores implements AutoCloseable\n     CommonAbstractStore createNodeStore( String storeName )\n     {\n         File storeFile = getStoreFile( storeName );\n-        return initialize( new NodeStore( storeFile, config, idGeneratorFactory, pageCache, logProvider,\n-                (DynamicArrayStore) getOrCreateStore( StoreType.NODE_LABEL ), recordFormats, openOptions ) );\n+        return initialize( new NodeStore( storeFile, config, idGeneratorFactory, pageCache, logProvider, (DynamicArrayStore) getOrCreateStore( StoreType.NODE_LABEL ), recordFormats, openOptions ) );\n     }\n \n     CommonAbstractStore createPropertyKeyTokenStore( String storeName )\n     {\n         File storeFile = getStoreFile( storeName );\n         return initialize( new PropertyKeyTokenStore( storeFile, config, idGeneratorFactory,\n-                pageCache, logProvider, (DynamicStringStore) getOrCreateStore( StoreType.PROPERTY_KEY_TOKEN_NAME ),\n-                recordFormats, openOptions ) );\n+                pageCache, logProvider, (DynamicStringStore) getOrCreateStore( StoreType.PROPERTY_KEY_TOKEN_NAME ), recordFormats, openOptions ) );\n     }\n \n     CommonAbstractStore createPropertyStore( String storeName )\n     {\n         File storeFile = getStoreFile( storeName );\n-        return initialize( new PropertyStore( storeFile, config, idGeneratorFactory, pageCache, logProvider,\n-                (DynamicStringStore) getOrCreateStore( StoreType.PROPERTY_STRING ),\n-                (PropertyKeyTokenStore) getOrCreateStore( StoreType.PROPERTY_KEY_TOKEN ),\n-                (DynamicArrayStore) getOrCreateStore( StoreType.PROPERTY_ARRAY ), recordFormats, openOptions ) );\n+        return initialize( new PropertyStore( storeFile, config, idGeneratorFactory, pageCache, logProvider, (DynamicStringStore) getOrCreateStore( StoreType.PROPERTY_STRING ), (PropertyKeyTokenStore) getOrCreateStore( StoreType.PROPERTY_KEY_TOKEN ), (DynamicArrayStore) getOrCreateStore( StoreType.PROPERTY_ARRAY ), recordFormats, openOptions ) );\n     }\n \n     CommonAbstractStore createRelationshipStore( String storeName )\n@@ -586,8 +579,7 @@ public class NeoStores implements AutoCloseable\n                 recordFormats, openOptions ) );\n     }\n \n-    CommonAbstractStore createDynamicStringStore( String storeName, IdType idType,\n-            Setting<Integer> blockSizeProperty )\n+    CommonAbstractStore createDynamicStringStore( String storeName, IdType idType, Setting<Integer> blockSizeProperty )\n     {\n         return createDynamicStringStore( storeName, idType, config.get( blockSizeProperty ) );\n     }\n@@ -596,25 +588,21 @@ public class NeoStores implements AutoCloseable\n     {\n         File storeFile = getStoreFile( storeName );\n         return initialize( new DynamicStringStore( storeFile, config, idType, idGeneratorFactory,\n-                pageCache, logProvider, blockSize, recordFormats.dynamic(), recordFormats.storeVersion(),\n-                openOptions ) );\n+                pageCache, logProvider, blockSize, recordFormats.dynamic(), recordFormats.storeVersion(), openOptions ) );\n     }\n \n     CommonAbstractStore createRelationshipTypeTokenStore( String storeName )\n     {\n         File storeFile = getStoreFile( storeName );\n         return initialize( new RelationshipTypeTokenStore( storeFile, config, idGeneratorFactory,\n-                pageCache, logProvider,\n-                (DynamicStringStore) getOrCreateStore( StoreType.RELATIONSHIP_TYPE_TOKEN_NAME ), recordFormats,\n-                openOptions ) );\n+                pageCache, logProvider, (DynamicStringStore) getOrCreateStore( StoreType.RELATIONSHIP_TYPE_TOKEN_NAME ), recordFormats, openOptions ) );\n     }\n \n     CommonAbstractStore createLabelTokenStore( String storeName )\n     {\n         File fileName = getStoreFile( storeName );\n         return initialize( new LabelTokenStore( fileName, config, idGeneratorFactory, pageCache,\n-                logProvider, (DynamicStringStore) getOrCreateStore( StoreType.LABEL_TOKEN_NAME ), recordFormats,\n-                openOptions ) );\n+                logProvider, (DynamicStringStore) getOrCreateStore( StoreType.LABEL_TOKEN_NAME ), recordFormats, openOptions ) );\n     }\n \n     CommonAbstractStore createSchemaStore( String storeName )\n@@ -635,10 +623,8 @@ public class NeoStores implements AutoCloseable\n     {\n         File storeFile = getStoreFile( storeName );\n         boolean readOnly = config.get( GraphDatabaseSettings.read_only );\n-        CountsTracker counts = readOnly\n-                               ? createReadOnlyCountsTracker( storeFile )\n-                               : createWritableCountsTracker( storeFile );\n-        NeoStores neoStores = this;\n+        CountsTracker counts = readOnly ? createReadOnlyCountsTracker( storeFile ) : createWritableCountsTracker( storeFile );\n+NeoStores neoStores = this;\n         counts.setInitializer( new DataInitializer<CountsAccessor.Updater>()\n         {\n             private final Log log = logProvider.getLog( MetaDataStore.class );\n@@ -666,7 +652,8 @@ public class NeoStores implements AutoCloseable\n         {\n             throw new UnderlyingStorageException( \"Failed to initialize counts store\", e );\n         }\n-        return counts;\n+\n+return counts;\n     }\n \n     CommonAbstractStore createMetadataStore()\n@@ -691,4 +678,4 @@ public class NeoStores implements AutoCloseable\n     {\n         return recordFormats;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}