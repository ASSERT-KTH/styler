{
    "project_name": "neo4j-neo4j",
    "error_id": "1032",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1032/TokenCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1032/TokenCreator.java\nindex d442f4096d4..026badaa52b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1032/TokenCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1032/TokenCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.token;\n \n import java.util.function.IntPredicate;\n@@ -30,30 +31,30 @@ public interface TokenCreator\n      * <p>\n      * It is assumed that the token name is not already being used.\n      *\n-     * @param name The token name to allocate.\n+     * @param name     The token name to allocate.\n      * @param internal {@code true} if we want to create an internal (not public) token, otherwise {@code false} for public tokens.\n      * @return The id of the allocated token name.\n      * @throws KernelException If the inner transaction used to allocate the token encountered a problem.\n      */\n-    int createToken( String name, boolean internal ) throws KernelException;\n+    int createToken(String name, boolean internal) throws KernelException;\n \n     /**\n      * Create the tokens by the given names, and store their ids in the corresponding entry in the {@code ids} array,\n      * but only if the {@code indexFilter} returns {@code true} for the given index.\n      *\n-     * @param names The array of token names we potentially want to create new ids for.\n-     * @param ids The array into which we still store the id we create for the various token names.\n-     * @param internal  {@code true} if we want to create internal (not public) tokens, otherwise {@code false} for public tokens.\n+     * @param names       The array of token names we potentially want to create new ids for.\n+     * @param ids         The array into which we still store the id we create for the various token names.\n+     * @param internal    {@code true} if we want to create internal (not public) tokens, otherwise {@code false} for public tokens.\n      * @param indexFilter A filter for the array indexes for which a token needs an id.\n      * @throws KernelException If the inner transaction used to allocate the tokens encountered a problem.\n      */\n-    default void createTokens( String[] names, int[] ids, boolean internal, IntPredicate indexFilter ) throws KernelException\n+    default void createTokens(String[] names, int[] ids, boolean internal, IntPredicate indexFilter) throws KernelException\n     {\n-        for ( int i = 0; i < ids.length; i++ )\n+        for (int i = 0; i < ids.length; i++)\n         {\n-            if ( indexFilter.test( i ) )\n+            if (indexFilter.test(i))\n             {\n-                ids[i] = createToken( names[i], internal );\n+                ids[i] = createToken(names[i], internal);\n             }\n         }\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}