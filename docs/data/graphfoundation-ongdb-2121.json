{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2121",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2121/RelationshipGroupRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2121/RelationshipGroupRecordCheck.java\nindex b70808503a9..4b59c93fcbb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2121/RelationshipGroupRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2121/RelationshipGroupRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import java.util.ArrayList;\n@@ -34,296 +35,293 @@ import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n import static java.util.Arrays.asList;\n \n public class RelationshipGroupRecordCheck implements\n-        RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n+    RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n {\n-    private static final List<RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>> fields;\n-    static\n+  private static final List<RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>> fields;\n+\n+  static\n+  {\n+    List<RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>> list = new ArrayList<>();\n+    list.add(RelationshipTypeField.RELATIONSHIP_TYPE);\n+    list.add(GroupField.NEXT);\n+    list.add(NodeField.OWNER);\n+    list.addAll(asList(RelationshipField.values()));\n+    fields = Collections.unmodifiableList(list);\n+  }\n+\n+  private enum NodeField implements\n+      RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n+      ComparativeRecordChecker<RelationshipGroupRecord, NodeRecord, RelationshipGroupConsistencyReport>\n+  {\n+    OWNER;\n+\n+    @Override\n+    public void checkReference(RelationshipGroupRecord record, NodeRecord referred,\n+                               CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records)\n     {\n-        List<RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>> list = new ArrayList<>();\n-        list.add( RelationshipTypeField.RELATIONSHIP_TYPE );\n-        list.add( GroupField.NEXT );\n-        list.add( NodeField.OWNER );\n-        list.addAll( asList( RelationshipField.values() ) );\n-        fields = Collections.unmodifiableList( list );\n+      if (!referred.inUse())\n+      {\n+        engine.report().ownerNotInUse();\n+      }\n     }\n \n-    private enum NodeField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord, NodeRecord, RelationshipGroupConsistencyReport>\n+    @Override\n+    public void checkConsistency(RelationshipGroupRecord record,\n+                                 CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records)\n     {\n-        OWNER;\n+      if (record.getOwningNode() < 0)\n+      {\n+        engine.report().illegalOwner();\n+      } else\n+      {\n+        engine.comparativeCheck(records.node(record.getOwningNode()), this);\n+      }\n+    }\n \n-        @Override\n-        public void checkReference( RelationshipGroupRecord record, NodeRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records )\n-        {\n-            if ( !referred.inUse() )\n-            {\n-                engine.report().ownerNotInUse();\n-            }\n-        }\n+    @Override\n+    public long valueFrom(RelationshipGroupRecord record)\n+    {\n+      return record.getOwningNode();\n+    }\n+  }\n \n-        @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records )\n-        {\n-            if ( record.getOwningNode() < 0 )\n-            {\n-                engine.report().illegalOwner();\n-            }\n-            else\n-            {\n-                engine.comparativeCheck( records.node( record.getOwningNode() ), this );\n-            }\n-        }\n+  private enum RelationshipTypeField implements\n+      RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n+      ComparativeRecordChecker<RelationshipGroupRecord, RelationshipTypeTokenRecord, RelationshipGroupConsistencyReport>\n+  {\n+    RELATIONSHIP_TYPE;\n \n-        @Override\n-        public long valueFrom( RelationshipGroupRecord record )\n-        {\n-            return record.getOwningNode();\n-        }\n+    @Override\n+    public void checkConsistency(RelationshipGroupRecord record,\n+                                 CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+                                 RecordAccess records)\n+    {\n+      if (record.getType() < 0)\n+      {\n+        engine.report().illegalRelationshipType();\n+      } else\n+      {\n+        engine.comparativeCheck(records.relationshipType(record.getType()), this);\n+      }\n     }\n \n-    private enum RelationshipTypeField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord,RelationshipTypeTokenRecord,RelationshipGroupConsistencyReport>\n+    @Override\n+    public long valueFrom(RelationshipGroupRecord record)\n     {\n-        RELATIONSHIP_TYPE;\n+      return record.getType();\n+    }\n \n-        @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n-                RecordAccess records )\n-        {\n-            if ( record.getType() < 0 )\n-            {\n-                engine.report().illegalRelationshipType();\n-            }\n-            else\n-            {\n-                engine.comparativeCheck( records.relationshipType( record.getType() ), this );\n-            }\n-        }\n+    @Override\n+    public void checkReference(RelationshipGroupRecord record, RelationshipTypeTokenRecord referred,\n+                               CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      if (!referred.inUse())\n+      {\n+        engine.report().relationshipTypeNotInUse(referred);\n+      }\n+    }\n+  }\n \n-        @Override\n-        public long valueFrom( RelationshipGroupRecord record )\n-        {\n-            return record.getType();\n-        }\n+  private enum GroupField implements\n+      RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n+      ComparativeRecordChecker<RelationshipGroupRecord, RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n+  {\n+    NEXT;\n \n-        @Override\n-        public void checkReference( RelationshipGroupRecord record, RelationshipTypeTokenRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n-                RecordAccess records )\n-        {\n-            if ( !referred.inUse() )\n-            {\n-                engine.report().relationshipTypeNotInUse( referred );\n-            }\n-        }\n+    @Override\n+    public void checkConsistency(RelationshipGroupRecord record,\n+                                 CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+                                 RecordAccess records)\n+    {\n+      if (record.getNext() != Record.NO_NEXT_RELATIONSHIP.intValue())\n+      {\n+        engine.comparativeCheck(records.relationshipGroup(record.getNext()), this);\n+      }\n     }\n \n-    private enum GroupField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord, RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n+    @Override\n+    public long valueFrom(RelationshipGroupRecord record)\n     {\n-        NEXT;\n-\n-        @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n-                RecordAccess records )\n-        {\n-            if ( record.getNext() != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-            {\n-                engine.comparativeCheck( records.relationshipGroup( record.getNext() ), this );\n-            }\n-        }\n+      return record.getNext();\n+    }\n \n-        @Override\n-        public long valueFrom( RelationshipGroupRecord record )\n+    @Override\n+    public void checkReference(RelationshipGroupRecord record, RelationshipGroupRecord referred,\n+                               CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      if (!referred.inUse())\n+      {\n+        engine.report().nextGroupNotInUse();\n+      } else\n+      {\n+        if (record.getType() >= referred.getType())\n         {\n-            return record.getNext();\n+          engine.report().invalidTypeSortOrder();\n         }\n-\n-        @Override\n-        public void checkReference( RelationshipGroupRecord record, RelationshipGroupRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n-                RecordAccess records )\n+        if (record.getOwningNode() != referred.getOwningNode())\n         {\n-            if ( !referred.inUse() )\n-            {\n-                engine.report().nextGroupNotInUse();\n-            }\n-            else\n-            {\n-                if ( record.getType() >= referred.getType() )\n-                {\n-                    engine.report().invalidTypeSortOrder();\n-                }\n-                if ( record.getOwningNode() != referred.getOwningNode() )\n-                {\n-                    engine.report().nextHasOtherOwner( referred );\n-                }\n-            }\n+          engine.report().nextHasOtherOwner(referred);\n         }\n+      }\n     }\n+  }\n \n-    private enum RelationshipField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord, RelationshipRecord, RelationshipGroupConsistencyReport>\n-    {\n-        OUT\n+  private enum RelationshipField implements\n+      RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n+      ComparativeRecordChecker<RelationshipGroupRecord, RelationshipRecord, RelationshipGroupConsistencyReport>\n+  {\n+    OUT\n         {\n-            @Override\n-            public long valueFrom( RelationshipGroupRecord record )\n-            {\n-                return record.getFirstOut();\n-            }\n-\n-            @Override\n-            protected void relationshipNotInUse( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstOutgoingRelationshipNotInUse();\n-            }\n-\n-            @Override\n-            protected void relationshipNotFirstInChain( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstOutgoingRelationshipNotFirstInChain();\n-            }\n-\n-            @Override\n-            protected boolean isFirstInChain( RelationshipRecord relationship )\n-            {\n-                return relationship.isFirstInFirstChain();\n-            }\n-\n-            @Override\n-            protected void relationshipOfOtherType( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstOutgoingRelationshipOfOfOtherType();\n-            }\n+          @Override\n+          public long valueFrom(RelationshipGroupRecord record)\n+          {\n+            return record.getFirstOut();\n+          }\n+\n+          @Override\n+          protected void relationshipNotInUse(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstOutgoingRelationshipNotInUse();\n+          }\n+\n+          @Override\n+          protected void relationshipNotFirstInChain(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstOutgoingRelationshipNotFirstInChain();\n+          }\n+\n+          @Override\n+          protected boolean isFirstInChain(RelationshipRecord relationship)\n+          {\n+            return relationship.isFirstInFirstChain();\n+          }\n+\n+          @Override\n+          protected void relationshipOfOtherType(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstOutgoingRelationshipOfOfOtherType();\n+          }\n         },\n-        IN\n+    IN\n         {\n-            @Override\n-            public long valueFrom( RelationshipGroupRecord record )\n-            {\n-                return record.getFirstIn();\n-            }\n-\n-            @Override\n-            protected void relationshipNotInUse( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstIncomingRelationshipNotInUse();\n-            }\n-\n-            @Override\n-            protected void relationshipNotFirstInChain( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstIncomingRelationshipNotFirstInChain();\n-            }\n-\n-            @Override\n-            protected boolean isFirstInChain( RelationshipRecord relationship )\n-            {\n-                return relationship.isFirstInSecondChain();\n-            }\n-\n-            @Override\n-            protected void relationshipOfOtherType( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstIncomingRelationshipOfOfOtherType();\n-            }\n+          @Override\n+          public long valueFrom(RelationshipGroupRecord record)\n+          {\n+            return record.getFirstIn();\n+          }\n+\n+          @Override\n+          protected void relationshipNotInUse(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstIncomingRelationshipNotInUse();\n+          }\n+\n+          @Override\n+          protected void relationshipNotFirstInChain(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstIncomingRelationshipNotFirstInChain();\n+          }\n+\n+          @Override\n+          protected boolean isFirstInChain(RelationshipRecord relationship)\n+          {\n+            return relationship.isFirstInSecondChain();\n+          }\n+\n+          @Override\n+          protected void relationshipOfOtherType(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstIncomingRelationshipOfOfOtherType();\n+          }\n         },\n-        LOOP\n+    LOOP\n         {\n-            @Override\n-            public long valueFrom( RelationshipGroupRecord record )\n-            {\n-                return record.getFirstLoop();\n-            }\n-\n-            @Override\n-            protected void relationshipNotInUse( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstLoopRelationshipNotInUse();\n-            }\n-\n-            @Override\n-            protected void relationshipNotFirstInChain( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstLoopRelationshipNotFirstInChain();\n-            }\n-\n-            @Override\n-            protected boolean isFirstInChain( RelationshipRecord relationship )\n-            {\n-                return relationship.isFirstInFirstChain() && relationship.isFirstInSecondChain();\n-            }\n-\n-            @Override\n-            protected void relationshipOfOtherType( RelationshipGroupConsistencyReport report )\n-            {\n-                report.firstLoopRelationshipOfOfOtherType();\n-            }\n+          @Override\n+          public long valueFrom(RelationshipGroupRecord record)\n+          {\n+            return record.getFirstLoop();\n+          }\n+\n+          @Override\n+          protected void relationshipNotInUse(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstLoopRelationshipNotInUse();\n+          }\n+\n+          @Override\n+          protected void relationshipNotFirstInChain(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstLoopRelationshipNotFirstInChain();\n+          }\n+\n+          @Override\n+          protected boolean isFirstInChain(RelationshipRecord relationship)\n+          {\n+            return relationship.isFirstInFirstChain() && relationship.isFirstInSecondChain();\n+          }\n+\n+          @Override\n+          protected void relationshipOfOtherType(RelationshipGroupConsistencyReport report)\n+          {\n+            report.firstLoopRelationshipOfOfOtherType();\n+          }\n         };\n \n-        @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n-                RecordAccess records )\n+    @Override\n+    public void checkConsistency(RelationshipGroupRecord record,\n+                                 CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+                                 RecordAccess records)\n+    {\n+      long relId = valueFrom(record);\n+      if (relId != Record.NO_NEXT_RELATIONSHIP.intValue())\n+      {\n+        engine.comparativeCheck(records.relationship(relId), this);\n+      }\n+    }\n+\n+    @Override\n+    public void checkReference(RelationshipGroupRecord record, RelationshipRecord referred,\n+                               CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      if (!referred.inUse())\n+      {\n+        relationshipNotInUse(engine.report());\n+      } else\n+      {\n+        if (!isFirstInChain(referred))\n         {\n-            long relId = valueFrom( record );\n-            if ( relId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-            {\n-                engine.comparativeCheck( records.relationship( relId ), this );\n-            }\n+          relationshipNotFirstInChain(engine.report());\n         }\n-\n-        @Override\n-        public void checkReference( RelationshipGroupRecord record, RelationshipRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n-                RecordAccess records )\n+        if (referred.getType() != record.getType())\n         {\n-            if ( !referred.inUse() )\n-            {\n-                relationshipNotInUse( engine.report() );\n-            }\n-            else\n-            {\n-                if ( !isFirstInChain( referred ) )\n-                {\n-                    relationshipNotFirstInChain( engine.report() );\n-                }\n-                if ( referred.getType() != record.getType() )\n-                {\n-                    relationshipOfOtherType( engine.report() );\n-                }\n-            }\n+          relationshipOfOtherType(engine.report());\n         }\n+      }\n+    }\n \n-        protected abstract void relationshipOfOtherType( RelationshipGroupConsistencyReport report );\n+    protected abstract void relationshipOfOtherType(RelationshipGroupConsistencyReport report);\n \n-        protected abstract void relationshipNotFirstInChain( RelationshipGroupConsistencyReport report );\n+    protected abstract void relationshipNotFirstInChain(RelationshipGroupConsistencyReport report);\n \n-        protected abstract boolean isFirstInChain( RelationshipRecord referred );\n+    protected abstract boolean isFirstInChain(RelationshipRecord referred);\n \n-        protected abstract void relationshipNotInUse( RelationshipGroupConsistencyReport report );\n-    }\n+    protected abstract void relationshipNotInUse(RelationshipGroupConsistencyReport report);\n+  }\n \n-    @Override\n-    public void check( RelationshipGroupRecord record,\n-            CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records )\n+  @Override\n+  public void check(RelationshipGroupRecord record,\n+                    CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records)\n+  {\n+    if (!record.inUse())\n     {\n-        if ( !record.inUse() )\n-        {\n-            return;\n-        }\n-        for ( RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport> field : fields )\n-        {\n-            field.checkConsistency( record, engine, records );\n-        }\n+      return;\n+    }\n+    for (RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport> field : fields)\n+    {\n+      field.checkConsistency(record, engine, records);\n     }\n+  }\n }\n",
            "diff_size": 320
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2121/RelationshipGroupRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2121/RelationshipGroupRecordCheck.java\nindex b70808503a9..54b8ddd668c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2121/RelationshipGroupRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2121/RelationshipGroupRecordCheck.java\n@@ -33,8 +33,7 @@ import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n \n import static java.util.Arrays.asList;\n \n-public class RelationshipGroupRecordCheck implements\n-        RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n+public class RelationshipGroupRecordCheck implements RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n {\n     private static final List<RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>> fields;\n     static\n@@ -47,15 +46,12 @@ public class RelationshipGroupRecordCheck implements\n         fields = Collections.unmodifiableList( list );\n     }\n \n-    private enum NodeField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord, NodeRecord, RelationshipGroupConsistencyReport>\n+    private enum NodeField implements RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>, ComparativeRecordChecker<RelationshipGroupRecord, NodeRecord, RelationshipGroupConsistencyReport>\n     {\n         OWNER;\n \n         @Override\n-        public void checkReference( RelationshipGroupRecord record, NodeRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records )\n+        public void checkReference( RelationshipGroupRecord record, NodeRecord referred, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine, RecordAccess records )\n         {\n             if ( !referred.inUse() )\n             {\n@@ -64,8 +60,7 @@ public class RelationshipGroupRecordCheck implements\n         }\n \n         @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records )\n+        public void checkConsistency( RelationshipGroupRecord record, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine, RecordAccess records )\n         {\n             if ( record.getOwningNode() < 0 )\n             {\n@@ -84,15 +79,12 @@ public class RelationshipGroupRecordCheck implements\n         }\n     }\n \n-    private enum RelationshipTypeField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord,RelationshipTypeTokenRecord,RelationshipGroupConsistencyReport>\n+    private enum RelationshipTypeField implements RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>, ComparativeRecordChecker<RelationshipGroupRecord,RelationshipTypeTokenRecord,RelationshipGroupConsistencyReport>\n     {\n         RELATIONSHIP_TYPE;\n \n         @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+        public void checkConsistency( RelationshipGroupRecord record, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine,\n                 RecordAccess records )\n         {\n             if ( record.getType() < 0 )\n@@ -112,8 +104,7 @@ public class RelationshipGroupRecordCheck implements\n         }\n \n         @Override\n-        public void checkReference( RelationshipGroupRecord record, RelationshipTypeTokenRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+        public void checkReference( RelationshipGroupRecord record, RelationshipTypeTokenRecord referred, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine,\n                 RecordAccess records )\n         {\n             if ( !referred.inUse() )\n@@ -123,15 +114,12 @@ public class RelationshipGroupRecordCheck implements\n         }\n     }\n \n-    private enum GroupField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord, RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n+    private enum GroupField implements RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>, ComparativeRecordChecker<RelationshipGroupRecord, RelationshipGroupRecord, RelationshipGroupConsistencyReport>\n     {\n         NEXT;\n \n         @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+        public void checkConsistency( RelationshipGroupRecord record, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine,\n                 RecordAccess records )\n         {\n             if ( record.getNext() != Record.NO_NEXT_RELATIONSHIP.intValue() )\n@@ -147,8 +135,7 @@ public class RelationshipGroupRecordCheck implements\n         }\n \n         @Override\n-        public void checkReference( RelationshipGroupRecord record, RelationshipGroupRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+        public void checkReference( RelationshipGroupRecord record, RelationshipGroupRecord referred, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine,\n                 RecordAccess records )\n         {\n             if ( !referred.inUse() )\n@@ -161,7 +148,8 @@ public class RelationshipGroupRecordCheck implements\n                 {\n                     engine.report().invalidTypeSortOrder();\n                 }\n-                if ( record.getOwningNode() != referred.getOwningNode() )\n+\n+if ( record.getOwningNode() != referred.getOwningNode() )\n                 {\n                     engine.report().nextHasOtherOwner( referred );\n                 }\n@@ -169,9 +157,7 @@ public class RelationshipGroupRecordCheck implements\n         }\n     }\n \n-    private enum RelationshipField implements\n-            RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipGroupRecord, RelationshipRecord, RelationshipGroupConsistencyReport>\n+    private enum RelationshipField implements RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport>, ComparativeRecordChecker<RelationshipGroupRecord, RelationshipRecord, RelationshipGroupConsistencyReport>\n     {\n         OUT\n         {\n@@ -204,8 +190,7 @@ public class RelationshipGroupRecordCheck implements\n             {\n                 report.firstOutgoingRelationshipOfOfOtherType();\n             }\n-        },\n-        IN\n+        }, IN\n         {\n             @Override\n             public long valueFrom( RelationshipGroupRecord record )\n@@ -236,8 +221,7 @@ public class RelationshipGroupRecordCheck implements\n             {\n                 report.firstIncomingRelationshipOfOfOtherType();\n             }\n-        },\n-        LOOP\n+        }, LOOP\n         {\n             @Override\n             public long valueFrom( RelationshipGroupRecord record )\n@@ -271,8 +255,7 @@ public class RelationshipGroupRecordCheck implements\n         };\n \n         @Override\n-        public void checkConsistency( RelationshipGroupRecord record,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+        public void checkConsistency( RelationshipGroupRecord record, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine,\n                 RecordAccess records )\n         {\n             long relId = valueFrom( record );\n@@ -283,8 +266,7 @@ public class RelationshipGroupRecordCheck implements\n         }\n \n         @Override\n-        public void checkReference( RelationshipGroupRecord record, RelationshipRecord referred,\n-                CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine,\n+        public void checkReference( RelationshipGroupRecord record, RelationshipRecord referred, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine,\n                 RecordAccess records )\n         {\n             if ( !referred.inUse() )\n@@ -297,7 +279,8 @@ public class RelationshipGroupRecordCheck implements\n                 {\n                     relationshipNotFirstInChain( engine.report() );\n                 }\n-                if ( referred.getType() != record.getType() )\n+\n+if ( referred.getType() != record.getType() )\n                 {\n                     relationshipOfOtherType( engine.report() );\n                 }\n@@ -314,16 +297,15 @@ public class RelationshipGroupRecordCheck implements\n     }\n \n     @Override\n-    public void check( RelationshipGroupRecord record,\n-            CheckerEngine<RelationshipGroupRecord, RelationshipGroupConsistencyReport> engine, RecordAccess records )\n+    public void check( RelationshipGroupRecord record, CheckerEngine<RelationshipGroupRecord,RelationshipGroupConsistencyReport> engine, RecordAccess records )\n     {\n         if ( !record.inUse() )\n         {\n             return;\n         }\n-        for ( RecordField<RelationshipGroupRecord, RelationshipGroupConsistencyReport> field : fields )\n+        for ( RecordField<RelationshipGroupRecord,RelationshipGroupConsistencyReport> field : fields )\n         {\n             field.checkConsistency( record, engine, records );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}