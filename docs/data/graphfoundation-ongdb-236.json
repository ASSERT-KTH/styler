{
    "project_name": "graphfoundation-ongdb",
    "error_id": "236",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/236/DefaultRecoveryService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/236/DefaultRecoveryService.java\nindex 0041064e4db..9ed6f1b0b5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/236/DefaultRecoveryService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/236/DefaultRecoveryService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.recovery;\n \n import java.io.IOException;\n@@ -38,103 +39,103 @@ import static org.neo4j.kernel.impl.transaction.log.Commitment.NO_COMMITMENT;\n \n public class DefaultRecoveryService implements RecoveryService\n {\n-    private final RecoveryStartInformationProvider recoveryStartInformationProvider;\n-    private final StorageEngine storageEngine;\n-    private final TransactionIdStore transactionIdStore;\n-    private final LogicalTransactionStore logicalTransactionStore;\n-    private final LogVersionRepository logVersionRepository;\n+  private final RecoveryStartInformationProvider recoveryStartInformationProvider;\n+  private final StorageEngine storageEngine;\n+  private final TransactionIdStore transactionIdStore;\n+  private final LogicalTransactionStore logicalTransactionStore;\n+  private final LogVersionRepository logVersionRepository;\n \n-    public DefaultRecoveryService( StorageEngine storageEngine, LogTailScanner logTailScanner,\n-            TransactionIdStore transactionIdStore, LogicalTransactionStore logicalTransactionStore,\n-            LogVersionRepository logVersionRepository, RecoveryStartInformationProvider.Monitor monitor )\n-    {\n-        this.storageEngine = storageEngine;\n-        this.transactionIdStore = transactionIdStore;\n-        this.logicalTransactionStore = logicalTransactionStore;\n-        this.logVersionRepository = logVersionRepository;\n-        this.recoveryStartInformationProvider = new RecoveryStartInformationProvider( logTailScanner, monitor );\n-    }\n+  public DefaultRecoveryService(StorageEngine storageEngine, LogTailScanner logTailScanner,\n+                                TransactionIdStore transactionIdStore, LogicalTransactionStore logicalTransactionStore,\n+                                LogVersionRepository logVersionRepository, RecoveryStartInformationProvider.Monitor monitor)\n+  {\n+    this.storageEngine = storageEngine;\n+    this.transactionIdStore = transactionIdStore;\n+    this.logicalTransactionStore = logicalTransactionStore;\n+    this.logVersionRepository = logVersionRepository;\n+    this.recoveryStartInformationProvider = new RecoveryStartInformationProvider(logTailScanner, monitor);\n+  }\n \n-    @Override\n-    public RecoveryStartInformation getRecoveryStartInformation()\n-    {\n-        return recoveryStartInformationProvider.get();\n-    }\n+  @Override\n+  public RecoveryStartInformation getRecoveryStartInformation()\n+  {\n+    return recoveryStartInformationProvider.get();\n+  }\n \n-    @Override\n-    public void startRecovery()\n-    {\n-        // Calling this method means that recovery is required, tell storage engine about it\n-        // This method will be called before recovery actually starts and so will ensure that\n-        // each store is aware that recovery will be performed. At this point all the stores have\n-        // already started btw.\n-        // Go and read more at {@link CommonAbstractStore#deleteIdGenerator()}\n-        storageEngine.prepareForRecoveryRequired();\n-    }\n+  @Override\n+  public void startRecovery()\n+  {\n+    // Calling this method means that recovery is required, tell storage engine about it\n+    // This method will be called before recovery actually starts and so will ensure that\n+    // each store is aware that recovery will be performed. At this point all the stores have\n+    // already started btw.\n+    // Go and read more at {@link CommonAbstractStore#deleteIdGenerator()}\n+    storageEngine.prepareForRecoveryRequired();\n+  }\n \n-    @Override\n-    public RecoveryApplier getRecoveryApplier( TransactionApplicationMode mode ) throws Exception\n-    {\n-        return new RecoveryVisitor( storageEngine, mode );\n-    }\n+  @Override\n+  public RecoveryApplier getRecoveryApplier(TransactionApplicationMode mode) throws Exception\n+  {\n+    return new RecoveryVisitor(storageEngine, mode);\n+  }\n \n-    @Override\n-    public TransactionCursor getTransactions( LogPosition position ) throws IOException\n+  @Override\n+  public TransactionCursor getTransactions(LogPosition position) throws IOException\n+  {\n+    return logicalTransactionStore.getTransactions(position);\n+  }\n+\n+  @Override\n+  public TransactionCursor getTransactionsInReverseOrder(LogPosition position) throws IOException\n+  {\n+    return logicalTransactionStore.getTransactionsInReverseOrder(position);\n+  }\n+\n+  @Override\n+  public void transactionsRecovered(CommittedTransactionRepresentation lastRecoveredTransaction,\n+                                    LogPosition positionAfterLastRecoveredTransaction)\n+  {\n+    long recoveredTransactionLogVersion = positionAfterLastRecoveredTransaction.getLogVersion();\n+    long recoveredTransactionOffset = positionAfterLastRecoveredTransaction.getByteOffset();\n+    if (lastRecoveredTransaction != null)\n     {\n-        return logicalTransactionStore.getTransactions( position );\n+      LogEntryCommit commitEntry = lastRecoveredTransaction.getCommitEntry();\n+      transactionIdStore.setLastCommittedAndClosedTransactionId(\n+          commitEntry.getTxId(),\n+          LogEntryStart.checksum(lastRecoveredTransaction.getStartEntry()),\n+          commitEntry.getTimeWritten(),\n+          recoveredTransactionOffset,\n+          recoveredTransactionLogVersion);\n     }\n+    logVersionRepository.setCurrentLogVersion(recoveredTransactionLogVersion);\n+  }\n \n-    @Override\n-    public TransactionCursor getTransactionsInReverseOrder( LogPosition position ) throws IOException\n+  static class RecoveryVisitor implements RecoveryApplier\n+  {\n+    private final StorageEngine storageEngine;\n+    private final TransactionApplicationMode mode;\n+\n+    RecoveryVisitor(StorageEngine storageEngine, TransactionApplicationMode mode)\n     {\n-        return logicalTransactionStore.getTransactionsInReverseOrder( position );\n+      this.storageEngine = storageEngine;\n+      this.mode = mode;\n     }\n \n     @Override\n-    public void transactionsRecovered( CommittedTransactionRepresentation lastRecoveredTransaction,\n-            LogPosition positionAfterLastRecoveredTransaction )\n+    public boolean visit(CommittedTransactionRepresentation transaction) throws Exception\n     {\n-        long recoveredTransactionLogVersion = positionAfterLastRecoveredTransaction.getLogVersion();\n-        long recoveredTransactionOffset = positionAfterLastRecoveredTransaction.getByteOffset();\n-        if ( lastRecoveredTransaction != null )\n-        {\n-            LogEntryCommit commitEntry = lastRecoveredTransaction.getCommitEntry();\n-            transactionIdStore.setLastCommittedAndClosedTransactionId(\n-                    commitEntry.getTxId(),\n-                    LogEntryStart.checksum( lastRecoveredTransaction.getStartEntry() ),\n-                    commitEntry.getTimeWritten(),\n-                    recoveredTransactionOffset,\n-                    recoveredTransactionLogVersion );\n-        }\n-        logVersionRepository.setCurrentLogVersion( recoveredTransactionLogVersion );\n+      TransactionRepresentation txRepresentation = transaction.getTransactionRepresentation();\n+      long txId = transaction.getCommitEntry().getTxId();\n+      TransactionToApply tx = new TransactionToApply(txRepresentation, txId);\n+      tx.commitment(NO_COMMITMENT, txId);\n+      tx.logPosition(transaction.getStartEntry().getStartPosition());\n+      storageEngine.apply(tx, mode);\n+      return false;\n     }\n \n-    static class RecoveryVisitor implements RecoveryApplier\n-    {\n-        private final StorageEngine storageEngine;\n-        private final TransactionApplicationMode mode;\n-\n-        RecoveryVisitor( StorageEngine storageEngine, TransactionApplicationMode mode )\n-        {\n-            this.storageEngine = storageEngine;\n-            this.mode = mode;\n-        }\n-\n-        @Override\n-        public boolean visit( CommittedTransactionRepresentation transaction ) throws Exception\n-        {\n-            TransactionRepresentation txRepresentation = transaction.getTransactionRepresentation();\n-            long txId = transaction.getCommitEntry().getTxId();\n-            TransactionToApply tx = new TransactionToApply( txRepresentation, txId );\n-            tx.commitment( NO_COMMITMENT, txId );\n-            tx.logPosition( transaction.getStartEntry().getStartPosition() );\n-            storageEngine.apply( tx, mode );\n-            return false;\n-        }\n-\n-        @Override\n-        public void close()\n-        {   // nothing to close\n-        }\n+    @Override\n+    public void close()\n+    {   // nothing to close\n     }\n+  }\n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 253).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/236/DefaultRecoveryService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/236/DefaultRecoveryService.java\nindex 0041064e4db..667d1f9af71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/236/DefaultRecoveryService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/236/DefaultRecoveryService.java\n@@ -99,12 +99,7 @@ public class DefaultRecoveryService implements RecoveryService\n         if ( lastRecoveredTransaction != null )\n         {\n             LogEntryCommit commitEntry = lastRecoveredTransaction.getCommitEntry();\n-            transactionIdStore.setLastCommittedAndClosedTransactionId(\n-                    commitEntry.getTxId(),\n-                    LogEntryStart.checksum( lastRecoveredTransaction.getStartEntry() ),\n-                    commitEntry.getTimeWritten(),\n-                    recoveredTransactionOffset,\n-                    recoveredTransactionLogVersion );\n+            transactionIdStore.setLastCommittedAndClosedTransactionId( commitEntry.getTxId(), LogEntryStart.checksum( lastRecoveredTransaction.getStartEntry() ), commitEntry.getTimeWritten(), recoveredTransactionOffset, recoveredTransactionLogVersion );\n         }\n         logVersionRepository.setCurrentLogVersion( recoveredTransactionLogVersion );\n     }\n@@ -134,7 +129,8 @@ public class DefaultRecoveryService implements RecoveryService\n \n         @Override\n         public void close()\n-        {   // nothing to close\n+        {\n+    // nothing to close\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}