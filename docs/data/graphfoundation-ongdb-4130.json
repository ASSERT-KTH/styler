{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4130",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4130/AbstractStoreProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4130/AbstractStoreProcessor.java\nindex 72ee9693283..56d6a71bcfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4130/AbstractStoreProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4130/AbstractStoreProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.RecordType;\n@@ -46,188 +47,186 @@ import static org.neo4j.consistency.checking.DynamicStore.SCHEMA;\n \n public abstract class AbstractStoreProcessor extends RecordStore.Processor<RuntimeException>\n {\n-    private RecordCheck<NodeRecord, NodeConsistencyReport> sparseNodeChecker;\n-    private RecordCheck<NodeRecord, NodeConsistencyReport> denseNodeChecker;\n-    private RecordCheck<RelationshipRecord, RelationshipConsistencyReport> relationshipChecker;\n-    private final RecordCheck<PropertyRecord, PropertyConsistencyReport> propertyChecker;\n-    private final RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> propertyKeyTokenChecker;\n-    private final RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> relationshipTypeTokenChecker;\n-    private final RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> labelTokenChecker;\n-    private final RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> relationshipGroupChecker;\n-\n-    public AbstractStoreProcessor()\n-    {\n-        this( CheckDecorator.NONE );\n-    }\n-\n-    public AbstractStoreProcessor( CheckDecorator decorator )\n-    {\n-        this.sparseNodeChecker = decorator.decorateNodeChecker( NodeRecordCheck.forSparseNodes() );\n-        this.denseNodeChecker = decorator.decorateNodeChecker( NodeRecordCheck.forDenseNodes() );\n-        this.relationshipChecker = decorator.decorateRelationshipChecker( new RelationshipRecordCheck() );\n-        this.propertyChecker = decorator.decoratePropertyChecker( new PropertyRecordCheck() );\n-        this.propertyKeyTokenChecker = decorator.decoratePropertyKeyTokenChecker( new PropertyKeyTokenRecordCheck() );\n-        this.relationshipTypeTokenChecker =\n-                decorator.decorateRelationshipTypeTokenChecker( new RelationshipTypeTokenRecordCheck() );\n-        this.labelTokenChecker = decorator.decorateLabelTokenChecker( new LabelTokenRecordCheck() );\n-        this.relationshipGroupChecker = decorator.decorateRelationshipGroupChecker( new RelationshipGroupRecordCheck() );\n-    }\n-\n-    public void reDecorateRelationship( CheckDecorator decorator, RelationshipRecordCheck newChecker )\n-    {\n-        this.relationshipChecker = decorator.decorateRelationshipChecker( newChecker );\n-    }\n-\n-    public void reDecorateNode( CheckDecorator decorator, NodeRecordCheck newChecker, boolean sparseNode )\n-    {\n-        if ( sparseNode )\n-        {\n-            this.sparseNodeChecker = decorator.decorateNodeChecker( newChecker );\n-        }\n-        else\n-        {\n-            this.denseNodeChecker = decorator.decorateNodeChecker( newChecker );\n-        }\n-    }\n-\n-    protected abstract void checkNode(\n-            RecordStore<NodeRecord> store, NodeRecord node,\n-            RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker );\n-\n-    protected abstract void checkRelationship(\n-            RecordStore<RelationshipRecord> store, RelationshipRecord rel,\n-            RecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker );\n-\n-    protected abstract void checkProperty(\n-            RecordStore<PropertyRecord> store, PropertyRecord property,\n-            RecordCheck<PropertyRecord, PropertyConsistencyReport> checker );\n-\n-    protected abstract void checkRelationshipTypeToken(\n-            RecordStore<RelationshipTypeTokenRecord> store,\n-            RelationshipTypeTokenRecord record,\n-            RecordCheck<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport> checker );\n-\n-    protected abstract void checkLabelToken(\n-            RecordStore<LabelTokenRecord> store,\n-            LabelTokenRecord record,\n-            RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker );\n-\n-    protected abstract void checkPropertyKeyToken(\n-            RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord record,\n-            RecordCheck<PropertyKeyTokenRecord,\n-                    PropertyKeyTokenConsistencyReport> checker );\n-\n-    protected abstract void checkDynamic(\n-            RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-            RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker );\n-\n-    protected abstract void checkDynamicLabel(\n-            RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-            RecordCheck<DynamicRecord, ConsistencyReport.DynamicLabelConsistencyReport> checker );\n-\n-    protected abstract void checkRelationshipGroup(\n-            RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker );\n-\n-    @Override\n-    public void processSchema( RecordStore<DynamicRecord> store, DynamicRecord schema )\n-    {\n-        // cf. StoreProcessor\n-        checkDynamic( RecordType.SCHEMA, store, schema, new DynamicRecordCheck( store, SCHEMA ) );\n-    }\n-\n-    @Override\n-    public void processNode( RecordStore<NodeRecord> store, NodeRecord node )\n-    {\n-        if ( node.isDense() )\n-        {\n-            checkNode( store, node, denseNodeChecker );\n-        }\n-        else\n-        {\n-            checkNode( store, node, sparseNodeChecker );\n-        }\n-    }\n-\n-    @Override\n-    public final void processRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel )\n+  private RecordCheck<NodeRecord, NodeConsistencyReport> sparseNodeChecker;\n+  private RecordCheck<NodeRecord, NodeConsistencyReport> denseNodeChecker;\n+  private RecordCheck<RelationshipRecord, RelationshipConsistencyReport> relationshipChecker;\n+  private final RecordCheck<PropertyRecord, PropertyConsistencyReport> propertyChecker;\n+  private final RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> propertyKeyTokenChecker;\n+  private final RecordCheck<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport> relationshipTypeTokenChecker;\n+  private final RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> labelTokenChecker;\n+  private final RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> relationshipGroupChecker;\n+\n+  public AbstractStoreProcessor()\n+  {\n+    this(CheckDecorator.NONE);\n+  }\n+\n+  public AbstractStoreProcessor(CheckDecorator decorator)\n+  {\n+    this.sparseNodeChecker = decorator.decorateNodeChecker(NodeRecordCheck.forSparseNodes());\n+    this.denseNodeChecker = decorator.decorateNodeChecker(NodeRecordCheck.forDenseNodes());\n+    this.relationshipChecker = decorator.decorateRelationshipChecker(new RelationshipRecordCheck());\n+    this.propertyChecker = decorator.decoratePropertyChecker(new PropertyRecordCheck());\n+    this.propertyKeyTokenChecker = decorator.decoratePropertyKeyTokenChecker(new PropertyKeyTokenRecordCheck());\n+    this.relationshipTypeTokenChecker =\n+        decorator.decorateRelationshipTypeTokenChecker(new RelationshipTypeTokenRecordCheck());\n+    this.labelTokenChecker = decorator.decorateLabelTokenChecker(new LabelTokenRecordCheck());\n+    this.relationshipGroupChecker = decorator.decorateRelationshipGroupChecker(new RelationshipGroupRecordCheck());\n+  }\n+\n+  public void reDecorateRelationship(CheckDecorator decorator, RelationshipRecordCheck newChecker)\n+  {\n+    this.relationshipChecker = decorator.decorateRelationshipChecker(newChecker);\n+  }\n+\n+  public void reDecorateNode(CheckDecorator decorator, NodeRecordCheck newChecker, boolean sparseNode)\n+  {\n+    if (sparseNode)\n     {\n-        checkRelationship( store, rel, relationshipChecker );\n-    }\n-\n-    @Override\n-    public final void processProperty( RecordStore<PropertyRecord> store, PropertyRecord property )\n+      this.sparseNodeChecker = decorator.decorateNodeChecker(newChecker);\n+    } else\n     {\n-        checkProperty( store, property, propertyChecker );\n+      this.denseNodeChecker = decorator.decorateNodeChecker(newChecker);\n     }\n-\n-    @Override\n-    public final void processString( RecordStore<DynamicRecord> store, DynamicRecord string, IdType idType )\n+  }\n+\n+  protected abstract void checkNode(\n+      RecordStore<NodeRecord> store, NodeRecord node,\n+      RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker);\n+\n+  protected abstract void checkRelationship(\n+      RecordStore<RelationshipRecord> store, RelationshipRecord rel,\n+      RecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker);\n+\n+  protected abstract void checkProperty(\n+      RecordStore<PropertyRecord> store, PropertyRecord property,\n+      RecordCheck<PropertyRecord, PropertyConsistencyReport> checker);\n+\n+  protected abstract void checkRelationshipTypeToken(\n+      RecordStore<RelationshipTypeTokenRecord> store,\n+      RelationshipTypeTokenRecord record,\n+      RecordCheck<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport> checker);\n+\n+  protected abstract void checkLabelToken(\n+      RecordStore<LabelTokenRecord> store,\n+      LabelTokenRecord record,\n+      RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker);\n+\n+  protected abstract void checkPropertyKeyToken(\n+      RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord record,\n+      RecordCheck<PropertyKeyTokenRecord,\n+          PropertyKeyTokenConsistencyReport> checker);\n+\n+  protected abstract void checkDynamic(\n+      RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n+      RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker);\n+\n+  protected abstract void checkDynamicLabel(\n+      RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n+      RecordCheck<DynamicRecord, ConsistencyReport.DynamicLabelConsistencyReport> checker);\n+\n+  protected abstract void checkRelationshipGroup(\n+      RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record,\n+      RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker);\n+\n+  @Override\n+  public void processSchema(RecordStore<DynamicRecord> store, DynamicRecord schema)\n+  {\n+    // cf. StoreProcessor\n+    checkDynamic(RecordType.SCHEMA, store, schema, new DynamicRecordCheck(store, SCHEMA));\n+  }\n+\n+  @Override\n+  public void processNode(RecordStore<NodeRecord> store, NodeRecord node)\n+  {\n+    if (node.isDense())\n     {\n-        RecordType type;\n-        DynamicStore dereference;\n-        switch ( idType )\n-        {\n-        case STRING_BLOCK:\n-            type = RecordType.STRING_PROPERTY;\n-            dereference = DynamicStore.STRING;\n-            break;\n-        case RELATIONSHIP_TYPE_TOKEN_NAME:\n-            type = RecordType.RELATIONSHIP_TYPE_NAME;\n-            dereference = DynamicStore.RELATIONSHIP_TYPE;\n-            break;\n-        case PROPERTY_KEY_TOKEN_NAME:\n-            type = RecordType.PROPERTY_KEY_NAME;\n-            dereference = DynamicStore.PROPERTY_KEY;\n-            break;\n-        case LABEL_TOKEN_NAME:\n-            type = RecordType.LABEL_NAME;\n-            dereference = DynamicStore.LABEL;\n-            break;\n-        default:\n-            throw new IllegalArgumentException( format( \"The id type [%s] is not valid for String records.\", idType ) );\n-        }\n-        checkDynamic( type, store, string, new DynamicRecordCheck( store, dereference ) );\n-    }\n-\n-    @Override\n-    public final void processArray( RecordStore<DynamicRecord> store, DynamicRecord array )\n+      checkNode(store, node, denseNodeChecker);\n+    } else\n     {\n-        checkDynamic( RecordType.ARRAY_PROPERTY, store, array, new DynamicRecordCheck( store, ARRAY ) );\n+      checkNode(store, node, sparseNodeChecker);\n     }\n-\n-    @Override\n-    public final void processLabelArrayWithOwner( RecordStore<DynamicRecord> store, DynamicRecord array )\n-    {\n-        checkDynamic( RecordType.NODE_DYNAMIC_LABEL, store, array, new DynamicRecordCheck( store, NODE_LABEL ) );\n-        checkDynamicLabel( RecordType.NODE_DYNAMIC_LABEL, store, array, new NodeDynamicLabelOrphanChainStartCheck() );\n-    }\n-\n-    @Override\n-    public final void processRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n-                                                    RelationshipTypeTokenRecord record )\n-    {\n-        checkRelationshipTypeToken( store, record, relationshipTypeTokenChecker );\n-    }\n-\n-    @Override\n-    public final void processPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store,\n-                                               PropertyKeyTokenRecord record )\n-    {\n-        checkPropertyKeyToken( store, record, propertyKeyTokenChecker );\n-    }\n-\n-    @Override\n-    public void processLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord record )\n-    {\n-        checkLabelToken( store, record, labelTokenChecker );\n-    }\n-\n-    @Override\n-    public void processRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record )\n-            throws RuntimeException\n+  }\n+\n+  @Override\n+  public final void processRelationship(RecordStore<RelationshipRecord> store, RelationshipRecord rel)\n+  {\n+    checkRelationship(store, rel, relationshipChecker);\n+  }\n+\n+  @Override\n+  public final void processProperty(RecordStore<PropertyRecord> store, PropertyRecord property)\n+  {\n+    checkProperty(store, property, propertyChecker);\n+  }\n+\n+  @Override\n+  public final void processString(RecordStore<DynamicRecord> store, DynamicRecord string, IdType idType)\n+  {\n+    RecordType type;\n+    DynamicStore dereference;\n+    switch (idType)\n     {\n-        checkRelationshipGroup( store, record, relationshipGroupChecker );\n+      case STRING_BLOCK:\n+        type = RecordType.STRING_PROPERTY;\n+        dereference = DynamicStore.STRING;\n+        break;\n+      case RELATIONSHIP_TYPE_TOKEN_NAME:\n+        type = RecordType.RELATIONSHIP_TYPE_NAME;\n+        dereference = DynamicStore.RELATIONSHIP_TYPE;\n+        break;\n+      case PROPERTY_KEY_TOKEN_NAME:\n+        type = RecordType.PROPERTY_KEY_NAME;\n+        dereference = DynamicStore.PROPERTY_KEY;\n+        break;\n+      case LABEL_TOKEN_NAME:\n+        type = RecordType.LABEL_NAME;\n+        dereference = DynamicStore.LABEL;\n+        break;\n+      default:\n+        throw new IllegalArgumentException(format(\"The id type [%s] is not valid for String records.\", idType));\n     }\n+    checkDynamic(type, store, string, new DynamicRecordCheck(store, dereference));\n+  }\n+\n+  @Override\n+  public final void processArray(RecordStore<DynamicRecord> store, DynamicRecord array)\n+  {\n+    checkDynamic(RecordType.ARRAY_PROPERTY, store, array, new DynamicRecordCheck(store, ARRAY));\n+  }\n+\n+  @Override\n+  public final void processLabelArrayWithOwner(RecordStore<DynamicRecord> store, DynamicRecord array)\n+  {\n+    checkDynamic(RecordType.NODE_DYNAMIC_LABEL, store, array, new DynamicRecordCheck(store, NODE_LABEL));\n+    checkDynamicLabel(RecordType.NODE_DYNAMIC_LABEL, store, array, new NodeDynamicLabelOrphanChainStartCheck());\n+  }\n+\n+  @Override\n+  public final void processRelationshipTypeToken(RecordStore<RelationshipTypeTokenRecord> store,\n+                                                 RelationshipTypeTokenRecord record)\n+  {\n+    checkRelationshipTypeToken(store, record, relationshipTypeTokenChecker);\n+  }\n+\n+  @Override\n+  public final void processPropertyKeyToken(RecordStore<PropertyKeyTokenRecord> store,\n+                                            PropertyKeyTokenRecord record)\n+  {\n+    checkPropertyKeyToken(store, record, propertyKeyTokenChecker);\n+  }\n+\n+  @Override\n+  public void processLabelToken(RecordStore<LabelTokenRecord> store, LabelTokenRecord record)\n+  {\n+    checkLabelToken(store, record, labelTokenChecker);\n+  }\n+\n+  @Override\n+  public void processRelationshipGroup(RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record)\n+      throws RuntimeException\n+  {\n+    checkRelationshipGroup(store, record, relationshipGroupChecker);\n+  }\n \n }\n",
            "diff_size": 284
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4130/AbstractStoreProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4130/AbstractStoreProcessor.java\nindex 72ee9693283..3a571ea8beb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4130/AbstractStoreProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4130/AbstractStoreProcessor.java\n@@ -46,11 +46,11 @@ import static org.neo4j.consistency.checking.DynamicStore.SCHEMA;\n \n public abstract class AbstractStoreProcessor extends RecordStore.Processor<RuntimeException>\n {\n-    private RecordCheck<NodeRecord, NodeConsistencyReport> sparseNodeChecker;\n-    private RecordCheck<NodeRecord, NodeConsistencyReport> denseNodeChecker;\n-    private RecordCheck<RelationshipRecord, RelationshipConsistencyReport> relationshipChecker;\n-    private final RecordCheck<PropertyRecord, PropertyConsistencyReport> propertyChecker;\n-    private final RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> propertyKeyTokenChecker;\n+    private RecordCheck<NodeRecord,NodeConsistencyReport> sparseNodeChecker;\n+    private RecordCheck<NodeRecord,NodeConsistencyReport> denseNodeChecker;\n+    private RecordCheck<RelationshipRecord,RelationshipConsistencyReport> relationshipChecker;\n+    private final RecordCheck<PropertyRecord,PropertyConsistencyReport> propertyChecker;\n+    private final RecordCheck<PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport> propertyKeyTokenChecker;\n     private final RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> relationshipTypeTokenChecker;\n     private final RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> labelTokenChecker;\n     private final RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> relationshipGroupChecker;\n@@ -67,9 +67,8 @@ public abstract class AbstractStoreProcessor extends RecordStore.Processor<Runti\n         this.relationshipChecker = decorator.decorateRelationshipChecker( new RelationshipRecordCheck() );\n         this.propertyChecker = decorator.decoratePropertyChecker( new PropertyRecordCheck() );\n         this.propertyKeyTokenChecker = decorator.decoratePropertyKeyTokenChecker( new PropertyKeyTokenRecordCheck() );\n-        this.relationshipTypeTokenChecker =\n-                decorator.decorateRelationshipTypeTokenChecker( new RelationshipTypeTokenRecordCheck() );\n-        this.labelTokenChecker = decorator.decorateLabelTokenChecker( new LabelTokenRecordCheck() );\n+        this.relationshipTypeTokenChecker = decorator.decorateRelationshipTypeTokenChecker( new RelationshipTypeTokenRecordCheck() );\n+this.labelTokenChecker = decorator.decorateLabelTokenChecker( new LabelTokenRecordCheck() );\n         this.relationshipGroupChecker = decorator.decorateRelationshipGroupChecker( new RelationshipGroupRecordCheck() );\n     }\n \n@@ -90,46 +89,19 @@ public abstract class AbstractStoreProcessor extends RecordStore.Processor<Runti\n         }\n     }\n \n-    protected abstract void checkNode(\n-            RecordStore<NodeRecord> store, NodeRecord node,\n-            RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker );\n-\n-    protected abstract void checkRelationship(\n-            RecordStore<RelationshipRecord> store, RelationshipRecord rel,\n-            RecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker );\n-\n-    protected abstract void checkProperty(\n-            RecordStore<PropertyRecord> store, PropertyRecord property,\n-            RecordCheck<PropertyRecord, PropertyConsistencyReport> checker );\n-\n-    protected abstract void checkRelationshipTypeToken(\n-            RecordStore<RelationshipTypeTokenRecord> store,\n-            RelationshipTypeTokenRecord record,\n-            RecordCheck<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport> checker );\n-\n-    protected abstract void checkLabelToken(\n-            RecordStore<LabelTokenRecord> store,\n-            LabelTokenRecord record,\n-            RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker );\n-\n-    protected abstract void checkPropertyKeyToken(\n-            RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord record,\n-            RecordCheck<PropertyKeyTokenRecord,\n-                    PropertyKeyTokenConsistencyReport> checker );\n-\n-    protected abstract void checkDynamic(\n-            RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-            RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker );\n-\n-    protected abstract void checkDynamicLabel(\n-            RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-            RecordCheck<DynamicRecord, ConsistencyReport.DynamicLabelConsistencyReport> checker );\n-\n-    protected abstract void checkRelationshipGroup(\n-            RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker );\n-\n-    @Override\n+    protected abstract void checkNode( RecordStore<NodeRecord> store, NodeRecord node, RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker );\n+protected abstract void checkRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel, RecordCheck<RelationshipRecord,RelationshipConsistencyReport> checker );\n+protected abstract void checkProperty( RecordStore<PropertyRecord> store, PropertyRecord property, RecordCheck<PropertyRecord,PropertyConsistencyReport> checker );\n+protected abstract void checkRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n+            RelationshipTypeTokenRecord record, RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> checker );\n+protected abstract void checkLabelToken( RecordStore<LabelTokenRecord> store,\n+            LabelTokenRecord record, RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> checker );\n+protected abstract void checkPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord record, RecordCheck<PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport> checker );\n+protected abstract void checkDynamic( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string, RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker );\n+protected abstract void checkDynamicLabel( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string, RecordCheck<DynamicRecord, ConsistencyReport.DynamicLabelConsistencyReport> checker );\n+protected abstract void checkRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record, RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker );\n+\n+@Override\n     public void processSchema( RecordStore<DynamicRecord> store, DynamicRecord schema )\n     {\n         // cf. StoreProcessor\n@@ -187,7 +159,8 @@ public abstract class AbstractStoreProcessor extends RecordStore.Processor<Runti\n         default:\n             throw new IllegalArgumentException( format( \"The id type [%s] is not valid for String records.\", idType ) );\n         }\n-        checkDynamic( type, store, string, new DynamicRecordCheck( store, dereference ) );\n+\n+checkDynamic( type, store, string, new DynamicRecordCheck( store, dereference ) );\n     }\n \n     @Override\n@@ -204,16 +177,14 @@ public abstract class AbstractStoreProcessor extends RecordStore.Processor<Runti\n     }\n \n     @Override\n-    public final void processRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n-                                                    RelationshipTypeTokenRecord record )\n-    {\n+    public final void processRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store, RelationshipTypeTokenRecord record )\n+{\n         checkRelationshipTypeToken( store, record, relationshipTypeTokenChecker );\n     }\n \n     @Override\n-    public final void processPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store,\n-                                               PropertyKeyTokenRecord record )\n-    {\n+    public final void processPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord record )\n+{\n         checkPropertyKeyToken( store, record, propertyKeyTokenChecker );\n     }\n \n@@ -224,10 +195,8 @@ public abstract class AbstractStoreProcessor extends RecordStore.Processor<Runti\n     }\n \n     @Override\n-    public void processRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record )\n-            throws RuntimeException\n-    {\n+    public void processRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record ) throws RuntimeException\n+{\n         checkRelationshipGroup( store, record, relationshipGroupChecker );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}