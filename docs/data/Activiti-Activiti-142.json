{
    "project_name": "Activiti-Activiti",
    "error_id": "142",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/142/StartEvent.java\nindex 92b9a2cf96a..72d97e81ad7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/142/StartEvent.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/142/StartEvent.java\nindex 92b9a2cf96a..4bbfa16738a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/142/StartEvent.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -17,62 +18,62 @@ import java.util.List;\n \n public class StartEvent extends Event {\n \n-  protected String initiator;\n-  protected String formKey;\n-  protected boolean isInterrupting;\n-  protected List<FormProperty> formProperties = new ArrayList<FormProperty>();\n-\n-  public String getInitiator() {\n-    return initiator;\n-  }\n-\n-  public void setInitiator(String initiator) {\n-    this.initiator = initiator;\n-  }\n-\n-  public String getFormKey() {\n-    return formKey;\n-  }\n-\n-  public void setFormKey(String formKey) {\n-    this.formKey = formKey;\n-  }\n-\n-  public boolean isInterrupting() {\n-    return isInterrupting;\n-  }\n-\n-  public void setInterrupting(boolean isInterrupting) {\n-    this.isInterrupting = isInterrupting;\n-  }\n-\n-  public List<FormProperty> getFormProperties() {\n-    return formProperties;\n-  }\n-\n-  public void setFormProperties(List<FormProperty> formProperties) {\n-    this.formProperties = formProperties;\n-  }\n-\n-  public StartEvent clone() {\n-    StartEvent clone = new StartEvent();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(StartEvent otherEvent) {\n-    super.setValues(otherEvent);\n-    setInitiator(otherEvent.getInitiator());\n-    setFormKey(otherEvent.getFormKey());\n-    setInterrupting(otherEvent.isInterrupting);\n-\n-    formProperties = new ArrayList<FormProperty>();\n-    if (otherEvent.getFormProperties() != null && !otherEvent.getFormProperties().isEmpty()) {\n-      for (FormProperty property : otherEvent.getFormProperties()) {\n-        formProperties.add(property.clone());\n-      }\n+    protected String initiator;\n+    protected String formKey;\n+    protected boolean isInterrupting;\n+    protected List<FormProperty> formProperties = new ArrayList<FormProperty>();\n+\n+    public String getInitiator() {\n+        return initiator;\n+    }\n+\n+    public void setInitiator(String initiator) {\n+        this.initiator = initiator;\n+    }\n+\n+    public String getFormKey() {\n+        return formKey;\n+    }\n+\n+    public void setFormKey(String formKey) {\n+        this.formKey = formKey;\n+    }\n+\n+    public boolean isInterrupting() {\n+        return isInterrupting;\n+    }\n+\n+    public void setInterrupting(boolean isInterrupting) {\n+        this.isInterrupting = isInterrupting;\n+    }\n+\n+    public List<FormProperty> getFormProperties() {\n+        return formProperties;\n+    }\n+\n+    public void setFormProperties(List<FormProperty> formProperties) {\n+        this.formProperties = formProperties;\n+    }\n+\n+    public StartEvent clone() {\n+        StartEvent clone = new StartEvent();\n+        clone.setValues(this);\n+        return clone;\n+    }\n+\n+    public void setValues(StartEvent otherEvent) {\n+        super.setValues(otherEvent);\n+        setInitiator(otherEvent.getInitiator());\n+        setFormKey(otherEvent.getFormKey());\n+        setInterrupting(otherEvent.isInterrupting);\n+\n+        formProperties = new ArrayList<FormProperty>();\n+        if (otherEvent.getFormProperties() != null && !otherEvent.getFormProperties().isEmpty()) {\n+            for (FormProperty property : otherEvent.getFormProperties()) {\n+                formProperties.add(property.clone());\n+            }\n+        }\n     }\n-  }\n \n     @Override\n     public void accept(ReferenceOverrider referenceOverrider) {\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/142/StartEvent.java\nindex 92b9a2cf96a..9ca5435f143 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/142/StartEvent.java\n@@ -15,13 +15,13 @@ package org.activiti.bpmn.model;\n import java.util.ArrayList;\n import java.util.List;\n \n+\n public class StartEvent extends Event {\n \n   protected String initiator;\n   protected String formKey;\n   protected boolean isInterrupting;\n   protected List<FormProperty> formProperties = new ArrayList<FormProperty>();\n-\n   public String getInitiator() {\n     return initiator;\n   }\n@@ -65,17 +65,16 @@ public class StartEvent extends Event {\n     setInitiator(otherEvent.getInitiator());\n     setFormKey(otherEvent.getFormKey());\n     setInterrupting(otherEvent.isInterrupting);\n-\n     formProperties = new ArrayList<FormProperty>();\n     if (otherEvent.getFormProperties() != null && !otherEvent.getFormProperties().isEmpty()) {\n-      for (FormProperty property : otherEvent.getFormProperties()) {\n-        formProperties.add(property.clone());\n-      }\n+        for (FormProperty property : otherEvent.getFormProperties()) {\n+            formProperties.add(property.clone());\n+        }\n     }\n   }\n \n-    @Override\n-    public void accept(ReferenceOverrider referenceOverrider) {\n-        referenceOverrider.override(this);\n-    }\n-}\n+  @Override\n+  public void accept(ReferenceOverrider referenceOverrider) {\n+    referenceOverrider.override(this);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/142/StartEvent.java\nindex 92b9a2cf96a..72d97e81ad7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/142/StartEvent.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/142/StartEvent.java\nindex 92b9a2cf96a..72d97e81ad7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/142/StartEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/142/StartEvent.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}