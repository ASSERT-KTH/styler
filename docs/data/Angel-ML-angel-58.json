{
    "project_name": "Angel-ML-angel",
    "error_id": "58",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/58/AdaDeltaUpdateFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/58/AdaDeltaUpdateFunc.java\nindex 5451bd90648..bc21e10f2d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/58/AdaDeltaUpdateFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/58/AdaDeltaUpdateFunc.java\n@@ -33,14 +33,15 @@ public class AdaDeltaUpdateFunc extends OptMMUpdateFunc {\n   }\n \n   public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta,\n-      double lr, double regL1Param, double regL2Param, int epoch) {\n+                            double lr, double regL1Param, double regL2Param, int epoch) {\n     this(matId, factor, epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, 1);\n   }\n \n   public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta,\n-      double lr, double regL1Param, double regL2Param, int epoch, int batchSize) {\n-    super(matId, new int[]{factor},\n-        new double[]{epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, batchSize});\n+                            double lr, double regL1Param, double regL2Param, int epoch,\n+                            int batchSize) {\n+    super(matId, new int[] {factor},\n+        new double[] {epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, batchSize});\n   }\n \n   @Override\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/58/AdaDeltaUpdateFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/58/AdaDeltaUpdateFunc.java\nindex 5451bd90648..de198079c6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/58/AdaDeltaUpdateFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/58/AdaDeltaUpdateFunc.java\n@@ -32,15 +32,12 @@ public class AdaDeltaUpdateFunc extends OptMMUpdateFunc {\n     super();\n   }\n \n-  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta,\n-      double lr, double regL1Param, double regL2Param, int epoch) {\n-    this(matId, factor, epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, 1);\n+  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta, double lr, double regL1Param, double regL2Param, int epoch) {\n+  this(matId, factor, epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, 1);\n   }\n \n-  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta,\n-      double lr, double regL1Param, double regL2Param, int epoch, int batchSize) {\n-    super(matId, new int[]{factor},\n-        new double[]{epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, batchSize});\n+  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta, double lr, double regL1Param, double regL2Param, int epoch, int batchSize) {\n+    super(matId, new int[]{factor}, new double[]{epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, batchSize});\n   }\n \n   @Override\n@@ -88,4 +85,4 @@ public class AdaDeltaUpdateFunc extends OptMMUpdateFunc {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/58/AdaDeltaUpdateFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/58/AdaDeltaUpdateFunc.java\nindex 5451bd90648..846ad5265ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/58/AdaDeltaUpdateFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/58/AdaDeltaUpdateFunc.java\n@@ -32,19 +32,17 @@ public class AdaDeltaUpdateFunc extends OptMMUpdateFunc {\n     super();\n   }\n \n-  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta,\n-      double lr, double regL1Param, double regL2Param, int epoch) {\n+  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta, double lr, double regL1Param, double regL2Param, int epoch) {\n     this(matId, factor, epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, 1);\n   }\n \n-  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta,\n-      double lr, double regL1Param, double regL2Param, int epoch, int batchSize) {\n-    super(matId, new int[]{factor},\n-        new double[]{epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, batchSize});\n+  public AdaDeltaUpdateFunc(int matId, int factor, double epsilon, double alpha, double beta, double lr, double regL1Param, double regL2Param, int epoch, int batchSize) {\n+    super(matId, new int[]{factor}, new double[]{epsilon, alpha, beta, lr, regL1Param, regL2Param, epoch, batchSize});\n   }\n \n   @Override\n-  public void update(ServerPartition partition, int factor, double[] scalars) {\n+  public void update(\n+    ServerPartition partition, int factor, double[] scalars) {\n     double epsilon = scalars[0];\n     double alpha = scalars[1];\n     double beta = scalars[2];\n@@ -53,7 +51,6 @@ public class AdaDeltaUpdateFunc extends OptMMUpdateFunc {\n     double l2RegParam = scalars[5];\n     double epoch = (int) scalars[6];\n     double batchSize = (int) scalars[7];\n-\n     for (int f = 0; f < factor; f++) {\n       ServerRow gradientServerRow = partition.getRow(f + 3 * factor);\n       try {\n@@ -62,30 +59,25 @@ public class AdaDeltaUpdateFunc extends OptMMUpdateFunc {\n         Vector square1 = partition.getRow(f + factor).getSplit();\n         Vector square2 = partition.getRow(f + 2 * factor).getSplit();\n         Vector gradient = gradientServerRow.getSplit();\n-\n         if (batchSize > 1) {\n           gradient.idiv(batchSize);\n         }\n-\n         OptFuncs.iexpsmoothing2(square1, gradient, alpha);\n         Vector hessian = OptFuncs.adadeltahessian(square1, square2);\n-\n         if (l2RegParam != 0) {\n           gradient.iaxpy(weight, l2RegParam);\n         }\n-\n         OptFuncs.iadadeltadelta(gradient, hessian, l2RegParam);\n         weight.isub(gradient);\n         OptFuncs.iexpsmoothing2(square2, gradient, beta);\n-\n         if (l1RegParam != 0) {\n           OptFuncs.iadadeltathredshold(weight, hessian, l1RegParam, l2RegParam);\n         }\n-\n         gradient.clear();\n       } finally {\n         gradientServerRow.endWrite();\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}