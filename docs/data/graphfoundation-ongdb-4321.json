{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4321",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4321/SchemaCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4321/SchemaCache.java\nindex 1fccff2b7da..01fb7e887dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4321/SchemaCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4321/SchemaCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import java.util.ArrayList;\n@@ -53,282 +54,277 @@ import static java.util.Collections.emptyIterator;\n  */\n public class SchemaCache\n {\n-    private final Lock cacheUpdateLock = new StampedLock().asWriteLock();\n-    private volatile SchemaCacheState schemaCacheState;\n-\n-    public SchemaCache( ConstraintSemantics constraintSemantics, Iterable<SchemaRule> initialRules )\n+  private final Lock cacheUpdateLock = new StampedLock().asWriteLock();\n+  private volatile SchemaCacheState schemaCacheState;\n+\n+  public SchemaCache(ConstraintSemantics constraintSemantics, Iterable<SchemaRule> initialRules)\n+  {\n+    this.schemaCacheState = new SchemaCacheState(constraintSemantics, initialRules);\n+  }\n+\n+  public Iterable<IndexRule> indexRules()\n+  {\n+    return schemaCacheState.indexRules();\n+  }\n+\n+  public Iterable<ConstraintRule> constraintRules()\n+  {\n+    return schemaCacheState.constraintRules();\n+  }\n+\n+  public boolean hasConstraintRule(Long constraintRuleId)\n+  {\n+    return schemaCacheState.hasConstraintRule(constraintRuleId);\n+  }\n+\n+  public boolean hasConstraintRule(ConstraintDescriptor descriptor)\n+  {\n+    return schemaCacheState.hasConstraintRule(descriptor);\n+  }\n+\n+  public boolean hasIndexRule(SchemaDescriptor descriptor)\n+  {\n+    return schemaCacheState.hasIndexRule(descriptor);\n+  }\n+\n+  public Iterator<ConstraintDescriptor> constraints()\n+  {\n+    return schemaCacheState.constraints();\n+  }\n+\n+  public Iterator<ConstraintDescriptor> constraintsForLabel(final int label)\n+  {\n+    return Iterators.filter(SchemaDescriptorPredicates.hasLabel(label), constraints());\n+  }\n+\n+  public Iterator<ConstraintDescriptor> constraintsForRelationshipType(final int relTypeId)\n+  {\n+    return Iterators.filter(SchemaDescriptorPredicates.hasRelType(relTypeId), constraints());\n+  }\n+\n+  public Iterator<ConstraintDescriptor> constraintsForSchema(SchemaDescriptor descriptor)\n+  {\n+    return Iterators.filter(SchemaDescriptor.equalTo(descriptor), constraints());\n+  }\n+\n+  public <P, T> T getOrCreateDependantState(Class<T> type, Function<P, T> factory, P parameter)\n+  {\n+    return schemaCacheState.getOrCreateDependantState(type, factory, parameter);\n+  }\n+\n+  public void load(Iterable<SchemaRule> rules)\n+  {\n+    cacheUpdateLock.lock();\n+    try\n     {\n-        this.schemaCacheState = new SchemaCacheState( constraintSemantics, initialRules );\n-    }\n-\n-    public Iterable<IndexRule> indexRules()\n+      ConstraintSemantics constraintSemantics = schemaCacheState.constraintSemantics;\n+      this.schemaCacheState = new SchemaCacheState(constraintSemantics, rules);\n+    } finally\n     {\n-        return schemaCacheState.indexRules();\n+      cacheUpdateLock.unlock();\n     }\n+  }\n \n-    public Iterable<ConstraintRule> constraintRules()\n+  public void addSchemaRule(SchemaRule rule)\n+  {\n+    cacheUpdateLock.lock();\n+    try\n+    {\n+      SchemaCacheState updatedSchemaState = new SchemaCacheState(schemaCacheState);\n+      updatedSchemaState.addSchemaRule(rule);\n+      this.schemaCacheState = updatedSchemaState;\n+    } finally\n     {\n-        return schemaCacheState.constraintRules();\n+      cacheUpdateLock.unlock();\n     }\n+  }\n \n-    public boolean hasConstraintRule( Long constraintRuleId )\n+  public void removeSchemaRule(long id)\n+  {\n+    cacheUpdateLock.lock();\n+    try\n     {\n-        return schemaCacheState.hasConstraintRule( constraintRuleId );\n+      SchemaCacheState updatedSchemaState = new SchemaCacheState(schemaCacheState);\n+      updatedSchemaState.removeSchemaRule(id);\n+      this.schemaCacheState = updatedSchemaState;\n+    } finally\n+    {\n+      cacheUpdateLock.unlock();\n     }\n+  }\n+\n+  public SchemaIndexDescriptor indexDescriptor(SchemaDescriptor descriptor)\n+  {\n+    return schemaCacheState.indexDescriptor(descriptor);\n+  }\n+\n+  public Iterator<SchemaIndexDescriptor> indexDescriptorsForLabel(int labelId)\n+  {\n+    return schemaCacheState.indexDescriptorsForLabel(labelId);\n+  }\n+\n+  public Iterator<SchemaIndexDescriptor> indexesByProperty(int propertyId)\n+  {\n+    return schemaCacheState.indexesByProperty(propertyId);\n+  }\n \n-    public boolean hasConstraintRule( ConstraintDescriptor descriptor )\n+  private static class SchemaCacheState\n+  {\n+    private final ConstraintSemantics constraintSemantics;\n+    private final Set<ConstraintDescriptor> constraints;\n+    private final PrimitiveLongObjectMap<IndexRule> indexRuleById;\n+    private final PrimitiveLongObjectMap<ConstraintRule> constraintRuleById;\n+\n+    private final Map<SchemaDescriptor, SchemaIndexDescriptor> indexDescriptors;\n+    private final PrimitiveIntObjectMap<Set<SchemaIndexDescriptor>> indexDescriptorsByLabel;\n+\n+    private final Map<Class<?>, Object> dependantState;\n+    private final PrimitiveIntObjectMap<List<SchemaIndexDescriptor>> indexByProperty;\n+\n+    SchemaCacheState(ConstraintSemantics constraintSemantics, Iterable<SchemaRule> rules)\n     {\n-        return schemaCacheState.hasConstraintRule( descriptor );\n+      this.constraintSemantics = constraintSemantics;\n+      this.constraints = new HashSet<>();\n+      this.indexRuleById = Primitive.longObjectMap();\n+      this.constraintRuleById = Primitive.longObjectMap();\n+\n+      this.indexDescriptors = new HashMap<>();\n+      this.indexDescriptorsByLabel = Primitive.intObjectMap();\n+      this.dependantState = new HashMap<>();\n+      this.indexByProperty = Primitive.intObjectMap();\n+      load(rules);\n     }\n \n-    public boolean hasIndexRule( SchemaDescriptor descriptor )\n+    SchemaCacheState(SchemaCacheState schemaCacheState)\n     {\n-        return schemaCacheState.hasIndexRule( descriptor );\n+      this.constraintSemantics = schemaCacheState.constraintSemantics;\n+      this.indexRuleById = PrimitiveLongCollections.copy(schemaCacheState.indexRuleById);\n+      this.constraintRuleById = PrimitiveLongCollections.copy(schemaCacheState.constraintRuleById);\n+      this.constraints = new HashSet<>(schemaCacheState.constraints);\n+\n+      this.indexDescriptors = new HashMap<>(schemaCacheState.indexDescriptors);\n+      this.indexDescriptorsByLabel = PrimitiveIntCollections.copyTransform(schemaCacheState.indexDescriptorsByLabel, HashSet::new);\n+      this.dependantState = new HashMap<>();\n+      this.indexByProperty = PrimitiveIntCollections.copyTransform(schemaCacheState.indexByProperty, ArrayList::new);\n     }\n \n-    public Iterator<ConstraintDescriptor> constraints()\n+    private void load(Iterable<SchemaRule> schemaRuleIterator)\n     {\n-        return schemaCacheState.constraints();\n+      for (SchemaRule schemaRule : schemaRuleIterator)\n+      {\n+        addSchemaRule(schemaRule);\n+      }\n     }\n \n-    public Iterator<ConstraintDescriptor> constraintsForLabel( final int label )\n+    Iterable<IndexRule> indexRules()\n     {\n-        return Iterators.filter( SchemaDescriptorPredicates.hasLabel( label ), constraints() );\n+      return indexRuleById.values();\n     }\n \n-    public Iterator<ConstraintDescriptor> constraintsForRelationshipType( final int relTypeId )\n+    Iterable<ConstraintRule> constraintRules()\n     {\n-        return Iterators.filter( SchemaDescriptorPredicates.hasRelType( relTypeId ), constraints() );\n+      return constraintRuleById.values();\n     }\n \n-    public Iterator<ConstraintDescriptor> constraintsForSchema( SchemaDescriptor descriptor )\n+    boolean hasConstraintRule(Long constraintRuleId)\n     {\n-        return Iterators.filter( SchemaDescriptor.equalTo( descriptor ), constraints() );\n+      return constraintRuleId != null && constraintRuleById.containsKey(constraintRuleId);\n     }\n \n-    public <P, T> T getOrCreateDependantState( Class<T> type, Function<P,T> factory, P parameter )\n+    boolean hasConstraintRule(ConstraintDescriptor descriptor)\n     {\n-        return schemaCacheState.getOrCreateDependantState( type, factory, parameter );\n+      return constraints.contains(descriptor);\n     }\n \n-    public void load( Iterable<SchemaRule> rules )\n+    boolean hasIndexRule(SchemaDescriptor descriptor)\n     {\n-        cacheUpdateLock.lock();\n-        try\n-        {\n-            ConstraintSemantics constraintSemantics = schemaCacheState.constraintSemantics;\n-            this.schemaCacheState = new SchemaCacheState( constraintSemantics, rules );\n-        }\n-        finally\n-        {\n-            cacheUpdateLock.unlock();\n-        }\n+      return indexDescriptors.containsKey(descriptor);\n     }\n \n-    public void addSchemaRule( SchemaRule rule )\n+    Iterator<ConstraintDescriptor> constraints()\n     {\n-        cacheUpdateLock.lock();\n-        try\n-        {\n-            SchemaCacheState updatedSchemaState = new SchemaCacheState( schemaCacheState );\n-            updatedSchemaState.addSchemaRule( rule );\n-            this.schemaCacheState = updatedSchemaState;\n-        }\n-        finally\n-        {\n-            cacheUpdateLock.unlock();\n-        }\n+      return constraints.iterator();\n     }\n \n-    public void removeSchemaRule( long id )\n+    SchemaIndexDescriptor indexDescriptor(SchemaDescriptor descriptor)\n     {\n-        cacheUpdateLock.lock();\n-        try\n-        {\n-            SchemaCacheState updatedSchemaState = new SchemaCacheState( schemaCacheState );\n-            updatedSchemaState.removeSchemaRule( id );\n-            this.schemaCacheState = updatedSchemaState;\n-        }\n-        finally\n-        {\n-            cacheUpdateLock.unlock();\n-        }\n+      return indexDescriptors.get(descriptor);\n     }\n \n-    public SchemaIndexDescriptor indexDescriptor( SchemaDescriptor descriptor )\n+    Iterator<SchemaIndexDescriptor> indexesByProperty(int propertyId)\n     {\n-        return schemaCacheState.indexDescriptor( descriptor );\n+      List<SchemaIndexDescriptor> indexes = indexByProperty.get(propertyId);\n+      return (indexes == null) ? emptyIterator() : indexes.iterator();\n     }\n \n-    public Iterator<SchemaIndexDescriptor> indexDescriptorsForLabel( int labelId )\n+    Iterator<SchemaIndexDescriptor> indexDescriptorsForLabel(int labelId)\n     {\n-        return schemaCacheState.indexDescriptorsForLabel( labelId );\n+      Set<SchemaIndexDescriptor> forLabel = indexDescriptorsByLabel.get(labelId);\n+      return forLabel == null ? emptyIterator() : forLabel.iterator();\n     }\n \n-    public Iterator<SchemaIndexDescriptor> indexesByProperty( int propertyId )\n+    <P, T> T getOrCreateDependantState(Class<T> type, Function<P, T> factory, P parameter)\n     {\n-        return schemaCacheState.indexesByProperty( propertyId );\n+      return type.cast(dependantState.computeIfAbsent(type, key -> factory.apply(parameter)));\n     }\n \n-    private static class SchemaCacheState\n+    void addSchemaRule(SchemaRule rule)\n     {\n-        private final ConstraintSemantics constraintSemantics;\n-        private final Set<ConstraintDescriptor> constraints;\n-        private final PrimitiveLongObjectMap<IndexRule> indexRuleById;\n-        private final PrimitiveLongObjectMap<ConstraintRule> constraintRuleById;\n-\n-        private final Map<SchemaDescriptor,SchemaIndexDescriptor> indexDescriptors;\n-        private final PrimitiveIntObjectMap<Set<SchemaIndexDescriptor>> indexDescriptorsByLabel;\n-\n-        private final Map<Class<?>,Object> dependantState;\n-        private final PrimitiveIntObjectMap<List<SchemaIndexDescriptor>> indexByProperty;\n-\n-        SchemaCacheState( ConstraintSemantics constraintSemantics, Iterable<SchemaRule> rules )\n-        {\n-            this.constraintSemantics = constraintSemantics;\n-            this.constraints = new HashSet<>();\n-            this.indexRuleById = Primitive.longObjectMap();\n-            this.constraintRuleById = Primitive.longObjectMap();\n-\n-            this.indexDescriptors = new HashMap<>();\n-            this.indexDescriptorsByLabel = Primitive.intObjectMap();\n-            this.dependantState = new HashMap<>();\n-            this.indexByProperty = Primitive.intObjectMap();\n-            load( rules );\n-        }\n-\n-        SchemaCacheState( SchemaCacheState schemaCacheState )\n-        {\n-            this.constraintSemantics = schemaCacheState.constraintSemantics;\n-            this.indexRuleById = PrimitiveLongCollections.copy( schemaCacheState.indexRuleById );\n-            this.constraintRuleById = PrimitiveLongCollections.copy( schemaCacheState.constraintRuleById );\n-            this.constraints = new HashSet<>( schemaCacheState.constraints );\n-\n-            this.indexDescriptors = new HashMap<>( schemaCacheState.indexDescriptors );\n-            this.indexDescriptorsByLabel = PrimitiveIntCollections.copyTransform( schemaCacheState.indexDescriptorsByLabel, HashSet::new );\n-            this.dependantState = new HashMap<>();\n-            this.indexByProperty = PrimitiveIntCollections.copyTransform( schemaCacheState.indexByProperty, ArrayList::new );\n-        }\n-\n-        private void load( Iterable<SchemaRule> schemaRuleIterator )\n+      if (rule instanceof ConstraintRule)\n+      {\n+        ConstraintRule constraintRule = (ConstraintRule) rule;\n+        constraintRuleById.put(constraintRule.getId(), constraintRule);\n+        constraints.add(constraintSemantics.readConstraint(constraintRule));\n+      } else if (rule instanceof IndexRule)\n+      {\n+        IndexRule indexRule = (IndexRule) rule;\n+        indexRuleById.put(indexRule.getId(), indexRule);\n+        SchemaDescriptor schemaDescriptor = indexRule.schema();\n+        SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n+        indexDescriptors.put(schemaDescriptor, schemaIndexDescriptor);\n+\n+        Set<SchemaIndexDescriptor> forLabel =\n+            indexDescriptorsByLabel.computeIfAbsent(schemaDescriptor.keyId(), k -> new HashSet<>());\n+        forLabel.add(schemaIndexDescriptor);\n+\n+        for (int propertyId : indexRule.schema().getPropertyIds())\n         {\n-            for ( SchemaRule schemaRule : schemaRuleIterator )\n-            {\n-                addSchemaRule( schemaRule );\n-            }\n-        }\n-\n-        Iterable<IndexRule> indexRules()\n-        {\n-            return indexRuleById.values();\n-        }\n-\n-        Iterable<ConstraintRule> constraintRules()\n-        {\n-            return constraintRuleById.values();\n-        }\n-\n-        boolean hasConstraintRule( Long constraintRuleId )\n-        {\n-            return constraintRuleId != null && constraintRuleById.containsKey( constraintRuleId );\n-        }\n-\n-        boolean hasConstraintRule( ConstraintDescriptor descriptor )\n-        {\n-            return constraints.contains( descriptor );\n-        }\n-\n-        boolean hasIndexRule( SchemaDescriptor descriptor )\n-        {\n-            return indexDescriptors.containsKey( descriptor );\n-        }\n-\n-        Iterator<ConstraintDescriptor> constraints()\n-        {\n-            return constraints.iterator();\n-        }\n-\n-        SchemaIndexDescriptor indexDescriptor( SchemaDescriptor descriptor )\n-        {\n-            return indexDescriptors.get( descriptor );\n-        }\n-\n-        Iterator<SchemaIndexDescriptor> indexesByProperty( int propertyId )\n-        {\n-            List<SchemaIndexDescriptor> indexes = indexByProperty.get( propertyId );\n-            return (indexes == null) ? emptyIterator() : indexes.iterator();\n-        }\n-\n-        Iterator<SchemaIndexDescriptor> indexDescriptorsForLabel( int labelId )\n-        {\n-            Set<SchemaIndexDescriptor> forLabel = indexDescriptorsByLabel.get( labelId );\n-            return forLabel == null ? emptyIterator() : forLabel.iterator();\n-        }\n-\n-        <P, T> T getOrCreateDependantState( Class<T> type, Function<P,T> factory, P parameter )\n-        {\n-            return type.cast( dependantState.computeIfAbsent( type, key -> factory.apply( parameter ) ) );\n+          List<SchemaIndexDescriptor> indexesForProperty =\n+              indexByProperty.computeIfAbsent(propertyId, k -> new ArrayList<>());\n+          indexesForProperty.add(schemaIndexDescriptor);\n         }\n+      }\n+    }\n \n-        void addSchemaRule( SchemaRule rule )\n+    void removeSchemaRule(long id)\n+    {\n+      if (constraintRuleById.containsKey(id))\n+      {\n+        ConstraintRule rule = constraintRuleById.remove(id);\n+        constraints.remove(rule.getConstraintDescriptor());\n+      } else if (indexRuleById.containsKey(id))\n+      {\n+        IndexRule rule = indexRuleById.remove(id);\n+        SchemaDescriptor schema = rule.schema();\n+        indexDescriptors.remove(schema);\n+\n+        Set<SchemaIndexDescriptor> forLabel = indexDescriptorsByLabel.get(schema.keyId());\n+        forLabel.remove(rule.getIndexDescriptor());\n+        if (forLabel.isEmpty())\n         {\n-            if ( rule instanceof ConstraintRule )\n-            {\n-                ConstraintRule constraintRule = (ConstraintRule) rule;\n-                constraintRuleById.put( constraintRule.getId(), constraintRule );\n-                constraints.add( constraintSemantics.readConstraint( constraintRule ) );\n-            }\n-            else if ( rule instanceof IndexRule )\n-            {\n-                IndexRule indexRule = (IndexRule) rule;\n-                indexRuleById.put( indexRule.getId(), indexRule );\n-                SchemaDescriptor schemaDescriptor = indexRule.schema();\n-                SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n-                indexDescriptors.put( schemaDescriptor, schemaIndexDescriptor );\n-\n-                Set<SchemaIndexDescriptor> forLabel =\n-                        indexDescriptorsByLabel.computeIfAbsent( schemaDescriptor.keyId(), k -> new HashSet<>() );\n-                forLabel.add( schemaIndexDescriptor );\n-\n-                for ( int propertyId : indexRule.schema().getPropertyIds() )\n-                {\n-                    List<SchemaIndexDescriptor> indexesForProperty =\n-                            indexByProperty.computeIfAbsent( propertyId, k -> new ArrayList<>() );\n-                    indexesForProperty.add( schemaIndexDescriptor );\n-                }\n-            }\n+          indexDescriptorsByLabel.remove(schema.keyId());\n         }\n \n-        void removeSchemaRule( long id )\n+        for (int propertyId : rule.schema().getPropertyIds())\n         {\n-            if ( constraintRuleById.containsKey( id ) )\n-            {\n-                ConstraintRule rule = constraintRuleById.remove( id );\n-                constraints.remove( rule.getConstraintDescriptor() );\n-            }\n-            else if ( indexRuleById.containsKey( id ) )\n-            {\n-                IndexRule rule = indexRuleById.remove( id );\n-                SchemaDescriptor schema = rule.schema();\n-                indexDescriptors.remove( schema );\n-\n-                Set<SchemaIndexDescriptor> forLabel = indexDescriptorsByLabel.get( schema.keyId() );\n-                forLabel.remove( rule.getIndexDescriptor() );\n-                if ( forLabel.isEmpty() )\n-                {\n-                    indexDescriptorsByLabel.remove( schema.keyId() );\n-                }\n-\n-                for ( int propertyId : rule.schema().getPropertyIds() )\n-                {\n-                    List<SchemaIndexDescriptor> forProperty = indexByProperty.get( propertyId );\n-                    forProperty.remove( rule.getIndexDescriptor() );\n-                    if ( forProperty.isEmpty() )\n-                    {\n-                        indexByProperty.remove( propertyId );\n-                    }\n-                }\n-            }\n+          List<SchemaIndexDescriptor> forProperty = indexByProperty.get(propertyId);\n+          forProperty.remove(rule.getIndexDescriptor());\n+          if (forProperty.isEmpty())\n+          {\n+            indexByProperty.remove(propertyId);\n+          }\n         }\n+      }\n     }\n+  }\n }\n",
            "diff_size": 365
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4321/SchemaCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4321/SchemaCache.java\nindex 1fccff2b7da..e7268255d38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4321/SchemaCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4321/SchemaCache.java\n@@ -106,7 +106,7 @@ public class SchemaCache\n         return Iterators.filter( SchemaDescriptor.equalTo( descriptor ), constraints() );\n     }\n \n-    public <P, T> T getOrCreateDependantState( Class<T> type, Function<P,T> factory, P parameter )\n+    public <P,T> T getOrCreateDependantState( Class<T> type, Function<P,T> factory, P parameter )\n     {\n         return schemaCacheState.getOrCreateDependantState( type, factory, parameter );\n     }\n@@ -189,8 +189,7 @@ public class SchemaCache\n             this.constraints = new HashSet<>();\n             this.indexRuleById = Primitive.longObjectMap();\n             this.constraintRuleById = Primitive.longObjectMap();\n-\n-            this.indexDescriptors = new HashMap<>();\n+this.indexDescriptors = new HashMap<>();\n             this.indexDescriptorsByLabel = Primitive.intObjectMap();\n             this.dependantState = new HashMap<>();\n             this.indexByProperty = Primitive.intObjectMap();\n@@ -203,8 +202,7 @@ public class SchemaCache\n             this.indexRuleById = PrimitiveLongCollections.copy( schemaCacheState.indexRuleById );\n             this.constraintRuleById = PrimitiveLongCollections.copy( schemaCacheState.constraintRuleById );\n             this.constraints = new HashSet<>( schemaCacheState.constraints );\n-\n-            this.indexDescriptors = new HashMap<>( schemaCacheState.indexDescriptors );\n+this.indexDescriptors = new HashMap<>( schemaCacheState.indexDescriptors );\n             this.indexDescriptorsByLabel = PrimitiveIntCollections.copyTransform( schemaCacheState.indexDescriptorsByLabel, HashSet::new );\n             this.dependantState = new HashMap<>();\n             this.indexByProperty = PrimitiveIntCollections.copyTransform( schemaCacheState.indexByProperty, ArrayList::new );\n@@ -256,7 +254,7 @@ public class SchemaCache\n         Iterator<SchemaIndexDescriptor> indexesByProperty( int propertyId )\n         {\n             List<SchemaIndexDescriptor> indexes = indexByProperty.get( propertyId );\n-            return (indexes == null) ? emptyIterator() : indexes.iterator();\n+            return ( indexes == null ) ? emptyIterator() : indexes.iterator();\n         }\n \n         Iterator<SchemaIndexDescriptor> indexDescriptorsForLabel( int labelId )\n@@ -265,7 +263,7 @@ public class SchemaCache\n             return forLabel == null ? emptyIterator() : forLabel.iterator();\n         }\n \n-        <P, T> T getOrCreateDependantState( Class<T> type, Function<P,T> factory, P parameter )\n+        <P,T> T getOrCreateDependantState( Class<T> type, Function<P,T> factory, P parameter )\n         {\n             return type.cast( dependantState.computeIfAbsent( type, key -> factory.apply( parameter ) ) );\n         }\n@@ -286,15 +284,12 @@ public class SchemaCache\n                 SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n                 indexDescriptors.put( schemaDescriptor, schemaIndexDescriptor );\n \n-                Set<SchemaIndexDescriptor> forLabel =\n-                        indexDescriptorsByLabel.computeIfAbsent( schemaDescriptor.keyId(), k -> new HashSet<>() );\n-                forLabel.add( schemaIndexDescriptor );\n-\n-                for ( int propertyId : indexRule.schema().getPropertyIds() )\n+                Set<SchemaIndexDescriptor> forLabel = indexDescriptorsByLabel.computeIfAbsent( schemaDescriptor.keyId(), k -> new HashSet<>() );\n+forLabel.add( schemaIndexDescriptor );\n+for ( int propertyId : indexRule.schema().getPropertyIds() )\n                 {\n-                    List<SchemaIndexDescriptor> indexesForProperty =\n-                            indexByProperty.computeIfAbsent( propertyId, k -> new ArrayList<>() );\n-                    indexesForProperty.add( schemaIndexDescriptor );\n+                    List<SchemaIndexDescriptor> indexesForProperty = indexByProperty.computeIfAbsent( propertyId, k -> new ArrayList<>() );\n+indexesForProperty.add( schemaIndexDescriptor );\n                 }\n             }\n         }\n@@ -331,4 +326,4 @@ public class SchemaCache\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}