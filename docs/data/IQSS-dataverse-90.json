{
    "project_name": "IQSS-dataverse",
    "error_id": "90",
    "information": {
        "errors": [
            {
                "line": "250",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    }\n    \n\tpublic boolean hasData( Dataverse dv ) {\n\t\tTypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n\t\t\t\t\t\t\t\t.setParameter(\"id\", dv.getId());\n\t\t",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "251",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/90/DataverseServiceBean.java\nindex 520c3ff14df..5dd0085c1ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/90/DataverseServiceBean.java\n@@ -246,8 +246,8 @@ public class DataverseServiceBean implements java.io.Serializable {\n             return null;\n         }\n     }\n-    \n-\tpublic boolean hasData( Dataverse dv ) {\n+\n+    public boolean hasData( Dataverse dv ) {\n \t\tTypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n \t\t\t\t\t\t\t\t.setParameter(\"id\", dv.getId());\n \t\t\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/90/DataverseServiceBean.java\nindex 520c3ff14df..49ffefdc057 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/90/DataverseServiceBean.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse;\n \n import edu.harvard.iq.dataverse.authorization.AuthenticationServiceBean;\n@@ -45,301 +46,308 @@ import javax.persistence.TypedQuery;\n import org.apache.solr.client.solrj.SolrServerException;\n \n /**\n- *\n  * @author gdurand\n  */\n @Stateless\n @Named\n public class DataverseServiceBean implements java.io.Serializable {\n \n-    private static final Logger logger = Logger.getLogger(DataverseServiceBean.class.getCanonicalName());\n-    @EJB\n-    IndexServiceBean indexService;\n-    \n-    @EJB\n-    SolrIndexServiceBean solrIndexService; \n+  private static final Logger logger = Logger.getLogger(DataverseServiceBean.class.getCanonicalName());\n+  @EJB\n+  IndexServiceBean indexService;\n \n-    @EJB\n-    AuthenticationServiceBean authService;\n-    \n-    @EJB\n-    DatasetServiceBean datasetService;\n-    \n-    @EJB\n-    DataverseLinkingServiceBean dataverseLinkingService;\n+  @EJB\n+  SolrIndexServiceBean solrIndexService;\n \n-    @EJB\n-    DatasetLinkingServiceBean datasetLinkingService;\n-    \n-    @EJB\n-    GroupServiceBean groupService;\n-    \n-    @EJB\n-    DataverseRoleServiceBean rolesService;\n-    \n-    @EJB\n-    PermissionServiceBean permissionService;\n-    \n-    @EJB\n-    SystemConfig systemConfig;\n+  @EJB\n+  AuthenticationServiceBean authService;\n \n-    @Inject\n-    DataverseSession session;\n+  @EJB\n+  DatasetServiceBean datasetService;\n \n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-    private EntityManager em;\n+  @EJB\n+  DataverseLinkingServiceBean dataverseLinkingService;\n \n-    public Dataverse save(Dataverse dataverse) {\n-       \n-        dataverse.setModificationTime(new Timestamp(new Date().getTime()));\n-        Dataverse savedDataverse = em.merge(dataverse);\n-        return savedDataverse;\n-    }\n-    \n-    public boolean index(Dataverse dataverse) {\n-        return index(dataverse, false);\n+  @EJB\n+  DatasetLinkingServiceBean datasetLinkingService;\n \n-    }\n-        \n-    public boolean index(Dataverse dataverse, boolean indexPermissions) {    \n-        /**\n-         * @todo check the result to see if indexing was successful or not\n-         * added logging of exceptions \n-         */\n-        try {\n-            indexService.indexDataverse(dataverse);\n-            if (indexPermissions) {\n-                solrIndexService.indexPermissionsOnSelfAndChildren(dataverse);\n-            }\n-        } catch (IOException | SolrServerException e) {\n-            String failureLogText = \"Post-save indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + dataverse.getId().toString();\n-            failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-            LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, dataverse);\n-            return false;\n-        }\n+  @EJB\n+  GroupServiceBean groupService;\n \n-        return true;\n-    }    \n+  @EJB\n+  DataverseRoleServiceBean rolesService;\n \n-    public Dataverse find(Object pk) {\n-        return em.find(Dataverse.class, pk);\n-    }\n+  @EJB\n+  PermissionServiceBean permissionService;\n \n-    public List<Dataverse> findAll() {\n-        return em.createNamedQuery(\"Dataverse.findAll\").getResultList();\n-    }\n-    \n-    public List<Long> findIdStale() {\n-        return em.createNamedQuery(\"Dataverse.findIdStale\").getResultList();\n-    }\n-    public List<Long> findIdStalePermission() {\n-        return em.createNamedQuery(\"Dataverse.findIdStalePermission\").getResultList();\n-    }\n+  @EJB\n+  SystemConfig systemConfig;\n \n-    /**\n-     * @param numPartitions The number of partitions you intend to split the\n-     * indexing job into. Perhaps you have three Glassfish servers and you'd\n-     * like each one to operate on a subset of dataverses.\n-     *\n-     * @param partitionId Maybe \"partitionId\" is the wrong term but it's what we\n-     * call in the (text) UI. If you've specified three partitions the three\n-     * partitionIds are 0, 1, and 2. We do `dataverseId % numPartitions =\n-     * partitionId` to figure out which partition the dataverseId falls into.\n-     * \n-     * @param skipIndexed If true, will skip any dvObjects that have a indexTime set \n-     *\n-     * @return All dataverses if you say numPartitions=1 and partitionId=0.\n-     * Otherwise, a subset of dataverses.\n-     */\n-    public List<Dataverse> findAllOrSubset(long numPartitions, long partitionId, boolean skipIndexed) {\n-        if (numPartitions < 1) {\n-            long saneNumPartitions = 1;\n-            numPartitions = saneNumPartitions;\n-        }\n-        String skipClause = skipIndexed ? \"AND o.indexTime is null \" : \"\";\n-        TypedQuery<Dataverse> typedQuery = em.createQuery(\"SELECT OBJECT(o) FROM Dataverse AS o WHERE MOD( o.id, :numPartitions) = :partitionId \" +\n-                skipClause +\n-                \"ORDER BY o.id\", Dataverse.class);\n-        typedQuery.setParameter(\"numPartitions\", numPartitions);\n-        typedQuery.setParameter(\"partitionId\", partitionId);\n-        return typedQuery.getResultList();\n-    }\n-    \n-    public List<Long> findDataverseIdsForIndexing(boolean skipIndexed) {\n-        if (skipIndexed) {\n-            return em.createQuery(\"SELECT o.id FROM Dataverse o WHERE o.indexTime IS null ORDER BY o.id\", Long.class).getResultList();\n-        }\n-        return em.createQuery(\"SELECT o.id FROM Dataverse o ORDER BY o.id\", Long.class).getResultList();\n-        \n-    }\n+  @Inject\n+  DataverseSession session;\n \n-    public List<Dataverse> findByCreatorId(Long creatorId) {\n-        return em.createNamedQuery(\"Dataverse.findByCreatorId\").setParameter(\"creatorId\", creatorId).getResultList();\n-    }\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  private EntityManager em;\n \n-    public List<Dataverse> findByReleaseUserId(Long releaseUserId) {\n-        return em.createNamedQuery(\"Dataverse.findByReleaseUserId\").setParameter(\"releaseUserId\", releaseUserId).getResultList();\n-    }\n+  public Dataverse save(Dataverse dataverse) {\n \n-    public List<Dataverse> findByOwnerId(Long ownerId) {\n-        return em.createNamedQuery(\"Dataverse.findByOwnerId\").setParameter(\"ownerId\", ownerId).getResultList();\n-    }\n-    \n-    public List<Long> findIdsByOwnerId(Long ownerId) {\n-        String qr = \"select o.id from Dataverse as o where o.owner.id =:ownerId order by o.id\";\n-        return em.createQuery(qr, Long.class).setParameter(\"ownerId\", ownerId).getResultList();\n-    }\n-    \n-    public List<Dataverse> findPublishedByOwnerId(Long ownerId) {\n-        String qr =\"select object(o) from Dataverse as o where o.owner.id =:ownerId and o.publicationDate is not null order by o.name\";\n-        return em.createQuery(qr, Dataverse.class).setParameter(\"ownerId\", ownerId).getResultList();\n-    }\n+    dataverse.setModificationTime(new Timestamp(new Date().getTime()));\n+    Dataverse savedDataverse = em.merge(dataverse);\n+    return savedDataverse;\n+  }\n+\n+  public boolean index(Dataverse dataverse) {\n+    return index(dataverse, false);\n \n+  }\n+\n+  public boolean index(Dataverse dataverse, boolean indexPermissions) {\n     /**\n-     * @return the root dataverse\n-     * @todo Do we really want this method to sometimes throw a\n-     * NoResultException which is a RuntimeException?\n+     * @todo check the result to see if indexing was successful or not\n+     * added logging of exceptions\n      */\n-    public Dataverse findRootDataverse() {\n-        return em.createNamedQuery(\"Dataverse.findRoot\", Dataverse.class).getSingleResult();\n-    }\n-    \n-    \n-    //Similarly - if the above throws that exception, do we need to catch it here?\n-    //ToDo - consider caching?\n-    public String getRootDataverseName() {\n-        Dataverse root = findRootDataverse();\n-        String rootDataverseName=root.getName();\n-        return StringUtil.isEmpty(rootDataverseName) ? \"\" : rootDataverseName; \n-    }\n-    \n-    public List<Dataverse> findAllPublishedByOwnerId(Long ownerId) {\n-        List<Dataverse> retVal = new ArrayList<>();       \n-        List<Dataverse> previousLevel = findPublishedByOwnerId(ownerId);\n-        \n-        retVal.addAll(previousLevel);\n+    try {\n+      indexService.indexDataverse(dataverse);\n+      if (indexPermissions) {\n+        solrIndexService.indexPermissionsOnSelfAndChildren(dataverse);\n+      }\n+    } catch (IOException | SolrServerException e) {\n+      String failureLogText =\n+        \"Post-save indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" +\n+          dataverse.getId().toString();\n+      failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n+      LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, dataverse);\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  public Dataverse find(Object pk) {\n+    return em.find(Dataverse.class, pk);\n+  }\n+\n+  public List<Dataverse> findAll() {\n+    return em.createNamedQuery(\"Dataverse.findAll\").getResultList();\n+  }\n+\n+  public List<Long> findIdStale() {\n+    return em.createNamedQuery(\"Dataverse.findIdStale\").getResultList();\n+  }\n+\n+  public List<Long> findIdStalePermission() {\n+    return em.createNamedQuery(\"Dataverse.findIdStalePermission\").getResultList();\n+  }\n+\n+  /**\n+   * @param numPartitions The number of partitions you intend to split the\n+   *                      indexing job into. Perhaps you have three Glassfish servers and you'd\n+   *                      like each one to operate on a subset of dataverses.\n+   * @param partitionId   Maybe \"partitionId\" is the wrong term but it's what we\n+   *                      call in the (text) UI. If you've specified three partitions the three\n+   *                      partitionIds are 0, 1, and 2. We do `dataverseId % numPartitions =\n+   *                      partitionId` to figure out which partition the dataverseId falls into.\n+   * @param skipIndexed   If true, will skip any dvObjects that have a indexTime set\n+   * @return All dataverses if you say numPartitions=1 and partitionId=0.\n+   * Otherwise, a subset of dataverses.\n+   */\n+  public List<Dataverse> findAllOrSubset(long numPartitions, long partitionId, boolean skipIndexed) {\n+    if (numPartitions < 1) {\n+      long saneNumPartitions = 1;\n+      numPartitions = saneNumPartitions;\n+    }\n+    String skipClause = skipIndexed ? \"AND o.indexTime is null \" : \"\";\n+    TypedQuery<Dataverse> typedQuery =\n+      em.createQuery(\"SELECT OBJECT(o) FROM Dataverse AS o WHERE MOD( o.id, :numPartitions) = :partitionId \" +\n+        skipClause +\n+        \"ORDER BY o.id\", Dataverse.class);\n+    typedQuery.setParameter(\"numPartitions\", numPartitions);\n+    typedQuery.setParameter(\"partitionId\", partitionId);\n+    return typedQuery.getResultList();\n+  }\n+\n+  public List<Long> findDataverseIdsForIndexing(boolean skipIndexed) {\n+    if (skipIndexed) {\n+      return em.createQuery(\"SELECT o.id FROM Dataverse o WHERE o.indexTime IS null ORDER BY o.id\", Long.class)\n+        .getResultList();\n+    }\n+    return em.createQuery(\"SELECT o.id FROM Dataverse o ORDER BY o.id\", Long.class).getResultList();\n+\n+  }\n+\n+  public List<Dataverse> findByCreatorId(Long creatorId) {\n+    return em.createNamedQuery(\"Dataverse.findByCreatorId\").setParameter(\"creatorId\", creatorId).getResultList();\n+  }\n+\n+  public List<Dataverse> findByReleaseUserId(Long releaseUserId) {\n+    return em.createNamedQuery(\"Dataverse.findByReleaseUserId\").setParameter(\"releaseUserId\", releaseUserId)\n+      .getResultList();\n+  }\n+\n+  public List<Dataverse> findByOwnerId(Long ownerId) {\n+    return em.createNamedQuery(\"Dataverse.findByOwnerId\").setParameter(\"ownerId\", ownerId).getResultList();\n+  }\n+\n+  public List<Long> findIdsByOwnerId(Long ownerId) {\n+    String qr = \"select o.id from Dataverse as o where o.owner.id =:ownerId order by o.id\";\n+    return em.createQuery(qr, Long.class).setParameter(\"ownerId\", ownerId).getResultList();\n+  }\n+\n+  public List<Dataverse> findPublishedByOwnerId(Long ownerId) {\n+    String qr =\n+      \"select object(o) from Dataverse as o where o.owner.id =:ownerId and o.publicationDate is not null order by o.name\";\n+    return em.createQuery(qr, Dataverse.class).setParameter(\"ownerId\", ownerId).getResultList();\n+  }\n+\n+  /**\n+   * @return the root dataverse\n+   * @todo Do we really want this method to sometimes throw a\n+   * NoResultException which is a RuntimeException?\n+   */\n+  public Dataverse findRootDataverse() {\n+    return em.createNamedQuery(\"Dataverse.findRoot\", Dataverse.class).getSingleResult();\n+  }\n+\n+\n+  //Similarly - if the above throws that exception, do we need to catch it here?\n+  //ToDo - consider caching?\n+  public String getRootDataverseName() {\n+    Dataverse root = findRootDataverse();\n+    String rootDataverseName = root.getName();\n+    return StringUtil.isEmpty(rootDataverseName) ? \"\" : rootDataverseName;\n+  }\n+\n+  public List<Dataverse> findAllPublishedByOwnerId(Long ownerId) {\n+    List<Dataverse> retVal = new ArrayList<>();\n+    List<Dataverse> previousLevel = findPublishedByOwnerId(ownerId);\n+\n+    retVal.addAll(previousLevel);\n         /*\n         if (!previousLevel.isEmpty()) {\n             for (Dataverse dv : previousLevel) {\n                 retVal.addAll(findPublishedByOwnerId(dv.getId()));\n             }\n         }*/\n-        return retVal;\n+    return retVal;\n+  }\n+\n+  /**\n+   * A lookup of a dataverse alias should be case insensitive. If \"cfa\"\n+   * belongs to the Center for Astrophysics, we don't want to allow Code for\n+   * America to start using \"CFA\". Force all queries to be lower case.\n+   *\n+   * @param anAlias\n+   * @return\n+   */\n+  public Dataverse findByAlias(String anAlias) {\n+    try {\n+      return (anAlias.toLowerCase().equals(\":root\"))\n+        ? findRootDataverse()\n+        : em.createNamedQuery(\"Dataverse.findByAlias\", Dataverse.class)\n+        .setParameter(\"alias\", anAlias.toLowerCase())\n+        .getSingleResult();\n+    } catch (NoResultException | NonUniqueResultException ex) {\n+      logger.warning(\"Unable to find a single dataverse using alias \\\"\" + anAlias + \"\\\": \" + ex);\n+      return null;\n     }\n+  }\n \n-    /**\n-     * A lookup of a dataverse alias should be case insensitive. If \"cfa\"\n-     * belongs to the Center for Astrophysics, we don't want to allow Code for\n-     * America to start using \"CFA\". Force all queries to be lower case.\n-     * @param anAlias\n-     * @return \n-     */\n-    public Dataverse findByAlias(String anAlias) {\n-        try {\n-            return (anAlias.toLowerCase().equals(\":root\"))\n-              ? findRootDataverse()\n-              : em.createNamedQuery(\"Dataverse.findByAlias\", Dataverse.class)\n-                  .setParameter(\"alias\", anAlias.toLowerCase())\n-                  .getSingleResult();\n-        } catch ( NoResultException|NonUniqueResultException ex ) {\n-            logger.warning(\"Unable to find a single dataverse using alias \\\"\" + anAlias + \"\\\": \" + ex);\n-            return null;\n-        }\n-    }\n-    \n-\tpublic boolean hasData( Dataverse dv ) {\n-\t\tTypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n-\t\t\t\t\t\t\t\t.setParameter(\"id\", dv.getId());\n-\t\t\n-\t\treturn (amountQry.getSingleResult()>0);\n-\t}\n-\t\n-    public boolean isRootDataverseExists() {\n-        long count = em.createQuery(\"SELECT count(dv) FROM Dataverse dv WHERE dv.owner.id=null\", Long.class).getSingleResult();\n-        return (count == 1);\n-    }\n-\n-    public String determineDataversePath(Dataverse dataverse) {\n-        List<String> dataversePathSegments = new ArrayList<>();\n-        indexService.findPathSegments(dataverse, dataversePathSegments);\n-        StringBuilder dataversePath = new StringBuilder();\n-        for (String segment : dataversePathSegments) {\n-            dataversePath.append(\"/\").append(segment);\n-        }\n-        return dataversePath.toString();\n-    }\n+  public boolean hasData(Dataverse dv) {\n+    TypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n+      .setParameter(\"id\", dv.getId());\n \n-    public MetadataBlock findMDB(Long id) {\n-        return em.find(MetadataBlock.class, id);\n-    }\n+    return (amountQry.getSingleResult() > 0);\n+  }\n \n-    public MetadataBlock findMDBByName(String name) {\n-        return em.createQuery(\"select m from MetadataBlock m WHERE m.name=:name\", MetadataBlock.class)\n-                .setParameter(\"name\", name)\n-                .getSingleResult();\n-    }\n+  public boolean isRootDataverseExists() {\n+    long count =\n+      em.createQuery(\"SELECT count(dv) FROM Dataverse dv WHERE dv.owner.id=null\", Long.class).getSingleResult();\n+    return (count == 1);\n+  }\n \n-    public List<MetadataBlock> findAllMetadataBlocks() {\n-        return em.createQuery(\"select object(o) from MetadataBlock as o order by o.id\", MetadataBlock.class).getResultList();\n-    }\n-    \n-    public List<MetadataBlock> findSystemMetadataBlocks(){\n-        String qr = \"select object(o) from MetadataBlock as o where o.owner.id=null  order by o.id\";\n-        return em.createQuery(qr, MetadataBlock.class).getResultList();\n+  public String determineDataversePath(Dataverse dataverse) {\n+    List<String> dataversePathSegments = new ArrayList<>();\n+    indexService.findPathSegments(dataverse, dataversePathSegments);\n+    StringBuilder dataversePath = new StringBuilder();\n+    for (String segment : dataversePathSegments) {\n+      dataversePath.append(\"/\").append(segment);\n     }\n-    \n-    public List<MetadataBlock> findMetadataBlocksByDataverseId(Long dataverse_id) {\n-        String qr = \"select object(o) from MetadataBlock as o where o.owner.id=:dataverse_id order by o.id\";\n-        return em.createQuery(qr, MetadataBlock.class)\n-                .setParameter(\"dataverse_id\", dataverse_id).getResultList();\n-    }\n-    \n-    public DataverseFacet findFacet(Long id) {\n-        return em.find(DataverseFacet.class, id);\n-    }\n-    \n-    public List<DataverseFacet> findAllDataverseFacets() {\n-        return em.createQuery(\"select object(o) from DataverseFacet as o order by o.display\", DataverseFacet.class).getResultList();\n+    return dataversePath.toString();\n+  }\n+\n+  public MetadataBlock findMDB(Long id) {\n+    return em.find(MetadataBlock.class, id);\n+  }\n+\n+  public MetadataBlock findMDBByName(String name) {\n+    return em.createQuery(\"select m from MetadataBlock m WHERE m.name=:name\", MetadataBlock.class)\n+      .setParameter(\"name\", name)\n+      .getSingleResult();\n+  }\n+\n+  public List<MetadataBlock> findAllMetadataBlocks() {\n+    return em.createQuery(\"select object(o) from MetadataBlock as o order by o.id\", MetadataBlock.class)\n+      .getResultList();\n+  }\n+\n+  public List<MetadataBlock> findSystemMetadataBlocks() {\n+    String qr = \"select object(o) from MetadataBlock as o where o.owner.id=null  order by o.id\";\n+    return em.createQuery(qr, MetadataBlock.class).getResultList();\n+  }\n+\n+  public List<MetadataBlock> findMetadataBlocksByDataverseId(Long dataverse_id) {\n+    String qr = \"select object(o) from MetadataBlock as o where o.owner.id=:dataverse_id order by o.id\";\n+    return em.createQuery(qr, MetadataBlock.class)\n+      .setParameter(\"dataverse_id\", dataverse_id).getResultList();\n+  }\n+\n+  public DataverseFacet findFacet(Long id) {\n+    return em.find(DataverseFacet.class, id);\n+  }\n+\n+  public List<DataverseFacet> findAllDataverseFacets() {\n+    return em.createQuery(\"select object(o) from DataverseFacet as o order by o.display\", DataverseFacet.class)\n+      .getResultList();\n+  }\n+\n+  public String getDataverseLogoThumbnailAsBase64(Dataverse dataverse, User user) {\n+\n+    if (dataverse == null) {\n+      return null;\n     }\n-    \n-    public String getDataverseLogoThumbnailAsBase64(Dataverse dataverse, User user) {\n-        \n-        if (dataverse == null) {\n-            return null;\n-        }\n \n-        File dataverseLogoFile = getLogo(dataverse);\n-        if (dataverseLogoFile != null) {\n-            String logoThumbNailPath;\n+    File dataverseLogoFile = getLogo(dataverse);\n+    if (dataverseLogoFile != null) {\n+      String logoThumbNailPath;\n \n-            if (dataverseLogoFile.exists()) {\n-                logoThumbNailPath = ImageThumbConverter.generateImageThumbnailFromFile(dataverseLogoFile.getAbsolutePath(), 48);\n-                if (logoThumbNailPath != null) {\n-                    return ImageThumbConverter.getImageAsBase64FromFile(new File(logoThumbNailPath));\n+      if (dataverseLogoFile.exists()) {\n+        logoThumbNailPath = ImageThumbConverter.generateImageThumbnailFromFile(dataverseLogoFile.getAbsolutePath(), 48);\n+        if (logoThumbNailPath != null) {\n+          return ImageThumbConverter.getImageAsBase64FromFile(new File(logoThumbNailPath));\n \n-                }\n-            }\n-        } \n-        return null;\n+        }\n+      }\n     }\n-    \n-    public String getDataverseLogoThumbnailAsBase64ById(Long dvId) {\n-     \n-        File dataverseLogoFile = getLogoById(dvId);\n-        \n-        if (dataverseLogoFile != null) {\n-            String logoThumbNailPath;\n+    return null;\n+  }\n \n-            if (dataverseLogoFile.exists()) {\n-                logoThumbNailPath = ImageThumbConverter.generateImageThumbnailFromFile(dataverseLogoFile.getAbsolutePath(), 48);\n-                if (logoThumbNailPath != null) {\n-                    return ImageThumbConverter.getImageAsBase64FromFile(new File(logoThumbNailPath));\n+  public String getDataverseLogoThumbnailAsBase64ById(Long dvId) {\n \n-                }\n-            }\n-        } \n-        return null;\n+    File dataverseLogoFile = getLogoById(dvId);\n+\n+    if (dataverseLogoFile != null) {\n+      String logoThumbNailPath;\n+\n+      if (dataverseLogoFile.exists()) {\n+        logoThumbNailPath = ImageThumbConverter.generateImageThumbnailFromFile(dataverseLogoFile.getAbsolutePath(), 48);\n+        if (logoThumbNailPath != null) {\n+          return ImageThumbConverter.getImageAsBase64FromFile(new File(logoThumbNailPath));\n+\n+        }\n+      }\n     }\n+    return null;\n+  }\n     \n     /*\n     public boolean isDataverseLogoThumbnailAvailable(Dataverse dataverse, User user) {    \n@@ -363,13 +371,13 @@ public class DataverseServiceBean implements java.io.Serializable {\n             }\n         //}\n         */\n-        // If there's no uploaded logo for this dataverse, go through its \n-        // [released] datasets and see if any of them have card images:\n-        // \n-        // TODO:\n-        // Discuss/Decide if we really want to do this - i.e., go through every\n-        // file in every dataset below... \n-        // -- L.A. 4.0 beta14\n+  // If there's no uploaded logo for this dataverse, go through its\n+  // [released] datasets and see if any of them have card images:\n+  //\n+  // TODO:\n+  // Discuss/Decide if we really want to do this - i.e., go through every\n+  // file in every dataset below...\n+  // -- L.A. 4.0 beta14\n         /*\n         for (Dataset dataset : datasetService.findPublishedByOwnerId(dataverse.getId())) {\n             if (dataset != null) {\n@@ -385,246 +393,249 @@ public class DataverseServiceBean implements java.io.Serializable {\n         /*\n         return false; \n     } */\n-        \n-    private File getLogo(Dataverse dataverse) {\n-        if (dataverse.getId() == null) {\n-            return null; \n-        }\n-        \n-        DataverseTheme theme = dataverse.getDataverseTheme(); \n-        if (theme != null && theme.getLogo() != null && !theme.getLogo().isEmpty()) {\n-            Properties p = System.getProperties();\n-            String domainRoot = p.getProperty(\"com.sun.aas.instanceRoot\");\n-  \n-            if (domainRoot != null && !\"\".equals(domainRoot)) {\n-                return new File (domainRoot + File.separator + \n-                    \"docroot\" + File.separator + \n-                    \"logos\" + File.separator + \n-                    dataverse.getLogoOwnerId() + File.separator + \n-                    theme.getLogo());\n-            }\n-        }\n-            \n-        return null;         \n+\n+  private File getLogo(Dataverse dataverse) {\n+    if (dataverse.getId() == null) {\n+      return null;\n     }\n-    \n-    private File getLogoById(Long id) {\n-        if (id == null) {\n-            return null; \n-        }\n-        \n-        String logoFileName;\n-        \n-        try {\n-                logoFileName = (String) em.createNativeQuery(\"SELECT logo FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n-            \n-        } catch (Exception ex) {\n-            return null;\n-        }\n-        \n-        if (logoFileName != null && !logoFileName.isEmpty()) {\n-            Properties p = System.getProperties();\n-            String domainRoot = p.getProperty(\"com.sun.aas.instanceRoot\");\n-  \n-            if (domainRoot != null && !\"\".equals(domainRoot)) {\n-                return new File (domainRoot + File.separator + \n-                    \"docroot\" + File.separator + \n-                    \"logos\" + File.separator + \n-                    id + File.separator + \n-                    logoFileName);\n-            }\n-        }\n-            \n-        return null;         \n+\n+    DataverseTheme theme = dataverse.getDataverseTheme();\n+    if (theme != null && theme.getLogo() != null && !theme.getLogo().isEmpty()) {\n+      Properties p = System.getProperties();\n+      String domainRoot = p.getProperty(\"com.sun.aas.instanceRoot\");\n+\n+      if (domainRoot != null && !\"\".equals(domainRoot)) {\n+        return new File(domainRoot + File.separator +\n+          \"docroot\" + File.separator +\n+          \"logos\" + File.separator +\n+          dataverse.getLogoOwnerId() + File.separator +\n+          theme.getLogo());\n+      }\n     }\n-    \n-    public DataverseTheme findDataverseThemeByIdQuick(Long id) {\n-        if (id == null) {\n-            return null; \n-        }\n-        \n-        Object[] result;\n-        \n-        try {\n-                result = (Object[]) em.createNativeQuery(\"SELECT logo, logoFormat FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n-            \n-        } catch (Exception ex) {\n-            return null;\n-        }\n-        \n-        if (result == null) {\n-            return null;\n-        }\n-        \n-        DataverseTheme theme = new DataverseTheme();\n-        \n-        if (result[0] != null) {\n-            theme.setLogo((String) result[0]);\n-        }\n \n-        if (result[1] != null) {\n-            String format = (String) result[1];\n-            switch (format) {\n-                case \"RECTANGLE\":\n-                theme.setLogoFormat(DataverseTheme.ImageFormat.RECTANGLE);\n-                    break;\n-                case \"SQUARE\":\n-                theme.setLogoFormat(DataverseTheme.ImageFormat.SQUARE);\n-                    break;\n-            }\n-        }\n-        \n-        return theme;\n+    return null;\n+  }\n+\n+  private File getLogoById(Long id) {\n+    if (id == null) {\n+      return null;\n     }\n \n-    public List<Dataverse> findDataversesThisIdHasLinkedTo(long dataverseId) {\n-        return dataverseLinkingService.findLinkedDataverses(dataverseId);\n+    String logoFileName;\n+\n+    try {\n+      logoFileName =\n+        (String) em.createNativeQuery(\"SELECT logo FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n+\n+    } catch (Exception ex) {\n+      return null;\n     }\n \n-    public List<Dataverse> findDataversesThatLinkToThisDvId(long dataverseId) {\n-        return dataverseLinkingService.findLinkingDataverses(dataverseId);\n+    if (logoFileName != null && !logoFileName.isEmpty()) {\n+      Properties p = System.getProperties();\n+      String domainRoot = p.getProperty(\"com.sun.aas.instanceRoot\");\n+\n+      if (domainRoot != null && !\"\".equals(domainRoot)) {\n+        return new File(domainRoot + File.separator +\n+          \"docroot\" + File.separator +\n+          \"logos\" + File.separator +\n+          id + File.separator +\n+          logoFileName);\n+      }\n     }\n \n-    public List<Dataset> findDatasetsThisIdHasLinkedTo(long dataverseId) {\n-        return datasetLinkingService.findLinkedDatasets(dataverseId);\n+    return null;\n+  }\n+\n+  public DataverseTheme findDataverseThemeByIdQuick(Long id) {\n+    if (id == null) {\n+      return null;\n     }\n \n-    public List<Dataverse> findDataversesThatLinkToThisDatasetId(long datasetId) {\n-        return datasetLinkingService.findLinkingDataverses(datasetId);\n+    Object[] result;\n+\n+    try {\n+      result = (Object[]) em.createNativeQuery(\"SELECT logo, logoFormat FROM dataversetheme WHERE dataverse_id = \" + id)\n+        .getSingleResult();\n+\n+    } catch (Exception ex) {\n+      return null;\n     }\n-    \n-    public List<Dataverse> filterByAliasQuery(String filterQuery) {\n-        //Query query = em.createNativeQuery(\"select o from Dataverse o where o.alias LIKE '\" + filterQuery + \"%' order by o.alias\");\n-        //Query query = em.createNamedQuery(\"Dataverse.filterByAlias\", Dataverse.class).setParameter(\"alias\", filterQuery.toLowerCase() + \"%\");\n-        List<Dataverse> ret = em.createNamedQuery(\"Dataverse.filterByAliasNameAffiliation\", Dataverse.class)\n-                .setParameter(\"alias\", filterQuery.toLowerCase() + \"%\")\n-                .setParameter(\"name\", \"%\" + filterQuery.toLowerCase() + \"%\")\n-                .setParameter(\"affiliation\", \"%\" + filterQuery.toLowerCase() + \"%\").getResultList();\n-        //logger.info(\"created native query: select o from Dataverse o where o.alias LIKE '\" + filterQuery + \"%' order by o.alias\");\n-        logger.info(\"created named query\");\n-        if (ret != null) {\n-            logger.info(\"results list: \"+ret.size()+\" results.\");\n-        }\n-        return ret;\n+\n+    if (result == null) {\n+      return null;\n     }\n-    \n-    public List<Dataverse> filterDataversesForLinking(String query, DataverseRequest req, Dataset dataset) {\n \n-        List<Dataverse> dataverseList = new ArrayList<>();\n+    DataverseTheme theme = new DataverseTheme();\n \n-        List<Dataverse> results = filterDataversesByNamePattern(query);\n-        \n-        if (results == null || results.size() == 0) {\n-            return null; \n-        }\n+    if (result[0] != null) {\n+      theme.setLogo((String) result[0]);\n+    }\n \n-        List<Object> alreadyLinkeddv_ids = em.createNativeQuery(\"SELECT linkingdataverse_id   FROM datasetlinkingdataverse WHERE dataset_id = \" + dataset.getId()).getResultList();\n-        List<Dataverse> remove = new ArrayList<>();\n+    if (result[1] != null) {\n+      String format = (String) result[1];\n+      switch (format) {\n+        case \"RECTANGLE\":\n+          theme.setLogoFormat(DataverseTheme.ImageFormat.RECTANGLE);\n+          break;\n+        case \"SQUARE\":\n+          theme.setLogoFormat(DataverseTheme.ImageFormat.SQUARE);\n+          break;\n+      }\n+    }\n \n-        if (alreadyLinkeddv_ids != null && !alreadyLinkeddv_ids.isEmpty()) {\n-            alreadyLinkeddv_ids.stream().map((testDVId) -> this.find(testDVId)).forEachOrdered((removeIt) -> {\n-                remove.add(removeIt);\n-            });\n-        }\n-        \n-        for (Dataverse res : results) {\n-            if (!remove.contains(res)) {\n-                if (this.permissionService.requestOn(req, res).has(Permission.PublishDataset)) {\n-                    dataverseList.add(res);\n-                }\n-            }\n-        }\n+    return theme;\n+  }\n+\n+  public List<Dataverse> findDataversesThisIdHasLinkedTo(long dataverseId) {\n+    return dataverseLinkingService.findLinkedDataverses(dataverseId);\n+  }\n+\n+  public List<Dataverse> findDataversesThatLinkToThisDvId(long dataverseId) {\n+    return dataverseLinkingService.findLinkingDataverses(dataverseId);\n+  }\n+\n+  public List<Dataset> findDatasetsThisIdHasLinkedTo(long dataverseId) {\n+    return datasetLinkingService.findLinkedDatasets(dataverseId);\n+  }\n \n-        return dataverseList;\n+  public List<Dataverse> findDataversesThatLinkToThisDatasetId(long datasetId) {\n+    return datasetLinkingService.findLinkingDataverses(datasetId);\n+  }\n+\n+  public List<Dataverse> filterByAliasQuery(String filterQuery) {\n+    //Query query = em.createNativeQuery(\"select o from Dataverse o where o.alias LIKE '\" + filterQuery + \"%' order by o.alias\");\n+    //Query query = em.createNamedQuery(\"Dataverse.filterByAlias\", Dataverse.class).setParameter(\"alias\", filterQuery.toLowerCase() + \"%\");\n+    List<Dataverse> ret = em.createNamedQuery(\"Dataverse.filterByAliasNameAffiliation\", Dataverse.class)\n+      .setParameter(\"alias\", filterQuery.toLowerCase() + \"%\")\n+      .setParameter(\"name\", \"%\" + filterQuery.toLowerCase() + \"%\")\n+      .setParameter(\"affiliation\", \"%\" + filterQuery.toLowerCase() + \"%\").getResultList();\n+    //logger.info(\"created native query: select o from Dataverse o where o.alias LIKE '\" + filterQuery + \"%' order by o.alias\");\n+    logger.info(\"created named query\");\n+    if (ret != null) {\n+      logger.info(\"results list: \" + ret.size() + \" results.\");\n     }\n-    \n-    public List<Dataverse> filterDataversesForHosting(String pattern, DataverseRequest req) {\n+    return ret;\n+  }\n \n-        // Find the dataverses matching the search parameters: \n-        \n-        List<Dataverse> searchResults = filterDataversesByNamePattern(pattern);\n-        \n-        if (searchResults == null || searchResults.size() == 0) {\n-            return null; \n-        }\n-        \n-        logger.fine(\"search query found \" + searchResults.size() + \" results\");\n-        \n-        // Filter the results and drop the dataverses where the user is not allowed to \n-        // add datasets:\n-        \n-        if (req.getAuthenticatedUser().isSuperuser()) {\n-            logger.fine(\"will skip permission check...\");\n-            return searchResults;\n-        }\n-        \n-        List<Dataverse> finalResults = new ArrayList<>();\n-        \n-        for (Dataverse res : searchResults) {\n-            if (this.permissionService.requestOn(req, res).has(Permission.AddDataset)) {\n-                finalResults.add(res);\n-            }\n+  public List<Dataverse> filterDataversesForLinking(String query, DataverseRequest req, Dataset dataset) {\n+\n+    List<Dataverse> dataverseList = new ArrayList<>();\n+\n+    List<Dataverse> results = filterDataversesByNamePattern(query);\n+\n+    if (results == null || results.size() == 0) {\n+      return null;\n+    }\n+\n+    List<Object> alreadyLinkeddv_ids = em.createNativeQuery(\n+      \"SELECT linkingdataverse_id   FROM datasetlinkingdataverse WHERE dataset_id = \" + dataset.getId())\n+      .getResultList();\n+    List<Dataverse> remove = new ArrayList<>();\n+\n+    if (alreadyLinkeddv_ids != null && !alreadyLinkeddv_ids.isEmpty()) {\n+      alreadyLinkeddv_ids.stream().map((testDVId) -> this.find(testDVId)).forEachOrdered((removeIt) -> {\n+        remove.add(removeIt);\n+      });\n+    }\n+\n+    for (Dataverse res : results) {\n+      if (!remove.contains(res)) {\n+        if (this.permissionService.requestOn(req, res).has(Permission.PublishDataset)) {\n+          dataverseList.add(res);\n         }\n-        \n-        logger.fine(\"returning \" + finalResults.size() + \" final results\");\n+      }\n+    }\n+\n+    return dataverseList;\n+  }\n \n-        return finalResults;\n+  public List<Dataverse> filterDataversesForHosting(String pattern, DataverseRequest req) {\n+\n+    // Find the dataverses matching the search parameters:\n+\n+    List<Dataverse> searchResults = filterDataversesByNamePattern(pattern);\n+\n+    if (searchResults == null || searchResults.size() == 0) {\n+      return null;\n+    }\n+\n+    logger.fine(\"search query found \" + searchResults.size() + \" results\");\n+\n+    // Filter the results and drop the dataverses where the user is not allowed to\n+    // add datasets:\n+\n+    if (req.getAuthenticatedUser().isSuperuser()) {\n+      logger.fine(\"will skip permission check...\");\n+      return searchResults;\n+    }\n+\n+    List<Dataverse> finalResults = new ArrayList<>();\n+\n+    for (Dataverse res : searchResults) {\n+      if (this.permissionService.requestOn(req, res).has(Permission.AddDataset)) {\n+        finalResults.add(res);\n+      }\n+    }\n+\n+    logger.fine(\"returning \" + finalResults.size() + \" final results\");\n+\n+    return finalResults;\n+  }\n+\n+\n+  /*\n+      This method takes a search parameter and expands it into a list of\n+      Dataverses with matching names.\n+      The search is performed on the name with the trailing word \"dataverse\"\n+      stripped (if present). This way the search on \"data\" (or on \"da\" pr\n+      \"dat\") does NOT return almost every dataverse in the database - since\n+      most of them have names that end in \"... Dataverse\".\n+      The query isn't pretty, but it works, and it's still EJB QL (and NOT a\n+      native query).\n+  */\n+  public List<Dataverse> filterDataversesByNamePattern(String pattern) {\n+\n+    pattern = pattern.toLowerCase();\n+\n+    String pattern1 = pattern + \"%\";\n+    String pattern2 = \"% \" + pattern + \"%\";\n+\n+    // Adjust the queries for very short, 1 and 2-character patterns:\n+    if (pattern.length() == 1) {\n+      pattern1 = pattern;\n+      pattern2 = pattern + \" %\";\n     }\n-    \n-    \n-    /* \n-        This method takes a search parameter and expands it into a list of \n-        Dataverses with matching names. \n-        The search is performed on the name with the trailing word \"dataverse\"\n-        stripped (if present). This way the search on \"data\" (or on \"da\" pr \n-        \"dat\") does NOT return almost every dataverse in the database - since\n-        most of them have names that end in \"... Dataverse\". \n-        The query isn't pretty, but it works, and it's still EJB QL (and NOT a \n-        native query). \n-    */\n-    public List<Dataverse> filterDataversesByNamePattern(String pattern) {\n-\n-        pattern = pattern.toLowerCase();\n-        \n-        String pattern1 = pattern + \"%\";\n-        String pattern2 = \"% \" + pattern + \"%\";\n-\n-        // Adjust the queries for very short, 1 and 2-character patterns:\n-        if (pattern.length() == 1) {\n-            pattern1 = pattern;\n-            pattern2 = pattern + \" %\";\n-        } \n         /*if (pattern.length() == 2) {\n             pattern2 = pattern + \"%\";\n         }*/\n-        \n-        \n-        String qstr = \"select dv from Dataverse dv \"\n-                + \"where (LOWER(dv.name) LIKE :dataverse and ((SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern1) \"\n-                + \"     or (SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern2))) \"\n-                + \"or (LOWER(dv.name) NOT LIKE :dataverse and ((LOWER(dv.name) LIKE :pattern1) \"\n-                + \"     or (LOWER(dv.name) LIKE :pattern2))) \"\n-                + \"order by dv.alias\";\n-                \n-        List<Dataverse> searchResults = null;\n-        \n-        try {\n-            searchResults = em.createQuery(qstr, Dataverse.class)\n-                    .setParameter(\"dataverse\", \"%dataverse\")\n-                    .setParameter(\"pattern1\", pattern1)\n-                    .setParameter(\"pattern2\", pattern2)\n-                    .getResultList();\n-        } catch (Exception ex) {\n-            searchResults = null;\n-        }\n-        \n-        return searchResults;\n+\n+\n+    String qstr = \"select dv from Dataverse dv \"\n+      + \"where (LOWER(dv.name) LIKE :dataverse and ((SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern1) \"\n+      + \"     or (SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern2))) \"\n+      + \"or (LOWER(dv.name) NOT LIKE :dataverse and ((LOWER(dv.name) LIKE :pattern1) \"\n+      + \"     or (LOWER(dv.name) LIKE :pattern2))) \"\n+      + \"order by dv.alias\";\n+\n+    List<Dataverse> searchResults = null;\n+\n+    try {\n+      searchResults = em.createQuery(qstr, Dataverse.class)\n+        .setParameter(\"dataverse\", \"%dataverse\")\n+        .setParameter(\"pattern1\", pattern1)\n+        .setParameter(\"pattern2\", pattern2)\n+        .getResultList();\n+    } catch (Exception ex) {\n+      searchResults = null;\n     }\n-    \n-    /**\n-     * Used to identify and properly display Harvested objects on the dataverse page.\n-     * \n-     *//*\n+\n+    return searchResults;\n+  }\n+\n+  /**\n+   * Used to identify and properly display Harvested objects on the dataverse page.\n+   *//*\n     @Deprecated\n     public Map<Long, String> getAllHarvestedDataverseDescriptions(){\n         \n@@ -661,256 +672,261 @@ public class DataverseServiceBean implements java.io.Serializable {\n         \n         return ret;        \n     }*/\n-    \n-    public String getParentAliasString(SolrSearchResult solrSearchResult){\n-        Long dvId = solrSearchResult.getEntityId();\n-        String retVal = \"\";\n-        \n-        if (dvId == null) {\n-            return retVal;\n-        }\n-        \n-        String searchResult;\n-        try {\n-            searchResult = (String) em.createNativeQuery(\"select  t0.ALIAS FROM DATAVERSE t0, DVOBJECT t1,  DVOBJECT t2 WHERE (t0.ID = t1.ID) AND (t2.OWNER_ID = t1.ID)  AND (t2.ID =\" + dvId + \")\").getSingleResult();\n+  public String getParentAliasString(SolrSearchResult solrSearchResult) {\n+    Long dvId = solrSearchResult.getEntityId();\n+    String retVal = \"\";\n \n-        } catch (Exception ex) {\n-            return retVal;\n-        }\n+    if (dvId == null) {\n+      return retVal;\n+    }\n \n-        if (searchResult == null) {\n-            return retVal;\n-        }\n+    String searchResult;\n+    try {\n+      searchResult = (String) em.createNativeQuery(\n+        \"select  t0.ALIAS FROM DATAVERSE t0, DVOBJECT t1,  DVOBJECT t2 WHERE (t0.ID = t1.ID) AND (t2.OWNER_ID = t1.ID)  AND (t2.ID =\" +\n+          dvId + \")\").getSingleResult();\n \n-        if (searchResult != null) {\n-            return searchResult;\n-        }\n-        \n-        return retVal;\n+    } catch (Exception ex) {\n+      return retVal;\n     }\n-    \n-    \n-    public void populateDvSearchCard(SolrSearchResult solrSearchResult) {\n-  \n-        Long dvId = solrSearchResult.getEntityId();\n-        \n-        if (dvId == null) {\n-            return;\n-        }\n-        \n-        Long parentDvId = null;\n-        String parentId = solrSearchResult.getParent().get(\"id\");\n-        if (parentId != null) {\n-            try {\n-                parentDvId = Long.parseLong(parentId);\n-            } catch (NumberFormatException ex) {\n-                parentDvId = null;\n-            }\n-        }\n-        \n-        Object[] searchResult;\n-        \n-        try {\n-            if (parentDvId == null) {\n-                searchResult = (Object[]) em.createNativeQuery(\"SELECT t0.AFFILIATION, t0.ALIAS FROM DATAVERSE t0 WHERE t0.ID = \" + dvId).getSingleResult();\n-            } else {\n-                searchResult = (Object[]) em.createNativeQuery(\"SELECT t0.AFFILIATION, t0.ALIAS, t2.ALIAS FROM DATAVERSE t0, DVOBJECT t1, DATAVERSE t2, DVOBJECT t3 WHERE (t0.ID = t1.ID) AND (t1.OWNER_ID = t3.ID) AND (t2.ID = t3.ID) AND (t0.ID = \" + dvId + \")\").getSingleResult();\n-            }\n-        } catch (Exception ex) {\n-            return;\n-        }\n \n-        if (searchResult == null) {\n-            return;\n-        }\n-        \n-        if (searchResult[0] != null) {\n-            solrSearchResult.setDataverseAffiliation((String) searchResult[0]);\n-        }\n+    if (searchResult == null) {\n+      return retVal;\n+    }\n \n-        if (searchResult[1] != null) {\n-            solrSearchResult.setDataverseAlias((String) searchResult[1]);\n-        }\n-        \n-        if (parentDvId != null) {\n-            if (searchResult[2] != null) {\n-                solrSearchResult.setDataverseParentAlias((String) searchResult[2]);\n-            }\n-        }\n+    if (searchResult != null) {\n+      return searchResult;\n     }\n-    \n-    // function to recursively find ids of all children of a dataverse that \n-    // are also of type dataverse\n-    public List<Long> findAllDataverseDataverseChildren(Long dvId) {\n-        // get list of Dataverse children\n-        List<Long> dataverseChildren = findIdsByOwnerId(dvId);\n-        \n-        if (dataverseChildren == null) {\n-            return dataverseChildren;\n-        } else {\n-            List<Long> newChildren = new ArrayList<>();\n-            for (Long childDvId : dataverseChildren) {\n-                newChildren.addAll(findAllDataverseDataverseChildren(childDvId));\n-            }\n-            dataverseChildren.addAll(newChildren);\n-            return dataverseChildren;\n-        }\n+\n+    return retVal;\n+  }\n+\n+\n+  public void populateDvSearchCard(SolrSearchResult solrSearchResult) {\n+\n+    Long dvId = solrSearchResult.getEntityId();\n+\n+    if (dvId == null) {\n+      return;\n     }\n-    \n-    // function to recursively find ids of all children of a dataverse that are \n-    // of type dataset\n-    public List<Long> findAllDataverseDatasetChildren(Long dvId) {\n-        // get list of Dataverse children\n-        List<Long> dataverseChildren = findIdsByOwnerId(dvId);\n-        // get list of Dataset children\n-        List<Long> datasetChildren = datasetService.findIdsByOwnerId(dvId);\n-        \n-        if (dataverseChildren == null) {\n-            return datasetChildren;\n-        } else {\n-            for (Long childDvId : dataverseChildren) {\n-                datasetChildren.addAll(findAllDataverseDatasetChildren(childDvId));\n-            }\n-            return datasetChildren;\n-        }\n+\n+    Long parentDvId = null;\n+    String parentId = solrSearchResult.getParent().get(\"id\");\n+    if (parentId != null) {\n+      try {\n+        parentDvId = Long.parseLong(parentId);\n+      } catch (NumberFormatException ex) {\n+        parentDvId = null;\n+      }\n     }\n-    \n-    public String addRoleAssignmentsToChildren(Dataverse owner, ArrayList<String> rolesToInherit,\n-            boolean inheritAllRoles) {\n-        /*\n-         * This query recursively finds all Dataverses that are inside/children of the\n-         * specified one. It recursively finds dvobjects of dtype 'Dataverse' whose\n-         * owner_id equals an id already in the list and then returns the list of ids\n-         * found, excluding the id of the original specified Dataverse.\n-         */\n-        String qstr = \"WITH RECURSIVE path_elements AS ((\" + \" SELECT id, dtype FROM dvobject WHERE id in (\"\n-                + owner.getId() + \"))\" + \" UNION\\n\"\n-                + \" SELECT o.id, o.dtype FROM path_elements p, dvobject o WHERE o.owner_id = p.id and o.dtype='Dataverse') \"\n-                + \"SELECT id FROM path_elements WHERE id !=\" + owner.getId() + \";\";\n-\n-        List<Integer> childIds;\n-        try {\n-            childIds = em.createNativeQuery(qstr).getResultList();\n-        } catch (Exception ex) {\n-            childIds = null;\n-        }\n \n-        // Set up to track the set of users/groups that get assigned a role and those\n-        // that don't\n-        JsonArrayBuilder usedNames = Json.createArrayBuilder();\n-        JsonArrayBuilder unusedNames = Json.createArrayBuilder();\n-        // Set up to track the list of dataverses, by id and alias, that are traversed.\n-        JsonArrayBuilder dataverseIds = Json.createArrayBuilder();\n-        JsonArrayBuilder dataverseAliases = Json.createArrayBuilder();\n-        // Get the Dataverses for the returned ids\n-\n-        List<Dataverse> children = new ArrayList<Dataverse>();\n-\n-        for (int i = 0; i < childIds.size(); i++) {\n-            Integer childId = childIds.get(i);\n-            Dataverse child = find(new Long(childId.longValue()));\n-            if (child != null) {\n-                // Add to the list of Dataverses\n-                children.add(child);\n-                // Add ids and aliases to the tracking arrays\n-                dataverseIds.add(childId.longValue());\n-                dataverseAliases.add(child.getAlias());\n-            }\n-        }\n-        // Find the role assignments on the specified Dataverse\n-        List<RoleAssignment> allRAsOnOwner = rolesService.directRoleAssignments(owner);\n-\n-        // Create a list of just the inheritable role assignments on the original\n-        // dataverse\n-        List<RoleAssignment> inheritableRAsOnOwner = new ArrayList<RoleAssignment>();\n-        for (RoleAssignment role : allRAsOnOwner) {\n-            if (inheritAllRoles || rolesToInherit.contains(role.getRole().getAlias())) {\n-                //Only supporting built-in/non-dataverse-specific custom roles. Custom roles all have an owner.\n-                if(role.getRole().getOwner()==null) {\n-                    inheritableRAsOnOwner.add(role);\n-                }\n-            }\n-        }\n+    Object[] searchResult;\n+\n+    try {\n+      if (parentDvId == null) {\n+        searchResult =\n+          (Object[]) em.createNativeQuery(\"SELECT t0.AFFILIATION, t0.ALIAS FROM DATAVERSE t0 WHERE t0.ID = \" + dvId)\n+            .getSingleResult();\n+      } else {\n+        searchResult = (Object[]) em.createNativeQuery(\n+          \"SELECT t0.AFFILIATION, t0.ALIAS, t2.ALIAS FROM DATAVERSE t0, DVOBJECT t1, DATAVERSE t2, DVOBJECT t3 WHERE (t0.ID = t1.ID) AND (t1.OWNER_ID = t3.ID) AND (t2.ID = t3.ID) AND (t0.ID = \" +\n+            dvId + \")\").getSingleResult();\n+      }\n+    } catch (Exception ex) {\n+      return;\n+    }\n+\n+    if (searchResult == null) {\n+      return;\n+    }\n+\n+    if (searchResult[0] != null) {\n+      solrSearchResult.setDataverseAffiliation((String) searchResult[0]);\n+    }\n+\n+    if (searchResult[1] != null) {\n+      solrSearchResult.setDataverseAlias((String) searchResult[1]);\n+    }\n+\n+    if (parentDvId != null) {\n+      if (searchResult[2] != null) {\n+        solrSearchResult.setDataverseParentAlias((String) searchResult[2]);\n+      }\n+    }\n+  }\n+\n+  // function to recursively find ids of all children of a dataverse that\n+  // are also of type dataverse\n+  public List<Long> findAllDataverseDataverseChildren(Long dvId) {\n+    // get list of Dataverse children\n+    List<Long> dataverseChildren = findIdsByOwnerId(dvId);\n+\n+    if (dataverseChildren == null) {\n+      return dataverseChildren;\n+    } else {\n+      List<Long> newChildren = new ArrayList<>();\n+      for (Long childDvId : dataverseChildren) {\n+        newChildren.addAll(findAllDataverseDataverseChildren(childDvId));\n+      }\n+      dataverseChildren.addAll(newChildren);\n+      return dataverseChildren;\n+    }\n+  }\n+\n+  // function to recursively find ids of all children of a dataverse that are\n+  // of type dataset\n+  public List<Long> findAllDataverseDatasetChildren(Long dvId) {\n+    // get list of Dataverse children\n+    List<Long> dataverseChildren = findIdsByOwnerId(dvId);\n+    // get list of Dataset children\n+    List<Long> datasetChildren = datasetService.findIdsByOwnerId(dvId);\n \n-        String privateUrlToken = null;\n-        // Create lists of the existing inheritable roles for each child Dataverse\n-        Map<Long, List<RoleAssignment>> existingRAs = new HashMap<Long, List<RoleAssignment>>();\n+    if (dataverseChildren == null) {\n+      return datasetChildren;\n+    } else {\n+      for (Long childDvId : dataverseChildren) {\n+        datasetChildren.addAll(findAllDataverseDatasetChildren(childDvId));\n+      }\n+      return datasetChildren;\n+    }\n+  }\n+\n+  public String addRoleAssignmentsToChildren(Dataverse owner, ArrayList<String> rolesToInherit,\n+                                             boolean inheritAllRoles) {\n+    /*\n+     * This query recursively finds all Dataverses that are inside/children of the\n+     * specified one. It recursively finds dvobjects of dtype 'Dataverse' whose\n+     * owner_id equals an id already in the list and then returns the list of ids\n+     * found, excluding the id of the original specified Dataverse.\n+     */\n+    String qstr = \"WITH RECURSIVE path_elements AS ((\" + \" SELECT id, dtype FROM dvobject WHERE id in (\"\n+      + owner.getId() + \"))\" + \" UNION\\n\"\n+      + \" SELECT o.id, o.dtype FROM path_elements p, dvobject o WHERE o.owner_id = p.id and o.dtype='Dataverse') \"\n+      + \"SELECT id FROM path_elements WHERE id !=\" + owner.getId() + \";\";\n+\n+    List<Integer> childIds;\n+    try {\n+      childIds = em.createNativeQuery(qstr).getResultList();\n+    } catch (Exception ex) {\n+      childIds = null;\n+    }\n+\n+    // Set up to track the set of users/groups that get assigned a role and those\n+    // that don't\n+    JsonArrayBuilder usedNames = Json.createArrayBuilder();\n+    JsonArrayBuilder unusedNames = Json.createArrayBuilder();\n+    // Set up to track the list of dataverses, by id and alias, that are traversed.\n+    JsonArrayBuilder dataverseIds = Json.createArrayBuilder();\n+    JsonArrayBuilder dataverseAliases = Json.createArrayBuilder();\n+    // Get the Dataverses for the returned ids\n+\n+    List<Dataverse> children = new ArrayList<Dataverse>();\n+\n+    for (int i = 0; i < childIds.size(); i++) {\n+      Integer childId = childIds.get(i);\n+      Dataverse child = find(new Long(childId.longValue()));\n+      if (child != null) {\n+        // Add to the list of Dataverses\n+        children.add(child);\n+        // Add ids and aliases to the tracking arrays\n+        dataverseIds.add(childId.longValue());\n+        dataverseAliases.add(child.getAlias());\n+      }\n+    }\n+    // Find the role assignments on the specified Dataverse\n+    List<RoleAssignment> allRAsOnOwner = rolesService.directRoleAssignments(owner);\n+\n+    // Create a list of just the inheritable role assignments on the original\n+    // dataverse\n+    List<RoleAssignment> inheritableRAsOnOwner = new ArrayList<RoleAssignment>();\n+    for (RoleAssignment role : allRAsOnOwner) {\n+      if (inheritAllRoles || rolesToInherit.contains(role.getRole().getAlias())) {\n+        //Only supporting built-in/non-dataverse-specific custom roles. Custom roles all have an owner.\n+        if (role.getRole().getOwner() == null) {\n+          inheritableRAsOnOwner.add(role);\n+        }\n+      }\n+    }\n+\n+    String privateUrlToken = null;\n+    // Create lists of the existing inheritable roles for each child Dataverse\n+    Map<Long, List<RoleAssignment>> existingRAs = new HashMap<Long, List<RoleAssignment>>();\n+    for (Dataverse childDv : children) {\n+      List<RoleAssignment> allRAsOnChild = rolesService.directRoleAssignments(childDv);\n+      List<RoleAssignment> inheritableRoles = new ArrayList<RoleAssignment>();\n+      for (RoleAssignment role : allRAsOnChild) {\n+        if (inheritAllRoles || rolesToInherit.contains(role.getRole().getAlias())) {\n+          inheritableRoles.add(role);\n+        }\n+      }\n+      existingRAs.put(childDv.getId(), inheritableRoles);\n+    }\n+\n+    for (RoleAssignment roleAssignment : inheritableRAsOnOwner) {\n+      DataverseRole inheritableRole = roleAssignment.getRole();\n+      String identifier = roleAssignment.getAssigneeIdentifier();\n+      if (identifier.startsWith(AuthenticatedUser.IDENTIFIER_PREFIX)) {\n+        // The RoleAssignment is for an individual user\n+        // Add their name to the tracking list\n+        usedNames.add(identifier);\n+        // Strip the Identifier prefix so we can retrieve the user\n+        identifier = identifier.substring(AuthenticatedUser.IDENTIFIER_PREFIX.length());\n+        AuthenticatedUser roleUser = authService.getAuthenticatedUser(identifier);\n+        // Now loop over all children and add the roleUser in this role if they don't\n+        // yet have this role\n         for (Dataverse childDv : children) {\n-            List<RoleAssignment> allRAsOnChild = rolesService.directRoleAssignments(childDv);\n-            List<RoleAssignment> inheritableRoles = new ArrayList<RoleAssignment>();\n-            for (RoleAssignment role : allRAsOnChild) {\n-                if (inheritAllRoles || rolesToInherit.contains(role.getRole().getAlias())) {\n-                    inheritableRoles.add(role);\n-                }\n+          try {\n+            RoleAssignment ra = new RoleAssignment(inheritableRole, roleUser, childDv, privateUrlToken);\n+            if (!existingRAs.get(childDv.getId()).contains(ra)) {\n+              rolesService.save(ra);\n             }\n-            existingRAs.put(childDv.getId(), inheritableRoles);\n-        }\n-\n-        for (RoleAssignment roleAssignment : inheritableRAsOnOwner) {\n-            DataverseRole inheritableRole = roleAssignment.getRole();\n-            String identifier = roleAssignment.getAssigneeIdentifier();\n-            if (identifier.startsWith(AuthenticatedUser.IDENTIFIER_PREFIX)) {\n-                // The RoleAssignment is for an individual user\n-                // Add their name to the tracking list\n-                usedNames.add(identifier);\n-                // Strip the Identifier prefix so we can retrieve the user\n-                identifier = identifier.substring(AuthenticatedUser.IDENTIFIER_PREFIX.length());\n-                AuthenticatedUser roleUser = authService.getAuthenticatedUser(identifier);\n-                // Now loop over all children and add the roleUser in this role if they don't\n-                // yet have this role\n-                for (Dataverse childDv : children) {\n-                    try {\n-                        RoleAssignment ra = new RoleAssignment(inheritableRole, roleUser, childDv, privateUrlToken);\n-                        if (!existingRAs.get(childDv.getId()).contains(ra)) {\n-                            rolesService.save(ra);\n-                        }\n-                    } catch (Exception e) {\n-                        logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier()\n-                                + \"as an admin for new Dataverse: \" + childDv.getName());\n-                        logger.warning(e.getMessage());\n-                        throw (e);\n-                    }\n-                }\n-            } else if (identifier.startsWith(Group.IDENTIFIER_PREFIX)) {\n-                // The role assignment is for a group\n-                usedNames.add(identifier);\n-                identifier = identifier.substring(Group.IDENTIFIER_PREFIX.length());\n-                Group roleGroup = groupService.getGroup(identifier);\n-                if (roleGroup != null) {\n-                    for (Dataverse childDv : children) {\n-                        try {\n-                            RoleAssignment ra = new RoleAssignment(inheritableRole, roleGroup, childDv,\n-                                    privateUrlToken);\n-                            if (!existingRAs.get(childDv.getId()).contains(ra)) {\n-                                rolesService.save(ra);\n-                            }\n-                        } catch (Exception e) {\n-                            logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier()\n-                                    + \"as an admin for new Dataverse: \" + childDv.getName());\n-                            logger.warning(e.getMessage());\n-                            throw (e);\n-                        }\n-                    }\n-                } else {\n-                    // Add any groups of types not yet supported\n-                    unusedNames.add(identifier);\n-                }\n-            } else {\n-                // Add any other types of entity found (not user or group) that aren't supported\n-                unusedNames.add(identifier);\n+          } catch (Exception e) {\n+            logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier()\n+              + \"as an admin for new Dataverse: \" + childDv.getName());\n+            logger.warning(e.getMessage());\n+            throw (e);\n+          }\n+        }\n+      } else if (identifier.startsWith(Group.IDENTIFIER_PREFIX)) {\n+        // The role assignment is for a group\n+        usedNames.add(identifier);\n+        identifier = identifier.substring(Group.IDENTIFIER_PREFIX.length());\n+        Group roleGroup = groupService.getGroup(identifier);\n+        if (roleGroup != null) {\n+          for (Dataverse childDv : children) {\n+            try {\n+              RoleAssignment ra = new RoleAssignment(inheritableRole, roleGroup, childDv,\n+                privateUrlToken);\n+              if (!existingRAs.get(childDv.getId()).contains(ra)) {\n+                rolesService.save(ra);\n+              }\n+            } catch (Exception e) {\n+              logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier()\n+                + \"as an admin for new Dataverse: \" + childDv.getName());\n+              logger.warning(e.getMessage());\n+              throw (e);\n             }\n+          }\n+        } else {\n+          // Add any groups of types not yet supported\n+          unusedNames.add(identifier);\n         }\n-        /*\n-         * Report the list of Dataverses affected and the set of users/groups that\n-         * should now have admin roles on them (they may already have had them) and any\n-         * entities that had an admin role on the specified dataverse which were not\n-         * handled. Add this to the log and the API return message.\n-         */\n-        String result = Json.createObjectBuilder().add(\"Dataverses Updated\", dataverseIds)\n-                .add(\"Updated Dataverse Aliases\", dataverseAliases).add(\"Assignments added for\", usedNames)\n-                .add(\"Assignments not added for\", unusedNames).build().toString();\n-        logger.info(result);\n-        return (result);\n+      } else {\n+        // Add any other types of entity found (not user or group) that aren't supported\n+        unusedNames.add(identifier);\n+      }\n     }\n-    \n+    /*\n+     * Report the list of Dataverses affected and the set of users/groups that\n+     * should now have admin roles on them (they may already have had them) and any\n+     * entities that had an admin role on the specified dataverse which were not\n+     * handled. Add this to the log and the API return message.\n+     */\n+    String result = Json.createObjectBuilder().add(\"Dataverses Updated\", dataverseIds)\n+      .add(\"Updated Dataverse Aliases\", dataverseAliases).add(\"Assignments added for\", usedNames)\n+      .add(\"Assignments not added for\", unusedNames).build().toString();\n+    logger.info(result);\n+    return (result);\n+  }\n+\n }\n",
            "diff_size": 1112
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/90/DataverseServiceBean.java\nindex 520c3ff14df..7a209b877da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/90/DataverseServiceBean.java\n@@ -48,38 +48,41 @@ import org.apache.solr.client.solrj.SolrServerException;\n  *\n  * @author gdurand\n  */\n+\n+\n @Stateless\n @Named\n public class DataverseServiceBean implements java.io.Serializable {\n \n     private static final Logger logger = Logger.getLogger(DataverseServiceBean.class.getCanonicalName());\n+\n     @EJB\n     IndexServiceBean indexService;\n-    \n+\n     @EJB\n-    SolrIndexServiceBean solrIndexService; \n+    SolrIndexServiceBean solrIndexService;\n \n     @EJB\n     AuthenticationServiceBean authService;\n-    \n+\n     @EJB\n     DatasetServiceBean datasetService;\n-    \n+\n     @EJB\n     DataverseLinkingServiceBean dataverseLinkingService;\n \n     @EJB\n     DatasetLinkingServiceBean datasetLinkingService;\n-    \n+\n     @EJB\n     GroupServiceBean groupService;\n-    \n+\n     @EJB\n     DataverseRoleServiceBean rolesService;\n-    \n+\n     @EJB\n     PermissionServiceBean permissionService;\n-    \n+\n     @EJB\n     SystemConfig systemConfig;\n \n@@ -90,17 +93,15 @@ public class DataverseServiceBean implements java.io.Serializable {\n     private EntityManager em;\n \n     public Dataverse save(Dataverse dataverse) {\n-       \n         dataverse.setModificationTime(new Timestamp(new Date().getTime()));\n         Dataverse savedDataverse = em.merge(dataverse);\n         return savedDataverse;\n     }\n-    \n+\n     public boolean index(Dataverse dataverse) {\n         return index(dataverse, false);\n-\n     }\n-        \n+\n     public boolean index(Dataverse dataverse, boolean indexPermissions) {    \n         /**\n          * @todo check the result to see if indexing was successful or not\n@@ -117,9 +118,8 @@ public class DataverseServiceBean implements java.io.Serializable {\n             LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, dataverse);\n             return false;\n         }\n-\n         return true;\n-    }    \n+    }\n \n     public Dataverse find(Object pk) {\n         return em.find(Dataverse.class, pk);\n@@ -128,10 +128,11 @@ public class DataverseServiceBean implements java.io.Serializable {\n     public List<Dataverse> findAll() {\n         return em.createNamedQuery(\"Dataverse.findAll\").getResultList();\n     }\n-    \n+\n     public List<Long> findIdStale() {\n         return em.createNamedQuery(\"Dataverse.findIdStale\").getResultList();\n     }\n+\n     public List<Long> findIdStalePermission() {\n         return em.createNamedQuery(\"Dataverse.findIdStalePermission\").getResultList();\n     }\n@@ -151,26 +152,25 @@ public class DataverseServiceBean implements java.io.Serializable {\n      * @return All dataverses if you say numPartitions=1 and partitionId=0.\n      * Otherwise, a subset of dataverses.\n      */\n+\n     public List<Dataverse> findAllOrSubset(long numPartitions, long partitionId, boolean skipIndexed) {\n         if (numPartitions < 1) {\n             long saneNumPartitions = 1;\n             numPartitions = saneNumPartitions;\n         }\n+\n         String skipClause = skipIndexed ? \"AND o.indexTime is null \" : \"\";\n-        TypedQuery<Dataverse> typedQuery = em.createQuery(\"SELECT OBJECT(o) FROM Dataverse AS o WHERE MOD( o.id, :numPartitions) = :partitionId \" +\n-                skipClause +\n-                \"ORDER BY o.id\", Dataverse.class);\n+        TypedQuery<Dataverse> typedQuery = em.createQuery(\"SELECT OBJECT(o) FROM Dataverse AS o WHERE MOD( o.id, :numPartitions) = :partitionId \" + skipClause + \"ORDER BY o.id\", Dataverse.class);\n         typedQuery.setParameter(\"numPartitions\", numPartitions);\n         typedQuery.setParameter(\"partitionId\", partitionId);\n         return typedQuery.getResultList();\n     }\n-    \n+\n     public List<Long> findDataverseIdsForIndexing(boolean skipIndexed) {\n         if (skipIndexed) {\n             return em.createQuery(\"SELECT o.id FROM Dataverse o WHERE o.indexTime IS null ORDER BY o.id\", Long.class).getResultList();\n         }\n         return em.createQuery(\"SELECT o.id FROM Dataverse o ORDER BY o.id\", Long.class).getResultList();\n-        \n     }\n \n     public List<Dataverse> findByCreatorId(Long creatorId) {\n@@ -184,14 +184,14 @@ public class DataverseServiceBean implements java.io.Serializable {\n     public List<Dataverse> findByOwnerId(Long ownerId) {\n         return em.createNamedQuery(\"Dataverse.findByOwnerId\").setParameter(\"ownerId\", ownerId).getResultList();\n     }\n-    \n+\n     public List<Long> findIdsByOwnerId(Long ownerId) {\n         String qr = \"select o.id from Dataverse as o where o.owner.id =:ownerId order by o.id\";\n         return em.createQuery(qr, Long.class).setParameter(\"ownerId\", ownerId).getResultList();\n     }\n-    \n+\n     public List<Dataverse> findPublishedByOwnerId(Long ownerId) {\n-        String qr =\"select object(o) from Dataverse as o where o.owner.id =:ownerId and o.publicationDate is not null order by o.name\";\n+        String qr = \"select object(o) from Dataverse as o where o.owner.id =:ownerId and o.publicationDate is not null order by o.name\";\n         return em.createQuery(qr, Dataverse.class).setParameter(\"ownerId\", ownerId).getResultList();\n     }\n \n@@ -200,6 +200,7 @@ public class DataverseServiceBean implements java.io.Serializable {\n      * @todo Do we really want this method to sometimes throw a\n      * NoResultException which is a RuntimeException?\n      */\n+\n     public Dataverse findRootDataverse() {\n         return em.createNamedQuery(\"Dataverse.findRoot\", Dataverse.class).getSingleResult();\n     }\n@@ -207,16 +208,16 @@ public class DataverseServiceBean implements java.io.Serializable {\n     \n     //Similarly - if the above throws that exception, do we need to catch it here?\n     //ToDo - consider caching?\n+\n     public String getRootDataverseName() {\n         Dataverse root = findRootDataverse();\n-        String rootDataverseName=root.getName();\n-        return StringUtil.isEmpty(rootDataverseName) ? \"\" : rootDataverseName; \n+        String rootDataverseName = root.getName();\n+        return StringUtil.isEmpty(rootDataverseName) ? \"\" : rootDataverseName;\n     }\n-    \n+\n     public List<Dataverse> findAllPublishedByOwnerId(Long ownerId) {\n-        List<Dataverse> retVal = new ArrayList<>();       \n+        List<Dataverse> retVal = new ArrayList<>();\n         List<Dataverse> previousLevel = findPublishedByOwnerId(ownerId);\n-        \n         retVal.addAll(previousLevel);\n         /*\n         if (!previousLevel.isEmpty()) {\n@@ -234,26 +235,21 @@ public class DataverseServiceBean implements java.io.Serializable {\n      * @param anAlias\n      * @return \n      */\n+\n     public Dataverse findByAlias(String anAlias) {\n         try {\n-            return (anAlias.toLowerCase().equals(\":root\"))\n-              ? findRootDataverse()\n-              : em.createNamedQuery(\"Dataverse.findByAlias\", Dataverse.class)\n-                  .setParameter(\"alias\", anAlias.toLowerCase())\n-                  .getSingleResult();\n-        } catch ( NoResultException|NonUniqueResultException ex ) {\n+            return (anAlias.toLowerCase().equals(\":root\")) ? findRootDataverse() : em.createNamedQuery(\"Dataverse.findByAlias\", Dataverse.class).setParameter(\"alias\", anAlias.toLowerCase()).getSingleResult();\n+        } catch (NoResultException | NonUniqueResultException ex) {\n             logger.warning(\"Unable to find a single dataverse using alias \\\"\" + anAlias + \"\\\": \" + ex);\n             return null;\n         }\n     }\n-    \n-\tpublic boolean hasData( Dataverse dv ) {\n-\t\tTypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n-\t\t\t\t\t\t\t\t.setParameter(\"id\", dv.getId());\n-\t\t\n-\t\treturn (amountQry.getSingleResult()>0);\n-\t}\n-\t\n+\n+    public boolean hasData(Dataverse dv) {\n+        TypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class).setParameter(\"id\", dv.getId());\n+        return (amountQry.getSingleResult() > 0);\n+    }\n+\n     public boolean isRootDataverseExists() {\n         long count = em.createQuery(\"SELECT count(dv) FROM Dataverse dv WHERE dv.owner.id=null\", Long.class).getSingleResult();\n         return (count == 1);\n@@ -274,36 +270,32 @@ public class DataverseServiceBean implements java.io.Serializable {\n     }\n \n     public MetadataBlock findMDBByName(String name) {\n-        return em.createQuery(\"select m from MetadataBlock m WHERE m.name=:name\", MetadataBlock.class)\n-                .setParameter(\"name\", name)\n-                .getSingleResult();\n+        return em.createQuery(\"select m from MetadataBlock m WHERE m.name=:name\", MetadataBlock.class).setParameter(\"name\", name).getSingleResult();\n     }\n \n     public List<MetadataBlock> findAllMetadataBlocks() {\n         return em.createQuery(\"select object(o) from MetadataBlock as o order by o.id\", MetadataBlock.class).getResultList();\n     }\n-    \n-    public List<MetadataBlock> findSystemMetadataBlocks(){\n+\n+    public List<MetadataBlock> findSystemMetadataBlocks() {\n         String qr = \"select object(o) from MetadataBlock as o where o.owner.id=null  order by o.id\";\n         return em.createQuery(qr, MetadataBlock.class).getResultList();\n     }\n-    \n+\n     public List<MetadataBlock> findMetadataBlocksByDataverseId(Long dataverse_id) {\n         String qr = \"select object(o) from MetadataBlock as o where o.owner.id=:dataverse_id order by o.id\";\n-        return em.createQuery(qr, MetadataBlock.class)\n-                .setParameter(\"dataverse_id\", dataverse_id).getResultList();\n+        return em.createQuery(qr, MetadataBlock.class).setParameter(\"dataverse_id\", dataverse_id).getResultList();\n     }\n-    \n+\n     public DataverseFacet findFacet(Long id) {\n         return em.find(DataverseFacet.class, id);\n     }\n-    \n+\n     public List<DataverseFacet> findAllDataverseFacets() {\n         return em.createQuery(\"select object(o) from DataverseFacet as o order by o.display\", DataverseFacet.class).getResultList();\n     }\n-    \n+\n     public String getDataverseLogoThumbnailAsBase64(Dataverse dataverse, User user) {\n-        \n         if (dataverse == null) {\n             return null;\n         }\n@@ -311,33 +303,27 @@ public class DataverseServiceBean implements java.io.Serializable {\n         File dataverseLogoFile = getLogo(dataverse);\n         if (dataverseLogoFile != null) {\n             String logoThumbNailPath;\n-\n             if (dataverseLogoFile.exists()) {\n                 logoThumbNailPath = ImageThumbConverter.generateImageThumbnailFromFile(dataverseLogoFile.getAbsolutePath(), 48);\n                 if (logoThumbNailPath != null) {\n                     return ImageThumbConverter.getImageAsBase64FromFile(new File(logoThumbNailPath));\n-\n                 }\n             }\n-        } \n+        }\n         return null;\n     }\n-    \n+\n     public String getDataverseLogoThumbnailAsBase64ById(Long dvId) {\n-     \n         File dataverseLogoFile = getLogoById(dvId);\n-        \n         if (dataverseLogoFile != null) {\n             String logoThumbNailPath;\n-\n             if (dataverseLogoFile.exists()) {\n                 logoThumbNailPath = ImageThumbConverter.generateImageThumbnailFromFile(dataverseLogoFile.getAbsolutePath(), 48);\n                 if (logoThumbNailPath != null) {\n                     return ImageThumbConverter.getImageAsBase64FromFile(new File(logoThumbNailPath));\n-\n                 }\n             }\n-        } \n+        }\n         return null;\n     }\n     \n@@ -385,79 +371,62 @@ public class DataverseServiceBean implements java.io.Serializable {\n         /*\n         return false; \n     } */\n-        \n+\n     private File getLogo(Dataverse dataverse) {\n         if (dataverse.getId() == null) {\n-            return null; \n+            return null;\n         }\n-        \n-        DataverseTheme theme = dataverse.getDataverseTheme(); \n+\n+        DataverseTheme theme = dataverse.getDataverseTheme();\n         if (theme != null && theme.getLogo() != null && !theme.getLogo().isEmpty()) {\n             Properties p = System.getProperties();\n             String domainRoot = p.getProperty(\"com.sun.aas.instanceRoot\");\n-  \n             if (domainRoot != null && !\"\".equals(domainRoot)) {\n-                return new File (domainRoot + File.separator + \n-                    \"docroot\" + File.separator + \n-                    \"logos\" + File.separator + \n-                    dataverse.getLogoOwnerId() + File.separator + \n-                    theme.getLogo());\n+                return new File(domainRoot + File.separator + \"docroot\" + File.separator + \"logos\" + File.separator + dataverse.getLogoOwnerId() + File.separator + theme.getLogo());\n             }\n         }\n-            \n-        return null;         \n+        return null;\n     }\n-    \n+\n     private File getLogoById(Long id) {\n         if (id == null) {\n-            return null; \n+            return null;\n         }\n-        \n+\n         String logoFileName;\n-        \n         try {\n-                logoFileName = (String) em.createNativeQuery(\"SELECT logo FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n-            \n+            logoFileName = (String) em.createNativeQuery(\"SELECT logo FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n         } catch (Exception ex) {\n             return null;\n         }\n-        \n+\n         if (logoFileName != null && !logoFileName.isEmpty()) {\n             Properties p = System.getProperties();\n             String domainRoot = p.getProperty(\"com.sun.aas.instanceRoot\");\n-  \n             if (domainRoot != null && !\"\".equals(domainRoot)) {\n-                return new File (domainRoot + File.separator + \n-                    \"docroot\" + File.separator + \n-                    \"logos\" + File.separator + \n-                    id + File.separator + \n-                    logoFileName);\n+                return new File(domainRoot + File.separator + \"docroot\" + File.separator + \"logos\" + File.separator + id + File.separator + logoFileName);\n             }\n         }\n-            \n-        return null;         \n+        return null;\n     }\n-    \n+\n     public DataverseTheme findDataverseThemeByIdQuick(Long id) {\n         if (id == null) {\n-            return null; \n+            return null;\n         }\n-        \n+\n         Object[] result;\n-        \n         try {\n-                result = (Object[]) em.createNativeQuery(\"SELECT logo, logoFormat FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n-            \n+            result = (Object[]) em.createNativeQuery(\"SELECT logo, logoFormat FROM dataversetheme WHERE dataverse_id = \" + id).getSingleResult();\n         } catch (Exception ex) {\n             return null;\n         }\n-        \n+\n         if (result == null) {\n             return null;\n         }\n-        \n+\n         DataverseTheme theme = new DataverseTheme();\n-        \n         if (result[0] != null) {\n             theme.setLogo((String) result[0]);\n         }\n@@ -466,14 +435,13 @@ public class DataverseServiceBean implements java.io.Serializable {\n             String format = (String) result[1];\n             switch (format) {\n                 case \"RECTANGLE\":\n-                theme.setLogoFormat(DataverseTheme.ImageFormat.RECTANGLE);\n+                    theme.setLogoFormat(DataverseTheme.ImageFormat.RECTANGLE);\n                     break;\n                 case \"SQUARE\":\n-                theme.setLogoFormat(DataverseTheme.ImageFormat.SQUARE);\n+                    theme.setLogoFormat(DataverseTheme.ImageFormat.SQUARE);\n                     break;\n             }\n         }\n-        \n         return theme;\n     }\n \n@@ -492,41 +460,34 @@ public class DataverseServiceBean implements java.io.Serializable {\n     public List<Dataverse> findDataversesThatLinkToThisDatasetId(long datasetId) {\n         return datasetLinkingService.findLinkingDataverses(datasetId);\n     }\n-    \n+\n     public List<Dataverse> filterByAliasQuery(String filterQuery) {\n         //Query query = em.createNativeQuery(\"select o from Dataverse o where o.alias LIKE '\" + filterQuery + \"%' order by o.alias\");\n         //Query query = em.createNamedQuery(\"Dataverse.filterByAlias\", Dataverse.class).setParameter(\"alias\", filterQuery.toLowerCase() + \"%\");\n-        List<Dataverse> ret = em.createNamedQuery(\"Dataverse.filterByAliasNameAffiliation\", Dataverse.class)\n-                .setParameter(\"alias\", filterQuery.toLowerCase() + \"%\")\n-                .setParameter(\"name\", \"%\" + filterQuery.toLowerCase() + \"%\")\n-                .setParameter(\"affiliation\", \"%\" + filterQuery.toLowerCase() + \"%\").getResultList();\n+        List<Dataverse> ret = em.createNamedQuery(\"Dataverse.filterByAliasNameAffiliation\", Dataverse.class).setParameter(\"alias\", filterQuery.toLowerCase() + \"%\").setParameter(\"name\", \"%\" + filterQuery.toLowerCase() + \"%\").setParameter(\"affiliation\", \"%\" + filterQuery.toLowerCase() + \"%\").getResultList();\n         //logger.info(\"created native query: select o from Dataverse o where o.alias LIKE '\" + filterQuery + \"%' order by o.alias\");\n         logger.info(\"created named query\");\n         if (ret != null) {\n-            logger.info(\"results list: \"+ret.size()+\" results.\");\n+            logger.info(\"results list: \" + ret.size() + \" results.\");\n         }\n         return ret;\n     }\n-    \n-    public List<Dataverse> filterDataversesForLinking(String query, DataverseRequest req, Dataset dataset) {\n \n+    public List<Dataverse> filterDataversesForLinking(String query, DataverseRequest req, Dataset dataset) {\n         List<Dataverse> dataverseList = new ArrayList<>();\n-\n         List<Dataverse> results = filterDataversesByNamePattern(query);\n-        \n         if (results == null || results.size() == 0) {\n-            return null; \n+            return null;\n         }\n \n         List<Object> alreadyLinkeddv_ids = em.createNativeQuery(\"SELECT linkingdataverse_id   FROM datasetlinkingdataverse WHERE dataset_id = \" + dataset.getId()).getResultList();\n         List<Dataverse> remove = new ArrayList<>();\n-\n         if (alreadyLinkeddv_ids != null && !alreadyLinkeddv_ids.isEmpty()) {\n             alreadyLinkeddv_ids.stream().map((testDVId) -> this.find(testDVId)).forEachOrdered((removeIt) -> {\n                 remove.add(removeIt);\n             });\n         }\n-        \n+\n         for (Dataverse res : results) {\n             if (!remove.contains(res)) {\n                 if (this.permissionService.requestOn(req, res).has(Permission.PublishDataset)) {\n@@ -534,40 +495,32 @@ public class DataverseServiceBean implements java.io.Serializable {\n                 }\n             }\n         }\n-\n         return dataverseList;\n     }\n-    \n+\n     public List<Dataverse> filterDataversesForHosting(String pattern, DataverseRequest req) {\n \n         // Find the dataverses matching the search parameters: \n-        \n         List<Dataverse> searchResults = filterDataversesByNamePattern(pattern);\n-        \n         if (searchResults == null || searchResults.size() == 0) {\n-            return null; \n+            return null;\n         }\n-        \n         logger.fine(\"search query found \" + searchResults.size() + \" results\");\n         \n         // Filter the results and drop the dataverses where the user is not allowed to \n         // add datasets:\n-        \n         if (req.getAuthenticatedUser().isSuperuser()) {\n             logger.fine(\"will skip permission check...\");\n             return searchResults;\n         }\n-        \n+\n         List<Dataverse> finalResults = new ArrayList<>();\n-        \n         for (Dataverse res : searchResults) {\n             if (this.permissionService.requestOn(req, res).has(Permission.AddDataset)) {\n                 finalResults.add(res);\n             }\n         }\n-        \n         logger.fine(\"returning \" + finalResults.size() + \" final results\");\n-\n         return finalResults;\n     }\n     \n@@ -582,10 +535,9 @@ public class DataverseServiceBean implements java.io.Serializable {\n         The query isn't pretty, but it works, and it's still EJB QL (and NOT a \n         native query). \n     */\n-    public List<Dataverse> filterDataversesByNamePattern(String pattern) {\n \n+    public List<Dataverse> filterDataversesByNamePattern(String pattern) {\n         pattern = pattern.toLowerCase();\n-        \n         String pattern1 = pattern + \"%\";\n         String pattern2 = \"% \" + pattern + \"%\";\n \n@@ -597,27 +549,14 @@ public class DataverseServiceBean implements java.io.Serializable {\n         /*if (pattern.length() == 2) {\n             pattern2 = pattern + \"%\";\n         }*/\n-        \n-        \n-        String qstr = \"select dv from Dataverse dv \"\n-                + \"where (LOWER(dv.name) LIKE :dataverse and ((SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern1) \"\n-                + \"     or (SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern2))) \"\n-                + \"or (LOWER(dv.name) NOT LIKE :dataverse and ((LOWER(dv.name) LIKE :pattern1) \"\n-                + \"     or (LOWER(dv.name) LIKE :pattern2))) \"\n-                + \"order by dv.alias\";\n-                \n+\n+        String qstr = \"select dv from Dataverse dv \" + \"where (LOWER(dv.name) LIKE :dataverse and ((SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern1) \" + \"     or (SUBSTRING(LOWER(dv.name),0,(LENGTH(dv.name)-9)) LIKE :pattern2))) \" + \"or (LOWER(dv.name) NOT LIKE :dataverse and ((LOWER(dv.name) LIKE :pattern1) \" + \"     or (LOWER(dv.name) LIKE :pattern2))) \" + \"order by dv.alias\";\n         List<Dataverse> searchResults = null;\n-        \n         try {\n-            searchResults = em.createQuery(qstr, Dataverse.class)\n-                    .setParameter(\"dataverse\", \"%dataverse\")\n-                    .setParameter(\"pattern1\", pattern1)\n-                    .setParameter(\"pattern2\", pattern2)\n-                    .getResultList();\n+            searchResults = em.createQuery(qstr, Dataverse.class).setParameter(\"dataverse\", \"%dataverse\").setParameter(\"pattern1\", pattern1).setParameter(\"pattern2\", pattern2).getResultList();\n         } catch (Exception ex) {\n             searchResults = null;\n         }\n-        \n         return searchResults;\n     }\n     \n@@ -661,19 +600,17 @@ public class DataverseServiceBean implements java.io.Serializable {\n         \n         return ret;        \n     }*/\n-    \n-    public String getParentAliasString(SolrSearchResult solrSearchResult){\n+\n+    public String getParentAliasString(SolrSearchResult solrSearchResult) {\n         Long dvId = solrSearchResult.getEntityId();\n         String retVal = \"\";\n-        \n         if (dvId == null) {\n             return retVal;\n         }\n-        \n+\n         String searchResult;\n         try {\n             searchResult = (String) em.createNativeQuery(\"select  t0.ALIAS FROM DATAVERSE t0, DVOBJECT t1,  DVOBJECT t2 WHERE (t0.ID = t1.ID) AND (t2.OWNER_ID = t1.ID)  AND (t2.ID =\" + dvId + \")\").getSingleResult();\n-\n         } catch (Exception ex) {\n             return retVal;\n         }\n@@ -685,19 +622,15 @@ public class DataverseServiceBean implements java.io.Serializable {\n         if (searchResult != null) {\n             return searchResult;\n         }\n-        \n         return retVal;\n     }\n-    \n-    \n+\n     public void populateDvSearchCard(SolrSearchResult solrSearchResult) {\n-  \n         Long dvId = solrSearchResult.getEntityId();\n-        \n         if (dvId == null) {\n             return;\n         }\n-        \n+\n         Long parentDvId = null;\n         String parentId = solrSearchResult.getParent().get(\"id\");\n         if (parentId != null) {\n@@ -707,9 +640,8 @@ public class DataverseServiceBean implements java.io.Serializable {\n                 parentDvId = null;\n             }\n         }\n-        \n+\n         Object[] searchResult;\n-        \n         try {\n             if (parentDvId == null) {\n                 searchResult = (Object[]) em.createNativeQuery(\"SELECT t0.AFFILIATION, t0.ALIAS FROM DATAVERSE t0 WHERE t0.ID = \" + dvId).getSingleResult();\n@@ -723,7 +655,7 @@ public class DataverseServiceBean implements java.io.Serializable {\n         if (searchResult == null) {\n             return;\n         }\n-        \n+\n         if (searchResult[0] != null) {\n             solrSearchResult.setDataverseAffiliation((String) searchResult[0]);\n         }\n@@ -731,7 +663,7 @@ public class DataverseServiceBean implements java.io.Serializable {\n         if (searchResult[1] != null) {\n             solrSearchResult.setDataverseAlias((String) searchResult[1]);\n         }\n-        \n+\n         if (parentDvId != null) {\n             if (searchResult[2] != null) {\n                 solrSearchResult.setDataverseParentAlias((String) searchResult[2]);\n@@ -741,10 +673,10 @@ public class DataverseServiceBean implements java.io.Serializable {\n     \n     // function to recursively find ids of all children of a dataverse that \n     // are also of type dataverse\n+\n     public List<Long> findAllDataverseDataverseChildren(Long dvId) {\n         // get list of Dataverse children\n         List<Long> dataverseChildren = findIdsByOwnerId(dvId);\n-        \n         if (dataverseChildren == null) {\n             return dataverseChildren;\n         } else {\n@@ -759,12 +691,12 @@ public class DataverseServiceBean implements java.io.Serializable {\n     \n     // function to recursively find ids of all children of a dataverse that are \n     // of type dataset\n+\n     public List<Long> findAllDataverseDatasetChildren(Long dvId) {\n         // get list of Dataverse children\n         List<Long> dataverseChildren = findIdsByOwnerId(dvId);\n         // get list of Dataset children\n         List<Long> datasetChildren = datasetService.findIdsByOwnerId(dvId);\n-        \n         if (dataverseChildren == null) {\n             return datasetChildren;\n         } else {\n@@ -774,20 +706,15 @@ public class DataverseServiceBean implements java.io.Serializable {\n             return datasetChildren;\n         }\n     }\n-    \n-    public String addRoleAssignmentsToChildren(Dataverse owner, ArrayList<String> rolesToInherit,\n-            boolean inheritAllRoles) {\n+\n+    public String addRoleAssignmentsToChildren(Dataverse owner, ArrayList<String> rolesToInherit, boolean inheritAllRoles) {\n         /*\n          * This query recursively finds all Dataverses that are inside/children of the\n          * specified one. It recursively finds dvobjects of dtype 'Dataverse' whose\n          * owner_id equals an id already in the list and then returns the list of ids\n          * found, excluding the id of the original specified Dataverse.\n          */\n-        String qstr = \"WITH RECURSIVE path_elements AS ((\" + \" SELECT id, dtype FROM dvobject WHERE id in (\"\n-                + owner.getId() + \"))\" + \" UNION\\n\"\n-                + \" SELECT o.id, o.dtype FROM path_elements p, dvobject o WHERE o.owner_id = p.id and o.dtype='Dataverse') \"\n-                + \"SELECT id FROM path_elements WHERE id !=\" + owner.getId() + \";\";\n-\n+        String qstr = \"WITH RECURSIVE path_elements AS ((\" + \" SELECT id, dtype FROM dvobject WHERE id in (\" + owner.getId() + \"))\" + \" UNION\\n\" + \" SELECT o.id, o.dtype FROM path_elements p, dvobject o WHERE o.owner_id = p.id and o.dtype='Dataverse') \" + \"SELECT id FROM path_elements WHERE id !=\" + owner.getId() + \";\";\n         List<Integer> childIds;\n         try {\n             childIds = em.createNativeQuery(qstr).getResultList();\n@@ -797,15 +724,14 @@ public class DataverseServiceBean implements java.io.Serializable {\n \n         // Set up to track the set of users/groups that get assigned a role and those\n         // that don't\n+\n         JsonArrayBuilder usedNames = Json.createArrayBuilder();\n         JsonArrayBuilder unusedNames = Json.createArrayBuilder();\n         // Set up to track the list of dataverses, by id and alias, that are traversed.\n         JsonArrayBuilder dataverseIds = Json.createArrayBuilder();\n         JsonArrayBuilder dataverseAliases = Json.createArrayBuilder();\n         // Get the Dataverses for the returned ids\n-\n         List<Dataverse> children = new ArrayList<Dataverse>();\n-\n         for (int i = 0; i < childIds.size(); i++) {\n             Integer childId = childIds.get(i);\n             Dataverse child = find(new Long(childId.longValue()));\n@@ -818,6 +744,7 @@ public class DataverseServiceBean implements java.io.Serializable {\n             }\n         }\n         // Find the role assignments on the specified Dataverse\n+\n         List<RoleAssignment> allRAsOnOwner = rolesService.directRoleAssignments(owner);\n \n         // Create a list of just the inheritable role assignments on the original\n@@ -826,7 +753,7 @@ public class DataverseServiceBean implements java.io.Serializable {\n         for (RoleAssignment role : allRAsOnOwner) {\n             if (inheritAllRoles || rolesToInherit.contains(role.getRole().getAlias())) {\n                 //Only supporting built-in/non-dataverse-specific custom roles. Custom roles all have an owner.\n-                if(role.getRole().getOwner()==null) {\n+                if (role.getRole().getOwner() == null) {\n                     inheritableRAsOnOwner.add(role);\n                 }\n             }\n@@ -865,8 +792,7 @@ public class DataverseServiceBean implements java.io.Serializable {\n                             rolesService.save(ra);\n                         }\n                     } catch (Exception e) {\n-                        logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier()\n-                                + \"as an admin for new Dataverse: \" + childDv.getName());\n+                        logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier() + \"as an admin for new Dataverse: \" + childDv.getName());\n                         logger.warning(e.getMessage());\n                         throw (e);\n                     }\n@@ -879,14 +805,12 @@ public class DataverseServiceBean implements java.io.Serializable {\n                 if (roleGroup != null) {\n                     for (Dataverse childDv : children) {\n                         try {\n-                            RoleAssignment ra = new RoleAssignment(inheritableRole, roleGroup, childDv,\n-                                    privateUrlToken);\n+                            RoleAssignment ra = new RoleAssignment(inheritableRole, roleGroup, childDv, privateUrlToken);\n                             if (!existingRAs.get(childDv.getId()).contains(ra)) {\n                                 rolesService.save(ra);\n                             }\n                         } catch (Exception e) {\n-                            logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier()\n-                                    + \"as an admin for new Dataverse: \" + childDv.getName());\n+                            logger.warning(\"Unable to assign \" + roleAssignment.getAssigneeIdentifier() + \"as an admin for new Dataverse: \" + childDv.getName());\n                             logger.warning(e.getMessage());\n                             throw (e);\n                         }\n@@ -906,11 +830,10 @@ public class DataverseServiceBean implements java.io.Serializable {\n          * entities that had an admin role on the specified dataverse which were not\n          * handled. Add this to the log and the API return message.\n          */\n-        String result = Json.createObjectBuilder().add(\"Dataverses Updated\", dataverseIds)\n-                .add(\"Updated Dataverse Aliases\", dataverseAliases).add(\"Assignments added for\", usedNames)\n-                .add(\"Assignments not added for\", unusedNames).build().toString();\n+\n+        String result = Json.createObjectBuilder().add(\"Dataverses Updated\", dataverseIds).add(\"Updated Dataverse Aliases\", dataverseAliases).add(\"Assignments added for\", usedNames).add(\"Assignments not added for\", unusedNames).build().toString();\n         logger.info(result);\n         return (result);\n     }\n-    \n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 198
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "251",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/90/DataverseServiceBean.java\nindex 520c3ff14df..5dd0085c1ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/90/DataverseServiceBean.java\n@@ -246,8 +246,8 @@ public class DataverseServiceBean implements java.io.Serializable {\n             return null;\n         }\n     }\n-    \n-\tpublic boolean hasData( Dataverse dv ) {\n+\n+    public boolean hasData( Dataverse dv ) {\n \t\tTypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n \t\t\t\t\t\t\t\t.setParameter(\"id\", dv.getId());\n \t\t\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "251",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/90/DataverseServiceBean.java\nindex 520c3ff14df..5dd0085c1ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/90/DataverseServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/90/DataverseServiceBean.java\n@@ -246,8 +246,8 @@ public class DataverseServiceBean implements java.io.Serializable {\n             return null;\n         }\n     }\n-    \n-\tpublic boolean hasData( Dataverse dv ) {\n+\n+    public boolean hasData( Dataverse dv ) {\n \t\tTypedQuery<Long> amountQry = em.createNamedQuery(\"Dataverse.ownedObjectsById\", Long.class)\n \t\t\t\t\t\t\t\t.setParameter(\"id\", dv.getId());\n \t\t\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}