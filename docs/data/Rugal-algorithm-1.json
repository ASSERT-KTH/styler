{
    "project_name": "Rugal-algorithm",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    // Iterate over remaining intervals\n    for (int i = 1; i < intervals.length; i++) {\n      // keep checking if the top meeting room is freed. If not, we have to push the current one into heap\n      // If the room due to free up the earliest is free, assign that room to this meeting.\n      if (intervals[i][0] >= allocator.peek()) {\n        // if new meeting starts after the the earliest meeting ends",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "column": "48",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/errored/1/1/Solution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/naturalize/1/Solution.java\nindex d3fee61061a..f84e0759bea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/errored/1/1/Solution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/naturalize/1/Solution.java\n@@ -58,8 +58,7 @@ public class Solution {\n     final int[] stop = new int[max + 1];\r\n \r\n     for (int[] interval : intervals) {\r\n-      ++start[interval[0]];\r\n-      --stop[interval[1]];\r\n+      ++start[interval[0]]; --stop[interval[1]];\r\n     }\r\n \r\n     max = 0;\r\n@@ -75,4 +74,4 @@ public class Solution {\n \r\n     return max;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/errored/1/1/Solution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/codebuff/1/Solution.java\nindex d3fee61061a..f3ef2d06cb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/errored/1/1/Solution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/codebuff/1/Solution.java\n@@ -1,78 +1,77 @@\n-package ga.rugal.amazon.meetingroomsii;\r\n-\r\n-import java.util.Arrays;\r\n+package ga.rugal.amazon.meetingroomsii;\n+\n+import java.util.Arrays;\n import java.util.PriorityQueue;\r\n \r\n /**\r\n  * https://leetcode.com/problems/meeting-rooms-ii/\r\n  *\r\n  * @author rugal\r\n- */\r\n-public class Solution {\r\n-\r\n-  public int minMeetingRooms(final int[][] intervals) {\r\n-    return this.minMeetingRooms_bucketSort(intervals);\r\n-  }\r\n-\r\n+ */\n+\n+\n+public class Solution {\n+\n+  public int minMeetingRooms(final int[][] intervals) {\n+    return this.minMeetingRooms_bucketSort(intervals);\n+  }\n+\n   public int minMeetingRooms_sort(final int[][] intervals) {\r\n \r\n-    // Check for the base case. If there are no intervals, return 0\r\n-    if (intervals.length == 0) {\r\n-      return 0;\r\n+    // Check for the base case. If there are no intervals, return 0\n+    if (intervals.length == 0) {\n+      return 0;\n     }\r\n \r\n-    // Min heap\r\n+    // Min heap\n     final PriorityQueue<Integer> allocator = new PriorityQueue<>(intervals.length, (a, b) -> a - b);\r\n \r\n-    // Sort the intervals by start time\r\n+    // Sort the intervals by start time\n     Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\r\n \r\n-    // Add the first meeting, record the end time of meeting\r\n+    // Add the first meeting, record the end time of meeting\n     allocator.add(intervals[0][1]);\r\n \r\n-    // Iterate over remaining intervals\r\n+    // Iterate over remaining intervals\n     for (int i = 1; i < intervals.length; i++) {\r\n       // keep checking if the top meeting room is freed. If not, we have to push the current one into heap\r\n-      // If the room due to free up the earliest is free, assign that room to this meeting.\r\n+      // If the room due to free up the earliest is free, assign that room to this meeting.\n       if (intervals[i][0] >= allocator.peek()) {\r\n         // if new meeting starts after the the earliest meeting ends\r\n-        // the earliest meeting will not block any one after this meeting anymore\r\n-        allocator.poll();\r\n+        // the earliest meeting will not block any one after this meeting anymore\n+        allocator.poll();\n       }\r\n \r\n       // If a new room is to be assigned, then also we add to the heap,\r\n-      // If an old room is allocated, then also we have to add to the heap with updated end time.\r\n-      allocator.add(intervals[i][1]);\r\n-    }\r\n-\r\n-    // The size of the heap tells us the minimum rooms required for all the meetings.\r\n-    return allocator.size();\r\n-  }\r\n-\r\n-  public int minMeetingRooms_bucketSort(final int[][] intervals) {\r\n-    int max = -1;\r\n-    for (int[] interval : intervals) {\r\n-      max = Math.max(max, interval[1]);\r\n-    }\r\n-    final int[] start = new int[max + 1];\r\n-    final int[] stop = new int[max + 1];\r\n-\r\n-    for (int[] interval : intervals) {\r\n-      ++start[interval[0]];\r\n-      --stop[interval[1]];\r\n-    }\r\n-\r\n-    max = 0;\r\n-    int count = 0;\r\n-    for (int i = 0; i < start.length; ++i) {\r\n-      if (0 == start[i] && 0 == stop[i]) {\r\n-        continue;\r\n-      }\r\n-      count += start[i];\r\n-      max = Math.max(max, count);\r\n-      count += stop[i];\r\n+      // If an old room is allocated, then also we have to add to the heap with updated end time.\n+      allocator.add(intervals[i][1]);\n     }\r\n \r\n-    return max;\r\n-  }\r\n-}\r\n+    // The size of the heap tells us the minimum rooms required for all the meetings.\n+    return allocator.size();\n+  }\n+\n+  public int minMeetingRooms_bucketSort(final int[][] intervals) {\n+    int max = -1;\n+    for (int[] interval : intervals) {\n+      max = Math.max(max, interval[1]);\n+    }\n+    final int[] start = new int[max + 1];\n+    final int[] stop = new int[max + 1];\n+    for (int[] interval : intervals) {\n+      ++start[interval[0]];\n+      --stop[interval[1]];\n+    }\n+    max = 0;\n+    int count = 0;\n+    for (int i = 0; i < start.length; ++i) {\n+      if (0 == start[i] && 0 == stop[i]) {\n+        continue;\n+      }\n+      count += start[i];\n+      max = Math.max(max, count);\n+      count += stop[i];\n+    }\n+    return max;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "column": "48",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 6, expected is 4, indentation should be the same level as line 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/errored/1/1/Solution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/styler_three_grams/1/Solution.java\nindex d3fee61061a..550ff877c59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/errored/1/1/Solution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Rugal-algorithm/styler_three_grams/1/Solution.java\n@@ -31,10 +31,9 @@ public class Solution {\n     allocator.add(intervals[0][1]);\r\n \r\n     // Iterate over remaining intervals\r\n-    for (int i = 1; i < intervals.length; i++) {\r\n-      // keep checking if the top meeting room is freed. If not, we have to push the current one into heap\r\n+    for (int i = 1; i < intervals.length; i++) {// keep checking if the top meeting room is freed. If not, we have to push the current one into heap\r\n       // If the room due to free up the earliest is free, assign that room to this meeting.\r\n-      if (intervals[i][0] >= allocator.peek()) {\r\n+    if (intervals[i][0] >= allocator.peek()) {\r\n         // if new meeting starts after the the earliest meeting ends\r\n         // the earliest meeting will not block any one after this meeting anymore\r\n         allocator.poll();\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}