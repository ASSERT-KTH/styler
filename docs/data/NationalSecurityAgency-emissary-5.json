{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "448",
                "column": "31",
                "severity": "warning",
                "message": "'}' at column 31 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n    /** This class is not meant to be instantiated. */\n    private KeyManipulator() {}\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "448",
                    "column": "31",
                    "severity": "warning",
                    "message": "'}' at column 31 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "398",
                    "column": "11",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/5/KeyManipulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/5/KeyManipulator.java\nindex b7cf128ce46..5d71ef859c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/5/KeyManipulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/5/KeyManipulator.java\n@@ -9,9 +9,9 @@ import emissary.place.IServiceProviderPlace;\n  * format:\n  *\n  * <code>dataType.serviceName.serviceType.location$expense</code>\n- * \n+ * <p>\n  * Example: UNKNOWN.servicename.ID.tcp://host.dom.com:8001/FilePlace$5050\n- * \n+ *\n  * <table>\n  * <caption>For the example key above the return values are as follows:</caption>\n  * <tr>\n@@ -59,7 +59,6 @@ import emissary.place.IServiceProviderPlace;\n  * <td>*.*.*.http://host.dom.com:8001/DirectoryPlace</td>\n  * </tr>\n  * </table>\n- *\n  */\n public class KeyManipulator implements Serializable {\n \n@@ -86,9 +85,9 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Make a key from parts\n      *\n-     * @param dataType the first part of the key\n-     * @param serviceName the second part of the key\n-     * @param serviceType the third part of the key\n+     * @param dataType        the first part of the key\n+     * @param serviceName     the second part of the key\n+     * @param serviceType     the third part of the key\n      * @param serviceLocation the fourth part of the key\n      */\n     public static String makeKey(final String dataType, final String serviceName, final String serviceType, final String serviceLocation) {\n@@ -367,7 +366,7 @@ public class KeyManipulator implements Serializable {\n      * Add in the remote overhead to the \"to\" key if it was a move\n      *\n      * @param from the key we came from\n-     * @param to the key we went to\n+     * @param to   the key we went to\n      * @return the &quot;to&quot; key with remote overhead or as it was\n      */\n     public static String addRemoteCostIfMoved(final String from, final String to) {\n@@ -384,11 +383,11 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Mangle origKey such that the host on proxyKey becomes a proxy for it\n      *\n-     * @param origKey the original key\n+     * @param origKey  the original key\n      * @param proxyKey the key representing the place that wants to proxy\n-     * @param dfltExp default expense to use if origKey has none or -1 for no dflt\n+     * @param dfltExp  default expense to use if origKey has none or -1 for no dflt\n      * @return a key with the original data type, service type and service name and expense but the new place location from\n-     *         proxyKey\n+     * proxyKey\n      */\n     public static String makeProxyKey(final String origKey, final String proxyKey, final int dfltExp) {\n         if (isLocalTo(origKey, proxyKey) && dfltExp > -1) {\n@@ -396,7 +395,7 @@ public class KeyManipulator implements Serializable {\n         }\n         final int newExp = getExpense(origKey, dfltExp);\n         return getDataType(origKey) + SEPARATOR + getServiceName(origKey) + SEPARATOR + getServiceType(origKey) + SEPARATOR\n-                + getServiceLocation(proxyKey) + (newExp > -1 ? (DOLLAR + newExp) : \"\");\n+          + getServiceLocation(proxyKey) + (newExp > -1 ? (DOLLAR + newExp) : \"\");\n     }\n \n     /**\n@@ -444,6 +443,9 @@ public class KeyManipulator implements Serializable {\n         return \"*.*.\" + IServiceProviderPlace.SPROUT_KEY + \".\" + getServiceLocation(placeKey) + DOLLAR + \"0\";\n     }\n \n-    /** This class is not meant to be instantiated. */\n-    private KeyManipulator() {}\n+    /**\n+     * This class is not meant to be instantiated.\n+     */\n+    private KeyManipulator() {\n+    }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "411",
                    "column": "1",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/5/KeyManipulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/5/KeyManipulator.java\nindex b7cf128ce46..3e8b4c799d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/5/KeyManipulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/5/KeyManipulator.java\n@@ -408,8 +408,7 @@ public class KeyManipulator implements Serializable {\n         return WILDCARD_THREE + KeyManipulator.getServiceHostURL(key) + \"DirectoryPlace\";\n     }\n \n-\n-    public static String getHostMatchKey(final String key) {\n+public static String getHostMatchKey(final String key) {\n         return WILDCARD_THREE + KeyManipulator.getServiceHostURL(key) + \"*\";\n     }\n \n@@ -445,5 +444,6 @@ public class KeyManipulator implements Serializable {\n     }\n \n     /** This class is not meant to be instantiated. */\n-    private KeyManipulator() {}\n-}\n+    private KeyManipulator() {\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "185",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "column": "20",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "column": "16",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "440",
                    "severity": "warning",
                    "message": "Line is longer than 170 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/5/KeyManipulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/5/KeyManipulator.java\nindex b7cf128ce46..f3f35de35f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/5/KeyManipulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/5/KeyManipulator.java\n@@ -1,7 +1,6 @@\n package emissary.directory;\n \n import java.io.Serializable;\n-\n import emissary.place.IServiceProviderPlace;\n \n /**\n@@ -61,24 +60,34 @@ import emissary.place.IServiceProviderPlace;\n  * </table>\n  *\n  */\n+\n+\n public class KeyManipulator implements Serializable {\n \n     // Serializable\n+\n     static final long serialVersionUID = 2456659383313218695L;\n \n     /**\n      * How we separate portions of the key\n      */\n+\n     public static final char SEPARATOR = '.';\n+\n     public static final char HOSTSEPARATOR = ':';\n+\n     public static final char CLASSSEPARATOR = '/';\n+\n     public static final String DOLLAR = \"$\";\n+\n     public static final String DATAIDSEPARATOR = \"::\";\n+\n     public static final String WILDCARD_THREE = \"*.*.*.\";\n \n     /**\n      * How many portions (separated by SEPARATOR) are in a complete key\n      */\n+\n     public static final int NUMTUPLES = 4;\n \n     private static final String doubleSlash = \"//\";\n@@ -91,6 +100,7 @@ public class KeyManipulator implements Serializable {\n      * @param serviceType the third part of the key\n      * @param serviceLocation the fourth part of the key\n      */\n+\n     public static String makeKey(final String dataType, final String serviceName, final String serviceType, final String serviceLocation) {\n         return dataType + SEPARATOR + serviceName + SEPARATOR + serviceType + SEPARATOR + serviceLocation;\n     }\n@@ -98,19 +108,22 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Return the data type field from a dictionary formatted key.\n      */\n+\n+\n     public static String getDataType(final String key) {\n         final int firstSeparator = key.indexOf(SEPARATOR);\n-\n         if (firstSeparator >= 0) {\n             return key.substring(0, firstSeparator);\n         }\n         return \"\";\n     }\n \n+\n     public static String getDataID(final String key) {\n         return getDataType(key) + DATAIDSEPARATOR + getServiceType(key);\n     }\n \n+\n     public static String getServiceTypeFromDataID(final String dataid) {\n         final int pos = dataid.indexOf(DATAIDSEPARATOR);\n         if (pos > -1) {\n@@ -122,6 +135,8 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Performs wildcard (? | *) string matching for dictionary key searches.\n      */\n+\n+\n     public static boolean gmatch(final String s, final String p) {\n         return gmatch2(s.toCharArray(), p.toCharArray(), 0, 0);\n     }\n@@ -129,6 +144,8 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Performs wildcard (? | *) character array matching for dictionary key searches.\n      */\n+\n+\n     public static boolean gmatch(final char[] s, final char[] p) {\n         return gmatch2(s, p, 0, 0);\n     }\n@@ -141,6 +158,7 @@ public class KeyManipulator implements Serializable {\n         if (s.length == spos) {\n             return false;\n         }\n+\n         final char scc = s[spos];\n         final char c = p[ppos];\n         if (c == '?') {\n@@ -153,6 +171,7 @@ public class KeyManipulator implements Serializable {\n             if (p.length == ppos2) {\n                 return true;\n             }\n+\n             int spos2 = spos;\n             while (s.length > ++spos2) {\n                 if (p[ppos2] == s[spos2]) {\n@@ -163,10 +182,10 @@ public class KeyManipulator implements Serializable {\n             }\n             return false;\n         } else if (c == scc) {\n-            return gmatch2(s, p, spos + 1, ppos + 1);\n-        } else {\n-            return false;\n-        }\n+                   return gmatch2(s, p, spos + 1, ppos + 1);\n+               } else {\n+                   return false;\n+               }\n     }\n \n     /**\n@@ -175,6 +194,8 @@ public class KeyManipulator implements Serializable {\n      *\n      * @param key the key to check\n      */\n+\n+\n     public static boolean isKeyComplete(final String key) {\n         if (numTuplesInKey(key) < KeyManipulator.NUMTUPLES) {\n             return false;\n@@ -188,10 +209,11 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Return the number of tuples in the Key passed in\n      */\n+\n+\n     public static int numTuplesInKey(final String key) {\n         int count = 0;\n         final byte[] keyBytes = key.getBytes();\n-\n         for (int i = 0; i < keyBytes.length; i++) {\n             if (keyBytes[i] == KeyManipulator.SEPARATOR) {\n                 count++;\n@@ -212,6 +234,8 @@ public class KeyManipulator implements Serializable {\n      * @param key the putative key\n      * @return true if key is valid\n      */\n+\n+\n     public static boolean isValid(final String key) {\n         return (key != null) && (numTuplesInKey(key) == 4);\n     }\n@@ -219,10 +243,11 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Returns the class name from a dictionary formatted key\n      */\n+\n+\n     public static String getServiceClassname(final String key) {\n         final String location = getServiceLocation(key);\n         final int sep = location.lastIndexOf(CLASSSEPARATOR);\n-\n         if (sep >= 0) {\n             return location.substring(sep + 1);\n         }\n@@ -232,13 +257,13 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Returns the hostname:port from a dictionary formatted key\n      */\n+\n+\n     public static String getServiceHost(final String key) {\n         final String location = getServiceLocation(key);\n         final int ds = location.indexOf(doubleSlash);\n-\n         if (ds > -1) {\n             final int cs = location.indexOf(CLASSSEPARATOR, ds + 2);\n-\n             if (cs > -1) {\n                 return location.substring(ds + 2, cs);\n             }\n@@ -250,10 +275,11 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Returns the protocol://hostname:port/ from a dictionary formatted key\n      */\n+\n+\n     public static String getServiceHostURL(final String key) {\n         final String location = getServiceLocation(key);\n         final int ds = location.lastIndexOf(CLASSSEPARATOR);\n-\n         if (ds > -1) {\n             return location.substring(0, ds + 1);\n         }\n@@ -267,6 +293,8 @@ public class KeyManipulator implements Serializable {\n      * @param k2 key for second place\n      * @return true if local to each other\n      */\n+\n+\n     public static boolean isLocalTo(final String k1, final String k2) {\n         return getServiceHostURL(k1).equals(getServiceHostURL(k2));\n     }\n@@ -274,12 +302,13 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Returns the service location (host:port/className) field from a dictionary formatted key.\n      */\n+\n+\n     public static String getServiceLocation(final String key) {\n         final int firstSeparator = key.indexOf(SEPARATOR);\n         final int secondSeparator = key.indexOf(SEPARATOR, firstSeparator + 1);\n         final int thirdSeparator = key.indexOf(SEPARATOR, secondSeparator + 1);\n         final int fourthSeparator = key.indexOf(DOLLAR, thirdSeparator + 1);\n-\n         if ((thirdSeparator >= 0)) {\n             if (fourthSeparator > 0) {\n                 return key.substring(thirdSeparator + 1, fourthSeparator);\n@@ -292,10 +321,13 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Return the expense of the service\n      */\n+\n+\n     public static int getExpense(final String key) {\n         return getExpense(key, -1);\n     }\n \n+\n     public static int getExpense(final String key, final int dflt) {\n         final int pos = key.lastIndexOf(DOLLAR);\n         int expense = dflt;\n@@ -303,6 +335,7 @@ public class KeyManipulator implements Serializable {\n             expense = Integer.parseInt(key.substring(pos + 1));\n         } catch (NumberFormatException e) {\n             // It's optional...\n+\n         }\n         return expense;\n     }\n@@ -310,15 +343,15 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Add expense record onto a key\n      */\n+\n+\n     public static String addExpense(final String key, final int expense) {\n         if (getExpense(key, -99) == expense) {\n             return key;\n         }\n-\n         if (key.indexOf(DOLLAR) > -1) {\n             return key.substring(0, key.lastIndexOf(DOLLAR) + 1) + expense;\n         }\n-\n         return key + DOLLAR + expense;\n     }\n \n@@ -328,6 +361,8 @@ public class KeyManipulator implements Serializable {\n      * @param key any key\n      * @return the modified key\n      */\n+\n+\n     public static String removeExpense(final String key) {\n         final int pos = key.indexOf(DOLLAR);\n         if (pos != -1) {\n@@ -339,10 +374,11 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Returns the service name field from a dictionary formatted key.\n      */\n+\n+\n     public static String getServiceName(final String key) {\n         final int firstSeparator = key.indexOf(SEPARATOR);\n         final int secondSeparator = key.indexOf(SEPARATOR, firstSeparator + 1);\n-\n         if ((firstSeparator >= 0) && (secondSeparator >= 0)) {\n             return key.substring(firstSeparator + 1, secondSeparator);\n         }\n@@ -352,11 +388,12 @@ public class KeyManipulator implements Serializable {\n     /**\n      * Returns the service type field from a dictionary formatted key.\n      */\n+\n+\n     public static String getServiceType(final String key) {\n         final int firstSeparator = key.indexOf(SEPARATOR);\n         final int secondSeparator = key.indexOf(SEPARATOR, firstSeparator + 1);\n         final int thirdSeparator = key.indexOf(SEPARATOR, secondSeparator + 1);\n-\n         if ((secondSeparator >= 0) && (thirdSeparator >= 0)) {\n             return key.substring(secondSeparator + 1, thirdSeparator);\n         }\n@@ -370,6 +407,8 @@ public class KeyManipulator implements Serializable {\n      * @param to the key we went to\n      * @return the &quot;to&quot; key with remote overhead or as it was\n      */\n+\n+\n     public static String addRemoteCostIfMoved(final String from, final String to) {\n \n         // If no move, just return the \"to\" key\n@@ -390,13 +429,15 @@ public class KeyManipulator implements Serializable {\n      * @return a key with the original data type, service type and service name and expense but the new place location from\n      *         proxyKey\n      */\n+\n+\n     public static String makeProxyKey(final String origKey, final String proxyKey, final int dfltExp) {\n         if (isLocalTo(origKey, proxyKey) && dfltExp > -1) {\n             return addExpense(origKey, getExpense(origKey, dfltExp));\n         }\n+\n         final int newExp = getExpense(origKey, dfltExp);\n-        return getDataType(origKey) + SEPARATOR + getServiceName(origKey) + SEPARATOR + getServiceType(origKey) + SEPARATOR\n-                + getServiceLocation(proxyKey) + (newExp > -1 ? (DOLLAR + newExp) : \"\");\n+        return getDataType(origKey) + SEPARATOR + getServiceName(origKey) + SEPARATOR + getServiceType(origKey) + SEPARATOR + getServiceLocation(proxyKey) + (newExp > -1 ? (DOLLAR + newExp) : \"\");\n     }\n \n     /**\n@@ -404,6 +445,8 @@ public class KeyManipulator implements Serializable {\n      *\n      * @param key the key of the place to find a directory for\n      */\n+\n+\n     public static String getDefaultDirectoryKey(final String key) {\n         return WILDCARD_THREE + KeyManipulator.getServiceHostURL(key) + \"DirectoryPlace\";\n     }\n@@ -413,15 +456,14 @@ public class KeyManipulator implements Serializable {\n         return WILDCARD_THREE + KeyManipulator.getServiceHostURL(key) + \"*\";\n     }\n \n+\n     public static void main(final String[] argv) {\n         String temp = \"UNKNOWN.place.ID.tcp://host.domain.com:8001/thePlace$5050\";\n         String pat = \"UNKNOWN.place.*\";\n-\n         if (argv.length > 1) {\n             temp = argv[0];\n             pat = argv[1];\n         }\n-\n         if (gmatch(temp, pat)) {\n             System.out.println(\"***matched --> \" + temp);\n             System.out.println(\"ServiceType: \" + getServiceType(temp));\n@@ -440,10 +482,14 @@ public class KeyManipulator implements Serializable {\n         }\n     }\n \n+\n     public static String makeSproutKey(final String placeKey) {\n         return \"*.*.\" + IServiceProviderPlace.SPROUT_KEY + \".\" + getServiceLocation(placeKey) + DOLLAR + \"0\";\n     }\n \n     /** This class is not meant to be instantiated. */\n-    private KeyManipulator() {}\n-}\n+\n+    private KeyManipulator() {\n+\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "448",
                    "column": "31",
                    "severity": "warning",
                    "message": "'}' at column 31 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "448",
                    "column": "31",
                    "severity": "warning",
                    "message": "'}' at column 31 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}