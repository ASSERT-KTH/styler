{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2686",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "295",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "366",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "366",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "379",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "385",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "390",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "434",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "467",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "483",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "486",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2686/HighAvailabilityModeSwitcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2686/HighAvailabilityModeSwitcher.java\nindex c03f07965f6..01b8d44ef4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2686/HighAvailabilityModeSwitcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2686/HighAvailabilityModeSwitcher.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.cluster.modeswitch;\n \n import java.net.URI;\n@@ -61,468 +62,456 @@ import static org.neo4j.helpers.Uris.parameter;\n  */\n public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListener, BindingListener, Lifecycle\n {\n-    public static final String MASTER = \"master\";\n-    public static final String SLAVE = \"slave\";\n-    public static final String UNKNOWN = \"UNKNOWN\";\n-\n-    public static final String INADDR_ANY = \"0.0.0.0\";\n-\n-    private final ComponentSwitcher componentSwitcher;\n-\n-    private volatile URI masterHaURI;\n-    private volatile URI slaveHaURI;\n-    private CancellationHandle cancellationHandle; // guarded by synchronized in startModeSwitching()\n-\n-    public static InstanceId getServerId( URI haUri )\n+  public static final String MASTER = \"master\";\n+  public static final String SLAVE = \"slave\";\n+  public static final String UNKNOWN = \"UNKNOWN\";\n+\n+  public static final String INADDR_ANY = \"0.0.0.0\";\n+\n+  private final ComponentSwitcher componentSwitcher;\n+\n+  private volatile URI masterHaURI;\n+  private volatile URI slaveHaURI;\n+  private CancellationHandle cancellationHandle; // guarded by synchronized in startModeSwitching()\n+\n+  public static InstanceId getServerId(URI haUri)\n+  {\n+    // Get serverId parameter, default to -1 if it is missing, and parse to integer\n+    String serverIdParam = parameter(\"serverId\").apply(haUri);\n+    return INSTANCE_ID.apply(serverIdParam != null ? serverIdParam : \"-1\");\n+  }\n+\n+  private URI availableMasterId;\n+\n+  private SwitchToSlave switchToSlave;\n+  private SwitchToMaster switchToMaster;\n+  private final Election election;\n+  private final ClusterMemberAvailability clusterMemberAvailability;\n+  private final ClusterClient clusterClient;\n+  private final Supplier<StoreId> storeIdSupplier;\n+  private final InstanceId instanceId;\n+\n+  private final Log msgLog;\n+  private final Log userLog;\n+\n+  private LifeSupport haCommunicationLife;\n+\n+  private ScheduledExecutorService modeSwitcherExecutor;\n+  private volatile URI me;\n+  private volatile Future<?> modeSwitcherFuture;\n+  private volatile HighAvailabilityMemberState currentTargetState;\n+  private final AtomicBoolean canAskForElections = new AtomicBoolean(true);\n+  private final DataSourceManager neoStoreDataSourceSupplier;\n+\n+  public HighAvailabilityModeSwitcher(SwitchToSlave switchToSlave,\n+                                      SwitchToMaster switchToMaster,\n+                                      Election election,\n+                                      ClusterMemberAvailability clusterMemberAvailability,\n+                                      ClusterClient clusterClient,\n+                                      Supplier<StoreId> storeIdSupplier,\n+                                      InstanceId instanceId,\n+                                      ComponentSwitcher componentSwitcher,\n+                                      DataSourceManager neoStoreDataSourceSupplier,\n+                                      LogService logService)\n+  {\n+    this.switchToSlave = switchToSlave;\n+    this.switchToMaster = switchToMaster;\n+    this.election = election;\n+    this.clusterMemberAvailability = clusterMemberAvailability;\n+    this.clusterClient = clusterClient;\n+    this.storeIdSupplier = storeIdSupplier;\n+    this.instanceId = instanceId;\n+    this.componentSwitcher = componentSwitcher;\n+    this.msgLog = logService.getInternalLog(getClass());\n+    this.userLog = logService.getUserLog(getClass());\n+    this.neoStoreDataSourceSupplier = neoStoreDataSourceSupplier;\n+    this.haCommunicationLife = new LifeSupport();\n+  }\n+\n+  @Override\n+  public void listeningAt(URI myUri)\n+  {\n+    me = myUri;\n+  }\n+\n+  @Override\n+  public synchronized void init()\n+  {\n+    modeSwitcherExecutor = createExecutor();\n+\n+    haCommunicationLife.init();\n+  }\n+\n+  @Override\n+  public synchronized void start()\n+  {\n+    haCommunicationLife.start();\n+  }\n+\n+  @Override\n+  public synchronized void stop()\n+  {\n+    haCommunicationLife.stop();\n+  }\n+\n+  @Override\n+  public synchronized void shutdown() throws Throwable\n+  {\n+    modeSwitcherExecutor.shutdown();\n+\n+    modeSwitcherExecutor.awaitTermination(60, TimeUnit.SECONDS);\n+\n+    haCommunicationLife.shutdown();\n+\n+    switchToMaster.close();\n+    switchToMaster = null;\n+    switchToSlave = null;\n+  }\n+\n+  @Override\n+  public void masterIsElected(HighAvailabilityMemberChangeEvent event)\n+  {\n+    if (event.getNewState() == event.getOldState() && event.getOldState() == HighAvailabilityMemberState.MASTER)\n     {\n-        // Get serverId parameter, default to -1 if it is missing, and parse to integer\n-        String serverIdParam = parameter( \"serverId\" ).apply( haUri );\n-        return INSTANCE_ID.apply( serverIdParam != null ? serverIdParam : \"-1\" );\n-    }\n-\n-    private URI availableMasterId;\n-\n-    private SwitchToSlave switchToSlave;\n-    private SwitchToMaster switchToMaster;\n-    private final Election election;\n-    private final ClusterMemberAvailability clusterMemberAvailability;\n-    private final ClusterClient clusterClient;\n-    private final Supplier<StoreId> storeIdSupplier;\n-    private final InstanceId instanceId;\n-\n-    private final Log msgLog;\n-    private final Log userLog;\n-\n-    private LifeSupport haCommunicationLife;\n-\n-    private ScheduledExecutorService modeSwitcherExecutor;\n-    private volatile URI me;\n-    private volatile Future<?> modeSwitcherFuture;\n-    private volatile HighAvailabilityMemberState currentTargetState;\n-    private final AtomicBoolean canAskForElections = new AtomicBoolean( true );\n-    private final DataSourceManager neoStoreDataSourceSupplier;\n-\n-    public HighAvailabilityModeSwitcher( SwitchToSlave switchToSlave,\n-                                         SwitchToMaster switchToMaster,\n-                                         Election election,\n-                                         ClusterMemberAvailability clusterMemberAvailability,\n-                                         ClusterClient clusterClient,\n-                                         Supplier<StoreId> storeIdSupplier,\n-                                         InstanceId instanceId,\n-                                         ComponentSwitcher componentSwitcher,\n-                                         DataSourceManager neoStoreDataSourceSupplier,\n-                                         LogService logService )\n+      clusterMemberAvailability.memberIsAvailable(MASTER, masterHaURI, storeIdSupplier.get());\n+    } else\n     {\n-        this.switchToSlave = switchToSlave;\n-        this.switchToMaster = switchToMaster;\n-        this.election = election;\n-        this.clusterMemberAvailability = clusterMemberAvailability;\n-        this.clusterClient = clusterClient;\n-        this.storeIdSupplier = storeIdSupplier;\n-        this.instanceId = instanceId;\n-        this.componentSwitcher = componentSwitcher;\n-        this.msgLog = logService.getInternalLog( getClass() );\n-        this.userLog = logService.getUserLog( getClass() );\n-        this.neoStoreDataSourceSupplier = neoStoreDataSourceSupplier;\n-        this.haCommunicationLife = new LifeSupport();\n+      stateChanged(event);\n     }\n+  }\n \n-    @Override\n-    public void listeningAt( URI myUri )\n+  @Override\n+  public void masterIsAvailable(HighAvailabilityMemberChangeEvent event)\n+  {\n+    if (event.getNewState() == event.getOldState() && event.getOldState() == HighAvailabilityMemberState.SLAVE)\n     {\n-        me = myUri;\n-    }\n-\n-    @Override\n-    public synchronized void init()\n+      clusterMemberAvailability.memberIsAvailable(SLAVE, slaveHaURI, storeIdSupplier.get());\n+    } else\n     {\n-        modeSwitcherExecutor = createExecutor();\n-\n-        haCommunicationLife.init();\n+      stateChanged(event);\n     }\n-\n-    @Override\n-    public synchronized void start()\n+  }\n+\n+  @Override\n+  public void slaveIsAvailable(HighAvailabilityMemberChangeEvent event)\n+  {\n+    // ignored, we don't do any mode switching in slave available events\n+  }\n+\n+  @Override\n+  public void instanceStops(HighAvailabilityMemberChangeEvent event)\n+  {\n+    stateChanged(event);\n+  }\n+\n+  @Override\n+  public void instanceDetached(HighAvailabilityMemberChangeEvent event)\n+  {\n+    switchToDetached();\n+  }\n+\n+  public void forceElections()\n+  {\n+    if (canAskForElections.compareAndSet(true, false))\n     {\n-        haCommunicationLife.start();\n+      clusterMemberAvailability.memberIsUnavailable(HighAvailabilityModeSwitcher.SLAVE);\n+      election.performRoleElections();\n     }\n+  }\n \n-    @Override\n-    public synchronized void stop()\n+  private void stateChanged(HighAvailabilityMemberChangeEvent event)\n+  {\n+    if (event.getNewState() == event.getOldState())\n     {\n-        haCommunicationLife.stop();\n+      /*\n+       * We get here if for example a new master becomes available while we are already switching. In that case\n+       * we don't change state but we must update with the new availableMasterId, but only if it is not null.\n+       */\n+      if (event.getServerHaUri() != null)\n+      {\n+        availableMasterId = event.getServerHaUri();\n+      }\n+      return;\n     }\n \n-    @Override\n-    public synchronized void shutdown() throws Throwable\n-    {\n-        modeSwitcherExecutor.shutdown();\n-\n-        modeSwitcherExecutor.awaitTermination( 60, TimeUnit.SECONDS );\n-\n-        haCommunicationLife.shutdown();\n+    availableMasterId = event.getServerHaUri();\n \n-        switchToMaster.close();\n-        switchToMaster = null;\n-        switchToSlave = null;\n-    }\n-\n-    @Override\n-    public void masterIsElected( HighAvailabilityMemberChangeEvent event )\n+    currentTargetState = event.getNewState();\n+    switch (event.getNewState())\n     {\n-        if ( event.getNewState() == event.getOldState() && event.getOldState() == HighAvailabilityMemberState.MASTER )\n-        {\n-            clusterMemberAvailability.memberIsAvailable( MASTER, masterHaURI, storeIdSupplier.get() );\n-        }\n-        else\n-        {\n-            stateChanged( event );\n-        }\n-    }\n+      case TO_MASTER:\n \n-    @Override\n-    public void masterIsAvailable( HighAvailabilityMemberChangeEvent event )\n-    {\n-        if ( event.getNewState() == event.getOldState() && event.getOldState() == HighAvailabilityMemberState.SLAVE )\n+        if (event.getOldState().equals(HighAvailabilityMemberState.SLAVE))\n         {\n-            clusterMemberAvailability.memberIsAvailable( SLAVE, slaveHaURI, storeIdSupplier.get() );\n+          clusterMemberAvailability.memberIsUnavailable(SLAVE);\n         }\n-        else\n-        {\n-            stateChanged( event );\n-        }\n-    }\n \n-    @Override\n-    public void slaveIsAvailable( HighAvailabilityMemberChangeEvent event )\n-    {\n-        // ignored, we don't do any mode switching in slave available events\n+        switchToMaster();\n+        break;\n+      case TO_SLAVE:\n+        switchToSlave();\n+        break;\n+      case PENDING:\n+\n+        switchToPending(event.getOldState());\n+        break;\n+      default:\n+        // do nothing\n     }\n+  }\n \n-    @Override\n-    public void instanceStops( HighAvailabilityMemberChangeEvent event )\n+  private void switchToMaster()\n+  {\n+    final CancellationHandle cancellationHandle = new CancellationHandle();\n+    startModeSwitching(() ->\n     {\n-        stateChanged( event );\n-    }\n-\n-    @Override\n-    public void instanceDetached( HighAvailabilityMemberChangeEvent event )\n+      if (currentTargetState != HighAvailabilityMemberState.TO_MASTER)\n+      {\n+        return;\n+      }\n+\n+      // We just got scheduled. Maybe we are already obsolete - test\n+      if (cancellationHandle.cancellationRequested())\n+      {\n+        msgLog.info(\"Switch to master cancelled on start.\");\n+        return;\n+      }\n+\n+      componentSwitcher.switchToMaster();\n+\n+      if (cancellationHandle.cancellationRequested())\n+      {\n+        msgLog.info(\"Switch to master cancelled before ha communication started.\");\n+        return;\n+      }\n+\n+      haCommunicationLife.shutdown();\n+      haCommunicationLife = new LifeSupport();\n+\n+      try\n+      {\n+        masterHaURI = switchToMaster.switchToMaster(haCommunicationLife, me);\n+        canAskForElections.set(true);\n+      } catch (Throwable e)\n+      {\n+        msgLog.error(\"Failed to switch to master\", e);\n+        // Since this master switch failed, elect someone else\n+        election.demote(instanceId);\n+      }\n+    }, cancellationHandle);\n+  }\n+\n+  private void switchToSlave()\n+  {\n+    // Do this with a scheduler, so that if it fails, it can retry later with an exponential backoff with max\n+    // wait time.\n+    /*\n+     * This is purely defensive and should never trigger. There was a race where the switch to slave task would\n+     * start after this instance was elected master and the task would constantly try to change as slave\n+     * for itself, never cancelling. This now should not be possible, since we cancel the task and wait for it\n+     * to complete, all in a single thread executor. However, this is a check worth doing because if this\n+     * condition slips through via some other code path it can cause trouble.\n+     */\n+    if (getServerId(availableMasterId).equals(instanceId))\n     {\n-        switchToDetached();\n+      msgLog.error(\"I (\" + me + \") tried to switch to slave for myself as master (\" + availableMasterId + \")\");\n+      return;\n     }\n-\n-    public void forceElections()\n+    final AtomicLong wait = new AtomicLong();\n+    final CancellationHandle cancellationHandle = new CancellationHandle();\n+    startModeSwitching(new Runnable()\n     {\n-        if ( canAskForElections.compareAndSet( true, false ) )\n+      @Override\n+      public void run()\n+      {\n+        if (currentTargetState != HighAvailabilityMemberState.TO_SLAVE)\n         {\n-            clusterMemberAvailability.memberIsUnavailable( HighAvailabilityModeSwitcher.SLAVE );\n-            election.performRoleElections();\n+          return; // Already switched - this can happen if a second master becomes available while waiting\n         }\n-    }\n \n-    private void stateChanged( HighAvailabilityMemberChangeEvent event )\n-    {\n-        if ( event.getNewState() == event.getOldState() )\n+        if (cancellationHandle.cancellationRequested())\n         {\n-            /*\n-             * We get here if for example a new master becomes available while we are already switching. In that case\n-             * we don't change state but we must update with the new availableMasterId, but only if it is not null.\n-             */\n-            if ( event.getServerHaUri() != null )\n-            {\n-                availableMasterId = event.getServerHaUri();\n-            }\n-            return;\n+          msgLog.info(\"Switch to slave cancelled on start.\");\n+          return;\n         }\n \n-        availableMasterId = event.getServerHaUri();\n-\n-        currentTargetState = event.getNewState();\n-        switch ( event.getNewState() )\n-        {\n-            case TO_MASTER:\n-\n-                if ( event.getOldState().equals( HighAvailabilityMemberState.SLAVE ) )\n-                {\n-                    clusterMemberAvailability.memberIsUnavailable( SLAVE );\n-                }\n-\n-                switchToMaster();\n-                break;\n-            case TO_SLAVE:\n-                switchToSlave();\n-                break;\n-            case PENDING:\n-\n-                switchToPending( event.getOldState() );\n-                break;\n-            default:\n-                // do nothing\n-        }\n-    }\n+        componentSwitcher.switchToSlave();\n \n-    private void switchToMaster()\n-    {\n-        final CancellationHandle cancellationHandle = new CancellationHandle();\n-        startModeSwitching( () ->\n-        {\n-            if ( currentTargetState != HighAvailabilityMemberState.TO_MASTER )\n-            {\n-                return;\n-            }\n-\n-            // We just got scheduled. Maybe we are already obsolete - test\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to master cancelled on start.\" );\n-                return;\n-            }\n-\n-            componentSwitcher.switchToMaster();\n-\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to master cancelled before ha communication started.\" );\n-                return;\n-            }\n-\n-            haCommunicationLife.shutdown();\n-            haCommunicationLife = new LifeSupport();\n-\n-            try\n-            {\n-                masterHaURI = switchToMaster.switchToMaster( haCommunicationLife, me );\n-                canAskForElections.set( true );\n-            }\n-            catch ( Throwable e )\n-            {\n-                msgLog.error( \"Failed to switch to master\", e );\n-                // Since this master switch failed, elect someone else\n-                election.demote( instanceId );\n-            }\n-        }, cancellationHandle );\n-    }\n-\n-    private void switchToSlave()\n-    {\n-        // Do this with a scheduler, so that if it fails, it can retry later with an exponential backoff with max\n-        // wait time.\n-        /*\n-         * This is purely defensive and should never trigger. There was a race where the switch to slave task would\n-         * start after this instance was elected master and the task would constantly try to change as slave\n-         * for itself, never cancelling. This now should not be possible, since we cancel the task and wait for it\n-         * to complete, all in a single thread executor. However, this is a check worth doing because if this\n-         * condition slips through via some other code path it can cause trouble.\n-         */\n-        if ( getServerId( availableMasterId ).equals( instanceId ) )\n+        try\n         {\n-            msgLog.error( \"I (\" + me + \") tried to switch to slave for myself as master (\" + availableMasterId + \")\" );\n+          if (cancellationHandle.cancellationRequested())\n+          {\n+            msgLog.info(\"Switch to slave cancelled before ha communication started.\");\n             return;\n-        }\n-        final AtomicLong wait = new AtomicLong();\n-        final CancellationHandle cancellationHandle = new CancellationHandle();\n-        startModeSwitching( new Runnable()\n-        {\n-            @Override\n-            public void run()\n-            {\n-                if ( currentTargetState != HighAvailabilityMemberState.TO_SLAVE )\n-                {\n-                    return; // Already switched - this can happen if a second master becomes available while waiting\n-                }\n-\n-                if ( cancellationHandle.cancellationRequested() )\n-                {\n-                    msgLog.info( \"Switch to slave cancelled on start.\" );\n-                    return;\n-                }\n-\n-                componentSwitcher.switchToSlave();\n-\n-                try\n-                {\n-                    if ( cancellationHandle.cancellationRequested() )\n-                    {\n-                        msgLog.info( \"Switch to slave cancelled before ha communication started.\" );\n-                        return;\n-                    }\n-\n-                    haCommunicationLife.shutdown();\n-                    haCommunicationLife = new LifeSupport();\n-\n-                    // it is important for availableMasterId to be re-read on every attempt so that\n-                    // slave switching would not result in an infinite loop with wrong/stale availableMasterId\n-                    URI resultingSlaveHaURI = switchToSlave.switchToSlave( haCommunicationLife, me, availableMasterId, cancellationHandle );\n-                    if ( resultingSlaveHaURI == null )\n-                    {\n-                        /*\n-                         * null slave uri means the task was cancelled. The task then must simply terminate and\n-                         * have no side effects.\n-                         */\n-                        msgLog.info( \"Switch to slave is effectively cancelled\" );\n-                    }\n-                    else\n-                    {\n-                        slaveHaURI = resultingSlaveHaURI;\n-                        canAskForElections.set( true );\n-                    }\n-                }\n-                catch ( HighAvailabilityStoreFailureException e )\n-                {\n-                    userLog.error( \"UNABLE TO START UP AS SLAVE: %s\", e.getMessage() );\n-                    msgLog.error( \"Unable to start up as slave\", e );\n-\n-                    clusterMemberAvailability.memberIsUnavailable( SLAVE );\n-                    ClusterClient clusterClient = HighAvailabilityModeSwitcher.this.clusterClient;\n-                    try\n-                    {\n-                        // TODO I doubt this actually works\n-                        clusterClient.leave();\n-                        clusterClient.stop();\n-                        haCommunicationLife.shutdown();\n-                    }\n-                    catch ( Throwable t )\n-                    {\n-                        msgLog.error( \"Unable to stop cluster client\", t );\n-                    }\n-\n-                    modeSwitcherExecutor.schedule( this, 5, TimeUnit.SECONDS );\n-                }\n-                catch ( MismatchingStoreIdException e )\n-                {\n-                    // Try again immediately, the place that threw it have already treated the db\n-                    // as branched and so a new attempt will have this slave copy a new store from master.\n-                    run();\n-                }\n-                catch ( Throwable t )\n-                {\n-                    msgLog.error( \"Error while trying to switch to slave\", t );\n-\n-                    // Try again later\n-                    wait.set( 1 + wait.get() * 2 ); // Exponential backoff\n-                    wait.set( Math.min( wait.get(), 5 * 60 ) ); // Wait maximum 5 minutes\n-\n-                    modeSwitcherFuture = modeSwitcherExecutor.schedule( this, wait.get(), TimeUnit.SECONDS );\n-\n-                    msgLog.info( \"Attempting to switch to slave in %ds\", wait.get() );\n-                }\n-            }\n-        }, cancellationHandle );\n-    }\n+          }\n \n-    private void switchToPending( final HighAvailabilityMemberState oldState )\n-    {\n-        msgLog.info( \"I am %s, moving to pending\", instanceId );\n+          haCommunicationLife.shutdown();\n+          haCommunicationLife = new LifeSupport();\n \n-        startModeSwitching( () ->\n+          // it is important for availableMasterId to be re-read on every attempt so that\n+          // slave switching would not result in an infinite loop with wrong/stale availableMasterId\n+          URI resultingSlaveHaURI = switchToSlave.switchToSlave(haCommunicationLife, me, availableMasterId, cancellationHandle);\n+          if (resultingSlaveHaURI == null)\n+          {\n+            /*\n+             * null slave uri means the task was cancelled. The task then must simply terminate and\n+             * have no side effects.\n+             */\n+            msgLog.info(\"Switch to slave is effectively cancelled\");\n+          } else\n+          {\n+            slaveHaURI = resultingSlaveHaURI;\n+            canAskForElections.set(true);\n+          }\n+        } catch (HighAvailabilityStoreFailureException e)\n         {\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled on start.\" );\n-                return;\n-            }\n-\n-            componentSwitcher.switchToPending();\n-            neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n-\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled before ha communication shutdown.\" );\n-                return;\n-            }\n-\n+          userLog.error(\"UNABLE TO START UP AS SLAVE: %s\", e.getMessage());\n+          msgLog.error(\"Unable to start up as slave\", e);\n+\n+          clusterMemberAvailability.memberIsUnavailable(SLAVE);\n+          ClusterClient clusterClient = HighAvailabilityModeSwitcher.this.clusterClient;\n+          try\n+          {\n+            // TODO I doubt this actually works\n+            clusterClient.leave();\n+            clusterClient.stop();\n             haCommunicationLife.shutdown();\n-            haCommunicationLife = new LifeSupport();\n-        }, new CancellationHandle() );\n+          } catch (Throwable t)\n+          {\n+            msgLog.error(\"Unable to stop cluster client\", t);\n+          }\n \n-        try\n+          modeSwitcherExecutor.schedule(this, 5, TimeUnit.SECONDS);\n+        } catch (MismatchingStoreIdException e)\n         {\n-            modeSwitcherFuture.get( 10, TimeUnit.SECONDS );\n-        }\n-        catch ( Exception ignored )\n+          // Try again immediately, the place that threw it have already treated the db\n+          // as branched and so a new attempt will have this slave copy a new store from master.\n+          run();\n+        } catch (Throwable t)\n         {\n-        }\n-    }\n-\n-    private void switchToDetached()\n-    {\n-        msgLog.info( \"I am %s, moving to detached\", instanceId );\n+          msgLog.error(\"Error while trying to switch to slave\", t);\n \n-        startModeSwitching( () ->\n-        {\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled on start.\" );\n-                return;\n-            }\n+          // Try again later\n+          wait.set(1 + wait.get() * 2); // Exponential backoff\n+          wait.set(Math.min(wait.get(), 5 * 60)); // Wait maximum 5 minutes\n \n-            componentSwitcher.switchToSlave();\n-            neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n+          modeSwitcherFuture = modeSwitcherExecutor.schedule(this, wait.get(), TimeUnit.SECONDS);\n \n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled before ha communication shutdown.\" );\n-                return;\n-            }\n+          msgLog.info(\"Attempting to switch to slave in %ds\", wait.get());\n+        }\n+      }\n+    }, cancellationHandle);\n+  }\n \n-            haCommunicationLife.shutdown();\n-            haCommunicationLife = new LifeSupport();\n-        }, new CancellationHandle() );\n+  private void switchToPending(final HighAvailabilityMemberState oldState)\n+  {\n+    msgLog.info(\"I am %s, moving to pending\", instanceId);\n \n-        try\n-        {\n-            modeSwitcherFuture.get( 10, TimeUnit.SECONDS );\n-        }\n-        catch ( Exception e )\n-        {\n-            msgLog.warn( \"Exception received while waiting for switching to detached\", e );\n-        }\n+    startModeSwitching(() ->\n+    {\n+      if (cancellationHandle.cancellationRequested())\n+      {\n+        msgLog.info(\"Switch to pending cancelled on start.\");\n+        return;\n+      }\n+\n+      componentSwitcher.switchToPending();\n+      neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n+\n+      if (cancellationHandle.cancellationRequested())\n+      {\n+        msgLog.info(\"Switch to pending cancelled before ha communication shutdown.\");\n+        return;\n+      }\n+\n+      haCommunicationLife.shutdown();\n+      haCommunicationLife = new LifeSupport();\n+    }, new CancellationHandle());\n+\n+    try\n+    {\n+      modeSwitcherFuture.get(10, TimeUnit.SECONDS);\n+    } catch (Exception ignored)\n+    {\n     }\n+  }\n \n-    private synchronized void startModeSwitching( Runnable switcher, CancellationHandle cancellationHandle )\n-    {\n-        if ( modeSwitcherFuture != null )\n-        {\n-            // Cancel any delayed previous switching\n-            this.cancellationHandle.cancel();\n-            // Wait for it to actually stop what it was doing\n-            try\n-            {\n-                modeSwitcherFuture.get();\n-            }\n-            catch ( UnableToCopyStoreFromOldMasterException e )\n-            {\n-                throw e;\n-            }\n-            catch ( Exception e )\n-            {\n-                msgLog.warn( \"Got exception from cancelled task\", e );\n-            }\n-        }\n+  private void switchToDetached()\n+  {\n+    msgLog.info(\"I am %s, moving to detached\", instanceId);\n \n-        this.cancellationHandle = cancellationHandle;\n-        modeSwitcherFuture = modeSwitcherExecutor.submit( switcher );\n+    startModeSwitching(() ->\n+    {\n+      if (cancellationHandle.cancellationRequested())\n+      {\n+        msgLog.info(\"Switch to pending cancelled on start.\");\n+        return;\n+      }\n+\n+      componentSwitcher.switchToSlave();\n+      neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n+\n+      if (cancellationHandle.cancellationRequested())\n+      {\n+        msgLog.info(\"Switch to pending cancelled before ha communication shutdown.\");\n+        return;\n+      }\n+\n+      haCommunicationLife.shutdown();\n+      haCommunicationLife = new LifeSupport();\n+    }, new CancellationHandle());\n+\n+    try\n+    {\n+      modeSwitcherFuture.get(10, TimeUnit.SECONDS);\n+    } catch (Exception e)\n+    {\n+      msgLog.warn(\"Exception received while waiting for switching to detached\", e);\n     }\n+  }\n \n-    ScheduledExecutorService createExecutor()\n+  private synchronized void startModeSwitching(Runnable switcher, CancellationHandle cancellationHandle)\n+  {\n+    if (modeSwitcherFuture != null)\n     {\n-        return Executors.newSingleThreadScheduledExecutor( named( \"HA Mode switcher\" ) );\n+      // Cancel any delayed previous switching\n+      this.cancellationHandle.cancel();\n+      // Wait for it to actually stop what it was doing\n+      try\n+      {\n+        modeSwitcherFuture.get();\n+      } catch (UnableToCopyStoreFromOldMasterException e)\n+      {\n+        throw e;\n+      } catch (Exception e)\n+      {\n+        msgLog.warn(\"Got exception from cancelled task\", e);\n+      }\n     }\n \n-    private static class CancellationHandle implements CancellationRequest\n-    {\n-        private volatile boolean cancelled;\n+    this.cancellationHandle = cancellationHandle;\n+    modeSwitcherFuture = modeSwitcherExecutor.submit(switcher);\n+  }\n \n-        @Override\n-        public boolean cancellationRequested()\n-        {\n-            return cancelled;\n-        }\n+  ScheduledExecutorService createExecutor()\n+  {\n+    return Executors.newSingleThreadScheduledExecutor(named(\"HA Mode switcher\"));\n+  }\n \n-        public void cancel()\n-        {\n-            assert !cancelled : \"Should not cancel on the same request twice\";\n-            cancelled = true;\n-        }\n+  private static class CancellationHandle implements CancellationRequest\n+  {\n+    private volatile boolean cancelled;\n+\n+    @Override\n+    public boolean cancellationRequested()\n+    {\n+      return cancelled;\n+    }\n+\n+    public void cancel()\n+    {\n+      assert !cancelled : \"Should not cancel on the same request twice\";\n+      cancelled = true;\n     }\n+  }\n }\n",
            "diff_size": 687
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 366).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "column": "56",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "170",
                    "column": "56",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "300",
                    "column": "37",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "384",
                    "column": "41",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "385",
                    "column": "50",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "498",
                    "column": "31",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2686/HighAvailabilityModeSwitcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2686/HighAvailabilityModeSwitcher.java\nindex c03f07965f6..2bbd6877e9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2686/HighAvailabilityModeSwitcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2686/HighAvailabilityModeSwitcher.java\n@@ -27,7 +27,6 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.Supplier;\n-\n import org.neo4j.cluster.BindingListener;\n import org.neo4j.cluster.InstanceId;\n import org.neo4j.cluster.client.ClusterClient;\n@@ -48,9 +47,10 @@ import org.neo4j.kernel.impl.transaction.state.DataSourceManager;\n import org.neo4j.kernel.lifecycle.LifeSupport;\n import org.neo4j.kernel.lifecycle.Lifecycle;\n import org.neo4j.logging.Log;\n-\n import static org.neo4j.cluster.ClusterSettings.INSTANCE_ID;\n+\n import static org.neo4j.helpers.NamedThreadFactory.named;\n+\n import static org.neo4j.helpers.Uris.parameter;\n \n /**\n@@ -59,16 +59,17 @@ import static org.neo4j.helpers.Uris.parameter;\n  * {@link ClusterMemberAvailability#memberIsAvailable(String, URI, StoreId)} to announce it's new status to the\n  * cluster.\n  */\n+\n public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListener, BindingListener, Lifecycle\n {\n     public static final String MASTER = \"master\";\n+\n     public static final String SLAVE = \"slave\";\n+\n     public static final String UNKNOWN = \"UNKNOWN\";\n \n     public static final String INADDR_ANY = \"0.0.0.0\";\n-\n     private final ComponentSwitcher componentSwitcher;\n-\n     private volatile URI masterHaURI;\n     private volatile URI slaveHaURI;\n     private CancellationHandle cancellationHandle; // guarded by synchronized in startModeSwitching()\n@@ -81,7 +82,6 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     }\n \n     private URI availableMasterId;\n-\n     private SwitchToSlave switchToSlave;\n     private SwitchToMaster switchToMaster;\n     private final Election election;\n@@ -89,12 +89,9 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     private final ClusterClient clusterClient;\n     private final Supplier<StoreId> storeIdSupplier;\n     private final InstanceId instanceId;\n-\n     private final Log msgLog;\n     private final Log userLog;\n-\n     private LifeSupport haCommunicationLife;\n-\n     private ScheduledExecutorService modeSwitcherExecutor;\n     private volatile URI me;\n     private volatile Future<?> modeSwitcherFuture;\n@@ -102,16 +99,7 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     private final AtomicBoolean canAskForElections = new AtomicBoolean( true );\n     private final DataSourceManager neoStoreDataSourceSupplier;\n \n-    public HighAvailabilityModeSwitcher( SwitchToSlave switchToSlave,\n-                                         SwitchToMaster switchToMaster,\n-                                         Election election,\n-                                         ClusterMemberAvailability clusterMemberAvailability,\n-                                         ClusterClient clusterClient,\n-                                         Supplier<StoreId> storeIdSupplier,\n-                                         InstanceId instanceId,\n-                                         ComponentSwitcher componentSwitcher,\n-                                         DataSourceManager neoStoreDataSourceSupplier,\n-                                         LogService logService )\n+    public HighAvailabilityModeSwitcher( SwitchToSlave switchToSlave, SwitchToMaster switchToMaster, Election election, ClusterMemberAvailability clusterMemberAvailability, ClusterClient clusterClient, Supplier<StoreId> storeIdSupplier, InstanceId instanceId, ComponentSwitcher componentSwitcher, DataSourceManager neoStoreDataSourceSupplier, LogService logService )\n     {\n         this.switchToSlave = switchToSlave;\n         this.switchToMaster = switchToMaster;\n@@ -137,7 +125,6 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     public synchronized void init()\n     {\n         modeSwitcherExecutor = createExecutor();\n-\n         haCommunicationLife.init();\n     }\n \n@@ -157,11 +144,8 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     public synchronized void shutdown() throws Throwable\n     {\n         modeSwitcherExecutor.shutdown();\n-\n         modeSwitcherExecutor.awaitTermination( 60, TimeUnit.SECONDS );\n-\n         haCommunicationLife.shutdown();\n-\n         switchToMaster.close();\n         switchToMaster = null;\n         switchToSlave = null;\n@@ -170,7 +154,7 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     @Override\n     public void masterIsElected( HighAvailabilityMemberChangeEvent event )\n     {\n-        if ( event.getNewState() == event.getOldState() && event.getOldState() == HighAvailabilityMemberState.MASTER )\n+        if ( event.getNewState() == event.getOldState()&& event.getOldState() == HighAvailabilityMemberState.MASTER )\n         {\n             clusterMemberAvailability.memberIsAvailable( MASTER, masterHaURI, storeIdSupplier.get() );\n         }\n@@ -183,7 +167,7 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     @Override\n     public void masterIsAvailable( HighAvailabilityMemberChangeEvent event )\n     {\n-        if ( event.getNewState() == event.getOldState() && event.getOldState() == HighAvailabilityMemberState.SLAVE )\n+        if ( event.getNewState() == event.getOldState()&& event.getOldState() == HighAvailabilityMemberState.SLAVE )\n         {\n             clusterMemberAvailability.memberIsAvailable( SLAVE, slaveHaURI, storeIdSupplier.get() );\n         }\n@@ -232,31 +216,29 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n             {\n                 availableMasterId = event.getServerHaUri();\n             }\n+\n             return;\n         }\n \n         availableMasterId = event.getServerHaUri();\n-\n         currentTargetState = event.getNewState();\n         switch ( event.getNewState() )\n         {\n-            case TO_MASTER:\n-\n-                if ( event.getOldState().equals( HighAvailabilityMemberState.SLAVE ) )\n-                {\n-                    clusterMemberAvailability.memberIsUnavailable( SLAVE );\n-                }\n-\n-                switchToMaster();\n-                break;\n-            case TO_SLAVE:\n-                switchToSlave();\n-                break;\n-            case PENDING:\n+        case TO_MASTER:\n+            if ( event.getOldState().equals( HighAvailabilityMemberState.SLAVE ) )\n+            {\n+                clusterMemberAvailability.memberIsUnavailable( SLAVE );\n+            }\n \n-                switchToPending( event.getOldState() );\n-                break;\n-            default:\n+            switchToMaster();\n+            break;\n+        case TO_SLAVE:\n+            switchToSlave();\n+            break;\n+        case PENDING:\n+            switchToPending( event.getOldState() );\n+            break;\n+        default:\n                 // do nothing\n         }\n     }\n@@ -265,42 +247,41 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     {\n         final CancellationHandle cancellationHandle = new CancellationHandle();\n         startModeSwitching( () ->\n-        {\n-            if ( currentTargetState != HighAvailabilityMemberState.TO_MASTER )\n-            {\n-                return;\n-            }\n+                            {\n+                                if ( currentTargetState != HighAvailabilityMemberState.TO_MASTER )\n+                                {\n+                                    return;\n+                                }\n \n             // We just got scheduled. Maybe we are already obsolete - test\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to master cancelled on start.\" );\n-                return;\n-            }\n-\n-            componentSwitcher.switchToMaster();\n-\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to master cancelled before ha communication started.\" );\n-                return;\n-            }\n \n-            haCommunicationLife.shutdown();\n-            haCommunicationLife = new LifeSupport();\n-\n-            try\n-            {\n-                masterHaURI = switchToMaster.switchToMaster( haCommunicationLife, me );\n-                canAskForElections.set( true );\n-            }\n-            catch ( Throwable e )\n-            {\n-                msgLog.error( \"Failed to switch to master\", e );\n+                                if ( cancellationHandle.cancellationRequested() )\n+                                {\n+                                    msgLog.info( \"Switch to master cancelled on start.\" );\n+                                    return;\n+                                }\n+\n+                                componentSwitcher.switchToMaster();\n+                                if ( cancellationHandle.cancellationRequested() )\n+                                {\n+                                    msgLog.info( \"Switch to master cancelled before ha communication started.\" );\n+                                    return;\n+                                }\n+\n+                                haCommunicationLife.shutdown();\n+                                haCommunicationLife = new LifeSupport();\n+                                try\n+                                {\n+                                    masterHaURI = switchToMaster.switchToMaster( haCommunicationLife, me );\n+                                    canAskForElections.set( true );\n+                                }\n+                                catch ( Throwable e )\n+                                {\n+                                    msgLog.error( \"Failed to switch to master\", e );\n                 // Since this master switch failed, elect someone else\n-                election.demote( instanceId );\n-            }\n-        }, cancellationHandle );\n+                                    election.demote( instanceId );\n+                                }\n+                            }, cancellationHandle );\n     }\n \n     private void switchToSlave()\n@@ -316,125 +297,121 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n          */\n         if ( getServerId( availableMasterId ).equals( instanceId ) )\n         {\n-            msgLog.error( \"I (\" + me + \") tried to switch to slave for myself as master (\" + availableMasterId + \")\" );\n+            msgLog.error( \"I (\" + me+ \") tried to switch to slave for myself as master (\" + availableMasterId + \")\" );\n             return;\n         }\n+\n         final AtomicLong wait = new AtomicLong();\n         final CancellationHandle cancellationHandle = new CancellationHandle();\n         startModeSwitching( new Runnable()\n+{\n+    @Override\n+    public void run()\n+    {\n+        if ( currentTargetState != HighAvailabilityMemberState.TO_SLAVE )\n         {\n-            @Override\n-            public void run()\n-            {\n-                if ( currentTargetState != HighAvailabilityMemberState.TO_SLAVE )\n-                {\n-                    return; // Already switched - this can happen if a second master becomes available while waiting\n-                }\n-\n-                if ( cancellationHandle.cancellationRequested() )\n-                {\n-                    msgLog.info( \"Switch to slave cancelled on start.\" );\n-                    return;\n-                }\n+            return; // Already switched - this can happen if a second master becomes available while waiting\n+        }\n \n-                componentSwitcher.switchToSlave();\n+        if ( cancellationHandle.cancellationRequested() )\n+        {\n+            msgLog.info( \"Switch to slave cancelled on start.\" );\n+            return;\n+        }\n \n-                try\n-                {\n-                    if ( cancellationHandle.cancellationRequested() )\n-                    {\n-                        msgLog.info( \"Switch to slave cancelled before ha communication started.\" );\n-                        return;\n-                    }\n+        componentSwitcher.switchToSlave();\n+        try\n+        {\n+            if ( cancellationHandle.cancellationRequested() )\n+            {\n+                msgLog.info( \"Switch to slave cancelled before ha communication started.\" );\n+                return;\n+            }\n \n-                    haCommunicationLife.shutdown();\n-                    haCommunicationLife = new LifeSupport();\n+            haCommunicationLife.shutdown();\n+            haCommunicationLife = new LifeSupport();\n \n                     // it is important for availableMasterId to be re-read on every attempt so that\n                     // slave switching would not result in an infinite loop with wrong/stale availableMasterId\n-                    URI resultingSlaveHaURI = switchToSlave.switchToSlave( haCommunicationLife, me, availableMasterId, cancellationHandle );\n-                    if ( resultingSlaveHaURI == null )\n-                    {\n+            URI resultingSlaveHaURI = switchToSlave.switchToSlave( haCommunicationLife, me, availableMasterId, cancellationHandle );\n+            if ( resultingSlaveHaURI == null )\n+            {\n                         /*\n                          * null slave uri means the task was cancelled. The task then must simply terminate and\n                          * have no side effects.\n                          */\n-                        msgLog.info( \"Switch to slave is effectively cancelled\" );\n-                    }\n-                    else\n-                    {\n-                        slaveHaURI = resultingSlaveHaURI;\n-                        canAskForElections.set( true );\n-                    }\n-                }\n-                catch ( HighAvailabilityStoreFailureException e )\n-                {\n-                    userLog.error( \"UNABLE TO START UP AS SLAVE: %s\", e.getMessage() );\n-                    msgLog.error( \"Unable to start up as slave\", e );\n-\n-                    clusterMemberAvailability.memberIsUnavailable( SLAVE );\n-                    ClusterClient clusterClient = HighAvailabilityModeSwitcher.this.clusterClient;\n-                    try\n-                    {\n+                msgLog.info( \"Switch to slave is effectively cancelled\" );\n+            }\n+            else\n+            {\n+                slaveHaURI = resultingSlaveHaURI;\n+                canAskForElections.set( true );\n+            }\n+        }\n+        catch ( HighAvailabilityStoreFailureException e )\n+        {\n+            userLog.error( \"UNABLE TO START UP AS SLAVE: %s\", e.getMessage() );\n+            msgLog.error( \"Unable to start up as slave\", e );\n+            clusterMemberAvailability.memberIsUnavailable( SLAVE );\n+            ClusterClient clusterClient = HighAvailabilityModeSwitcher.this.clusterClient;\n+            try\n+            {\n                         // TODO I doubt this actually works\n-                        clusterClient.leave();\n-                        clusterClient.stop();\n-                        haCommunicationLife.shutdown();\n-                    }\n-                    catch ( Throwable t )\n-                    {\n-                        msgLog.error( \"Unable to stop cluster client\", t );\n-                    }\n-\n-                    modeSwitcherExecutor.schedule( this, 5, TimeUnit.SECONDS );\n-                }\n-                catch ( MismatchingStoreIdException e )\n-                {\n+                clusterClient.leave();\n+                clusterClient.stop();\n+                haCommunicationLife.shutdown();\n+            }\n+            catch ( Throwable t )\n+            {\n+                msgLog.error( \"Unable to stop cluster client\", t );\n+            }\n+\n+            modeSwitcherExecutor.schedule( this, 5, TimeUnit.SECONDS );\n+        }\n+\n+            catch ( MismatchingStoreIdException e )\n+            {\n                     // Try again immediately, the place that threw it have already treated the db\n                     // as branched and so a new attempt will have this slave copy a new store from master.\n-                    run();\n-                }\n-                catch ( Throwable t )\n-                {\n-                    msgLog.error( \"Error while trying to switch to slave\", t );\n-\n-                    // Try again later\n-                    wait.set( 1 + wait.get() * 2 ); // Exponential backoff\n-                    wait.set( Math.min( wait.get(), 5 * 60 ) ); // Wait maximum 5 minutes\n+                run();\n+            }\n \n-                    modeSwitcherFuture = modeSwitcherExecutor.schedule( this, wait.get(), TimeUnit.SECONDS );\n+            catch ( Throwable t )\n+            {\n+                msgLog.error( \"Error while trying to switch to slave\", t );\n \n-                    msgLog.info( \"Attempting to switch to slave in %ds\", wait.get() );\n-                }\n+                    // Try again later\n+                wait.set( 1 + wait.get()* 2 ); // Exponential backoff\n+                wait.set( Math.min( wait.get(), 5* 60 ) ); // Wait maximum 5 minutes\n+                modeSwitcherFuture = modeSwitcherExecutor.schedule( this, wait.get(), TimeUnit.SECONDS );\n+                msgLog.info( \"Attempting to switch to slave in %ds\", wait.get() );\n             }\n-        }, cancellationHandle );\n+    }\n+}, cancellationHandle );\n     }\n \n     private void switchToPending( final HighAvailabilityMemberState oldState )\n     {\n         msgLog.info( \"I am %s, moving to pending\", instanceId );\n-\n         startModeSwitching( () ->\n-        {\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled on start.\" );\n-                return;\n-            }\n-\n-            componentSwitcher.switchToPending();\n-            neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n-\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled before ha communication shutdown.\" );\n-                return;\n-            }\n-\n-            haCommunicationLife.shutdown();\n-            haCommunicationLife = new LifeSupport();\n-        }, new CancellationHandle() );\n-\n+                            {\n+                                if ( cancellationHandle.cancellationRequested() )\n+                                {\n+                                    msgLog.info( \"Switch to pending cancelled on start.\" );\n+                                    return;\n+                                }\n+\n+                                componentSwitcher.switchToPending();\n+                                neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n+                                if ( cancellationHandle.cancellationRequested() )\n+                                {\n+                                    msgLog.info( \"Switch to pending cancelled before ha communication shutdown.\" );\n+                                    return;\n+                                }\n+\n+                                haCommunicationLife.shutdown();\n+                                haCommunicationLife = new LifeSupport();\n+                            }, new CancellationHandle() );\n         try\n         {\n             modeSwitcherFuture.get( 10, TimeUnit.SECONDS );\n@@ -447,28 +424,25 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     private void switchToDetached()\n     {\n         msgLog.info( \"I am %s, moving to detached\", instanceId );\n-\n         startModeSwitching( () ->\n-        {\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled on start.\" );\n-                return;\n-            }\n-\n-            componentSwitcher.switchToSlave();\n-            neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n-\n-            if ( cancellationHandle.cancellationRequested() )\n-            {\n-                msgLog.info( \"Switch to pending cancelled before ha communication shutdown.\" );\n-                return;\n-            }\n-\n-            haCommunicationLife.shutdown();\n-            haCommunicationLife = new LifeSupport();\n-        }, new CancellationHandle() );\n-\n+                            {\n+                                if ( cancellationHandle.cancellationRequested() )\n+                                {\n+                                    msgLog.info( \"Switch to pending cancelled on start.\" );\n+                                    return;\n+                                }\n+\n+                                componentSwitcher.switchToSlave();\n+                                neoStoreDataSourceSupplier.getDataSource().beforeModeSwitch();\n+                                if ( cancellationHandle.cancellationRequested() )\n+                                {\n+                                    msgLog.info( \"Switch to pending cancelled before ha communication shutdown.\" );\n+                                    return;\n+                                }\n+\n+                                haCommunicationLife.shutdown();\n+                                haCommunicationLife = new LifeSupport();\n+                            }, new CancellationHandle() );\n         try\n         {\n             modeSwitcherFuture.get( 10, TimeUnit.SECONDS );\n@@ -494,10 +468,11 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n             {\n                 throw e;\n             }\n-            catch ( Exception e )\n-            {\n-                msgLog.warn( \"Got exception from cancelled task\", e );\n-            }\n+\n+                catch ( Exception e )\n+                {\n+                    msgLog.warn( \"Got exception from cancelled task\", e );\n+                }\n         }\n \n         this.cancellationHandle = cancellationHandle;\n@@ -512,7 +487,6 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n     private static class CancellationHandle implements CancellationRequest\n     {\n         private volatile boolean cancelled;\n-\n         @Override\n         public boolean cancellationRequested()\n         {\n@@ -521,8 +495,8 @@ public class HighAvailabilityModeSwitcher implements HighAvailabilityMemberListe\n \n         public void cancel()\n         {\n-            assert !cancelled : \"Should not cancel on the same request twice\";\n+            assert ! cancelled: \"Should not cancel on the same request twice\";\n             cancelled = true;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 235
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}