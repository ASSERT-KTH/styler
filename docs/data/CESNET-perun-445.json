{
    "project_name": "CESNET-perun",
    "error_id": "445",
    "information": {
        "errors": [
            {
                "line": "722",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t}\n\t}\n\t\n\tpublic boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n\t\ttry {\n\t\t\treturn 1 > jdbc.queryForInt(\"SELECT parent_flag\"+Compatibility.castToInteger()+\" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/445/GroupsManagerImpl.java\nindex acb491c2fed..89db247ee2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/445/GroupsManagerImpl.java\n@@ -719,7 +719,7 @@ public class GroupsManagerImpl implements GroupsManagerImplApi {\n \t\t\tthrow new InternalErrorException(e);\n \t\t}\n \t}\n-\t\n+\n \tpublic boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n \t\ttry {\n \t\t\treturn 1 > jdbc.queryForInt(\"SELECT parent_flag\"+Compatibility.castToInteger()+\" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/445/GroupsManagerImpl.java\nindex acb491c2fed..c38be33ef7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/445/GroupsManagerImpl.java\n@@ -43,6 +43,7 @@ import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n import cz.metacentrum.perun.core.blImpl.AuthzResolverBlImpl;\n import cz.metacentrum.perun.core.implApi.GroupsManagerImplApi;\n+\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -54,727 +55,740 @@ import java.util.Set;\n  */\n public class GroupsManagerImpl implements GroupsManagerImplApi {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(GroupsManagerImpl.class);\n-\n-\tpublic final static int MEMBERSGROUP = 1;\n-\tpublic final static int ADMINSGROUP = 2;\n-\tpublic final static int SUBGROUP = 3;\n-\n-\tprotected final static String groupMappingSelectQuery = \"groups.id as groups_id, groups.parent_group_id as groups_parent_group_id, groups.name as groups_name, groups.dsc as groups_dsc, \"\n-\t\t\t+ \"groups.vo_id as groups_vo_id, groups.created_at as groups_created_at, groups.created_by as groups_created_by, groups.modified_by as groups_modified_by, groups.modified_at as groups_modified_at, \"\n-\t\t\t+ \"groups.modified_by_uid as groups_modified_by_uid, groups.created_by_uid as groups_created_by_uid \";\n-\n-\t// http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate JdbcPerunTemplate jdbc;\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n-\n-\t// Group mapper\n-\tprotected static final RowMapper<Group> GROUP_MAPPER = new RowMapper<Group>() {\n-\t\tpublic Group mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tGroup g = new Group();\n-\t\t\tg.setId(rs.getInt(\"groups_id\"));\n-\t\t\t//ParentGroup with ID=0 is not supported\n-\t\t\tif(rs.getInt(\"groups_parent_group_id\") != 0) g.setParentGroupId(rs.getInt(\"groups_parent_group_id\"));\n-\t\t\telse g.setParentGroupId(null);\n-\t\t\tg.setName(rs.getString(\"groups_name\"));\n-\t\t\tg.setShortName(g.getName().substring(g.getName().lastIndexOf(\":\") + 1));\n-\t\t\tg.setDescription(rs.getString(\"groups_dsc\"));\n-\t\t\tg.setVoId(rs.getInt(\"groups_vo_id\"));\n-\t\t\tg.setCreatedAt(rs.getString(\"groups_created_at\"));\n-\t\t\tg.setCreatedBy(rs.getString(\"groups_created_by\"));\n-\t\t\tg.setModifiedAt(rs.getString(\"groups_modified_at\"));\n-\t\t\tg.setModifiedBy(rs.getString(\"groups_modified_by\"));\n-\t\t\tif(rs.getInt(\"groups_modified_by_uid\") == 0) g.setModifiedByUid(null);\n-\t\t\telse g.setModifiedByUid(rs.getInt(\"groups_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"groups_created_by_uid\") == 0) g.setCreatedByUid(null);\n-\t\t\telse g.setCreatedByUid(rs.getInt(\"groups_created_by_uid\"));\n-\t\t\treturn g;\n-\t\t}\n-\t};\n-\n-\tprivate static final RowMapper<Pair<Group, Resource>> GROUP_RESOURCE_MAPPER = new RowMapper<Pair<Group, Resource>>() {\n-\t\tpublic Pair<Group, Resource> mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tPair<Group, Resource> pair = new Pair<Group, Resource>();\n-\t\t\tpair.put(GROUP_MAPPER.mapRow(rs, i), ResourcesManagerImpl.RESOURCE_MAPPER.mapRow(rs, i));\n-\t\t\treturn pair;\n-\t\t}\n-\t};\n-\n-\t/**\n-\t * Create new instance of this class.\n-\t *\n-\t */\n-\tpublic GroupsManagerImpl(DataSource perunPool) {\n-\t\tthis.jdbc = new JdbcPerunTemplate(perunPool);\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n-\t}\n-\n-\tpublic Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, InternalErrorException {\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\t// Check if the group already exists\n-\t\tif(group.getParentGroupId() == null) {\n-\t\t\t// check if the TOP level group exists\n-\t\t\tif (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id IS NULL\", group.getName(), vo.getId())) {\n-\t\t\t\tthrow new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id is [NULL]\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\t// check if subgroup exists under parent group\n-\t\t\tif (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id=?\", group.getName(), vo.getId(), group.getParentGroupId())) {\n-\t\t\t\tthrow new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id [\" + group.getParentGroupId() + \"]\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Check the group name, it can contain only a-Z0-9_- and space\n-\t\tif (!group.getShortName().matches(\"^[- a-zA-Z.0-9_]+$\")) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name can contain only a-Z0-9.-_: and space characters. \" + group));\n-\t\t}\n-\n-\t\ttry {\n-\t\t\t// Store the group into the DB\n-\t\t\tint newId = Utils.getNewId(jdbc, \"groups_id_seq\");\n-\n-\t\t\tjdbc.update(\"insert into groups (id, parent_group_id, name, dsc, vo_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, group.getParentGroupId(),\n-\t\t\t\t\tgroup.getName(), group.getDescription(), vo.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tgroup.setId(newId);\n-\n-\t\t\tgroup.setVoId(vo.getId());\n-\n-\t\t\treturn group;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\n-\n-\tpublic String getName(int id) throws InternalErrorException {\n-\t\tList name= null;\n-\t\ttry {\n-\t\t\tname = jdbc.query(\"group.name as (with temp (name, id, parent_group_id) as ((select name, id, parent_group_id from GROUPS where parent_group_id is null) union all (select cast((temp.name + ':' + groups.name) as varchar(128)), \" +\n-\t\t\t\t\t\"groups.id, groups.parent_group_id from groups inner join temp on temp.id = groups.parent_group_id )) select name from temp where group.id = ?\"\n-\t\t\t\t\t,new RowMapper() {\n-\t\t\t\t\t\tpublic Object mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\t\treturn resultSet.getString(1);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t},id);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t\tString result=(String)name.get(0);\n-\t\treturn result;\n-\t}\n-\n-\t/*\n-\t * Create a subgroup\n-\t *\n-\t * @see cz.metacentrum.perun.core.implApi.GroupsManagerImplApi#createGroup(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, cz.metacentrum.perun.core.api.Group, cz.metacentrum.perun.core.api.Group)\n-\t */\n-\tpublic Group createGroup(PerunSession sess, Vo vo, Group parentGroup, Group group) throws GroupExistsException, InternalErrorException {\n-\t\t// Create new subGroup\n-\n-\t\tgroup.setParentGroupId(parentGroup.getId());\n-\n-\t\tgroup.setName(parentGroup.getName()+\":\"+group.getShortName());\n-\n-\t\tgroup = createGroup(sess, vo, group);\n-\n-\t\treturn group;\n-\t}\n-\n-\tpublic void deleteGroup(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupAlreadyRemovedException {\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\ttry {\n-\t\t\t// Delete group's members\n-\t\t\tjdbc.update(\"delete from groups_members where group_id=?\", group.getId());\n-\n-\t\t\t// Delete authz entries for this group\n-\t\t\tAuthzResolverBlImpl.removeAllAuthzForGroup(sess, group);\n-\n-\t\t\tint rowAffected = jdbc.update(\"delete from groups where id=?\", group.getId());\n-\t\t\tif(rowAffected == 0) throw new GroupAlreadyRemovedException(\"Group: \" + group + \" , Vo: \" + vo);\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\tpublic Group updateGroup(PerunSession sess, Group group) throws InternalErrorException {\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\t// Get the group stored in the DB\n-\t\tGroup dbGroup;\n-\t\ttry {\n-\t\t\tdbGroup = this.getGroupById(sess, group.getId());\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(\"Group existence was checked at the higher level\",e);\n-\t\t}\n-\n-\t\t// we allow only update on shortName part of name\n-\t\tif (!dbGroup.getShortName().equals(group.getShortName())) {\n-\t\t\tdbGroup.setShortName(group.getShortName());\n-\t\t\ttry {\n-\t\t\t\tjdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(),\n-\t\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (group.getDescription() != null && !group.getDescription().equals(dbGroup.getDescription())) {\n-\t\t\ttry {\n-\t\t\t\tjdbc.update(\"update groups set dsc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", group.getDescription(),\n-\t\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), group.getId());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t\tdbGroup.setDescription(group.getDescription());\n-\t\t}\n-\t\treturn dbGroup;\n-\t}\n-\n-\tpublic Group updateGroupName(PerunSession sess, Group group) throws InternalErrorException {\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\t// Get the group stored in the DB\n-\t\tGroup dbGroup;\n-\t\ttry {\n-\t\t\tdbGroup = this.getGroupById(sess, group.getId());\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(\"Group existence was checked at the higher level\",e);\n-\t\t}\n-\n-\t\tif (!dbGroup.getName().equals(group.getName())) {\n-\t\t\tdbGroup.setName(group.getName());\n-\t\t\ttry {\n-\t\t\t\tjdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(),\n-\t\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\t\treturn dbGroup;\n-\t}\n-\n-\tpublic Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=? \", GROUP_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException err) {\n-\t\t\tthrow new GroupNotExistsException(\"Group id=\" + id);\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\tpublic List<User> getGroupUsers(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from groups_members join members on members.id=member_id join \" +\n-\t\t\t\t\t\"users on members.user_id=users.id where group_id=? order by \" + Compatibility.orderByBinary(\"users.last_name\") + \", \" +\n-\t\t\t\t\tCompatibility.orderByBinary(\"users.first_name\"), UsersManagerImpl.USER_MAPPER, group.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isUserMemberOfGroup(PerunSession sess, User user, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"select count(1) from groups_members join members on members.id = member_id where members.user_id=? and groups_members.group_id=?\", user.getId(), group.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery + \" from groups_members join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\"where groups_members.group_id=?\", MembersManagerImpl.MEMBER_MAPPER, group.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Member>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group, List<Status> statuses, boolean excludeStatus) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n-\t\t\tList<Integer> statusesCodes = new ArrayList<Integer>();\n-\t\t\tfor (Status status: statuses) {\n-\t\t\t\tstatusesCodes.add(status.getCode());\n-\t\t\t}\n-\t\t\tparameters.addValue(\"statuses\", statusesCodes);\n-\t\t\tparameters.addValue(\"group_id\", group.getId());\n-\n-\t\t\tif (excludeStatus) {\n-\t\t\t\t// Exclude members with one of the status\n-\t\t\t\treturn this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery +\n-\t\t\t\t\t\t\" from groups_members join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\t\"where groups_members.group_id=:group_id and members.status\"+Compatibility.castToInteger()+\" not in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n-\t\t\t} else {\n-\t\t\t\t// Include members with one of the status\n-\t\t\t\treturn this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery +\n-\t\t\t\t\t\t\" from groups_members join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\t\"where groups_members.group_id=:group_id and members.status\"+Compatibility.castToInteger()+\" in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Member>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select  \" + groupMappingSelectQuery + \" from groups where vo_id=? order by \" +\n-\t\t\t\t\t\t\tCompatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()),\n-\t\t\t\t\tGROUP_MAPPER, vo.getId());\n-\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAssignedGroupsToResource(PerunSession perunSession, Resource resource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups join \" +\n-\t\t\t\t\t\" groups_resources on groups.id=groups_resources.group_id \" +\n-\t\t\t\t\t\" where groups_resources.resource_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, resource.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAssignedGroupsToFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups join \" +\n-\t\t\t\t\t\t\t\" groups_resources on groups.id=groups_resources.group_id \" +\n-\t\t\t\t\t\t\t\" join resources on groups_resources.resource_id=resources.id \" +\n-\t\t\t\t\t\t\t\"where resources.facility_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, facility.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.parent_group_id=? \" +\n-\t\t\t\t\t\t\t\"order by \" + Compatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()),\n-\t\t\t\t\tGROUP_MAPPER, parentGroup.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(1) from groups where parent_group_id=?\", parentGroup.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAllGroups(PerunSession sess, Vo vo)     throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where vo_id=?\", GROUP_MAPPER, vo.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\tpublic Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, ParentGroupNotExistsException {\n-\t\ttry  {\n-\t\t\treturn jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=?\",\n-\t\t\t\t\tGROUP_MAPPER, group.getParentGroupId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new ParentGroupNotExistsException(e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.name=? and groups.vo_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, name, vo.getId());\n-\t\t} catch (EmptyResultDataAccessException err) {\n-\t\t\tthrow new GroupNotExistsException(\"Group name=\" + name + \", vo id=\" + vo.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\tpublic Member addMember(PerunSession sess, Group group, Member member, MembershipType type, int sourceGroupId) throws InternalErrorException, AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tmember.setMembershipType(type);\n-\t\tmember.setSourceGroupId(sourceGroupId);\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into groups_members (group_id, member_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid, membership_type, source_group_id) \" +\n-\t\t\t\t\t\"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?,?,?)\", group.getId(),\n-\t\t\t\t\tmember.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId(), type.getCode(), sourceGroupId);\n-\t\t} catch(DuplicateKeyException ex) {\n-\t\t\tthrow new AlreadyMemberException(member);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\treturn member;\n-\n-\t}\n-\n-\tpublic List<Group> getGroupsByIds(PerunSession sess, List<Integer> groupsIds) throws InternalErrorException {\n-\t\t// If groupsIds are empty, we can immediately return empty result\n-\t\tif (groupsIds.size() == 0) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t}\n-\n-\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n-\t\tparameters.addValue(\"ids\", groupsIds);\n-\n-\t\ttry {\n-\t\t\treturn this.namedParameterJdbcTemplate.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.id in ( :ids )\",\n-\t\t\t\t\tparameters, GROUP_MAPPER);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups_members join groups on groups_members.group_id = groups.id \" +\n-\t\t\t\t\t\" where groups_members.member_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, member.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getGroupsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups \" +\n-\t\t\t\t\t\"join group_attr_values on groups.id=group_attr_values.group_id where group_attr_values.attr_id=? and \" +\n-\t\t\t\t\t\"group_attr_values.attr_value=?\",\n-\t\t\t\t\tGROUP_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Pair<Group,Resource>> getGroupResourcePairsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \", \" + ResourcesManagerImpl.resourceMappingSelectQuery +\n-\t\t\t\t\t\" from group_resource_attr_values \" +\n-\t\t\t\t\t\"join groups on groups.id=group_resource_attr_values.group_id \" +\n-\t\t\t\t\t\"join resources on resources.id=group_resource_attr_values.resource_id \" +\n-\t\t\t\t\t\"where group_resource_attr_values.attr_id=? and group_resource_attr_values.attr_value=?\",\n-\t\t\t\t\tGROUP_RESOURCE_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Pair<Group, Resource>>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=?\", group.getId(), member.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isDirectGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint count = jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=? and membership_type = ?\", group.getId(), member.getId(), MembershipType.DIRECT.getCode());\n-\t\t\tif (1 < count) throw new ConsistencyErrorException(\"There is more than one direct member in group\" + group);\n-\t\t\treturn 1 == count;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, NotGroupMemberException {\n-\t\tif (member.getSourceGroupId() == null) {\n-\t\t\tthrow new InternalErrorException(\"sourceGroupId not set for member object\");\n-\t\t}\n-\t\tint ret;\n-\t\ttry {\n-\t\t\tret = jdbc.update(\"delete from groups_members where group_id=? and source_group_id=? and member_id=?\", group.getId(), member.getSourceGroupId(), member.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif(ret == 0) {\n-\t\t\tthrow new NotGroupMemberException(member);\n-\t\t} else if(ret >= 1) {\n-\t\t\treturn;\n-\t\t} else {\n-\t\t\tthrow new ConsistencyErrorException(member + \" and \" + group + \" have \" + ret + \" rows in groups_members table\");\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tSet<User> setOfAdmins = new HashSet<User>();\n-\t\t\t// direct admins\n-\t\t\tsetOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" +\n-\t\t\t\t\t\t\"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId()));\n-\n-\t\t\t// admins through a group\n-\t\t\tList<Group> listOfGroupAdmins = getGroupAdmins(sess, group);\n-\t\t\tfor(Group authorizedGroup : listOfGroupAdmins) {\n-\t\t\t\tsetOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from users join members on users.id=members.user_id \" +\n-\t\t\t\t\t\t\t\"join groups_members on groups_members.member_id=members.id where groups_members.group_id=?\", UsersManagerImpl.USER_MAPPER, authorizedGroup.getId()));\n-\t\t\t}\n-\n-\t\t\treturn new ArrayList(setOfAdmins);\n-\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" +\n-\t\t\t\t\t\"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupAdmins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from authz join groups on authz.authorized_group_id=groups.id \" +\n-\t\t\t\t\t\"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\",\n-\t\t\t\t\tGROUP_MAPPER, group.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(1) from groups where vo_id=?\", vo.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic int getVoId(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select vo_id from groups where id=?\", group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void checkGroupExists(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException {\n-\t\tif (!groupExists(sess, group)) throw new GroupNotExistsException(\"Group \" + group);\n-\t}\n-\n-\tpublic boolean groupExists(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from groups where id=?\", group.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Gets all groups which have enabled synchronization.\n-\t *\n-\t * @param sess\n-\t * @return list of groups to synchronize\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic List<Group> getGroupsToSynchronize(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\t// Get all groups which have defined\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups, attr_names, group_attr_values \" +\n-\t\t\t\t\t\"where attr_names.attr_name=? and attr_names.id=group_attr_values.attr_id and group_attr_values.attr_value='true' and \" +\n-\t\t\t\t\t\"group_attr_values.group_id=groups.id\", GROUP_MAPPER, GroupsManager.GROUPSYNCHROENABLED_ATTRNAME);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getGroupApplicationIds(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t// get app ids for all applications\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select id from application where group_id=?\", new RowMapper<Integer>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Integer mapRow(ResultSet rs, int arg1)\n-\t\t\t\tthrows SQLException {\n-\t\t\t\treturn rs.getInt(\"id\");\n-\t\t\t\t}\n-\t\t\t},group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Pair<String, String>> getApplicationReservedLogins(Integer appId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n-\t\t\t\t\treturn new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n-\t\t\t\t}\n-\t\t\t}, appId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteGroupReservedLogins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t// remove all reserved logins first\n-\t\ttry {\n-\t\t\tfor (Integer appId : getGroupApplicationIds(sess, group)) {\n-\t\t\t\tjdbc.update(\"delete from application_reserved_logins where app_id=?\", appId);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic int getGroupsCount(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(*) from groups\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWithAssignedExtSourceInVo(PerunSession sess, ExtSource source, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery +\n-\t\t\t\t\t\" from group_ext_sources g_exts inner join groups on g_exts.group_id=groups.id \" +\n-\t\t\t\t\t\" where g_exts.ext_source_id=? and groups.vo_id=?\", GROUP_MAPPER, source.getId(), vo.getId());\n-\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupRelationDoesNotExist {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId())) {\n-\t\t\t\tthrow new GroupRelationDoesNotExist(\"Union between \" + resultGroup + \" and \" + operandGroup + \" does not exist.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeResultGroupRelations(PerunSession sess, Group resultGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ?\", resultGroup.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void saveGroupRelation(PerunSession sess, Group resultGroup, Group operandGroup, boolean parentFlag) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"INSERT INTO groups_groups(result_gid, operand_gid, created_at, created_by, \" +\n-\t\t\t\t\t\t\"modified_at, modified_by, parent_flag) VALUES(?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), parentFlag);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\t\n-\tpublic boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 > jdbc.queryForInt(\"SELECT parent_flag\"+Compatibility.castToInteger()+\" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isRelationBetweenGroups(Group group1, Group group2) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE (result_gid = ? AND operand_gid = ?) OR (result_gid = ? AND operand_gid = ?)\",\n-\t\t\t\tgroup1.getId(), group2.getId(), group2.getId(), group1.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isOneWayRelationBetweenGroups(Group resultGroup, Group operandGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getResultGroups(PerunSession sess, int groupId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" +\n-\t\t\t\t\t\"ON groups.id = groups_groups.result_gid WHERE operand_gid=?\", GROUP_MAPPER, groupId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getOperandGroups(PerunSession sess, int groupId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" +\n-\t\t\t\t\t\"ON groups.id = groups_groups.operand_gid WHERE result_gid=?\", GROUP_MAPPER, groupId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getResultGroupsIds(PerunSession sess, int groupId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForList(\"SELECT result_gid FROM groups_groups WHERE operand_gid=?\", Integer.class, groupId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(GroupsManagerImpl.class);\n+\n+    public final static int MEMBERSGROUP = 1;\n+    public final static int ADMINSGROUP = 2;\n+    public final static int SUBGROUP = 3;\n+\n+    protected final static String groupMappingSelectQuery = \"groups.id as groups_id, groups.parent_group_id as groups_parent_group_id, groups.name as groups_name, groups.dsc as groups_dsc, \"\n+            + \"groups.vo_id as groups_vo_id, groups.created_at as groups_created_at, groups.created_by as groups_created_by, groups.modified_by as groups_modified_by, groups.modified_at as groups_modified_at, \"\n+            + \"groups.modified_by_uid as groups_modified_by_uid, groups.created_by_uid as groups_created_by_uid \";\n+\n+    // http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+    private JdbcPerunTemplate jdbc;\n+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+    // Group mapper\n+    protected static final RowMapper<Group> GROUP_MAPPER = new RowMapper<Group>() {\n+        public Group mapRow(ResultSet rs, int i) throws SQLException {\n+            Group g = new Group();\n+            g.setId(rs.getInt(\"groups_id\"));\n+            //ParentGroup with ID=0 is not supported\n+            if (rs.getInt(\"groups_parent_group_id\") != 0) {\n+                g.setParentGroupId(rs.getInt(\"groups_parent_group_id\"));\n+            } else {\n+                g.setParentGroupId(null);\n+            }\n+            g.setName(rs.getString(\"groups_name\"));\n+            g.setShortName(g.getName().substring(g.getName().lastIndexOf(\":\") + 1));\n+            g.setDescription(rs.getString(\"groups_dsc\"));\n+            g.setVoId(rs.getInt(\"groups_vo_id\"));\n+            g.setCreatedAt(rs.getString(\"groups_created_at\"));\n+            g.setCreatedBy(rs.getString(\"groups_created_by\"));\n+            g.setModifiedAt(rs.getString(\"groups_modified_at\"));\n+            g.setModifiedBy(rs.getString(\"groups_modified_by\"));\n+            if (rs.getInt(\"groups_modified_by_uid\") == 0) {\n+                g.setModifiedByUid(null);\n+            } else {\n+                g.setModifiedByUid(rs.getInt(\"groups_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"groups_created_by_uid\") == 0) {\n+                g.setCreatedByUid(null);\n+            } else {\n+                g.setCreatedByUid(rs.getInt(\"groups_created_by_uid\"));\n+            }\n+            return g;\n+        }\n+    };\n+\n+    private static final RowMapper<Pair<Group, Resource>> GROUP_RESOURCE_MAPPER = new RowMapper<Pair<Group, Resource>>() {\n+        public Pair<Group, Resource> mapRow(ResultSet rs, int i) throws SQLException {\n+            Pair<Group, Resource> pair = new Pair<Group, Resource>();\n+            pair.put(GROUP_MAPPER.mapRow(rs, i), ResourcesManagerImpl.RESOURCE_MAPPER.mapRow(rs, i));\n+            return pair;\n+        }\n+    };\n+\n+    /**\n+     * Create new instance of this class.\n+     */\n+    public GroupsManagerImpl(DataSource perunPool) {\n+        this.jdbc = new JdbcPerunTemplate(perunPool);\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n+    }\n+\n+    public Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, InternalErrorException {\n+        Utils.notNull(group, \"group\");\n+        Utils.notNull(group.getName(), \"group.getName()\");\n+\n+        // Check if the group already exists\n+        if (group.getParentGroupId() == null) {\n+            // check if the TOP level group exists\n+            if (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id IS NULL\", group.getName(), vo.getId())) {\n+                throw new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id is [NULL]\");\n+            }\n+        } else {\n+            // check if subgroup exists under parent group\n+            if (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id=?\", group.getName(), vo.getId(), group.getParentGroupId())) {\n+                throw new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id [\" + group.getParentGroupId() + \"]\");\n+            }\n+        }\n+\n+        // Check the group name, it can contain only a-Z0-9_- and space\n+        if (!group.getShortName().matches(\"^[- a-zA-Z.0-9_]+$\")) {\n+            throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name can contain only a-Z0-9.-_: and space characters. \" + group));\n+        }\n+\n+        try {\n+            // Store the group into the DB\n+            int newId = Utils.getNewId(jdbc, \"groups_id_seq\");\n+\n+            jdbc.update(\"insert into groups (id, parent_group_id, name, dsc, vo_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n+                            \"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, group.getParentGroupId(),\n+                    group.getName(), group.getDescription(), vo.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+            group.setId(newId);\n+\n+            group.setVoId(vo.getId());\n+\n+            return group;\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+\n+    public String getName(int id) throws InternalErrorException {\n+        List name = null;\n+        try {\n+            name = jdbc.query(\"group.name as (with temp (name, id, parent_group_id) as ((select name, id, parent_group_id from GROUPS where parent_group_id is null) union all (select cast((temp.name + ':' + groups.name) as varchar(128)), \" +\n+                            \"groups.id, groups.parent_group_id from groups inner join temp on temp.id = groups.parent_group_id )) select name from temp where group.id = ?\"\n+                    , new RowMapper() {\n+                        public Object mapRow(ResultSet resultSet, int i) throws SQLException {\n+                            return resultSet.getString(1);\n+                        }\n+                    }, id);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+        String result = (String) name.get(0);\n+        return result;\n+    }\n+\n+    /*\n+     * Create a subgroup\n+     *\n+     * @see cz.metacentrum.perun.core.implApi.GroupsManagerImplApi#createGroup(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, cz.metacentrum.perun.core.api.Group, cz.metacentrum.perun.core.api.Group)\n+     */\n+    public Group createGroup(PerunSession sess, Vo vo, Group parentGroup, Group group) throws GroupExistsException, InternalErrorException {\n+        // Create new subGroup\n+\n+        group.setParentGroupId(parentGroup.getId());\n+\n+        group.setName(parentGroup.getName() + \":\" + group.getShortName());\n+\n+        group = createGroup(sess, vo, group);\n+\n+        return group;\n+    }\n+\n+    public void deleteGroup(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupAlreadyRemovedException {\n+        Utils.notNull(group.getName(), \"group.getName()\");\n+\n+        try {\n+            // Delete group's members\n+            jdbc.update(\"delete from groups_members where group_id=?\", group.getId());\n+\n+            // Delete authz entries for this group\n+            AuthzResolverBlImpl.removeAllAuthzForGroup(sess, group);\n+\n+            int rowAffected = jdbc.update(\"delete from groups where id=?\", group.getId());\n+            if (rowAffected == 0) {\n+                throw new GroupAlreadyRemovedException(\"Group: \" + group + \" , Vo: \" + vo);\n+            }\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    public Group updateGroup(PerunSession sess, Group group) throws InternalErrorException {\n+        Utils.notNull(group.getName(), \"group.getName()\");\n+\n+        // Get the group stored in the DB\n+        Group dbGroup;\n+        try {\n+            dbGroup = this.getGroupById(sess, group.getId());\n+        } catch (GroupNotExistsException e) {\n+            throw new InternalErrorException(\"Group existence was checked at the higher level\", e);\n+        }\n+\n+        // we allow only update on shortName part of name\n+        if (!dbGroup.getShortName().equals(group.getShortName())) {\n+            dbGroup.setShortName(group.getShortName());\n+            try {\n+                jdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(),\n+                        sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+\n+        if (group.getDescription() != null && !group.getDescription().equals(dbGroup.getDescription())) {\n+            try {\n+                jdbc.update(\"update groups set dsc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", group.getDescription(),\n+                        sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), group.getId());\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+            dbGroup.setDescription(group.getDescription());\n+        }\n+        return dbGroup;\n+    }\n+\n+    public Group updateGroupName(PerunSession sess, Group group) throws InternalErrorException {\n+        Utils.notNull(group.getName(), \"group.getName()\");\n+\n+        // Get the group stored in the DB\n+        Group dbGroup;\n+        try {\n+            dbGroup = this.getGroupById(sess, group.getId());\n+        } catch (GroupNotExistsException e) {\n+            throw new InternalErrorException(\"Group existence was checked at the higher level\", e);\n+        }\n+\n+        if (!dbGroup.getName().equals(group.getName())) {\n+            dbGroup.setName(group.getName());\n+            try {\n+                jdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(),\n+                        sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+        return dbGroup;\n+    }\n+\n+    public Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=? \", GROUP_MAPPER, id);\n+        } catch (EmptyResultDataAccessException err) {\n+            throw new GroupNotExistsException(\"Group id=\" + id);\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    public List<User> getGroupUsers(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from groups_members join members on members.id=member_id join \" +\n+                    \"users on members.user_id=users.id where group_id=? order by \" + Compatibility.orderByBinary(\"users.last_name\") + \", \" +\n+                    Compatibility.orderByBinary(\"users.first_name\"), UsersManagerImpl.USER_MAPPER, group.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public boolean isUserMemberOfGroup(PerunSession sess, User user, Group group) throws InternalErrorException {\n+        try {\n+            return 1 <= jdbc.queryForInt(\"select count(1) from groups_members join members on members.id = member_id where members.user_id=? and groups_members.group_id=?\", user.getId(), group.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery + \" from groups_members join members on members.id=groups_members.member_id \" +\n+                    \"where groups_members.group_id=?\", MembersManagerImpl.MEMBER_MAPPER, group.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Member>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Member> getGroupMembers(PerunSession sess, Group group, List<Status> statuses, boolean excludeStatus) throws InternalErrorException {\n+        try {\n+            MapSqlParameterSource parameters = new MapSqlParameterSource();\n+            List<Integer> statusesCodes = new ArrayList<Integer>();\n+            for (Status status : statuses) {\n+                statusesCodes.add(status.getCode());\n+            }\n+            parameters.addValue(\"statuses\", statusesCodes);\n+            parameters.addValue(\"group_id\", group.getId());\n+\n+            if (excludeStatus) {\n+                // Exclude members with one of the status\n+                return this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery +\n+                        \" from groups_members join members on members.id=groups_members.member_id \" +\n+                        \"where groups_members.group_id=:group_id and members.status\" + Compatibility.castToInteger() + \" not in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n+            } else {\n+                // Include members with one of the status\n+                return this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery +\n+                        \" from groups_members join members on members.id=groups_members.member_id \" +\n+                        \"where groups_members.group_id=:group_id and members.status\" + Compatibility.castToInteger() + \" in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n+            }\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Member>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select  \" + groupMappingSelectQuery + \" from groups where vo_id=? order by \" +\n+                            Compatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()),\n+                    GROUP_MAPPER, vo.getId());\n+\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Group> getAssignedGroupsToResource(PerunSession perunSession, Resource resource) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups join \" +\n+                            \" groups_resources on groups.id=groups_resources.group_id \" +\n+                            \" where groups_resources.resource_id=?\",\n+                    GROUP_MAPPER, resource.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Group> getAssignedGroupsToFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups join \" +\n+                            \" groups_resources on groups.id=groups_resources.group_id \" +\n+                            \" join resources on groups_resources.resource_id=resources.id \" +\n+                            \"where resources.facility_id=?\",\n+                    GROUP_MAPPER, facility.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.parent_group_id=? \" +\n+                            \"order by \" + Compatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()),\n+                    GROUP_MAPPER, parentGroup.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForInt(\"select count(1) from groups where parent_group_id=?\", parentGroup.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Group> getAllGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where vo_id=?\", GROUP_MAPPER, vo.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+    }\n+\n+    public Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, ParentGroupNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=?\",\n+                    GROUP_MAPPER, group.getParentGroupId());\n+        } catch (EmptyResultDataAccessException e) {\n+            throw new ParentGroupNotExistsException(e);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.name=? and groups.vo_id=?\",\n+                    GROUP_MAPPER, name, vo.getId());\n+        } catch (EmptyResultDataAccessException err) {\n+            throw new GroupNotExistsException(\"Group name=\" + name + \", vo id=\" + vo.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    public Member addMember(PerunSession sess, Group group, Member member, MembershipType type, int sourceGroupId) throws InternalErrorException, AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        member.setMembershipType(type);\n+        member.setSourceGroupId(sourceGroupId);\n+        try {\n+            jdbc.update(\"insert into groups_members (group_id, member_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid, membership_type, source_group_id) \" +\n+                            \"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?,?,?)\", group.getId(),\n+                    member.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId(), type.getCode(), sourceGroupId);\n+        } catch (DuplicateKeyException ex) {\n+            throw new AlreadyMemberException(member);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+        return member;\n+\n+    }\n+\n+    public List<Group> getGroupsByIds(PerunSession sess, List<Integer> groupsIds) throws InternalErrorException {\n+        // If groupsIds are empty, we can immediately return empty result\n+        if (groupsIds.size() == 0) {\n+            return new ArrayList<Group>();\n+        }\n+\n+        MapSqlParameterSource parameters = new MapSqlParameterSource();\n+        parameters.addValue(\"ids\", groupsIds);\n+\n+        try {\n+            return this.namedParameterJdbcTemplate.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.id in ( :ids )\",\n+                    parameters, GROUP_MAPPER);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups_members join groups on groups_members.group_id = groups.id \" +\n+                            \" where groups_members.member_id=?\",\n+                    GROUP_MAPPER, member.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Group> getGroupsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups \" +\n+                            \"join group_attr_values on groups.id=group_attr_values.group_id where group_attr_values.attr_id=? and \" +\n+                            \"group_attr_values.attr_value=?\",\n+                    GROUP_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Pair<Group, Resource>> getGroupResourcePairsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \", \" + ResourcesManagerImpl.resourceMappingSelectQuery +\n+                            \" from group_resource_attr_values \" +\n+                            \"join groups on groups.id=group_resource_attr_values.group_id \" +\n+                            \"join resources on resources.id=group_resource_attr_values.resource_id \" +\n+                            \"where group_resource_attr_values.attr_id=? and group_resource_attr_values.attr_value=?\",\n+                    GROUP_RESOURCE_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Pair<Group, Resource>>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public boolean isGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n+        try {\n+            return 1 <= jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=?\", group.getId(), member.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public boolean isDirectGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n+        try {\n+            int count = jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=? and membership_type = ?\", group.getId(), member.getId(), MembershipType.DIRECT.getCode());\n+            if (1 < count) {\n+                throw new ConsistencyErrorException(\"There is more than one direct member in group\" + group);\n+            }\n+            return 1 == count;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, NotGroupMemberException {\n+        if (member.getSourceGroupId() == null) {\n+            throw new InternalErrorException(\"sourceGroupId not set for member object\");\n+        }\n+        int ret;\n+        try {\n+            ret = jdbc.update(\"delete from groups_members where group_id=? and source_group_id=? and member_id=?\", group.getId(), member.getSourceGroupId(), member.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+        if (ret == 0) {\n+            throw new NotGroupMemberException(member);\n+        } else if (ret >= 1) {\n+            return;\n+        } else {\n+            throw new ConsistencyErrorException(member + \" and \" + group + \" have \" + ret + \" rows in groups_members table\");\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            Set<User> setOfAdmins = new HashSet<User>();\n+            // direct admins\n+            setOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" +\n+                    \"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId()));\n+\n+            // admins through a group\n+            List<Group> listOfGroupAdmins = getGroupAdmins(sess, group);\n+            for (Group authorizedGroup : listOfGroupAdmins) {\n+                setOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from users join members on users.id=members.user_id \" +\n+                        \"join groups_members on groups_members.member_id=members.id where groups_members.group_id=?\", UsersManagerImpl.USER_MAPPER, authorizedGroup.getId()));\n+            }\n+\n+            return new ArrayList(setOfAdmins);\n+\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" +\n+                    \"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Group> getGroupAdmins(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \" from authz join groups on authz.authorized_group_id=groups.id \" +\n+                            \"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\",\n+                    GROUP_MAPPER, group.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForInt(\"select count(1) from groups where vo_id=?\", vo.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public int getVoId(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForInt(\"select vo_id from groups where id=?\", group.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void checkGroupExists(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException {\n+        if (!groupExists(sess, group)) {\n+            throw new GroupNotExistsException(\"Group \" + group);\n+        }\n+    }\n+\n+    public boolean groupExists(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            return 1 == jdbc.queryForInt(\"select 1 from groups where id=?\", group.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets all groups which have enabled synchronization.\n+     *\n+     * @param sess\n+     * @return list of groups to synchronize\n+     * @throws InternalErrorException\n+     */\n+    public List<Group> getGroupsToSynchronize(PerunSession sess) throws InternalErrorException {\n+        try {\n+            // Get all groups which have defined\n+            return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups, attr_names, group_attr_values \" +\n+                    \"where attr_names.attr_name=? and attr_names.id=group_attr_values.attr_id and group_attr_values.attr_value='true' and \" +\n+                    \"group_attr_values.group_id=groups.id\", GROUP_MAPPER, GroupsManager.GROUPSYNCHROENABLED_ATTRNAME);\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Integer> getGroupApplicationIds(PerunSession sess, Group group) throws InternalErrorException {\n+        // get app ids for all applications\n+        try {\n+            return jdbc.query(\"select id from application where group_id=?\", new RowMapper<Integer>() {\n+                @Override\n+                public Integer mapRow(ResultSet rs, int arg1)\n+                        throws SQLException {\n+                    return rs.getInt(\"id\");\n+                }\n+            }, group.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Pair<String, String>> getApplicationReservedLogins(Integer appId) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n+                @Override\n+                public Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n+                    return new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n+                }\n+            }, appId);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteGroupReservedLogins(PerunSession sess, Group group) throws InternalErrorException {\n+        // remove all reserved logins first\n+        try {\n+            for (Integer appId : getGroupApplicationIds(sess, group)) {\n+                jdbc.update(\"delete from application_reserved_logins where app_id=?\", appId);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public int getGroupsCount(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForInt(\"select count(*) from groups\");\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<Group> getGroupsWithAssignedExtSourceInVo(PerunSession sess, ExtSource source, Vo vo) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + groupMappingSelectQuery +\n+                    \" from group_ext_sources g_exts inner join groups on g_exts.group_id=groups.id \" +\n+                    \" where g_exts.ext_source_id=? and groups.vo_id=?\", GROUP_MAPPER, source.getId(), vo.getId());\n+\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupRelationDoesNotExist {\n+        try {\n+            if (0 == jdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n+                    resultGroup.getId(), operandGroup.getId())) {\n+                throw new GroupRelationDoesNotExist(\"Union between \" + resultGroup + \" and \" + operandGroup + \" does not exist.\");\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeResultGroupRelations(PerunSession sess, Group resultGroup) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ?\", resultGroup.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void saveGroupRelation(PerunSession sess, Group resultGroup, Group operandGroup, boolean parentFlag) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"INSERT INTO groups_groups(result_gid, operand_gid, created_at, created_by, \" +\n+                            \"modified_at, modified_by, parent_flag) VALUES(?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\",\n+                    resultGroup.getId(), operandGroup.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), parentFlag);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n+        try {\n+            return 1 > jdbc.queryForInt(\"SELECT parent_flag\" + Compatibility.castToInteger() + \" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",\n+                    resultGroup.getId(), operandGroup.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRelationBetweenGroups(Group group1, Group group2) throws InternalErrorException {\n+        try {\n+            return 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE (result_gid = ? AND operand_gid = ?) OR (result_gid = ? AND operand_gid = ?)\",\n+                    group1.getId(), group2.getId(), group2.getId(), group1.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOneWayRelationBetweenGroups(Group resultGroup, Group operandGroup) throws InternalErrorException {\n+        try {\n+            return 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n+                    resultGroup.getId(), operandGroup.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Group> getResultGroups(PerunSession sess, int groupId) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" +\n+                    \"ON groups.id = groups_groups.result_gid WHERE operand_gid=?\", GROUP_MAPPER, groupId);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Group> getOperandGroups(PerunSession sess, int groupId) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" +\n+                    \"ON groups.id = groups_groups.operand_gid WHERE result_gid=?\", GROUP_MAPPER, groupId);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Integer> getResultGroupsIds(PerunSession sess, int groupId) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForList(\"SELECT result_gid FROM groups_groups WHERE operand_gid=?\", Integer.class, groupId);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n }\n",
            "diff_size": 737
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/445/GroupsManagerImpl.java\nindex acb491c2fed..fcfe95a91a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/445/GroupsManagerImpl.java\n@@ -4,9 +4,7 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.sql.DataSource;\n-\n import cz.metacentrum.perun.core.api.exceptions.GroupRelationDoesNotExist;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -16,7 +14,6 @@ import org.springframework.jdbc.core.JdbcPerunTemplate;\n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n-\n import cz.metacentrum.perun.core.api.BeansUtils;\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.ExtSource;\n@@ -52,729 +49,679 @@ import java.util.Set;\n  * @author Michal Prochazka michalp@ics.muni.cz\n  * @author Slavek Licehammer glory@ics.muni.cz\n  */\n+\n+\n public class GroupsManagerImpl implements GroupsManagerImplApi {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(GroupsManagerImpl.class);\n-\n-\tpublic final static int MEMBERSGROUP = 1;\n-\tpublic final static int ADMINSGROUP = 2;\n-\tpublic final static int SUBGROUP = 3;\n-\n-\tprotected final static String groupMappingSelectQuery = \"groups.id as groups_id, groups.parent_group_id as groups_parent_group_id, groups.name as groups_name, groups.dsc as groups_dsc, \"\n-\t\t\t+ \"groups.vo_id as groups_vo_id, groups.created_at as groups_created_at, groups.created_by as groups_created_by, groups.modified_by as groups_modified_by, groups.modified_at as groups_modified_at, \"\n-\t\t\t+ \"groups.modified_by_uid as groups_modified_by_uid, groups.created_by_uid as groups_created_by_uid \";\n-\n-\t// http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate JdbcPerunTemplate jdbc;\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n-\n-\t// Group mapper\n-\tprotected static final RowMapper<Group> GROUP_MAPPER = new RowMapper<Group>() {\n-\t\tpublic Group mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tGroup g = new Group();\n-\t\t\tg.setId(rs.getInt(\"groups_id\"));\n-\t\t\t//ParentGroup with ID=0 is not supported\n-\t\t\tif(rs.getInt(\"groups_parent_group_id\") != 0) g.setParentGroupId(rs.getInt(\"groups_parent_group_id\"));\n-\t\t\telse g.setParentGroupId(null);\n-\t\t\tg.setName(rs.getString(\"groups_name\"));\n-\t\t\tg.setShortName(g.getName().substring(g.getName().lastIndexOf(\":\") + 1));\n-\t\t\tg.setDescription(rs.getString(\"groups_dsc\"));\n-\t\t\tg.setVoId(rs.getInt(\"groups_vo_id\"));\n-\t\t\tg.setCreatedAt(rs.getString(\"groups_created_at\"));\n-\t\t\tg.setCreatedBy(rs.getString(\"groups_created_by\"));\n-\t\t\tg.setModifiedAt(rs.getString(\"groups_modified_at\"));\n-\t\t\tg.setModifiedBy(rs.getString(\"groups_modified_by\"));\n-\t\t\tif(rs.getInt(\"groups_modified_by_uid\") == 0) g.setModifiedByUid(null);\n-\t\t\telse g.setModifiedByUid(rs.getInt(\"groups_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"groups_created_by_uid\") == 0) g.setCreatedByUid(null);\n-\t\t\telse g.setCreatedByUid(rs.getInt(\"groups_created_by_uid\"));\n-\t\t\treturn g;\n-\t\t}\n-\t};\n-\n-\tprivate static final RowMapper<Pair<Group, Resource>> GROUP_RESOURCE_MAPPER = new RowMapper<Pair<Group, Resource>>() {\n-\t\tpublic Pair<Group, Resource> mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tPair<Group, Resource> pair = new Pair<Group, Resource>();\n-\t\t\tpair.put(GROUP_MAPPER.mapRow(rs, i), ResourcesManagerImpl.RESOURCE_MAPPER.mapRow(rs, i));\n-\t\t\treturn pair;\n-\t\t}\n-\t};\n-\n-\t/**\n-\t * Create new instance of this class.\n-\t *\n-\t */\n-\tpublic GroupsManagerImpl(DataSource perunPool) {\n-\t\tthis.jdbc = new JdbcPerunTemplate(perunPool);\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n-\t}\n-\n-\tpublic Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, InternalErrorException {\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\t// Check if the group already exists\n-\t\tif(group.getParentGroupId() == null) {\n-\t\t\t// check if the TOP level group exists\n-\t\t\tif (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id IS NULL\", group.getName(), vo.getId())) {\n-\t\t\t\tthrow new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id is [NULL]\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\t// check if subgroup exists under parent group\n-\t\t\tif (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id=?\", group.getName(), vo.getId(), group.getParentGroupId())) {\n-\t\t\t\tthrow new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id [\" + group.getParentGroupId() + \"]\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Check the group name, it can contain only a-Z0-9_- and space\n-\t\tif (!group.getShortName().matches(\"^[- a-zA-Z.0-9_]+$\")) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name can contain only a-Z0-9.-_: and space characters. \" + group));\n-\t\t}\n-\n-\t\ttry {\n-\t\t\t// Store the group into the DB\n-\t\t\tint newId = Utils.getNewId(jdbc, \"groups_id_seq\");\n-\n-\t\t\tjdbc.update(\"insert into groups (id, parent_group_id, name, dsc, vo_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, group.getParentGroupId(),\n-\t\t\t\t\tgroup.getName(), group.getDescription(), vo.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tgroup.setId(newId);\n-\n-\t\t\tgroup.setVoId(vo.getId());\n-\n-\t\t\treturn group;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\n-\n-\tpublic String getName(int id) throws InternalErrorException {\n-\t\tList name= null;\n-\t\ttry {\n-\t\t\tname = jdbc.query(\"group.name as (with temp (name, id, parent_group_id) as ((select name, id, parent_group_id from GROUPS where parent_group_id is null) union all (select cast((temp.name + ':' + groups.name) as varchar(128)), \" +\n-\t\t\t\t\t\"groups.id, groups.parent_group_id from groups inner join temp on temp.id = groups.parent_group_id )) select name from temp where group.id = ?\"\n-\t\t\t\t\t,new RowMapper() {\n-\t\t\t\t\t\tpublic Object mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\t\treturn resultSet.getString(1);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t},id);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t\tString result=(String)name.get(0);\n-\t\treturn result;\n-\t}\n-\n-\t/*\n-\t * Create a subgroup\n-\t *\n-\t * @see cz.metacentrum.perun.core.implApi.GroupsManagerImplApi#createGroup(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, cz.metacentrum.perun.core.api.Group, cz.metacentrum.perun.core.api.Group)\n-\t */\n-\tpublic Group createGroup(PerunSession sess, Vo vo, Group parentGroup, Group group) throws GroupExistsException, InternalErrorException {\n-\t\t// Create new subGroup\n-\n-\t\tgroup.setParentGroupId(parentGroup.getId());\n-\n-\t\tgroup.setName(parentGroup.getName()+\":\"+group.getShortName());\n-\n-\t\tgroup = createGroup(sess, vo, group);\n-\n-\t\treturn group;\n-\t}\n-\n-\tpublic void deleteGroup(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupAlreadyRemovedException {\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\ttry {\n-\t\t\t// Delete group's members\n-\t\t\tjdbc.update(\"delete from groups_members where group_id=?\", group.getId());\n-\n-\t\t\t// Delete authz entries for this group\n-\t\t\tAuthzResolverBlImpl.removeAllAuthzForGroup(sess, group);\n-\n-\t\t\tint rowAffected = jdbc.update(\"delete from groups where id=?\", group.getId());\n-\t\t\tif(rowAffected == 0) throw new GroupAlreadyRemovedException(\"Group: \" + group + \" , Vo: \" + vo);\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\tpublic Group updateGroup(PerunSession sess, Group group) throws InternalErrorException {\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\t// Get the group stored in the DB\n-\t\tGroup dbGroup;\n-\t\ttry {\n-\t\t\tdbGroup = this.getGroupById(sess, group.getId());\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(\"Group existence was checked at the higher level\",e);\n-\t\t}\n-\n-\t\t// we allow only update on shortName part of name\n-\t\tif (!dbGroup.getShortName().equals(group.getShortName())) {\n-\t\t\tdbGroup.setShortName(group.getShortName());\n-\t\t\ttry {\n-\t\t\t\tjdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(),\n-\t\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (group.getDescription() != null && !group.getDescription().equals(dbGroup.getDescription())) {\n-\t\t\ttry {\n-\t\t\t\tjdbc.update(\"update groups set dsc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", group.getDescription(),\n-\t\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), group.getId());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t\tdbGroup.setDescription(group.getDescription());\n-\t\t}\n-\t\treturn dbGroup;\n-\t}\n-\n-\tpublic Group updateGroupName(PerunSession sess, Group group) throws InternalErrorException {\n-\t\tUtils.notNull(group.getName(), \"group.getName()\");\n-\n-\t\t// Get the group stored in the DB\n-\t\tGroup dbGroup;\n-\t\ttry {\n-\t\t\tdbGroup = this.getGroupById(sess, group.getId());\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(\"Group existence was checked at the higher level\",e);\n-\t\t}\n-\n-\t\tif (!dbGroup.getName().equals(group.getName())) {\n-\t\t\tdbGroup.setName(group.getName());\n-\t\t\ttry {\n-\t\t\t\tjdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(),\n-\t\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\t\treturn dbGroup;\n-\t}\n-\n-\tpublic Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=? \", GROUP_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException err) {\n-\t\t\tthrow new GroupNotExistsException(\"Group id=\" + id);\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\tpublic List<User> getGroupUsers(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from groups_members join members on members.id=member_id join \" +\n-\t\t\t\t\t\"users on members.user_id=users.id where group_id=? order by \" + Compatibility.orderByBinary(\"users.last_name\") + \", \" +\n-\t\t\t\t\tCompatibility.orderByBinary(\"users.first_name\"), UsersManagerImpl.USER_MAPPER, group.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isUserMemberOfGroup(PerunSession sess, User user, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"select count(1) from groups_members join members on members.id = member_id where members.user_id=? and groups_members.group_id=?\", user.getId(), group.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery + \" from groups_members join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\"where groups_members.group_id=?\", MembersManagerImpl.MEMBER_MAPPER, group.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Member>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group, List<Status> statuses, boolean excludeStatus) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n-\t\t\tList<Integer> statusesCodes = new ArrayList<Integer>();\n-\t\t\tfor (Status status: statuses) {\n-\t\t\t\tstatusesCodes.add(status.getCode());\n-\t\t\t}\n-\t\t\tparameters.addValue(\"statuses\", statusesCodes);\n-\t\t\tparameters.addValue(\"group_id\", group.getId());\n-\n-\t\t\tif (excludeStatus) {\n-\t\t\t\t// Exclude members with one of the status\n-\t\t\t\treturn this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery +\n-\t\t\t\t\t\t\" from groups_members join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\t\"where groups_members.group_id=:group_id and members.status\"+Compatibility.castToInteger()+\" not in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n-\t\t\t} else {\n-\t\t\t\t// Include members with one of the status\n-\t\t\t\treturn this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery +\n-\t\t\t\t\t\t\" from groups_members join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\t\"where groups_members.group_id=:group_id and members.status\"+Compatibility.castToInteger()+\" in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Member>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select  \" + groupMappingSelectQuery + \" from groups where vo_id=? order by \" +\n-\t\t\t\t\t\t\tCompatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()),\n-\t\t\t\t\tGROUP_MAPPER, vo.getId());\n-\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAssignedGroupsToResource(PerunSession perunSession, Resource resource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups join \" +\n-\t\t\t\t\t\" groups_resources on groups.id=groups_resources.group_id \" +\n-\t\t\t\t\t\" where groups_resources.resource_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, resource.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAssignedGroupsToFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups join \" +\n-\t\t\t\t\t\t\t\" groups_resources on groups.id=groups_resources.group_id \" +\n-\t\t\t\t\t\t\t\" join resources on groups_resources.resource_id=resources.id \" +\n-\t\t\t\t\t\t\t\"where resources.facility_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, facility.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.parent_group_id=? \" +\n-\t\t\t\t\t\t\t\"order by \" + Compatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()),\n-\t\t\t\t\tGROUP_MAPPER, parentGroup.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(1) from groups where parent_group_id=?\", parentGroup.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAllGroups(PerunSession sess, Vo vo)     throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where vo_id=?\", GROUP_MAPPER, vo.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\tpublic Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, ParentGroupNotExistsException {\n-\t\ttry  {\n-\t\t\treturn jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=?\",\n-\t\t\t\t\tGROUP_MAPPER, group.getParentGroupId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new ParentGroupNotExistsException(e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.name=? and groups.vo_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, name, vo.getId());\n-\t\t} catch (EmptyResultDataAccessException err) {\n-\t\t\tthrow new GroupNotExistsException(\"Group name=\" + name + \", vo id=\" + vo.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\tpublic Member addMember(PerunSession sess, Group group, Member member, MembershipType type, int sourceGroupId) throws InternalErrorException, AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tmember.setMembershipType(type);\n-\t\tmember.setSourceGroupId(sourceGroupId);\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into groups_members (group_id, member_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid, membership_type, source_group_id) \" +\n-\t\t\t\t\t\"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?,?,?)\", group.getId(),\n-\t\t\t\t\tmember.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId(), type.getCode(), sourceGroupId);\n-\t\t} catch(DuplicateKeyException ex) {\n-\t\t\tthrow new AlreadyMemberException(member);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\treturn member;\n-\n-\t}\n-\n-\tpublic List<Group> getGroupsByIds(PerunSession sess, List<Integer> groupsIds) throws InternalErrorException {\n-\t\t// If groupsIds are empty, we can immediately return empty result\n-\t\tif (groupsIds.size() == 0) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t}\n-\n-\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n-\t\tparameters.addValue(\"ids\", groupsIds);\n-\n-\t\ttry {\n-\t\t\treturn this.namedParameterJdbcTemplate.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.id in ( :ids )\",\n-\t\t\t\t\tparameters, GROUP_MAPPER);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups_members join groups on groups_members.group_id = groups.id \" +\n-\t\t\t\t\t\" where groups_members.member_id=?\",\n-\t\t\t\t\tGROUP_MAPPER, member.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Group> getGroupsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups \" +\n-\t\t\t\t\t\"join group_attr_values on groups.id=group_attr_values.group_id where group_attr_values.attr_id=? and \" +\n-\t\t\t\t\t\"group_attr_values.attr_value=?\",\n-\t\t\t\t\tGROUP_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Pair<Group,Resource>> getGroupResourcePairsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \", \" + ResourcesManagerImpl.resourceMappingSelectQuery +\n-\t\t\t\t\t\" from group_resource_attr_values \" +\n-\t\t\t\t\t\"join groups on groups.id=group_resource_attr_values.group_id \" +\n-\t\t\t\t\t\"join resources on resources.id=group_resource_attr_values.resource_id \" +\n-\t\t\t\t\t\"where group_resource_attr_values.attr_id=? and group_resource_attr_values.attr_value=?\",\n-\t\t\t\t\tGROUP_RESOURCE_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Pair<Group, Resource>>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=?\", group.getId(), member.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isDirectGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint count = jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=? and membership_type = ?\", group.getId(), member.getId(), MembershipType.DIRECT.getCode());\n-\t\t\tif (1 < count) throw new ConsistencyErrorException(\"There is more than one direct member in group\" + group);\n-\t\t\treturn 1 == count;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, NotGroupMemberException {\n-\t\tif (member.getSourceGroupId() == null) {\n-\t\t\tthrow new InternalErrorException(\"sourceGroupId not set for member object\");\n-\t\t}\n-\t\tint ret;\n-\t\ttry {\n-\t\t\tret = jdbc.update(\"delete from groups_members where group_id=? and source_group_id=? and member_id=?\", group.getId(), member.getSourceGroupId(), member.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif(ret == 0) {\n-\t\t\tthrow new NotGroupMemberException(member);\n-\t\t} else if(ret >= 1) {\n-\t\t\treturn;\n-\t\t} else {\n-\t\t\tthrow new ConsistencyErrorException(member + \" and \" + group + \" have \" + ret + \" rows in groups_members table\");\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tSet<User> setOfAdmins = new HashSet<User>();\n-\t\t\t// direct admins\n-\t\t\tsetOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" +\n-\t\t\t\t\t\t\"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId()));\n-\n-\t\t\t// admins through a group\n-\t\t\tList<Group> listOfGroupAdmins = getGroupAdmins(sess, group);\n-\t\t\tfor(Group authorizedGroup : listOfGroupAdmins) {\n-\t\t\t\tsetOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from users join members on users.id=members.user_id \" +\n-\t\t\t\t\t\t\t\"join groups_members on groups_members.member_id=members.id where groups_members.group_id=?\", UsersManagerImpl.USER_MAPPER, authorizedGroup.getId()));\n-\t\t\t}\n-\n-\t\t\treturn new ArrayList(setOfAdmins);\n-\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" +\n-\t\t\t\t\t\"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupAdmins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from authz join groups on authz.authorized_group_id=groups.id \" +\n-\t\t\t\t\t\"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\",\n-\t\t\t\t\tGROUP_MAPPER, group.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(1) from groups where vo_id=?\", vo.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic int getVoId(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select vo_id from groups where id=?\", group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void checkGroupExists(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException {\n-\t\tif (!groupExists(sess, group)) throw new GroupNotExistsException(\"Group \" + group);\n-\t}\n-\n-\tpublic boolean groupExists(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from groups where id=?\", group.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Gets all groups which have enabled synchronization.\n-\t *\n-\t * @param sess\n-\t * @return list of groups to synchronize\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic List<Group> getGroupsToSynchronize(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\t// Get all groups which have defined\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups, attr_names, group_attr_values \" +\n-\t\t\t\t\t\"where attr_names.attr_name=? and attr_names.id=group_attr_values.attr_id and group_attr_values.attr_value='true' and \" +\n-\t\t\t\t\t\"group_attr_values.group_id=groups.id\", GROUP_MAPPER, GroupsManager.GROUPSYNCHROENABLED_ATTRNAME);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getGroupApplicationIds(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t// get app ids for all applications\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select id from application where group_id=?\", new RowMapper<Integer>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Integer mapRow(ResultSet rs, int arg1)\n-\t\t\t\tthrows SQLException {\n-\t\t\t\treturn rs.getInt(\"id\");\n-\t\t\t\t}\n-\t\t\t},group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Pair<String, String>> getApplicationReservedLogins(Integer appId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n-\t\t\t\t\treturn new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n-\t\t\t\t}\n-\t\t\t}, appId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteGroupReservedLogins(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t// remove all reserved logins first\n-\t\ttry {\n-\t\t\tfor (Integer appId : getGroupApplicationIds(sess, group)) {\n-\t\t\t\tjdbc.update(\"delete from application_reserved_logins where app_id=?\", appId);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic int getGroupsCount(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(*) from groups\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWithAssignedExtSourceInVo(PerunSession sess, ExtSource source, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + groupMappingSelectQuery +\n-\t\t\t\t\t\" from group_ext_sources g_exts inner join groups on g_exts.group_id=groups.id \" +\n-\t\t\t\t\t\" where g_exts.ext_source_id=? and groups.vo_id=?\", GROUP_MAPPER, source.getId(), vo.getId());\n-\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupRelationDoesNotExist {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId())) {\n-\t\t\t\tthrow new GroupRelationDoesNotExist(\"Union between \" + resultGroup + \" and \" + operandGroup + \" does not exist.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeResultGroupRelations(PerunSession sess, Group resultGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ?\", resultGroup.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void saveGroupRelation(PerunSession sess, Group resultGroup, Group operandGroup, boolean parentFlag) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"INSERT INTO groups_groups(result_gid, operand_gid, created_at, created_by, \" +\n-\t\t\t\t\t\t\"modified_at, modified_by, parent_flag) VALUES(?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), parentFlag);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\t\n-\tpublic boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 > jdbc.queryForInt(\"SELECT parent_flag\"+Compatibility.castToInteger()+\" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isRelationBetweenGroups(Group group1, Group group2) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE (result_gid = ? AND operand_gid = ?) OR (result_gid = ? AND operand_gid = ?)\",\n-\t\t\t\tgroup1.getId(), group2.getId(), group2.getId(), group1.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isOneWayRelationBetweenGroups(Group resultGroup, Group operandGroup) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n-\t\t\t\t\tresultGroup.getId(), operandGroup.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getResultGroups(PerunSession sess, int groupId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" +\n-\t\t\t\t\t\"ON groups.id = groups_groups.result_gid WHERE operand_gid=?\", GROUP_MAPPER, groupId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getOperandGroups(PerunSession sess, int groupId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" +\n-\t\t\t\t\t\"ON groups.id = groups_groups.operand_gid WHERE result_gid=?\", GROUP_MAPPER, groupId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getResultGroupsIds(PerunSession sess, int groupId) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForList(\"SELECT result_gid FROM groups_groups WHERE operand_gid=?\", Integer.class, groupId);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(GroupsManagerImpl.class);\n+\n+ public final static int MEMBERSGROUP = 1;\n+\n+ public final static int ADMINSGROUP = 2;\n+\n+ public final static int SUBGROUP = 3;\n+\n+\n+ protected final static String groupMappingSelectQuery = \"groups.id as groups_id, groups.parent_group_id as groups_parent_group_id, groups.name as groups_name, groups.dsc as groups_dsc, \" + \"groups.vo_id as groups_vo_id, groups.created_at as groups_created_at, groups.created_by as groups_created_by, groups.modified_by as groups_modified_by, groups.modified_at as groups_modified_at, \" + \"groups.modified_by_uid as groups_modified_by_uid, groups.created_by_uid as groups_created_by_uid \";\n+\n+ // http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+ private JdbcPerunTemplate jdbc;\n+ private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+ // Group mapper\n+\n+\n+ protected static final RowMapper<Group> GROUP_MAPPER = new RowMapper<Group>() {\n+                                          public Group mapRow(ResultSet rs, int i) throws SQLException {\n+                                           Group g = new Group();\n+                                           g.setId(rs.getInt(\"groups_id\"));\n+   //ParentGroup with ID=0 is not supported\n+                                           if (rs.getInt(\"groups_parent_group_id\") != 0) g.setParentGroupId(rs.getInt(\"groups_parent_group_id\"));\n+                                           else g.setParentGroupId(null);\n+                                           g.setName(rs.getString(\"groups_name\"));\n+                                           g.setShortName(g.getName().substring(g.getName().lastIndexOf(\":\") + 1));\n+                                           g.setDescription(rs.getString(\"groups_dsc\"));\n+                                           g.setVoId(rs.getInt(\"groups_vo_id\"));\n+                                           g.setCreatedAt(rs.getString(\"groups_created_at\"));\n+                                           g.setCreatedBy(rs.getString(\"groups_created_by\"));\n+                                           g.setModifiedAt(rs.getString(\"groups_modified_at\"));\n+                                           g.setModifiedBy(rs.getString(\"groups_modified_by\"));\n+                                           if (rs.getInt(\"groups_modified_by_uid\") == 0) g.setModifiedByUid(null);\n+                                           else g.setModifiedByUid(rs.getInt(\"groups_modified_by_uid\"));\n+                                           if (rs.getInt(\"groups_created_by_uid\") == 0) g.setCreatedByUid(null);\n+                                           else g.setCreatedByUid(rs.getInt(\"groups_created_by_uid\"));\n+                                           return g;\n+                                          }\n+                                         };\n+ private static final RowMapper<Pair<Group, Resource>> GROUP_RESOURCE_MAPPER = new RowMapper<Pair<Group, Resource>>() {\n+                                                        public Pair<Group, Resource> mapRow(ResultSet rs, int i) throws SQLException {\n+                                                         Pair<Group, Resource> pair = new Pair<Group, Resource>();\n+                                                         pair.put(GROUP_MAPPER.mapRow(rs, i), ResourcesManagerImpl.RESOURCE_MAPPER.mapRow(rs, i));\n+                                                         return pair;\n+                                                        }\n+                                                       };\n+\n+ /**\n+  * Create new instance of this class.\n+  *\n+  */\n+\n+\n+ public GroupsManagerImpl(DataSource perunPool) {\n+  this.jdbc = new JdbcPerunTemplate(perunPool);\n+  this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n+ }\n+\n+ public Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, InternalErrorException {\n+  Utils.notNull(group, \"group\");\n+  Utils.notNull(group.getName(), \"group.getName()\");\n+\n+  // Check if the group already exists\n+  if (group.getParentGroupId() == null) {\n+   // check if the TOP level group exists\n+   if (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id IS NULL\", group.getName(), vo.getId())) {\n+    throw new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id is [NULL]\");\n+   }\n+  } else {\n+   // check if subgroup exists under parent group\n+   if (1 == jdbc.queryForInt(\"select count('x') from groups where lower(name)=lower(?) and vo_id=? and parent_group_id=?\", group.getName(), vo.getId(), group.getParentGroupId())) {\n+    throw new GroupExistsException(\"Group [\" + group.getName() + \"] already exists under VO [\" + vo.getShortName() + \"] and has parent Group with id [\" + group.getParentGroupId() + \"]\");\n+   }\n+  }\n+\n+  // Check the group name, it can contain only a-Z0-9_- and space\n+  if (!group.getShortName().matches(\"^[- a-zA-Z.0-9_]+$\")) {\n+   throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name can contain only a-Z0-9.-_: and space characters. \" + group));\n+  }\n+\n+  try {\n+   // Store the group into the DB\n+   int newId = Utils.getNewId(jdbc, \"groups_id_seq\");\n+   jdbc.update(\"insert into groups (id, parent_group_id, name, dsc, vo_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" + \"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, group.getParentGroupId(), group.getName(), group.getDescription(), vo.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+   group.setId(newId);\n+   group.setVoId(vo.getId());\n+   return group;\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ public String getName(int id) throws InternalErrorException {\n+  List name = null;\n+  try {\n+   name = jdbc.query(\"group.name as (with temp (name, id, parent_group_id) as ((select name, id, parent_group_id from GROUPS where parent_group_id is null) union all (select cast((temp.name + ':' + groups.name) as varchar(128)), \" + \"groups.id, groups.parent_group_id from groups inner join temp on temp.id = groups.parent_group_id )) select name from temp where group.id = ?\", new RowMapper() {\n+           public Object mapRow(ResultSet resultSet, int i) throws SQLException {\n+            return resultSet.getString(1);\n+           }\n+          }, id);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+  String result = (String) name.get(0);\n+  return result;\n+ }\n+\n+ /*\n+  * Create a subgroup\n+  *\n+  * @see cz.metacentrum.perun.core.implApi.GroupsManagerImplApi#createGroup(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, cz.metacentrum.perun.core.api.Group, cz.metacentrum.perun.core.api.Group)\n+  */\n+\n+ public Group createGroup(PerunSession sess, Vo vo, Group parentGroup, Group group) throws GroupExistsException, InternalErrorException {\n+  // Create new subGroup\n+  group.setParentGroupId(parentGroup.getId());\n+  group.setName(parentGroup.getName() + \":\" + group.getShortName());\n+  group = createGroup(sess, vo, group);\n+  return group;\n+ }\n+\n+ public void deleteGroup(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupAlreadyRemovedException {\n+  Utils.notNull(group.getName(), \"group.getName()\");\n+\n+  try {\n+   // Delete group's members\n+   jdbc.update(\"delete from groups_members where group_id=?\", group.getId());\n+\n+   // Delete authz entries for this group\n+   AuthzResolverBlImpl.removeAllAuthzForGroup(sess, group);\n+\n+   int rowAffected = jdbc.update(\"delete from groups where id=?\", group.getId());\n+   if (rowAffected == 0) throw new GroupAlreadyRemovedException(\"Group: \" + group + \" , Vo: \" + vo);\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ public Group updateGroup(PerunSession sess, Group group) throws InternalErrorException {\n+  Utils.notNull(group.getName(), \"group.getName()\");\n+\n+  // Get the group stored in the DB\n+  Group dbGroup;\n+  try {\n+   dbGroup = this.getGroupById(sess, group.getId());\n+  } catch (GroupNotExistsException e) {\n+   throw new InternalErrorException(\"Group existence was checked at the higher level\", e);\n+  }\n+\n+  // we allow only update on shortName part of name\n+  if (!dbGroup.getShortName().equals(group.getShortName())) {\n+   dbGroup.setShortName(group.getShortName());\n+\n+   try {\n+    jdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+  if (group.getDescription() != null && !group.getDescription().equals(dbGroup.getDescription())) {\n+   try {\n+    jdbc.update(\"update groups set dsc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", group.getDescription(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), group.getId());\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+   dbGroup.setDescription(group.getDescription());\n+  }\n+\n+  return dbGroup;\n+ }\n+\n+ public Group updateGroupName(PerunSession sess, Group group) throws InternalErrorException {\n+  Utils.notNull(group.getName(), \"group.getName()\");\n+\n+  // Get the group stored in the DB\n+  Group dbGroup;\n+  try {\n+   dbGroup = this.getGroupById(sess, group.getId());\n+  } catch (GroupNotExistsException e) {\n+   throw new InternalErrorException(\"Group existence was checked at the higher level\", e);\n+  }\n+  if (!dbGroup.getName().equals(group.getName())) {\n+   dbGroup.setName(group.getName());\n+\n+   try {\n+    jdbc.update(\"update groups set name=?,modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", dbGroup.getName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), dbGroup.getId());\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+\n+  return dbGroup;\n+ }\n+\n+ public Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=? \", GROUP_MAPPER, id);\n+  } catch (EmptyResultDataAccessException err) {\n+   throw new GroupNotExistsException(\"Group id=\" + id);\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ public List<User> getGroupUsers(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from groups_members join members on members.id=member_id join \" + \"users on members.user_id=users.id where group_id=? order by \" + Compatibility.orderByBinary(\"users.last_name\") + \", \" + Compatibility.orderByBinary(\"users.first_name\"), UsersManagerImpl.USER_MAPPER, group.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public boolean isUserMemberOfGroup(PerunSession sess, User user, Group group) throws InternalErrorException {\n+  try {\n+   return 1 <= jdbc.queryForInt(\"select count(1) from groups_members join members on members.id = member_id where members.user_id=? and groups_members.group_id=?\", user.getId(), group.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery + \" from groups_members join members on members.id=groups_members.member_id \" + \"where groups_members.group_id=?\", MembersManagerImpl.MEMBER_MAPPER, group.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Member>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Member> getGroupMembers(PerunSession sess, Group group, List<Status> statuses, boolean excludeStatus) throws InternalErrorException {\n+  try {\n+   MapSqlParameterSource parameters = new MapSqlParameterSource();\n+   List<Integer> statusesCodes = new ArrayList<Integer>();\n+   for (Status status : statuses) {\n+    statusesCodes.add(status.getCode());\n+   }\n+   parameters.addValue(\"statuses\", statusesCodes);\n+   parameters.addValue(\"group_id\", group.getId());\n+   if (excludeStatus) {\n+    // Exclude members with one of the status\n+    return this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery + \" from groups_members join members on members.id=groups_members.member_id \" + \"where groups_members.group_id=:group_id and members.status\" + Compatibility.castToInteger() + \" not in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n+   } else {\n+    // Include members with one of the status\n+    return this.namedParameterJdbcTemplate.query(\"select \" + MembersManagerImpl.groupsMembersMappingSelectQuery + \" from groups_members join members on members.id=groups_members.member_id \" + \"where groups_members.group_id=:group_id and members.status\" + Compatibility.castToInteger() + \" in (:statuses)\", parameters, MembersManagerImpl.MEMBER_MAPPER);\n+   }\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Member>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select  \" + groupMappingSelectQuery + \" from groups where vo_id=? order by \" + Compatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()), GROUP_MAPPER, vo.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Group> getAssignedGroupsToResource(PerunSession perunSession, Resource resource) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups join \" + \" groups_resources on groups.id=groups_resources.group_id \" + \" where groups_resources.resource_id=?\", GROUP_MAPPER, resource.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Group> getAssignedGroupsToFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups join \" + \" groups_resources on groups.id=groups_resources.group_id \" + \" join resources on groups_resources.resource_id=resources.id \" + \"where resources.facility_id=?\", GROUP_MAPPER, facility.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.parent_group_id=? \" + \"order by \" + Compatibility.orderByBinary(\"groups.name\" + Compatibility.castToVarchar()), GROUP_MAPPER, parentGroup.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForInt(\"select count(1) from groups where parent_group_id=?\", parentGroup.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Group> getAllGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups where vo_id=?\", GROUP_MAPPER, vo.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, ParentGroupNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.id=?\",\n+   GROUP_MAPPER,\n+   group.getParentGroupId());\n+  } catch (EmptyResultDataAccessException e) {\n+   throw new ParentGroupNotExistsException(e);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + groupMappingSelectQuery + \" from groups where groups.name=? and groups.vo_id=?\",\n+   GROUP_MAPPER,\n+   name,\n+   vo.getId());\n+  } catch (EmptyResultDataAccessException err) {\n+   throw new GroupNotExistsException(\"Group name=\" + name + \", vo id=\" + vo.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ public Member addMember(PerunSession sess, Group group, Member member, MembershipType type, int sourceGroupId) throws InternalErrorException, AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  member.setMembershipType(type);\n+  member.setSourceGroupId(sourceGroupId);\n+\n+  try {\n+   jdbc.update(\"insert into groups_members (group_id, member_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid, membership_type, source_group_id) \" + \"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?,?,?)\", group.getId(), member.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId(), type.getCode(), sourceGroupId);\n+  } catch (DuplicateKeyException ex) {\n+   throw new AlreadyMemberException(member);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+\n+  return member;\n+ }\n+\n+ public List<Group> getGroupsByIds(PerunSession sess, List<Integer> groupsIds) throws InternalErrorException {\n+  // If groupsIds are empty, we can immediately return empty result\n+  if (groupsIds.size() == 0) {\n+   return new ArrayList<Group>();\n+  }\n+  MapSqlParameterSource parameters = new MapSqlParameterSource();\n+  parameters.addValue(\"ids\", groupsIds);\n+\n+  try {\n+   return this.namedParameterJdbcTemplate.query(\"select \" + groupMappingSelectQuery + \" from groups where groups.id in ( :ids )\", parameters, GROUP_MAPPER);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select distinct \" + groupMappingSelectQuery + \" from groups_members join groups on groups_members.group_id = groups.id \" + \" where groups_members.member_id=?\", GROUP_MAPPER, member.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Group> getGroupsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups \" + \"join group_attr_values on groups.id=group_attr_values.group_id where group_attr_values.attr_id=? and \" + \"group_attr_values.attr_value=?\", GROUP_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Pair<Group, Resource>> getGroupResourcePairsByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \", \" + ResourcesManagerImpl.resourceMappingSelectQuery + \" from group_resource_attr_values \" + \"join groups on groups.id=group_resource_attr_values.group_id \" + \"join resources on resources.id=group_resource_attr_values.resource_id \" + \"where group_resource_attr_values.attr_id=? and group_resource_attr_values.attr_value=?\", GROUP_RESOURCE_MAPPER, attribute.getId(), BeansUtils.attributeValueToString(attribute));\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Pair<Group, Resource>>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public boolean isGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n+  try {\n+   return 1 <= jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=?\", group.getId(), member.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public boolean isDirectGroupMember(PerunSession sess, Group group, Member member) throws InternalErrorException {\n+  try {\n+   int count = jdbc.queryForInt(\"select count(1) from groups_members where group_id=? and member_id=? and membership_type = ?\", group.getId(), member.getId(), MembershipType.DIRECT.getCode());\n+   if (1 <count) throw new ConsistencyErrorException(\"There is more than one direct member in group\" + group);\n+   return 1 == count;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, NotGroupMemberException {\n+  if (member.getSourceGroupId() == null) {\n+   throw new InternalErrorException(\"sourceGroupId not set for member object\");\n+  }\n+\n+  int ret;\n+  try {\n+   ret = jdbc.update(\"delete from groups_members where group_id=? and source_group_id=? and member_id=?\", group.getId(), member.getSourceGroupId(), member.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  if (ret == 0) {\n+   throw new NotGroupMemberException(member);\n+  } else if (ret >= 1) {\n+   return;\n+  } else {\n+   throw new ConsistencyErrorException(member + \" and \" + group + \" have \" + ret + \" rows in groups_members table\");\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   Set<User> setOfAdmins = new HashSet<User>();\n+   // direct admins\n+   setOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" + \"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId()));\n+\n+   // admins through a group\n+   List<Group> listOfGroupAdmins = getGroupAdmins(sess, group);\n+   for (Group authorizedGroup : listOfGroupAdmins) {\n+    setOfAdmins.addAll(jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from users join members on users.id=members.user_id \" + \"join groups_members on groups_members.member_id=members.id where groups_members.group_id=?\", UsersManagerImpl.USER_MAPPER, authorizedGroup.getId()));\n+   }\n+\n+   return new ArrayList(setOfAdmins);\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + UsersManagerImpl.userMappingSelectQuery + \" from authz join users on authz.user_id=users.id \" + \"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", UsersManagerImpl.USER_MAPPER, group.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Group> getGroupAdmins(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from authz join groups on authz.authorized_group_id=groups.id \" + \"where authz.group_id=? and authz.role_id=(select id from roles where name='groupadmin')\", GROUP_MAPPER, group.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForInt(\"select count(1) from groups where vo_id=?\", vo.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public int getVoId(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForInt(\"select vo_id from groups where id=?\", group.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void checkGroupExists(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException {\n+  if (!groupExists(sess, group)) throw new GroupNotExistsException(\"Group \" + group);\n+ }\n+\n+ public boolean groupExists(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   return 1 == jdbc.queryForInt(\"select 1 from groups where id=?\", group.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ /**\n+  * Gets all groups which have enabled synchronization.\n+  *\n+  * @param sess\n+  * @return list of groups to synchronize\n+  * @throws InternalErrorException\n+  */\n+\n+ public List<Group> getGroupsToSynchronize(PerunSession sess) throws InternalErrorException {\n+  try {\n+   // Get all groups which have defined\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from groups, attr_names, group_attr_values \" + \"where attr_names.attr_name=? and attr_names.id=group_attr_values.attr_id and group_attr_values.attr_value='true' and \" + \"group_attr_values.group_id=groups.id\", GROUP_MAPPER, GroupsManager.GROUPSYNCHROENABLED_ATTRNAME);\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Integer> getGroupApplicationIds(PerunSession sess, Group group) throws InternalErrorException {\n+  // get app ids for all applications\n+  try {\n+   return jdbc.query(\"select id from application where group_id=?\", new RowMapper<Integer>() {\n+           @Override\n+           public Integer mapRow(ResultSet rs, int arg1) throws SQLException {\n+            return rs.getInt(\"id\");\n+           }\n+          }, group.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Pair<String, String>> getApplicationReservedLogins(Integer appId) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n+           @Override\n+           public Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n+            return new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n+           }\n+          }, appId);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void deleteGroupReservedLogins(PerunSession sess, Group group) throws InternalErrorException {\n+  // remove all reserved logins first\n+  try {\n+\n+   for (Integer appId : getGroupApplicationIds(sess, group)) {\n+    jdbc.update(\"delete from application_reserved_logins where app_id=?\", appId);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public int getGroupsCount(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForInt(\"select count(*) from groups\");\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<Group> getGroupsWithAssignedExtSourceInVo(PerunSession sess, ExtSource source, Vo vo) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + groupMappingSelectQuery + \" from group_ext_sources g_exts inner join groups on g_exts.group_id=groups.id \" + \" where g_exts.ext_source_id=? and groups.vo_id=?\", GROUP_MAPPER, source.getId(), vo.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupRelationDoesNotExist {\n+  try {\n+   if (0 == jdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n+   resultGroup.getId(),\n+   operandGroup.getId())) {\n+    throw new GroupRelationDoesNotExist(\"Union between \" + resultGroup + \" and \" + operandGroup + \" does not exist.\");\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeResultGroupRelations(PerunSession sess, Group resultGroup) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"DELETE FROM groups_groups WHERE result_gid = ?\", resultGroup.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void saveGroupRelation(PerunSession sess, Group resultGroup, Group operandGroup, boolean parentFlag) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"INSERT INTO groups_groups(result_gid, operand_gid, created_at, created_by, \" + \"modified_at, modified_by, parent_flag) VALUES(?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", resultGroup.getId(), operandGroup.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), parentFlag);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n+  try {\n+   return 1 > jdbc.queryForInt(\"SELECT parent_flag\" + Compatibility.castToInteger() + \" FROM groups_groups WHERE result_gid=? AND operand_gid=?\", resultGroup.getId(), operandGroup.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public boolean isRelationBetweenGroups(Group group1, Group group2) throws InternalErrorException {\n+  try {\n+   return 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE (result_gid = ? AND operand_gid = ?) OR (result_gid = ? AND operand_gid = ?)\", group1.getId(), group2.getId(), group2.getId(), group1.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public boolean isOneWayRelationBetweenGroups(Group resultGroup, Group operandGroup) throws InternalErrorException {\n+  try {\n+   return 1 <= jdbc.queryForInt(\"SELECT count(1) FROM groups_groups WHERE result_gid = ? AND operand_gid = ?\",\n+   resultGroup.getId(),\n+   operandGroup.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Group> getResultGroups(PerunSession sess, int groupId) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" + \"ON groups.id = groups_groups.result_gid WHERE operand_gid=?\", GROUP_MAPPER, groupId);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Group> getOperandGroups(PerunSession sess, int groupId) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"SELECT \" + groupMappingSelectQuery + \" FROM groups_groups JOIN groups \" + \"ON groups.id = groups_groups.operand_gid WHERE result_gid=?\", GROUP_MAPPER, groupId);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Integer> getResultGroupsIds(PerunSession sess, int groupId) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForList(\"SELECT result_gid FROM groups_groups WHERE operand_gid=?\", Integer.class, groupId);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 729
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/445/GroupsManagerImpl.java\nindex acb491c2fed..89db247ee2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/445/GroupsManagerImpl.java\n@@ -719,7 +719,7 @@ public class GroupsManagerImpl implements GroupsManagerImplApi {\n \t\t\tthrow new InternalErrorException(e);\n \t\t}\n \t}\n-\t\n+\n \tpublic boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n \t\ttry {\n \t\t\treturn 1 > jdbc.queryForInt(\"SELECT parent_flag\"+Compatibility.castToInteger()+\" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/445/GroupsManagerImpl.java\nindex acb491c2fed..6398eb0a55d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/445/GroupsManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/445/GroupsManagerImpl.java\n@@ -718,9 +718,7 @@ public class GroupsManagerImpl implements GroupsManagerImplApi {\n \t\t} catch (RuntimeException e) {\n \t\t\tthrow new InternalErrorException(e);\n \t\t}\n-\t}\n-\t\n-\tpublic boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n+\t\t\t} public boolean isRelationRemovable(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException {\n \t\ttry {\n \t\t\treturn 1 > jdbc.queryForInt(\"SELECT parent_flag\"+Compatibility.castToInteger()+\" FROM groups_groups WHERE result_gid=? AND operand_gid=?\",\n \t\t\t\t\tresultGroup.getId(), operandGroup.getId());\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}