{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "120",
    "information": {
        "errors": [
            {
                "line": "32",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 94).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertFalse(transformations.isEmpty());\n    transformations.forEach(\n        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/120/TransformationDescriptorTest.java\nindex 270bd70e55f..d0436cc2308 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/120/TransformationDescriptorTest.java\n@@ -29,6 +29,6 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+(name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/120/TransformationDescriptorTest.java\nindex 270bd70e55f..9e0676f3103 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/120/TransformationDescriptorTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.repository;\n \n import static org.junit.Assert.*;\n@@ -29,6 +30,7 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+        (name, t) -> assertEquals(\"transformer-\" + name,\n+            t.getConsumerNameFactory().apply()));\n   }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/120/TransformationDescriptorTest.java\nindex 270bd70e55f..92e03159fc0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/120/TransformationDescriptorTest.java\n@@ -31,4 +31,4 @@ public class TransformationDescriptorTest {\n     transformations.forEach(\n         (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/120/TransformationDescriptorTest.java\nindex 270bd70e55f..6ef00335e62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/120/TransformationDescriptorTest.java\n@@ -16,11 +16,11 @@\n package cz.o2.proxima.repository;\n \n import static org.junit.Assert.*;\n-\n import com.typesafe.config.ConfigFactory;\n import java.util.Map;\n import org.junit.Test;\n \n+\n public class TransformationDescriptorTest {\n \n   @Test\n@@ -28,7 +28,6 @@ public class TransformationDescriptorTest {\n     Repository repo = Repository.of(ConfigFactory.load(\"test-reference.conf\").resolve());\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n-    transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+    transformations.forEach((name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/120/TransformationDescriptorTest.java\nindex 270bd70e55f..d0436cc2308 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/120/TransformationDescriptorTest.java\n@@ -29,6 +29,6 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+(name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "column": "89",
                    "severity": "error",
                    "message": "'}' at column 89 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "32",
                    "column": "89",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "90",
                    "severity": "error",
                    "message": "'}' at column 90 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "32",
                    "column": "90",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "90",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/120/TransformationDescriptorTest.java\nindex 270bd70e55f..a3882c71f78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/120/TransformationDescriptorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/120/TransformationDescriptorTest.java\n@@ -29,6 +29,4 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n-  }\n-}\n+  (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));}}\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}