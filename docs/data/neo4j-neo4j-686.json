{
    "project_name": "neo4j-neo4j",
    "error_id": "686",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/686/LogPruningImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/686/LogPruningImpl.java\nindex 76333e6c6c4..a76ff9eaefc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/686/LogPruningImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/686/LogPruningImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.pruning;\n \n import java.nio.file.Path;\n@@ -50,50 +51,49 @@ public class LogPruningImpl implements LogPruning\n     private final int checkpointFilesToKeep;\n     private volatile LogPruneStrategy pruneStrategy;\n \n-    public LogPruningImpl( FileSystemAbstraction fs,\n-                           LogFiles logFiles,\n-                           LogProvider logProvider,\n-                           LogPruneStrategyFactory strategyFactory,\n-                           SystemNanoClock clock,\n-                           Config config )\n+    public LogPruningImpl(FileSystemAbstraction fs,\n+                          LogFiles logFiles,\n+                          LogProvider logProvider,\n+                          LogPruneStrategyFactory strategyFactory,\n+                          SystemNanoClock clock,\n+                          Config config)\n     {\n         this.fs = fs;\n         this.logFiles = logFiles;\n         this.logProvider = logProvider;\n-        this.log = logProvider.getLog( getClass() );\n+        this.log = logProvider.getLog(getClass());\n         this.strategyFactory = strategyFactory;\n         this.clock = clock;\n-        this.pruneStrategy = strategyFactory.strategyFromConfigValue( fs, logFiles, logProvider, clock, config.get( keep_logical_logs ) );\n-        this.checkpointFilesToKeep = config.get( checkpoint_logical_log_keep_threshold );\n+        this.pruneStrategy = strategyFactory.strategyFromConfigValue(fs, logFiles, logProvider, clock, config.get(keep_logical_logs));\n+        this.checkpointFilesToKeep = config.get(checkpoint_logical_log_keep_threshold);\n \n         // Register listener for updates\n-        config.addListener( keep_logical_logs, ( prev, update ) -> updateConfiguration( update ) );\n+        config.addListener(keep_logical_logs, (prev, update) -> updateConfiguration(update));\n     }\n \n-    private void updateConfiguration( String pruningConf )\n+    private void updateConfiguration(String pruningConf)\n     {\n-        LogPruneStrategy strategy = strategyFactory.strategyFromConfigValue( fs, logFiles, logProvider, clock, pruningConf );\n+        LogPruneStrategy strategy = strategyFactory.strategyFromConfigValue(fs, logFiles, logProvider, clock, pruningConf);\n         this.pruneStrategy = strategy;\n-        log.info( \"Retention policy updated to '\" + strategy + \"', which will take effect next time a checkpoint completes.\" );\n+        log.info(\"Retention policy updated to '\" + strategy + \"', which will take effect next time a checkpoint completes.\");\n     }\n \n     @Override\n-    public void pruneLogs( long upToVersion )\n+    public void pruneLogs(long upToVersion)\n     {\n         // Only one is allowed to do pruning at any given time,\n         // and it's OK to skip pruning if another one is doing so right now.\n-        if ( pruneLock.tryLock() )\n+        if (pruneLock.tryLock())\n         {\n             try\n             {\n-                CountingDeleter deleter = new CountingDeleter( logFiles, fs );\n+                CountingDeleter deleter = new CountingDeleter(logFiles, fs);\n                 LogPruneStrategy strategy = this.pruneStrategy;\n-                strategy.findLogVersionsToDelete( upToVersion ).forEachOrdered( deleter );\n-                log.info( deleter.describeResult( strategy ) );\n+                strategy.findLogVersionsToDelete(upToVersion).forEachOrdered(deleter);\n+                log.info(deleter.describeResult(strategy));\n \n                 cleanupCheckpointLogFiles();\n-            }\n-            finally\n+            } finally\n             {\n                 pruneLock.unlock();\n             }\n@@ -104,26 +104,26 @@ public class LogPruningImpl implements LogPruning\n     {\n         var checkpointFile = logFiles.getCheckpointFile();\n         var checkpointFiles = checkpointFile.getDetachedCheckpointFiles();\n-        if ( isNotEmpty( checkpointFiles ) && checkpointFiles.length > checkpointFilesToKeep )\n+        if (isNotEmpty(checkpointFiles) && checkpointFiles.length > checkpointFilesToKeep)\n         {\n             long highestVersionToRemove = checkpointFile.getCurrentDetachedLogVersion() - checkpointFilesToKeep;\n             int filesDeleted = 0;\n-            for ( Path file : checkpointFiles )\n+            for (Path file : checkpointFiles)\n             {\n-                if ( checkpointFile.getDetachedCheckpointLogFileVersion( file ) <= highestVersionToRemove )\n+                if (checkpointFile.getDetachedCheckpointLogFileVersion(file) <= highestVersionToRemove)\n                 {\n-                    fs.deleteFile( file );\n+                    fs.deleteFile(file);\n                     filesDeleted++;\n                 }\n             }\n-            log.info( \"Pruned \" + filesDeleted + \" checkpoint log files. Lowest preserved version: \" + (highestVersionToRemove + 1) );\n+            log.info(\"Pruned \" + filesDeleted + \" checkpoint log files. Lowest preserved version: \" + (highestVersionToRemove + 1));\n         }\n     }\n \n     @Override\n-    public boolean mightHaveLogsToPrune( long upToVersion )\n+    public boolean mightHaveLogsToPrune(long upToVersion)\n     {\n-        return pruneStrategy.findLogVersionsToDelete( upToVersion ).count() > 0;\n+        return pruneStrategy.findLogVersionsToDelete(upToVersion).count() > 0;\n     }\n \n     @Override\n@@ -140,7 +140,7 @@ public class LogPruningImpl implements LogPruning\n         private long fromVersion;\n         private long toVersion;\n \n-        private CountingDeleter( LogFiles logFiles, FileSystemAbstraction fs )\n+        private CountingDeleter(LogFiles logFiles, FileSystemAbstraction fs)\n         {\n             this.logFiles = logFiles;\n             this.fs = fs;\n@@ -149,19 +149,19 @@ public class LogPruningImpl implements LogPruning\n         }\n \n         @Override\n-        public void accept( long version )\n+        public void accept(long version)\n         {\n-            fromVersion = fromVersion == NO_VERSION ? version : Math.min( fromVersion, version );\n-            toVersion = toVersion == NO_VERSION ? version : Math.max( toVersion, version );\n-            Path logFile = logFiles.getLogFile().getLogFileForVersion( version );\n-            fs.deleteFile( logFile );\n+            fromVersion = fromVersion == NO_VERSION ? version : Math.min(fromVersion, version);\n+            toVersion = toVersion == NO_VERSION ? version : Math.max(toVersion, version);\n+            Path logFile = logFiles.getLogFile().getLogFileForVersion(version);\n+            fs.deleteFile(logFile);\n         }\n \n-        String describeResult( LogPruneStrategy strategy )\n+        String describeResult(LogPruneStrategy strategy)\n         {\n             String pruned = fromVersion == NO_VERSION ? \"No log version pruned\" :\n-                            fromVersion == toVersion ? \"Pruned log version \" + fromVersion :\n-                            \"Pruned log versions \" + fromVersion + \" through \" + toVersion;\n+              fromVersion == toVersion ? \"Pruned log version \" + fromVersion :\n+                \"Pruned log versions \" + fromVersion + \" through \" + toVersion;\n             return pruned + \". The strategy used was '\" + strategy + \"'. \";\n         }\n     }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}