{
    "project_name": "neo4j-neo4j",
    "error_id": "3049",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3049/AdversarialFileWatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3049/AdversarialFileWatcher.java\nindex 5815f471562..728bd380d8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3049/AdversarialFileWatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3049/AdversarialFileWatcher.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.adversaries.watcher;\n \n import java.io.IOException;\n@@ -36,7 +37,7 @@ public class AdversarialFileWatcher implements FileWatcher\n     private final FileWatcher fileWatcher;\n     private final Adversary adversary;\n \n-    public AdversarialFileWatcher( FileWatcher fileWatcher, Adversary adversary )\n+    public AdversarialFileWatcher(FileWatcher fileWatcher, Adversary adversary)\n     {\n         this.fileWatcher = fileWatcher;\n         this.adversary = adversary;\n@@ -45,27 +46,27 @@ public class AdversarialFileWatcher implements FileWatcher\n     @Override\n     public void close() throws IOException\n     {\n-        adversary.injectFailure( IOException.class );\n+        adversary.injectFailure(IOException.class);\n         fileWatcher.close();\n     }\n \n     @Override\n-    public WatchedResource watch( Path path ) throws IOException\n+    public WatchedResource watch(Path path) throws IOException\n     {\n-        adversary.injectFailure( IOException.class );\n-        return fileWatcher.watch( path );\n+        adversary.injectFailure(IOException.class);\n+        return fileWatcher.watch(path);\n     }\n \n     @Override\n-    public void addFileWatchEventListener( FileWatchEventListener listener )\n+    public void addFileWatchEventListener(FileWatchEventListener listener)\n     {\n-        fileWatcher.addFileWatchEventListener( listener );\n+        fileWatcher.addFileWatchEventListener(listener);\n     }\n \n     @Override\n-    public void removeFileWatchEventListener( FileWatchEventListener listener )\n+    public void removeFileWatchEventListener(FileWatchEventListener listener)\n     {\n-        fileWatcher.removeFileWatchEventListener( listener );\n+        fileWatcher.removeFileWatchEventListener(listener);\n     }\n \n     @Override\n@@ -77,7 +78,7 @@ public class AdversarialFileWatcher implements FileWatcher\n     @Override\n     public void startWatching() throws InterruptedException\n     {\n-        adversary.injectFailure( InterruptedException.class );\n+        adversary.injectFailure(InterruptedException.class);\n         fileWatcher.startWatching();\n     }\n }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}