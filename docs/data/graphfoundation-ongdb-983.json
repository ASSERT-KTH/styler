{
    "project_name": "graphfoundation-ongdb",
    "error_id": "983",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "201",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/983/SchemaProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/983/SchemaProcedure.java\nindex 38d0b3e17a3..5adef9b57cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/983/SchemaProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/983/SchemaProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.builtinprocs;\n \n import java.util.ArrayList;\n@@ -53,513 +54,512 @@ import org.neo4j.kernel.internal.GraphDatabaseAPI;\n public class SchemaProcedure\n {\n \n-    private final GraphDatabaseAPI graphDatabaseAPI;\n-    private final KernelTransaction kernelTransaction;\n+  private final GraphDatabaseAPI graphDatabaseAPI;\n+  private final KernelTransaction kernelTransaction;\n \n-    public SchemaProcedure( final GraphDatabaseAPI graphDatabaseAPI, final KernelTransaction kernelTransaction )\n-    {\n-        this.graphDatabaseAPI = graphDatabaseAPI;\n-        this.kernelTransaction = kernelTransaction;\n-    }\n+  public SchemaProcedure(final GraphDatabaseAPI graphDatabaseAPI, final KernelTransaction kernelTransaction)\n+  {\n+    this.graphDatabaseAPI = graphDatabaseAPI;\n+    this.kernelTransaction = kernelTransaction;\n+  }\n+\n+  public GraphResult buildSchemaGraph()\n+  {\n+    final Map<String, VirtualNodeHack> nodes = new HashMap<>();\n+    final Map<String, Set<VirtualRelationshipHack>> relationships = new HashMap<>();\n \n-    public GraphResult buildSchemaGraph()\n+    try (Statement statement = kernelTransaction.acquireStatement())\n     {\n-        final Map<String,VirtualNodeHack> nodes = new HashMap<>();\n-        final Map<String,Set<VirtualRelationshipHack>> relationships = new HashMap<>();\n+      Read dataRead = kernelTransaction.dataRead();\n+      TokenRead tokenRead = kernelTransaction.tokenRead();\n+      TokenNameLookup tokenNameLookup = new SilentTokenNameLookup(tokenRead);\n+      SchemaRead schemaRead = kernelTransaction.schemaRead();\n+      try (Transaction transaction = graphDatabaseAPI.beginTx())\n+      {\n+        // add all labelsInDatabase\n+        try (ResourceIterator<Label> labelsInDatabase = graphDatabaseAPI.getAllLabelsInUse().iterator())\n+        {\n+          while (labelsInDatabase.hasNext())\n+          {\n+            Label label = labelsInDatabase.next();\n+            int labelId = tokenRead.nodeLabel(label.name());\n+            Map<String, Object> properties = new HashMap<>();\n+\n+            Iterator<IndexReference> indexReferences = schemaRead.indexesGetForLabel(labelId);\n+            ArrayList<String> indexes = new ArrayList<>();\n+            while (indexReferences.hasNext())\n+            {\n+              IndexReference index = indexReferences.next();\n+              if (!index.isUnique())\n+              {\n+                String[] propertyNames = PropertyNameUtils.getPropertyKeys(\n+                    tokenNameLookup, index.properties());\n+                indexes.add(String.join(\",\", propertyNames));\n+              }\n+            }\n+            properties.put(\"indexes\", indexes);\n+\n+            Iterator<ConstraintDescriptor> nodePropertyConstraintIterator =\n+                schemaRead.constraintsGetForLabel(labelId);\n+            ArrayList<String> constraints = new ArrayList<>();\n+            while (nodePropertyConstraintIterator.hasNext())\n+            {\n+              ConstraintDescriptor constraint = nodePropertyConstraintIterator.next();\n+              constraints.add(constraint.prettyPrint(tokenNameLookup));\n+            }\n+            properties.put(\"constraints\", constraints);\n+\n+            getOrCreateLabel(label.name(), properties, nodes);\n+          }\n+        }\n+\n+        //add all relationships\n \n-        try ( Statement statement = kernelTransaction.acquireStatement() )\n+        try (ResourceIterator<RelationshipType> relationshipTypeIterator =\n+                 graphDatabaseAPI.getAllRelationshipTypesInUse().iterator())\n         {\n-            Read dataRead = kernelTransaction.dataRead();\n-            TokenRead tokenRead = kernelTransaction.tokenRead();\n-            TokenNameLookup tokenNameLookup = new SilentTokenNameLookup( tokenRead );\n-            SchemaRead schemaRead = kernelTransaction.schemaRead();\n-            try ( Transaction transaction = graphDatabaseAPI.beginTx() )\n+          while (relationshipTypeIterator.hasNext())\n+          {\n+            RelationshipType relationshipType = relationshipTypeIterator.next();\n+            String relationshipTypeGetName = relationshipType.name();\n+            int relId = tokenRead.relationshipType(relationshipTypeGetName);\n+            try (ResourceIterator<Label> labelsInUse = graphDatabaseAPI.getAllLabelsInUse().iterator())\n             {\n-                // add all labelsInDatabase\n-                try ( ResourceIterator<Label> labelsInDatabase = graphDatabaseAPI.getAllLabelsInUse().iterator() )\n+              List<VirtualNodeHack> startNodes = new LinkedList<>();\n+              List<VirtualNodeHack> endNodes = new LinkedList<>();\n+\n+              while (labelsInUse.hasNext())\n+              {\n+                Label labelToken = labelsInUse.next();\n+                String labelName = labelToken.name();\n+                Map<String, Object> properties = new HashMap<>();\n+                VirtualNodeHack node = getOrCreateLabel(labelName, properties, nodes);\n+                int labelId = tokenRead.nodeLabel(labelName);\n+\n+                if (dataRead.countsForRelationship(labelId, relId, Read.ANY_LABEL) > 0)\n                 {\n-                    while ( labelsInDatabase.hasNext() )\n-                    {\n-                        Label label = labelsInDatabase.next();\n-                        int labelId = tokenRead.nodeLabel( label.name() );\n-                        Map<String,Object> properties = new HashMap<>();\n-\n-                        Iterator<IndexReference> indexReferences = schemaRead.indexesGetForLabel( labelId );\n-                        ArrayList<String> indexes = new ArrayList<>();\n-                        while ( indexReferences.hasNext() )\n-                        {\n-                            IndexReference index = indexReferences.next();\n-                            if ( !index.isUnique() )\n-                            {\n-                                String[] propertyNames = PropertyNameUtils.getPropertyKeys(\n-                                        tokenNameLookup, index.properties() );\n-                                indexes.add( String.join( \",\", propertyNames ) );\n-                            }\n-                        }\n-                        properties.put( \"indexes\", indexes );\n-\n-                        Iterator<ConstraintDescriptor> nodePropertyConstraintIterator =\n-                                schemaRead.constraintsGetForLabel( labelId );\n-                        ArrayList<String> constraints = new ArrayList<>();\n-                        while ( nodePropertyConstraintIterator.hasNext() )\n-                        {\n-                            ConstraintDescriptor constraint = nodePropertyConstraintIterator.next();\n-                            constraints.add( constraint.prettyPrint( tokenNameLookup ) );\n-                        }\n-                        properties.put( \"constraints\", constraints );\n-\n-                        getOrCreateLabel( label.name(), properties, nodes );\n-                    }\n+                  startNodes.add(node);\n                 }\n+                if (dataRead.countsForRelationship(Read.ANY_LABEL, relId, labelId) > 0)\n+                {\n+                  endNodes.add(node);\n+                }\n+              }\n \n-                //add all relationships\n-\n-                try ( ResourceIterator<RelationshipType> relationshipTypeIterator =\n-                        graphDatabaseAPI.getAllRelationshipTypesInUse().iterator() )\n+              for (VirtualNodeHack startNode : startNodes)\n+              {\n+                for (VirtualNodeHack endNode : endNodes)\n                 {\n-                    while ( relationshipTypeIterator.hasNext() )\n-                    {\n-                        RelationshipType relationshipType = relationshipTypeIterator.next();\n-                        String relationshipTypeGetName = relationshipType.name();\n-                        int relId = tokenRead.relationshipType( relationshipTypeGetName );\n-                        try ( ResourceIterator<Label> labelsInUse = graphDatabaseAPI.getAllLabelsInUse().iterator() )\n-                        {\n-                            List<VirtualNodeHack> startNodes = new LinkedList<>();\n-                            List<VirtualNodeHack> endNodes = new LinkedList<>();\n-\n-                            while ( labelsInUse.hasNext() )\n-                            {\n-                                Label labelToken = labelsInUse.next();\n-                                String labelName = labelToken.name();\n-                                Map<String,Object> properties = new HashMap<>();\n-                                VirtualNodeHack node = getOrCreateLabel( labelName, properties, nodes );\n-                                int labelId = tokenRead.nodeLabel( labelName );\n-\n-                                if ( dataRead.countsForRelationship( labelId, relId, Read.ANY_LABEL ) > 0 )\n-                                {\n-                                    startNodes.add( node );\n-                                }\n-                                if ( dataRead.countsForRelationship( Read.ANY_LABEL, relId, labelId ) > 0 )\n-                                {\n-                                    endNodes.add( node );\n-                                }\n-                            }\n-\n-                            for ( VirtualNodeHack startNode : startNodes )\n-                            {\n-                                for ( VirtualNodeHack endNode : endNodes )\n-                                {\n-                                            addRelationship( startNode, endNode, relationshipTypeGetName, relationships );\n-                                }\n-                            }\n-                        }\n-                    }\n+                  addRelationship(startNode, endNode, relationshipTypeGetName, relationships);\n                 }\n-                transaction.success();\n-                return getGraphResult( nodes, relationships );\n+              }\n             }\n+          }\n         }\n+        transaction.success();\n+        return getGraphResult(nodes, relationships);\n+      }\n     }\n+  }\n \n-    public static class GraphResult\n-    {\n-        public final List<Node> nodes;\n-        public final List<Relationship> relationships;\n+  public static class GraphResult\n+  {\n+    public final List<Node> nodes;\n+    public final List<Relationship> relationships;\n \n-        public GraphResult( List<Node> nodes, List<Relationship> relationships )\n-        {\n-            this.nodes = nodes;\n-            this.relationships = relationships;\n-        }\n+    public GraphResult(List<Node> nodes, List<Relationship> relationships)\n+    {\n+      this.nodes = nodes;\n+      this.relationships = relationships;\n     }\n+  }\n \n-    private VirtualNodeHack getOrCreateLabel( String label, Map<String,Object> properties,\n-            final Map<String,VirtualNodeHack> nodeMap )\n+  private VirtualNodeHack getOrCreateLabel(String label, Map<String, Object> properties,\n+                                           final Map<String, VirtualNodeHack> nodeMap)\n+  {\n+    if (nodeMap.containsKey(label))\n     {\n-        if ( nodeMap.containsKey( label ) )\n-        {\n-            return nodeMap.get( label );\n-        }\n-        VirtualNodeHack node = new VirtualNodeHack( label, properties );\n-        nodeMap.put( label, node );\n-        return node;\n+      return nodeMap.get(label);\n     }\n-\n-    private void addRelationship( VirtualNodeHack startNode, VirtualNodeHack endNode, String relType,\n-            final Map<String,Set<VirtualRelationshipHack>> relationshipMap )\n+    VirtualNodeHack node = new VirtualNodeHack(label, properties);\n+    nodeMap.put(label, node);\n+    return node;\n+  }\n+\n+  private void addRelationship(VirtualNodeHack startNode, VirtualNodeHack endNode, String relType,\n+                               final Map<String, Set<VirtualRelationshipHack>> relationshipMap)\n+  {\n+    Set<VirtualRelationshipHack> relationshipsForType;\n+    if (!relationshipMap.containsKey(relType))\n     {\n-        Set<VirtualRelationshipHack> relationshipsForType;\n-        if ( !relationshipMap.containsKey( relType ) )\n-        {\n-            relationshipsForType = new HashSet<>();\n-            relationshipMap.put( relType, relationshipsForType );\n-        }\n-        else\n-        {\n-            relationshipsForType = relationshipMap.get( relType );\n-        }\n-        VirtualRelationshipHack relationship = new VirtualRelationshipHack( startNode, endNode, relType );\n-        if ( !relationshipsForType.contains( relationship ) )\n-        {\n-            relationshipsForType.add( relationship );\n-        }\n+      relationshipsForType = new HashSet<>();\n+      relationshipMap.put(relType, relationshipsForType);\n+    } else\n+    {\n+      relationshipsForType = relationshipMap.get(relType);\n     }\n-\n-    private GraphResult getGraphResult( final Map<String,VirtualNodeHack> nodeMap,\n-            final Map<String,Set<VirtualRelationshipHack>> relationshipMap )\n+    VirtualRelationshipHack relationship = new VirtualRelationshipHack(startNode, endNode, relType);\n+    if (!relationshipsForType.contains(relationship))\n     {\n-        List<Relationship> relationships = new LinkedList<>();\n-        for ( Set<VirtualRelationshipHack> relationship : relationshipMap.values() )\n-        {\n-            relationships.addAll( relationship );\n-        }\n-\n-        GraphResult graphResult;\n-        graphResult = new GraphResult( new ArrayList<>( nodeMap.values() ), relationships );\n-\n-        return graphResult;\n+      relationshipsForType.add(relationship);\n     }\n+  }\n \n-    private static class VirtualRelationshipHack implements Relationship\n+  private GraphResult getGraphResult(final Map<String, VirtualNodeHack> nodeMap,\n+                                     final Map<String, Set<VirtualRelationshipHack>> relationshipMap)\n+  {\n+    List<Relationship> relationships = new LinkedList<>();\n+    for (Set<VirtualRelationshipHack> relationship : relationshipMap.values())\n     {\n+      relationships.addAll(relationship);\n+    }\n \n-        private static AtomicLong MIN_ID = new AtomicLong( -1 );\n+    GraphResult graphResult;\n+    graphResult = new GraphResult(new ArrayList<>(nodeMap.values()), relationships);\n \n-        private final long id;\n-        private final Node startNode;\n-        private final Node endNode;\n-        private final RelationshipType relationshipType;\n+    return graphResult;\n+  }\n \n-        VirtualRelationshipHack( final VirtualNodeHack startNode, final VirtualNodeHack endNode, final String type )\n-        {\n-            this.id = MIN_ID.getAndDecrement();\n-            this.startNode = startNode;\n-            this.endNode = endNode;\n-            relationshipType = () -> type;\n-        }\n+  private static class VirtualRelationshipHack implements Relationship\n+  {\n \n-        @Override\n-        public long getId()\n-        {\n-            return id;\n-        }\n+    private static AtomicLong MIN_ID = new AtomicLong(-1);\n \n-        @Override\n-        public Node getStartNode()\n-        {\n-            return startNode;\n-        }\n+    private final long id;\n+    private final Node startNode;\n+    private final Node endNode;\n+    private final RelationshipType relationshipType;\n \n-        @Override\n-        public Node getEndNode()\n-        {\n-            return endNode;\n-        }\n+    VirtualRelationshipHack(final VirtualNodeHack startNode, final VirtualNodeHack endNode, final String type)\n+    {\n+      this.id = MIN_ID.getAndDecrement();\n+      this.startNode = startNode;\n+      this.endNode = endNode;\n+      relationshipType = () -> type;\n+    }\n \n-        @Override\n-        public RelationshipType getType()\n-        {\n-            return relationshipType;\n-        }\n+    @Override\n+    public long getId()\n+    {\n+      return id;\n+    }\n \n-        @Override\n-        public Map<String,Object> getAllProperties()\n-        {\n-            return new HashMap<>();\n-        }\n+    @Override\n+    public Node getStartNode()\n+    {\n+      return startNode;\n+    }\n \n-        @Override\n-        public void delete()\n-        {\n+    @Override\n+    public Node getEndNode()\n+    {\n+      return endNode;\n+    }\n \n-        }\n+    @Override\n+    public RelationshipType getType()\n+    {\n+      return relationshipType;\n+    }\n \n-        @Override\n-        public Node getOtherNode( Node node )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Map<String, Object> getAllProperties()\n+    {\n+      return new HashMap<>();\n+    }\n \n-        @Override\n-        public Node[] getNodes()\n-        {\n-            return new Node[0];\n-        }\n+    @Override\n+    public void delete()\n+    {\n \n-        @Override\n-        public boolean isType( RelationshipType type )\n-        {\n-            return false;\n-        }\n+    }\n \n-        @Override\n-        public GraphDatabaseService getGraphDatabase()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Node getOtherNode(Node node)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public boolean hasProperty( String key )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public Node[] getNodes()\n+    {\n+      return new Node[0];\n+    }\n \n-        @Override\n-        public Object getProperty( String key )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public boolean isType(RelationshipType type)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Object getProperty( String key, Object defaultValue )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public GraphDatabaseService getGraphDatabase()\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public void setProperty( String key, Object value )\n-        {\n+    @Override\n+    public boolean hasProperty(String key)\n+    {\n+      return false;\n+    }\n \n-        }\n+    @Override\n+    public Object getProperty(String key)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public Object removeProperty( String key )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Object getProperty(String key, Object defaultValue)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public Iterable<String> getPropertyKeys()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public void setProperty(String key, Object value)\n+    {\n \n-        @Override\n-        public Map<String,Object> getProperties( String... keys )\n-        {\n-            return null;\n-        }\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"VirtualRelationshipHack[%s]\", id );\n-        }\n+    @Override\n+    public Object removeProperty(String key)\n+    {\n+      return null;\n     }\n \n-    private static class VirtualNodeHack implements Node\n+    @Override\n+    public Iterable<String> getPropertyKeys()\n     {\n+      return null;\n+    }\n \n-        private final HashMap<String,Object> propertyMap = new HashMap<>();\n+    @Override\n+    public Map<String, Object> getProperties(String... keys)\n+    {\n+      return null;\n+    }\n \n-        private static AtomicLong MIN_ID = new AtomicLong( -1 );\n-        private final long id;\n-        private final Label label;\n+    @Override\n+    public String toString()\n+    {\n+      return String.format(\"VirtualRelationshipHack[%s]\", id);\n+    }\n+  }\n \n-        VirtualNodeHack( final String label, Map<String,Object> properties )\n-        {\n-            this.id = MIN_ID.getAndDecrement();\n-            this.label = Label.label( label );\n-            propertyMap.putAll( properties );\n-            propertyMap.put( \"name\", label );\n-        }\n+  private static class VirtualNodeHack implements Node\n+  {\n \n-        @Override\n-        public long getId()\n-        {\n-            return id;\n-        }\n+    private final HashMap<String, Object> propertyMap = new HashMap<>();\n \n-        @Override\n-        public Map<String,Object> getAllProperties()\n-        {\n-            return propertyMap;\n-        }\n+    private static AtomicLong MIN_ID = new AtomicLong(-1);\n+    private final long id;\n+    private final Label label;\n \n-        @Override\n-        public Iterable<Label> getLabels()\n-        {\n-            return Collections.singletonList( label );\n-        }\n+    VirtualNodeHack(final String label, Map<String, Object> properties)\n+    {\n+      this.id = MIN_ID.getAndDecrement();\n+      this.label = Label.label(label);\n+      propertyMap.putAll(properties);\n+      propertyMap.put(\"name\", label);\n+    }\n \n-        @Override\n-        public void delete()\n-        {\n+    @Override\n+    public long getId()\n+    {\n+      return id;\n+    }\n \n-        }\n+    @Override\n+    public Map<String, Object> getAllProperties()\n+    {\n+      return propertyMap;\n+    }\n \n-        @Override\n-        public Iterable<Relationship> getRelationships()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Iterable<Label> getLabels()\n+    {\n+      return Collections.singletonList(label);\n+    }\n \n-        @Override\n-        public boolean hasRelationship()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public void delete()\n+    {\n \n-        @Override\n-        public Iterable<Relationship> getRelationships( RelationshipType... types )\n-        {\n-            return null;\n-        }\n+    }\n \n-        @Override\n-        public Iterable<Relationship> getRelationships( Direction direction, RelationshipType... types )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Iterable<Relationship> getRelationships()\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public Iterable<Relationship> getRelationships( RelationshipType type, Direction direction )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public boolean hasRelationship()\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Iterable<Relationship> getRelationships( Direction direction )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Iterable<Relationship> getRelationships(RelationshipType... types)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public boolean hasRelationship( RelationshipType... types )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public Iterable<Relationship> getRelationships(Direction direction, RelationshipType... types)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public boolean hasRelationship( Direction direction, RelationshipType... types )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public Iterable<Relationship> getRelationships(RelationshipType type, Direction direction)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public boolean hasRelationship( RelationshipType type, Direction direction )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public Iterable<Relationship> getRelationships(Direction direction)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public boolean hasRelationship( Direction direction )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean hasRelationship(RelationshipType... types)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Relationship getSingleRelationship( RelationshipType type, Direction dir )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public boolean hasRelationship(Direction direction, RelationshipType... types)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Relationship createRelationshipTo( Node otherNode, RelationshipType type )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public boolean hasRelationship(RelationshipType type, Direction direction)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Iterable<RelationshipType> getRelationshipTypes()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public boolean hasRelationship(Direction direction)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public int getDegree()\n-        {\n-            return 0;\n-        }\n+    @Override\n+    public Relationship getSingleRelationship(RelationshipType type, Direction dir)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public int getDegree( RelationshipType type )\n-        {\n-            return 0;\n-        }\n+    @Override\n+    public Relationship createRelationshipTo(Node otherNode, RelationshipType type)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public int getDegree( RelationshipType type, Direction direction )\n-        {\n-            return 0;\n-        }\n+    @Override\n+    public Iterable<RelationshipType> getRelationshipTypes()\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public int getDegree( Direction direction )\n-        {\n-            return 0;\n-        }\n+    @Override\n+    public int getDegree()\n+    {\n+      return 0;\n+    }\n \n-        @Override\n-        public void addLabel( Label label )\n-        {\n+    @Override\n+    public int getDegree(RelationshipType type)\n+    {\n+      return 0;\n+    }\n \n-        }\n+    @Override\n+    public int getDegree(RelationshipType type, Direction direction)\n+    {\n+      return 0;\n+    }\n \n-        @Override\n-        public void removeLabel( Label label )\n-        {\n+    @Override\n+    public int getDegree(Direction direction)\n+    {\n+      return 0;\n+    }\n \n-        }\n+    @Override\n+    public void addLabel(Label label)\n+    {\n \n-        @Override\n-        public boolean hasLabel( Label label )\n-        {\n-            return false;\n-        }\n+    }\n \n-        @Override\n-        public GraphDatabaseService getGraphDatabase()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public void removeLabel(Label label)\n+    {\n \n-        @Override\n-        public boolean hasProperty( String key )\n-        {\n-            return false;\n-        }\n+    }\n \n-        @Override\n-        public Object getProperty( String key )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public boolean hasLabel(Label label)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Object getProperty( String key, Object defaultValue )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public GraphDatabaseService getGraphDatabase()\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public void setProperty( String key, Object value )\n-        {\n+    @Override\n+    public boolean hasProperty(String key)\n+    {\n+      return false;\n+    }\n \n-        }\n+    @Override\n+    public Object getProperty(String key)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public Object removeProperty( String key )\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Object getProperty(String key, Object defaultValue)\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public Iterable<String> getPropertyKeys()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public void setProperty(String key, Object value)\n+    {\n \n-        @Override\n-        public Map<String,Object> getProperties( String... keys )\n-        {\n-            return null;\n-        }\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"VirtualNodeHack[%s]\", id );\n-        }\n+    @Override\n+    public Object removeProperty(String key)\n+    {\n+      return null;\n+    }\n+\n+    @Override\n+    public Iterable<String> getPropertyKeys()\n+    {\n+      return null;\n+    }\n+\n+    @Override\n+    public Map<String, Object> getProperties(String... keys)\n+    {\n+      return null;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return String.format(\"VirtualNodeHack[%s]\", id);\n     }\n+  }\n }\n",
            "diff_size": 570
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/983/SchemaProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/983/SchemaProcedure.java\nindex 38d0b3e17a3..f653c50dbbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/983/SchemaProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/983/SchemaProcedure.java\n@@ -52,7 +52,6 @@ import org.neo4j.kernel.internal.GraphDatabaseAPI;\n \n public class SchemaProcedure\n {\n-\n     private final GraphDatabaseAPI graphDatabaseAPI;\n     private final KernelTransaction kernelTransaction;\n \n@@ -91,16 +90,14 @@ public class SchemaProcedure\n                             IndexReference index = indexReferences.next();\n                             if ( !index.isUnique() )\n                             {\n-                                String[] propertyNames = PropertyNameUtils.getPropertyKeys(\n-                                        tokenNameLookup, index.properties() );\n-                                indexes.add( String.join( \",\", propertyNames ) );\n+                                String[] propertyNames = PropertyNameUtils.getPropertyKeys( tokenNameLookup, index.properties() );\n+indexes.add( String.join( \",\", propertyNames ) );\n                             }\n                         }\n                         properties.put( \"indexes\", indexes );\n \n-                        Iterator<ConstraintDescriptor> nodePropertyConstraintIterator =\n-                                schemaRead.constraintsGetForLabel( labelId );\n-                        ArrayList<String> constraints = new ArrayList<>();\n+                        Iterator<ConstraintDescriptor> nodePropertyConstraintIterator = schemaRead.constraintsGetForLabel( labelId );\n+ArrayList<String> constraints = new ArrayList<>();\n                         while ( nodePropertyConstraintIterator.hasNext() )\n                         {\n                             ConstraintDescriptor constraint = nodePropertyConstraintIterator.next();\n@@ -114,8 +111,7 @@ public class SchemaProcedure\n \n                 //add all relationships\n \n-                try ( ResourceIterator<RelationshipType> relationshipTypeIterator =\n-                        graphDatabaseAPI.getAllRelationshipTypesInUse().iterator() )\n+                try ( ResourceIterator<RelationshipType> relationshipTypeIterator = graphDatabaseAPI.getAllRelationshipTypesInUse().iterator() )\n                 {\n                     while ( relationshipTypeIterator.hasNext() )\n                     {\n@@ -134,12 +130,12 @@ public class SchemaProcedure\n                                 Map<String,Object> properties = new HashMap<>();\n                                 VirtualNodeHack node = getOrCreateLabel( labelName, properties, nodes );\n                                 int labelId = tokenRead.nodeLabel( labelName );\n-\n-                                if ( dataRead.countsForRelationship( labelId, relId, Read.ANY_LABEL ) > 0 )\n+if ( dataRead.countsForRelationship( labelId, relId, Read.ANY_LABEL ) > 0 )\n                                 {\n                                     startNodes.add( node );\n                                 }\n-                                if ( dataRead.countsForRelationship( Read.ANY_LABEL, relId, labelId ) > 0 )\n+\n+if ( dataRead.countsForRelationship( Read.ANY_LABEL, relId, labelId ) > 0 )\n                                 {\n                                     endNodes.add( node );\n                                 }\n@@ -149,8 +145,8 @@ public class SchemaProcedure\n                             {\n                                 for ( VirtualNodeHack endNode : endNodes )\n                                 {\n-                                            addRelationship( startNode, endNode, relationshipTypeGetName, relationships );\n-                                }\n+    addRelationship( startNode, endNode, relationshipTypeGetName, relationships );\n+    }\n                             }\n                         }\n                     }\n@@ -164,7 +160,8 @@ public class SchemaProcedure\n     public static class GraphResult\n     {\n         public final List<Node> nodes;\n-        public final List<Relationship> relationships;\n+\n+public final List<Relationship> relationships;\n \n         public GraphResult( List<Node> nodes, List<Relationship> relationships )\n         {\n@@ -173,20 +170,19 @@ public class SchemaProcedure\n         }\n     }\n \n-    private VirtualNodeHack getOrCreateLabel( String label, Map<String,Object> properties,\n-            final Map<String,VirtualNodeHack> nodeMap )\n+    private VirtualNodeHack getOrCreateLabel( String label, Map<String,Object> properties, final Map<String,VirtualNodeHack> nodeMap )\n     {\n         if ( nodeMap.containsKey( label ) )\n         {\n             return nodeMap.get( label );\n         }\n-        VirtualNodeHack node = new VirtualNodeHack( label, properties );\n+\n+VirtualNodeHack node = new VirtualNodeHack( label, properties );\n         nodeMap.put( label, node );\n         return node;\n     }\n \n-    private void addRelationship( VirtualNodeHack startNode, VirtualNodeHack endNode, String relType,\n-            final Map<String,Set<VirtualRelationshipHack>> relationshipMap )\n+    private void addRelationship( VirtualNodeHack startNode, VirtualNodeHack endNode, String relType, final Map<String,Set<VirtualRelationshipHack>> relationshipMap )\n     {\n         Set<VirtualRelationshipHack> relationshipsForType;\n         if ( !relationshipMap.containsKey( relType ) )\n@@ -198,15 +194,15 @@ public class SchemaProcedure\n         {\n             relationshipsForType = relationshipMap.get( relType );\n         }\n-        VirtualRelationshipHack relationship = new VirtualRelationshipHack( startNode, endNode, relType );\n+\n+VirtualRelationshipHack relationship = new VirtualRelationshipHack( startNode, endNode, relType );\n         if ( !relationshipsForType.contains( relationship ) )\n         {\n             relationshipsForType.add( relationship );\n         }\n     }\n \n-    private GraphResult getGraphResult( final Map<String,VirtualNodeHack> nodeMap,\n-            final Map<String,Set<VirtualRelationshipHack>> relationshipMap )\n+    private GraphResult getGraphResult( final Map<String,VirtualNodeHack> nodeMap, final Map<String,Set<VirtualRelationshipHack>> relationshipMap )\n     {\n         List<Relationship> relationships = new LinkedList<>();\n         for ( Set<VirtualRelationshipHack> relationship : relationshipMap.values() )\n@@ -216,14 +212,12 @@ public class SchemaProcedure\n \n         GraphResult graphResult;\n         graphResult = new GraphResult( new ArrayList<>( nodeMap.values() ), relationships );\n-\n-        return graphResult;\n+return graphResult;\n     }\n \n     private static class VirtualRelationshipHack implements Relationship\n     {\n-\n-        private static AtomicLong MIN_ID = new AtomicLong( -1 );\n+    private static AtomicLong MIN_ID = new AtomicLong( -1 );\n \n         private final long id;\n         private final Node startNode;\n@@ -271,8 +265,7 @@ public class SchemaProcedure\n         @Override\n         public void delete()\n         {\n-\n-        }\n+}\n \n         @Override\n         public Node getOtherNode( Node node )\n@@ -319,8 +312,7 @@ public class SchemaProcedure\n         @Override\n         public void setProperty( String key, Object value )\n         {\n-\n-        }\n+}\n \n         @Override\n         public Object removeProperty( String key )\n@@ -349,8 +341,7 @@ public class SchemaProcedure\n \n     private static class VirtualNodeHack implements Node\n     {\n-\n-        private final HashMap<String,Object> propertyMap = new HashMap<>();\n+    private final HashMap<String,Object> propertyMap = new HashMap<>();\n \n         private static AtomicLong MIN_ID = new AtomicLong( -1 );\n         private final long id;\n@@ -385,8 +376,7 @@ public class SchemaProcedure\n         @Override\n         public void delete()\n         {\n-\n-        }\n+}\n \n         @Override\n         public Iterable<Relationship> getRelationships()\n@@ -493,14 +483,12 @@ public class SchemaProcedure\n         @Override\n         public void addLabel( Label label )\n         {\n-\n-        }\n+}\n \n         @Override\n         public void removeLabel( Label label )\n         {\n-\n-        }\n+}\n \n         @Override\n         public boolean hasLabel( Label label )\n@@ -535,8 +523,7 @@ public class SchemaProcedure\n         @Override\n         public void setProperty( String key, Object value )\n         {\n-\n-        }\n+}\n \n         @Override\n         public Object removeProperty( String key )\n@@ -562,4 +549,4 @@ public class SchemaProcedure\n             return String.format( \"VirtualNodeHack[%s]\", id );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}