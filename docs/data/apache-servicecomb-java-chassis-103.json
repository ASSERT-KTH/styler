{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "103",
    "information": {
        "errors": [
            {
                "line": "181",
                "column": "57",
                "severity": "warning",
                "message": "'||' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  @Subscribe\n  public void onMicroserviceInstanceChanged(MicroserviceInstanceChangedEvent changedEvent) {\n    if (!appId.equals(changedEvent.getKey().getAppId()) ||\n        !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n      return;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/103/MicroserviceVersions.java\nindex 6e398c055c9..ba0237aee43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/103/MicroserviceVersions.java\n@@ -178,8 +178,8 @@ public class MicroserviceVersions {\n \n   @Subscribe\n   public void onMicroserviceInstanceChanged(MicroserviceInstanceChangedEvent changedEvent) {\n-    if (!appId.equals(changedEvent.getKey().getAppId()) ||\n-        !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n+    if (!appId.equals(changedEvent.getKey().getAppId())\n+        || !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n       return;\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "181",
                    "column": "57",
                    "severity": "warning",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/103/MicroserviceVersions.java\nindex 6e398c055c9..7016987e82b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/103/MicroserviceVersions.java\n@@ -178,8 +178,7 @@ public class MicroserviceVersions {\n \n   @Subscribe\n   public void onMicroserviceInstanceChanged(MicroserviceInstanceChangedEvent changedEvent) {\n-    if (!appId.equals(changedEvent.getKey().getAppId()) ||\n-        !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n+    if (!appId.equals(changedEvent.getKey().getAppId()) || !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n       return;\n     }\n \n@@ -197,4 +196,4 @@ public class MicroserviceVersions {\n     pendingPullCount.incrementAndGet();\n     appManager.getEventBus().post(new PullMicroserviceVersionsInstancesEvent(this, TimeUnit.SECONDS.toMillis(1)));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/103/MicroserviceVersions.java\nindex 6e398c055c9..a33b1f65268 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/103/MicroserviceVersions.java\n@@ -22,12 +22,9 @@ import java.util.Map;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Collectors;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.google.common.eventbus.Subscribe;\n-\n import io.servicecomb.foundation.common.concurrent.ConcurrentHashMapEx;\n import io.servicecomb.serviceregistry.RegistryUtils;\n import io.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n@@ -51,28 +48,30 @@ public class MicroserviceVersions {\n   private List<MicroserviceInstance> instances;\n \n   // key is service id\n+\n   private Map<String, MicroserviceVersion> versions = new ConcurrentHashMapEx<>();\n \n   // key is version rule\n+\n   private Map<String, MicroserviceVersionRule> versionRules = new ConcurrentHashMapEx<>();\n \n   // process pulled instances and create versionRule must be protected by lock\n   // otherwise maybe lost instance or version in versionRule\n+\n   private final Object lock = new Object();\n \n   // to avoid pull too many time\n   // only pendingPullCount is 0, then do a real pull \n+\n   private AtomicInteger pendingPullCount = new AtomicInteger();\n \n   public MicroserviceVersions(AppManager appManager, String appId, String microserviceName) {\n     this.appManager = appManager;\n     this.appId = appId;\n     this.microserviceName = microserviceName;\n-\n     LOGGER.info(\"create MicroserviceVersions, appId={}, microserviceName={}.\",\n-        appId,\n-        microserviceName);\n-\n+appId,\n+microserviceName);\n     appManager.getEventBus().register(this);\n   }\n \n@@ -103,38 +102,33 @@ public class MicroserviceVersions {\n       return;\n     }\n \n-    MicroserviceInstances microserviceInstances = RegistryUtils.findServiceInstances(appId,\n-        microserviceName,\n-        DefinitionConst.VERSION_RULE_ALL,\n-        revision);\n+    MicroserviceInstances microserviceInstances = RegistryUtils.findServiceInstances(appId, microserviceName, DefinitionConst.VERSION_RULE_ALL, revision);\n     if (microserviceInstances == null) {\n       // exception happens and try pull again later.\n       pendingPullCount.incrementAndGet();\n       appManager.getEventBus().post(new PullMicroserviceVersionsInstancesEvent(this, TimeUnit.SECONDS.toMillis(1)));\n       return;\n     }\n+\n     if (!microserviceInstances.isNeedRefresh()) {\n       return;\n     }\n+\n     List<MicroserviceInstance> pulledInstances = microserviceInstances.getInstancesResponse().getInstances();\n     String rev = microserviceInstances.getRevision();\n-\n     setInstances(pulledInstances, rev);\n   }\n \n   private void setInstances(List<MicroserviceInstance> pulledInstances, String rev) {\n     synchronized (lock) {\n-      instances = pulledInstances\n-          .stream()\n-          .filter(instance -> {\n-            return MicroserviceInstanceStatus.UP.equals(instance.getStatus());\n-          })\n-          .collect(Collectors.toList());\n+      instances = pulledInstances.stream().filter(instance -> {\n+                                            return MicroserviceInstanceStatus.UP.equals(instance.getStatus());\n+                                          })\n+                                          .collect(Collectors.toList());\n       for (MicroserviceInstance instance : instances) {\n         // ensure microserviceVersion exists\n         versions.computeIfAbsent(instance.getServiceId(), microserviceId -> {\n-          MicroserviceVersion microserviceVersion =\n-              appManager.getMicroserviceVersionFactory().create(microserviceName, microserviceId);\n+          MicroserviceVersion microserviceVersion = appManager.getMicroserviceVersionFactory().create(microserviceName, microserviceId);\n           for (MicroserviceVersionRule microserviceVersionRule : versionRules.values()) {\n             microserviceVersionRule.addMicroserviceVersion(microserviceVersion);\n           }\n@@ -145,6 +139,7 @@ public class MicroserviceVersions {\n       for (MicroserviceVersionRule microserviceVersionRule : versionRules.values()) {\n         microserviceVersionRule.setInstances(instances);\n       }\n+\n       revision = rev;\n     }\n   }\n@@ -157,29 +152,27 @@ public class MicroserviceVersions {\n         microserviceVersionRule = versionRules.computeIfAbsent(versionRule, this::createAndInitMicroserviceVersionRule);\n       }\n     }\n-\n     return microserviceVersionRule;\n   }\n \n   protected MicroserviceVersionRule createAndInitMicroserviceVersionRule(String strVersionRule) {\n     LOGGER.info(\"create MicroserviceVersionRule, appId={}, microserviceName={}, versionRule={}.\",\n-        appId,\n-        microserviceName,\n-        strVersionRule);\n+appId,\n+microserviceName,\n+strVersionRule);\n \n-    MicroserviceVersionRule microserviceVersionRule =\n-        new MicroserviceVersionRule(appId, microserviceName, strVersionRule);\n+    MicroserviceVersionRule microserviceVersionRule = new MicroserviceVersionRule(appId, microserviceName, strVersionRule);\n     for (MicroserviceVersion microserviceVersion : versions.values()) {\n       microserviceVersionRule.addMicroserviceVersion(microserviceVersion);\n     }\n+\n     microserviceVersionRule.setInstances(instances);\n     return microserviceVersionRule;\n   }\n \n   @Subscribe\n   public void onMicroserviceInstanceChanged(MicroserviceInstanceChangedEvent changedEvent) {\n-    if (!appId.equals(changedEvent.getKey().getAppId()) ||\n-        !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n+    if (!appId.equals(changedEvent.getKey().getAppId()) || !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n       return;\n     }\n \n@@ -194,7 +187,8 @@ public class MicroserviceVersions {\n     //   if pull 1/2/3, and then delete 3, but \"delete 3\" received before pull result, will have wrong 3.\n     // EXPIRE::\n     //   black/white config in SC changed, we must refresh all data from sc.\n+\n     pendingPullCount.incrementAndGet();\n     appManager.getEventBus().post(new PullMicroserviceVersionsInstancesEvent(this, TimeUnit.SECONDS.toMillis(1)));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "181",
                    "column": "57",
                    "severity": "warning",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/103/MicroserviceVersions.java\nindex 6e398c055c9..ba0237aee43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/103/MicroserviceVersions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/103/MicroserviceVersions.java\n@@ -178,8 +178,8 @@ public class MicroserviceVersions {\n \n   @Subscribe\n   public void onMicroserviceInstanceChanged(MicroserviceInstanceChangedEvent changedEvent) {\n-    if (!appId.equals(changedEvent.getKey().getAppId()) ||\n-        !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n+    if (!appId.equals(changedEvent.getKey().getAppId())\n+        || !microserviceName.equals(changedEvent.getKey().getServiceName())) {\n       return;\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}