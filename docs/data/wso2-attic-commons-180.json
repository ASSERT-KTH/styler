{
    "project_name": "wso2-attic-commons",
    "error_id": "180",
    "information": {
        "errors": [
            {
                "line": "96",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\tpublic Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n        return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n    }\n\n    public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/180/ExprEvaluationContextImpl.java\nindex acd4c2bab19..4ea8cdd226c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/180/ExprEvaluationContextImpl.java\n@@ -93,7 +93,7 @@ public class ExprEvaluationContextImpl implements EvaluationContext {\n     }\n \n \tpublic Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n-        return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n+return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n     }\n \n     public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/180/ExprEvaluationContextImpl.java\nindex acd4c2bab19..9ed1aa16524 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/180/ExprEvaluationContextImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.rtrep.v2;\n \n import java.util.Map;\n@@ -39,103 +40,107 @@ import org.w3c.dom.Document;\n  * instances to provide access to variables, link statuses, and the like.\n  */\n public class ExprEvaluationContextImpl implements EvaluationContext {\n-    private static final Log __log = LogFactory.getLog(ExprEvaluationContextImpl.class);\n+  private static final Log __log = LogFactory.getLog(ExprEvaluationContextImpl.class);\n \n-\tprivate OdeInternalInstance _native;\n+  private OdeInternalInstance _native;\n \n-\tprivate ScopeFrame _scopeInstance;\n+  private ScopeFrame _scopeInstance;\n \n-\tprivate Map<OLink, Boolean> _linkVals;\n+  private Map<OLink, Boolean> _linkVals;\n \n-\tprivate Node _root;\n+  private Node _root;\n \n-    public ExprEvaluationContextImpl(ScopeFrame scopeInstace, OdeInternalInstance ntv) {\n-        _native = ntv;\n-        _scopeInstance = scopeInstace;\n-    }\n+  public ExprEvaluationContextImpl(ScopeFrame scopeInstace, OdeInternalInstance ntv) {\n+    _native = ntv;\n+    _scopeInstance = scopeInstace;\n+  }\n \n-    public ExprEvaluationContextImpl(ScopeFrame scopeInstace, OdeInternalInstance ntv, Node root) {\n-        this(scopeInstace, ntv);\n-        _root = root;\n-    }\n+  public ExprEvaluationContextImpl(ScopeFrame scopeInstace, OdeInternalInstance ntv, Node root) {\n+    this(scopeInstace, ntv);\n+    _root = root;\n+  }\n \n-    public ExprEvaluationContextImpl(ScopeFrame scopeInstnce, OdeInternalInstance ntv, Map<OLink, Boolean> linkVals) {\n-        this(scopeInstnce, ntv);\n-        _linkVals = linkVals;\n-    }\n+  public ExprEvaluationContextImpl(ScopeFrame scopeInstnce, OdeInternalInstance ntv, Map<OLink, Boolean> linkVals) {\n+    this(scopeInstnce, ntv);\n+    _linkVals = linkVals;\n+  }\n \n-    public Node readVariable(OScope.Variable variable, OMessageVarType.Part part) throws FaultException {\n-        if (__log.isTraceEnabled())\n-            __log.trace(\"readVariable(\" + variable + \",\" + part + \")\");\n-\n-\t\t// TODO: check for null _scopeInstance\n-\n-        Node ret;\n-        if (variable.type instanceof OConstantVarType) {\n-            ret = ((OConstantVarType) variable.type).getValue();\n-        } else if (variable.type instanceof OPropertyVarType) {\n-            CorrelationSetInstance set = _scopeInstance.resolve(variable.name);\n-            CorrelationKey key = _native.readCorrelation(set);\n-            if (key == null) return null;\n-            String keyValue = key.getValues()[0];\n-            Document doc = DOMUtils.newDocument();\n-            ret = doc.createTextNode(keyValue);\n-        } else {\n-            VariableInstance varInstance = _scopeInstance.resolve(variable);\n-            if (varInstance == null)\n-                return null;\n-            VariableReadEvent vre = new VariableReadEvent();\n-            vre.setVarName(varInstance.declaration.name);\n-            sendEvent(vre);\n-            ret = _native.fetchVariableData(varInstance, _scopeInstance, part, false);\n-        }\n-        return ret;\n+  public Node readVariable(OScope.Variable variable, OMessageVarType.Part part) throws FaultException {\n+    if (__log.isTraceEnabled()) {\n+      __log.trace(\"readVariable(\" + variable + \",\" + part + \")\");\n     }\n \n-\tpublic Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n-        return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n-    }\n-\n-    public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n-        VariableInstance varInstance = _scopeInstance.resolve(variable);\n-        return _native.readProperty(varInstance, property);\n-    }\n-\n-\tpublic boolean isLinkActive(OLink olink) throws FaultException {\n-\t\treturn _linkVals.get(olink);\n-\t}\n-\n-    public String toString() {\n-        return \"{ExprEvaluationContextImpl scopeInstance=\" + _scopeInstance + \", activeLinks=\" + _linkVals + \"}\";\n+    // TODO: check for null _scopeInstance\n+\n+    Node ret;\n+    if (variable.type instanceof OConstantVarType) {\n+      ret = ((OConstantVarType) variable.type).getValue();\n+    } else if (variable.type instanceof OPropertyVarType) {\n+      CorrelationSetInstance set = _scopeInstance.resolve(variable.name);\n+      CorrelationKey key = _native.readCorrelation(set);\n+      if (key == null) {\n+        return null;\n+      }\n+      String keyValue = key.getValues()[0];\n+      Document doc = DOMUtils.newDocument();\n+      ret = doc.createTextNode(keyValue);\n+    } else {\n+      VariableInstance varInstance = _scopeInstance.resolve(variable);\n+      if (varInstance == null) {\n+        return null;\n+      }\n+      VariableReadEvent vre = new VariableReadEvent();\n+      vre.setVarName(varInstance.declaration.name);\n+      sendEvent(vre);\n+      ret = _native.fetchVariableData(varInstance, _scopeInstance, part, false);\n     }\n-\n-\tpublic Node getRootNode() {\n-\t\treturn _root;\n-\t}\n-\n-\tpublic Node getPartData(Element message, OMessageVarType.Part part) throws FaultException {\n-\t\treturn _native.getPartData(message, part);\n-\t}\n-\n-\tpublic Long getProcessId() {\n-\t\treturn _native.getPid();\n-\t}\n-\n-\tpublic boolean narrowTypes() {\n-\t\treturn true;\n-\t}\n-\n-\tprivate void sendEvent(ScopeEvent se) {\n-\t\t_scopeInstance.fillEventInfo(se);\n-\t\t_native.sendEvent(se);\n-\t}\n-\n-    public URI getBaseResourceURI() {\n-        return _native.getBaseResourceURI();\n-    }\n-\n-\tpublic Node getPropertyValue(QName propertyName) {\n-\t\treturn _native.getProcessProperty(propertyName);\n-\t}\n+    return ret;\n+  }\n+\n+  public Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n+    return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n+  }\n+\n+  public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n+    VariableInstance varInstance = _scopeInstance.resolve(variable);\n+    return _native.readProperty(varInstance, property);\n+  }\n+\n+  public boolean isLinkActive(OLink olink) throws FaultException {\n+    return _linkVals.get(olink);\n+  }\n+\n+  public String toString() {\n+    return \"{ExprEvaluationContextImpl scopeInstance=\" + _scopeInstance + \", activeLinks=\" + _linkVals + \"}\";\n+  }\n+\n+  public Node getRootNode() {\n+    return _root;\n+  }\n+\n+  public Node getPartData(Element message, OMessageVarType.Part part) throws FaultException {\n+    return _native.getPartData(message, part);\n+  }\n+\n+  public Long getProcessId() {\n+    return _native.getPid();\n+  }\n+\n+  public boolean narrowTypes() {\n+    return true;\n+  }\n+\n+  private void sendEvent(ScopeEvent se) {\n+    _scopeInstance.fillEventInfo(se);\n+    _native.sendEvent(se);\n+  }\n+\n+  public URI getBaseResourceURI() {\n+    return _native.getBaseResourceURI();\n+  }\n+\n+  public Node getPropertyValue(QName propertyName) {\n+    return _native.getProcessProperty(propertyName);\n+  }\n \n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/180/ExprEvaluationContextImpl.java\nindex acd4c2bab19..4ea8cdd226c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/180/ExprEvaluationContextImpl.java\n@@ -93,7 +93,7 @@ public class ExprEvaluationContextImpl implements EvaluationContext {\n     }\n \n \tpublic Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n-        return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n+return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n     }\n \n     public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/180/ExprEvaluationContextImpl.java\nindex acd4c2bab19..9d5bedf6450 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/180/ExprEvaluationContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/180/ExprEvaluationContextImpl.java\n@@ -93,7 +93,7 @@ public class ExprEvaluationContextImpl implements EvaluationContext {\n     }\n \n \tpublic Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n-        return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n+   return _native.getExpLangRuntime().evaluateNode(expr, new ExprEvaluationContextImpl(_scopeInstance, _native, root));\n     }\n \n     public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}