{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "223",
                "column": "30",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    }\n\n    if (responseType != null &&\n        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n      invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/69/CseClientHttpRequest.java\nindex 3761cdb9d9f..eb4a4e375b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/69/CseClientHttpRequest.java\n@@ -220,8 +220,8 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null\n+        && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "223",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/69/CseClientHttpRequest.java\nindex 3761cdb9d9f..123fcb51628 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/69/CseClientHttpRequest.java\n@@ -220,8 +220,7 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n@@ -251,4 +250,4 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n     // no types info, so will not convert any parameters\n     return RestCodec.restToArgs(mockRequest, requestMeta.getSwaggerRestOperation());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/69/CseClientHttpRequest.java\nindex 3761cdb9d9f..96938bf5fff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/69/CseClientHttpRequest.java\n@@ -22,10 +22,8 @@ import java.lang.reflect.Type;\n import java.net.URI;\n import java.util.List;\n import java.util.Map;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.Part;\n-\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.RestCodec;\n import org.apache.servicecomb.common.rest.definition.RestOperationMeta;\n@@ -48,18 +46,18 @@ import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.client.ClientHttpRequest;\n import org.springframework.http.client.ClientHttpResponse;\n-\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-\n import io.netty.handler.codec.http.QueryStringDecoder;\n \n public class CseClientHttpRequest implements ClientHttpRequest {\n   private static final Logger LOGGER = LoggerFactory.getLogger(CseClientHttpRequest.class);\n \n   // URL format\uff1acse://microserviceName/business url\n+\n   private URI uri;\n \n   // business url\n+\n   private String path;\n \n   private HttpMethod method;\n@@ -179,24 +177,19 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n \n   protected RequestMeta createRequestMeta(String httpMethod, URI uri) {\n     String microserviceName = uri.getAuthority();\n-\n-    MicroserviceReferenceConfig microserviceReferenceConfig = SCBEngine.getInstance()\n-        .createMicroserviceReferenceConfig(microserviceName);\n+    MicroserviceReferenceConfig microserviceReferenceConfig = SCBEngine.getInstance().createMicroserviceReferenceConfig(microserviceName);\n     MicroserviceMeta microserviceMeta = microserviceReferenceConfig.getLatestMicroserviceMeta();\n-\n     ServicePathManager servicePathManager = ServicePathManager.getServicePathManager(microserviceMeta);\n     if (servicePathManager == null) {\n       throw new Error(String.format(\"no schema defined for %s:%s\",\n-          microserviceMeta.getAppId(),\n-          microserviceMeta.getMicroserviceName()));\n+microserviceMeta.getAppId(),\n+microserviceMeta.getMicroserviceName()));\n     }\n \n     OperationLocator locator = servicePathManager.consumerLocateOperation(path, httpMethod);\n     RestOperationMeta swaggerRestOperation = locator.getOperation();\n-\n     OperationMeta operationMeta = locator.getOperation().getOperationMeta();\n     ReferenceConfig referenceConfig = microserviceReferenceConfig.createReferenceConfig(operationMeta);\n-\n     Map<String, String> pathParams = locator.getPathVarMap();\n     return new RequestMeta(referenceConfig, swaggerRestOperation, pathParams);\n   }\n@@ -206,22 +199,18 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n   }\n \n   protected Invocation prepareInvocation(Map<String, Object> swaggerArguments) {\n-    Invocation invocation =\n-        InvocationFactory.forConsumer(requestMeta.getReferenceConfig(),\n-            requestMeta.getOperationMeta(),\n-            requestMeta.getOperationMeta().buildBaseConsumerRuntimeType(),\n-            swaggerArguments);\n-\n+    Invocation invocation = InvocationFactory.forConsumer(requestMeta.getReferenceConfig(),\n+requestMeta.getOperationMeta(),\n+requestMeta.getOperationMeta().buildBaseConsumerRuntimeType(),\n+swaggerArguments);\n     invocation.getHandlerContext().put(RestConst.REST_CLIENT_REQUEST_PATH,\n-        path + (this.uri.getRawQuery() == null ? \"\" : \"?\" + this.uri.getRawQuery()));\n-\n+path + (this.uri.getRawQuery() == null ? \"\" : \"?\" + this.uri.getRawQuery()));\n     if (context != null) {\n       invocation.addContext(context.getContext());\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n@@ -232,7 +221,6 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n   private CseClientHttpResponse invoke(Map<String, Object> swaggerArguments) {\n     Invocation invocation = prepareInvocation(swaggerArguments);\n     Response response = doInvoke(invocation);\n-\n     if (response.isSucceed()) {\n       return new CseClientHttpResponse(response);\n     }\n@@ -245,10 +233,8 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n   }\n \n   protected Map<String, Object> collectArguments() {\n-    HttpServletRequest mockRequest = new CommonToHttpServletRequest(requestMeta.getPathParams(), queryParams,\n-        httpHeaders, requestBody, requestMeta.getSwaggerRestOperation().isFormData(),\n-        requestMeta.getSwaggerRestOperation().getFileKeys());\n+    HttpServletRequest mockRequest = new CommonToHttpServletRequest(requestMeta.getPathParams(), queryParams, httpHeaders, requestBody, requestMeta.getSwaggerRestOperation().isFormData(), requestMeta.getSwaggerRestOperation().getFileKeys());\n     // no types info, so will not convert any parameters\n     return RestCodec.restToArgs(mockRequest, requestMeta.getSwaggerRestOperation());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "223",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/69/CseClientHttpRequest.java\nindex 3761cdb9d9f..eb4a4e375b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/69/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/69/CseClientHttpRequest.java\n@@ -220,8 +220,8 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null\n+        && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}