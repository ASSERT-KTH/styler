{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4481",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4481/DefaultWinnerStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4481/DefaultWinnerStrategy.java\nindex 52b2abf5872..30865d55d26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4481/DefaultWinnerStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4481/DefaultWinnerStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.atomicbroadcast.multipaxos;\n \n import java.util.Collection;\n@@ -29,39 +30,39 @@ import org.neo4j.cluster.protocol.cluster.ClusterContext;\n \n public class DefaultWinnerStrategy implements WinnerStrategy\n {\n-    private ClusterContext electionContext;\n-\n-    public DefaultWinnerStrategy( ClusterContext electionContext )\n-    {\n-        this.electionContext = electionContext;\n-    }\n+  private ClusterContext electionContext;\n \n-    @Override\n-    public org.neo4j.cluster.InstanceId pickWinner( Collection<Vote> votes )\n-    {\n-        List<Vote> eligibleVotes = ElectionContextImpl.removeBlankVotes( votes );\n+  public DefaultWinnerStrategy(ClusterContext electionContext)\n+  {\n+    this.electionContext = electionContext;\n+  }\n \n-        moveMostSuitableCandidatesToTop( eligibleVotes );\n+  @Override\n+  public org.neo4j.cluster.InstanceId pickWinner(Collection<Vote> votes)\n+  {\n+    List<Vote> eligibleVotes = ElectionContextImpl.removeBlankVotes(votes);\n \n-        logElectionOutcome( votes, eligibleVotes );\n+    moveMostSuitableCandidatesToTop(eligibleVotes);\n \n-        for ( Vote vote : eligibleVotes )\n-        {\n-            return vote.getSuggestedNode();\n-        }\n+    logElectionOutcome(votes, eligibleVotes);\n \n-        return null;\n-    }\n-\n-    private void moveMostSuitableCandidatesToTop( List<Vote> eligibleVotes )\n+    for (Vote vote : eligibleVotes)\n     {\n-        Collections.sort( eligibleVotes );\n-        Collections.reverse( eligibleVotes );\n+      return vote.getSuggestedNode();\n     }\n \n-    private void logElectionOutcome( Collection<Vote> votes, List<Vote> eligibleVotes )\n-    {\n-        String electionOutcome = String.format( \"Election: received votes %s, eligible votes %s\", votes, eligibleVotes );\n-        electionContext.getLog( getClass() ).debug( electionOutcome );\n-    }\n+    return null;\n+  }\n+\n+  private void moveMostSuitableCandidatesToTop(List<Vote> eligibleVotes)\n+  {\n+    Collections.sort(eligibleVotes);\n+    Collections.reverse(eligibleVotes);\n+  }\n+\n+  private void logElectionOutcome(Collection<Vote> votes, List<Vote> eligibleVotes)\n+  {\n+    String electionOutcome = String.format(\"Election: received votes %s, eligible votes %s\", votes, eligibleVotes);\n+    electionContext.getLog(getClass()).debug(electionOutcome);\n+  }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4481/DefaultWinnerStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4481/DefaultWinnerStrategy.java\nindex 52b2abf5872..d2ab6a27b74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4481/DefaultWinnerStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4481/DefaultWinnerStrategy.java\n@@ -26,7 +26,6 @@ import java.util.List;\n import org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.context.ElectionContextImpl;\n import org.neo4j.cluster.protocol.cluster.ClusterContext;\n \n-\n public class DefaultWinnerStrategy implements WinnerStrategy\n {\n     private ClusterContext electionContext;\n@@ -44,8 +43,7 @@ public class DefaultWinnerStrategy implements WinnerStrategy\n         moveMostSuitableCandidatesToTop( eligibleVotes );\n \n         logElectionOutcome( votes, eligibleVotes );\n-\n-        for ( Vote vote : eligibleVotes )\n+for ( Vote vote : eligibleVotes )\n         {\n             return vote.getSuggestedNode();\n         }\n@@ -64,4 +62,4 @@ public class DefaultWinnerStrategy implements WinnerStrategy\n         String electionOutcome = String.format( \"Election: received votes %s, eligible votes %s\", votes, eligibleVotes );\n         electionContext.getLog( getClass() ).debug( electionOutcome );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}