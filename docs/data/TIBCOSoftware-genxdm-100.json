{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "100",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    extends ConvertibleNodeSetExprImpl\n{\n\tprivate final ConvertibleNodeSetExpr expr1;\n\tprivate final ConvertibleNodeSetExpr expr2;\n\n\t/**",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/100/ComposeExpr.java\nindex 693acc4f71b..02c63512b06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/100/ComposeExpr.java\n@@ -42,7 +42,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n final class ComposeExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n {\r\n-\tprivate final ConvertibleNodeSetExpr expr1;\r\n+private final ConvertibleNodeSetExpr expr1;\r\n \tprivate final ConvertibleNodeSetExpr expr2;\r\n \r\n \t/**\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/100/ComposeExpr.java\nindex 693acc4f71b..bde0469d92c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/100/ComposeExpr.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import java.lang.reflect.Array;\r\n@@ -40,101 +41,89 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n  * an expression which composes two sub-expressions (for each node in expr1, evaluate expr2)\r\n  */\r\n final class ComposeExpr\r\n-    extends ConvertibleNodeSetExprImpl\r\n-{\r\n-\tprivate final ConvertibleNodeSetExpr expr1;\r\n-\tprivate final ConvertibleNodeSetExpr expr2;\r\n+    extends ConvertibleNodeSetExprImpl {\r\n+    private final ConvertibleNodeSetExpr expr1;\r\n \r\n-\t/**\r\n-\t * construct with two sub-expressions\r\n-\t */\r\n-\tComposeExpr(final ConvertibleNodeSetExpr expr1, final ConvertibleNodeSetExpr expr2)\r\n-\t{\r\n-\t\tsuper();\r\n-\t\tthis.expr1 = expr1;\r\n-\t\tthis.expr2 = expr2;\r\n-\t}\r\n+    private final ConvertibleNodeSetExpr expr2;\r\n \r\n-\t/**\r\n-\t * evaluate with a context node and an expression context\r\n-\t */\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) {\r\n-\t\tNodeIterator<N> iter = expr1.nodeIterator(model, contextNode, dynEnv);\r\n-\t\tNodeIterator<N>[] iters = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, 10);\r\n-\t\tint length = 0;\r\n-\t\tfor (;;)\r\n-\t\t{\r\n-\t\t\t// for each node in the first expression\r\n-\t\t\t// we build a NodeIterator for the second expression\r\n-\t\t\tN tem = iter.next();\r\n-\t\t\tif (tem == null)\r\n-\t\t\t{\r\n-\t\t\t\t// we've exhausted our supply of nodes in the\r\n-\t\t\t\t// first expression\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tif (length == iters.length)\r\n-\t\t\t{\r\n-\t\t\t\t// we need a bigger array\r\n-\t\t\t\tNodeIterator<N>[] oldIters = iters;\r\n-\t\t\t\titers = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, oldIters.length * 2);\r\n-\t\t\t\tSystem.arraycopy(oldIters, 0, iters, 0, oldIters.length);\r\n-\t\t\t}\r\n-\t\t\titers[length++] = expr2.nodeIterator(model, tem, dynEnv);\r\n-\t\t}\r\n+    /**\r\n+     * construct with two sub-expressions\r\n+     */\r\n+    ComposeExpr(final ConvertibleNodeSetExpr expr1, final ConvertibleNodeSetExpr expr2) {\r\n+        super();\r\n+        this.expr1 = expr1;\r\n+        this.expr2 = expr2;\r\n+    }\r\n \r\n-\t\t// so, how many iterators did we build?\r\n-\t\tswitch (length)\r\n-\t\t{\r\n-\t\t\tcase 0:\r\n-\t\t\t{\r\n-\t\t\t\treturn new NullNodeIterator<N>();\r\n-\t\t\t}\r\n-\t\t\tcase 1:\r\n-\t\t\t{\r\n-\t\t\t\treturn iters[0];\r\n-\t\t\t}\r\n-\t\t\tcase 2:\r\n-\t\t\t{\r\n-\t\t\t\treturn new UnionNodeIterator<N>(iters[0], iters[1], model);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn new MergeNodeIterator<N>(iters, length, model);\r\n-\t}\r\n+    /**\r\n+     * evaluate with a context node and an expression context\r\n+     */\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode,\r\n+                                            final ExprContextDynamic<N> dynEnv) {\r\n+        NodeIterator<N> iter = expr1.nodeIterator(model, contextNode, dynEnv);\r\n+        NodeIterator<N>[] iters = (NodeIterator<N>[]) Array.newInstance(NodeIterator.class, 10);\r\n+        int length = 0;\r\n+        for (; ; ) {\r\n+            // for each node in the first expression\r\n+            // we build a NodeIterator for the second expression\r\n+            N tem = iter.next();\r\n+            if (tem == null) {\r\n+                // we've exhausted our supply of nodes in the\r\n+                // first expression\r\n+                break;\r\n+            }\r\n+            if (length == iters.length) {\r\n+                // we need a bigger array\r\n+                NodeIterator<N>[] oldIters = iters;\r\n+                iters =\r\n+                    (NodeIterator<N>[]) Array.newInstance(NodeIterator.class, oldIters.length * 2);\r\n+                System.arraycopy(oldIters, 0, iters, 0, oldIters.length);\r\n+            }\r\n+            iters[length++] = expr2.nodeIterator(model, tem, dynEnv);\r\n+        }\r\n+\r\n+        // so, how many iterators did we build?\r\n+        switch (length) {\r\n+            case 0: {\r\n+                return new NullNodeIterator<N>();\r\n+            }\r\n+            case 1: {\r\n+                return iters[0];\r\n+            }\r\n+            case 2: {\r\n+                return new UnionNodeIterator<N>(iters[0], iters[1], model);\r\n+            }\r\n+        }\r\n+        return new MergeNodeIterator<N>(iters, length, model);\r\n+    }\r\n \r\n     @Override\r\n     public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n         Traverser iter = expr1.traverseNodes(contextNode, dynEnv);\r\n-        Traverser[] iters = (Traverser[])Array.newInstance(Traverser.class, 10);\r\n+        Traverser[] iters = (Traverser[]) Array.newInstance(Traverser.class, 10);\r\n         int length = 0;\r\n-        for (;iter.moveToNext();)\r\n-        {\r\n+        for (; iter.moveToNext(); ) {\r\n             // for each node in the first expression\r\n             // we build a NodeIterator for the second expression\r\n-            if (length == iters.length)\r\n-            {\r\n+            if (length == iters.length) {\r\n                 // we need a bigger array\r\n                 Traverser[] oldIters = iters;\r\n-                iters = (Traverser[])Array.newInstance(Traverser.class, oldIters.length * 2);\r\n+                iters = (Traverser[]) Array.newInstance(Traverser.class, oldIters.length * 2);\r\n                 System.arraycopy(oldIters, 0, iters, 0, oldIters.length);\r\n             }\r\n             iters[length++] = expr2.traverseNodes(iter.newPrecursor(), dynEnv);\r\n         }\r\n \r\n         // so, how many iterators did we build?\r\n-        switch (length)\r\n-        {\r\n-            case 0:\r\n-            {\r\n+        switch (length) {\r\n+            case 0: {\r\n                 return new NullNodeTraverser();\r\n             }\r\n-            case 1:\r\n-            {\r\n+            case 1: {\r\n                 return iters[0];\r\n             }\r\n-            case 2:\r\n-            {\r\n+            case 2: {\r\n                 return new UnionNodeTraverser(iters[0], iters[1]);\r\n             }\r\n         }\r\n@@ -144,10 +133,9 @@ final class ComposeExpr\n     /**\r\n      *\r\n      */\r\n-\t@Override\r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn expr1.getOptimizeFlags() & expr2.getOptimizeFlags();\r\n-\t}\r\n+    @Override\r\n+    public int getOptimizeFlags() {\r\n+        return expr1.getOptimizeFlags() & expr2.getOptimizeFlags();\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/100/ComposeExpr.java\nindex 693acc4f71b..cc3dd9599e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/100/ComposeExpr.java\n@@ -41,74 +41,74 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n  */\r\n final class ComposeExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n-{\r\n-\tprivate final ConvertibleNodeSetExpr expr1;\r\n+{\n+    private final ConvertibleNodeSetExpr expr1;\r\n \tprivate final ConvertibleNodeSetExpr expr2;\r\n \r\n \t/**\r\n \t * construct with two sub-expressions\r\n \t */\r\n \tComposeExpr(final ConvertibleNodeSetExpr expr1, final ConvertibleNodeSetExpr expr2)\r\n-\t{\r\n-\t\tsuper();\r\n+\t{\n+    super();\r\n \t\tthis.expr1 = expr1;\r\n-\t\tthis.expr2 = expr2;\r\n-\t}\r\n+\t\tthis.expr2 = expr2;\n+    }\r\n \r\n \t/**\r\n \t * evaluate with a context node and an expression context\r\n \t */\r\n \t@SuppressWarnings(\"unchecked\")\r\n-\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) {\r\n-\t\tNodeIterator<N> iter = expr1.nodeIterator(model, contextNode, dynEnv);\r\n+\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) {\n+    NodeIterator<N> iter = expr1.nodeIterator(model, contextNode, dynEnv);\r\n \t\tNodeIterator<N>[] iters = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, 10);\r\n \t\tint length = 0;\r\n \t\tfor (;;)\r\n-\t\t{\r\n-\t\t\t// for each node in the first expression\r\n+\t\t{\n+    // for each node in the first expression\r\n \t\t\t// we build a NodeIterator for the second expression\r\n \t\t\tN tem = iter.next();\r\n \t\t\tif (tem == null)\r\n-\t\t\t{\r\n-\t\t\t\t// we've exhausted our supply of nodes in the\r\n+\t\t\t{\n+    // we've exhausted our supply of nodes in the\r\n \t\t\t\t// first expression\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n+\t\t\t\tbreak;\n+    }\r\n \t\t\tif (length == iters.length)\r\n-\t\t\t{\r\n-\t\t\t\t// we need a bigger array\r\n+\t\t\t{\n+    // we need a bigger array\r\n \t\t\t\tNodeIterator<N>[] oldIters = iters;\r\n \t\t\t\titers = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, oldIters.length * 2);\r\n-\t\t\t\tSystem.arraycopy(oldIters, 0, iters, 0, oldIters.length);\r\n-\t\t\t}\r\n-\t\t\titers[length++] = expr2.nodeIterator(model, tem, dynEnv);\r\n-\t\t}\r\n+\t\t\t\tSystem.arraycopy(oldIters, 0, iters, 0, oldIters.length);\n+    }\r\n+\t\t\titers[length++] = expr2.nodeIterator(model, tem, dynEnv);\n+    }\r\n \r\n \t\t// so, how many iterators did we build?\r\n \t\tswitch (length)\r\n-\t\t{\r\n-\t\t\tcase 0:\r\n-\t\t\t{\r\n-\t\t\t\treturn new NullNodeIterator<N>();\r\n-\t\t\t}\r\n+\t\t{\n+    case 0:\r\n+\t\t\t{\n+    return new NullNodeIterator<N>();\n+    }\r\n \t\t\tcase 1:\r\n-\t\t\t{\r\n-\t\t\t\treturn iters[0];\r\n-\t\t\t}\r\n+\t\t\t{\n+    return iters[0];\n+    }\r\n \t\t\tcase 2:\r\n-\t\t\t{\r\n-\t\t\t\treturn new UnionNodeIterator<N>(iters[0], iters[1], model);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn new MergeNodeIterator<N>(iters, length, model);\r\n-\t}\r\n-\r\n-    @Override\r\n+\t\t\t{\n+    return new UnionNodeIterator<N>(iters[0], iters[1], model);\n+    }\n+    }\r\n+\t\treturn new MergeNodeIterator<N>(iters, length, model);\n+    }\n+\n+@Override\r\n     public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n         Traverser iter = expr1.traverseNodes(contextNode, dynEnv);\r\n         Traverser[] iters = (Traverser[])Array.newInstance(Traverser.class, 10);\r\n         int length = 0;\r\n-        for (;iter.moveToNext();)\r\n+        for (; iter.moveToNext();)\r\n         {\r\n             // for each node in the first expression\r\n             // we build a NodeIterator for the second expression\r\n@@ -143,11 +143,10 @@ final class ComposeExpr\n \r\n     /**\r\n      *\r\n-     */\r\n-\t@Override\r\n+     */\n+@Override\r\n \tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn expr1.getOptimizeFlags() & expr2.getOptimizeFlags();\r\n-\t}\r\n-\r\n-}\r\n+\t{\n+    return expr1.getOptimizeFlags() & expr2.getOptimizeFlags();\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/100/ComposeExpr.java\nindex 693acc4f71b..64bc3053d52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/100/ComposeExpr.java\n@@ -18,136 +18,139 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import java.lang.reflect.Array;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.nodes.Traverser;\r\n-import org.genxdm.nodes.TraversingInformer;\r\n-import org.genxdm.processor.xpath.v10.iterators.MergeNodeIterator;\r\n-import org.genxdm.processor.xpath.v10.iterators.MergeNodeTraverser;\r\n-import org.genxdm.processor.xpath.v10.iterators.NullNodeIterator;\r\n-import org.genxdm.processor.xpath.v10.iterators.NullNodeTraverser;\r\n-import org.genxdm.processor.xpath.v10.iterators.UnionNodeIterator;\r\n-import org.genxdm.processor.xpath.v10.iterators.UnionNodeTraverser;\r\n-import org.genxdm.xpath.v10.TraverserDynamicContext;\r\n-import org.genxdm.xpath.v10.ExprContextDynamic;\r\n-import org.genxdm.xpath.v10.NodeIterator;\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import java.lang.reflect.Array;\n+import org.genxdm.Model;\n+import org.genxdm.nodes.Traverser;\n+import org.genxdm.nodes.TraversingInformer;\n+import org.genxdm.processor.xpath.v10.iterators.MergeNodeIterator;\n+import org.genxdm.processor.xpath.v10.iterators.MergeNodeTraverser;\n+import org.genxdm.processor.xpath.v10.iterators.NullNodeIterator;\n+import org.genxdm.processor.xpath.v10.iterators.NullNodeTraverser;\n+import org.genxdm.processor.xpath.v10.iterators.UnionNodeIterator;\n+import org.genxdm.processor.xpath.v10.iterators.UnionNodeTraverser;\n+import org.genxdm.xpath.v10.TraverserDynamicContext;\n+import org.genxdm.xpath.v10.ExprContextDynamic;\n+import org.genxdm.xpath.v10.NodeIterator;\n import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\r\n \r\n /**\r\n  * an expression which composes two sub-expressions (for each node in expr1, evaluate expr2)\r\n- */\r\n-final class ComposeExpr\r\n-    extends ConvertibleNodeSetExprImpl\r\n-{\r\n-\tprivate final ConvertibleNodeSetExpr expr1;\r\n-\tprivate final ConvertibleNodeSetExpr expr2;\r\n-\r\n-\t/**\r\n-\t * construct with two sub-expressions\r\n-\t */\r\n-\tComposeExpr(final ConvertibleNodeSetExpr expr1, final ConvertibleNodeSetExpr expr2)\r\n-\t{\r\n-\t\tsuper();\r\n-\t\tthis.expr1 = expr1;\r\n-\t\tthis.expr2 = expr2;\r\n-\t}\r\n+ */\n+\n+final class ComposeExpr extends ConvertibleNodeSetExprImpl\n+{\n+    private final ConvertibleNodeSetExpr expr1;\n+    private final ConvertibleNodeSetExpr expr2;\r\n \r\n-\t/**\r\n-\t * evaluate with a context node and an expression context\r\n-\t */\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) {\r\n-\t\tNodeIterator<N> iter = expr1.nodeIterator(model, contextNode, dynEnv);\r\n-\t\tNodeIterator<N>[] iters = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, 10);\r\n-\t\tint length = 0;\r\n-\t\tfor (;;)\r\n-\t\t{\r\n-\t\t\t// for each node in the first expression\r\n-\t\t\t// we build a NodeIterator for the second expression\r\n-\t\t\tN tem = iter.next();\r\n-\t\t\tif (tem == null)\r\n-\t\t\t{\r\n-\t\t\t\t// we've exhausted our supply of nodes in the\r\n-\t\t\t\t// first expression\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tif (length == iters.length)\r\n-\t\t\t{\r\n-\t\t\t\t// we need a bigger array\r\n-\t\t\t\tNodeIterator<N>[] oldIters = iters;\r\n-\t\t\t\titers = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, oldIters.length * 2);\r\n-\t\t\t\tSystem.arraycopy(oldIters, 0, iters, 0, oldIters.length);\r\n-\t\t\t}\r\n-\t\t\titers[length++] = expr2.nodeIterator(model, tem, dynEnv);\r\n-\t\t}\r\n-\r\n-\t\t// so, how many iterators did we build?\r\n-\t\tswitch (length)\r\n-\t\t{\r\n-\t\t\tcase 0:\r\n-\t\t\t{\r\n-\t\t\t\treturn new NullNodeIterator<N>();\r\n-\t\t\t}\r\n-\t\t\tcase 1:\r\n-\t\t\t{\r\n-\t\t\t\treturn iters[0];\r\n-\t\t\t}\r\n-\t\t\tcase 2:\r\n-\t\t\t{\r\n-\t\t\t\treturn new UnionNodeIterator<N>(iters[0], iters[1], model);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn new MergeNodeIterator<N>(iters, length, model);\r\n-\t}\r\n+    /**\r\n+     * construct with two sub-expressions\r\n+     */\n+\n+    ComposeExpr(final ConvertibleNodeSetExpr expr1, final ConvertibleNodeSetExpr expr2)\n+    {\n+        super();\n+        this.expr1 = expr1;\n+        this.expr2 = expr2;\n+    }\r\n \r\n-    @Override\r\n-    public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-        Traverser iter = expr1.traverseNodes(contextNode, dynEnv);\r\n-        Traverser[] iters = (Traverser[])Array.newInstance(Traverser.class, 10);\r\n-        int length = 0;\r\n-        for (;iter.moveToNext();)\r\n+    /**\r\n+     * evaluate with a context node and an expression context\r\n+     */\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv)\n+    {\n+        NodeIterator<N> iter = expr1.nodeIterator(model, contextNode, dynEnv);\n+        NodeIterator<N>[] iters = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, 10);\n+        int length = 0;\n+        for (;;)\n         {\r\n             // for each node in the first expression\r\n-            // we build a NodeIterator for the second expression\r\n-            if (length == iters.length)\r\n+            // we build a NodeIterator for the second expression\n+            N tem = iter.next();\n+            if (tem == null)\n+            {\r\n+                // we've exhausted our supply of nodes in the\r\n+                // first expression\n+                break;\n+            }\n+            if (length == iters.length)\n             {\r\n-                // we need a bigger array\r\n-                Traverser[] oldIters = iters;\r\n-                iters = (Traverser[])Array.newInstance(Traverser.class, oldIters.length * 2);\r\n-                System.arraycopy(oldIters, 0, iters, 0, oldIters.length);\r\n-            }\r\n-            iters[length++] = expr2.traverseNodes(iter.newPrecursor(), dynEnv);\r\n+                // we need a bigger array\n+                NodeIterator<N>[] oldIters = iters;\n+                iters = (NodeIterator<N>[])Array.newInstance(NodeIterator.class, oldIters.length * 2);\n+                System.arraycopy(oldIters, 0, iters, 0, oldIters.length);\n+            }\n+            iters[length++] = expr2.nodeIterator(model, tem, dynEnv);\n         }\r\n \r\n-        // so, how many iterators did we build?\r\n-        switch (length)\r\n+        // so, how many iterators did we build?\n+        switch (length)\n+        {\n+            case 0:\n+            {\n+                return new NullNodeIterator<N>();\n+            }\n+            case 1:\n+            {\n+                return iters[0];\n+            }\n+            case 2:\n+            {\n+                return new UnionNodeIterator<N>(iters[0], iters[1], model);\n+            }\n+        }\n+        return new MergeNodeIterator<N>(iters, length, model);\n+    }\n+\n+    @Override\n+    public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+    {\n+        Traverser iter = expr1.traverseNodes(contextNode, dynEnv);\n+        Traverser[] iters = (Traverser[])Array.newInstance(Traverser.class, 10);\n+        int length = 0;\n+        for (; iter.moveToNext() ;)\n         {\r\n-            case 0:\r\n-            {\r\n-                return new NullNodeTraverser();\r\n-            }\r\n-            case 1:\r\n-            {\r\n-                return iters[0];\r\n-            }\r\n-            case 2:\r\n+            // for each node in the first expression\r\n+            // we build a NodeIterator for the second expression\n+            if (length == iters.length)\n             {\r\n-                return new UnionNodeTraverser(iters[0], iters[1]);\r\n-            }\r\n+                // we need a bigger array\n+                Traverser[] oldIters = iters;\n+                iters = (Traverser[])Array.newInstance(Traverser.class, oldIters.length * 2);\n+                System.arraycopy(oldIters, 0, iters, 0, oldIters.length);\n+            }\n+            iters[length++] = expr2.traverseNodes(iter.newPrecursor(), dynEnv);\n         }\r\n-        return new MergeNodeTraverser(iters, length);\r\n+\r\n+        // so, how many iterators did we build?\n+        switch (length)\n+        {\n+            case 0:\n+            {\n+                return new NullNodeTraverser();\n+            }\n+            case 1:\n+            {\n+                return iters[0];\n+            }\n+            case 2:\n+            {\n+                return new UnionNodeTraverser(iters[0], iters[1]);\n+            }\n+        }\n+        return new MergeNodeTraverser(iters, length);\n     }\r\n \r\n     /**\r\n      *\r\n-     */\r\n-\t@Override\r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn expr1.getOptimizeFlags() & expr2.getOptimizeFlags();\r\n-\t}\r\n-\r\n-}\r\n+     */\n+\n+    @Override\n+    public int getOptimizeFlags()\n+    {\n+        return expr1.getOptimizeFlags() & expr2.getOptimizeFlags();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 172
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/100/ComposeExpr.java\nindex 693acc4f71b..02c63512b06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/100/ComposeExpr.java\n@@ -42,7 +42,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n final class ComposeExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n {\r\n-\tprivate final ConvertibleNodeSetExpr expr1;\r\n+private final ConvertibleNodeSetExpr expr1;\r\n \tprivate final ConvertibleNodeSetExpr expr2;\r\n \r\n \t/**\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/100/ComposeExpr.java\nindex 693acc4f71b..d5c4261f790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/100/ComposeExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/100/ComposeExpr.java\n@@ -42,7 +42,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n final class ComposeExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n {\r\n-\tprivate final ConvertibleNodeSetExpr expr1;\r\n+    private final ConvertibleNodeSetExpr expr1;\r\n \tprivate final ConvertibleNodeSetExpr expr2;\r\n \r\n \t/**\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}