{
    "project_name": "neo4j-neo4j",
    "error_id": "1084",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1084/BoltStateMachineV41.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1084/BoltStateMachineV41.java\nindex 103e2834a9c..69f226e8e56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1084/BoltStateMachineV41.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1084/BoltStateMachineV41.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v41;\n \n import java.time.Clock;\n@@ -34,9 +35,9 @@ import org.neo4j.kernel.database.DefaultDatabaseResolver;\n \n public class BoltStateMachineV41 extends AbstractBoltStateMachine\n {\n-    public BoltStateMachineV41( BoltStateMachineSPI boltSPI, BoltChannel boltChannel, Clock clock, DefaultDatabaseResolver defaultDatabaseResolver )\n+    public BoltStateMachineV41(BoltStateMachineSPI boltSPI, BoltChannel boltChannel, Clock clock, DefaultDatabaseResolver defaultDatabaseResolver)\n     {\n-        super( boltSPI, boltChannel, clock, defaultDatabaseResolver );\n+        super(boltSPI, boltChannel, clock, defaultDatabaseResolver);\n     }\n \n     @Override\n@@ -49,25 +50,25 @@ public class BoltStateMachineV41 extends AbstractBoltStateMachine\n         FailedState failed = new FailedState(); // v4\n         InterruptedState interrupted = new InterruptedState();\n \n-        connected.setReadyState( ready );\n+        connected.setReadyState(ready);\n \n-        ready.setTransactionReadyState( inTransaction );\n-        ready.setStreamingState( autoCommitState );\n-        ready.setFailedState( failed );\n-        ready.setInterruptedState( interrupted );\n+        ready.setTransactionReadyState(inTransaction);\n+        ready.setStreamingState(autoCommitState);\n+        ready.setFailedState(failed);\n+        ready.setInterruptedState(interrupted);\n \n-        autoCommitState.setReadyState( ready );\n-        autoCommitState.setFailedState( failed );\n-        autoCommitState.setInterruptedState( interrupted );\n+        autoCommitState.setReadyState(ready);\n+        autoCommitState.setFailedState(failed);\n+        autoCommitState.setInterruptedState(interrupted);\n \n-        inTransaction.setReadyState( ready );\n-        inTransaction.setFailedState( failed );\n-        inTransaction.setInterruptedState( interrupted );\n+        inTransaction.setReadyState(ready);\n+        inTransaction.setFailedState(failed);\n+        inTransaction.setInterruptedState(interrupted);\n \n-        failed.setInterruptedState( interrupted );\n+        failed.setInterruptedState(interrupted);\n \n-        interrupted.setReadyState( ready );\n+        interrupted.setReadyState(ready);\n \n-        return new States( connected, failed );\n+        return new States(connected, failed);\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1084/BoltStateMachineV41.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1084/BoltStateMachineV41.java\nindex 103e2834a9c..5a1c06daa0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1084/BoltStateMachineV41.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1084/BoltStateMachineV41.java\n@@ -70,4 +70,4 @@ public class BoltStateMachineV41 extends AbstractBoltStateMachine\n \n         return new States( connected, failed );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}