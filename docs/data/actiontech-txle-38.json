{
    "project_name": "actiontech-txle",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "288",
                "column": "3",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            if (!key.startsWith(\"n_c_v_\")) {\n                Object value = entry.getValue();\n//\t\t\t\tif (value == null) {\n                if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                    value = dataMap.get(\"n_c_v_\" + key);\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "288",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/38/AutoCompensateHandler.java\nindex 2c80482382a..056a0fca162 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/38/AutoCompensateHandler.java\n@@ -285,7 +285,7 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             String key = entry.getKey();\n             if (!key.startsWith(\"n_c_v_\")) {\n                 Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n+        //\t\t\t\tif (value == null) {\n                 if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                     value = dataMap.get(\"n_c_v_\" + key);\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "288",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "300",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "301",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "302",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "303",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "304",
                    "column": "44",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "305",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "306",
                    "column": "50",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "307",
                    "column": "50",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/38/AutoCompensateHandler.java\nindex 2c80482382a..c63d6b70a46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/38/AutoCompensateHandler.java\n@@ -20,7 +20,6 @@ import org.apache.servicecomb.saga.omega.transaction.monitor.AutoCompensableSqlM\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n-\n import java.sql.*;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -28,7 +27,6 @@ import java.util.Map;\n \n public class AutoCompensateHandler implements IAutoCompensateHandler {\n     private static final Logger LOG = LoggerFactory.getLogger(AutoCompensateHandler.class);\n-\n     private static volatile AutoCompensateHandler autoCompensateHandler = null;\n     private final String schema = TxleConstants.APP_NAME;\n \n@@ -64,11 +62,9 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         if (sqlStatement instanceof MySqlSelectIntoStatement) {\n             return;\n         }\n-\n         if (standbyParams == null) {\n             standbyParams = new HashMap<>();\n         }\n-\n         String server = CurrentThreadOmegaContext.getServiceNameFromCurThread();\n \n         // To set a relationship between localTxId and datSourceInfo, in order to determine to use the relative dataSource for localTxId when it need be compensated.\n@@ -79,23 +75,22 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         standbyParams.put(\"dbdrivername\", dbdrivername);\n         standbyParams.put(\"dburl\", dburl);\n         standbyParams.put(\"dbusername\", dbusername);\n-\n         if (sqlStatement instanceof MySqlInsertStatement) {\n             return;\n         } else if (sqlStatement instanceof MySqlUpdateStatement) {\n             AutoCompensateUpdateHandler.newInstance().prepareCompensationBeforeUpdating(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n         } else if (sqlStatement instanceof MySqlDeleteStatement) {\n-            AutoCompensateDeleteHandler.newInstance().prepareCompensationBeforeDeleting(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n-        } else {\n-            standbyParams.clear();\n+                   AutoCompensateDeleteHandler.newInstance().prepareCompensationBeforeDeleting(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n+               } else {\n+                   standbyParams.clear();\n             // Default is closed, means that just does record, if it's open, then program will throw an exception about current special SQL, just for auto-compensation.\n-            boolean checkSpecialSql = TxleStaticConfig.getBooleanConfig(\"txle.transaction.auto-compensation.check-special-sql\", false);\n-            if (checkSpecialSql) {\n-                throw new SQLException(TxleConstants.logErrorPrefixWithTime() + \"Do not support sql [\" + executeSql + \"] to auto-compensation.\");\n-            } else {\n-                LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Do not support sql [{}] to auto-compensation, but it has been executed due to the switch 'checkSpecialSql' is closed.\", executeSql);\n-            }\n-        }\n+                   boolean checkSpecialSql = TxleStaticConfig.getBooleanConfig(\"txle.transaction.auto-compensation.check-special-sql\", false);\n+                   if (checkSpecialSql) {\n+                       throw new SQLException(TxleConstants.logErrorPrefixWithTime() + \"Do not support sql [\" + executeSql + \"] to auto-compensation.\");\n+                   } else {\n+                       LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Do not support sql [{}] to auto-compensation, but it has been executed due to the switch 'checkSpecialSql' is closed.\", executeSql);\n+                   }\n+               }\n     }\n \n     @Override\n@@ -115,11 +110,9 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         if (sqlStatement instanceof MySqlSelectIntoStatement) {\n             return;\n         }\n-\n         if (standbyParams == null) {\n             standbyParams = new HashMap<>();\n         }\n-\n         String server = CurrentThreadOmegaContext.getServiceNameFromCurThread();\n \n         // To set a relationship between localTxId and datSourceInfo, in order to determine to use the relative dataSource for localTxId when it need be compensated.\n@@ -130,7 +123,6 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         standbyParams.put(\"dbdrivername\", dbdrivername);\n         standbyParams.put(\"dburl\", dburl);\n         standbyParams.put(\"dbusername\", dbusername);\n-\n         if (sqlStatement instanceof MySqlInsertStatement) {\n             AutoCompensateInsertHandler.newInstance().prepareCompensationAfterInserting(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n         } else if (sqlStatement instanceof MySqlUpdateStatement) {\n@@ -143,7 +135,6 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n \n         // start to mark duration for maintaining sql By Gannalyo.\n         ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n-\n         PreparedStatement ps = null;\n         ResultSet columnResultSet = null;\n         Map<String, String> columnNameType = new HashMap<>();\n@@ -153,7 +144,6 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             while (resultSet.next()) {\n                 // column name and type\n                 columnNameType.put(resultSet.getString(1), resultSet.getString(2));\n@@ -202,7 +192,9 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n                 try {\n                     preparedStatement.close();\n                 } catch (SQLException e) {\n-                    LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Fail to close PreparedStatement after executing method 'saveAutoCompensationInfo' for delete SQL.\", e);\n+                    LOG.error(\n+                        TxleConstants.logErrorPrefixWithTime() + \"Fail to close PreparedStatement after executing method 'saveAutoCompensationInfo' for delete SQL.\",\n+                        e);\n                 }\n             }\n             if (resultSet != null) {\n@@ -232,7 +224,6 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             while (columnResultSet.next()) {\n                 if (\"PRI\".equalsIgnoreCase(columnResultSet.getString(\"Key\")) && primaryKeyColumnName.length() == 0) {\n                     primaryKeyColumnName = columnResultSet.getString(\"Field\");\n@@ -285,7 +276,7 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             String key = entry.getKey();\n             if (!key.startsWith(\"n_c_v_\")) {\n                 Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n+//              if (value == null) {\n                 if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                     value = dataMap.get(\"n_c_v_\" + key);\n                 }\n@@ -306,23 +297,21 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         try {\n             String sql = \"insert into txle_undo_log(globaltxid, localtxid, executesql, compensatesql, status, server, lastmodifytime, createtime) values (?, ?, ?, ?, ?, ?, ?, ?)\" + TxleConstants.ACTION_SQL;\n             preparedStatement = delegate.getConnection().prepareStatement(sql);\n-            preparedStatement.setString(index++, globalTxId);\n-            preparedStatement.setString(index++, localTxId);\n-            preparedStatement.setString(index++, executeSql);\n-            preparedStatement.setString(index++, compensateSql);\n-            preparedStatement.setInt(index++, 0);\n-            preparedStatement.setString(index++, server);\n-            preparedStatement.setTimestamp(index++, currentTime);\n-            preparedStatement.setTimestamp(index++, currentTime);\n+            preparedStatement.setString(index ++, globalTxId);\n+            preparedStatement.setString(index ++, localTxId);\n+            preparedStatement.setString(index ++, executeSql);\n+            preparedStatement.setString(index ++, compensateSql);\n+            preparedStatement.setInt(index ++, 0);\n+            preparedStatement.setString(index ++, server);\n+            preparedStatement.setTimestamp(index ++, currentTime);\n+            preparedStatement.setTimestamp(index ++, currentTime);\n \n             // start to mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n-\n             boolean result = preparedStatement.executeUpdate() > 0;\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             return result;\n         } catch (Exception e) {\n             LOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Failed to save undo_log, localTxId=[{}].\", localTxId, e);\n@@ -333,5 +322,4 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             }\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "288",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/38/AutoCompensateHandler.java\nindex 2c80482382a..056a0fca162 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/38/AutoCompensateHandler.java\n@@ -285,7 +285,7 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             String key = entry.getKey();\n             if (!key.startsWith(\"n_c_v_\")) {\n                 Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n+        //\t\t\t\tif (value == null) {\n                 if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                     value = dataMap.get(\"n_c_v_\" + key);\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "288",
                    "column": "19",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/38/AutoCompensateHandler.java\nindex 2c80482382a..2b7bf82c0f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/38/AutoCompensateHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/38/AutoCompensateHandler.java\n@@ -285,7 +285,7 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             String key = entry.getKey();\n             if (!key.startsWith(\"n_c_v_\")) {\n                 Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n+                //\t\t\t\tif (value == null) {\n                 if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                     value = dataMap.get(\"n_c_v_\" + key);\n                 }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}