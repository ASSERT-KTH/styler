{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1082",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.admingui.exceptionhandler;\n\nimport gov.hhs.fha.nhinc.admingui.constant.MessageConstant;\nimport gov.hhs.fha.nhinc.admingui.constant.NavigationConstant;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1082/CustomExceptionHandlerWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1082/CustomExceptionHandlerWrapper.java\nindex 5304d883753..a181f962100 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1082/CustomExceptionHandlerWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1082/CustomExceptionHandlerWrapper.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.exceptionhandler;\n \n import gov.hhs.fha.nhinc.admingui.constant.MessageConstant;\n@@ -52,60 +53,60 @@ import org.slf4j.LoggerFactory;\n  */\n public class CustomExceptionHandlerWrapper extends ExceptionHandlerWrapper {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(CustomExceptionHandlerWrapper.class);\n-    private ExceptionHandler wrapped;\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomExceptionHandlerWrapper.class);\n+  private ExceptionHandler wrapped;\n \n-    CustomExceptionHandlerWrapper(ExceptionHandler exception) {\n-        wrapped = exception;\n-    }\n+  CustomExceptionHandlerWrapper(ExceptionHandler exception) {\n+    wrapped = exception;\n+  }\n \n-    @Override\n-    public ExceptionHandler getWrapped() {\n-        return wrapped;\n-    }\n+  @Override\n+  public ExceptionHandler getWrapped() {\n+    return wrapped;\n+  }\n \n-    @Override\n-    public void handle() {\n-        final Iterator<ExceptionQueuedEvent> i = getUnhandledExceptionQueuedEvents().iterator();\n-        while (i.hasNext()) {\n-            ExceptionQueuedEvent event = i.next();\n-            ExceptionQueuedEventContext context = (ExceptionQueuedEventContext) event.getSource();\n-            // get the exception from context\n-            Throwable t = context.getException();\n-            LOG.error(\"An exception occurred while performing user request\", t);\n-            final FacesContext fc = FacesContext.getCurrentInstance();\n-            final Map<String, Object> requestMap = fc.getExternalContext().getRequestMap();\n-            final NavigationHandler nav = fc.getApplication().getNavigationHandler();\n+  @Override\n+  public void handle() {\n+    final Iterator<ExceptionQueuedEvent> i = getUnhandledExceptionQueuedEvents().iterator();\n+    while (i.hasNext()) {\n+      ExceptionQueuedEvent event = i.next();\n+      ExceptionQueuedEventContext context = (ExceptionQueuedEventContext) event.getSource();\n+      // get the exception from context\n+      Throwable t = context.getException();\n+      LOG.error(\"An exception occurred while performing user request\", t);\n+      final FacesContext fc = FacesContext.getCurrentInstance();\n+      final Map<String, Object> requestMap = fc.getExternalContext().getRequestMap();\n+      final NavigationHandler nav = fc.getApplication().getNavigationHandler();\n \n-            HttpServletRequest request = (HttpServletRequest) fc.getExternalContext().getRequest();\n-            Object servletEx = request.getAttribute(\"javax.servlet.error.exception\");\n-            try {\n-                RequestContext.getCurrentInstance().execute(\"dialog.hide()\");\n-                if (servletEx instanceof SanitizationException) {\n-                    // SanitizationFilter has redirected to customerror page\n-                    fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n-                        MessageConstant.EXCEPTION_MSG, \"\"));\n-                    requestMap.put(\"exceptionMessage\", ((SanitizationException) servletEx).getMessage());\n-                    nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n-                } else if (t instanceof ViewExpiredException) {\n-                    fc.addMessage(\"loginErrors\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n-                        MessageConstant.SESSION_EXPIRED_MSG, \"\"));\n-                    nav.handleNavigation(fc, null, NavigationConstant.LOGIN_XHTML);\n-                } else {\n-                    // any run-time exception will use the else block\n-                    fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n-                        MessageConstant.EXCEPTION_MSG, \"\"));\n-                    requestMap.put(\"exceptionMessage\", t.getMessage());\n-                    fc.getExternalContext().invalidateSession();\n-                    nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n-                }\n-                fc.renderResponse();\n-            } finally {\n-                // remove it from queue\n-                i.remove();\n-            }\n+      HttpServletRequest request = (HttpServletRequest) fc.getExternalContext().getRequest();\n+      Object servletEx = request.getAttribute(\"javax.servlet.error.exception\");\n+      try {\n+        RequestContext.getCurrentInstance().execute(\"dialog.hide()\");\n+        if (servletEx instanceof SanitizationException) {\n+          // SanitizationFilter has redirected to customerror page\n+          fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n+              MessageConstant.EXCEPTION_MSG, \"\"));\n+          requestMap.put(\"exceptionMessage\", ((SanitizationException) servletEx).getMessage());\n+          nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n+        } else if (t instanceof ViewExpiredException) {\n+          fc.addMessage(\"loginErrors\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n+              MessageConstant.SESSION_EXPIRED_MSG, \"\"));\n+          nav.handleNavigation(fc, null, NavigationConstant.LOGIN_XHTML);\n+        } else {\n+          // any run-time exception will use the else block\n+          fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n+              MessageConstant.EXCEPTION_MSG, \"\"));\n+          requestMap.put(\"exceptionMessage\", t.getMessage());\n+          fc.getExternalContext().invalidateSession();\n+          nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n         }\n-        //parent handle\n-        getWrapped().handle();\n+        fc.renderResponse();\n+      } finally {\n+        // remove it from queue\n+        i.remove();\n+      }\n     }\n+    //parent handle\n+    getWrapped().handle();\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1082/CustomExceptionHandlerWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1082/CustomExceptionHandlerWrapper.java\nindex 5304d883753..eb0f3edd607 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1082/CustomExceptionHandlerWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1082/CustomExceptionHandlerWrapper.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.exceptionhandler;\n \n import gov.hhs.fha.nhinc.admingui.constant.MessageConstant;\n@@ -85,17 +86,17 @@ public class CustomExceptionHandlerWrapper extends ExceptionHandlerWrapper {\n                     // SanitizationFilter has redirected to customerror page\n                     fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n                         MessageConstant.EXCEPTION_MSG, \"\"));\n-                    requestMap.put(\"exceptionMessage\", ((SanitizationException) servletEx).getMessage());\n+requestMap.put(\"exceptionMessage\", ((SanitizationException) servletEx).getMessage());\n                     nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n                 } else if (t instanceof ViewExpiredException) {\n                     fc.addMessage(\"loginErrors\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n                         MessageConstant.SESSION_EXPIRED_MSG, \"\"));\n-                    nav.handleNavigation(fc, null, NavigationConstant.LOGIN_XHTML);\n+nav.handleNavigation(fc, null, NavigationConstant.LOGIN_XHTML);\n                 } else {\n                     // any run-time exception will use the else block\n                     fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n                         MessageConstant.EXCEPTION_MSG, \"\"));\n-                    requestMap.put(\"exceptionMessage\", t.getMessage());\n+requestMap.put(\"exceptionMessage\", t.getMessage());\n                     fc.getExternalContext().invalidateSession();\n                     nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n                 }\n@@ -108,4 +109,4 @@ public class CustomExceptionHandlerWrapper extends ExceptionHandlerWrapper {\n         //parent handle\n         getWrapped().handle();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "75",
                    "column": "14",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "93",
                    "column": "19",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "column": "6",
                    "severity": "error",
                    "message": "'}' at column 6 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1082/CustomExceptionHandlerWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1082/CustomExceptionHandlerWrapper.java\nindex 5304d883753..1e0424661e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1082/CustomExceptionHandlerWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1082/CustomExceptionHandlerWrapper.java\n@@ -50,7 +50,10 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author tjafri\n  */\n-public class CustomExceptionHandlerWrapper extends ExceptionHandlerWrapper {\n+\n+\n+public class CustomExceptionHandlerWrapper extends\n+    ExceptionHandlerWrapper {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CustomExceptionHandlerWrapper.class);\n     private ExceptionHandler wrapped;\n@@ -59,48 +62,61 @@ public class CustomExceptionHandlerWrapper extends ExceptionHandlerWrapper {\n         wrapped = exception;\n     }\n \n+\n     @Override\n     public ExceptionHandler getWrapped() {\n         return wrapped;\n     }\n \n+\n     @Override\n     public void handle() {\n         final Iterator<ExceptionQueuedEvent> i = getUnhandledExceptionQueuedEvents().iterator();\n-        while (i.hasNext()) {\n+        while(i.hasNext()) {\n             ExceptionQueuedEvent event = i.next();\n-            ExceptionQueuedEventContext context = (ExceptionQueuedEventContext) event.getSource();\n+            ExceptionQueuedEventContext context = (ExceptionQueuedEventContext)\n+                                                      event.getSource();\n             // get the exception from context\n             Throwable t = context.getException();\n             LOG.error(\"An exception occurred while performing user request\", t);\n+\n             final FacesContext fc = FacesContext.getCurrentInstance();\n+\n             final Map<String, Object> requestMap = fc.getExternalContext().getRequestMap();\n-            final NavigationHandler nav = fc.getApplication().getNavigationHandler();\n \n-            HttpServletRequest request = (HttpServletRequest) fc.getExternalContext().getRequest();\n+            final NavigationHandler nav = fc.getApplication().getNavigationHandler();\n+            HttpServletRequest request = (HttpServletRequest)\n+                                             fc.getExternalContext().getRequest();\n             Object servletEx = request.getAttribute(\"javax.servlet.error.exception\");\n             try {\n                 RequestContext.getCurrentInstance().execute(\"dialog.hide()\");\n-                if (servletEx instanceof SanitizationException) {\n+                if(servletEx instanceof SanitizationException) {\n                     // SanitizationFilter has redirected to customerror page\n-                    fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n-                        MessageConstant.EXCEPTION_MSG, \"\"));\n-                    requestMap.put(\"exceptionMessage\", ((SanitizationException) servletEx).getMessage());\n-                    nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n-                } else if (t instanceof ViewExpiredException) {\n-                    fc.addMessage(\"loginErrors\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n-                        MessageConstant.SESSION_EXPIRED_MSG, \"\"));\n-                    nav.handleNavigation(fc, null, NavigationConstant.LOGIN_XHTML);\n-                } else {\n-                    // any run-time exception will use the else block\n-                    fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR,\n-                        MessageConstant.EXCEPTION_MSG, \"\"));\n-                    requestMap.put(\"exceptionMessage\", t.getMessage());\n-                    fc.getExternalContext().invalidateSession();\n+                    fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR, MessageConstant.EXCEPTION_MSG, \"\"));\n+                    requestMap.put(\"exceptionMessage\", ((SanitizationException)\n+                                                            servletEx ).getMessage());\n                     nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n                 }\n+\n+\n+else if(t instanceof ViewExpiredException) {\n+         fc.addMessage(\"loginErrors\", new FacesMessage(FacesMessage.SEVERITY_ERROR, MessageConstant.SESSION_EXPIRED_MSG, \"\"));\n+         nav.handleNavigation(fc, null, NavigationConstant.LOGIN_XHTML);\n+     }\n+\n+\n+                else {\n+                    // any run-time exception will use the else block\n+         fc.addMessage(\"errorMessage\", new FacesMessage(FacesMessage.SEVERITY_ERROR, MessageConstant.EXCEPTION_MSG, \"\"));\n+         requestMap.put(\"exceptionMessage\", t.getMessage());\n+         fc.getExternalContext().invalidateSession();\n+         nav.handleNavigation(fc, null, NavigationConstant.CUSTOM_ERROR_XHTML);\n+     }\n                 fc.renderResponse();\n-            } finally {\n+            }\n+\n+\n+finally {\n                 // remove it from queue\n                 i.remove();\n             }\n@@ -108,4 +124,5 @@ public class CustomExceptionHandlerWrapper extends ExceptionHandlerWrapper {\n         //parent handle\n         getWrapped().handle();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}