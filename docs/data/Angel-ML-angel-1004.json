{
    "project_name": "Angel-ML-angel",
    "error_id": "1004",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1004/ServerRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1004/ServerRow.java\nindex d59f9224954..b78f9f2c22d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1004/ServerRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1004/ServerRow.java\n@@ -32,7 +32,6 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  * ServerRow is the storage unit at PS Server when using RowBlock as storage format. Each Row from\n  * worker is split among multiple PS Servers. Therefore, we need startCol and endCol to clarify the\n  * position of this ServerRow.\n- *\n  */\n public abstract class ServerRow implements Serialize {\n   private static final Log LOG = LogFactory.getLog(ServerRow.class);\n@@ -84,7 +83,7 @@ public abstract class ServerRow implements Serialize {\n    * @param output the output\n    * @throws IOException\n    */\n-  protected void writeTo(DataOutputStream output) throws IOException{\n+  protected void writeTo(DataOutputStream output) throws IOException {\n     output.writeInt(clock);\n   }\n \n@@ -94,7 +93,7 @@ public abstract class ServerRow implements Serialize {\n    * @param input the input\n    * @throws IOException\n    */\n-  protected void readFrom(DataInputStream input) throws IOException{\n+  protected void readFrom(DataInputStream input) throws IOException {\n     clock = input.readInt();\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1004/ServerRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1004/ServerRow.java\nindex d59f9224954..732f98acf57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1004/ServerRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1004/ServerRow.java\n@@ -36,7 +36,8 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  */\n public abstract class ServerRow implements Serialize {\n   private static final Log LOG = LogFactory.getLog(ServerRow.class);\n-  protected int clock;\n+\n+protected int clock;\n   protected int rowId;\n   protected int endCol;\n   protected int startCol;\n@@ -84,7 +85,7 @@ public abstract class ServerRow implements Serialize {\n    * @param output the output\n    * @throws IOException\n    */\n-  protected void writeTo(DataOutputStream output) throws IOException{\n+  protected void writeTo(DataOutputStream output) throws IOException {\n     output.writeInt(clock);\n   }\n \n@@ -94,7 +95,7 @@ public abstract class ServerRow implements Serialize {\n    * @param input the input\n    * @throws IOException\n    */\n-  protected void readFrom(DataInputStream input) throws IOException{\n+  protected void readFrom(DataInputStream input) throws IOException {\n     clock = input.readInt();\n   }\n \n@@ -242,4 +243,4 @@ public abstract class ServerRow implements Serialize {\n     return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\"\n         + startCol + \", rowVersion=\" + rowVersion + \"]\";\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1004/ServerRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1004/ServerRow.java\nindex d59f9224954..27a662b611c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1004/ServerRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1004/ServerRow.java\n@@ -22,7 +22,6 @@ import com.tencent.angel.protobuf.generated.MLProtos.RowType;\n import io.netty.buffer.ByteBuf;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -34,13 +33,21 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  * position of this ServerRow.\n  *\n  */\n+\n public abstract class ServerRow implements Serialize {\n+\n   private static final Log LOG = LogFactory.getLog(ServerRow.class);\n+\n   protected int clock;\n+\n   protected int rowId;\n+\n   protected int endCol;\n+\n   protected int startCol;\n+\n   protected int rowVersion;\n+\n   protected final ReentrantReadWriteLock lock;\n \n   /**\n@@ -50,6 +57,7 @@ public abstract class ServerRow implements Serialize {\n    * @param startCol the start col\n    * @param endCol   the end col\n    */\n+\n   public ServerRow(int rowId, int startCol, int endCol) {\n     this.rowId = rowId;\n     this.startCol = startCol;\n@@ -67,6 +75,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the row type\n    */\n+\n   public abstract MLProtos.RowType getRowType();\n \n   /**\n@@ -76,7 +85,9 @@ public abstract class ServerRow implements Serialize {\n    * @param buf     the buf\n    * @param size    the size\n    */\n-  public abstract void update(RowType rowType, ByteBuf buf, int size);\n+\n+  public abstract void update(\n+    RowType rowType, ByteBuf buf, int size);\n \n   /**\n    * Write row to output\n@@ -84,7 +95,8 @@ public abstract class ServerRow implements Serialize {\n    * @param output the output\n    * @throws IOException\n    */\n-  protected void writeTo(DataOutputStream output) throws IOException{\n+\n+  protected void writeTo(DataOutputStream output) throws IOException {\n     output.writeInt(clock);\n   }\n \n@@ -94,7 +106,8 @@ public abstract class ServerRow implements Serialize {\n    * @param input the input\n    * @throws IOException\n    */\n-  protected void readFrom(DataInputStream input) throws IOException{\n+\n+  protected void readFrom(DataInputStream input) throws IOException {\n     clock = input.readInt();\n   }\n \n@@ -121,6 +134,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the size\n    */\n+\n   public abstract int size();\n \n   @Override\n@@ -131,6 +145,7 @@ public abstract class ServerRow implements Serialize {\n   /**\n    * Update row version.\n    */\n+\n   protected void updateRowVersion() {\n     rowVersion++;\n   }\n@@ -142,15 +157,16 @@ public abstract class ServerRow implements Serialize {\n    * @param out the out\n    * @param len the len\n    */\n-  public void encode(ByteBuf in, ByteBuf out, int len) {\n \n-  }\n+  public void encode(\n+    ByteBuf in, ByteBuf out, int len) {}\n \n   /**\n    * Gets row id.\n    *\n    * @return the row id\n    */\n+\n   public int getRowId() {\n     return rowId;\n   }\n@@ -160,6 +176,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the end col\n    */\n+\n   public int getEndCol() {\n     return endCol;\n   }\n@@ -169,6 +186,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the start col\n    */\n+\n   public int getStartCol() {\n     return startCol;\n   }\n@@ -178,6 +196,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the row version\n    */\n+\n   public int getRowVersion() {\n     return rowVersion;\n   }\n@@ -187,6 +206,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the lock\n    */\n+\n   public ReentrantReadWriteLock getLock() {\n     return lock;\n   }\n@@ -196,6 +216,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @return the clock\n    */\n+\n   public int getClock() {\n     return clock;\n   }\n@@ -206,6 +227,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @param rowVersion the row version\n    */\n+\n   public void setRowVersion(int rowVersion) {\n     this.rowVersion = rowVersion;\n   }\n@@ -215,6 +237,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @param startCol the start col\n    */\n+\n   public void setStartCol(int startCol) {\n     this.startCol = startCol;\n   }\n@@ -224,6 +247,7 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @param endCol the end col\n    */\n+\n   public void setEndCol(int endCol) {\n     this.endCol = endCol;\n   }\n@@ -233,13 +257,14 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @param clock the clock\n    */\n+\n   public void setClock(int clock) {\n     this.clock = clock;\n   }\n \n   @Override\n   public String toString() {\n-    return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\"\n-        + startCol + \", rowVersion=\" + rowVersion + \"]\";\n+    return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\" + startCol + \", rowVersion=\" + rowVersion + \"]\";\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}