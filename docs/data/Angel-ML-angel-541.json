{
    "project_name": "Angel-ML-angel",
    "error_id": "541",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/541/ParameterServer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/541/ParameterServer.java\nindex 80fc19fe52b..4fc99e52dc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/541/ParameterServer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/541/ParameterServer.java\n@@ -212,14 +212,14 @@ public class ParameterServer {\n   /**\n    * Create a new Parameter server.\n    *\n-   * @param serverIndex the server index\n-   * @param attemptIndex the attempt index\n+   * @param serverIndex   the server index\n+   * @param attemptIndex  the attempt index\n    * @param appMasterHost the app master host\n    * @param appMasterPort the app master port\n-   * @param conf the conf\n+   * @param conf          the conf\n    */\n   public ParameterServer(int serverIndex, int attemptIndex, String appMasterHost, int appMasterPort,\n-      Configuration conf) {\n+                         Configuration conf) {\n     this.attemptId = new PSAttemptId(new ParameterServerId(serverIndex), attemptIndex);\n     this.attemptIdProto = ProtobufUtil.convertToIdProto(attemptId);\n     this.attemptIndex = attemptIndex;\n@@ -537,11 +537,11 @@ public class ParameterServer {\n     builder.setPsAttemptId(attemptIdProto);\n \n     //calculate data size of all partitions of ps\n-    Map<Integer,ServerMatrix> serverMatrixMap = matrixStorageManager.getMatrices();\n+    Map<Integer, ServerMatrix> serverMatrixMap = matrixStorageManager.getMatrices();\n     long dataSize = 0;\n-    for(ServerMatrix serverMatrix : serverMatrixMap.values()) {\n+    for (ServerMatrix serverMatrix : serverMatrixMap.values()) {\n       Map<Integer, ServerPartition> partitions = serverMatrix.getPartitions();\n-      for (ServerPartition partitoin: partitions.values()) {\n+      for (ServerPartition partitoin : partitions.values()) {\n         dataSize += partitoin.bufferLen();\n       }\n     }\n@@ -559,12 +559,12 @@ public class ParameterServer {\n     // request size\n     pairBuilder.setKey(\"requestSize\");\n     pairBuilder.setValue(\n-        String.format(\"%.2f\", WorkerPool.requestSize.longValue() * 1.0 / 1024/ 1024));\n+        String.format(\"%.2f\", WorkerPool.requestSize.longValue() * 1.0 / 1024 / 1024));\n     builder.addMetrics(pairBuilder.build());\n \n     // data size\n     pairBuilder.setKey(\"dataSize\");\n-    pairBuilder.setValue(String.format(\"%.2f\", dataSize * 1.0 / 1024/ 1024));\n+    pairBuilder.setValue(String.format(\"%.2f\", dataSize * 1.0 / 1024 / 1024));\n     builder.addMetrics(pairBuilder.build());\n     builder.addAllMatrixReports(buildMatrixReports());\n \n@@ -609,7 +609,8 @@ public class ParameterServer {\n   }\n \n   private void syncMatrices(List<MLProtos.MatrixMetaProto> needCreateMatrices,\n-      List<Integer> needReleaseMatrices, List<RecoverPartKeyProto> needRecoverParts)\n+                            List<Integer> needReleaseMatrices,\n+                            List<RecoverPartKeyProto> needRecoverParts)\n       throws Exception {\n     if (!needCreateMatrices.isEmpty()) {\n       createMatrices(ProtobufUtil.convertToMatricesMeta(needCreateMatrices));\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "352",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "354",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 6, indentation should be the same level as line 355.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "520",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "557",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "651",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "654",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "667",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "669",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "680",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/541/ParameterServer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/541/ParameterServer.java\nindex 80fc19fe52b..73ed60a7ee2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/541/ParameterServer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/541/ParameterServer.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps;\n \n import com.google.protobuf.ServiceException;\n@@ -336,25 +335,23 @@ public class ParameterServer {\n \n     conf.setInt(\"io.file.buffer.size\", conf.getInt(AngelConf.ANGEL_PS_IO_FILE_BUFFER_SIZE,\n         AngelConf.DEFAULT_ANGEL_PS_IO_FILE_BUFFER_SIZE));\n-\n-    String user = System.getenv(ApplicationConstants.Environment.USER.name());\n+String user = System.getenv(ApplicationConstants.Environment.USER.name());\n     UserGroupInformation.setConfiguration(conf);\n \n     String runningMode =\n         conf.get(AngelConf.ANGEL_RUNNING_MODE, AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n-    if (runningMode.equals(RunningMode.ANGEL_PS_WORKER.toString())) {\n+if (runningMode.equals(RunningMode.ANGEL_PS_WORKER.toString())) {\n       LOG.debug(\"AngelEnvironment.TASK_NUMBER.name()=\" + AngelEnvironment.TASK_NUMBER.name());\n       conf.set(AngelConf.ANGEL_TASK_ACTUAL_NUM, System.getenv(AngelEnvironment.TASK_NUMBER.name()));\n     }\n \n     final ParameterServer psServer =\n         new ParameterServer(serverIndex, attemptIndex, appMasterHost, appMasterPort, conf);\n-\n-    try {\n+try {\n       Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials();\n-      UserGroupInformation psUGI = UserGroupInformation\n-          .createRemoteUser(System.getenv(ApplicationConstants.Environment.USER.toString()));\n-      // Add tokens to new user so that it may execute its task correctly.\n+      UserGroupInformation psUGI = UserGroupInformation.createRemoteUser(System.getenv(ApplicationConstants.Environment.USER.toString()));\n+\n+// Add tokens to new user so that it may execute its task correctly.\n       psUGI.addCredentials(credentials);\n \n       psUGI.doAs(new PrivilegedExceptionAction<Object>() {\n@@ -520,8 +517,7 @@ public class ParameterServer {\n       matrixBuilder.setMatrixId(matrix.getId()).setMatrixName(matrix.getName());\n       if (context.getPartReplication() > 1) {\n         for (PartitionMeta part : matrix.getPartitionMetas().values()) {\n-          partBuilder.setPartId(part.getPartId()).setStatus(\n-              context.getMatrixStorageManager().getPart(matrix.getId(), part.getPartId()).getState()\n+          partBuilder.setPartId(part.getPartId()).setStatus(context.getMatrixStorageManager().getPart(matrix.getId(), part.getPartId()).getState()\n                   .getNumber());\n           matrixBuilder.addPartReports(partBuilder.build());\n         }\n@@ -537,9 +533,9 @@ public class ParameterServer {\n     builder.setPsAttemptId(attemptIdProto);\n \n     //calculate data size of all partitions of ps\n-    Map<Integer,ServerMatrix> serverMatrixMap = matrixStorageManager.getMatrices();\n+    Map<Integer, ServerMatrix> serverMatrixMap = matrixStorageManager.getMatrices();\n     long dataSize = 0;\n-    for(ServerMatrix serverMatrix : serverMatrixMap.values()) {\n+    for (ServerMatrix serverMatrix : serverMatrixMap.values()) {\n       Map<Integer, ServerPartition> partitions = serverMatrix.getPartitions();\n       for (ServerPartition partitoin: partitions.values()) {\n         dataSize += partitoin.bufferLen();\n@@ -558,8 +554,7 @@ public class ParameterServer {\n \n     // request size\n     pairBuilder.setKey(\"requestSize\");\n-    pairBuilder.setValue(\n-        String.format(\"%.2f\", WorkerPool.requestSize.longValue() * 1.0 / 1024/ 1024));\n+    pairBuilder.setValue(String.format(\"%.2f\", WorkerPool.requestSize.longValue() * 1.0 / 1024/ 1024));\n     builder.addMetrics(pairBuilder.build());\n \n     // data size\n@@ -582,13 +577,11 @@ public class ParameterServer {\n             stop(-1);\n           }\n           break;\n-\n-        case PSCOMMAND_SHUTDOWN:\n+  case PSCOMMAND_SHUTDOWN:\n           LOG.error(\"shutdown command come from appmaster, exit now!!\");\n           stop(-1);\n           break;\n-\n-        default:\n+  default:\n           break;\n       }\n \n@@ -602,7 +595,7 @@ public class ParameterServer {\n       }\n       syncMatrices(ret.getNeedCreateMatricesList(), ret.getNeedReleaseMatrixIdsList(),\n           ret.getNeedRecoverPartsList());\n-    } catch (Throwable e) {\n+  } catch (Throwable e) {\n       LOG.error(\"send heartbeat to appmaster failed \", e);\n       stop(-1);\n     }\n@@ -611,7 +604,7 @@ public class ParameterServer {\n   private void syncMatrices(List<MLProtos.MatrixMetaProto> needCreateMatrices,\n       List<Integer> needReleaseMatrices, List<RecoverPartKeyProto> needRecoverParts)\n       throws Exception {\n-    if (!needCreateMatrices.isEmpty()) {\n+  if (!needCreateMatrices.isEmpty()) {\n       createMatrices(ProtobufUtil.convertToMatricesMeta(needCreateMatrices));\n     }\n \n@@ -653,16 +646,12 @@ public class ParameterServer {\n               LOG.info(\"There is no checkpoint results for matrix \" + matrixMetas.get(i).getName());\n             } else {\n               inputPath = new Path(saveResults.get(saveResults.size() - 1).getMatrixPath());\n-              LOG.info(\n-                  \"There is \" + saveResults.size() + \" checkpoint results for matrix + \"\n-                      + matrixMetas\n-                      .get(i).getName()\n-                      + \" we choose the latest result in dir \" + saveResults\n-                      .get(saveResults.size() - 1).getMatrixPath());\n+              LOG.info(\"There is \" + saveResults.size() + \" checkpoint results for matrix + \"\n+                      + matrixMetas.get(i).getName()\n+                      + \" we choose the latest result in dir \" + saveResults.get(saveResults.size() - 1).getMatrixPath());\n             }\n           } catch (ServiceException e) {\n-            LOG.error(\n-                \"Get checkpoint results for matrix \" + matrixMetas.get(i).getName() + \" failed \",\n+            LOG.error(\"Get checkpoint results for matrix \" + matrixMetas.get(i).getName() + \" failed \",\n                 e);\n           }\n         }\n@@ -675,11 +664,9 @@ public class ParameterServer {\n               LOG.info(\"There is no old save result for matrix \" + matrixMetas.get(i).getName());\n             } else {\n               inputPath = new Path(saveResults.get(saveResults.size() - 1).getMatrixPath());\n-              LOG.info(\n-                  \"There is \" + saveResults.size() + \" old save results for matrix + \" + matrixMetas\n+              LOG.info(\"There is \" + saveResults.size() + \" old save results for matrix + \" + matrixMetas\n                       .get(i).getName()\n-                      + \" we choose the latest result in dir \" + saveResults\n-                      .get(saveResults.size() - 1).getMatrixPath());\n+                      + \" we choose the latest result in dir \" + saveResults.get(saveResults.size() - 1).getMatrixPath());\n             }\n           } catch (ServiceException e) {\n             LOG.error(\"Get save results for matrix \" + matrixMetas.get(i).getName() + \" failed \",\n@@ -690,15 +677,14 @@ public class ParameterServer {\n         if (inputPath != null) {\n           LOG.info(\"Load matrix \" + matrixMetas.get(i).getName() + \" from \" + inputPath.toString());\n           matrixLoadContexts.add(new PSMatrixLoadContext(matrixMetas.get(i).getId(),\n-              inputPath.toString(),\n-              new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet()),\n+              inputPath.toString(), new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet()),\n               SnapshotFormat.class.getName()));\n-        } else {\n+  } else {\n           // Just init it again\n           if (matrixMetas.get(i).getInitFunc() != null) {\n             LOG.info(\"Matrix \" + matrixMetas.get(i) + \" has a init function \" + matrixMetas.get(i)\n                 .getInitFunc().getClass().getName() + \", use this function to reinit the matrix\");\n-            long startTs = System.currentTimeMillis();\n+long startTs = System.currentTimeMillis();\n             matrixMetas.get(i).getInitFunc()\n                 .init(context.getMatrixStorageManager().getMatrix(matrixMetas.get(i).getId()));\n             LOG.info(\"Reinit the matrix use time \" + (System.currentTimeMillis() - startTs));\n@@ -747,7 +733,7 @@ public class ParameterServer {\n     if (getAttemptIndex() > 0) {\n       LOG.info(\"PS \" + getServerId() + \" running attempt \" + getAttemptIndex()\n           + \" load matrices from snapshot if need\");\n-      List<MatrixMeta> matrixMetas = master.getMatricesMeta();\n+List<MatrixMeta> matrixMetas = master.getMatricesMeta();\n       if (!matrixMetas.isEmpty()) {\n         createMatrices(matrixMetas);\n       }\n@@ -877,4 +863,4 @@ public class ParameterServer {\n   public RunningContext getRunningContext() {\n     return runningContext;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "332",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "341",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "344",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "430",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "431",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "432",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "433",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "454",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "457",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "471",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "501",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "537",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "574",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "582",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "627",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "630",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "643",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "646",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "652",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "656",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "659",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "703",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/541/ParameterServer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/541/ParameterServer.java\nindex 80fc19fe52b..67f151571d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/541/ParameterServer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/541/ParameterServer.java\n@@ -78,6 +78,7 @@ import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;\n  * Parameter server,hold and manage individual parameters that divided by {@link\n  * com.tencent.angel.master.AngelApplicationMaster}.\n  */\n+\n public class ParameterServer {\n \n   private static final Log LOG = LogFactory.getLog(ParameterServer.class);\n@@ -106,7 +107,6 @@ public class ParameterServer {\n    * PS Attempt id proto\n    */\n   private final PSAttemptIdProto attemptIdProto;\n-\n   private final AtomicBoolean stopped;\n \n   /**\n@@ -143,8 +143,6 @@ public class ParameterServer {\n    * Matrix meta manager\n    */\n   private volatile PSMatrixMetaManager matrixMetaManager;\n-\n-\n   private volatile PSModelIOExecutor ioExecutor;\n \n   /**\n@@ -176,11 +174,8 @@ public class ParameterServer {\n    * The RPC handlers for matrix data\n    */\n   private volatile WorkerPool workerPool;\n-\n   private volatile RunningContext runningContext;\n-\n   private final PSFailedReport psFailedReport;\n-\n   private static final AtomicInteger runningWorkerGroupNum = new AtomicInteger(0);\n   private static final AtomicInteger runningWorkerNum = new AtomicInteger(0);\n   private static final AtomicInteger runningTaskNum = new AtomicInteger(0);\n@@ -218,8 +213,8 @@ public class ParameterServer {\n    * @param appMasterPort the app master port\n    * @param conf the conf\n    */\n-  public ParameterServer(int serverIndex, int attemptIndex, String appMasterHost, int appMasterPort,\n-      Configuration conf) {\n+\n+  public ParameterServer(int serverIndex, int attemptIndex, String appMasterHost, int appMasterPort, Configuration conf) {\n     this.attemptId = new PSAttemptId(new ParameterServerId(serverIndex), attemptIndex);\n     this.attemptIdProto = ProtobufUtil.convertToIdProto(attemptId);\n     this.attemptIndex = attemptIndex;\n@@ -235,6 +230,7 @@ public class ParameterServer {\n    *\n    * @return the matrix partition manager\n    */\n+\n   public MatrixStorageManager getMatrixStorageManager() {\n     return matrixStorageManager;\n   }\n@@ -242,6 +238,7 @@ public class ParameterServer {\n   /**\n    * Get matrix meta manager\n    */\n+\n   public PSMatrixMetaManager getMatrixMetaManager() {\n     return matrixMetaManager;\n   }\n@@ -251,6 +248,7 @@ public class ParameterServer {\n    *\n    * @param exitCode the exit code\n    */\n+\n   public void stop(int exitCode) {\n     LOG.info(\"stop ps rpcServer!\");\n     if (psServerService != null) {\n@@ -310,7 +308,6 @@ public class ParameterServer {\n         runningContext.stop();\n         runningContext = null;\n       }\n-\n       AngelServiceLoader.stopService();\n       exit(exitCode);\n     }\n@@ -325,39 +322,31 @@ public class ParameterServer {\n \n   public static void main(String[] argv) {\n     LOG.info(\"Starting Parameter Server\");\n+\n     int serverIndex = Integer.valueOf(System.getenv(AngelEnvironment.PARAMETERSERVER_ID.name()));\n     String appMasterHost = System.getenv(AngelEnvironment.LISTEN_ADDR.name());\n     int appMasterPort = Integer.valueOf(System.getenv(AngelEnvironment.LISTEN_PORT.name()));\n-\n     int attemptIndex = Integer.valueOf(System.getenv(AngelEnvironment.PS_ATTEMPT_ID.name()));\n-\n     Configuration conf = new Configuration();\n     conf.addResource(AngelConf.ANGEL_JOB_CONF_FILE);\n-\n-    conf.setInt(\"io.file.buffer.size\", conf.getInt(AngelConf.ANGEL_PS_IO_FILE_BUFFER_SIZE,\n-        AngelConf.DEFAULT_ANGEL_PS_IO_FILE_BUFFER_SIZE));\n-\n+    conf.setInt(\"io.file.buffer.size\", conf.getInt(AngelConf.ANGEL_PS_IO_FILE_BUFFER_SIZE, AngelConf.DEFAULT_ANGEL_PS_IO_FILE_BUFFER_SIZE));\n     String user = System.getenv(ApplicationConstants.Environment.USER.name());\n     UserGroupInformation.setConfiguration(conf);\n-\n-    String runningMode =\n-        conf.get(AngelConf.ANGEL_RUNNING_MODE, AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n+    String runningMode = conf.get(AngelConf.ANGEL_RUNNING_MODE, AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n     if (runningMode.equals(RunningMode.ANGEL_PS_WORKER.toString())) {\n       LOG.debug(\"AngelEnvironment.TASK_NUMBER.name()=\" + AngelEnvironment.TASK_NUMBER.name());\n       conf.set(AngelConf.ANGEL_TASK_ACTUAL_NUM, System.getenv(AngelEnvironment.TASK_NUMBER.name()));\n     }\n \n-    final ParameterServer psServer =\n-        new ParameterServer(serverIndex, attemptIndex, appMasterHost, appMasterPort, conf);\n-\n+    final ParameterServer psServer = new ParameterServer(serverIndex, attemptIndex, appMasterHost, appMasterPort, conf);\n     try {\n       Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials();\n-      UserGroupInformation psUGI = UserGroupInformation\n-          .createRemoteUser(System.getenv(ApplicationConstants.Environment.USER.toString()));\n+      UserGroupInformation psUGI = UserGroupInformation.createRemoteUser(System.getenv(ApplicationConstants.Environment.USER.toString()));\n       // Add tokens to new user so that it may execute its task correctly.\n       psUGI.addCredentials(credentials);\n-\n       psUGI.doAs(new PrivilegedExceptionAction<Object>() {\n+\n+\n         @Override\n         public Object run() throws Exception {\n           psServer.initialize();\n@@ -377,6 +366,7 @@ public class ParameterServer {\n    *\n    * @return the host address\n    */\n+\n   public String getHostAddress() throws UnknownHostException {\n     return psServerService.getHostAddress();\n   }\n@@ -386,6 +376,7 @@ public class ParameterServer {\n    *\n    * @return the port\n    */\n+\n   public int getPort() {\n     return psServerService.getPort();\n   }\n@@ -395,6 +386,7 @@ public class ParameterServer {\n    *\n    * @return the server id\n    */\n+\n   public ParameterServerId getServerId() {\n     return attemptId.getPsId();\n   }\n@@ -404,6 +396,7 @@ public class ParameterServer {\n    *\n    * @return the ps attempt id\n    */\n+\n   public PSAttemptId getPSAttemptId() {\n     return attemptId;\n   }\n@@ -413,6 +406,7 @@ public class ParameterServer {\n    *\n    * @return the master location\n    */\n+\n   public Location getMasterLocation() {\n     return locationManager.getMasterLocation();\n   }\n@@ -422,6 +416,7 @@ public class ParameterServer {\n    *\n    * @return the conf\n    */\n+\n   public Configuration getConf() {\n     return conf;\n   }\n@@ -429,73 +424,57 @@ public class ParameterServer {\n   /**\n    * Initialize.\n    */\n+\n   public void initialize() throws IOException, InstantiationException, IllegalAccessException {\n     LOG.info(\"Initialize a parameter server\");\n-    ServerRow.maxLockWaitTimeMs = conf.getInt(AngelConf.ANGEL_PS_MAX_LOCK_WAITTIME_MS,\n-        AngelConf.DEFAULT_ANGEL_PS_MAX_LOCK_WAITTIME_MS);\n-\n-    ServerRow.useAdaptiveKey = conf.getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_KEY_ENABLE,\n-        AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_KEY_ENABLE);\n-\n-    ServerRow.useAdaptiveStorage = conf.getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE,\n-        AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n-\n-    ServerRow.sparseToDenseFactor = conf.getFloat(AngelConf.ANGEL_PS_SPARSE_TO_DENSE_FACTOR,\n-        AngelConf.DEFAULT_ANGEL_PS_SPARSE_TO_DENSE_FACTOR);\n-\n+    ServerRow.maxLockWaitTimeMs = conf.getInt(AngelConf.ANGEL_PS_MAX_LOCK_WAITTIME_MS, AngelConf.DEFAULT_ANGEL_PS_MAX_LOCK_WAITTIME_MS);\n+    ServerRow.useAdaptiveKey = conf.getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_KEY_ENABLE, AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_KEY_ENABLE);\n+    ServerRow.useAdaptiveStorage = conf.getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE, AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n+    ServerRow.sparseToDenseFactor = conf.getFloat(AngelConf.ANGEL_PS_SPARSE_TO_DENSE_FACTOR, AngelConf.DEFAULT_ANGEL_PS_SPARSE_TO_DENSE_FACTOR);\n     locationManager = new PSLocationManager(context);\n     locationManager.setMasterLocation(masterLocation);\n-\n     runningContext = new RunningContext(context);\n     workerPool = new WorkerPool(context, runningContext);\n     workerPool.init();\n-\n     ioExecutor = new PSModelIOExecutor(context);\n     ioExecutor.init();\n-\n     matrixStorageManager = new MatrixStorageManager(context);\n     matrixMetaManager = new PSMatrixMetaManager(context);\n-\n     master = new MasterClient(context);\n     master.init();\n-\n     psServerService = new ParameterServerService(context);\n     psServerService.start();\n     matrixTransportServer = new MatrixTransportServer(getPort() + 1, context);\n-\n     saver = new PSModelSaver(context);\n     loader = new PSModelLoader(context);\n-\n     snapshotDumper = new SnapshotDumper(context);\n   }\n \n   private void startHeartbeat() {\n-    final int heartbeatInterval = conf.getInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS,\n-        AngelConf.DEFAULT_ANGEL_PS_HEARTBEAT_INTERVAL_MS);\n+    final int heartbeatInterval = conf.getInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, AngelConf.DEFAULT_ANGEL_PS_HEARTBEAT_INTERVAL_MS);\n     LOG.info(\"Starting HeartbeatThread, interval is \" + heartbeatInterval + \" ms\");\n-    heartbeatThread = new Thread(() -> {\n-      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n-        try {\n-          Thread.sleep(heartbeatInterval);\n-        } catch (InterruptedException e) {\n-          if (!stopped.get()) {\n-            LOG.warn(\"Allocated thread interrupted. Returning.\", e);\n-          }\n-          return;\n-        }\n-\n-        try {\n-          if (!stopped.get()) {\n-            heartbeat();\n-          }\n-        } catch (YarnRuntimeException e) {\n-          LOG.error(\"Error communicating with AM: \" + e.getMessage(), e);\n-          return;\n-        } catch (Exception e) {\n-          LOG.error(\"ERROR IN CONTACTING RM. \", e);\n-        }\n-      }\n-    });\n+    heartbeatThread = new Thread(()-> {\n+                                   while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n+                                     try {\n+                                       Thread.sleep(heartbeatInterval);\n+                                     } catch (InterruptedException e) {\n+                                       if (!stopped.get()) {\n+                                         LOG.warn(\"Allocated thread interrupted. Returning.\", e);\n+                                       }\n+                                       return;\n+                                     }\n+                                     try {\n+                                       if (!stopped.get()) {\n+                                         heartbeat();\n+                                       }\n+                                     } catch (YarnRuntimeException e) {\n+                                       LOG.error(\"Error communicating with AM: \" + e.getMessage(), e);\n+                                       return;\n+                                     } catch (Exception e) {\n+                                       LOG.error(\"ERROR IN CONTACTING RM. \", e);\n+                                     }\n+                                   }\n+                                 });\n     heartbeatThread.setName(\"heartbeatThread\");\n     heartbeatThread.start();\n   }\n@@ -515,14 +494,11 @@ public class ParameterServer {\n     MatrixReportProto.Builder matrixBuilder = MatrixReportProto.newBuilder();\n     PartReportProto.Builder partBuilder = PartReportProto.newBuilder();\n     List<MatrixReportProto> ret = new ArrayList<>();\n-\n     for (MatrixMeta matrix : matrixMetaManager.getMatrixMetas().values()) {\n       matrixBuilder.setMatrixId(matrix.getId()).setMatrixName(matrix.getName());\n       if (context.getPartReplication() > 1) {\n         for (PartitionMeta part : matrix.getPartitionMetas().values()) {\n-          partBuilder.setPartId(part.getPartId()).setStatus(\n-              context.getMatrixStorageManager().getPart(matrix.getId(), part.getPartId()).getState()\n-                  .getNumber());\n+          partBuilder.setPartId(part.getPartId()).setStatus(context.getMatrixStorageManager().getPart(matrix.getId(), part.getPartId()).getState().getNumber());\n           matrixBuilder.addPartReports(partBuilder.build());\n         }\n       }\n@@ -537,11 +513,11 @@ public class ParameterServer {\n     builder.setPsAttemptId(attemptIdProto);\n \n     //calculate data size of all partitions of ps\n-    Map<Integer,ServerMatrix> serverMatrixMap = matrixStorageManager.getMatrices();\n+    Map<Integer, ServerMatrix> serverMatrixMap = matrixStorageManager.getMatrices();\n     long dataSize = 0;\n-    for(ServerMatrix serverMatrix : serverMatrixMap.values()) {\n+    for (ServerMatrix serverMatrix : serverMatrixMap.values()) {\n       Map<Integer, ServerPartition> partitions = serverMatrix.getPartitions();\n-      for (ServerPartition partitoin: partitions.values()) {\n+      for (ServerPartition partitoin : partitions.values()) {\n         dataSize += partitoin.bufferLen();\n       }\n     }\n@@ -558,16 +534,14 @@ public class ParameterServer {\n \n     // request size\n     pairBuilder.setKey(\"requestSize\");\n-    pairBuilder.setValue(\n-        String.format(\"%.2f\", WorkerPool.requestSize.longValue() * 1.0 / 1024/ 1024));\n+    pairBuilder.setValue(String.format(\"%.2f\", WorkerPool.requestSize.longValue() * 1.0 / 1024 / 1024));\n     builder.addMetrics(pairBuilder.build());\n \n     // data size\n     pairBuilder.setKey(\"dataSize\");\n-    pairBuilder.setValue(String.format(\"%.2f\", dataSize * 1.0 / 1024/ 1024));\n+    pairBuilder.setValue(String.format(\"%.2f\", dataSize * 1.0 / 1024 / 1024));\n     builder.addMetrics(pairBuilder.build());\n     builder.addAllMatrixReports(buildMatrixReports());\n-\n     PSReportResponse ret;\n     PSReportRequest request = builder.build();\n     LOG.debug(\"ps hb = \" + request);\n@@ -582,16 +556,13 @@ public class ParameterServer {\n             stop(-1);\n           }\n           break;\n-\n         case PSCOMMAND_SHUTDOWN:\n           LOG.error(\"shutdown command come from appmaster, exit now!!\");\n           stop(-1);\n           break;\n-\n         default:\n           break;\n       }\n-\n       LOG.debug(\"ps hb ret = \" + ret);\n       if (ret.hasNeedSaveMatrices()) {\n         saver.save(ProtobufUtil.convert(ret.getNeedSaveMatrices()));\n@@ -600,8 +571,7 @@ public class ParameterServer {\n       if (ret.hasNeedLoadMatrices()) {\n         loader.load(ProtobufUtil.convert(ret.getNeedLoadMatrices()));\n       }\n-      syncMatrices(ret.getNeedCreateMatricesList(), ret.getNeedReleaseMatrixIdsList(),\n-          ret.getNeedRecoverPartsList());\n+      syncMatrices(ret.getNeedCreateMatricesList(), ret.getNeedReleaseMatrixIdsList(), ret.getNeedRecoverPartsList());\n     } catch (Throwable e) {\n       LOG.error(\"send heartbeat to appmaster failed \", e);\n       stop(-1);\n@@ -609,8 +579,7 @@ public class ParameterServer {\n   }\n \n   private void syncMatrices(List<MLProtos.MatrixMetaProto> needCreateMatrices,\n-      List<Integer> needReleaseMatrices, List<RecoverPartKeyProto> needRecoverParts)\n-      throws Exception {\n+                            List<Integer> needReleaseMatrices, List<RecoverPartKeyProto> needRecoverParts) throws Exception {\n     if (!needCreateMatrices.isEmpty()) {\n       createMatrices(ProtobufUtil.convertToMatricesMeta(needCreateMatrices));\n     }\n@@ -632,6 +601,7 @@ public class ParameterServer {\n     }\n \n     // Recover PS from snapshot or load path\n+\n     if (context.getPSAttemptId().getIndex() > 0) {\n       int matrixNum = matrixMetas.size();\n       List<PSMatrixLoadContext> matrixLoadContexts = new ArrayList<>(matrixMetas.size());\n@@ -646,6 +616,7 @@ public class ParameterServer {\n         }\n \n         // 2. Check new checkpoints\n+\n         if (inputPath == null) {\n           try {\n             List<SaveResult> saveResults = master.getCheckpoints(matrixMetas.get(i).getId());\n@@ -653,21 +624,15 @@ public class ParameterServer {\n               LOG.info(\"There is no checkpoint results for matrix \" + matrixMetas.get(i).getName());\n             } else {\n               inputPath = new Path(saveResults.get(saveResults.size() - 1).getMatrixPath());\n-              LOG.info(\n-                  \"There is \" + saveResults.size() + \" checkpoint results for matrix + \"\n-                      + matrixMetas\n-                      .get(i).getName()\n-                      + \" we choose the latest result in dir \" + saveResults\n-                      .get(saveResults.size() - 1).getMatrixPath());\n+              LOG.info(\"There is \" + saveResults.size() + \" checkpoint results for matrix + \" + matrixMetas.get(i).getName() + \" we choose the latest result in dir \" + saveResults.get(saveResults.size() - 1).getMatrixPath());\n             }\n           } catch (ServiceException e) {\n-            LOG.error(\n-                \"Get checkpoint results for matrix \" + matrixMetas.get(i).getName() + \" failed \",\n-                e);\n+            LOG.error(\"Get checkpoint results for matrix \" + matrixMetas.get(i).getName() + \" failed \", e);\n           }\n         }\n \n         // 3. Check load path setting and old save result\n+\n         if (inputPath == null) {\n           try {\n             List<SaveResult> saveResults = master.getSaveResult(matrixMetas.get(i).getId());\n@@ -675,32 +640,23 @@ public class ParameterServer {\n               LOG.info(\"There is no old save result for matrix \" + matrixMetas.get(i).getName());\n             } else {\n               inputPath = new Path(saveResults.get(saveResults.size() - 1).getMatrixPath());\n-              LOG.info(\n-                  \"There is \" + saveResults.size() + \" old save results for matrix + \" + matrixMetas\n-                      .get(i).getName()\n-                      + \" we choose the latest result in dir \" + saveResults\n-                      .get(saveResults.size() - 1).getMatrixPath());\n+              LOG.info(\"There is \" + saveResults.size() + \" old save results for matrix + \" + matrixMetas.get(i).getName() + \" we choose the latest result in dir \" + saveResults.get(saveResults.size() - 1).getMatrixPath());\n             }\n           } catch (ServiceException e) {\n-            LOG.error(\"Get save results for matrix \" + matrixMetas.get(i).getName() + \" failed \",\n-                e);\n+            LOG.error(\"Get save results for matrix \" + matrixMetas.get(i).getName() + \" failed \", e);\n           }\n         }\n \n         if (inputPath != null) {\n           LOG.info(\"Load matrix \" + matrixMetas.get(i).getName() + \" from \" + inputPath.toString());\n-          matrixLoadContexts.add(new PSMatrixLoadContext(matrixMetas.get(i).getId(),\n-              inputPath.toString(),\n-              new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet()),\n-              SnapshotFormat.class.getName()));\n+          matrixLoadContexts.add(new PSMatrixLoadContext(matrixMetas.get(i).getId(), inputPath.toString(), new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet()), SnapshotFormat.class.getName()));\n         } else {\n           // Just init it again\n           if (matrixMetas.get(i).getInitFunc() != null) {\n-            LOG.info(\"Matrix \" + matrixMetas.get(i) + \" has a init function \" + matrixMetas.get(i)\n-                .getInitFunc().getClass().getName() + \", use this function to reinit the matrix\");\n+            LOG.info(\"Matrix \" + matrixMetas.get(i) + \" has a init function \" + matrixMetas.get(i).getInitFunc().getClass().getName() + \", use this function to reinit the matrix\");\n+\n             long startTs = System.currentTimeMillis();\n-            matrixMetas.get(i).getInitFunc()\n-                .init(context.getMatrixStorageManager().getMatrix(matrixMetas.get(i).getId()));\n+            matrixMetas.get(i).getInitFunc().init(context.getMatrixStorageManager().getMatrix(matrixMetas.get(i).getId()));\n             LOG.info(\"Reinit the matrix use time \" + (System.currentTimeMillis() - startTs));\n           }\n         }\n@@ -728,6 +684,7 @@ public class ParameterServer {\n    *\n    * @throws IOException the io exception\n    */\n+\n   public void start() throws Exception {\n     if (snapshotDumper != null) {\n       snapshotDumper.start();\n@@ -738,21 +695,17 @@ public class ParameterServer {\n     // if(ps2PSPusher != null) {\n     // ps2PSPusher.start();\n     // }\n-\n     workerPool.start();\n     ioExecutor.start();\n     matrixTransportServer.start();\n     runningContext.start();\n-\n     if (getAttemptIndex() > 0) {\n-      LOG.info(\"PS \" + getServerId() + \" running attempt \" + getAttemptIndex()\n-          + \" load matrices from snapshot if need\");\n+      LOG.info(\"PS \" + getServerId() + \" running attempt \" + getAttemptIndex() + \" load matrices from snapshot if need\");\n       List<MatrixMeta> matrixMetas = master.getMatricesMeta();\n       if (!matrixMetas.isEmpty()) {\n         createMatrices(matrixMetas);\n       }\n     }\n-\n     register();\n     startHeartbeat();\n     AngelServiceLoader.startServiceIfNeed(this, getConf());\n@@ -761,6 +714,7 @@ public class ParameterServer {\n   /**\n    * Done, will notify master and exit\n    */\n+\n   public void done() {\n     try {\n       master.done();\n@@ -777,6 +731,7 @@ public class ParameterServer {\n    *\n    * @param errorLog the error log\n    */\n+\n   public void failed(String errorLog) {\n     try {\n       master.failed(errorLog);\n@@ -793,6 +748,7 @@ public class ParameterServer {\n    *\n    * @return the ps server service\n    */\n+\n   public ParameterServerService getPsService() {\n     return psServerService;\n   }\n@@ -802,6 +758,7 @@ public class ParameterServer {\n    *\n    * @return MasterProtocol rpc client to master\n    */\n+\n   public MasterClient getMaster() {\n     return master;\n   }\n@@ -811,6 +768,7 @@ public class ParameterServer {\n    *\n    * @return attempt index\n    */\n+\n   public int getAttemptIndex() {\n     return attemptIndex;\n   }\n@@ -820,6 +778,7 @@ public class ParameterServer {\n    *\n    * @return location manager\n    */\n+\n   public PSLocationManager getLocationManager() {\n     return locationManager;\n   }\n@@ -838,6 +797,7 @@ public class ParameterServer {\n    *\n    * @return RPC worker pool\n    */\n+\n   public WorkerPool getWorkerPool() {\n     return workerPool;\n   }\n@@ -847,6 +807,7 @@ public class ParameterServer {\n    *\n    * @return File Read/Writer executors\n    */\n+\n   public PSModelIOExecutor getPSModelIOExecutor() {\n     return ioExecutor;\n   }\n@@ -856,6 +817,7 @@ public class ParameterServer {\n    *\n    * @return Snapshot dumper\n    */\n+\n   public SnapshotDumper getSnapshotDumper() {\n     return snapshotDumper;\n   }\n@@ -865,6 +827,7 @@ public class ParameterServer {\n    *\n    * @return PS failed information reporter\n    */\n+\n   public PSFailedReport getPSFailedReport() {\n     return psFailedReport;\n   }\n@@ -874,7 +837,9 @@ public class ParameterServer {\n    *\n    * @return PS running context\n    */\n+\n   public RunningContext getRunningContext() {\n     return runningContext;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 146
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}