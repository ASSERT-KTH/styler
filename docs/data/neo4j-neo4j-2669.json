{
    "project_name": "neo4j-neo4j",
    "error_id": "2669",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2669/ExecutionPlanDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2669/ExecutionPlanDescription.java\nindex c7f645933d4..ff5e9b24e84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2669/ExecutionPlanDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2669/ExecutionPlanDescription.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.List;\n@@ -28,7 +29,7 @@ import org.neo4j.internal.helpers.MathUtil;\n \n /**\n  * Instances describe single execution steps in a Cypher query execution plan\n- *\n+ * <p>\n  * Execution plans form a tree of execution steps.  Each step is described by a {@link ExecutionPlanDescription} object.\n  */\n @PublicApi\n@@ -50,7 +51,7 @@ public interface ExecutionPlanDescription\n \n     /**\n      * Retrieve argument map for the associated execution step\n-     *\n+     * <p>\n      * Valid arguments are all Java primitive values, Strings, Arrays of those, and Maps from Strings to\n      * valid arguments.  Results are guaranteed to be trees (i.e. there are no cyclic dependencies among values)\n      *\n@@ -66,7 +67,7 @@ public interface ExecutionPlanDescription\n     /**\n      * Signifies that the query was profiled, and that statistics from the profiling can\n      * {@link #getProfilerStatistics() be retrieved}.\n-     *\n+     * <p>\n      * The <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code PROFILE}</a> directive in Cypher\n      * ensures the presence of profiler statistics in the plan description.\n      *\n@@ -76,7 +77,7 @@ public interface ExecutionPlanDescription\n \n     /**\n      * Retrieve the statistics collected from profiling this query.\n-     *\n+     * <p>\n      * If the query was not profiled, this method will throw {@link java.util.NoSuchElementException}.\n      *\n      * @return profiler statistics for this execution step iff available\n@@ -124,19 +125,17 @@ public interface ExecutionPlanDescription\n \n         /**\n          * @return number of page cache misses caused by executing the associated execution step\n-\n          * @throws IllegalStateException if no time was recorded.\n          */\n         long getPageCacheMisses();\n \n         /**\n          * @return the ratio of page cache hits to total number of lookups or 0 if no data is available\n-\n          * @throws IllegalStateException if no time was recorded.\n          */\n         default double getPageCacheHitRatio()\n         {\n-            return MathUtil.portion( getPageCacheHits(), getPageCacheMisses() );\n+            return MathUtil.portion(getPageCacheHits(), getPageCacheMisses());\n         }\n \n         /**\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}