{
    "project_name": "bakdata-conquery",
    "error_id": "323",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "warning",
                "message": "trailing whitespaces",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\t * After the token extraction process the Token is resubmitted to the realm from the AuthFilter to\n\t * the {@link ConqueryAuthenticator} which dispatches it to shiro.\n\t * \n\t * @param request An incoming request that potentially holds a token for the implementing realm.\n\t * @return The extracted {@link AuthenticationToken} or <code>null</code> if no token could be parsed.\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler/323/ConqueryAuthenticationRealm.java\nindex 746190f9bc3..9dd90bea8b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler/323/ConqueryAuthenticationRealm.java\n@@ -20,7 +20,7 @@ public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n \t}\n \t\n \tprotected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n-\t\n+\n \t/**\n \t * Authenticating realms need to be able to extract a token from a request.\n \t * How it performs the extraction is implementation dependent.\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/intellij/323/ConqueryAuthenticationRealm.java\nindex 746190f9bc3..d0b5d3e8aa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/intellij/323/ConqueryAuthenticationRealm.java\n@@ -13,26 +13,26 @@ import org.apache.shiro.realm.AuthenticatingRealm;\n  * Abstract class that needs to be implemented for authenticating realms in Conquery.\n  */\n public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n-\t\n-\t@Override\n-\tprotected final AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException{\n-\t\treturn doGetConqueryAuthenticationInfo(token);\n-\t}\n-\t\n-\tprotected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n-\t\n-\t/**\n-\t * Authenticating realms need to be able to extract a token from a request.\n-\t * How it performs the extraction is implementation dependent.\n-\t * Anyway the realm should NOT alter the request.\n-\t * This function is called prior to the authentication process in the {@link DefaultAuthFilter}.\n-\t * After the token extraction process the Token is resubmitted to the realm from the AuthFilter to\n-\t * the {@link ConqueryAuthenticator} which dispatches it to shiro.\n-\t * \n-\t * @param request An incoming request that potentially holds a token for the implementing realm.\n-\t * @return The extracted {@link AuthenticationToken} or <code>null</code> if no token could be parsed.\n-\t */\n-\t@Nullable\n-\tpublic abstract AuthenticationToken extractToken(ContainerRequestContext request);\n-\t\n+\n+    @Override\n+    protected final AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+        return doGetConqueryAuthenticationInfo(token);\n+    }\n+\n+    protected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n+\n+    /**\n+     * Authenticating realms need to be able to extract a token from a request.\n+     * How it performs the extraction is implementation dependent.\n+     * Anyway the realm should NOT alter the request.\n+     * This function is called prior to the authentication process in the {@link DefaultAuthFilter}.\n+     * After the token extraction process the Token is resubmitted to the realm from the AuthFilter to\n+     * the {@link ConqueryAuthenticator} which dispatches it to shiro.\n+     *\n+     * @param request An incoming request that potentially holds a token for the implementing realm.\n+     * @return The extracted {@link AuthenticationToken} or <code>null</code> if no token could be parsed.\n+     */\n+    @Nullable\n+    public abstract AuthenticationToken extractToken(ContainerRequestContext request);\n+\n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "column": "5",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 1, expected is 0, indentation should be the same level as line 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "column": "1",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/naturalize/323/ConqueryAuthenticationRealm.java\nindex 746190f9bc3..f99c9e2ff0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/naturalize/323/ConqueryAuthenticationRealm.java\n@@ -15,12 +15,12 @@ import org.apache.shiro.realm.AuthenticatingRealm;\n public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n \t\n \t@Override\n-\tprotected final AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException{\n+\tprotected final AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n \t\treturn doGetConqueryAuthenticationInfo(token);\n \t}\n \t\n \tprotected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n-\t\n+\n \t/**\n \t * Authenticating realms need to be able to extract a token from a request.\n \t * How it performs the extraction is implementation dependent.\n@@ -32,7 +32,7 @@ public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n \t * @param request An incoming request that potentially holds a token for the implementing realm.\n \t * @return The extracted {@link AuthenticationToken} or <code>null</code> if no token could be parsed.\n \t */\n-\t@Nullable\n+@Nullable\n \tpublic abstract AuthenticationToken extractToken(ContainerRequestContext request);\n \t\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "17",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "19",
                    "column": "3",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "20",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "22",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/codebuff/323/ConqueryAuthenticationRealm.java\nindex 746190f9bc3..7b68d9b9a0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/codebuff/323/ConqueryAuthenticationRealm.java\n@@ -2,7 +2,6 @@ package com.bakdata.conquery.models.auth;\n \n import javax.annotation.Nullable;\n import javax.ws.rs.container.ContainerRequestContext;\n-\n import com.bakdata.conquery.models.auth.web.DefaultAuthFilter;\n import org.apache.shiro.authc.AuthenticationException;\n import org.apache.shiro.authc.AuthenticationInfo;\n@@ -12,27 +11,28 @@ import org.apache.shiro.realm.AuthenticatingRealm;\n /**\n  * Abstract class that needs to be implemented for authenticating realms in Conquery.\n  */\n+\n public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n-\t\n-\t@Override\n-\tprotected final AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException{\n-\t\treturn doGetConqueryAuthenticationInfo(token);\n-\t}\n-\t\n-\tprotected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n-\t\n-\t/**\n-\t * Authenticating realms need to be able to extract a token from a request.\n-\t * How it performs the extraction is implementation dependent.\n-\t * Anyway the realm should NOT alter the request.\n-\t * This function is called prior to the authentication process in the {@link DefaultAuthFilter}.\n-\t * After the token extraction process the Token is resubmitted to the realm from the AuthFilter to\n-\t * the {@link ConqueryAuthenticator} which dispatches it to shiro.\n-\t * \n-\t * @param request An incoming request that potentially holds a token for the implementing realm.\n-\t * @return The extracted {@link AuthenticationToken} or <code>null</code> if no token could be parsed.\n-\t */\n-\t@Nullable\n-\tpublic abstract AuthenticationToken extractToken(ContainerRequestContext request);\n-\t\n-}\n+\n+ @Override\n+ protected final AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+  return doGetConqueryAuthenticationInfo(token);\n+ }\n+\n+ protected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n+ \n+ /**\n+  * Authenticating realms need to be able to extract a token from a request.\n+  * How it performs the extraction is implementation dependent.\n+  * Anyway the realm should NOT alter the request.\n+  * This function is called prior to the authentication process in the {@link DefaultAuthFilter}.\n+  * After the token extraction process the Token is resubmitted to the realm from the AuthFilter to\n+  * the {@link ConqueryAuthenticator} which dispatches it to shiro.\n+  * \n+  * @param request An incoming request that potentially holds a token for the implementing realm.\n+  * @return The extracted {@link AuthenticationToken} or <code>null</code> if no token could be parsed.\n+  */\n+\n+ @Nullable\n+ public abstract AuthenticationToken extractToken(ContainerRequestContext request);\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_random/323/ConqueryAuthenticationRealm.java\nindex 746190f9bc3..9dd90bea8b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_random/323/ConqueryAuthenticationRealm.java\n@@ -20,7 +20,7 @@ public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n \t}\n \t\n \tprotected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n-\t\n+\n \t/**\n \t * Authenticating realms need to be able to extract a token from a request.\n \t * How it performs the extraction is implementation dependent.\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_three_grams/323/ConqueryAuthenticationRealm.java\nindex 746190f9bc3..9dd90bea8b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/323/ConqueryAuthenticationRealm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_three_grams/323/ConqueryAuthenticationRealm.java\n@@ -20,7 +20,7 @@ public abstract class ConqueryAuthenticationRealm extends AuthenticatingRealm {\n \t}\n \t\n \tprotected abstract ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;\n-\t\n+\n \t/**\n \t * Authenticating realms need to be able to extract a token from a request.\n \t * How it performs the extraction is implementation dependent.\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}