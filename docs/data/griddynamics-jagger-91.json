{
    "project_name": "griddynamics-jagger",
    "error_id": "91",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "warning",
                "message": "'CTOR_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "        private final List<JParallelTestsGroup> testGroups;\n        private List<Double> percentileValues;\n        public Builder(Id id, List<JParallelTestsGroup> testGroups) {\n            this.id = id;\n            this.testGroups = testGroups;\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/91/JLoadScenario.java\nindex 41e372fd5e2..51c5d2879f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/91/JLoadScenario.java\n@@ -67,6 +67,7 @@ public class JLoadScenario {\n         private final Id id;\n         private final List<JParallelTestsGroup> testGroups;\n         private List<Double> percentileValues;\n+\n         public Builder(Id id, List<JParallelTestsGroup> testGroups) {\n             this.id = id;\n             this.testGroups = testGroups;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/91/JLoadScenario.java\nindex 41e372fd5e2..ae30015e4fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/91/JLoadScenario.java\n@@ -7,21 +7,19 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n \n-/** @brief  Describes the execution sequence of the load tests during single run\n+/**\n+ * @brief Describes the execution sequence of the load tests during single run\n  * @n\n  * @par Details:\n  * @details JLoadScenario describes the execution sequence of the load tests. Only single load scenario can be executed at a time @n\n  * Project can contain multiple load scenarios @n\n  * What load scenario to execute is defined by 'jagger.load.scenario.id.to.execute' property@n\n  * You can set it via system properties or in the 'environment.properties' file @n\n- * @n\n- * See @ref section_writing_test_load_scenario for more details @n\n- * @n\n- * More information on the parameter of the test definition, you can find in the Builder documentation @n\n- * @n\n- * Code example:\n- * @dontinclude  ExampleSimpleJLoadScenarioProvider.java\n- * @skip  begin: following section is used for docu generation - Load test scenario configuration\n+ * @n See @ref section_writing_test_load_scenario for more details @n\n+ * @n More information on the parameter of the test definition, you can find in the Builder documentation @n\n+ * @n Code example:\n+ * @dontinclude ExampleSimpleJLoadScenarioProvider.java\n+ * @skip begin: following section is used for docu generation - Load test scenario configuration\n  * @until end: following section is used for docu generation - Load test scenario configuration\n  */\n public class JLoadScenario {\n@@ -36,30 +34,34 @@ public class JLoadScenario {\n         this.percentileValues = builder.percentileValues;\n     }\n \n-    /** Builder of the JLoadScenario\n+    /**\n+     * Builder of the JLoadScenario\n+     *\n+     * @param id         - Unique id of the load scenario\n+     * @param testGroups - List of JParallelTestsGroup to execute\n      * @n\n      * @details Constructor parameters are mandatory for the JLoadScenario. All parameters, set by setters are optional\n      * @n\n-     * @param id - Unique id of the load scenario\n-     * @param testGroups - List of JParallelTestsGroup to execute\n      */\n     public static Builder builder(Id id, List<JParallelTestsGroup> testGroups) {\n         return new Builder(id, testGroups);\n     }\n \n-    /** Builder of the JLoadScenario\n+    /**\n+     * Builder of the JLoadScenario\n+     *\n+     * @param id         - Unique id of the load scenario\n+     * @param testGroup  - Load scenario should contain at least one test group\n+     * @param testGroups - List of JParallelTestsGroup to execute\n      * @n\n      * @details Constructor parameters are mandatory for the JLoadScenario. All parameters, set by setters are optional\n      * @n\n-     * @param id - Unique id of the load scenario\n-     * @param testGroup - Load scenario should contain at least one test group\n-     * @param testGroups - List of JParallelTestsGroup to execute\n      */\n     public static Builder builder(Id id, JParallelTestsGroup testGroup, JParallelTestsGroup... testGroups) {\n         List<JParallelTestsGroup> jParallelTestsGroupList = new ArrayList<>();\n         jParallelTestsGroupList.add(testGroup);\n         Collections.addAll(jParallelTestsGroupList, testGroups);\n-        \n+\n         return new Builder(id, jParallelTestsGroupList);\n     }\n \n@@ -67,12 +69,14 @@ public class JLoadScenario {\n         private final Id id;\n         private final List<JParallelTestsGroup> testGroups;\n         private List<Double> percentileValues;\n+\n         public Builder(Id id, List<JParallelTestsGroup> testGroups) {\n             this.id = id;\n             this.testGroups = testGroups;\n         }\n \n-        /** Optional: Sets list of latency percentile values\n+        /**\n+         * Optional: Sets list of latency percentile values\n          *\n          * @param percentileValues latency percentile values\n          */\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/91/JLoadScenario.java\nindex 41e372fd5e2..ca8d33162a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/91/JLoadScenario.java\n@@ -83,8 +83,7 @@ public class JLoadScenario {\n                     .ifPresent(badPercentile -> {\n                         throw new IllegalArgumentException(\"Percentile value must be > 0 and < 100. Provided value is \" + badPercentile);\n                     });\n-\n-            this.percentileValues = percentileValues;\n+this.percentileValues = percentileValues;\n             return this;\n         }\n \n@@ -110,4 +109,4 @@ public class JLoadScenario {\n     public List<Double> getPercentileValues() {\n         return percentileValues;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/91/JLoadScenario.java\nindex 41e372fd5e2..51c5d2879f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/91/JLoadScenario.java\n@@ -67,6 +67,7 @@ public class JLoadScenario {\n         private final Id id;\n         private final List<JParallelTestsGroup> testGroups;\n         private List<Double> percentileValues;\n+\n         public Builder(Id id, List<JParallelTestsGroup> testGroups) {\n             this.id = id;\n             this.testGroups = testGroups;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/91/JLoadScenario.java\nindex 41e372fd5e2..51c5d2879f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/91/JLoadScenario.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/91/JLoadScenario.java\n@@ -67,6 +67,7 @@ public class JLoadScenario {\n         private final Id id;\n         private final List<JParallelTestsGroup> testGroups;\n         private List<Double> percentileValues;\n+\n         public Builder(Id id, List<JParallelTestsGroup> testGroups) {\n             this.id = id;\n             this.testGroups = testGroups;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}