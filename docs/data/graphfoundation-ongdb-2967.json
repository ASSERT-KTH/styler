{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2967",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "203",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "203",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "206",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "247",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "247",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "250",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "283",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "288",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "335",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "440",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "466",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "486",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "491",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "512",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "10",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "640",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "642",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "673",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "686",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "715",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "720",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "742",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "791",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "800",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "879",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "888",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "901",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "903",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "903",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "907",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "910",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "920",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "922",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "922",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "924",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "926",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "929",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "931",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "937",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "937",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "943",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2967/ReflectiveProcedureCompiler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2967/ReflectiveProcedureCompiler.java\nindex b04ca392031..6c979d81337 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2967/ReflectiveProcedureCompiler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2967/ReflectiveProcedureCompiler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -79,912 +80,880 @@ import static org.neo4j.helpers.collection.Iterators.asRawIterator;\n  */\n class ReflectiveProcedureCompiler\n {\n-    private final MethodHandles.Lookup lookup = MethodHandles.lookup();\n-    private final OutputMappers outputMappers;\n-    private final MethodSignatureCompiler inputSignatureDeterminer;\n-    private final FieldInjections safeFieldInjections;\n-    private final FieldInjections allFieldInjections;\n-    private final Log log;\n-    private final TypeMappers typeMappers;\n-    private final ProcedureConfig config;\n-    private final NamingRestrictions restrictions;\n-\n-    ReflectiveProcedureCompiler( TypeMappers typeMappers, ComponentRegistry safeComponents,\n-            ComponentRegistry allComponents, Log log, ProcedureConfig config )\n-    {\n-        this(\n-                new MethodSignatureCompiler( typeMappers ),\n-                new OutputMappers( typeMappers ),\n-                new FieldInjections( safeComponents ),\n-                new FieldInjections( allComponents ),\n-                log,\n-                typeMappers,\n-                config,\n-                ReflectiveProcedureCompiler::rejectEmptyNamespace );\n-    }\n-\n-    private ReflectiveProcedureCompiler(\n-            MethodSignatureCompiler inputSignatureCompiler,\n-            OutputMappers outputMappers,\n-            FieldInjections safeFieldInjections,\n-            FieldInjections allFieldInjections,\n-            Log log,\n-            TypeMappers typeMappers,\n-            ProcedureConfig config,\n-            NamingRestrictions restrictions )\n-    {\n-        this.inputSignatureDeterminer = inputSignatureCompiler;\n-        this.outputMappers = outputMappers;\n-        this.safeFieldInjections = safeFieldInjections;\n-        this.allFieldInjections = allFieldInjections;\n-        this.log = log;\n-        this.typeMappers = typeMappers;\n-        this.config = config;\n-        this.restrictions = restrictions;\n-    }\n-\n-    List<CallableUserFunction> compileFunction( Class<?> fcnDefinition, boolean isBuiltin ) throws KernelException\n+  private final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private final OutputMappers outputMappers;\n+  private final MethodSignatureCompiler inputSignatureDeterminer;\n+  private final FieldInjections safeFieldInjections;\n+  private final FieldInjections allFieldInjections;\n+  private final Log log;\n+  private final TypeMappers typeMappers;\n+  private final ProcedureConfig config;\n+  private final NamingRestrictions restrictions;\n+\n+  ReflectiveProcedureCompiler(TypeMappers typeMappers, ComponentRegistry safeComponents,\n+                              ComponentRegistry allComponents, Log log, ProcedureConfig config)\n+  {\n+    this(\n+        new MethodSignatureCompiler(typeMappers),\n+        new OutputMappers(typeMappers),\n+        new FieldInjections(safeComponents),\n+        new FieldInjections(allComponents),\n+        log,\n+        typeMappers,\n+        config,\n+        ReflectiveProcedureCompiler::rejectEmptyNamespace);\n+  }\n+\n+  private ReflectiveProcedureCompiler(\n+      MethodSignatureCompiler inputSignatureCompiler,\n+      OutputMappers outputMappers,\n+      FieldInjections safeFieldInjections,\n+      FieldInjections allFieldInjections,\n+      Log log,\n+      TypeMappers typeMappers,\n+      ProcedureConfig config,\n+      NamingRestrictions restrictions)\n+  {\n+    this.inputSignatureDeterminer = inputSignatureCompiler;\n+    this.outputMappers = outputMappers;\n+    this.safeFieldInjections = safeFieldInjections;\n+    this.allFieldInjections = allFieldInjections;\n+    this.log = log;\n+    this.typeMappers = typeMappers;\n+    this.config = config;\n+    this.restrictions = restrictions;\n+  }\n+\n+  List<CallableUserFunction> compileFunction(Class<?> fcnDefinition, boolean isBuiltin) throws KernelException\n+  {\n+    try\n     {\n-        try\n-        {\n-            List<Method> functionMethods = Arrays.stream( fcnDefinition.getDeclaredMethods() )\n-                    .filter( m -> m.isAnnotationPresent( UserFunction.class ) )\n-                    .collect( Collectors.toList() );\n-\n-            if ( functionMethods.isEmpty() )\n-            {\n-                return emptyList();\n-            }\n-\n-            MethodHandle constructor = constructor( fcnDefinition );\n-\n-            ArrayList<CallableUserFunction> out = new ArrayList<>( functionMethods.size() );\n-            for ( Method method : functionMethods )\n-            {\n-                String valueName = method.getAnnotation( UserFunction.class ).value();\n-                String definedName = method.getAnnotation( UserFunction.class ).name();\n-                QualifiedName funcName = extractName( fcnDefinition, method, valueName, definedName );\n-                if ( isBuiltin || config.isWhitelisted( funcName.toString() ) )\n-                {\n-                    out.add( compileFunction( fcnDefinition, constructor, method, funcName ) );\n-                }\n-                else\n-                {\n-                    log.warn( String.format( \"The function '%s' is not on the whitelist and won't be loaded.\",\n-                            funcName.toString() ) );\n-                }\n-            }\n-            out.sort( Comparator.comparing( a -> a.signature().name().toString() ) );\n-            return out;\n-        }\n-        catch ( KernelException e )\n-        {\n-            throw e;\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage() );\n-        }\n+      List<Method> functionMethods = Arrays.stream(fcnDefinition.getDeclaredMethods())\n+          .filter(m -> m.isAnnotationPresent(UserFunction.class))\n+          .collect(Collectors.toList());\n+\n+      if (functionMethods.isEmpty())\n+      {\n+        return emptyList();\n+      }\n+\n+      MethodHandle constructor = constructor(fcnDefinition);\n+\n+      ArrayList<CallableUserFunction> out = new ArrayList<>(functionMethods.size());\n+      for (Method method : functionMethods)\n+      {\n+        String valueName = method.getAnnotation(UserFunction.class).value();\n+        String definedName = method.getAnnotation(UserFunction.class).name();\n+        QualifiedName funcName = extractName(fcnDefinition, method, valueName, definedName);\n+        if (isBuiltin || config.isWhitelisted(funcName.toString()))\n+        {\n+          out.add(compileFunction(fcnDefinition, constructor, method, funcName));\n+        } else\n+        {\n+          log.warn(String.format(\"The function '%s' is not on the whitelist and won't be loaded.\",\n+              funcName.toString()));\n+        }\n+      }\n+      out.sort(Comparator.comparing(a -> a.signature().name().toString()));\n+      return out;\n+    } catch (KernelException e)\n+    {\n+      throw e;\n+    } catch (Exception e)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+          \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage());\n     }\n+  }\n \n-    List<CallableUserAggregationFunction> compileAggregationFunction( Class<?> fcnDefinition ) throws KernelException\n+  List<CallableUserAggregationFunction> compileAggregationFunction(Class<?> fcnDefinition) throws KernelException\n+  {\n+    try\n     {\n-        try\n-        {\n-            List<Method> methods = Arrays.stream( fcnDefinition.getDeclaredMethods() )\n-                    .filter( m -> m.isAnnotationPresent( UserAggregationFunction.class ) )\n-                    .collect( Collectors.toList() );\n+      List<Method> methods = Arrays.stream(fcnDefinition.getDeclaredMethods())\n+          .filter(m -> m.isAnnotationPresent(UserAggregationFunction.class))\n+          .collect(Collectors.toList());\n \n-            if ( methods.isEmpty() )\n-            {\n-                return emptyList();\n-            }\n+      if (methods.isEmpty())\n+      {\n+        return emptyList();\n+      }\n \n-            MethodHandle constructor = constructor( fcnDefinition );\n+      MethodHandle constructor = constructor(fcnDefinition);\n \n-            ArrayList<CallableUserAggregationFunction> out = new ArrayList<>( methods.size() );\n-            for ( Method method : methods )\n-            {\n-                String valueName = method.getAnnotation( UserAggregationFunction.class ).value();\n-                String definedName = method.getAnnotation( UserAggregationFunction.class ).name();\n-                QualifiedName funcName = extractName( fcnDefinition, method, valueName, definedName );\n-\n-                if ( config.isWhitelisted( funcName.toString() ) )\n-                {\n-                    out.add( compileAggregationFunction( fcnDefinition, constructor, method, funcName ) );\n-                }\n-                else\n-                {\n-                    log.warn( String.format( \"The function '%s' is not on the whitelist and won't be loaded.\",\n-                            funcName.toString() ) );\n-                }\n+      ArrayList<CallableUserAggregationFunction> out = new ArrayList<>(methods.size());\n+      for (Method method : methods)\n+      {\n+        String valueName = method.getAnnotation(UserAggregationFunction.class).value();\n+        String definedName = method.getAnnotation(UserAggregationFunction.class).name();\n+        QualifiedName funcName = extractName(fcnDefinition, method, valueName, definedName);\n \n-            }\n-            out.sort( Comparator.comparing( a -> a.signature().name().toString() ) );\n-            return out;\n-        }\n-        catch ( KernelException e )\n+        if (config.isWhitelisted(funcName.toString()))\n         {\n-            throw e;\n-        }\n-        catch ( Exception e )\n+          out.add(compileAggregationFunction(fcnDefinition, constructor, method, funcName));\n+        } else\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage() );\n+          log.warn(String.format(\"The function '%s' is not on the whitelist and won't be loaded.\",\n+              funcName.toString()));\n         }\n+\n+      }\n+      out.sort(Comparator.comparing(a -> a.signature().name().toString()));\n+      return out;\n+    } catch (KernelException e)\n+    {\n+      throw e;\n+    } catch (Exception e)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+          \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage());\n     }\n+  }\n \n-    List<CallableProcedure> compileProcedure( Class<?> procDefinition, String warning, boolean fullAccess )\n-            throws KernelException\n+  List<CallableProcedure> compileProcedure(Class<?> procDefinition, String warning, boolean fullAccess)\n+      throws KernelException\n+  {\n+    try\n     {\n-        try\n-        {\n-            List<Method> procedureMethods = Arrays.stream( procDefinition.getDeclaredMethods() )\n-                    .filter( m -> m.isAnnotationPresent( Procedure.class ) )\n-                    .collect( Collectors.toList() );\n+      List<Method> procedureMethods = Arrays.stream(procDefinition.getDeclaredMethods())\n+          .filter(m -> m.isAnnotationPresent(Procedure.class))\n+          .collect(Collectors.toList());\n \n-            if ( procedureMethods.isEmpty() )\n-            {\n-                return emptyList();\n-            }\n+      if (procedureMethods.isEmpty())\n+      {\n+        return emptyList();\n+      }\n \n-            MethodHandle constructor = constructor( procDefinition );\n+      MethodHandle constructor = constructor(procDefinition);\n \n-            ArrayList<CallableProcedure> out = new ArrayList<>( procedureMethods.size() );\n-            for ( Method method : procedureMethods )\n-            {\n-                String valueName = method.getAnnotation( Procedure.class ).value();\n-                String definedName = method.getAnnotation( Procedure.class ).name();\n-                QualifiedName procName = extractName( procDefinition, method, valueName, definedName );\n-\n-                if ( fullAccess || config.isWhitelisted( procName.toString() ) )\n-                {\n-                    out.add( compileProcedure( procDefinition, constructor, method, warning, fullAccess, procName ) );\n-                }\n-                else\n-                {\n-                    log.warn( String.format( \"The procedure '%s' is not on the whitelist and won't be loaded.\",\n-                            procName.toString() ) );\n-                }\n-            }\n-            out.sort( Comparator.comparing( a -> a.signature().name().toString() ) );\n-            return out;\n-        }\n-        catch ( KernelException e )\n+      ArrayList<CallableProcedure> out = new ArrayList<>(procedureMethods.size());\n+      for (Method method : procedureMethods)\n+      {\n+        String valueName = method.getAnnotation(Procedure.class).value();\n+        String definedName = method.getAnnotation(Procedure.class).name();\n+        QualifiedName procName = extractName(procDefinition, method, valueName, definedName);\n+\n+        if (fullAccess || config.isWhitelisted(procName.toString()))\n         {\n-            throw e;\n-        }\n-        catch ( Exception e )\n+          out.add(compileProcedure(procDefinition, constructor, method, warning, fullAccess, procName));\n+        } else\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile procedure defined in `%s`: %s\", procDefinition.getSimpleName(), e.getMessage() );\n+          log.warn(String.format(\"The procedure '%s' is not on the whitelist and won't be loaded.\",\n+              procName.toString()));\n         }\n+      }\n+      out.sort(Comparator.comparing(a -> a.signature().name().toString()));\n+      return out;\n+    } catch (KernelException e)\n+    {\n+      throw e;\n+    } catch (Exception e)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+          \"Failed to compile procedure defined in `%s`: %s\", procDefinition.getSimpleName(), e.getMessage());\n     }\n-\n-    private CallableProcedure compileProcedure( Class<?> procDefinition, MethodHandle constructor, Method method,\n-            String warning, boolean fullAccess, QualifiedName procName  )\n-            throws ProcedureException\n+  }\n+\n+  private CallableProcedure compileProcedure(Class<?> procDefinition, MethodHandle constructor, Method method,\n+                                             String warning, boolean fullAccess, QualifiedName procName)\n+      throws ProcedureException\n+  {\n+    List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor(method);\n+    OutputMapper outputMapper = outputMappers.mapper(method);\n+\n+    String description = description(method);\n+    Procedure procedure = method.getAnnotation(Procedure.class);\n+    Mode mode = procedure.mode();\n+    if (method.isAnnotationPresent(PerformsWrites.class))\n     {\n-        List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor( method );\n-        OutputMapper outputMapper = outputMappers.mapper( method );\n-\n-        String description = description( method );\n-        Procedure procedure = method.getAnnotation( Procedure.class );\n-        Mode mode = procedure.mode();\n-        if ( method.isAnnotationPresent( PerformsWrites.class ) )\n-        {\n-            if ( procedure.mode() != org.neo4j.procedure.Mode.DEFAULT )\n-            {\n-                throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                        \"Conflicting procedure annotation, cannot use PerformsWrites and mode\" );\n-            }\n-            else\n-            {\n-                mode = Mode.WRITE;\n-            }\n-        }\n-\n-        String deprecated = deprecated( method, procedure::deprecatedBy,\n-                \"Use of @Procedure(deprecatedBy) without @Deprecated in \" + procName );\n+      if (procedure.mode() != org.neo4j.procedure.Mode.DEFAULT)\n+      {\n+        throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+            \"Conflicting procedure annotation, cannot use PerformsWrites and mode\");\n+      } else\n+      {\n+        mode = Mode.WRITE;\n+      }\n+    }\n \n-        List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( procDefinition );\n-        if ( !fullAccess && !config.fullAccessFor( procName.toString() ) )\n-        {\n-            try\n-            {\n-                setters = safeFieldInjections.setters( procDefinition );\n-            }\n-            catch ( ComponentInjectionException e )\n-            {\n-                description = describeAndLogLoadFailure( procName );\n-                ProcedureSignature signature =\n-                        new ProcedureSignature( procName, inputSignature, outputMapper.signature(), Mode.DEFAULT,\n-                                null, new String[0], description, warning, procedure.eager(), false );\n-                return new FailedLoadProcedure( signature );\n-            }\n-        }\n+    String deprecated = deprecated(method, procedure::deprecatedBy,\n+        \"Use of @Procedure(deprecatedBy) without @Deprecated in \" + procName);\n \n+    List<FieldInjections.FieldSetter> setters = allFieldInjections.setters(procDefinition);\n+    if (!fullAccess && !config.fullAccessFor(procName.toString()))\n+    {\n+      try\n+      {\n+        setters = safeFieldInjections.setters(procDefinition);\n+      } catch (ComponentInjectionException e)\n+      {\n+        description = describeAndLogLoadFailure(procName);\n         ProcedureSignature signature =\n-                new ProcedureSignature( procName, inputSignature, outputMapper.signature(), mode, deprecated,\n-                        config.rolesFor( procName.toString() ), description, warning, procedure.eager(), false );\n-        return new ReflectiveProcedure( signature, constructor, method, outputMapper, setters );\n+            new ProcedureSignature(procName, inputSignature, outputMapper.signature(), Mode.DEFAULT,\n+                null, new String[0], description, warning, procedure.eager(), false);\n+        return new FailedLoadProcedure(signature);\n+      }\n     }\n \n-    private String describeAndLogLoadFailure( QualifiedName name )\n+    ProcedureSignature signature =\n+        new ProcedureSignature(procName, inputSignature, outputMapper.signature(), mode, deprecated,\n+            config.rolesFor(procName.toString()), description, warning, procedure.eager(), false);\n+    return new ReflectiveProcedure(signature, constructor, method, outputMapper, setters);\n+  }\n+\n+  private String describeAndLogLoadFailure(QualifiedName name)\n+  {\n+    String nameStr = name.toString();\n+    String description =\n+        nameStr + \" is unavailable because it is sandboxed and has dependencies outside of the sandbox. \" +\n+            \"Sandboxing is controlled by the \" + procedure_unrestricted.name() + \" setting. \" +\n+            \"Only unrestrict procedures you can trust with access to database internals.\";\n+    log.warn(description);\n+    return description;\n+  }\n+\n+  private CallableUserFunction compileFunction(Class<?> procDefinition, MethodHandle constructor, Method method,\n+                                               QualifiedName procName)\n+      throws ProcedureException, IllegalAccessException\n+  {\n+    restrictions.verify(procName);\n+\n+    List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor(method);\n+    Class<?> returnType = method.getReturnType();\n+    TypeMappers.TypeChecker typeChecker = typeMappers.checkerFor(returnType);\n+    String description = description(method);\n+    UserFunction function = method.getAnnotation(UserFunction.class);\n+    String deprecated = deprecated(method, function::deprecatedBy,\n+        \"Use of @UserFunction(deprecatedBy) without @Deprecated in \" + procName);\n+\n+    List<FieldInjections.FieldSetter> setters = allFieldInjections.setters(procDefinition);\n+    if (!config.fullAccessFor(procName.toString()))\n     {\n-        String nameStr = name.toString();\n-        String description =\n-                nameStr + \" is unavailable because it is sandboxed and has dependencies outside of the sandbox. \" +\n-                \"Sandboxing is controlled by the \" + procedure_unrestricted.name() + \" setting. \" +\n-                \"Only unrestrict procedures you can trust with access to database internals.\";\n-        log.warn( description );\n-        return description;\n+      try\n+      {\n+        setters = safeFieldInjections.setters(procDefinition);\n+      } catch (ComponentInjectionException e)\n+      {\n+        description = describeAndLogLoadFailure(procName);\n+        UserFunctionSignature signature =\n+            new UserFunctionSignature(procName, inputSignature, typeChecker.type(), deprecated,\n+                config.rolesFor(procName.toString()), description, false);\n+        return new FailedLoadFunction(signature);\n+      }\n     }\n \n-    private CallableUserFunction compileFunction( Class<?> procDefinition, MethodHandle constructor, Method method,\n-            QualifiedName procName )\n-            throws ProcedureException, IllegalAccessException\n-    {\n-        restrictions.verify( procName );\n+    UserFunctionSignature signature =\n+        new UserFunctionSignature(procName, inputSignature, typeChecker.type(), deprecated,\n+            config.rolesFor(procName.toString()), description, false);\n \n-        List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor( method );\n-        Class<?> returnType = method.getReturnType();\n-        TypeMappers.TypeChecker typeChecker = typeMappers.checkerFor( returnType );\n-        String description = description( method );\n-        UserFunction function = method.getAnnotation( UserFunction.class );\n-        String deprecated = deprecated( method, function::deprecatedBy,\n-                \"Use of @UserFunction(deprecatedBy) without @Deprecated in \" + procName );\n+    return new ReflectiveUserFunction(signature, constructor, method, typeChecker, typeMappers, setters);\n+  }\n \n-        List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( procDefinition );\n-        if ( !config.fullAccessFor( procName.toString() ) )\n-        {\n-            try\n-            {\n-                setters = safeFieldInjections.setters( procDefinition );\n-            }\n-            catch ( ComponentInjectionException e )\n-            {\n-                description = describeAndLogLoadFailure( procName );\n-                UserFunctionSignature signature =\n-                        new UserFunctionSignature( procName, inputSignature, typeChecker.type(), deprecated,\n-                                config.rolesFor( procName.toString() ), description, false );\n-                return new FailedLoadFunction( signature );\n-            }\n-        }\n+  private CallableUserAggregationFunction compileAggregationFunction(Class<?> definition, MethodHandle constructor,\n+                                                                     Method method, QualifiedName funcName) throws ProcedureException, IllegalAccessException\n+  {\n+    restrictions.verify(funcName);\n \n-        UserFunctionSignature signature =\n-                new UserFunctionSignature( procName, inputSignature, typeChecker.type(), deprecated,\n-                        config.rolesFor( procName.toString() ), description, false );\n-\n-        return new ReflectiveUserFunction( signature, constructor, method, typeChecker, typeMappers, setters );\n-    }\n-\n-    private CallableUserAggregationFunction compileAggregationFunction( Class<?> definition, MethodHandle constructor,\n-            Method method, QualifiedName funcName ) throws ProcedureException, IllegalAccessException\n+    //find update and result method\n+    Method update = null;\n+    Method result = null;\n+    Class<?> aggregator = method.getReturnType();\n+    for (Method m : aggregator.getDeclaredMethods())\n     {\n-        restrictions.verify( funcName );\n-\n-        //find update and result method\n-        Method update = null;\n-        Method result = null;\n-        Class<?> aggregator = method.getReturnType();\n-        for ( Method m : aggregator.getDeclaredMethods() )\n+      if (m.isAnnotationPresent(UserAggregationUpdate.class))\n+      {\n+        if (update != null)\n         {\n-            if ( m.isAnnotationPresent( UserAggregationUpdate.class ) )\n-            {\n-                if ( update != null )\n-                {\n-                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(),\n-                            UserAggregationUpdate.class.getSimpleName() );\n-                }\n-                update = m;\n-\n-            }\n-            if ( m.isAnnotationPresent( UserAggregationResult.class ) )\n-            {\n-                if ( result != null )\n-                {\n-                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(),\n-                            UserAggregationResult.class.getSimpleName() );\n-                }\n-                result = m;\n-            }\n+          throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(),\n+              UserAggregationUpdate.class.getSimpleName());\n         }\n-        if ( result == null || update == null )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Class '%s' must contain methods annotated with both '@%s' as well as '@%s'.\",\n-                    aggregator.getSimpleName(), UserAggregationResult.class.getSimpleName(),\n-                    UserAggregationUpdate.class.getSimpleName() );\n-        }\n-        if ( update.getReturnType() != void.class )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Update method '%s' in %s has type '%s' but must have return type 'void'.\", update.getName(),\n-                    aggregator.getSimpleName(), update.getReturnType().getSimpleName() );\n+        update = m;\n \n-        }\n-        if ( !Modifier.isPublic( method.getModifiers() ) )\n+      }\n+      if (m.isAnnotationPresent(UserAggregationResult.class))\n+      {\n+        if (result != null)\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation method '%s' in %s must be public.\", method.getName(), definition.getSimpleName() );\n+          throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(),\n+              UserAggregationResult.class.getSimpleName());\n         }\n-        if ( !Modifier.isPublic( aggregator.getModifiers() ) )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation class '%s' must be public.\", aggregator.getSimpleName() );\n-        }\n-        if ( !Modifier.isPublic( update.getModifiers() ) )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation update method '%s' in %s must be public.\", update.getName(),\n-                    aggregator.getSimpleName() );\n-        }\n-        if ( !Modifier.isPublic( result.getModifiers() ) )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation result method '%s' in %s must be public.\", result.getName(),\n-                    aggregator.getSimpleName() );\n-        }\n-\n-        List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor( update );\n-        Class<?> returnType = result.getReturnType();\n-        TypeMappers.TypeChecker valueConverter = typeMappers.checkerFor( returnType );\n-        MethodHandle creator = lookup.unreflect( method );\n-        MethodHandle resultMethod = lookup.unreflect( result );\n+        result = m;\n+      }\n+    }\n+    if (result == null || update == null)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Class '%s' must contain methods annotated with both '@%s' as well as '@%s'.\",\n+          aggregator.getSimpleName(), UserAggregationResult.class.getSimpleName(),\n+          UserAggregationUpdate.class.getSimpleName());\n+    }\n+    if (update.getReturnType() != void.class)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Update method '%s' in %s has type '%s' but must have return type 'void'.\", update.getName(),\n+          aggregator.getSimpleName(), update.getReturnType().getSimpleName());\n \n-        String description = description( method );\n-        UserAggregationFunction function = method.getAnnotation( UserAggregationFunction.class );\n+    }\n+    if (!Modifier.isPublic(method.getModifiers()))\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Aggregation method '%s' in %s must be public.\", method.getName(), definition.getSimpleName());\n+    }\n+    if (!Modifier.isPublic(aggregator.getModifiers()))\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Aggregation class '%s' must be public.\", aggregator.getSimpleName());\n+    }\n+    if (!Modifier.isPublic(update.getModifiers()))\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Aggregation update method '%s' in %s must be public.\", update.getName(),\n+          aggregator.getSimpleName());\n+    }\n+    if (!Modifier.isPublic(result.getModifiers()))\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Aggregation result method '%s' in %s must be public.\", result.getName(),\n+          aggregator.getSimpleName());\n+    }\n \n-        String deprecated = deprecated( method, function::deprecatedBy,\n-                \"Use of @UserAggregationFunction(deprecatedBy) without @Deprecated in \" + funcName );\n+    List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor(update);\n+    Class<?> returnType = result.getReturnType();\n+    TypeMappers.TypeChecker valueConverter = typeMappers.checkerFor(returnType);\n+    MethodHandle creator = lookup.unreflect(method);\n+    MethodHandle resultMethod = lookup.unreflect(result);\n \n-        List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( definition );\n-        if ( !config.fullAccessFor( funcName.toString() ) )\n-        {\n-            try\n-            {\n-                setters = safeFieldInjections.setters( definition );\n-            }\n-            catch ( ComponentInjectionException e )\n-            {\n-                description = describeAndLogLoadFailure( funcName );\n-                UserFunctionSignature signature =\n-                        new UserFunctionSignature( funcName, inputSignature, valueConverter.type(), deprecated,\n-                                config.rolesFor( funcName.toString() ), description, false );\n+    String description = description(method);\n+    UserAggregationFunction function = method.getAnnotation(UserAggregationFunction.class);\n \n-                return new FailedLoadAggregatedFunction( signature );\n-            }\n-        }\n+    String deprecated = deprecated(method, function::deprecatedBy,\n+        \"Use of @UserAggregationFunction(deprecatedBy) without @Deprecated in \" + funcName);\n \n+    List<FieldInjections.FieldSetter> setters = allFieldInjections.setters(definition);\n+    if (!config.fullAccessFor(funcName.toString()))\n+    {\n+      try\n+      {\n+        setters = safeFieldInjections.setters(definition);\n+      } catch (ComponentInjectionException e)\n+      {\n+        description = describeAndLogLoadFailure(funcName);\n         UserFunctionSignature signature =\n-                new UserFunctionSignature( funcName, inputSignature, valueConverter.type(), deprecated,\n-                        config.rolesFor( funcName.toString() ), description, false );\n+            new UserFunctionSignature(funcName, inputSignature, valueConverter.type(), deprecated,\n+                config.rolesFor(funcName.toString()), description, false);\n \n-        return new ReflectiveUserAggregationFunction( signature, constructor, creator, update, resultMethod,\n-                valueConverter, setters );\n+        return new FailedLoadAggregatedFunction(signature);\n+      }\n     }\n \n-    private String deprecated( Method method, Supplier<String> supplier, String warning )\n-    {\n-        String deprecatedBy = supplier.get();\n-        String deprecated = null;\n-        if ( method.isAnnotationPresent( Deprecated.class ) )\n-        {\n-            deprecated = deprecatedBy ;\n-        }\n-        else if ( !deprecatedBy.isEmpty() )\n-        {\n-            log.warn( warning );\n-            deprecated = deprecatedBy;\n-        }\n+    UserFunctionSignature signature =\n+        new UserFunctionSignature(funcName, inputSignature, valueConverter.type(), deprecated,\n+            config.rolesFor(funcName.toString()), description, false);\n \n-        return deprecated;\n+    return new ReflectiveUserAggregationFunction(signature, constructor, creator, update, resultMethod,\n+        valueConverter, setters);\n+  }\n+\n+  private String deprecated(Method method, Supplier<String> supplier, String warning)\n+  {\n+    String deprecatedBy = supplier.get();\n+    String deprecated = null;\n+    if (method.isAnnotationPresent(Deprecated.class))\n+    {\n+      deprecated = deprecatedBy;\n+    } else if (!deprecatedBy.isEmpty())\n+    {\n+      log.warn(warning);\n+      deprecated = deprecatedBy;\n     }\n \n-    private String description( Method method )\n+    return deprecated;\n+  }\n+\n+  private String description(Method method)\n+  {\n+    if (method.isAnnotationPresent(Description.class))\n     {\n-        if ( method.isAnnotationPresent( Description.class ) )\n-        {\n-           return method.getAnnotation( Description.class ).value();\n-        }\n-        else\n-        {\n-            return null;\n-        }\n+      return method.getAnnotation(Description.class).value();\n+    } else\n+    {\n+      return null;\n     }\n+  }\n \n-    private MethodHandle constructor( Class<?> procDefinition ) throws ProcedureException\n+  private MethodHandle constructor(Class<?> procDefinition) throws ProcedureException\n+  {\n+    try\n     {\n-        try\n-        {\n-            return lookup.unreflectConstructor( procDefinition.getConstructor() );\n-        }\n-        catch ( IllegalAccessException | NoSuchMethodException e )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Unable to find a usable public no-argument constructor in the class `%s`. \" +\n-                    \"Please add a valid, public constructor, recompile the class and try again.\",\n-                    procDefinition.getSimpleName() );\n-        }\n+      return lookup.unreflectConstructor(procDefinition.getConstructor());\n+    } catch (IllegalAccessException | NoSuchMethodException e)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+          \"Unable to find a usable public no-argument constructor in the class `%s`. \" +\n+              \"Please add a valid, public constructor, recompile the class and try again.\",\n+          procDefinition.getSimpleName());\n     }\n+  }\n \n-    private QualifiedName extractName( Class<?> procDefinition, Method m, String valueName, String definedName )\n+  private QualifiedName extractName(Class<?> procDefinition, Method m, String valueName, String definedName)\n+  {\n+    String procName = definedName.trim().isEmpty() ? valueName : definedName;\n+    if (procName.trim().length() > 0)\n     {\n-        String procName = definedName.trim().isEmpty() ? valueName : definedName;\n-        if ( procName.trim().length() > 0 )\n-        {\n-            String[] split = procName.split( \"\\\\.\" );\n-            if ( split.length == 1 )\n-            {\n-                return new QualifiedName( new String[0], split[0] );\n-            }\n-            else\n-            {\n-                int lastElement = split.length - 1;\n-                return new QualifiedName( Arrays.copyOf( split, lastElement ), split[lastElement] );\n-            }\n-        }\n-        Package pkg = procDefinition.getPackage();\n-        // Package is null if class is in root package\n-        String[] namespace = pkg == null ? new String[0] : pkg.getName().split( \"\\\\.\" );\n-        String name = m.getName();\n-        return new QualifiedName( namespace, name );\n+      String[] split = procName.split(\"\\\\.\");\n+      if (split.length == 1)\n+      {\n+        return new QualifiedName(new String[0], split[0]);\n+      } else\n+      {\n+        int lastElement = split.length - 1;\n+        return new QualifiedName(Arrays.copyOf(split, lastElement), split[lastElement]);\n+      }\n+    }\n+    Package pkg = procDefinition.getPackage();\n+    // Package is null if class is in root package\n+    String[] namespace = pkg == null ? new String[0] : pkg.getName().split(\"\\\\.\");\n+    String name = m.getName();\n+    return new QualifiedName(namespace, name);\n+  }\n+\n+  public ReflectiveProcedureCompiler withoutNamingRestrictions()\n+  {\n+    return new ReflectiveProcedureCompiler(\n+        inputSignatureDeterminer,\n+        outputMappers,\n+        safeFieldInjections,\n+        allFieldInjections,\n+        log,\n+        typeMappers,\n+        config,\n+        name ->\n+        {\n+          // all ok\n+        });\n+  }\n+\n+  private abstract static class ReflectiveBase\n+  {\n+\n+    final List<FieldInjections.FieldSetter> fieldSetters;\n+    private final ValueMapper<Object> mapper;\n+\n+    ReflectiveBase(ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters)\n+    {\n+      this.mapper = mapper;\n+      this.fieldSetters = fieldSetters;\n     }\n \n-    public ReflectiveProcedureCompiler withoutNamingRestrictions()\n+    protected void inject(Context ctx, Object object) throws ProcedureException\n     {\n-        return new ReflectiveProcedureCompiler(\n-                inputSignatureDeterminer,\n-                outputMappers,\n-                safeFieldInjections,\n-                allFieldInjections,\n-                log,\n-                typeMappers,\n-                config,\n-                name ->\n-                {\n-                    // all ok\n-                } );\n+      for (FieldInjections.FieldSetter setter : fieldSetters)\n+      {\n+        setter.apply(ctx, object);\n+      }\n     }\n \n-    private abstract static class ReflectiveBase\n+    protected Object[] mapToObjects(String type, QualifiedName name, List<FieldSignature> inputSignature,\n+                                    AnyValue[] input) throws ProcedureException\n+    {\n+      // Verify that the number of passed arguments matches the number expected in the mthod signature\n+      if (inputSignature.size() != input.length)\n+      {\n+        throw new ProcedureException(Status.Procedure.ProcedureCallFailed,\n+            \"%s `%s` takes %d arguments but %d was provided.\", type, name,\n+            inputSignature.size(), input.length);\n+      }\n+\n+      Object[] args = new Object[input.length];\n+      for (int i = 0; i < input.length; i++)\n+      {\n+        args[i] = inputSignature.get(i).map(input[i], mapper);\n+      }\n+      return args;\n+    }\n+  }\n+\n+  private static class ReflectiveProcedure extends ReflectiveBase implements CallableProcedure\n+  {\n+    private final ProcedureSignature signature;\n+    private final OutputMapper outputMapper;\n+    private final MethodHandle constructor;\n+    private final Method procedureMethod;\n+    private final int[] indexesToMap;\n+\n+    ReflectiveProcedure(ProcedureSignature signature, MethodHandle constructor,\n+                        Method procedureMethod, OutputMapper outputMapper,\n+                        List<FieldInjections.FieldSetter> fieldSetters)\n     {\n+      super(null, fieldSetters);\n+      this.constructor = constructor;\n+      this.procedureMethod = procedureMethod;\n+      this.signature = signature;\n+      this.outputMapper = outputMapper;\n+      this.indexesToMap = computeIndexesToMap(signature.inputSignature());\n+    }\n \n-        final List<FieldInjections.FieldSetter> fieldSetters;\n-        private final ValueMapper<Object> mapper;\n+    @Override\n+    public ProcedureSignature signature()\n+    {\n+      return signature;\n+    }\n \n-        ReflectiveBase( ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters )\n+    @Override\n+    public RawIterator<Object[], ProcedureException> apply(Context ctx, Object[] input,\n+                                                           ResourceTracker resourceTracker) throws ProcedureException\n+    {\n+      // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n+      // instances local to\n+      // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n+      try\n+      {\n+        List<FieldSignature> inputSignature = signature.inputSignature();\n+        if (inputSignature.size() != input.length)\n         {\n-            this.mapper = mapper;\n-            this.fieldSetters = fieldSetters;\n+          throw new ProcedureException(Status.Procedure.ProcedureCallFailed,\n+              \"Procedure `%s` takes %d arguments but %d was provided.\",\n+              signature.name(),\n+              inputSignature.size(), input.length);\n         }\n-\n-        protected void inject( Context ctx, Object object ) throws ProcedureException\n+        // Some input fields are not supported by Cypher and need to be mapped\n+        for (int indexToMap : indexesToMap)\n         {\n-            for ( FieldInjections.FieldSetter setter : fieldSetters )\n-            {\n-                setter.apply( ctx, object );\n-            }\n+          input[indexToMap] = inputSignature.get(indexToMap).map(input[indexToMap]);\n         }\n \n-        protected Object[] mapToObjects( String type, QualifiedName name, List<FieldSignature> inputSignature,\n-                AnyValue[] input ) throws ProcedureException\n-        {\n-            // Verify that the number of passed arguments matches the number expected in the mthod signature\n-            if ( inputSignature.size() != input.length )\n-            {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                        \"%s `%s` takes %d arguments but %d was provided.\", type, name,\n-                        inputSignature.size(), input.length );\n-            }\n+        Object cls = constructor.invoke();\n+        //API injection\n+        inject(ctx, cls);\n \n-            Object[] args = new Object[input.length];\n-            for ( int i = 0; i < input.length; i++ )\n-            {\n-                args[i] = inputSignature.get( i ).map( input[i], mapper );\n-            }\n-            return args;\n+        // Call the method\n+        Object rs = procedureMethod.invoke(cls, input);\n+\n+        // This also handles VOID\n+        if (rs == null)\n+        {\n+          return asRawIterator(emptyIterator());\n+        } else\n+        {\n+          return new MappingIterator(((Stream<?>) rs).iterator(), ((Stream<?>) rs)::close, resourceTracker);\n         }\n+      } catch (Throwable throwable)\n+      {\n+        throw newProcedureException(throwable);\n+      }\n     }\n \n-    private static class ReflectiveProcedure extends ReflectiveBase implements CallableProcedure\n+    private class MappingIterator implements RawIterator<Object[], ProcedureException>, Resource\n     {\n-        private final ProcedureSignature signature;\n-        private final OutputMapper outputMapper;\n-        private final MethodHandle constructor;\n-        private final Method procedureMethod;\n-        private final int[] indexesToMap;\n-\n-        ReflectiveProcedure( ProcedureSignature signature, MethodHandle constructor,\n-                Method procedureMethod, OutputMapper outputMapper,\n-                List<FieldInjections.FieldSetter> fieldSetters )\n+      private final Iterator<?> out;\n+      private Resource closeableResource;\n+      private ResourceTracker resourceTracker;\n+\n+      MappingIterator(Iterator<?> out, Resource closeableResource, ResourceTracker resourceTracker)\n+      {\n+        this.out = out;\n+        this.closeableResource = closeableResource;\n+        this.resourceTracker = resourceTracker;\n+        resourceTracker.registerCloseableResource(closeableResource);\n+      }\n+\n+      @Override\n+      public boolean hasNext() throws ProcedureException\n+      {\n+        try\n         {\n-            super( null, fieldSetters );\n-            this.constructor = constructor;\n-            this.procedureMethod = procedureMethod;\n-            this.signature = signature;\n-            this.outputMapper = outputMapper;\n-            this.indexesToMap = computeIndexesToMap( signature.inputSignature() );\n-        }\n-\n-        @Override\n-        public ProcedureSignature signature()\n+          boolean hasNext = out.hasNext();\n+          if (!hasNext)\n+          {\n+            close();\n+          }\n+          return hasNext;\n+        } catch (Throwable throwable)\n         {\n-            return signature;\n+          throw closeAndCreateProcedureException(throwable);\n         }\n+      }\n \n-        @Override\n-        public RawIterator<Object[],ProcedureException> apply( Context ctx, Object[] input,\n-                ResourceTracker resourceTracker ) throws ProcedureException\n+      @Override\n+      public Object[] next() throws ProcedureException\n+      {\n+        try\n         {\n-            // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n-            // instances local to\n-            // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n-            try\n-            {\n-                List<FieldSignature> inputSignature = signature.inputSignature();\n-                if ( inputSignature.size() != input.length )\n-                {\n-                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                            \"Procedure `%s` takes %d arguments but %d was provided.\",\n-                            signature.name(),\n-                            inputSignature.size(), input.length );\n-                }\n-                // Some input fields are not supported by Cypher and need to be mapped\n-                for ( int indexToMap : indexesToMap )\n-                {\n-                    input[indexToMap] = inputSignature.get( indexToMap ).map( input[indexToMap] );\n-                }\n-\n-                Object cls = constructor.invoke();\n-                //API injection\n-                inject( ctx, cls );\n-\n-                // Call the method\n-                Object rs = procedureMethod.invoke( cls, input );\n-\n-                // This also handles VOID\n-                if ( rs == null )\n-                {\n-                    return asRawIterator( emptyIterator() );\n-                }\n-                else\n-                {\n-                    return new MappingIterator( ((Stream<?>) rs).iterator(), ((Stream<?>) rs)::close, resourceTracker );\n-                }\n-            }\n-            catch ( Throwable throwable )\n-            {\n-                throw newProcedureException( throwable );\n-            }\n+          Object record = out.next();\n+          return outputMapper.apply(record);\n+        } catch (Throwable throwable)\n+        {\n+          throw closeAndCreateProcedureException(throwable);\n         }\n+      }\n \n-        private class MappingIterator implements RawIterator<Object[],ProcedureException>, Resource\n+      @Override\n+      public void close()\n+      {\n+        if (closeableResource != null)\n         {\n-            private final Iterator<?> out;\n-            private Resource closeableResource;\n-            private ResourceTracker resourceTracker;\n-\n-            MappingIterator( Iterator<?> out, Resource closeableResource, ResourceTracker resourceTracker )\n-            {\n-                this.out = out;\n-                this.closeableResource = closeableResource;\n-                this.resourceTracker = resourceTracker;\n-                resourceTracker.registerCloseableResource( closeableResource );\n-            }\n-\n-            @Override\n-            public boolean hasNext() throws ProcedureException\n-            {\n-                try\n-                {\n-                    boolean hasNext = out.hasNext();\n-                    if ( !hasNext )\n-                    {\n-                        close();\n-                    }\n-                    return hasNext;\n-                }\n-                catch ( Throwable throwable )\n-                {\n-                    throw closeAndCreateProcedureException( throwable );\n-                }\n-            }\n-\n-            @Override\n-            public Object[] next() throws ProcedureException\n-            {\n-                try\n-                {\n-                    Object record = out.next();\n-                    return outputMapper.apply( record );\n-                }\n-                catch ( Throwable throwable )\n-                {\n-                    throw closeAndCreateProcedureException( throwable );\n-                }\n-            }\n-\n-            @Override\n-            public void close()\n-            {\n-                if ( closeableResource != null )\n-                {\n-                    // Make sure we reset closeableResource before doing anything which may throw an exception that may\n-                    // result in a recursive call to this close-method\n-                    Resource resourceToClose = closeableResource;\n-                    closeableResource = null;\n-\n-                    IOUtils.closeAll( ResourceCloseFailureException.class,\n-                            () -> resourceTracker.unregisterCloseableResource( resourceToClose ),\n-                            resourceToClose::close );\n-                }\n-            }\n+          // Make sure we reset closeableResource before doing anything which may throw an exception that may\n+          // result in a recursive call to this close-method\n+          Resource resourceToClose = closeableResource;\n+          closeableResource = null;\n \n-            private ProcedureException closeAndCreateProcedureException( Throwable t )\n-            {\n-                ProcedureException procedureException = newProcedureException( t );\n-\n-                try\n-                {\n-                    close();\n-                }\n-                catch ( Exception exceptionDuringClose )\n-                {\n-                    try\n-                    {\n-                        procedureException.addSuppressed( exceptionDuringClose );\n-                    }\n-                    catch ( Throwable ignore )\n-                    {\n-                    }\n-                }\n-                return procedureException;\n-            }\n+          IOUtils.closeAll(ResourceCloseFailureException.class,\n+              () -> resourceTracker.unregisterCloseableResource(resourceToClose),\n+              resourceToClose::close);\n         }\n+      }\n \n-        private ProcedureException newProcedureException( Throwable throwable )\n-        {\n-            // Unwrap the wrapped exception we get from invocation by reflection\n-            if ( throwable instanceof InvocationTargetException )\n-            {\n-                throwable = throwable.getCause();\n-            }\n+      private ProcedureException closeAndCreateProcedureException(Throwable t)\n+      {\n+        ProcedureException procedureException = newProcedureException(t);\n \n-            if ( throwable instanceof Status.HasStatus )\n-            {\n-                return new ProcedureException( ((Status.HasStatus) throwable).status(), throwable, throwable.getMessage() );\n-            }\n-            else\n-            {\n-                Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                return new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                        \"Failed to invoke procedure `%s`: %s\", signature.name(),\n-                        \"Caused by: \" + (cause != null ? cause : throwable) );\n-            }\n+        try\n+        {\n+          close();\n+        } catch (Exception exceptionDuringClose)\n+        {\n+          try\n+          {\n+            procedureException.addSuppressed(exceptionDuringClose);\n+          } catch (Throwable ignore)\n+          {\n+          }\n         }\n+        return procedureException;\n+      }\n     }\n \n-    private static class ReflectiveUserFunction extends ReflectiveBase implements CallableUserFunction\n+    private ProcedureException newProcedureException(Throwable throwable)\n     {\n-        private final TypeMappers.TypeChecker typeChecker;\n-        private final UserFunctionSignature signature;\n-        private final MethodHandle constructor;\n-        private final Method udfMethod;\n-        private final int[] indexesToMap;\n+      // Unwrap the wrapped exception we get from invocation by reflection\n+      if (throwable instanceof InvocationTargetException)\n+      {\n+        throwable = throwable.getCause();\n+      }\n+\n+      if (throwable instanceof Status.HasStatus)\n+      {\n+        return new ProcedureException(((Status.HasStatus) throwable).status(), throwable, throwable.getMessage());\n+      } else\n+      {\n+        Throwable cause = ExceptionUtils.getRootCause(throwable);\n+        return new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+            \"Failed to invoke procedure `%s`: %s\", signature.name(),\n+            \"Caused by: \" + (cause != null ? cause : throwable));\n+      }\n+    }\n+  }\n+\n+  private static class ReflectiveUserFunction extends ReflectiveBase implements CallableUserFunction\n+  {\n+    private final TypeMappers.TypeChecker typeChecker;\n+    private final UserFunctionSignature signature;\n+    private final MethodHandle constructor;\n+    private final Method udfMethod;\n+    private final int[] indexesToMap;\n+\n+    ReflectiveUserFunction(UserFunctionSignature signature, MethodHandle constructor,\n+                           Method udfMethod, TypeMappers.TypeChecker typeChecker,\n+                           ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters)\n+    {\n+      super(mapper, fieldSetters);\n+      this.constructor = constructor;\n+      this.udfMethod = udfMethod;\n+      this.signature = signature;\n+      this.typeChecker = typeChecker;\n+      indexesToMap = computeIndexesToMap(signature.inputSignature());\n+    }\n \n-        ReflectiveUserFunction( UserFunctionSignature signature, MethodHandle constructor,\n-                Method udfMethod, TypeMappers.TypeChecker typeChecker,\n-                ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters )\n-        {\n-            super( mapper, fieldSetters );\n-            this.constructor = constructor;\n-            this.udfMethod = udfMethod;\n-            this.signature = signature;\n-            this.typeChecker = typeChecker;\n-            indexesToMap = computeIndexesToMap( signature.inputSignature() );\n-        }\n+    @Override\n+    public UserFunctionSignature signature()\n+    {\n+      return signature;\n+    }\n \n-        @Override\n-        public UserFunctionSignature signature()\n-        {\n-            return signature;\n-        }\n+    @Override\n+    public AnyValue apply(Context ctx, AnyValue[] input) throws ProcedureException\n+    {\n+      // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n+      // instances local to\n+      // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n+      try\n+      {\n+        Object cls = constructor.invoke();\n+        //API injection\n+        inject(ctx, cls);\n+\n+        // Call the method\n+        Object rs = udfMethod.invoke(cls, mapToObjects(\"Function\", signature.name(), signature.inputSignature(), input));\n+\n+        return typeChecker.toValue(rs);\n+      } catch (Throwable throwable)\n+      {\n+        if (throwable instanceof Status.HasStatus)\n+        {\n+          throw new ProcedureException(((Status.HasStatus) throwable).status(), throwable,\n+              throwable.getMessage(), throwable);\n+        } else\n+        {\n+          Throwable cause = ExceptionUtils.getRootCause(throwable);\n+          throw new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+              \"Failed to invoke function `%s`: %s\", signature.name(),\n+              \"Caused by: \" + (cause != null ? cause : throwable));\n+        }\n+      }\n+    }\n+  }\n+\n+  private static class ReflectiveUserAggregationFunction extends ReflectiveBase implements\n+      CallableUserAggregationFunction\n+  {\n+\n+    private final TypeMappers.TypeChecker typeChecker;\n+    private final UserFunctionSignature signature;\n+    private final MethodHandle constructor;\n+    private final MethodHandle creator;\n+    private final Method updateMethod;\n+    private final MethodHandle resultMethod;\n+    private final int[] indexesToMap;\n+\n+    ReflectiveUserAggregationFunction(UserFunctionSignature signature, MethodHandle constructor,\n+                                      MethodHandle creator, Method updateMethod, MethodHandle resultMethod,\n+                                      TypeMappers.TypeChecker typeChecker,\n+                                      List<FieldInjections.FieldSetter> fieldSetters)\n+    {\n+      super(null, fieldSetters);\n+      this.constructor = constructor;\n+      this.creator = creator;\n+      this.updateMethod = updateMethod;\n+      this.resultMethod = resultMethod;\n+      this.signature = signature;\n+      this.typeChecker = typeChecker;\n+      this.indexesToMap = computeIndexesToMap(signature.inputSignature());\n+    }\n \n-        @Override\n-        public AnyValue apply( Context ctx, AnyValue[] input ) throws ProcedureException\n-        {\n-            // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n-            // instances local to\n-            // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n+    @Override\n+    public UserFunctionSignature signature()\n+    {\n+      return signature;\n+    }\n+\n+    @Override\n+    public UserAggregator create(Context ctx) throws ProcedureException\n+    {\n+      // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n+      // instances local to\n+      // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n+      try\n+      {\n+\n+        Object cls = constructor.invoke();\n+        //API injection\n+        inject(ctx, cls);\n+        Object aggregator = creator.invoke(cls);\n+        List<FieldSignature> inputSignature = signature.inputSignature();\n+        int expectedNumberOfInputs = inputSignature.size();\n+\n+        return new UserAggregator()\n+        {\n+          @Override\n+          public void update(Object[] input) throws ProcedureException\n+          {\n             try\n             {\n-                Object cls = constructor.invoke();\n-                //API injection\n-                inject( ctx, cls );\n-\n-                // Call the method\n-                Object rs = udfMethod.invoke( cls, mapToObjects( \"Function\", signature.name(), signature.inputSignature(), input  ) );\n-\n-                return typeChecker.toValue( rs );\n-            }\n-            catch ( Throwable throwable )\n+              if (expectedNumberOfInputs != input.length)\n+              {\n+                throw new ProcedureException(Status.Procedure.ProcedureCallFailed,\n+                    \"Function `%s` takes %d arguments but %d was provided.\",\n+                    signature.name(),\n+                    expectedNumberOfInputs, input.length);\n+              }\n+              // Some input fields are not supported by Cypher and need to be mapped\n+              for (int indexToMap : indexesToMap)\n+              {\n+                input[indexToMap] = inputSignature.get(indexToMap).map(input[indexToMap]);\n+              }\n+\n+              // Call the method\n+              updateMethod.invoke(aggregator, input);\n+            } catch (Throwable throwable)\n+            {\n+              if (throwable instanceof Status.HasStatus)\n+              {\n+                throw new ProcedureException(((Status.HasStatus) throwable).status(), throwable,\n+                    throwable.getMessage());\n+              } else\n+              {\n+                Throwable cause = ExceptionUtils.getRootCause(throwable);\n+                throw new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+                    \"Failed to invoke function `%s`: %s\", signature.name(),\n+                    \"Caused by: \" + (cause != null ? cause : throwable));\n+              }\n+            }\n+          }\n+\n+          @Override\n+          public Object result() throws ProcedureException\n+          {\n+            try\n+            {\n+              return typeChecker.typeCheck(resultMethod.invoke(aggregator));\n+            } catch (Throwable throwable)\n             {\n-                if ( throwable instanceof Status.HasStatus )\n-                {\n-                    throw new ProcedureException( ((Status.HasStatus) throwable).status(), throwable,\n-                            throwable.getMessage(), throwable );\n-                }\n-                else\n-                {\n-                    Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                            \"Failed to invoke function `%s`: %s\", signature.name(),\n-                            \"Caused by: \" + (cause != null ? cause : throwable) );\n-                }\n+              if (throwable instanceof Status.HasStatus)\n+              {\n+                throw new ProcedureException(((Status.HasStatus) throwable).status(), throwable,\n+                    throwable.getMessage());\n+              } else\n+              {\n+                Throwable cause = ExceptionUtils.getRootCause(throwable);\n+                throw new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+                    \"Failed to invoke function `%s`: %s\", signature.name(),\n+                    \"Caused by: \" + (cause != null ? cause : throwable));\n+              }\n             }\n-        }\n-    }\n \n-    private static class ReflectiveUserAggregationFunction extends ReflectiveBase implements\n-            CallableUserAggregationFunction\n-    {\n+          }\n \n-        private final TypeMappers.TypeChecker typeChecker;\n-        private final UserFunctionSignature signature;\n-        private final MethodHandle constructor;\n-        private final MethodHandle creator;\n-        private final Method updateMethod;\n-        private final MethodHandle resultMethod;\n-        private final int[] indexesToMap;\n+        };\n \n-        ReflectiveUserAggregationFunction( UserFunctionSignature signature, MethodHandle constructor,\n-                MethodHandle creator, Method updateMethod, MethodHandle resultMethod,\n-                TypeMappers.TypeChecker typeChecker,\n-                List<FieldInjections.FieldSetter> fieldSetters )\n+      } catch (Throwable throwable)\n+      {\n+        if (throwable instanceof Status.HasStatus)\n         {\n-            super( null, fieldSetters );\n-            this.constructor = constructor;\n-            this.creator = creator;\n-            this.updateMethod = updateMethod;\n-            this.resultMethod = resultMethod;\n-            this.signature = signature;\n-            this.typeChecker = typeChecker;\n-            this.indexesToMap = computeIndexesToMap( signature.inputSignature() );\n-        }\n-\n-        @Override\n-        public UserFunctionSignature signature()\n+          throw new ProcedureException(((Status.HasStatus) throwable).status(), throwable,\n+              throwable.getMessage());\n+        } else\n         {\n-            return signature;\n-        }\n-\n-        @Override\n-        public UserAggregator create( Context ctx ) throws ProcedureException\n-        {\n-            // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n-            // instances local to\n-            // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n-            try\n-            {\n-\n-                Object cls = constructor.invoke();\n-                //API injection\n-                inject( ctx, cls );\n-                Object aggregator = creator.invoke( cls );\n-                List<FieldSignature> inputSignature = signature.inputSignature();\n-                int expectedNumberOfInputs = inputSignature.size();\n-\n-                return new UserAggregator()\n-                {\n-                    @Override\n-                    public void update( Object[] input ) throws ProcedureException\n-                    {\n-                        try\n-                        {\n-                            if ( expectedNumberOfInputs != input.length )\n-                            {\n-                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                                        \"Function `%s` takes %d arguments but %d was provided.\",\n-                                        signature.name(),\n-                                        expectedNumberOfInputs, input.length );\n-                            }\n-                            // Some input fields are not supported by Cypher and need to be mapped\n-                            for ( int indexToMap : indexesToMap )\n-                            {\n-                                input[indexToMap] = inputSignature.get( indexToMap ).map( input[indexToMap] );\n-                            }\n-\n-                            // Call the method\n-                            updateMethod.invoke( aggregator, input );\n-                        }\n-                        catch ( Throwable throwable )\n-                        {\n-                            if ( throwable instanceof Status.HasStatus )\n-                            {\n-                                throw new ProcedureException( ((Status.HasStatus) throwable).status(), throwable,\n-                                        throwable.getMessage() );\n-                            }\n-                            else\n-                            {\n-                                Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                                        \"Failed to invoke function `%s`: %s\", signature.name(),\n-                                        \"Caused by: \" + (cause != null ? cause : throwable) );\n-                            }\n-                        }\n-                    }\n-\n-                    @Override\n-                    public Object result() throws ProcedureException\n-                    {\n-                        try\n-                        {\n-                            return typeChecker.typeCheck( resultMethod.invoke(aggregator) );\n-                        }\n-                        catch ( Throwable throwable )\n-                        {\n-                            if ( throwable instanceof Status.HasStatus )\n-                            {\n-                                throw new ProcedureException( ((Status.HasStatus) throwable).status(), throwable,\n-                                        throwable.getMessage() );\n-                            }\n-                            else\n-                            {\n-                                Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                                        \"Failed to invoke function `%s`: %s\", signature.name(),\n-                                        \"Caused by: \" + (cause != null ? cause : throwable) );\n-                            }\n-                        }\n-\n-                    }\n-\n-                };\n-\n-            }\n-            catch ( Throwable throwable )\n-            {\n-                if ( throwable instanceof Status.HasStatus )\n-                {\n-                    throw new ProcedureException( ((Status.HasStatus) throwable).status(), throwable,\n-                            throwable.getMessage() );\n-                }\n-                else\n-                {\n-                    Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                            \"Failed to invoke function `%s`: %s\", signature.name(),\n-                            \"Caused by: \" + (cause != null ? cause : throwable ) );\n-                }\n-            }\n+          Throwable cause = ExceptionUtils.getRootCause(throwable);\n+          throw new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+              \"Failed to invoke function `%s`: %s\", signature.name(),\n+              \"Caused by: \" + (cause != null ? cause : throwable));\n         }\n+      }\n     }\n+  }\n \n-    private static void rejectEmptyNamespace( QualifiedName name ) throws ProcedureException\n+  private static void rejectEmptyNamespace(QualifiedName name) throws ProcedureException\n+  {\n+    if (name.namespace() == null || name.namespace().length == 0)\n     {\n-        if ( name.namespace() == null || name.namespace().length == 0 )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"It is not allowed to define functions in the root namespace please use a namespace, \" +\n-                    \"e.g. `@UserFunction(\\\"org.example.com.%s\\\")\", name.name() );\n-        }\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"It is not allowed to define functions in the root namespace please use a namespace, \" +\n+              \"e.g. `@UserFunction(\\\"org.example.com.%s\\\")\", name.name());\n     }\n+  }\n \n-    private static int[] computeIndexesToMap( List<FieldSignature> inputSignature )\n+  private static int[] computeIndexesToMap(List<FieldSignature> inputSignature)\n+  {\n+    ArrayList<Integer> integers = new ArrayList<>();\n+    for (int i = 0; i < inputSignature.size(); i++)\n     {\n-        ArrayList<Integer> integers = new ArrayList<>();\n-        for ( int i = 0; i < inputSignature.size(); i++ )\n-        {\n-            if ( inputSignature.get( i ).needsMapping() )\n-            {\n-                integers.add( i );\n-            }\n-        }\n-        return integers.stream().mapToInt( i -> i ).toArray();\n+      if (inputSignature.get(i).needsMapping())\n+      {\n+        integers.add(i);\n+      }\n     }\n+    return integers.stream().mapToInt(i -> i).toArray();\n+  }\n }\n",
            "diff_size": 1189
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "272",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 303).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "column": "303",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "337",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "354",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "360",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 251).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "364",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "449",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "693",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "749",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "830",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "852",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "868",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "878",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 238).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2967/ReflectiveProcedureCompiler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2967/ReflectiveProcedureCompiler.java\nindex b04ca392031..846666e326d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2967/ReflectiveProcedureCompiler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2967/ReflectiveProcedureCompiler.java\n@@ -92,19 +92,11 @@ class ReflectiveProcedureCompiler\n     ReflectiveProcedureCompiler( TypeMappers typeMappers, ComponentRegistry safeComponents,\n             ComponentRegistry allComponents, Log log, ProcedureConfig config )\n     {\n-        this(\n-                new MethodSignatureCompiler( typeMappers ),\n-                new OutputMappers( typeMappers ),\n-                new FieldInjections( safeComponents ),\n-                new FieldInjections( allComponents ),\n-                log,\n-                typeMappers,\n-                config,\n+        this( new MethodSignatureCompiler( typeMappers ), new OutputMappers( typeMappers ), new FieldInjections( safeComponents ), new FieldInjections( allComponents ), log, typeMappers, config,\n                 ReflectiveProcedureCompiler::rejectEmptyNamespace );\n     }\n \n-    private ReflectiveProcedureCompiler(\n-            MethodSignatureCompiler inputSignatureCompiler,\n+    private ReflectiveProcedureCompiler( MethodSignatureCompiler inputSignatureCompiler,\n             OutputMappers outputMappers,\n             FieldInjections safeFieldInjections,\n             FieldInjections allFieldInjections,\n@@ -127,11 +119,8 @@ class ReflectiveProcedureCompiler\n     {\n         try\n         {\n-            List<Method> functionMethods = Arrays.stream( fcnDefinition.getDeclaredMethods() )\n-                    .filter( m -> m.isAnnotationPresent( UserFunction.class ) )\n-                    .collect( Collectors.toList() );\n-\n-            if ( functionMethods.isEmpty() )\n+            List<Method> functionMethods = Arrays.stream( fcnDefinition.getDeclaredMethods() ).filter( m -> m.isAnnotationPresent( UserFunction.class ) ).collect( Collectors.toList() );\n+if ( functionMethods.isEmpty() )\n             {\n                 return emptyList();\n             }\n@@ -152,7 +141,7 @@ class ReflectiveProcedureCompiler\n                 {\n                     log.warn( String.format( \"The function '%s' is not on the whitelist and won't be loaded.\",\n                             funcName.toString() ) );\n-                }\n+    }\n             }\n             out.sort( Comparator.comparing( a -> a.signature().name().toString() ) );\n             return out;\n@@ -163,20 +152,16 @@ class ReflectiveProcedureCompiler\n         }\n         catch ( Exception e )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage() );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e, \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage() );\n+    }\n     }\n \n     List<CallableUserAggregationFunction> compileAggregationFunction( Class<?> fcnDefinition ) throws KernelException\n     {\n         try\n         {\n-            List<Method> methods = Arrays.stream( fcnDefinition.getDeclaredMethods() )\n-                    .filter( m -> m.isAnnotationPresent( UserAggregationFunction.class ) )\n-                    .collect( Collectors.toList() );\n-\n-            if ( methods.isEmpty() )\n+            List<Method> methods = Arrays.stream( fcnDefinition.getDeclaredMethods() ).filter( m -> m.isAnnotationPresent( UserAggregationFunction.class ) ).collect( Collectors.toList() );\n+if ( methods.isEmpty() )\n             {\n                 return emptyList();\n             }\n@@ -189,8 +174,7 @@ class ReflectiveProcedureCompiler\n                 String valueName = method.getAnnotation( UserAggregationFunction.class ).value();\n                 String definedName = method.getAnnotation( UserAggregationFunction.class ).name();\n                 QualifiedName funcName = extractName( fcnDefinition, method, valueName, definedName );\n-\n-                if ( config.isWhitelisted( funcName.toString() ) )\n+if ( config.isWhitelisted( funcName.toString() ) )\n                 {\n                     out.add( compileAggregationFunction( fcnDefinition, constructor, method, funcName ) );\n                 }\n@@ -199,8 +183,7 @@ class ReflectiveProcedureCompiler\n                     log.warn( String.format( \"The function '%s' is not on the whitelist and won't be loaded.\",\n                             funcName.toString() ) );\n                 }\n-\n-            }\n+    }\n             out.sort( Comparator.comparing( a -> a.signature().name().toString() ) );\n             return out;\n         }\n@@ -210,21 +193,16 @@ class ReflectiveProcedureCompiler\n         }\n         catch ( Exception e )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage() );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e, \"Failed to compile function defined in `%s`: %s\", fcnDefinition.getSimpleName(), e.getMessage() );\n+    }\n     }\n \n-    List<CallableProcedure> compileProcedure( Class<?> procDefinition, String warning, boolean fullAccess )\n-            throws KernelException\n-    {\n+    List<CallableProcedure> compileProcedure( Class<?> procDefinition, String warning, boolean fullAccess ) throws KernelException\n+{\n         try\n         {\n-            List<Method> procedureMethods = Arrays.stream( procDefinition.getDeclaredMethods() )\n-                    .filter( m -> m.isAnnotationPresent( Procedure.class ) )\n-                    .collect( Collectors.toList() );\n-\n-            if ( procedureMethods.isEmpty() )\n+            List<Method> procedureMethods = Arrays.stream( procDefinition.getDeclaredMethods() ).filter( m -> m.isAnnotationPresent( Procedure.class ) ).collect( Collectors.toList() );\n+if ( procedureMethods.isEmpty() )\n             {\n                 return emptyList();\n             }\n@@ -237,8 +215,7 @@ class ReflectiveProcedureCompiler\n                 String valueName = method.getAnnotation( Procedure.class ).value();\n                 String definedName = method.getAnnotation( Procedure.class ).name();\n                 QualifiedName procName = extractName( procDefinition, method, valueName, definedName );\n-\n-                if ( fullAccess || config.isWhitelisted( procName.toString() ) )\n+if ( fullAccess || config.isWhitelisted( procName.toString() ) )\n                 {\n                     out.add( compileProcedure( procDefinition, constructor, method, warning, fullAccess, procName ) );\n                 }\n@@ -246,7 +223,7 @@ class ReflectiveProcedureCompiler\n                 {\n                     log.warn( String.format( \"The procedure '%s' is not on the whitelist and won't be loaded.\",\n                             procName.toString() ) );\n-                }\n+    }\n             }\n             out.sort( Comparator.comparing( a -> a.signature().name().toString() ) );\n             return out;\n@@ -257,27 +234,23 @@ class ReflectiveProcedureCompiler\n         }\n         catch ( Exception e )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile procedure defined in `%s`: %s\", procDefinition.getSimpleName(), e.getMessage() );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e, \"Failed to compile procedure defined in `%s`: %s\", procDefinition.getSimpleName(), e.getMessage() );\n+    }\n     }\n \n     private CallableProcedure compileProcedure( Class<?> procDefinition, MethodHandle constructor, Method method,\n-            String warning, boolean fullAccess, QualifiedName procName  )\n-            throws ProcedureException\n-    {\n+            String warning, boolean fullAccess, QualifiedName procName ) throws ProcedureException\n+{\n         List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor( method );\n         OutputMapper outputMapper = outputMappers.mapper( method );\n-\n-        String description = description( method );\n+String description = description( method );\n         Procedure procedure = method.getAnnotation( Procedure.class );\n         Mode mode = procedure.mode();\n         if ( method.isAnnotationPresent( PerformsWrites.class ) )\n         {\n             if ( procedure.mode() != org.neo4j.procedure.Mode.DEFAULT )\n             {\n-                throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                        \"Conflicting procedure annotation, cannot use PerformsWrites and mode\" );\n+                throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Conflicting procedure annotation, cannot use PerformsWrites and mode\" );\n             }\n             else\n             {\n@@ -285,10 +258,8 @@ class ReflectiveProcedureCompiler\n             }\n         }\n \n-        String deprecated = deprecated( method, procedure::deprecatedBy,\n-                \"Use of @Procedure(deprecatedBy) without @Deprecated in \" + procName );\n-\n-        List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( procDefinition );\n+        String deprecated = deprecated( method, procedure::deprecatedBy, \"Use of @Procedure(deprecatedBy) without @Deprecated in \" + procName );\n+List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( procDefinition );\n         if ( !fullAccess && !config.fullAccessFor( procName.toString() ) )\n         {\n             try\n@@ -298,34 +269,27 @@ class ReflectiveProcedureCompiler\n             catch ( ComponentInjectionException e )\n             {\n                 description = describeAndLogLoadFailure( procName );\n-                ProcedureSignature signature =\n-                        new ProcedureSignature( procName, inputSignature, outputMapper.signature(), Mode.DEFAULT,\n-                                null, new String[0], description, warning, procedure.eager(), false );\n-                return new FailedLoadProcedure( signature );\n+                ProcedureSignature signature = new ProcedureSignature( procName, inputSignature, outputMapper.signature(), Mode.DEFAULT, null, new String[0], description, warning, procedure.eager(), false );\n+return new FailedLoadProcedure( signature );\n             }\n         }\n \n-        ProcedureSignature signature =\n-                new ProcedureSignature( procName, inputSignature, outputMapper.signature(), mode, deprecated,\n+        ProcedureSignature signature = new ProcedureSignature( procName, inputSignature, outputMapper.signature(), mode, deprecated,\n                         config.rolesFor( procName.toString() ), description, warning, procedure.eager(), false );\n-        return new ReflectiveProcedure( signature, constructor, method, outputMapper, setters );\n+return new ReflectiveProcedure( signature, constructor, method, outputMapper, setters );\n     }\n \n     private String describeAndLogLoadFailure( QualifiedName name )\n     {\n         String nameStr = name.toString();\n         String description =\n-                nameStr + \" is unavailable because it is sandboxed and has dependencies outside of the sandbox. \" +\n-                \"Sandboxing is controlled by the \" + procedure_unrestricted.name() + \" setting. \" +\n-                \"Only unrestrict procedures you can trust with access to database internals.\";\n-        log.warn( description );\n+                nameStr + \" is unavailable because it is sandboxed and has dependencies outside of the sandbox. \" + \"Sandboxing is controlled by the \" + procedure_unrestricted.name() + \" setting. \" + \"Only unrestrict procedures you can trust with access to database internals.\"; log.warn( description );\n         return description;\n     }\n \n     private CallableUserFunction compileFunction( Class<?> procDefinition, MethodHandle constructor, Method method,\n-            QualifiedName procName )\n-            throws ProcedureException, IllegalAccessException\n-    {\n+            QualifiedName procName ) throws ProcedureException, IllegalAccessException\n+{\n         restrictions.verify( procName );\n \n         List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor( method );\n@@ -333,10 +297,8 @@ class ReflectiveProcedureCompiler\n         TypeMappers.TypeChecker typeChecker = typeMappers.checkerFor( returnType );\n         String description = description( method );\n         UserFunction function = method.getAnnotation( UserFunction.class );\n-        String deprecated = deprecated( method, function::deprecatedBy,\n-                \"Use of @UserFunction(deprecatedBy) without @Deprecated in \" + procName );\n-\n-        List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( procDefinition );\n+        String deprecated = deprecated( method, function::deprecatedBy, \"Use of @UserFunction(deprecatedBy) without @Deprecated in \" + procName );\n+List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( procDefinition );\n         if ( !config.fullAccessFor( procName.toString() ) )\n         {\n             try\n@@ -346,23 +308,20 @@ class ReflectiveProcedureCompiler\n             catch ( ComponentInjectionException e )\n             {\n                 description = describeAndLogLoadFailure( procName );\n-                UserFunctionSignature signature =\n-                        new UserFunctionSignature( procName, inputSignature, typeChecker.type(), deprecated,\n+                UserFunctionSignature signature = new UserFunctionSignature( procName, inputSignature, typeChecker.type(), deprecated,\n                                 config.rolesFor( procName.toString() ), description, false );\n-                return new FailedLoadFunction( signature );\n+return new FailedLoadFunction( signature );\n             }\n         }\n \n-        UserFunctionSignature signature =\n-                new UserFunctionSignature( procName, inputSignature, typeChecker.type(), deprecated,\n+        UserFunctionSignature signature = new UserFunctionSignature( procName, inputSignature, typeChecker.type(), deprecated,\n                         config.rolesFor( procName.toString() ), description, false );\n-\n-        return new ReflectiveUserFunction( signature, constructor, method, typeChecker, typeMappers, setters );\n+return new ReflectiveUserFunction( signature, constructor, method, typeChecker, typeMappers, setters );\n     }\n \n     private CallableUserAggregationFunction compileAggregationFunction( Class<?> definition, MethodHandle constructor,\n             Method method, QualifiedName funcName ) throws ProcedureException, IllegalAccessException\n-    {\n+{\n         restrictions.verify( funcName );\n \n         //find update and result method\n@@ -375,59 +334,49 @@ class ReflectiveProcedureCompiler\n             {\n                 if ( update != null )\n                 {\n-                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(),\n-                            UserAggregationUpdate.class.getSimpleName() );\n+                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(), UserAggregationUpdate.class.getSimpleName() );\n                 }\n-                update = m;\n \n-            }\n+update = m;\n+    }\n             if ( m.isAnnotationPresent( UserAggregationResult.class ) )\n             {\n                 if ( result != null )\n                 {\n-                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(),\n-                            UserAggregationResult.class.getSimpleName() );\n+                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Class '%s' contains multiple methods annotated with '@%s'.\", aggregator.getSimpleName(), UserAggregationResult.class.getSimpleName() );\n                 }\n-                result = m;\n+\n+result = m;\n             }\n         }\n         if ( result == null || update == null )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Class '%s' must contain methods annotated with both '@%s' as well as '@%s'.\",\n-                    aggregator.getSimpleName(), UserAggregationResult.class.getSimpleName(),\n-                    UserAggregationUpdate.class.getSimpleName() );\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Class '%s' must contain methods annotated with both '@%s' as well as '@%s'.\",\n+                    aggregator.getSimpleName(), UserAggregationResult.class.getSimpleName(), UserAggregationUpdate.class.getSimpleName() );\n         }\n-        if ( update.getReturnType() != void.class )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Update method '%s' in %s has type '%s' but must have return type 'void'.\", update.getName(),\n-                    aggregator.getSimpleName(), update.getReturnType().getSimpleName() );\n \n-        }\n+if ( update.getReturnType() != void.class )\n+        {\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Update method '%s' in %s has type '%s' but must have return type 'void'.\", update.getName(), aggregator.getSimpleName(), update.getReturnType().getSimpleName() );\n+    }\n         if ( !Modifier.isPublic( method.getModifiers() ) )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation method '%s' in %s must be public.\", method.getName(), definition.getSimpleName() );\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Aggregation method '%s' in %s must be public.\", method.getName(), definition.getSimpleName() );\n         }\n-        if ( !Modifier.isPublic( aggregator.getModifiers() ) )\n+\n+if ( !Modifier.isPublic( aggregator.getModifiers() ) )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation class '%s' must be public.\", aggregator.getSimpleName() );\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Aggregation class '%s' must be public.\", aggregator.getSimpleName() );\n         }\n-        if ( !Modifier.isPublic( update.getModifiers() ) )\n+\n+if ( !Modifier.isPublic( update.getModifiers() ) )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation update method '%s' in %s must be public.\", update.getName(),\n-                    aggregator.getSimpleName() );\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Aggregation update method '%s' in %s must be public.\", update.getName(), aggregator.getSimpleName() );\n         }\n-        if ( !Modifier.isPublic( result.getModifiers() ) )\n+\n+if ( !Modifier.isPublic( result.getModifiers() ) )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Aggregation result method '%s' in %s must be public.\", result.getName(),\n-                    aggregator.getSimpleName() );\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Aggregation result method '%s' in %s must be public.\", result.getName(), aggregator.getSimpleName() );\n         }\n \n         List<FieldSignature> inputSignature = inputSignatureDeterminer.signatureFor( update );\n@@ -435,14 +384,10 @@ class ReflectiveProcedureCompiler\n         TypeMappers.TypeChecker valueConverter = typeMappers.checkerFor( returnType );\n         MethodHandle creator = lookup.unreflect( method );\n         MethodHandle resultMethod = lookup.unreflect( result );\n-\n-        String description = description( method );\n+String description = description( method );\n         UserAggregationFunction function = method.getAnnotation( UserAggregationFunction.class );\n-\n-        String deprecated = deprecated( method, function::deprecatedBy,\n-                \"Use of @UserAggregationFunction(deprecatedBy) without @Deprecated in \" + funcName );\n-\n-        List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( definition );\n+String deprecated = deprecated( method, function::deprecatedBy, \"Use of @UserAggregationFunction(deprecatedBy) without @Deprecated in \" + funcName );\n+List<FieldInjections.FieldSetter> setters = allFieldInjections.setters( definition );\n         if ( !config.fullAccessFor( funcName.toString() ) )\n         {\n             try\n@@ -452,19 +397,15 @@ class ReflectiveProcedureCompiler\n             catch ( ComponentInjectionException e )\n             {\n                 description = describeAndLogLoadFailure( funcName );\n-                UserFunctionSignature signature =\n-                        new UserFunctionSignature( funcName, inputSignature, valueConverter.type(), deprecated,\n+                UserFunctionSignature signature = new UserFunctionSignature( funcName, inputSignature, valueConverter.type(), deprecated,\n                                 config.rolesFor( funcName.toString() ), description, false );\n-\n-                return new FailedLoadAggregatedFunction( signature );\n+return new FailedLoadAggregatedFunction( signature );\n             }\n         }\n \n-        UserFunctionSignature signature =\n-                new UserFunctionSignature( funcName, inputSignature, valueConverter.type(), deprecated,\n+        UserFunctionSignature signature = new UserFunctionSignature( funcName, inputSignature, valueConverter.type(), deprecated,\n                         config.rolesFor( funcName.toString() ), description, false );\n-\n-        return new ReflectiveUserAggregationFunction( signature, constructor, creator, update, resultMethod,\n+return new ReflectiveUserAggregationFunction( signature, constructor, creator, update, resultMethod,\n                 valueConverter, setters );\n     }\n \n@@ -474,7 +415,7 @@ class ReflectiveProcedureCompiler\n         String deprecated = null;\n         if ( method.isAnnotationPresent( Deprecated.class ) )\n         {\n-            deprecated = deprecatedBy ;\n+            deprecated = deprecatedBy;\n         }\n         else if ( !deprecatedBy.isEmpty() )\n         {\n@@ -489,8 +430,8 @@ class ReflectiveProcedureCompiler\n     {\n         if ( method.isAnnotationPresent( Description.class ) )\n         {\n-           return method.getAnnotation( Description.class ).value();\n-        }\n+    return method.getAnnotation( Description.class ).value();\n+    }\n         else\n         {\n             return null;\n@@ -505,11 +446,9 @@ class ReflectiveProcedureCompiler\n         }\n         catch ( IllegalAccessException | NoSuchMethodException e )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Unable to find a usable public no-argument constructor in the class `%s`. \" +\n-                    \"Please add a valid, public constructor, recompile the class and try again.\",\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e, \"Unable to find a usable public no-argument constructor in the class `%s`. \" + \"Please add a valid, public constructor, recompile the class and try again.\",\n                     procDefinition.getSimpleName() );\n-        }\n+    }\n     }\n \n     private QualifiedName extractName( Class<?> procDefinition, Method m, String valueName, String definedName )\n@@ -537,14 +476,7 @@ class ReflectiveProcedureCompiler\n \n     public ReflectiveProcedureCompiler withoutNamingRestrictions()\n     {\n-        return new ReflectiveProcedureCompiler(\n-                inputSignatureDeterminer,\n-                outputMappers,\n-                safeFieldInjections,\n-                allFieldInjections,\n-                log,\n-                typeMappers,\n-                config,\n+        return new ReflectiveProcedureCompiler( inputSignatureDeterminer, outputMappers, safeFieldInjections, allFieldInjections, log, typeMappers, config,\n                 name ->\n                 {\n                     // all ok\n@@ -553,8 +485,7 @@ class ReflectiveProcedureCompiler\n \n     private abstract static class ReflectiveBase\n     {\n-\n-        final List<FieldInjections.FieldSetter> fieldSetters;\n+    final List<FieldInjections.FieldSetter> fieldSetters;\n         private final ValueMapper<Object> mapper;\n \n         ReflectiveBase( ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters )\n@@ -573,12 +504,11 @@ class ReflectiveProcedureCompiler\n \n         protected Object[] mapToObjects( String type, QualifiedName name, List<FieldSignature> inputSignature,\n                 AnyValue[] input ) throws ProcedureException\n-        {\n+{\n             // Verify that the number of passed arguments matches the number expected in the mthod signature\n             if ( inputSignature.size() != input.length )\n             {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                        \"%s `%s` takes %d arguments but %d was provided.\", type, name,\n+                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"%s `%s` takes %d arguments but %d was provided.\", type, name,\n                         inputSignature.size(), input.length );\n             }\n \n@@ -587,7 +517,8 @@ class ReflectiveProcedureCompiler\n             {\n                 args[i] = inputSignature.get( i ).map( input[i], mapper );\n             }\n-            return args;\n+\n+return args;\n         }\n     }\n \n@@ -600,8 +531,7 @@ class ReflectiveProcedureCompiler\n         private final int[] indexesToMap;\n \n         ReflectiveProcedure( ProcedureSignature signature, MethodHandle constructor,\n-                Method procedureMethod, OutputMapper outputMapper,\n-                List<FieldInjections.FieldSetter> fieldSetters )\n+                Method procedureMethod, OutputMapper outputMapper, List<FieldInjections.FieldSetter> fieldSetters )\n         {\n             super( null, fieldSetters );\n             this.constructor = constructor;\n@@ -620,7 +550,7 @@ class ReflectiveProcedureCompiler\n         @Override\n         public RawIterator<Object[],ProcedureException> apply( Context ctx, Object[] input,\n                 ResourceTracker resourceTracker ) throws ProcedureException\n-        {\n+{\n             // For now, create a new instance of the class for each invocation. In the future, we'd like to keep\n             // instances local to\n             // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n@@ -629,10 +559,8 @@ class ReflectiveProcedureCompiler\n                 List<FieldSignature> inputSignature = signature.inputSignature();\n                 if ( inputSignature.size() != input.length )\n                 {\n-                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                            \"Procedure `%s` takes %d arguments but %d was provided.\",\n-                            signature.name(),\n-                            inputSignature.size(), input.length );\n+                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Procedure `%s` takes %d arguments but %d was provided.\",\n+                            signature.name(), inputSignature.size(), input.length );\n                 }\n                 // Some input fields are not supported by Cypher and need to be mapped\n                 for ( int indexToMap : indexesToMap )\n@@ -687,7 +615,8 @@ class ReflectiveProcedureCompiler\n                     {\n                         close();\n                     }\n-                    return hasNext;\n+\n+return hasNext;\n                 }\n                 catch ( Throwable throwable )\n                 {\n@@ -720,9 +649,8 @@ class ReflectiveProcedureCompiler\n                     closeableResource = null;\n \n                     IOUtils.closeAll( ResourceCloseFailureException.class,\n-                            () -> resourceTracker.unregisterCloseableResource( resourceToClose ),\n-                            resourceToClose::close );\n-                }\n+                            () -> resourceTracker.unregisterCloseableResource( resourceToClose ), resourceToClose::close );\n+    }\n             }\n \n             private ProcedureException closeAndCreateProcedureException( Throwable t )\n@@ -762,10 +690,8 @@ class ReflectiveProcedureCompiler\n             else\n             {\n                 Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                return new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                        \"Failed to invoke procedure `%s`: %s\", signature.name(),\n-                        \"Caused by: \" + (cause != null ? cause : throwable) );\n-            }\n+                return new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable, \"Failed to invoke procedure `%s`: %s\", signature.name(), \"Caused by: \" + (cause != null ? cause : throwable) );\n+    }\n         }\n     }\n \n@@ -778,8 +704,7 @@ class ReflectiveProcedureCompiler\n         private final int[] indexesToMap;\n \n         ReflectiveUserFunction( UserFunctionSignature signature, MethodHandle constructor,\n-                Method udfMethod, TypeMappers.TypeChecker typeChecker,\n-                ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters )\n+                Method udfMethod, TypeMappers.TypeChecker typeChecker, ValueMapper<Object> mapper, List<FieldInjections.FieldSetter> fieldSetters )\n         {\n             super( mapper, fieldSetters );\n             this.constructor = constructor;\n@@ -808,9 +733,8 @@ class ReflectiveProcedureCompiler\n                 inject( ctx, cls );\n \n                 // Call the method\n-                Object rs = udfMethod.invoke( cls, mapToObjects( \"Function\", signature.name(), signature.inputSignature(), input  ) );\n-\n-                return typeChecker.toValue( rs );\n+                Object rs = udfMethod.invoke( cls, mapToObjects( \"Function\", signature.name(), signature.inputSignature(), input ) );\n+return typeChecker.toValue( rs );\n             }\n             catch ( Throwable throwable )\n             {\n@@ -822,19 +746,15 @@ class ReflectiveProcedureCompiler\n                 else\n                 {\n                     Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                            \"Failed to invoke function `%s`: %s\", signature.name(),\n-                            \"Caused by: \" + (cause != null ? cause : throwable) );\n-                }\n+                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable, \"Failed to invoke function `%s`: %s\", signature.name(), \"Caused by: \" + (cause != null ? cause : throwable) );\n+    }\n             }\n         }\n     }\n \n-    private static class ReflectiveUserAggregationFunction extends ReflectiveBase implements\n-            CallableUserAggregationFunction\n+    private static class ReflectiveUserAggregationFunction extends ReflectiveBase implements CallableUserAggregationFunction\n     {\n-\n-        private final TypeMappers.TypeChecker typeChecker;\n+    private final TypeMappers.TypeChecker typeChecker;\n         private final UserFunctionSignature signature;\n         private final MethodHandle constructor;\n         private final MethodHandle creator;\n@@ -844,8 +764,7 @@ class ReflectiveProcedureCompiler\n \n         ReflectiveUserAggregationFunction( UserFunctionSignature signature, MethodHandle constructor,\n                 MethodHandle creator, Method updateMethod, MethodHandle resultMethod,\n-                TypeMappers.TypeChecker typeChecker,\n-                List<FieldInjections.FieldSetter> fieldSetters )\n+                TypeMappers.TypeChecker typeChecker, List<FieldInjections.FieldSetter> fieldSetters )\n         {\n             super( null, fieldSetters );\n             this.constructor = constructor;\n@@ -871,15 +790,13 @@ class ReflectiveProcedureCompiler\n             // at least the executing session, but we don't yet have good interfaces to the kernel to model that with.\n             try\n             {\n-\n-                Object cls = constructor.invoke();\n+    Object cls = constructor.invoke();\n                 //API injection\n                 inject( ctx, cls );\n                 Object aggregator = creator.invoke( cls );\n                 List<FieldSignature> inputSignature = signature.inputSignature();\n                 int expectedNumberOfInputs = inputSignature.size();\n-\n-                return new UserAggregator()\n+return new UserAggregator()\n                 {\n                     @Override\n                     public void update( Object[] input ) throws ProcedureException\n@@ -888,10 +805,8 @@ class ReflectiveProcedureCompiler\n                         {\n                             if ( expectedNumberOfInputs != input.length )\n                             {\n-                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                                        \"Function `%s` takes %d arguments but %d was provided.\",\n-                                        signature.name(),\n-                                        expectedNumberOfInputs, input.length );\n+                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Function `%s` takes %d arguments but %d was provided.\",\n+                                        signature.name(), expectedNumberOfInputs, input.length );\n                             }\n                             // Some input fields are not supported by Cypher and need to be mapped\n                             for ( int indexToMap : indexesToMap )\n@@ -912,10 +827,8 @@ class ReflectiveProcedureCompiler\n                             else\n                             {\n                                 Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                                        \"Failed to invoke function `%s`: %s\", signature.name(),\n-                                        \"Caused by: \" + (cause != null ? cause : throwable) );\n-                            }\n+                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable, \"Failed to invoke function `%s`: %s\", signature.name(), \"Caused by: \" + (cause != null ? cause : throwable) );\n+    }\n                         }\n                     }\n \n@@ -936,17 +849,12 @@ class ReflectiveProcedureCompiler\n                             else\n                             {\n                                 Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                                        \"Failed to invoke function `%s`: %s\", signature.name(),\n-                                        \"Caused by: \" + (cause != null ? cause : throwable) );\n-                            }\n+                                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable, \"Failed to invoke function `%s`: %s\", signature.name(), \"Caused by: \" + (cause != null ? cause : throwable) );\n+    }\n                         }\n-\n-                    }\n-\n-                };\n-\n-            }\n+    }\n+    };\n+    }\n             catch ( Throwable throwable )\n             {\n                 if ( throwable instanceof Status.HasStatus )\n@@ -957,10 +865,8 @@ class ReflectiveProcedureCompiler\n                 else\n                 {\n                     Throwable cause = ExceptionUtils.getRootCause( throwable );\n-                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                            \"Failed to invoke function `%s`: %s\", signature.name(),\n-                            \"Caused by: \" + (cause != null ? cause : throwable ) );\n-                }\n+                    throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable, \"Failed to invoke function `%s`: %s\", signature.name(), \"Caused by: \" + (cause != null ? cause : throwable ) );\n+    }\n             }\n         }\n     }\n@@ -969,10 +875,8 @@ class ReflectiveProcedureCompiler\n     {\n         if ( name.namespace() == null || name.namespace().length == 0 )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"It is not allowed to define functions in the root namespace please use a namespace, \" +\n-                    \"e.g. `@UserFunction(\\\"org.example.com.%s\\\")\", name.name() );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"It is not allowed to define functions in the root namespace please use a namespace, \" + \"e.g. `@UserFunction(\\\"org.example.com.%s\\\")\", name.name() );\n+    }\n     }\n \n     private static int[] computeIndexesToMap( List<FieldSignature> inputSignature )\n@@ -987,4 +891,4 @@ class ReflectiveProcedureCompiler\n         }\n         return integers.stream().mapToInt( i -> i ).toArray();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 221
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}