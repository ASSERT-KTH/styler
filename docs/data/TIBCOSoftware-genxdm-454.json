{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "454",
    "information": {
        "errors": [
            {
                "line": "47",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "{\n\n\tpublic StringExpr makeStringExpr(StaticContext statEnv)\n\t{\n\t\treturn new ConvertibleStringExpr()\n\t\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/454/ConvertibleNodeSetExprImpl.java\nindex efdd9884e5b..cf4f7d117ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/454/ConvertibleNodeSetExprImpl.java\n@@ -44,7 +44,7 @@ public abstract class ConvertibleNodeSetExprImpl\n     implements ConvertibleNodeSetExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv)\r\n+public StringExpr makeStringExpr(StaticContext statEnv)\r\n \t{\r\n \t\treturn new ConvertibleStringExpr()\r\n \t\t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/454/ConvertibleNodeSetExprImpl.java\nindex efdd9884e5b..5c14f7e6b8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/454/ConvertibleNodeSetExprImpl.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import org.genxdm.Model;\r\n@@ -39,91 +40,94 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n  * A compiled XPath pattern component which returns a Node set, but is convertible (castable) to a String expression, boolean expression or VariantExpression convertible (castable) to a String expression, boolean expression or VariantExpression convertible (castable) to\r\n  * a String expression, boolean expression or VariantExpression convertible (castable) to a String expression, boolean expression or VariantExpression\r\n  */\r\n-public abstract class ConvertibleNodeSetExprImpl \r\n+public abstract class ConvertibleNodeSetExprImpl\r\n     extends ConvertibleExprImpl\r\n-    implements ConvertibleNodeSetExpr\r\n-{\r\n+    implements ConvertibleNodeSetExpr {\r\n \r\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n+    public StringExpr makeStringExpr(StaticContext statEnv) {\r\n+        return new ConvertibleStringExpr() {\r\n             @Override\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toString(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv), model);\r\n-\t\t\t}\r\n+            public <N> String stringFunction(Model<N> model, final N node,\r\n+                                             final NodeDynamicContext<N> dynEnv) {\r\n+                return Converter\r\n+                    .toString(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv),\r\n+                        model);\r\n+            }\r\n \r\n             @Override\r\n-            public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toStringFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n+            public String stringFunction(TraversingInformer contextNode,\r\n+                                         TraverserDynamicContext dynEnv) {\r\n+                return Converter.toStringFromTraverser(\r\n+                    ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n \r\n-\t/**\r\n+    /**\r\n      *\r\n      */\r\n-\tpublic BooleanExpr makeBooleanExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleBooleanExpr( )\r\n-\t\t{\r\n+    public BooleanExpr makeBooleanExpr(StaticContext statEnv) {\r\n+        return new ConvertibleBooleanExpr() {\r\n             @Override\r\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toBoolean(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv));\r\n-\t\t\t}\r\n+            public <N> boolean booleanFunction(Model<N> model, final N node,\r\n+                                               final NodeDynamicContext<N> dynEnv) {\r\n+                return Converter\r\n+                    .toBoolean(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv));\r\n+            }\r\n \r\n             @Override\r\n-            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toBooleanFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n+            public boolean booleanFunction(TraversingInformer contextNode,\r\n+                                           TraverserDynamicContext dynEnv) {\r\n+                return Converter.toBooleanFromTraverser(\r\n+                    ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n \r\n-\t/**\r\n+    /**\r\n      *\r\n      */\r\n-\t@Override\r\n-\tpublic ConvertibleNodeSetExprImpl makeNodeSetExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+    @Override\r\n+    public ConvertibleNodeSetExprImpl makeNodeSetExpr(StaticContext statEnv) {\r\n+        return this;\r\n+    }\r\n \r\n-\t/**\r\n+    /**\r\n      *\r\n      */\r\n-\tpublic VariantExpr makeVariantExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n+    public VariantExpr makeVariantExpr(final StaticContext statEnv) {\r\n+        return new ConvertibleVariantExpr() {\r\n             @Override\r\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn new NodeSetVariant<N>(ConvertibleNodeSetExprImpl.this.nodeIterator(model, contextNode, dynEnv), model);\r\n-\t\t\t}\r\n+            public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode,\r\n+                                                        final NodeDynamicContext<N> dynEnv) {\r\n+                return new NodeSetVariant<N>(\r\n+                    ConvertibleNodeSetExprImpl.this.nodeIterator(model, contextNode, dynEnv),\r\n+                    model);\r\n+            }\r\n \r\n             @Override\r\n-            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return new TraverserVariantImpl(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n+            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode,\r\n+                                                      TraverserDynamicContext dynEnv) {\r\n+                return new TraverserVariantImpl(\r\n+                    ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n \r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn 0;\r\n-\t}\r\n+    public int getOptimizeFlags() {\r\n+        return 0;\r\n+    }\r\n \r\n-\t/**\r\n-\t * Return an expression for this/expr\r\n-\t */\r\n-\tpublic ConvertibleNodeSetExpr compose(final ConvertibleNodeSetExpr expr)\r\n-\t{\r\n-\t\tfinal int opt1 = this.getOptimizeFlags();\r\n-\t\tfinal int opt2 = expr.getOptimizeFlags();\r\n-\t\tif ((opt1 & SINGLE_LEVEL) != 0 && (opt2 & STAYS_IN_SUBTREE) != 0)\r\n-\t\t{\r\n-\t\t\treturn new SequenceComposeExpr(this, expr);\r\n-\t\t}\r\n-\t\treturn new ComposeExpr(this, expr);\r\n-\t}\r\n+    /**\r\n+     * Return an expression for this/expr\r\n+     */\r\n+    public ConvertibleNodeSetExpr compose(final ConvertibleNodeSetExpr expr) {\r\n+        final int opt1 = this.getOptimizeFlags();\r\n+        final int opt2 = expr.getOptimizeFlags();\r\n+        if ((opt1 & SINGLE_LEVEL) != 0 && (opt2 & STAYS_IN_SUBTREE) != 0) {\r\n+            return new SequenceComposeExpr(this, expr);\r\n+        }\r\n+        return new ComposeExpr(this, expr);\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/454/ConvertibleNodeSetExprImpl.java\nindex efdd9884e5b..fb6e3c8bb4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/454/ConvertibleNodeSetExprImpl.java\n@@ -40,90 +40,89 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n  * a String expression, boolean expression or VariantExpression convertible (castable) to a String expression, boolean expression or VariantExpression\r\n  */\r\n public abstract class ConvertibleNodeSetExprImpl \r\n-    extends ConvertibleExprImpl\r\n-    implements ConvertibleNodeSetExpr\r\n-{\r\n-\r\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toString(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv), model);\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+    extends ConvertibleExprImpl\n+implements ConvertibleNodeSetExpr\r\n+{\n+\n+    public StringExpr makeStringExpr(StaticContext statEnv)\r\n+\t{\n+    return new ConvertibleStringExpr()\r\n+\t\t{\n+    @Override\n+public <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n+    return Converter.toString(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv), model);\n+    }\n+\n+@Override\r\n             public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n                 return Converter.toStringFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+            }\n+    };\n+    }\r\n \r\n \t/**\r\n      *\r\n      */\r\n \tpublic BooleanExpr makeBooleanExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleBooleanExpr( )\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toBoolean(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+\t{\n+    return new ConvertibleBooleanExpr()\r\n+\t\t{\n+    @Override\n+public <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n+    return Converter.toBoolean(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv));\n+    }\n+\n+@Override\r\n             public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n                 return Converter.toBooleanFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+            }\n+    };\n+    }\r\n \r\n \t/**\r\n      *\r\n      */\r\n \t@Override\r\n \tpublic ConvertibleNodeSetExprImpl makeNodeSetExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+\t{\n+    return this;\n+    }\r\n \r\n \t/**\r\n      *\r\n      */\r\n \tpublic VariantExpr makeVariantExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn new NodeSetVariant<N>(ConvertibleNodeSetExprImpl.this.nodeIterator(model, contextNode, dynEnv), model);\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+\t{\n+    return new ConvertibleVariantExpr()\r\n+\t\t{\n+    @Override\n+public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\n+return new NodeSetVariant<N>(ConvertibleNodeSetExprImpl.this.nodeIterator(model, contextNode, dynEnv), model);\n+    }\n+\n+@Override\r\n             public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n                 return new TraverserVariantImpl(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+            }\n+    };\n+    }\r\n \r\n \tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn 0;\r\n-\t}\r\n+\t{\n+    return 0;\n+    }\r\n \r\n \t/**\r\n \t * Return an expression for this/expr\r\n \t */\r\n \tpublic ConvertibleNodeSetExpr compose(final ConvertibleNodeSetExpr expr)\r\n-\t{\r\n-\t\tfinal int opt1 = this.getOptimizeFlags();\r\n+\t{\n+    final int opt1 = this.getOptimizeFlags();\r\n \t\tfinal int opt2 = expr.getOptimizeFlags();\r\n \t\tif ((opt1 & SINGLE_LEVEL) != 0 && (opt2 & STAYS_IN_SUBTREE) != 0)\r\n-\t\t{\r\n-\t\t\treturn new SequenceComposeExpr(this, expr);\r\n-\t\t}\r\n-\t\treturn new ComposeExpr(this, expr);\r\n-\t}\r\n-\r\n-}\r\n+\t\t{\n+    return new SequenceComposeExpr(this, expr);\n+    }\r\n+\t\treturn new ComposeExpr(this, expr);\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/454/ConvertibleNodeSetExprImpl.java\nindex efdd9884e5b..3518eb92766 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/454/ConvertibleNodeSetExprImpl.java\n@@ -18,112 +18,122 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.nodes.TraversingInformer;\r\n-import org.genxdm.processor.xpath.v10.variants.TraverserVariantImpl;\r\n-import org.genxdm.processor.xpath.v10.variants.NodeSetVariant;\r\n-import org.genxdm.xpath.v10.BooleanExpr;\r\n-import org.genxdm.xpath.v10.Converter;\r\n-import org.genxdm.xpath.v10.TraverserDynamicContext;\r\n-import org.genxdm.xpath.v10.TraverserVariant;\r\n-import org.genxdm.xpath.v10.NodeDynamicContext;\r\n-import org.genxdm.xpath.v10.StaticContext;\r\n-import org.genxdm.xpath.v10.StringExpr;\r\n-import org.genxdm.xpath.v10.NodeVariant;\r\n-import org.genxdm.xpath.v10.VariantExpr;\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.nodes.TraversingInformer;\n+import org.genxdm.processor.xpath.v10.variants.TraverserVariantImpl;\n+import org.genxdm.processor.xpath.v10.variants.NodeSetVariant;\n+import org.genxdm.xpath.v10.BooleanExpr;\n+import org.genxdm.xpath.v10.Converter;\n+import org.genxdm.xpath.v10.TraverserDynamicContext;\n+import org.genxdm.xpath.v10.TraverserVariant;\n+import org.genxdm.xpath.v10.NodeDynamicContext;\n+import org.genxdm.xpath.v10.StaticContext;\n+import org.genxdm.xpath.v10.StringExpr;\n+import org.genxdm.xpath.v10.NodeVariant;\n+import org.genxdm.xpath.v10.VariantExpr;\n import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\r\n \r\n /**\r\n  * A compiled XPath pattern component which returns a Node set, but is convertible (castable) to a String expression, boolean expression or VariantExpression convertible (castable) to a String expression, boolean expression or VariantExpression convertible (castable) to\r\n  * a String expression, boolean expression or VariantExpression convertible (castable) to a String expression, boolean expression or VariantExpression\r\n- */\r\n-public abstract class ConvertibleNodeSetExprImpl \r\n-    extends ConvertibleExprImpl\r\n-    implements ConvertibleNodeSetExpr\r\n-{\r\n-\r\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toString(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv), model);\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n-            public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toStringFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+ */\n+\n+public abstract class ConvertibleNodeSetExprImpl extends ConvertibleExprImpl implements ConvertibleNodeSetExpr\n+{\n+    public StringExpr makeStringExpr(StaticContext statEnv)\n+    {\n+        return new ConvertibleStringExpr()\n+        {\n+\n+            @Override\n+            public <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return Converter.toString(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv), model);\n+            }\n+\n+            @Override\n+            public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return Converter.toStringFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\n+            }\n+        };\n+    }\r\n \r\n-\t/**\r\n+    /**\r\n      *\r\n-     */\r\n-\tpublic BooleanExpr makeBooleanExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleBooleanExpr( )\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toBoolean(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv));\r\n-\t\t\t}\r\n+     */\n+\n+    public BooleanExpr makeBooleanExpr(StaticContext statEnv)\n+    {\n+        return new ConvertibleBooleanExpr()\n+        {\n+\n+            @Override\n+            public <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return Converter.toBoolean(ConvertibleNodeSetExprImpl.this.nodeIterator(model, node, dynEnv));\n+            }\n+\n+            @Override\n+            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return Converter.toBooleanFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\n+            }\n+        };\n+    }\r\n \r\n-            @Override\r\n-            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toBooleanFromTraverser(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-\r\n-\t/**\r\n+    /**\r\n      *\r\n-     */\r\n-\t@Override\r\n-\tpublic ConvertibleNodeSetExprImpl makeNodeSetExpr(StaticContext statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+     */\n+\n+    @Override\n+    public ConvertibleNodeSetExprImpl makeNodeSetExpr(StaticContext statEnv)\n+    {\n+        return this;\n+    }\r\n \r\n-\t/**\r\n+    /**\r\n      *\r\n-     */\r\n-\tpublic VariantExpr makeVariantExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn new NodeSetVariant<N>(ConvertibleNodeSetExprImpl.this.nodeIterator(model, contextNode, dynEnv), model);\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n-            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return new TraverserVariantImpl(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-\r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn 0;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Return an expression for this/expr\r\n-\t */\r\n-\tpublic ConvertibleNodeSetExpr compose(final ConvertibleNodeSetExpr expr)\r\n-\t{\r\n-\t\tfinal int opt1 = this.getOptimizeFlags();\r\n-\t\tfinal int opt2 = expr.getOptimizeFlags();\r\n-\t\tif ((opt1 & SINGLE_LEVEL) != 0 && (opt2 & STAYS_IN_SUBTREE) != 0)\r\n-\t\t{\r\n-\t\t\treturn new SequenceComposeExpr(this, expr);\r\n-\t\t}\r\n-\t\treturn new ComposeExpr(this, expr);\r\n-\t}\r\n+     */\n+\n+    public VariantExpr makeVariantExpr(final StaticContext statEnv)\n+    {\n+        return new ConvertibleVariantExpr()\n+        {\n+\n+            @Override\n+            public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return new NodeSetVariant<N>(ConvertibleNodeSetExprImpl.this.nodeIterator(model, contextNode, dynEnv), model);\n+            }\n+\n+            @Override\n+            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return new TraverserVariantImpl(ConvertibleNodeSetExprImpl.this.traverseNodes(contextNode, dynEnv));\n+            }\n+        };\n+    }\n+\n+    public int getOptimizeFlags()\n+    {\n+        return 0;\n+    }\r\n \r\n-}\r\n+    /**\r\n+     * Return an expression for this/expr\r\n+     */\n+\n+    public ConvertibleNodeSetExpr compose(final ConvertibleNodeSetExpr expr)\n+    {\n+        final int opt1 = this.getOptimizeFlags();\n+        final int opt2 = expr.getOptimizeFlags();\n+        if ( (opt1 & SINGLE_LEVEL) != 0 && (opt2 & STAYS_IN_SUBTREE) != 0)\n+        {\n+            return new SequenceComposeExpr(this, expr);\n+        }\n+        return new ComposeExpr(this, expr);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/454/ConvertibleNodeSetExprImpl.java\nindex efdd9884e5b..cf4f7d117ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/454/ConvertibleNodeSetExprImpl.java\n@@ -44,7 +44,7 @@ public abstract class ConvertibleNodeSetExprImpl\n     implements ConvertibleNodeSetExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv)\r\n+public StringExpr makeStringExpr(StaticContext statEnv)\r\n \t{\r\n \t\treturn new ConvertibleStringExpr()\r\n \t\t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/454/ConvertibleNodeSetExprImpl.java\nindex efdd9884e5b..9236447193f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/454/ConvertibleNodeSetExprImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/454/ConvertibleNodeSetExprImpl.java\n@@ -44,7 +44,7 @@ public abstract class ConvertibleNodeSetExprImpl\n     implements ConvertibleNodeSetExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv)\r\n+    public StringExpr makeStringExpr(StaticContext statEnv)\r\n \t{\r\n \t\treturn new ConvertibleStringExpr()\r\n \t\t{\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}