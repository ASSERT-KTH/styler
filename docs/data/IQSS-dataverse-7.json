{
    "project_name": "IQSS-dataverse",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "@Entity\n@Table(indexes = {@Index(columnList=\"defaultcontributorrole_id\")\n\t\t, @Index(columnList=\"defaulttemplate_id\")\n\t\t, @Index(columnList=\"alias\")\n\t\t, @Index(columnList=\"affiliation\")\n\t\t, @Index(columnList=\"dataversetype\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/7/Dataverse.java\nindex 342aaec187a..c10ee3669c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/7/Dataverse.java\n@@ -58,7 +58,7 @@ import org.hibernate.validator.constraints.NotEmpty;\n })\n @Entity\n @Table(indexes = {@Index(columnList=\"defaultcontributorrole_id\")\n-\t\t, @Index(columnList=\"defaulttemplate_id\")\n+                      , @Index(columnList=\"defaulttemplate_id\")\n \t\t, @Index(columnList=\"alias\")\n \t\t, @Index(columnList=\"affiliation\")\n \t\t, @Index(columnList=\"dataversetype\")\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/7/Dataverse.java\nindex 342aaec187a..3cf6eaae8c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/7/Dataverse.java\n@@ -38,731 +38,735 @@ import org.hibernate.validator.constraints.NotBlank;\n import org.hibernate.validator.constraints.NotEmpty;\n \n /**\n- *\n  * @author gdurand\n  * @author mbarsinai\n  */\n @NamedQueries({\n-    @NamedQuery(name = \"Dataverse.findIdStale\",query = \"SELECT d.id FROM Dataverse d WHERE d.indexTime is NULL OR d.indexTime < d.modificationTime\"),\n-    @NamedQuery(name = \"Dataverse.findIdStalePermission\",query = \"SELECT d.id FROM Dataverse d WHERE d.permissionIndexTime is NULL OR d.permissionIndexTime < d.permissionModificationTime\"),\n-    @NamedQuery(name = \"Dataverse.ownedObjectsById\", query = \"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n-    @NamedQuery(name = \"Dataverse.findAll\", query = \"SELECT d FROM Dataverse d order by d.name\"),\n-    @NamedQuery(name = \"Dataverse.findRoot\", query = \"SELECT d FROM Dataverse d where d.owner.id=null\"),\n-    @NamedQuery(name = \"Dataverse.findByAlias\", query=\"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias)=:alias\"),\n-    @NamedQuery(name = \"Dataverse.findByOwnerId\", query=\"select object(o) from Dataverse as o where o.owner.id =:ownerId order by o.name\"),\n-    @NamedQuery(name = \"Dataverse.findByCreatorId\", query=\"select object(o) from Dataverse as o where o.creator.id =:creatorId order by o.name\"),\n-    @NamedQuery(name = \"Dataverse.findByReleaseUserId\", query=\"select object(o) from Dataverse as o where o.releaseUser.id =:releaseUserId order by o.name\"),\n-    @NamedQuery(name = \"Dataverse.filterByAlias\", query=\"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias) LIKE :alias order by dv.alias\"),\n-    @NamedQuery(name = \"Dataverse.filterByAliasNameAffiliation\", query=\"SELECT dv FROM Dataverse dv WHERE (LOWER(dv.alias) LIKE :alias) OR (LOWER(dv.name) LIKE :name) OR (LOWER(dv.affiliation) LIKE :affiliation) order by dv.alias\"),\n-    @NamedQuery(name = \"Dataverse.filterByName\", query=\"SELECT dv FROM Dataverse dv WHERE LOWER(dv.name) LIKE :name  order by dv.alias\")\n+  @NamedQuery(name = \"Dataverse.findIdStale\", query = \"SELECT d.id FROM Dataverse d WHERE d.indexTime is NULL OR d.indexTime < d.modificationTime\"),\n+  @NamedQuery(name = \"Dataverse.findIdStalePermission\", query = \"SELECT d.id FROM Dataverse d WHERE d.permissionIndexTime is NULL OR d.permissionIndexTime < d.permissionModificationTime\"),\n+  @NamedQuery(name = \"Dataverse.ownedObjectsById\", query = \"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n+  @NamedQuery(name = \"Dataverse.findAll\", query = \"SELECT d FROM Dataverse d order by d.name\"),\n+  @NamedQuery(name = \"Dataverse.findRoot\", query = \"SELECT d FROM Dataverse d where d.owner.id=null\"),\n+  @NamedQuery(name = \"Dataverse.findByAlias\", query = \"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias)=:alias\"),\n+  @NamedQuery(name = \"Dataverse.findByOwnerId\", query = \"select object(o) from Dataverse as o where o.owner.id =:ownerId order by o.name\"),\n+  @NamedQuery(name = \"Dataverse.findByCreatorId\", query = \"select object(o) from Dataverse as o where o.creator.id =:creatorId order by o.name\"),\n+  @NamedQuery(name = \"Dataverse.findByReleaseUserId\", query = \"select object(o) from Dataverse as o where o.releaseUser.id =:releaseUserId order by o.name\"),\n+  @NamedQuery(name = \"Dataverse.filterByAlias\", query = \"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias) LIKE :alias order by dv.alias\"),\n+  @NamedQuery(name = \"Dataverse.filterByAliasNameAffiliation\", query = \"SELECT dv FROM Dataverse dv WHERE (LOWER(dv.alias) LIKE :alias) OR (LOWER(dv.name) LIKE :name) OR (LOWER(dv.affiliation) LIKE :affiliation) order by dv.alias\"),\n+  @NamedQuery(name = \"Dataverse.filterByName\", query = \"SELECT dv FROM Dataverse dv WHERE LOWER(dv.name) LIKE :name  order by dv.alias\")\n })\n @Entity\n-@Table(indexes = {@Index(columnList=\"defaultcontributorrole_id\")\n-\t\t, @Index(columnList=\"defaulttemplate_id\")\n-\t\t, @Index(columnList=\"alias\")\n-\t\t, @Index(columnList=\"affiliation\")\n-\t\t, @Index(columnList=\"dataversetype\")\n-\t\t, @Index(columnList=\"facetroot\")\n-\t\t, @Index(columnList=\"guestbookroot\")\n-\t\t, @Index(columnList=\"metadatablockroot\")\n-\t\t, @Index(columnList=\"templateroot\")\n-\t\t, @Index(columnList=\"permissionroot\")\n-\t\t, @Index(columnList=\"themeroot\")})\n+@Table(indexes = {@Index(columnList = \"defaultcontributorrole_id\")\n+  , @Index(columnList = \"defaulttemplate_id\")\n+  , @Index(columnList = \"alias\")\n+  , @Index(columnList = \"affiliation\")\n+  , @Index(columnList = \"dataversetype\")\n+  , @Index(columnList = \"facetroot\")\n+  , @Index(columnList = \"guestbookroot\")\n+  , @Index(columnList = \"metadatablockroot\")\n+  , @Index(columnList = \"templateroot\")\n+  , @Index(columnList = \"permissionroot\")\n+  , @Index(columnList = \"themeroot\")})\n public class Dataverse extends DvObjectContainer {\n \n-    public enum DataverseType {\n-        RESEARCHERS, RESEARCH_PROJECTS, JOURNALS, ORGANIZATIONS_INSTITUTIONS, TEACHING_COURSES, UNCATEGORIZED, LABORATORY, RESEARCH_GROUP, DEPARTMENT\n-    };\n-    \n-    private static final long serialVersionUID = 1L;\n-\n-    @NotBlank(message = \"{dataverse.name}\")\n-    @Column( nullable = false )\n-    private String name;\n-\n-    /**\n-     * @todo add @Column(nullable = false) for the database to enforce non-null\n-     */\n-    @NotBlank(message = \"{dataverse.alias}\")\n-    @Column(nullable = false, unique=true)\n-    @Size(max = 60, message = \"{dataverse.aliasLength}\")\n-    @Pattern.List({@Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]*\", message = \"{dataverse.nameIllegalCharacters}\"),\n-        @Pattern(regexp=\".*\\\\D.*\", message=\"{dataverse.aliasNotnumber}\")})\n-    private String alias;\n-\n-    @Column(name = \"description\", columnDefinition = \"TEXT\")\n-    private String description;\n-\n-    @Enumerated(EnumType.STRING)\n-    @NotNull(message = \"{dataverse.category}\")\n-    @Column( nullable = false )\n-    private DataverseType dataverseType;\n-       \n-    /**\n-     * When {@code true}, users are not granted permissions the got for parent\n-     * dataverses.\n-     */\n-    protected boolean permissionRoot;\n-\n-    \n-    public DataverseType getDataverseType() {\n-        return dataverseType;\n-    }\n-\n-    public void setDataverseType(DataverseType dataverseType) {\n-        this.dataverseType = dataverseType;\n-    }\n-\n-    public String getFriendlyCategoryName(){\n-        String key = getFriendlyCategoryKey();\n-        return BundleUtil.getStringFromBundle(key);\n-    }\n-\n-    public String getFriendlyCategoryKey(){\n-        switch (this.dataverseType) {\n-            case RESEARCHERS:\n-                return  (\"dataverse.type.selectTab.researchers\");\n-            case RESEARCH_PROJECTS:\n-                return  (\"dataverse.type.selectTab.researchProjects\" );\n-            case JOURNALS:\n-                return  (\"dataverse.type.selectTab.journals\" );\n-            case ORGANIZATIONS_INSTITUTIONS:\n-                return  (\"dataverse.type.selectTab.organizationsAndInsitutions\" );\n-            case TEACHING_COURSES:\n-                return  (\"dataverse.type.selectTab.teachingCourses\" );\n-            case LABORATORY:\n-                return  (\"dataverse.type.selectTab.laboratory\");\n-            case RESEARCH_GROUP:\n-                return  (\"dataverse.type.selectTab.researchGroup\" );\n-            case DEPARTMENT:\n-                return  (\"dataverse.type.selectTab.department\" );\n-            case UNCATEGORIZED:\n-                return (\"dataverse.type.selectTab.uncategorized\");\n-            default:\n-                return \"\";\n-        }\n-    }\n-\n-\n-    public String getIndexableCategoryName() {\n-        String key = getFriendlyCategoryKey();\n-        if (key.equals(\"dataverse.type.selectTab.uncategorized\")) {\n-            return null;\n-        } else {\n-            return BundleUtil.getStringFromDefaultBundle(key);\n-        }\n-    }\n-\n-    private String affiliation;\n-    \n-    ///private String storageDriver=null;\n-\n-\t// Note: We can't have \"Remove\" here, as there are role assignments that refer\n-    //       to this role. So, adding it would mean violating a forign key contstraint.\n-    @OneToMany(cascade = {CascadeType.MERGE},\n-            fetch = FetchType.LAZY,\n-            mappedBy = \"owner\")\n-    private Set<DataverseRole> roles;\n-    \n-    @ManyToOne\n-    @JoinColumn(nullable = true)\n-    private DataverseRole defaultContributorRole;\n-\n-    public DataverseRole getDefaultContributorRole() {\n-        return defaultContributorRole;\n-    }\n-\n-    public void setDefaultContributorRole(DataverseRole defaultContributorRole) {\n-        this.defaultContributorRole = defaultContributorRole;\n-    }\n-   \n-    private boolean metadataBlockRoot;\n-    private boolean facetRoot;\n-    // By default, themeRoot should be true, as new dataverses should start with the default theme\n-    private boolean themeRoot = true;\n-    private boolean templateRoot;    \n-\n-    \n-    @OneToOne(mappedBy = \"dataverse\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n-      private DataverseTheme dataverseTheme;\n-\n-    @OneToMany(mappedBy = \"dataverse\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n-    @OrderBy(\"displayOrder\")\n-    @NotEmpty(message=\"At least one contact is required.\")\n-    private List<DataverseContact> dataverseContacts = new ArrayList<>();\n-    \n-    @ManyToMany(cascade = {CascadeType.MERGE})\n-    private List<MetadataBlock> metadataBlocks = new ArrayList<>();\n-\n-    @OneToMany(mappedBy = \"dataverse\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n-    @OrderBy(\"displayOrder\")\n-    private List<DataverseFacet> dataverseFacets = new ArrayList<>();\n-    \n-    @ManyToMany(cascade = {CascadeType.MERGE})\n-    @JoinTable(name = \"dataverse_citationDatasetFieldTypes\",\n+  public enum DataverseType {\n+    RESEARCHERS, RESEARCH_PROJECTS, JOURNALS, ORGANIZATIONS_INSTITUTIONS, TEACHING_COURSES, UNCATEGORIZED, LABORATORY,\n+    RESEARCH_GROUP, DEPARTMENT\n+  }\n+\n+  ;\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @NotBlank(message = \"{dataverse.name}\")\n+  @Column(nullable = false)\n+  private String name;\n+\n+  /**\n+   * @todo add @Column(nullable = false) for the database to enforce non-null\n+   */\n+  @NotBlank(message = \"{dataverse.alias}\")\n+  @Column(nullable = false, unique = true)\n+  @Size(max = 60, message = \"{dataverse.aliasLength}\")\n+  @Pattern.List({@Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]*\", message = \"{dataverse.nameIllegalCharacters}\"),\n+    @Pattern(regexp = \".*\\\\D.*\", message = \"{dataverse.aliasNotnumber}\")})\n+  private String alias;\n+\n+  @Column(name = \"description\", columnDefinition = \"TEXT\")\n+  private String description;\n+\n+  @Enumerated(EnumType.STRING)\n+  @NotNull(message = \"{dataverse.category}\")\n+  @Column(nullable = false)\n+  private DataverseType dataverseType;\n+\n+  /**\n+   * When {@code true}, users are not granted permissions the got for parent\n+   * dataverses.\n+   */\n+  protected boolean permissionRoot;\n+\n+\n+  public DataverseType getDataverseType() {\n+    return dataverseType;\n+  }\n+\n+  public void setDataverseType(DataverseType dataverseType) {\n+    this.dataverseType = dataverseType;\n+  }\n+\n+  public String getFriendlyCategoryName() {\n+    String key = getFriendlyCategoryKey();\n+    return BundleUtil.getStringFromBundle(key);\n+  }\n+\n+  public String getFriendlyCategoryKey() {\n+    switch (this.dataverseType) {\n+      case RESEARCHERS:\n+        return (\"dataverse.type.selectTab.researchers\");\n+      case RESEARCH_PROJECTS:\n+        return (\"dataverse.type.selectTab.researchProjects\");\n+      case JOURNALS:\n+        return (\"dataverse.type.selectTab.journals\");\n+      case ORGANIZATIONS_INSTITUTIONS:\n+        return (\"dataverse.type.selectTab.organizationsAndInsitutions\");\n+      case TEACHING_COURSES:\n+        return (\"dataverse.type.selectTab.teachingCourses\");\n+      case LABORATORY:\n+        return (\"dataverse.type.selectTab.laboratory\");\n+      case RESEARCH_GROUP:\n+        return (\"dataverse.type.selectTab.researchGroup\");\n+      case DEPARTMENT:\n+        return (\"dataverse.type.selectTab.department\");\n+      case UNCATEGORIZED:\n+        return (\"dataverse.type.selectTab.uncategorized\");\n+      default:\n+        return \"\";\n+    }\n+  }\n+\n+\n+  public String getIndexableCategoryName() {\n+    String key = getFriendlyCategoryKey();\n+    if (key.equals(\"dataverse.type.selectTab.uncategorized\")) {\n+      return null;\n+    } else {\n+      return BundleUtil.getStringFromDefaultBundle(key);\n+    }\n+  }\n+\n+  private String affiliation;\n+\n+  ///private String storageDriver=null;\n+\n+  // Note: We can't have \"Remove\" here, as there are role assignments that refer\n+  //       to this role. So, adding it would mean violating a forign key contstraint.\n+  @OneToMany(cascade = {CascadeType.MERGE},\n+    fetch = FetchType.LAZY,\n+    mappedBy = \"owner\")\n+  private Set<DataverseRole> roles;\n+\n+  @ManyToOne\n+  @JoinColumn(nullable = true)\n+  private DataverseRole defaultContributorRole;\n+\n+  public DataverseRole getDefaultContributorRole() {\n+    return defaultContributorRole;\n+  }\n+\n+  public void setDefaultContributorRole(DataverseRole defaultContributorRole) {\n+    this.defaultContributorRole = defaultContributorRole;\n+  }\n+\n+  private boolean metadataBlockRoot;\n+  private boolean facetRoot;\n+  // By default, themeRoot should be true, as new dataverses should start with the default theme\n+  private boolean themeRoot = true;\n+  private boolean templateRoot;\n+\n+\n+  @OneToOne(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE,\n+    CascadeType.PERSIST}, orphanRemoval = true)\n+  private DataverseTheme dataverseTheme;\n+\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE,\n+    CascadeType.PERSIST}, orphanRemoval = true)\n+  @OrderBy(\"displayOrder\")\n+  @NotEmpty(message = \"At least one contact is required.\")\n+  private List<DataverseContact> dataverseContacts = new ArrayList<>();\n+\n+  @ManyToMany(cascade = {CascadeType.MERGE})\n+  private List<MetadataBlock> metadataBlocks = new ArrayList<>();\n+\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE,\n+    CascadeType.PERSIST}, orphanRemoval = true)\n+  @OrderBy(\"displayOrder\")\n+  private List<DataverseFacet> dataverseFacets = new ArrayList<>();\n+\n+  @ManyToMany(cascade = {CascadeType.MERGE})\n+  @JoinTable(name = \"dataverse_citationDatasetFieldTypes\",\n     joinColumns = @JoinColumn(name = \"dataverse_id\"),\n     inverseJoinColumns = @JoinColumn(name = \"citationdatasetfieldtype_id\"))\n-    private List<DatasetFieldType> citationDatasetFieldTypes = new ArrayList<>();\n-    \n-    @ManyToMany\n-    @JoinTable(name = \"dataversesubjects\",\n+  private List<DatasetFieldType> citationDatasetFieldTypes = new ArrayList<>();\n+\n+  @ManyToMany\n+  @JoinTable(name = \"dataversesubjects\",\n     joinColumns = @JoinColumn(name = \"dataverse_id\"),\n     inverseJoinColumns = @JoinColumn(name = \"controlledvocabularyvalue_id\"))\n-    private Set<ControlledVocabularyValue> dataverseSubjects;\n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private List<DataverseFeaturedDataverse> dataverseFeaturedDataverses;\n+  private Set<ControlledVocabularyValue> dataverseSubjects;\n \n-    public List<DataverseFeaturedDataverse> getDataverseFeaturedDataverses() {\n-        return dataverseFeaturedDataverses;\n-    }\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private List<DataverseFeaturedDataverse> dataverseFeaturedDataverses;\n \n-    public void setDataverseFeaturedDataverses(List<DataverseFeaturedDataverse> dataverseFeaturedDataverses) {\n-        this.dataverseFeaturedDataverses = dataverseFeaturedDataverses;\n-    }\n-    \n-    @OneToMany(mappedBy=\"featuredDataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private List<DataverseFeaturedDataverse> dataverseFeaturingDataverses;\n+  public List<DataverseFeaturedDataverse> getDataverseFeaturedDataverses() {\n+    return dataverseFeaturedDataverses;\n+  }\n \n-    public List<DataverseFeaturedDataverse> getDataverseFeaturingDataverses() {\n-        return dataverseFeaturingDataverses;\n-    }\n+  public void setDataverseFeaturedDataverses(List<DataverseFeaturedDataverse> dataverseFeaturedDataverses) {\n+    this.dataverseFeaturedDataverses = dataverseFeaturedDataverses;\n+  }\n \n-    public void setDataverseFeaturingDataverses(List<DataverseFeaturedDataverse> dataverseFeaturingDataverses) {\n-        this.dataverseFeaturingDataverses = dataverseFeaturingDataverses;\n-    }\n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private List<DataverseLinkingDataverse> dataverseLinkingDataverses;\n+  @OneToMany(mappedBy = \"featuredDataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private List<DataverseFeaturedDataverse> dataverseFeaturingDataverses;\n \n-    public List<DataverseLinkingDataverse> getDataverseLinkingDataverses() {\n-        return dataverseLinkingDataverses;\n-    }\n+  public List<DataverseFeaturedDataverse> getDataverseFeaturingDataverses() {\n+    return dataverseFeaturingDataverses;\n+  }\n \n-    public void setDataverseLinkingDataverses(List<DataverseLinkingDataverse> dataverseLinkingDataverses) {\n-        this.dataverseLinkingDataverses = dataverseLinkingDataverses;\n-    }\n-       \n-    @OneToMany(mappedBy=\"linkingDataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private List<DataverseLinkingDataverse> dataverseLinkedDataverses;\n+  public void setDataverseFeaturingDataverses(List<DataverseFeaturedDataverse> dataverseFeaturingDataverses) {\n+    this.dataverseFeaturingDataverses = dataverseFeaturingDataverses;\n+  }\n \n-    public List<DataverseLinkingDataverse> getDataverseLinkedDataverses() {\n-        return dataverseLinkedDataverses;\n-    }\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private List<DataverseLinkingDataverse> dataverseLinkingDataverses;\n \n-    public void setDataverseLinkedDataverses(List<DataverseLinkingDataverse> dataverseLinkedDataverses) {\n-        this.dataverseLinkedDataverses = dataverseLinkedDataverses;\n-    }\n-    \n-    @OneToMany(mappedBy=\"linkingDataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private List<DatasetLinkingDataverse> datasetLinkingDataverses;\n+  public List<DataverseLinkingDataverse> getDataverseLinkingDataverses() {\n+    return dataverseLinkingDataverses;\n+  }\n \n-    public List<DatasetLinkingDataverse> getDatasetLinkingDataverses() {\n-        return datasetLinkingDataverses;\n-    }\n+  public void setDataverseLinkingDataverses(List<DataverseLinkingDataverse> dataverseLinkingDataverses) {\n+    this.dataverseLinkingDataverses = dataverseLinkingDataverses;\n+  }\n \n-    public void setDatasetLinkingDataverses(List<DatasetLinkingDataverse> datasetLinkingDataverses) {\n-        this.datasetLinkingDataverses = datasetLinkingDataverses;\n-    }\n-        \n-    public Set<ControlledVocabularyValue> getDataverseSubjects() {\n-        return dataverseSubjects;\n-    }\n+  @OneToMany(mappedBy = \"linkingDataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private List<DataverseLinkingDataverse> dataverseLinkedDataverses;\n \n-    public void setDataverseSubjects(Set<ControlledVocabularyValue> dataverseSubjects) {\n-        this.dataverseSubjects = dataverseSubjects;\n-    }\n+  public List<DataverseLinkingDataverse> getDataverseLinkedDataverses() {\n+    return dataverseLinkedDataverses;\n+  }\n \n-    \n-    @OneToMany(mappedBy = \"dataverse\")\n-    private List<DataverseFieldTypeInputLevel> dataverseFieldTypeInputLevels = new ArrayList<>();\n-    \n-    @ManyToOne\n-    @JoinColumn(nullable = true)\n-    private Template defaultTemplate;  \n-    \n-    @OneToMany(mappedBy = \"definitionPoint\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private List<SavedSearch> savedSearches;\n-\n-    public List<SavedSearch> getSavedSearches() {\n-        return savedSearches;\n-    }\n+  public void setDataverseLinkedDataverses(List<DataverseLinkingDataverse> dataverseLinkedDataverses) {\n+    this.dataverseLinkedDataverses = dataverseLinkedDataverses;\n+  }\n \n-    public void setSavedSearches(List<SavedSearch> savedSearches) {\n-        this.savedSearches = savedSearches;\n-    }\n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n-    private List<Template> templates; \n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n-    private List<Guestbook> guestbooks;\n-        \n-    public List<Guestbook> getGuestbooks() {\n-        return guestbooks;\n-    }\n+  @OneToMany(mappedBy = \"linkingDataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private List<DatasetLinkingDataverse> datasetLinkingDataverses;\n \n-    public void setGuestbooks(List<Guestbook> guestbooks) {\n-        this.guestbooks = guestbooks;\n-    } \n-    \n-    \n-    @OneToMany (mappedBy=\"dataverse\", cascade={CascadeType.MERGE, CascadeType.REMOVE})\n-    private List<HarvestingClient> harvestingClientConfigs;\n+  public List<DatasetLinkingDataverse> getDatasetLinkingDataverses() {\n+    return datasetLinkingDataverses;\n+  }\n \n-    public List<HarvestingClient> getHarvestingClientConfigs() {\n-        return this.harvestingClientConfigs;\n-    }\n+  public void setDatasetLinkingDataverses(List<DatasetLinkingDataverse> datasetLinkingDataverses) {\n+    this.datasetLinkingDataverses = datasetLinkingDataverses;\n+  }\n \n-    public void setHarvestingClientConfigs(List<HarvestingClient> harvestingClientConfigs) {\n-        this.harvestingClientConfigs = harvestingClientConfigs;\n-    }\n-    /*\n-    public boolean isHarvested() {\n-        return harvestingClient != null; \n-    }\n-    */\n-    \n-    \n-    public List<Guestbook> getParentGuestbooks() {\n-        List<Guestbook> retList = new ArrayList<>();\n-        Dataverse testDV = this;\n-        while (testDV.getOwner() != null){   \n-           retList.addAll(testDV.getOwner().getGuestbooks());          \n-           if(testDV.getOwner().guestbookRoot){               \n-               break;\n-           }           \n-           testDV = testDV.getOwner();\n-        }\n-            return  retList;\n-    }\n-    \n-    public List<Guestbook> getAvailableGuestbooks() {\n-        //get all guestbooks\n-        List<Guestbook> retList = new ArrayList<>();\n-        Dataverse testDV = this;\n-        List<Guestbook> allGbs = new ArrayList<>();\n-        if (!this.guestbookRoot){\n-                    while (testDV.getOwner() != null){   \n-          \n-                allGbs.addAll(testDV.getOwner().getGuestbooks());\n-                if (testDV.getOwner().isGuestbookRoot()) {\n-                    break;\n-                }\n-                testDV = testDV.getOwner();\n-            }\n-        }\n-\n-        allGbs.addAll(this.getGuestbooks());\n-        //then only display them if they are enabled\n-        for (Guestbook gbt : allGbs) {\n-            if (gbt.isEnabled()) {\n-                retList.add(gbt);\n-            }\n-        }\n-            return  retList;\n-        \n-    }\n-    \n-    private boolean guestbookRoot;\n-    \n-    public boolean isGuestbookRoot() {\n-        return guestbookRoot;\n-    }\n+  public Set<ControlledVocabularyValue> getDataverseSubjects() {\n+    return dataverseSubjects;\n+  }\n \n-    public void setGuestbookRoot(boolean guestbookRoot) {\n-        this.guestbookRoot = guestbookRoot;\n-    } \n-    \n-    \n-    public void setDataverseFieldTypeInputLevels(List<DataverseFieldTypeInputLevel> dataverseFieldTypeInputLevels) {\n-        this.dataverseFieldTypeInputLevels = dataverseFieldTypeInputLevels;\n-    }\n+  public void setDataverseSubjects(Set<ControlledVocabularyValue> dataverseSubjects) {\n+    this.dataverseSubjects = dataverseSubjects;\n+  }\n \n-    public List<DataverseFieldTypeInputLevel> getDataverseFieldTypeInputLevels() {\n-        return dataverseFieldTypeInputLevels;\n-    }\n \n+  @OneToMany(mappedBy = \"dataverse\")\n+  private List<DataverseFieldTypeInputLevel> dataverseFieldTypeInputLevels = new ArrayList<>();\n \n-    public Template getDefaultTemplate() {\n-        return defaultTemplate;\n-    }\n+  @ManyToOne\n+  @JoinColumn(nullable = true)\n+  private Template defaultTemplate;\n \n-    public void setDefaultTemplate(Template defaultTemplate) {\n-        this.defaultTemplate = defaultTemplate;\n-    }\n+  @OneToMany(mappedBy = \"definitionPoint\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private List<SavedSearch> savedSearches;\n \n-    public List<Template> getTemplates() {\n-        return templates;\n-    }\n+  public List<SavedSearch> getSavedSearches() {\n+    return savedSearches;\n+  }\n \n-    public void setTemplates(List<Template> templates) {\n-        this.templates = templates;\n-    }\n+  public void setSavedSearches(List<SavedSearch> savedSearches) {\n+    this.savedSearches = savedSearches;\n+  }\n \n-    public List<Template> getParentTemplates() {\n-        List<Template> retList = new ArrayList<>();\n-        Dataverse testDV = this;\n-        while (testDV.getOwner() != null){   \n-            \n-           if (!testDV.getMetadataBlocks().equals(testDV.getOwner().getMetadataBlocks())){\n-               break;\n-           }           \n-           retList.addAll(testDV.getOwner().getTemplates());\n-           \n-           if(testDV.getOwner().templateRoot){               \n-               break;\n-           }           \n-           testDV = testDV.getOwner();\n-        }\n-            return  retList;\n-    }\n-    \n-    public boolean isThemeRoot() {\n-        return themeRoot;\n-    }\n-    \n-    public boolean getThemeRoot() {\n-        return themeRoot;\n-    }\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n+  private List<Template> templates;\n \n-    public void setThemeRoot(boolean  themeRoot) {\n-        this.themeRoot = themeRoot;\n-    }\n-    \n-    public boolean isTemplateRoot() {\n-        return templateRoot;\n-    }\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n+  private List<Guestbook> guestbooks;\n \n-    public void setTemplateRoot(boolean templateRoot) {\n-        this.templateRoot = templateRoot;\n-    }\n+  public List<Guestbook> getGuestbooks() {\n+    return guestbooks;\n+  }\n \n-   \n+  public void setGuestbooks(List<Guestbook> guestbooks) {\n+    this.guestbooks = guestbooks;\n+  }\n \n \n-    public List<MetadataBlock> getMetadataBlocks() {\n-        return getMetadataBlocks(false);\n-    }\n+  @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n+  private List<HarvestingClient> harvestingClientConfigs;\n \n-    public List<MetadataBlock> getMetadataBlocks(boolean returnActualDB) {\n-        if (returnActualDB || metadataBlockRoot || getOwner() == null) {\n-            return metadataBlocks;\n-        } else {\n-            return getOwner().getMetadataBlocks();\n-        }\n-    }\n-    \n-    public Long getMetadataRootId(){\n-        if(metadataBlockRoot || getOwner() == null){\n-            return this.getId();\n-        } else { \n-            return getOwner().getMetadataRootId();\n-        }\n-    }\n+  public List<HarvestingClient> getHarvestingClientConfigs() {\n+    return this.harvestingClientConfigs;\n+  }\n \n-    \n-    public DataverseTheme getDataverseTheme() {\n-        return getDataverseTheme(false);\n-    }\n-\n-    public DataverseTheme getDataverseTheme(boolean returnActualDB) {\n-        if (returnActualDB || themeRoot || getOwner() == null) {\n-            return dataverseTheme;\n-        } else {\n-            return getOwner().getDataverseTheme();\n-        }\n-    }\n-    \n-    public String getGuestbookRootDataverseName() {\n-        Dataverse testDV = this;\n-        String retName = \"Parent\";\n-        while (testDV.getOwner() != null) {\n-            retName = testDV.getOwner().getDisplayName();\n-            if (testDV.getOwner().guestbookRoot) {\n-                break;\n-            }\n-            testDV = testDV.getOwner();\n-        }\n-        return retName;\n-    }\n-\n-    public String getTemplateRootDataverseName() {\n-        Dataverse testDV = this;\n-        String retName = \"Parent\";\n-        while (testDV.getOwner() != null) {\n-            retName = testDV.getOwner().getDisplayName();\n-            if (testDV.getOwner().templateRoot) {\n-                break;\n-            }\n-            testDV = testDV.getOwner();\n-        }\n-        return retName;\n-    }\n-\n-    public String getThemeRootDataverseName() {\n-        Dataverse testDV = this;\n-        String retName = \"Parent\";\n-        while (testDV.getOwner() != null) {\n-            retName = testDV.getOwner().getDisplayName();\n-            if (testDV.getOwner().themeRoot) {\n-                break;\n-            }\n-            testDV = testDV.getOwner();\n-        }\n-        return retName;\n-    }\n-\n-    public String getMetadataRootDataverseName() {\n-        Dataverse testDV = this;\n-        String retName = \"Parent\";\n-        while (testDV.getOwner() != null) {\n-            retName = testDV.getOwner().getDisplayName();\n-            if (testDV.getOwner().metadataBlockRoot) {\n-                break;\n-            }\n-            testDV = testDV.getOwner();\n-        }\n-        return retName;\n-    }\n-    \n-    public String getFacetRootDataverseName() {\n-        Dataverse testDV = this;\n-        String retName = \"Parent\";\n-        while (testDV.getOwner() != null) {\n-            retName = testDV.getOwner().getDisplayName();\n-            if (testDV.getOwner().facetRoot) {\n-                break;\n-            }\n-            testDV = testDV.getOwner();\n-        }\n-        return retName;\n-    }\n-        \n-    \n-    public String getLogoOwnerId() {\n-        \n-        if (themeRoot || getOwner()==null) {\n-            return this.getId().toString();\n-        } else {\n-            return getOwner().getId().toString();\n-        }\n-    } \n-    \n-    public void setDataverseTheme(DataverseTheme dataverseTheme) {\n-        this.dataverseTheme=dataverseTheme;\n-    }\n-\n-    public void setMetadataBlocks(List<MetadataBlock> metadataBlocks) {\n-        this.metadataBlocks = metadataBlocks;\n-    }\n-\n-    public List<DatasetFieldType> getCitationDatasetFieldTypes() {\n-        return citationDatasetFieldTypes;\n-    }\n-\n-    public void setCitationDatasetFieldTypes(List<DatasetFieldType> citationDatasetFieldTypes) {\n-        this.citationDatasetFieldTypes = citationDatasetFieldTypes;\n-    }\n-    \n-    \n-\n-    public List<DataverseFacet> getDataverseFacets() {\n-        return getDataverseFacets(false);\n+  public void setHarvestingClientConfigs(List<HarvestingClient> harvestingClientConfigs) {\n+    this.harvestingClientConfigs = harvestingClientConfigs;\n+  }\n+    /*\n+    public boolean isHarvested() {\n+        return harvestingClient != null; \n     }\n+    */\n \n-    public List<DataverseFacet> getDataverseFacets(boolean returnActualDB) {\n-        if (returnActualDB || facetRoot || getOwner() == null) {\n-            return dataverseFacets;\n-        } else {\n-            return getOwner().getDataverseFacets();\n-        }\n-    }\n-     \n-    public Long getFacetRootId(){\n-        if(facetRoot || getOwner() == null){\n-            return this.getId();\n-        } else { \n-            return getOwner().getFacetRootId();\n-        }        \n-    }\n \n-    public void setDataverseFacets(List<DataverseFacet> dataverseFacets) {\n-        this.dataverseFacets = dataverseFacets;\n-    }\n-    \n-    public List<DataverseContact> getDataverseContacts() {\n-        return dataverseContacts;\n-    }\n-    \n-    /**\n-     * Get the email addresses of the dataverse contacts as a comma-separated\n-     * concatenation.\n-     * @return a comma-separated concatenation of email addresses, or the empty\n-     *  string if there are no contacts.\n-     * @author bencomp\n-     */\n-    public String getContactEmails() {\n-        if (dataverseContacts != null && !dataverseContacts.isEmpty()) {\n-            StringBuilder buf = new StringBuilder();\n-            Iterator<DataverseContact> it = dataverseContacts.iterator();\n-            while (it.hasNext()) {\n-                DataverseContact con = it.next();\n-                buf.append(con.getContactEmail());\n-                if (it.hasNext()) {\n-                    buf.append(\",\");\n-                }\n-            }\n-            return buf.toString();\n-        } else {\n-            return \"\";\n+  public List<Guestbook> getParentGuestbooks() {\n+    List<Guestbook> retList = new ArrayList<>();\n+    Dataverse testDV = this;\n+    while (testDV.getOwner() != null) {\n+      retList.addAll(testDV.getOwner().getGuestbooks());\n+      if (testDV.getOwner().guestbookRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n+    }\n+    return retList;\n+  }\n+\n+  public List<Guestbook> getAvailableGuestbooks() {\n+    //get all guestbooks\n+    List<Guestbook> retList = new ArrayList<>();\n+    Dataverse testDV = this;\n+    List<Guestbook> allGbs = new ArrayList<>();\n+    if (!this.guestbookRoot) {\n+      while (testDV.getOwner() != null) {\n+\n+        allGbs.addAll(testDV.getOwner().getGuestbooks());\n+        if (testDV.getOwner().isGuestbookRoot()) {\n+          break;\n         }\n+        testDV = testDV.getOwner();\n+      }\n     }\n \n-    public void setDataverseContacts(List<DataverseContact> dataverseContacts) {\n-        this.dataverseContacts = dataverseContacts;\n-    }\n-    \n-    public void addDataverseContact(int index) {\n-        dataverseContacts.add(index, new DataverseContact(this));\n-    }\n-\n-    public void removeDataverseContact(int index) {\n-        dataverseContacts.remove(index);\n+    allGbs.addAll(this.getGuestbooks());\n+    //then only display them if they are enabled\n+    for (Guestbook gbt : allGbs) {\n+      if (gbt.isEnabled()) {\n+        retList.add(gbt);\n+      }\n     }\n+    return retList;\n \n-    public String getName() {\n-        return name;\n-    }\n+  }\n \n-    public void setName(String name) {\n-        this.name = name;\n-    }\n+  private boolean guestbookRoot;\n \n-    public String getAlias() {\n-        return alias;\n-    }\n+  public boolean isGuestbookRoot() {\n+    return guestbookRoot;\n+  }\n \n-    public void setAlias(String alias) {\n-        this.alias = alias;\n-    }\n+  public void setGuestbookRoot(boolean guestbookRoot) {\n+    this.guestbookRoot = guestbookRoot;\n+  }\n \n-    public String getDescription() {\n-        return description;\n-    }\n \n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n+  public void setDataverseFieldTypeInputLevels(List<DataverseFieldTypeInputLevel> dataverseFieldTypeInputLevels) {\n+    this.dataverseFieldTypeInputLevels = dataverseFieldTypeInputLevels;\n+  }\n \n-    public String getAffiliation() {\n-        return affiliation;\n-    }\n+  public List<DataverseFieldTypeInputLevel> getDataverseFieldTypeInputLevels() {\n+    return dataverseFieldTypeInputLevels;\n+  }\n \n-    public void setAffiliation(String affiliation) {\n-        this.affiliation = affiliation;\n-    }\n \n-    public boolean isMetadataBlockRoot() {\n-        return metadataBlockRoot;\n-    }\n+  public Template getDefaultTemplate() {\n+    return defaultTemplate;\n+  }\n \n-    public void setMetadataBlockRoot(boolean metadataBlockRoot) {\n-        this.metadataBlockRoot = metadataBlockRoot;\n-    }\n+  public void setDefaultTemplate(Template defaultTemplate) {\n+    this.defaultTemplate = defaultTemplate;\n+  }\n \n-    public boolean isFacetRoot() {\n-        return facetRoot;\n-    }\n+  public List<Template> getTemplates() {\n+    return templates;\n+  }\n \n-    public void setFacetRoot(boolean facetRoot) {\n-        this.facetRoot = facetRoot;\n-    }\n+  public void setTemplates(List<Template> templates) {\n+    this.templates = templates;\n+  }\n \n+  public List<Template> getParentTemplates() {\n+    List<Template> retList = new ArrayList<>();\n+    Dataverse testDV = this;\n+    while (testDV.getOwner() != null) {\n \n-    public void addRole(DataverseRole role) {\n-        role.setOwner(this);\n-        if ( roles == null ) {\n-            roles = new HashSet<>();\n-        }\n-        roles.add(role);\n-    }\n-    \n-    /**\n-     * Note: to add a role, use {@link #addRole(edu.harvard.iq.dataverse.authorization.DataverseRole)},\n-     * do not call this method and try to add directly to the list. \n-     * @return the roles defined in this Dataverse.\n-     */\n-    public Set<DataverseRole> getRoles() {\n-        if ( roles == null ) {\n-            roles = new HashSet<>();\n-        }\n-        return roles;\n-    }\n-    \n-    public List<Dataverse> getOwners() {\n-        List<Dataverse> owners = new ArrayList<>();\n-        if (getOwner() != null) {\n-            owners.addAll(getOwner().getOwners());\n-            owners.add(getOwner());\n-        }\n-        return owners;\n-    }\n+      if (!testDV.getMetadataBlocks().equals(testDV.getOwner().getMetadataBlocks())) {\n+        break;\n+      }\n+      retList.addAll(testDV.getOwner().getTemplates());\n \n-    @Override\n-    public boolean equals(Object object) {\n-        // TODO: Warning - this method won't work in the case the id fields are not set\n-        if (!(object instanceof Dataverse)) {\n-            return false;\n-        }\n-        Dataverse other = (Dataverse) object;\n-        return Objects.equals(getId(), other.getId());\n+      if (testDV.getOwner().templateRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n     }\n+    return retList;\n+  }\n+\n+  public boolean isThemeRoot() {\n+    return themeRoot;\n+  }\n+\n+  public boolean getThemeRoot() {\n+    return themeRoot;\n+  }\n+\n+  public void setThemeRoot(boolean themeRoot) {\n+    this.themeRoot = themeRoot;\n+  }\n+\n+  public boolean isTemplateRoot() {\n+    return templateRoot;\n+  }\n+\n+  public void setTemplateRoot(boolean templateRoot) {\n+    this.templateRoot = templateRoot;\n+  }\n+\n+\n+  public List<MetadataBlock> getMetadataBlocks() {\n+    return getMetadataBlocks(false);\n+  }\n+\n+  public List<MetadataBlock> getMetadataBlocks(boolean returnActualDB) {\n+    if (returnActualDB || metadataBlockRoot || getOwner() == null) {\n+      return metadataBlocks;\n+    } else {\n+      return getOwner().getMetadataBlocks();\n+    }\n+  }\n \n-    @Override\n-    protected String toStringExtras() {\n-        return \"name:\" + getName();\n-    }\n+  public Long getMetadataRootId() {\n+    if (metadataBlockRoot || getOwner() == null) {\n+      return this.getId();\n+    } else {\n+      return getOwner().getMetadataRootId();\n+    }\n+  }\n \n-    @Override\n-    public <T> T accept(Visitor<T> v) {\n-        return v.visit(this);\n-    }\n \n-    /**\n-     * @todo implement in https://github.com/IQSS/dataverse/issues/551\n-     */\n-    public String getDepositTermsOfUse() {\n-        return \"Dataverse Deposit Terms of Use will be implemented in https://github.com/IQSS/dataverse/issues/551\";\n-    }\n-    \n-    @Override\n-    public String getDisplayName() {\n-        return getName();\n-    }\n-    \n-    @Override\n-    public String getCurrentName() {\n-        return getName();\n-    }\n-    \n-    @Override\n-    public boolean isPermissionRoot() {\n-        return permissionRoot;\n-    }\n+  public DataverseTheme getDataverseTheme() {\n+    return getDataverseTheme(false);\n+  }\n \n-    public void setPermissionRoot(boolean permissionRoot) {\n-        this.permissionRoot = permissionRoot;\n-    }\n-      \n-    @Override\n-    public boolean isAncestorOf( DvObject other ) {\n-        while ( other != null ) {\n-            if ( equals(other) ) {\n-                return true;\n-            }\n-            other = other.getOwner();\n+  public DataverseTheme getDataverseTheme(boolean returnActualDB) {\n+    if (returnActualDB || themeRoot || getOwner() == null) {\n+      return dataverseTheme;\n+    } else {\n+      return getOwner().getDataverseTheme();\n+    }\n+  }\n+\n+  public String getGuestbookRootDataverseName() {\n+    Dataverse testDV = this;\n+    String retName = \"Parent\";\n+    while (testDV.getOwner() != null) {\n+      retName = testDV.getOwner().getDisplayName();\n+      if (testDV.getOwner().guestbookRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n+    }\n+    return retName;\n+  }\n+\n+  public String getTemplateRootDataverseName() {\n+    Dataverse testDV = this;\n+    String retName = \"Parent\";\n+    while (testDV.getOwner() != null) {\n+      retName = testDV.getOwner().getDisplayName();\n+      if (testDV.getOwner().templateRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n+    }\n+    return retName;\n+  }\n+\n+  public String getThemeRootDataverseName() {\n+    Dataverse testDV = this;\n+    String retName = \"Parent\";\n+    while (testDV.getOwner() != null) {\n+      retName = testDV.getOwner().getDisplayName();\n+      if (testDV.getOwner().themeRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n+    }\n+    return retName;\n+  }\n+\n+  public String getMetadataRootDataverseName() {\n+    Dataverse testDV = this;\n+    String retName = \"Parent\";\n+    while (testDV.getOwner() != null) {\n+      retName = testDV.getOwner().getDisplayName();\n+      if (testDV.getOwner().metadataBlockRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n+    }\n+    return retName;\n+  }\n+\n+  public String getFacetRootDataverseName() {\n+    Dataverse testDV = this;\n+    String retName = \"Parent\";\n+    while (testDV.getOwner() != null) {\n+      retName = testDV.getOwner().getDisplayName();\n+      if (testDV.getOwner().facetRoot) {\n+        break;\n+      }\n+      testDV = testDV.getOwner();\n+    }\n+    return retName;\n+  }\n+\n+\n+  public String getLogoOwnerId() {\n+\n+    if (themeRoot || getOwner() == null) {\n+      return this.getId().toString();\n+    } else {\n+      return getOwner().getId().toString();\n+    }\n+  }\n+\n+  public void setDataverseTheme(DataverseTheme dataverseTheme) {\n+    this.dataverseTheme = dataverseTheme;\n+  }\n+\n+  public void setMetadataBlocks(List<MetadataBlock> metadataBlocks) {\n+    this.metadataBlocks = metadataBlocks;\n+  }\n+\n+  public List<DatasetFieldType> getCitationDatasetFieldTypes() {\n+    return citationDatasetFieldTypes;\n+  }\n+\n+  public void setCitationDatasetFieldTypes(List<DatasetFieldType> citationDatasetFieldTypes) {\n+    this.citationDatasetFieldTypes = citationDatasetFieldTypes;\n+  }\n+\n+\n+  public List<DataverseFacet> getDataverseFacets() {\n+    return getDataverseFacets(false);\n+  }\n+\n+  public List<DataverseFacet> getDataverseFacets(boolean returnActualDB) {\n+    if (returnActualDB || facetRoot || getOwner() == null) {\n+      return dataverseFacets;\n+    } else {\n+      return getOwner().getDataverseFacets();\n+    }\n+  }\n+\n+  public Long getFacetRootId() {\n+    if (facetRoot || getOwner() == null) {\n+      return this.getId();\n+    } else {\n+      return getOwner().getFacetRootId();\n+    }\n+  }\n+\n+  public void setDataverseFacets(List<DataverseFacet> dataverseFacets) {\n+    this.dataverseFacets = dataverseFacets;\n+  }\n+\n+  public List<DataverseContact> getDataverseContacts() {\n+    return dataverseContacts;\n+  }\n+\n+  /**\n+   * Get the email addresses of the dataverse contacts as a comma-separated\n+   * concatenation.\n+   *\n+   * @return a comma-separated concatenation of email addresses, or the empty\n+   * string if there are no contacts.\n+   * @author bencomp\n+   */\n+  public String getContactEmails() {\n+    if (dataverseContacts != null && !dataverseContacts.isEmpty()) {\n+      StringBuilder buf = new StringBuilder();\n+      Iterator<DataverseContact> it = dataverseContacts.iterator();\n+      while (it.hasNext()) {\n+        DataverseContact con = it.next();\n+        buf.append(con.getContactEmail());\n+        if (it.hasNext()) {\n+          buf.append(\",\");\n         }\n-        return false;\n-    }\n+      }\n+      return buf.toString();\n+    } else {\n+      return \"\";\n+    }\n+  }\n+\n+  public void setDataverseContacts(List<DataverseContact> dataverseContacts) {\n+    this.dataverseContacts = dataverseContacts;\n+  }\n+\n+  public void addDataverseContact(int index) {\n+    dataverseContacts.add(index, new DataverseContact(this));\n+  }\n+\n+  public void removeDataverseContact(int index) {\n+    dataverseContacts.remove(index);\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+  public String getAlias() {\n+    return alias;\n+  }\n+\n+  public void setAlias(String alias) {\n+    this.alias = alias;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public void setDescription(String description) {\n+    this.description = description;\n+  }\n+\n+  public String getAffiliation() {\n+    return affiliation;\n+  }\n+\n+  public void setAffiliation(String affiliation) {\n+    this.affiliation = affiliation;\n+  }\n+\n+  public boolean isMetadataBlockRoot() {\n+    return metadataBlockRoot;\n+  }\n+\n+  public void setMetadataBlockRoot(boolean metadataBlockRoot) {\n+    this.metadataBlockRoot = metadataBlockRoot;\n+  }\n+\n+  public boolean isFacetRoot() {\n+    return facetRoot;\n+  }\n+\n+  public void setFacetRoot(boolean facetRoot) {\n+    this.facetRoot = facetRoot;\n+  }\n+\n+\n+  public void addRole(DataverseRole role) {\n+    role.setOwner(this);\n+    if (roles == null) {\n+      roles = new HashSet<>();\n+    }\n+    roles.add(role);\n+  }\n+\n+  /**\n+   * Note: to add a role, use {@link #addRole(edu.harvard.iq.dataverse.authorization.DataverseRole)},\n+   * do not call this method and try to add directly to the list.\n+   *\n+   * @return the roles defined in this Dataverse.\n+   */\n+  public Set<DataverseRole> getRoles() {\n+    if (roles == null) {\n+      roles = new HashSet<>();\n+    }\n+    return roles;\n+  }\n+\n+  public List<Dataverse> getOwners() {\n+    List<Dataverse> owners = new ArrayList<>();\n+    if (getOwner() != null) {\n+      owners.addAll(getOwner().getOwners());\n+      owners.add(getOwner());\n+    }\n+    return owners;\n+  }\n+\n+  @Override\n+  public boolean equals(Object object) {\n+    // TODO: Warning - this method won't work in the case the id fields are not set\n+    if (!(object instanceof Dataverse)) {\n+      return false;\n+    }\n+    Dataverse other = (Dataverse) object;\n+    return Objects.equals(getId(), other.getId());\n+  }\n+\n+  @Override\n+  protected String toStringExtras() {\n+    return \"name:\" + getName();\n+  }\n+\n+  @Override\n+  public <T> T accept(Visitor<T> v) {\n+    return v.visit(this);\n+  }\n+\n+  /**\n+   * @todo implement in https://github.com/IQSS/dataverse/issues/551\n+   */\n+  public String getDepositTermsOfUse() {\n+    return \"Dataverse Deposit Terms of Use will be implemented in https://github.com/IQSS/dataverse/issues/551\";\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n+    return getName();\n+  }\n+\n+  @Override\n+  public String getCurrentName() {\n+    return getName();\n+  }\n+\n+  @Override\n+  public boolean isPermissionRoot() {\n+    return permissionRoot;\n+  }\n+\n+  public void setPermissionRoot(boolean permissionRoot) {\n+    this.permissionRoot = permissionRoot;\n+  }\n+\n+  @Override\n+  public boolean isAncestorOf(DvObject other) {\n+    while (other != null) {\n+      if (equals(other)) {\n+        return true;\n+      }\n+      other = other.getOwner();\n+    }\n+    return false;\n+  }\n }\n",
            "diff_size": 998
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/7/Dataverse.java\nindex 342aaec187a..1fd1c9d7625 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/7/Dataverse.java\n@@ -32,7 +32,6 @@ import javax.persistence.Transient;\n import javax.validation.constraints.NotNull;\n import javax.validation.constraints.Pattern;\n import javax.validation.constraints.Size;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.hibernate.validator.constraints.NotBlank;\n import org.hibernate.validator.constraints.NotEmpty;\n@@ -42,52 +41,66 @@ import org.hibernate.validator.constraints.NotEmpty;\n  * @author gdurand\n  * @author mbarsinai\n  */\n+\n+\n @NamedQueries({\n-    @NamedQuery(name = \"Dataverse.findIdStale\",query = \"SELECT d.id FROM Dataverse d WHERE d.indexTime is NULL OR d.indexTime < d.modificationTime\"),\n-    @NamedQuery(name = \"Dataverse.findIdStalePermission\",query = \"SELECT d.id FROM Dataverse d WHERE d.permissionIndexTime is NULL OR d.permissionIndexTime < d.permissionModificationTime\"),\n+    @NamedQuery(name = \"Dataverse.findIdStale\",\n+        query = \"SELECT d.id FROM Dataverse d WHERE d.indexTime is NULL OR d.indexTime < d.modificationTime\"),\n+    @NamedQuery(name = \"Dataverse.findIdStalePermission\",\n+        query = \"SELECT d.id FROM Dataverse d WHERE d.permissionIndexTime is NULL OR d.permissionIndexTime < d.permissionModificationTime\"),\n     @NamedQuery(name = \"Dataverse.ownedObjectsById\", query = \"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n     @NamedQuery(name = \"Dataverse.findAll\", query = \"SELECT d FROM Dataverse d order by d.name\"),\n     @NamedQuery(name = \"Dataverse.findRoot\", query = \"SELECT d FROM Dataverse d where d.owner.id=null\"),\n-    @NamedQuery(name = \"Dataverse.findByAlias\", query=\"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias)=:alias\"),\n-    @NamedQuery(name = \"Dataverse.findByOwnerId\", query=\"select object(o) from Dataverse as o where o.owner.id =:ownerId order by o.name\"),\n-    @NamedQuery(name = \"Dataverse.findByCreatorId\", query=\"select object(o) from Dataverse as o where o.creator.id =:creatorId order by o.name\"),\n-    @NamedQuery(name = \"Dataverse.findByReleaseUserId\", query=\"select object(o) from Dataverse as o where o.releaseUser.id =:releaseUserId order by o.name\"),\n-    @NamedQuery(name = \"Dataverse.filterByAlias\", query=\"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias) LIKE :alias order by dv.alias\"),\n-    @NamedQuery(name = \"Dataverse.filterByAliasNameAffiliation\", query=\"SELECT dv FROM Dataverse dv WHERE (LOWER(dv.alias) LIKE :alias) OR (LOWER(dv.name) LIKE :name) OR (LOWER(dv.affiliation) LIKE :affiliation) order by dv.alias\"),\n-    @NamedQuery(name = \"Dataverse.filterByName\", query=\"SELECT dv FROM Dataverse dv WHERE LOWER(dv.name) LIKE :name  order by dv.alias\")\n+    @NamedQuery(name = \"Dataverse.findByAlias\", query = \"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias)=:alias\"),\n+    @NamedQuery(name = \"Dataverse.findByOwnerId\",\n+        query = \"select object(o) from Dataverse as o where o.owner.id =:ownerId order by o.name\"),\n+    @NamedQuery(name = \"Dataverse.findByCreatorId\",\n+        query = \"select object(o) from Dataverse as o where o.creator.id =:creatorId order by o.name\"),\n+    @NamedQuery(name = \"Dataverse.findByReleaseUserId\",\n+        query = \"select object(o) from Dataverse as o where o.releaseUser.id =:releaseUserId order by o.name\"),\n+    @NamedQuery(name = \"Dataverse.filterByAlias\",\n+        query = \"SELECT dv FROM Dataverse dv WHERE LOWER(dv.alias) LIKE :alias order by dv.alias\"),\n+    @NamedQuery(name = \"Dataverse.filterByAliasNameAffiliation\",\n+        query = \"SELECT dv FROM Dataverse dv WHERE (LOWER(dv.alias) LIKE :alias) OR (LOWER(dv.name) LIKE :name) OR (LOWER(dv.affiliation) LIKE :affiliation) order by dv.alias\"),\n+    @NamedQuery(name = \"Dataverse.filterByName\",\n+        query = \"SELECT dv FROM Dataverse dv WHERE LOWER(dv.name) LIKE :name  order by dv.alias\")\n })\n @Entity\n-@Table(indexes = {@Index(columnList=\"defaultcontributorrole_id\")\n-\t\t, @Index(columnList=\"defaulttemplate_id\")\n-\t\t, @Index(columnList=\"alias\")\n-\t\t, @Index(columnList=\"affiliation\")\n-\t\t, @Index(columnList=\"dataversetype\")\n-\t\t, @Index(columnList=\"facetroot\")\n-\t\t, @Index(columnList=\"guestbookroot\")\n-\t\t, @Index(columnList=\"metadatablockroot\")\n-\t\t, @Index(columnList=\"templateroot\")\n-\t\t, @Index(columnList=\"permissionroot\")\n-\t\t, @Index(columnList=\"themeroot\")})\n+@Table(indexes = {\n+    @Index(columnList = \"defaultcontributorrole_id\"),\n+    @Index(columnList = \"defaulttemplate_id\"),\n+    @Index(columnList = \"alias\"),\n+    @Index(columnList = \"affiliation\"),\n+    @Index(columnList = \"dataversetype\"),\n+    @Index(columnList = \"facetroot\"),\n+    @Index(columnList = \"guestbookroot\"),\n+    @Index(columnList = \"metadatablockroot\"),\n+    @Index(columnList = \"templateroot\"),\n+    @Index(columnList = \"permissionroot\"),\n+    @Index(columnList = \"themeroot\")\n+})\n public class Dataverse extends DvObjectContainer {\n \n     public enum DataverseType {\n         RESEARCHERS, RESEARCH_PROJECTS, JOURNALS, ORGANIZATIONS_INSTITUTIONS, TEACHING_COURSES, UNCATEGORIZED, LABORATORY, RESEARCH_GROUP, DEPARTMENT\n     };\n-    \n     private static final long serialVersionUID = 1L;\n \n     @NotBlank(message = \"{dataverse.name}\")\n-    @Column( nullable = false )\n+    @Column(nullable = false)\n     private String name;\n \n     /**\n      * @todo add @Column(nullable = false) for the database to enforce non-null\n      */\n+\n     @NotBlank(message = \"{dataverse.alias}\")\n-    @Column(nullable = false, unique=true)\n+    @Column(nullable = false, unique = true)\n     @Size(max = 60, message = \"{dataverse.aliasLength}\")\n-    @Pattern.List({@Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]*\", message = \"{dataverse.nameIllegalCharacters}\"),\n-        @Pattern(regexp=\".*\\\\D.*\", message=\"{dataverse.aliasNotnumber}\")})\n+    @Pattern.List({\n+        @Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]*\", message = \"{dataverse.nameIllegalCharacters}\"),\n+        @Pattern(regexp = \".*\\\\D.*\", message = \"{dataverse.aliasNotnumber}\")\n+    })\n     private String alias;\n \n     @Column(name = \"description\", columnDefinition = \"TEXT\")\n@@ -95,16 +108,17 @@ public class Dataverse extends DvObjectContainer {\n \n     @Enumerated(EnumType.STRING)\n     @NotNull(message = \"{dataverse.category}\")\n-    @Column( nullable = false )\n+    @Column(nullable = false)\n     private DataverseType dataverseType;\n        \n     /**\n      * When {@code true}, users are not granted permissions the got for parent\n      * dataverses.\n      */\n+\n+\n     protected boolean permissionRoot;\n \n-    \n     public DataverseType getDataverseType() {\n         return dataverseType;\n     }\n@@ -113,29 +127,29 @@ public class Dataverse extends DvObjectContainer {\n         this.dataverseType = dataverseType;\n     }\n \n-    public String getFriendlyCategoryName(){\n+    public String getFriendlyCategoryName() {\n         String key = getFriendlyCategoryKey();\n         return BundleUtil.getStringFromBundle(key);\n     }\n \n-    public String getFriendlyCategoryKey(){\n+    public String getFriendlyCategoryKey() {\n         switch (this.dataverseType) {\n             case RESEARCHERS:\n-                return  (\"dataverse.type.selectTab.researchers\");\n+                return (\"dataverse.type.selectTab.researchers\");\n             case RESEARCH_PROJECTS:\n-                return  (\"dataverse.type.selectTab.researchProjects\" );\n+                return (\"dataverse.type.selectTab.researchProjects\");\n             case JOURNALS:\n-                return  (\"dataverse.type.selectTab.journals\" );\n+                return (\"dataverse.type.selectTab.journals\");\n             case ORGANIZATIONS_INSTITUTIONS:\n-                return  (\"dataverse.type.selectTab.organizationsAndInsitutions\" );\n+                return (\"dataverse.type.selectTab.organizationsAndInsitutions\");\n             case TEACHING_COURSES:\n-                return  (\"dataverse.type.selectTab.teachingCourses\" );\n+                return (\"dataverse.type.selectTab.teachingCourses\");\n             case LABORATORY:\n-                return  (\"dataverse.type.selectTab.laboratory\");\n+                return (\"dataverse.type.selectTab.laboratory\");\n             case RESEARCH_GROUP:\n-                return  (\"dataverse.type.selectTab.researchGroup\" );\n+                return (\"dataverse.type.selectTab.researchGroup\");\n             case DEPARTMENT:\n-                return  (\"dataverse.type.selectTab.department\" );\n+                return (\"dataverse.type.selectTab.department\");\n             case UNCATEGORIZED:\n                 return (\"dataverse.type.selectTab.uncategorized\");\n             default:\n@@ -143,7 +157,6 @@ public class Dataverse extends DvObjectContainer {\n         }\n     }\n \n-\n     public String getIndexableCategoryName() {\n         String key = getFriendlyCategoryKey();\n         if (key.equals(\"dataverse.type.selectTab.uncategorized\")) {\n@@ -157,13 +170,12 @@ public class Dataverse extends DvObjectContainer {\n     \n     ///private String storageDriver=null;\n \n-\t// Note: We can't have \"Remove\" here, as there are role assignments that refer\n+    // Note: We can't have \"Remove\" here, as there are role assignments that refer\n     //       to this role. So, adding it would mean violating a forign key contstraint.\n-    @OneToMany(cascade = {CascadeType.MERGE},\n-            fetch = FetchType.LAZY,\n-            mappedBy = \"owner\")\n+\n+    @OneToMany(cascade = {CascadeType.MERGE}, fetch = FetchType.LAZY, mappedBy = \"owner\")\n     private Set<DataverseRole> roles;\n-    \n+\n     @ManyToOne\n     @JoinColumn(nullable = true)\n     private DataverseRole defaultContributorRole;\n@@ -175,42 +187,41 @@ public class Dataverse extends DvObjectContainer {\n     public void setDefaultContributorRole(DataverseRole defaultContributorRole) {\n         this.defaultContributorRole = defaultContributorRole;\n     }\n-   \n+\n     private boolean metadataBlockRoot;\n     private boolean facetRoot;\n     // By default, themeRoot should be true, as new dataverses should start with the default theme\n     private boolean themeRoot = true;\n-    private boolean templateRoot;    \n+    private boolean templateRoot;\n \n-    \n-    @OneToOne(mappedBy = \"dataverse\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n-      private DataverseTheme dataverseTheme;\n+    @OneToOne(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST}, orphanRemoval = true)\n+    private DataverseTheme dataverseTheme;\n \n-    @OneToMany(mappedBy = \"dataverse\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST}, orphanRemoval = true)\n     @OrderBy(\"displayOrder\")\n-    @NotEmpty(message=\"At least one contact is required.\")\n+    @NotEmpty(message = \"At least one contact is required.\")\n     private List<DataverseContact> dataverseContacts = new ArrayList<>();\n-    \n+\n     @ManyToMany(cascade = {CascadeType.MERGE})\n     private List<MetadataBlock> metadataBlocks = new ArrayList<>();\n \n-    @OneToMany(mappedBy = \"dataverse\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST}, orphanRemoval = true)\n     @OrderBy(\"displayOrder\")\n     private List<DataverseFacet> dataverseFacets = new ArrayList<>();\n-    \n+\n     @ManyToMany(cascade = {CascadeType.MERGE})\n     @JoinTable(name = \"dataverse_citationDatasetFieldTypes\",\n-    joinColumns = @JoinColumn(name = \"dataverse_id\"),\n-    inverseJoinColumns = @JoinColumn(name = \"citationdatasetfieldtype_id\"))\n+               joinColumns = @JoinColumn(name = \"dataverse_id\"),\n+               inverseJoinColumns = @JoinColumn(name = \"citationdatasetfieldtype_id\"))\n     private List<DatasetFieldType> citationDatasetFieldTypes = new ArrayList<>();\n-    \n+\n     @ManyToMany\n     @JoinTable(name = \"dataversesubjects\",\n-    joinColumns = @JoinColumn(name = \"dataverse_id\"),\n-    inverseJoinColumns = @JoinColumn(name = \"controlledvocabularyvalue_id\"))\n+               joinColumns = @JoinColumn(name = \"dataverse_id\"),\n+               inverseJoinColumns = @JoinColumn(name = \"controlledvocabularyvalue_id\"))\n     private Set<ControlledVocabularyValue> dataverseSubjects;\n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private List<DataverseFeaturedDataverse> dataverseFeaturedDataverses;\n \n     public List<DataverseFeaturedDataverse> getDataverseFeaturedDataverses() {\n@@ -220,8 +231,8 @@ public class Dataverse extends DvObjectContainer {\n     public void setDataverseFeaturedDataverses(List<DataverseFeaturedDataverse> dataverseFeaturedDataverses) {\n         this.dataverseFeaturedDataverses = dataverseFeaturedDataverses;\n     }\n-    \n-    @OneToMany(mappedBy=\"featuredDataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+\n+    @OneToMany(mappedBy = \"featuredDataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private List<DataverseFeaturedDataverse> dataverseFeaturingDataverses;\n \n     public List<DataverseFeaturedDataverse> getDataverseFeaturingDataverses() {\n@@ -231,8 +242,8 @@ public class Dataverse extends DvObjectContainer {\n     public void setDataverseFeaturingDataverses(List<DataverseFeaturedDataverse> dataverseFeaturingDataverses) {\n         this.dataverseFeaturingDataverses = dataverseFeaturingDataverses;\n     }\n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private List<DataverseLinkingDataverse> dataverseLinkingDataverses;\n \n     public List<DataverseLinkingDataverse> getDataverseLinkingDataverses() {\n@@ -242,8 +253,8 @@ public class Dataverse extends DvObjectContainer {\n     public void setDataverseLinkingDataverses(List<DataverseLinkingDataverse> dataverseLinkingDataverses) {\n         this.dataverseLinkingDataverses = dataverseLinkingDataverses;\n     }\n-       \n-    @OneToMany(mappedBy=\"linkingDataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+\n+    @OneToMany(mappedBy = \"linkingDataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private List<DataverseLinkingDataverse> dataverseLinkedDataverses;\n \n     public List<DataverseLinkingDataverse> getDataverseLinkedDataverses() {\n@@ -253,8 +264,8 @@ public class Dataverse extends DvObjectContainer {\n     public void setDataverseLinkedDataverses(List<DataverseLinkingDataverse> dataverseLinkedDataverses) {\n         this.dataverseLinkedDataverses = dataverseLinkedDataverses;\n     }\n-    \n-    @OneToMany(mappedBy=\"linkingDataverse\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+\n+    @OneToMany(mappedBy = \"linkingDataverse\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private List<DatasetLinkingDataverse> datasetLinkingDataverses;\n \n     public List<DatasetLinkingDataverse> getDatasetLinkingDataverses() {\n@@ -264,7 +275,7 @@ public class Dataverse extends DvObjectContainer {\n     public void setDatasetLinkingDataverses(List<DatasetLinkingDataverse> datasetLinkingDataverses) {\n         this.datasetLinkingDataverses = datasetLinkingDataverses;\n     }\n-        \n+\n     public Set<ControlledVocabularyValue> getDataverseSubjects() {\n         return dataverseSubjects;\n     }\n@@ -273,15 +284,14 @@ public class Dataverse extends DvObjectContainer {\n         this.dataverseSubjects = dataverseSubjects;\n     }\n \n-    \n     @OneToMany(mappedBy = \"dataverse\")\n     private List<DataverseFieldTypeInputLevel> dataverseFieldTypeInputLevels = new ArrayList<>();\n-    \n+\n     @ManyToOne\n     @JoinColumn(nullable = true)\n-    private Template defaultTemplate;  \n-    \n-    @OneToMany(mappedBy = \"definitionPoint\", cascade={CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+    private Template defaultTemplate;\n+\n+    @OneToMany(mappedBy = \"definitionPoint\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private List<SavedSearch> savedSearches;\n \n     public List<SavedSearch> getSavedSearches() {\n@@ -291,23 +301,22 @@ public class Dataverse extends DvObjectContainer {\n     public void setSavedSearches(List<SavedSearch> savedSearches) {\n         this.savedSearches = savedSearches;\n     }\n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n-    private List<Template> templates; \n-    \n-    @OneToMany(mappedBy=\"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n+\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n+    private List<Template> templates;\n+\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n     private List<Guestbook> guestbooks;\n-        \n+\n     public List<Guestbook> getGuestbooks() {\n         return guestbooks;\n     }\n \n     public void setGuestbooks(List<Guestbook> guestbooks) {\n         this.guestbooks = guestbooks;\n-    } \n-    \n-    \n-    @OneToMany (mappedBy=\"dataverse\", cascade={CascadeType.MERGE, CascadeType.REMOVE})\n+    }\n+\n+    @OneToMany(mappedBy = \"dataverse\", cascade = {CascadeType.MERGE, CascadeType.REMOVE})\n     private List<HarvestingClient> harvestingClientConfigs;\n \n     public List<HarvestingClient> getHarvestingClientConfigs() {\n@@ -322,29 +331,27 @@ public class Dataverse extends DvObjectContainer {\n         return harvestingClient != null; \n     }\n     */\n-    \n-    \n+\n     public List<Guestbook> getParentGuestbooks() {\n         List<Guestbook> retList = new ArrayList<>();\n         Dataverse testDV = this;\n-        while (testDV.getOwner() != null){   \n-           retList.addAll(testDV.getOwner().getGuestbooks());          \n-           if(testDV.getOwner().guestbookRoot){               \n-               break;\n-           }           \n-           testDV = testDV.getOwner();\n+        while (testDV.getOwner() != null) {\n+            retList.addAll(testDV.getOwner().getGuestbooks());\n+            if (testDV.getOwner().guestbookRoot) {\n+                break;\n+            }\n+            testDV = testDV.getOwner();\n         }\n-            return  retList;\n+        return retList;\n     }\n-    \n+\n     public List<Guestbook> getAvailableGuestbooks() {\n         //get all guestbooks\n         List<Guestbook> retList = new ArrayList<>();\n         Dataverse testDV = this;\n         List<Guestbook> allGbs = new ArrayList<>();\n-        if (!this.guestbookRoot){\n-                    while (testDV.getOwner() != null){   \n-          \n+        if (!this.guestbookRoot) {\n+            while (testDV.getOwner() != null) {\n                 allGbs.addAll(testDV.getOwner().getGuestbooks());\n                 if (testDV.getOwner().isGuestbookRoot()) {\n                     break;\n@@ -352,29 +359,27 @@ public class Dataverse extends DvObjectContainer {\n                 testDV = testDV.getOwner();\n             }\n         }\n-\n         allGbs.addAll(this.getGuestbooks());\n         //then only display them if they are enabled\n+\n         for (Guestbook gbt : allGbs) {\n             if (gbt.isEnabled()) {\n                 retList.add(gbt);\n             }\n         }\n-            return  retList;\n-        \n+        return retList;\n     }\n-    \n+\n     private boolean guestbookRoot;\n-    \n+\n     public boolean isGuestbookRoot() {\n         return guestbookRoot;\n     }\n \n     public void setGuestbookRoot(boolean guestbookRoot) {\n         this.guestbookRoot = guestbookRoot;\n-    } \n-    \n-    \n+    }\n+\n     public void setDataverseFieldTypeInputLevels(List<DataverseFieldTypeInputLevel> dataverseFieldTypeInputLevels) {\n         this.dataverseFieldTypeInputLevels = dataverseFieldTypeInputLevels;\n     }\n@@ -383,7 +388,6 @@ public class Dataverse extends DvObjectContainer {\n         return dataverseFieldTypeInputLevels;\n     }\n \n-\n     public Template getDefaultTemplate() {\n         return defaultTemplate;\n     }\n@@ -403,33 +407,31 @@ public class Dataverse extends DvObjectContainer {\n     public List<Template> getParentTemplates() {\n         List<Template> retList = new ArrayList<>();\n         Dataverse testDV = this;\n-        while (testDV.getOwner() != null){   \n-            \n-           if (!testDV.getMetadataBlocks().equals(testDV.getOwner().getMetadataBlocks())){\n-               break;\n-           }           \n-           retList.addAll(testDV.getOwner().getTemplates());\n-           \n-           if(testDV.getOwner().templateRoot){               \n-               break;\n-           }           \n-           testDV = testDV.getOwner();\n+        while (testDV.getOwner() != null) {\n+            if (!testDV.getMetadataBlocks().equals(testDV.getOwner().getMetadataBlocks())) {\n+                break;\n+            }\n+            retList.addAll(testDV.getOwner().getTemplates());\n+            if (testDV.getOwner().templateRoot) {\n+                break;\n+            }\n+            testDV = testDV.getOwner();\n         }\n-            return  retList;\n+        return retList;\n     }\n-    \n+\n     public boolean isThemeRoot() {\n         return themeRoot;\n     }\n-    \n+\n     public boolean getThemeRoot() {\n         return themeRoot;\n     }\n \n-    public void setThemeRoot(boolean  themeRoot) {\n+    public void setThemeRoot(boolean themeRoot) {\n         this.themeRoot = themeRoot;\n     }\n-    \n+\n     public boolean isTemplateRoot() {\n         return templateRoot;\n     }\n@@ -438,42 +440,42 @@ public class Dataverse extends DvObjectContainer {\n         this.templateRoot = templateRoot;\n     }\n \n-   \n-\n-\n     public List<MetadataBlock> getMetadataBlocks() {\n         return getMetadataBlocks(false);\n     }\n \n     public List<MetadataBlock> getMetadataBlocks(boolean returnActualDB) {\n-        if (returnActualDB || metadataBlockRoot || getOwner() == null) {\n+        if (returnActualDB\n+            || metadataBlockRoot\n+            || getOwner() == null) {\n             return metadataBlocks;\n         } else {\n             return getOwner().getMetadataBlocks();\n         }\n     }\n-    \n-    public Long getMetadataRootId(){\n-        if(metadataBlockRoot || getOwner() == null){\n+\n+    public Long getMetadataRootId() {\n+        if (metadataBlockRoot || getOwner() == null) {\n             return this.getId();\n-        } else { \n+        } else {\n             return getOwner().getMetadataRootId();\n         }\n     }\n \n-    \n     public DataverseTheme getDataverseTheme() {\n         return getDataverseTheme(false);\n     }\n \n     public DataverseTheme getDataverseTheme(boolean returnActualDB) {\n-        if (returnActualDB || themeRoot || getOwner() == null) {\n+        if (returnActualDB\n+            || themeRoot\n+            || getOwner() == null) {\n             return dataverseTheme;\n         } else {\n             return getOwner().getDataverseTheme();\n         }\n     }\n-    \n+\n     public String getGuestbookRootDataverseName() {\n         Dataverse testDV = this;\n         String retName = \"Parent\";\n@@ -525,7 +527,7 @@ public class Dataverse extends DvObjectContainer {\n         }\n         return retName;\n     }\n-    \n+\n     public String getFacetRootDataverseName() {\n         Dataverse testDV = this;\n         String retName = \"Parent\";\n@@ -538,19 +540,17 @@ public class Dataverse extends DvObjectContainer {\n         }\n         return retName;\n     }\n-        \n-    \n+\n     public String getLogoOwnerId() {\n-        \n-        if (themeRoot || getOwner()==null) {\n+        if (themeRoot || getOwner() == null) {\n             return this.getId().toString();\n         } else {\n             return getOwner().getId().toString();\n         }\n-    } \n-    \n+    }\n+\n     public void setDataverseTheme(DataverseTheme dataverseTheme) {\n-        this.dataverseTheme=dataverseTheme;\n+        this.dataverseTheme = dataverseTheme;\n     }\n \n     public void setMetadataBlocks(List<MetadataBlock> metadataBlocks) {\n@@ -564,33 +564,33 @@ public class Dataverse extends DvObjectContainer {\n     public void setCitationDatasetFieldTypes(List<DatasetFieldType> citationDatasetFieldTypes) {\n         this.citationDatasetFieldTypes = citationDatasetFieldTypes;\n     }\n-    \n-    \n \n     public List<DataverseFacet> getDataverseFacets() {\n         return getDataverseFacets(false);\n     }\n \n     public List<DataverseFacet> getDataverseFacets(boolean returnActualDB) {\n-        if (returnActualDB || facetRoot || getOwner() == null) {\n+        if (returnActualDB\n+            || facetRoot\n+            || getOwner() == null) {\n             return dataverseFacets;\n         } else {\n             return getOwner().getDataverseFacets();\n         }\n     }\n-     \n-    public Long getFacetRootId(){\n-        if(facetRoot || getOwner() == null){\n+\n+    public Long getFacetRootId() {\n+        if (facetRoot || getOwner() == null) {\n             return this.getId();\n-        } else { \n+        } else {\n             return getOwner().getFacetRootId();\n-        }        \n+        }\n     }\n \n     public void setDataverseFacets(List<DataverseFacet> dataverseFacets) {\n         this.dataverseFacets = dataverseFacets;\n     }\n-    \n+\n     public List<DataverseContact> getDataverseContacts() {\n         return dataverseContacts;\n     }\n@@ -602,6 +602,7 @@ public class Dataverse extends DvObjectContainer {\n      *  string if there are no contacts.\n      * @author bencomp\n      */\n+\n     public String getContactEmails() {\n         if (dataverseContacts != null && !dataverseContacts.isEmpty()) {\n             StringBuilder buf = new StringBuilder();\n@@ -622,7 +623,7 @@ public class Dataverse extends DvObjectContainer {\n     public void setDataverseContacts(List<DataverseContact> dataverseContacts) {\n         this.dataverseContacts = dataverseContacts;\n     }\n-    \n+\n     public void addDataverseContact(int index) {\n         dataverseContacts.add(index, new DataverseContact(this));\n     }\n@@ -679,10 +680,9 @@ public class Dataverse extends DvObjectContainer {\n         this.facetRoot = facetRoot;\n     }\n \n-\n     public void addRole(DataverseRole role) {\n         role.setOwner(this);\n-        if ( roles == null ) {\n+        if (roles == null) {\n             roles = new HashSet<>();\n         }\n         roles.add(role);\n@@ -693,13 +693,14 @@ public class Dataverse extends DvObjectContainer {\n      * do not call this method and try to add directly to the list. \n      * @return the roles defined in this Dataverse.\n      */\n+\n     public Set<DataverseRole> getRoles() {\n-        if ( roles == null ) {\n+        if (roles == null) {\n             roles = new HashSet<>();\n         }\n         return roles;\n     }\n-    \n+\n     public List<Dataverse> getOwners() {\n         List<Dataverse> owners = new ArrayList<>();\n         if (getOwner() != null) {\n@@ -715,6 +716,7 @@ public class Dataverse extends DvObjectContainer {\n         if (!(object instanceof Dataverse)) {\n             return false;\n         }\n+\n         Dataverse other = (Dataverse) object;\n         return Objects.equals(getId(), other.getId());\n     }\n@@ -732,20 +734,21 @@ public class Dataverse extends DvObjectContainer {\n     /**\n      * @todo implement in https://github.com/IQSS/dataverse/issues/551\n      */\n+\n     public String getDepositTermsOfUse() {\n         return \"Dataverse Deposit Terms of Use will be implemented in https://github.com/IQSS/dataverse/issues/551\";\n     }\n-    \n+\n     @Override\n     public String getDisplayName() {\n         return getName();\n     }\n-    \n+\n     @Override\n     public String getCurrentName() {\n         return getName();\n     }\n-    \n+\n     @Override\n     public boolean isPermissionRoot() {\n         return permissionRoot;\n@@ -754,15 +757,16 @@ public class Dataverse extends DvObjectContainer {\n     public void setPermissionRoot(boolean permissionRoot) {\n         this.permissionRoot = permissionRoot;\n     }\n-      \n+\n     @Override\n-    public boolean isAncestorOf( DvObject other ) {\n-        while ( other != null ) {\n-            if ( equals(other) ) {\n+    public boolean isAncestorOf(DvObject other) {\n+        while (other != null) {\n+            if (equals(other)) {\n                 return true;\n             }\n             other = other.getOwner();\n         }\n         return false;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 193
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/7/Dataverse.java\nindex 342aaec187a..c10ee3669c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/7/Dataverse.java\n@@ -58,7 +58,7 @@ import org.hibernate.validator.constraints.NotEmpty;\n })\n @Entity\n @Table(indexes = {@Index(columnList=\"defaultcontributorrole_id\")\n-\t\t, @Index(columnList=\"defaulttemplate_id\")\n+                      , @Index(columnList=\"defaulttemplate_id\")\n \t\t, @Index(columnList=\"alias\")\n \t\t, @Index(columnList=\"affiliation\")\n \t\t, @Index(columnList=\"dataversetype\")\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/7/Dataverse.java\nindex 342aaec187a..5341e7183c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/7/Dataverse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/7/Dataverse.java\n@@ -58,7 +58,7 @@ import org.hibernate.validator.constraints.NotEmpty;\n })\n @Entity\n @Table(indexes = {@Index(columnList=\"defaultcontributorrole_id\")\n-\t\t, @Index(columnList=\"defaulttemplate_id\")\n+        , @Index(columnList=\"defaulttemplate_id\")\n \t\t, @Index(columnList=\"alias\")\n \t\t, @Index(columnList=\"affiliation\")\n \t\t, @Index(columnList=\"dataversetype\")\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}