{
    "project_name": "neo4j-neo4j",
    "error_id": "325",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/325/Services.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/325/Services.java\nindex 4ac505f7d63..ddb60eb6184 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/325/Services.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/325/Services.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.service;\n \n import java.util.ArrayList;\n@@ -44,7 +45,7 @@ import static org.neo4j.util.Preconditions.checkArgument;\n  */\n public final class Services\n {\n-    private static final boolean PRINT_SERVICE_LOADER_STACK_TRACES = flag( Services.class, \"printServiceLoaderStackTraces\", false );\n+    private static final boolean PRINT_SERVICE_LOADER_STACK_TRACES = flag(Services.class, \"printServiceLoaderStackTraces\", false);\n \n     private Services()\n     {\n@@ -57,23 +58,23 @@ public final class Services\n      * @param service the type of the service\n      * @return all registered implementations of the SPI\n      */\n-    public static <T> Collection<T> loadAll( Class<T> service )\n+    public static <T> Collection<T> loadAll(Class<T> service)\n     {\n         final Map<String, T> providers = new HashMap<>();\n         final ClassLoader currentCL = Services.class.getClassLoader();\n         final ClassLoader contextCL = Thread.currentThread().getContextClassLoader();\n \n-        loadAllSafely( service, contextCL ).forEach( provider -> providers.put( provider.getClass().getName(), provider ) );\n+        loadAllSafely(service, contextCL).forEach(provider -> providers.put(provider.getClass().getName(), provider));\n \n         // in application servers, osgi and alike environments, context classloader can differ from the one that loads neo4j libs;\n         // in such cases we need to load services from both\n-        if ( currentCL != contextCL )\n+        if (currentCL != contextCL)\n         {\n             // services from context class loader have higher precedence, so we skip duplicates by comparing class names.\n-            loadAllSafely( service, currentCL ).forEach( provider -> providers.putIfAbsent( provider.getClass().getName(), provider ) );\n+            loadAllSafely(service, currentCL).forEach(provider -> providers.putIfAbsent(provider.getClass().getName(), provider));\n         }\n \n-        return new ArrayList<>( providers.values() );\n+        return new ArrayList<>(providers.values());\n     }\n \n     /**\n@@ -81,10 +82,10 @@ public final class Services\n      *\n      * @throws RuntimeException if multiple service providers with the same name are found\n      */\n-    public static <T extends NamedService> Optional<T> load( Class<T> service, String name )\n+    public static <T extends NamedService> Optional<T> load(Class<T> service, String name)\n     {\n-        checkArgument( isNotBlank( name ), \"Service provider name is null or blank\" );\n-        return load( service, name, NamedService::getName );\n+        checkArgument(isNotBlank(name), \"Service provider name is null or blank\");\n+        return load(service, name, NamedService::getName);\n     }\n \n     /**\n@@ -92,29 +93,29 @@ public final class Services\n      *\n      * @throws RuntimeException if multiple service providers with the same key are found\n      */\n-    public static <T, K> Optional<T> load( Class<T> service, K key, Function<T, K> keyAccessor )\n+    public static <T, K> Optional<T> load(Class<T> service, K key, Function<T, K> keyAccessor)\n     {\n-        requireNonNull( key, \"Service provider key is null\" );\n-        final List<T> matches = loadAll( service ).stream()\n-                .filter( provider -> key.equals( keyAccessor.apply( provider ) ) )\n-                .collect( Collectors.toList() );\n+        requireNonNull(key, \"Service provider key is null\");\n+        final List<T> matches = loadAll(service).stream()\n+          .filter(provider -> key.equals(keyAccessor.apply(provider)))\n+          .collect(Collectors.toList());\n \n-        if ( matches.size() > 1 )\n+        if (matches.size() > 1)\n         {\n-            throw new RuntimeException( format( \"Found multiple service providers %s[%s]: %s\", service, key, matches ) );\n+            throw new RuntimeException(format(\"Found multiple service providers %s[%s]: %s\", service, key, matches));\n         }\n \n-        return matches.isEmpty() ? Optional.empty() : Optional.of( matches.get( 0 ) );\n+        return matches.isEmpty() ? Optional.empty() : Optional.of(matches.get(0));\n     }\n \n     /**\n      * Load the service with the highest priority.\n      */\n-    public static <T extends PrioritizedService> Optional<T> loadByPriority( Class<T> service )\n+    public static <T extends PrioritizedService> Optional<T> loadByPriority(Class<T> service)\n     {\n-        final List<T> all = (List<T>) loadAll( service );\n-        all.sort( Comparator.comparingInt( PrioritizedService::getPriority ) );\n-        return all.isEmpty() ? Optional.empty() : Optional.of( all.get( 0 ) );\n+        final List<T> all = (List<T>) loadAll(service);\n+        all.sort(Comparator.comparingInt(PrioritizedService::getPriority));\n+        return all.isEmpty() ? Optional.empty() : Optional.of(all.get(0));\n     }\n \n     /**\n@@ -122,9 +123,9 @@ public final class Services\n      *\n      * @throws NoSuchElementException if no service could be loaded with the given name\n      */\n-    public static <T extends NamedService> T loadOrFail( Class<T> service, String name )\n+    public static <T extends NamedService> T loadOrFail(Class<T> service, String name)\n     {\n-        return loadOrFail( service, name, NamedService::getName );\n+        return loadOrFail(service, name, NamedService::getName);\n     }\n \n     /**\n@@ -132,25 +133,24 @@ public final class Services\n      *\n      * @throws NoSuchElementException if no service could be loaded with the given key\n      */\n-    public static <T, K> T loadOrFail( Class<T> service, K key, Function<T, K> keyAccessor )\n+    public static <T, K> T loadOrFail(Class<T> service, K key, Function<T, K> keyAccessor)\n     {\n-        return load( service, key, keyAccessor )\n-                .orElseThrow( () -> new NoSuchElementException( format( \"Could not find service provider %s[%s]\", service.getName(), key ) ) );\n+        return load(service, key, keyAccessor)\n+          .orElseThrow(() -> new NoSuchElementException(format(\"Could not find service provider %s[%s]\", service.getName(), key)));\n     }\n \n-    private static <T> List<T> loadAllSafely( Class<T> type, ClassLoader classLoader )\n+    private static <T> List<T> loadAllSafely(Class<T> type, ClassLoader classLoader)\n     {\n         final List<T> services = new ArrayList<>();\n-        final Iterator<T> loader = ServiceLoader.load( type, classLoader ).iterator();\n-        while ( loader.hasNext() )\n+        final Iterator<T> loader = ServiceLoader.load(type, classLoader).iterator();\n+        while (loader.hasNext())\n         {\n             try\n             {\n-                services.add( loader.next() );\n-            }\n-            catch ( ServiceConfigurationError e )\n+                services.add(loader.next());\n+            } catch (ServiceConfigurationError e)\n             {\n-                if ( PRINT_SERVICE_LOADER_STACK_TRACES )\n+                if (PRINT_SERVICE_LOADER_STACK_TRACES)\n                 {\n                     e.printStackTrace();\n                 }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}