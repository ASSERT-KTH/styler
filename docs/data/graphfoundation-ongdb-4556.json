{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4556",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4556/IndexReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4556/IndexReference.java\nindex 0b17837df85..ab53d920c5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4556/IndexReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4556/IndexReference.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import java.util.Iterator;\n@@ -31,36 +32,36 @@ import org.neo4j.internal.kernel.api.schema.SchemaUtil;\n  */\n public interface IndexReference\n {\n-    boolean isUnique();\n+  boolean isUnique();\n \n-    int label();\n+  int label();\n \n-    int[] properties();\n+  int[] properties();\n \n-    /**\n-     * @param tokenNameLookup used for looking up names for token ids.\n-     * @return a user friendly description of what this index indexes.\n-     */\n-    default String userDescription( TokenNameLookup tokenNameLookup )\n-    {\n-        String type = isUnique() ? \"UNIQUE\" : \"GENERAL\";\n-        String schemaDescription = SchemaUtil.niceLabelAndProperties( tokenNameLookup, label(), properties() );\n-        return SchemaUtil.withType( type, schemaDescription );\n-    }\n+  /**\n+   * @param tokenNameLookup used for looking up names for token ids.\n+   * @return a user friendly description of what this index indexes.\n+   */\n+  default String userDescription(TokenNameLookup tokenNameLookup)\n+  {\n+    String type = isUnique() ? \"UNIQUE\" : \"GENERAL\";\n+    String schemaDescription = SchemaUtil.niceLabelAndProperties(tokenNameLookup, label(), properties());\n+    return SchemaUtil.withType(type, schemaDescription);\n+  }\n \n-    /**\n-     * Sorts indexes by type, returning first GENERAL indexes, followed by UNIQUE. Implementation is not suitable in\n-     * hot path.\n-     *\n-     * @param indexes Indexes to sort\n-     * @return sorted indexes\n-     */\n-    static Iterator<IndexReference> sortByType( Iterator<IndexReference> indexes )\n-    {\n-        List<IndexReference> materialized = Iterators.asList( indexes );\n-        return Iterators.concat(\n-                Iterators.filter( i -> !i.isUnique(), materialized.iterator() ),\n-                Iterators.filter( IndexReference::isUnique, materialized.iterator() ) );\n+  /**\n+   * Sorts indexes by type, returning first GENERAL indexes, followed by UNIQUE. Implementation is not suitable in\n+   * hot path.\n+   *\n+   * @param indexes Indexes to sort\n+   * @return sorted indexes\n+   */\n+  static Iterator<IndexReference> sortByType(Iterator<IndexReference> indexes)\n+  {\n+    List<IndexReference> materialized = Iterators.asList(indexes);\n+    return Iterators.concat(\n+        Iterators.filter(i -> !i.isUnique(), materialized.iterator()),\n+        Iterators.filter(IndexReference::isUnique, materialized.iterator()));\n \n-    }\n+  }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4556/IndexReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4556/IndexReference.java\nindex 0b17837df85..c4a83651465 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4556/IndexReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4556/IndexReference.java\n@@ -58,9 +58,6 @@ public interface IndexReference\n     static Iterator<IndexReference> sortByType( Iterator<IndexReference> indexes )\n     {\n         List<IndexReference> materialized = Iterators.asList( indexes );\n-        return Iterators.concat(\n-                Iterators.filter( i -> !i.isUnique(), materialized.iterator() ),\n-                Iterators.filter( IndexReference::isUnique, materialized.iterator() ) );\n-\n+        return Iterators.concat( Iterators.filter( i -> !i.isUnique(), materialized.iterator() ), Iterators.filter( IndexReference::isUnique, materialized.iterator() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4556/IndexReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4556/IndexReference.java\nindex 0b17837df85..86e45e5fa61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4556/IndexReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4556/IndexReference.java\n@@ -21,7 +21,6 @@ package org.neo4j.internal.kernel.api;\n \n import java.util.Iterator;\n import java.util.List;\n-\n import org.neo4j.helpers.collection.Iterators;\n import org.neo4j.internal.kernel.api.schema.SchemaUtil;\n \n@@ -29,24 +28,26 @@ import org.neo4j.internal.kernel.api.schema.SchemaUtil;\n  * Reference to a specific index. This reference is valid until the schema of the database changes (that is a\n  * create/drop of an index or constraint occurs).\n  */\n+\n public interface IndexReference\n {\n-    boolean isUnique();\n-\n-    int label();\n-\n-    int[] properties();\n+boolean isUnique()\n+;\n+int label()\n+;\n+int[] properties()\n+;\n \n     /**\n      * @param tokenNameLookup used for looking up names for token ids.\n      * @return a user friendly description of what this index indexes.\n      */\n-    default String userDescription( TokenNameLookup tokenNameLookup )\n-    {\n-        String type = isUnique() ? \"UNIQUE\" : \"GENERAL\";\n-        String schemaDescription = SchemaUtil.niceLabelAndProperties( tokenNameLookup, label(), properties() );\n-        return SchemaUtil.withType( type, schemaDescription );\n-    }\n+default String userDescription( TokenNameLookup tokenNameLookup )\n+{\n+   String type = isUnique() ? \"UNIQUE\" : \"GENERAL\";\n+   String schemaDescription = SchemaUtil.niceLabelAndProperties( tokenNameLookup, label(), properties() );\n+   return SchemaUtil.withType( type, schemaDescription );\n+}\n \n     /**\n      * Sorts indexes by type, returning first GENERAL indexes, followed by UNIQUE. Implementation is not suitable in\n@@ -55,12 +56,11 @@ public interface IndexReference\n      * @param indexes Indexes to sort\n      * @return sorted indexes\n      */\n-    static Iterator<IndexReference> sortByType( Iterator<IndexReference> indexes )\n-    {\n-        List<IndexReference> materialized = Iterators.asList( indexes );\n-        return Iterators.concat(\n-                Iterators.filter( i -> !i.isUnique(), materialized.iterator() ),\n-                Iterators.filter( IndexReference::isUnique, materialized.iterator() ) );\n \n-    }\n+static Iterator<IndexReference> sortByType( Iterator<IndexReference> indexes )\n+{\n+   List<IndexReference> materialized = Iterators.asList( indexes );\n+   return Iterators.concat( Iterators.filter( i -> ! i.isUnique(), materialized.iterator() ), Iterators.filter( IndexReference::isUnique, materialized.iterator() ) );\n }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}