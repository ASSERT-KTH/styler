{
    "project_name": "intuit-Tank",
    "error_id": "123",
    "information": {
        "errors": [
            {
                "line": "100",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 143).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            }\n        }\n        details = map.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).sorted().collect(Collectors.toList());\n        userDetails = details;\n        detailMap.put(TimeUtil.normalizeToPeriod(15, new Date()), details);\n        for (String s : toRemove) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/123/ProjectStatusContainer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/123/ProjectStatusContainer.java\nindex 478c722aaed..6d439b93b7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/123/ProjectStatusContainer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/123/ProjectStatusContainer.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.api.model.v1.cloud;\n \n /*\n@@ -37,116 +38,114 @@ import com.intuit.tank.vm.settings.TimeUtil;\n \n /**\n  * BrokerStatus\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @XmlRootElement(name = \"projectStatusContainer\", namespace = Namespace.NAMESPACE_V1)\n @XmlAccessorType(XmlAccessType.FIELD)\n @XmlType(name = \"ProjectStatusContainer\", namespace = Namespace.NAMESPACE_V1, propOrder = {\n-        \"reportTime\",\n-        \"jobId\",\n-        \"userDetails\"\n+  \"reportTime\",\n+  \"jobId\",\n+  \"userDetails\"\n })\n public class ProjectStatusContainer implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-\n-    @XmlElement(name = \"reportTime\", namespace = Namespace.NAMESPACE_V1, required = true, nillable = false)\n-    private Date reportTime = new Date();\n-\n-    @XmlElement(name = \"jobId\", namespace = Namespace.NAMESPACE_V1, required = false, nillable = false)\n-    private String jobId;\n-\n-    @XmlElementWrapper(name = \"userDetails\", namespace = Namespace.NAMESPACE_V1)\n-    @XmlElement(name = \"userDetail\", namespace = Namespace.NAMESPACE_V1, required = true, nillable = false)\n-    private List<UserDetail> userDetails = null;\n-\n-    @XmlTransient\n-    private Map<Date, List<UserDetail>> detailMap = new HashMap<Date, List<UserDetail>>();\n-\n-    @XmlTransient\n-    private Map<String, CloudVmStatusContainer> containers = new HashMap<String, CloudVmStatusContainer>();\n-\n-    /**\n-     * @FrameworkUseOnly\n-     */\n-    public ProjectStatusContainer() {\n-    }\n-\n-    public void addStatusContainer(CloudVmStatusContainer container) {\n-        containers.put(container.getJobId(), container);\n-        calculateUserDetails();\n-    }\n-\n-    public void calculateUserDetails() {\n-        List<UserDetail> details;\n-        Map<String, Integer> map = new HashMap<String, Integer>();\n-        long oldTime = System.currentTimeMillis() - 120000;// 2 minutes\n-        Set<String> toRemove = new HashSet<String>();\n-        for (CloudVmStatusContainer container : containers.values()) {\n-            if (container.getReportTime().getTime() < oldTime) {\n-                toRemove.add(container.getJobId());\n-            } else {\n-                for (UserDetail detail : container.getUserDetails()) {\n-                    Integer val = map.get(detail.getScript());\n-                    if (val == null) {\n-                        val = 0;\n-                    }\n-                    map.put(detail.getScript(), val + detail.getUsers());\n-                }\n-            }\n-        }\n-        details = map.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).sorted().collect(Collectors.toList());\n-        userDetails = details;\n-        detailMap.put(TimeUtil.normalizeToPeriod(15, new Date()), details);\n-        for (String s : toRemove) {\n-            containers.remove(s);\n+  private static final long serialVersionUID = 1L;\n+\n+  @XmlElement(name = \"reportTime\", namespace = Namespace.NAMESPACE_V1, required = true, nillable = false)\n+  private Date reportTime = new Date();\n+\n+  @XmlElement(name = \"jobId\", namespace = Namespace.NAMESPACE_V1, required = false, nillable = false)\n+  private String jobId;\n+\n+  @XmlElementWrapper(name = \"userDetails\", namespace = Namespace.NAMESPACE_V1)\n+  @XmlElement(name = \"userDetail\", namespace = Namespace.NAMESPACE_V1, required = true, nillable = false)\n+  private List<UserDetail> userDetails = null;\n+\n+  @XmlTransient\n+  private Map<Date, List<UserDetail>> detailMap = new HashMap<Date, List<UserDetail>>();\n+\n+  @XmlTransient\n+  private Map<String, CloudVmStatusContainer> containers = new HashMap<String, CloudVmStatusContainer>();\n+\n+  /**\n+   * @FrameworkUseOnly\n+   */\n+  public ProjectStatusContainer() {\n+  }\n+\n+  public void addStatusContainer(CloudVmStatusContainer container) {\n+    containers.put(container.getJobId(), container);\n+    calculateUserDetails();\n+  }\n+\n+  public void calculateUserDetails() {\n+    List<UserDetail> details;\n+    Map<String, Integer> map = new HashMap<String, Integer>();\n+    long oldTime = System.currentTimeMillis() - 120000;// 2 minutes\n+    Set<String> toRemove = new HashSet<String>();\n+    for (CloudVmStatusContainer container : containers.values()) {\n+      if (container.getReportTime().getTime() < oldTime) {\n+        toRemove.add(container.getJobId());\n+      } else {\n+        for (UserDetail detail : container.getUserDetails()) {\n+          Integer val = map.get(detail.getScript());\n+          if (val == null) {\n+            val = 0;\n+          }\n+          map.put(detail.getScript(), val + detail.getUsers());\n         }\n+      }\n     }\n-\n-    /**\n-     * @return the detailMap\n-     */\n-    public Map<Date, List<UserDetail>> getDetailMap() {\n-        return detailMap;\n-    }\n-\n-    /**\n-     * @return the userDetails\n-     */\n-    public List<UserDetail> getUserDetails() {\n-        return userDetails;\n-    }\n-\n-    /**\n-     * @return the reportTime\n-     */\n-    public Date getReportTime() {\n-        return reportTime;\n-    }\n-\n-    /**\n-     * @param reportTime\n-     *            the reportTime to set\n-     */\n-    public void setReportTime(Date reportTime) {\n-        this.reportTime = reportTime;\n-    }\n-\n-    /**\n-     * @return the jobId\n-     */\n-    public String getJobId() {\n-        return jobId;\n-    }\n-\n-    /**\n-     * @param jobId\n-     *            the jobId to set\n-     */\n-    public void setJobId(String jobId) {\n-        this.jobId = jobId;\n+    details = map.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).sorted()\n+      .collect(Collectors.toList());\n+    userDetails = details;\n+    detailMap.put(TimeUtil.normalizeToPeriod(15, new Date()), details);\n+    for (String s : toRemove) {\n+      containers.remove(s);\n     }\n+  }\n+\n+  /**\n+   * @return the detailMap\n+   */\n+  public Map<Date, List<UserDetail>> getDetailMap() {\n+    return detailMap;\n+  }\n+\n+  /**\n+   * @return the userDetails\n+   */\n+  public List<UserDetail> getUserDetails() {\n+    return userDetails;\n+  }\n+\n+  /**\n+   * @return the reportTime\n+   */\n+  public Date getReportTime() {\n+    return reportTime;\n+  }\n+\n+  /**\n+   * @param reportTime the reportTime to set\n+   */\n+  public void setReportTime(Date reportTime) {\n+    this.reportTime = reportTime;\n+  }\n+\n+  /**\n+   * @return the jobId\n+   */\n+  public String getJobId() {\n+    return jobId;\n+  }\n+\n+  /**\n+   * @param jobId the jobId to set\n+   */\n+  public void setJobId(String jobId) {\n+    this.jobId = jobId;\n+  }\n \n }\n",
            "diff_size": 145
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/123/ProjectStatusContainer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/123/ProjectStatusContainer.java\nindex 478c722aaed..49760b5da18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/123/ProjectStatusContainer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/123/ProjectStatusContainer.java\n@@ -149,4 +149,4 @@ public class ProjectStatusContainer implements Serializable {\n         this.jobId = jobId;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/123/ProjectStatusContainer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/123/ProjectStatusContainer.java\nindex 478c722aaed..3b9fcc69b41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/123/ProjectStatusContainer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/123/ProjectStatusContainer.java\n@@ -16,6 +16,8 @@ package com.intuit.tank.api.model.v1.cloud;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.Date;\n import java.util.HashMap;\n@@ -24,7 +26,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlElement;\n@@ -32,7 +33,6 @@ import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n-\n import com.intuit.tank.vm.settings.TimeUtil;\n \n /**\n@@ -41,13 +41,10 @@ import com.intuit.tank.vm.settings.TimeUtil;\n  * @author dangleton\n  * \n  */\n+\n @XmlRootElement(name = \"projectStatusContainer\", namespace = Namespace.NAMESPACE_V1)\n @XmlAccessorType(XmlAccessType.FIELD)\n-@XmlType(name = \"ProjectStatusContainer\", namespace = Namespace.NAMESPACE_V1, propOrder = {\n-        \"reportTime\",\n-        \"jobId\",\n-        \"userDetails\"\n-})\n+@XmlType(name = \"ProjectStatusContainer\", namespace = Namespace.NAMESPACE_V1, propOrder = { \"reportTime\", \"jobId\", \"userDetails\" })\n public class ProjectStatusContainer implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n@@ -71,14 +68,17 @@ public class ProjectStatusContainer implements Serializable {\n     /**\n      * @FrameworkUseOnly\n      */\n+\n     public ProjectStatusContainer() {\n     }\n \n+\n     public void addStatusContainer(CloudVmStatusContainer container) {\n         containers.put(container.getJobId(), container);\n         calculateUserDetails();\n     }\n \n+\n     public void calculateUserDetails() {\n         List<UserDetail> details;\n         Map<String, Integer> map = new HashMap<String, Integer>();\n@@ -97,9 +97,10 @@ public class ProjectStatusContainer implements Serializable {\n                 }\n             }\n         }\n-        details = map.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).sorted().collect(Collectors.toList());\n+        details = map.entrySet().stream().map(entry-> new UserDetail(entry.getKey(), entry.getValue())).sorted().collect(Collectors.toList());\n         userDetails = details;\n-        detailMap.put(TimeUtil.normalizeToPeriod(15, new Date()), details);\n+        detailMap.put(TimeUtil.normalizeToPeriod(15, new Date()),\n+details);\n         for (String s : toRemove) {\n             containers.remove(s);\n         }\n@@ -108,6 +109,8 @@ public class ProjectStatusContainer implements Serializable {\n     /**\n      * @return the detailMap\n      */\n+\n+\n     public Map<Date, List<UserDetail>> getDetailMap() {\n         return detailMap;\n     }\n@@ -115,6 +118,8 @@ public class ProjectStatusContainer implements Serializable {\n     /**\n      * @return the userDetails\n      */\n+\n+\n     public List<UserDetail> getUserDetails() {\n         return userDetails;\n     }\n@@ -122,6 +127,8 @@ public class ProjectStatusContainer implements Serializable {\n     /**\n      * @return the reportTime\n      */\n+\n+\n     public Date getReportTime() {\n         return reportTime;\n     }\n@@ -130,6 +137,8 @@ public class ProjectStatusContainer implements Serializable {\n      * @param reportTime\n      *            the reportTime to set\n      */\n+\n+\n     public void setReportTime(Date reportTime) {\n         this.reportTime = reportTime;\n     }\n@@ -137,6 +146,8 @@ public class ProjectStatusContainer implements Serializable {\n     /**\n      * @return the jobId\n      */\n+\n+\n     public String getJobId() {\n         return jobId;\n     }\n@@ -145,8 +156,10 @@ public class ProjectStatusContainer implements Serializable {\n      * @param jobId\n      *            the jobId to set\n      */\n+\n+\n     public void setJobId(String jobId) {\n         this.jobId = jobId;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}