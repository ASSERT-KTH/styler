{
    "project_name": "Angel-ML-angel",
    "error_id": "752",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/752/SparseFloatRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/752/SparseFloatRowUpdateSplit.java\nindex ef8c329521a..2ec437698c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/752/SparseFloatRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/752/SparseFloatRowUpdateSplit.java\n@@ -42,13 +42,13 @@ public class SparseFloatRowUpdateSplit extends RowUpdateSplit {\n   /**\r\n    * Create a new sparse float row split update\r\n    *\r\n-   * @param start start position\r\n-   * @param end end position\r\n+   * @param start   start position\r\n+   * @param end     end position\r\n    * @param offsets values indexes\r\n-   * @param values values of row update\r\n+   * @param values  values of row update\r\n    */\r\n   public SparseFloatRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      float[] values) {\r\n+                                   float[] values) {\r\n     super(rowIndex, RowType.T_FLOAT_SPARSE, start, end);\r\n     this.offsets = offsets;\r\n     this.values = values;\r\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/752/SparseFloatRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/752/SparseFloatRowUpdateSplit.java\nindex ef8c329521a..78eaa43450d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/752/SparseFloatRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/752/SparseFloatRowUpdateSplit.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.psagent.matrix.oplog.cache;\r\n \r\n import com.tencent.angel.ml.math2.VFactory;\r\n@@ -47,8 +46,7 @@ public class SparseFloatRowUpdateSplit extends RowUpdateSplit {\n    * @param offsets values indexes\r\n    * @param values values of row update\r\n    */\r\n-  public SparseFloatRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      float[] values) {\r\n+  public SparseFloatRowUpdateSplit(int rowIndex, int start, int end, int[] offsets, float[] values) {\r\n     super(rowIndex, RowType.T_FLOAT_SPARSE, start, end);\r\n     this.offsets = offsets;\r\n     this.values = values;\r\n@@ -123,10 +121,9 @@ public class SparseFloatRowUpdateSplit extends RowUpdateSplit {\n       }\r\n     }\r\n     return needUpdateItemNum;\r\n-  }\r\n-\r\n-\r\n-  @Override\r\n+  }\n+\n+@Override\r\n   public int bufferLen() {\r\n     if (splitContext.isEnableFilter()) {\r\n       return 4 + super.bufferLen() + getNeedUpdateItemNum() * 8;\r\n@@ -134,4 +131,4 @@ public class SparseFloatRowUpdateSplit extends RowUpdateSplit {\n       return 4 + super.bufferLen() + (end - start) * 8;\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/752/SparseFloatRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/752/SparseFloatRowUpdateSplit.java\nindex ef8c329521a..f6538f7f9ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/752/SparseFloatRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/752/SparseFloatRowUpdateSplit.java\n@@ -16,26 +16,28 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.psagent.matrix.oplog.cache;\r\n-\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntFloatVector;\r\n-import com.tencent.angel.ml.math2.utils.RowType;\r\n+package com.tencent.angel.psagent.matrix.oplog.cache;\n+\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntFloatVector;\n+import com.tencent.angel.ml.math2.utils.RowType;\n import io.netty.buffer.ByteBuf;\r\n \r\n /**\r\n  * Row split of sparse float row update\r\n- */\r\n+ */\n+\n public class SparseFloatRowUpdateSplit extends RowUpdateSplit {\r\n \r\n   /**\r\n    * indexes\r\n-   */\r\n+   */\n+\n   private int[] offsets;\r\n \r\n   /**\r\n    * values of row\r\n-   */\r\n+   */\n   private float[] values;\r\n \r\n \r\n@@ -46,92 +48,94 @@ public class SparseFloatRowUpdateSplit extends RowUpdateSplit {\n    * @param end end position\r\n    * @param offsets values indexes\r\n    * @param values values of row update\r\n-   */\r\n-  public SparseFloatRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      float[] values) {\r\n-    super(rowIndex, RowType.T_FLOAT_SPARSE, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n-\r\n-  public SparseFloatRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n+   */\n+\n+  public SparseFloatRowUpdateSplit(int rowIndex, int start, int end, int[] offsets, float[] values) {\n+    super(rowIndex, RowType.T_FLOAT_SPARSE, start, end);\n+    this.offsets = offsets;\n+    this.values = values;\n+  }\n+\n+  public SparseFloatRowUpdateSplit() {\n+    this(-1, -1, -1, null, null);\n   }\r\n \r\n   /**\r\n    * Get indexes of row values\r\n    *\r\n    * @return int[] indexes of row values\r\n-   */\r\n-  public int[] getOffsets() {\r\n-    return offsets;\r\n+   */\n+\n+  public int[] getOffsets() {\n+    return offsets;\n   }\r\n \r\n   /**\r\n    * Get row values\r\n    *\r\n    * @return float[] row values\r\n-   */\r\n-  public float[] getValues() {\r\n-    return values;\r\n-  }\r\n-\r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n-    int startCol = (int) splitContext.getPartKey().getStartCol();\r\n-    if (splitContext.isEnableFilter()) {\r\n-      float filterValue = (float) splitContext.getFilterThreshold();\r\n-      int position = buf.writerIndex();\r\n-      buf.writeInt(0);\r\n-      int needUpdateItemNum = 0;\r\n-      for (int i = start; i < end; i++) {\r\n-        if (Math.abs(values[i]) > filterValue) {\r\n-          buf.writeInt(offsets[i] - startCol);\r\n-          buf.writeFloat(values[i]);\r\n-          needUpdateItemNum++;\r\n-        }\r\n-      }\r\n-      buf.setInt(position, needUpdateItemNum);\r\n-    } else {\r\n-      buf.writeInt(end - start);\r\n-      for (int i = start; i < end; i++) {\r\n-        buf.writeInt(offsets[i] - startCol);\r\n-        buf.writeFloat(values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    vector = VFactory.sparseFloatVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-        size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      ((IntFloatVector) vector).set(buf.readInt(), buf.readFloat());\r\n-    }\r\n-  }\r\n-\r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    float filterValue = (float) splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n-    }\r\n-    return needUpdateItemNum;\r\n-  }\r\n-\r\n-\r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (splitContext.isEnableFilter()) {\r\n-      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 8;\r\n-    } else {\r\n-      return 4 + super.bufferLen() + (end - start) * 8;\r\n-    }\r\n-  }\r\n-}\r\n+   */\n+\n+  public float[] getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf buf) {\n+    super.serialize(buf);\n+\n+    int startCol = (int) splitContext.getPartKey().getStartCol();\n+    if (splitContext.isEnableFilter()) {\n+      float filterValue = (float) splitContext.getFilterThreshold();\n+      int position = buf.writerIndex();\n+      buf.writeInt(0);\n+\n+      int needUpdateItemNum = 0;\n+      for (int i = start; i < end; i++) {\n+        if (Math.abs(values[i]) > filterValue) {\n+          buf.writeInt(offsets[i] - startCol);\n+          buf.writeFloat(values[i]);\n+          needUpdateItemNum++;\n+        }\n+      }\n+      buf.setInt(position, needUpdateItemNum);\n+    } else {\n+      buf.writeInt(end - start);\n+      for (int i = start; i < end; i++) {\n+        buf.writeInt(offsets[i] - startCol);\n+        buf.writeFloat(values[i]);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+\n+    int size = buf.readInt();\n+    vector = VFactory.sparseFloatVector((int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()), size);\n+    for (int i = 0; i < size; i++) {\n+      ((IntFloatVector) vector).set(buf.readInt(), buf.readFloat());\n+    }\n+  }\n+\n+  private int getNeedUpdateItemNum() {\n+    int needUpdateItemNum = 0;\n+    float filterValue = (float) splitContext.getFilterThreshold();\n+    for (int i = start; i < end; i++) {\n+      if (Math.abs(values[i]) > filterValue) {\n+        needUpdateItemNum++;\n+      }\n+    }\n+    return needUpdateItemNum;\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    if (splitContext.isEnableFilter()) {\n+      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 8;\n+    } else {\n+      return 4 + super.bufferLen() + (end - start) * 8;\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 89
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}