{
    "project_name": "CESNET-perun",
    "error_id": "222",
    "information": {
        "errors": [
            {
                "line": "1235",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n\t                                                               List<String> data, String header, User sponsor,\n\t                                                               LocalDate validityTo, boolean sendActivationLink,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url) throws PrivilegeException;\n\n\t/**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/222/MembersManager.java\nindex b6165b7c520..769ea1fe2d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/222/MembersManager.java\n@@ -1232,8 +1232,7 @@ public interface MembersManager {\n \t */\n \tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n \t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url) throws PrivilegeException;\n+                                                                LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n \n \t/**\n \t * Creates new sponsored Members (with random generated passwords).\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/222/MembersManager.java\nindex b6165b7c520..86388d913a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/222/MembersManager.java\n@@ -44,1368 +44,1377 @@ import java.util.Map;\n  */\n public interface MembersManager {\n \n-\t/**\n-\t * Attribute which contains rules for membership expiration\n-\t */\n-\tString membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n-\n-\t/**\n-\t *  Deletes only member data  appropriated by member id.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Delete given members. It is possible to delete members from multiple vos.\n-\t *\n-\t * @param sess session\n-\t * @param members members that will be deleted\n-\t * @throws InternalErrorException internal error\n-\t * @throws MemberNotExistsException if any member doesn't exist\n-\t * @throws PrivilegeException insufficient permissions\n-\t * @throws MemberAlreadyRemovedException if already removed\n-\t */\n-\tvoid deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n-\n-\t/**\n-\t *  Deletes all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specific User\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service)\n-\t * @return newly created member (of specificUser)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specificUser\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service)\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member (of specific User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners,SpecificUserType specificUserType, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @param groups\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Find member of this Vo by his login in external source\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSource\n-\t * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tMember getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws VoNotExistsException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns members by their ids.\n-\t *\n-\t * @param perunSession\n-\t * @param ids\n-\t * @return list of members with specified ids\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids) throws PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his user and vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns members by his user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO members who have the status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get richMember without attribute by id of member\n-\t *\n-\t * @param sess\n-\t * @param id of member\n-\t * @return richMember without attributes (only with user)\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException if user has no rights to get this richMember\n-\t * @throws MemberNotExistsException if member not exists\n-\t */\n-\tRichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tRichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsDef list of attrDefs only for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param group to get richMembers from\n-\t * @param allowedStatuses only allowed statuses\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws AttributeNotExistsException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrNames.\n-\t * Attributes are defined by member (user) and resource (facility) objects.\n-\t * It returns also user-facility (in userAttributes of RichMember) and\n-\t * member-resource (in memberAttributes of RichMember) attributes.\n-\t * Members are defined by group and are filtered by list of allowed statuses.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t *\n-\t * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @return list of rich members, empty list if there are no members in Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return list of rich members, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count with defined status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the member VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member's VO\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tVo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t *  Set status of the member to specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status new status\n-\t * @return member with status set\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws MemberNotValidYetException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n-\n-\t/**\n-\t * Set date to which will be member suspended in his VO.\n-\t *\n-\t * For almost unlimited time please use time in the far future.\n-\t *\n-\t * @param sess\n-\t * @param member member who will be suspended\n-\t * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException if member not exists in Perun\n-\t */\n-\tvoid suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n-\t *\n-\t * WARNING: this will remove the date even if it is in the past (so member is no longer considered as suspended)\n-\t *\n-\t * @param sess\n-\t * @param member member for which the suspend state will be removed\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws MemberNotSuspendedException if member has not set date to which should be considered as suspended\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException;\n-\n-\n-\t/**\n-\t * Validate all attributes for member and set member's status to VALID.\n-\t * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n-\t * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Extend member membership using membershipExpirationRules attribute defined at VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tvoid extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t */\n-\tboolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, ExtendMembershipException, PrivilegeException;\n-\n-\t/**\n-\t * Get member by extSourceName, extSourceLogin and Vo\n-\t *\n-\t * @param sess\n-\t * @param extSourceName name of extSource\n-\t * @param extLogin login of user in extSource\n-\t * @param vo Vo where we are looking for member\n-\t * @return member\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns the date to which will be extended member's expiration time.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return date\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tDate getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException;\n-\n-\t/**\n-   * Returns the date to which will be extended member's expiration time.\n-   *\n-   * @param sess\n-   * @param vo\n-   * @param loa\n-   * @return date\n-   * @throws InternalErrorException\n-   * @throws VoNotExistsException\n-   * @throws ExtendMembershipException\n-   */\n-  Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz password reset.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace namespace to change password in (member must have login in it)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAttributeUrn urn of the attribute with stored mail\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException If not VO admin of member\n-\t * @throws MemberNotExistsException If member not exists\n-\t * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n-\t */\n-\tvoid sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz account activation.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace namespace to activate account in (member must have login in it)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAttributeUrn urn of the attribute with stored mail\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException If not VO admin of member\n-\t * @throws MemberNotExistsException If member not exists\n-\t * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n-\t */\n-\tvoid sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n-\n-\t/**\n-\t * Creates a new sponsored Member and its User.\n-\t * @param session actor\n-\t * @param vo virtual organization  for the member\n-\t * @param namespace namespace for selecting password module\n-\t * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n-\t * @param password  password\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @param sendActivationLink if true link for manual activation of account will be send to the email\n-\t *                           be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @return new Member in the Vo\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tRichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a sponsored membership for the given user.\n-\t *\n-\t * @param session actor\n-\t * @param vo virtual organization for the member\n-\t * @param userToBeSponsored user, that will be sponsored by sponsor\n-\t * @param namespace namespace for selecting password module\n-\t * @param password password\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException\n-\t * @throws PasswordStrengthException\n-\t * @throws InvalidLoginException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tRichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates new sponsored members using input from CSV file.\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n-\t * start over, exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo virtual organization to created sponsored members in\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param data csv file values separated by semicolon ';' characters\n-\t * @param header header to the given csv data, it should represent columns for the given data.\n-\t *               Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n-\t *               Optional values are - urn:perun:user:attribute-def:def:note\n-\t *               The order of the items doesn't matter.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to email which was set for him, be careful when using no-reply emails\n-\t * @param url base URL of Perun Instance\n-\t * @return map of names to map of status, login and password\n-\t * @throws PrivilegeException insufficient permissions\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n-\t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url) throws PrivilegeException;\n-\n-\t/**\n-\t * Creates new sponsored Members (with random generated passwords).\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n-\t * exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param session perun session\n-\t * @param vo vo for members\n-\t * @param namespace namespace for selecting password module\n-\t * @param names names of members to create, single name should have the format {firstName};{lastName} to be\n-\t *              parsed well\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to the email, be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @return map of names to map of status, login and password\n-\t * @throws PrivilegeException\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n-\n-\t/**\n-\t * Transform non-sponsored member to sponsored one with defined sponsor\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be set as sponsored one\n-\t * @param sponsor new sponsor of this member\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws MemberNotExistsException if member with defined id not exists in system Perun\n-\t * @throws AlreadySponsoredMemberException if member is already sponsored\n-\t * @throws UserNotInRoleException if sponsor hasn't right role in the same vo\n-\t * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n-\t * @throws PrivilegeException if not PerunAdmin\n-\t */\n-\tRichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException, PrivilegeException;\n-\n-\t/**\n-\t * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be unset from sponsoring\n-\t *\n-\t * @return non-sponsored member\n-\t *\n-\t * @throws MemberNotExistsException if member with defined id not exists in system Perun\n-\t * @throws MemberNotSponsoredException if member is not sponsored yet\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not PerunAdmin\n-\t */\n-\tRichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException;\n-\n-\t/**\n-\t * Assigns a new sponsor to an existing member.\n-\t * @param session actor\n-\t * @param sponsored existing member that needs sponsoring\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @return existing Member\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotSponsoredException\n-\t * @throws AlreadySponsorException\n-\t * @throws UserNotInRoleException\n-\t */\n-\tRichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n-\n-\t/**\n-\t * Get all sponsored RichMembers with attributes by list of attribute names for specific User and Vo.\n-\t *\n-\t * @param sess\n-\t * @param vo to specify Member for User\n-\t * @param user to specify Member for User\n-\t * @param attrNames list of attrNames - if empty, return richMembers without attributes\n-\t * @return list of sponsored rich members with attributes from the list\n-\t *\n-\t * @throws InternalErrorException if any internal error has occurred\n-\t * @throws AttributeNotExistsException if any attributeDefinition can't be found by one of attribute names\n-\t * @throws VoNotExistsException if Vo not exists in Perun\n-\t * @throws UserNotExistsException if User not exists in Perun\n-\t * @throws PrivilegeException if user in session is not allowed to call this method\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Gets list of members of a VO sponsored by the given user.\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @param user user of system\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @return list of members from given VO who are sponsored by the given user.\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Gets list of sponsored members of a VO.\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @return list of members from given VO who are sponsored\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Gets list of all sponsored members of a VO.\n-\t *\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws PrivilegeException insufficient permissions\n-\t * @return list of members from given VO who are sponsored\n-\t */\n-\tList<RichMember> getAllSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Gets list of sponsored members with sponsors.\n-\t *\n-\t * @param sess session\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @param attrNames list of attrNames for selected attributes\n-\t * @throws VoNotExistsException if given VO does not exist\n-\t * @throws PrivilegeException if not VOADMIN, VOOBSERVER, PERUNOBSERVER or SPONSOR\n-\t * @return list of members with sponsors\n-\t */\n-\tList<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n-\t * @param session actor\n-\t * @param sponsored existing member that is sponsored\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @return new expiration date\n-\t */\n-\tString extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws PrivilegeException, MemberNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Removes the sponsor.\n-\t *\n-\t * @param sess actor\n-\t * @param sponsoredMember existing member that is sponsored\n-\t * @param sponsorToRemove sponsoring user for removal\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t */\n-\tvoid removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException;\n-\n-\t/**\n-\t * Update the sponsorship of given member for given sponsor.\n-\t *\n-\t * @param sess session\n-\t * @param sponsoredMember sponsored member\n-\t * @param sponsor sponsor\n-\t * @param newValidity new validity, can be set to null never expire\n-\t * @throws PrivilegeException insufficient permissions\n-\t * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n-\t * @throws MemberNotExistsException if there is no such member\n-\t * @throws UserNotExistsException if there is no such user\n-\t */\n-\tvoid updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException, UserNotExistsException;\n+    /**\n+     * Attribute which contains rules for membership expiration\n+     */\n+    String membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n+\n+    /**\n+     * Deletes only member data  appropriated by member id.\n+     *\n+     * @param sess\n+     * @param member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     * @throws MemberAlreadyRemovedException\n+     */\n+    void deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n+\n+    /**\n+     * Delete given members. It is possible to delete members from multiple vos.\n+     *\n+     * @param sess    session\n+     * @param members members that will be deleted\n+     * @throws InternalErrorException        internal error\n+     * @throws MemberNotExistsException      if any member doesn't exist\n+     * @throws PrivilegeException            insufficient permissions\n+     * @throws MemberAlreadyRemovedException if already removed\n+     */\n+    void deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n+\n+    /**\n+     * Deletes all VO members.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws MemberAlreadyRemovedException\n+     */\n+    void deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n+\n+    /**\n+     * Creates a new member from candidate which is prepared for creating specific User\n+     * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate          prepared future specificUser\n+     * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+     * @param specificUserType   type of specific user (service)\n+     * @return newly created member (of specificUser)\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws UserNotExistsException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member from candidate which is prepared for creating specificUser\n+     * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate          prepared future specificUser\n+     * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+     * @param specificUserType   type of specific user (service)\n+     * @param groups             list of groups where member will be added too\n+     * @return newly created member (of specific User)\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws UserNotExistsException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param login         user's login within extSource\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param login         user's login within extSource\n+     * @param groups        list of groups where member will be added too\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param extSourceLoa  level of assurance\n+     * @param login         user's login within extSource\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param extSourceLoa  level of assurance\n+     * @param login         user's login within extSource\n+     * @param groups        list of groups where member will be added too\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param groups    list of groups where member will be added too\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member from user.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Creates a new member from user.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param groups list of groups where member will be added too\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+    /**\n+     * Create new member from user by login and ExtSource.\n+     *\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param extSource\n+     * @param login\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @throws VoNotExistsException\n+     * @throws ExtSourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Create new member from user by login and ExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param extSource\n+     * @param login\n+     * @param groups\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @throws VoNotExistsException\n+     * @throws ExtSourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Find member of this Vo by his login in external source\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @param userExtSource\n+     * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    Member getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws VoNotExistsException, MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns member by his id.\n+     *\n+     * @param sess\n+     * @param id\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns members by their ids.\n+     *\n+     * @param perunSession\n+     * @param ids\n+     * @return list of members with specified ids\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids) throws PrivilegeException;\n+\n+    /**\n+     * Returns member by his user and vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Returns members by his user.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException;\n+\n+    /**\n+     * Get all VO members.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return all members of the VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all VO members who have the status.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status\n+     * @return all members of the VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get richMember without attribute by id of member\n+     *\n+     * @param sess\n+     * @param id   of member\n+     * @return richMember without attributes (only with user)\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException       if user has no rights to get this richMember\n+     * @throws MemberNotExistsException if member not exists\n+     */\n+    RichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Get Member to RichMember with attributes.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsDef list of attrDefs only for selected attributes\n+     * @return list of richmembers\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n+     *\n+     * @param sess\n+     * @param group           to get richMembers from\n+     * @param allowedStatuses only allowed statuses\n+     * @return list of rich members with all member/user attributes, empty list if there are no members in group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of richmembers\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of richmembers\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws AttributeNotExistsException\n+     * @throws GroupNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @return list of richMembers with specific attributes from Vo\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n+     * status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @return list of richMembers with specific attributes from Vo\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the group.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * <p>\n+     * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so get richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param lookingInParentGroup\n+     * @return list of richMembers with specific attributes from Group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n+     * status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     * <p>\n+     * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so get richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param lookingInParentGroup\n+     * @return list of richMembers with specific attributes from group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrNames.\n+     * Attributes are defined by member (user) and resource (facility) objects.\n+     * It returns also user-facility (in userAttributes of RichMember) and\n+     * member-resource (in memberAttributes of RichMember) attributes.\n+     * Members are defined by group and are filtered by list of allowed statuses.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param resource\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @return list of richMembers with specific attributes\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws GroupNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupResourceMismatchException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n+\n+    /**\n+     * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param searchString\n+     * @param onlySponsored return only sponsored members\n+     * @return list of founded richMembers with specific attributes from Vo for searchString\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException;\n+\n+    /**\n+     * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * <p>\n+     * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so find richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param searchString\n+     * @param lookingInParentGroup\n+     * @return list of founded richMembers with specific attributes from Group for searchString\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     * <p>\n+     * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so find richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @param lookingInParentGroup\n+     * @return list of founded richMembers with specific attributes from Group for searchString\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsDef\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of rich members, empty list if there are no members in VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param group\n+     * @return list of rich members, empty list if there are no members in Group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status\n+     * @return list of rich members, empty list if there are no members in VO with specified status\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status\n+     * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get the VO members count.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return count of VO members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    int getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get the VO members count with defined status.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status\n+     * @return count of VO members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    int getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get the member VO.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member's VO\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Vo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException;\n+\n+    /**\n+     * Return list of members by the searchString under defined VO.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param searchString\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group        this group is used to get parent group, we are searching members of the parent group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group        this group is used to get parent group, we are searching members of the parent group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+     */\n+    List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+     */\n+    List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of rich members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of rich members with attributes\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Set status of the member to specified status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param status new status\n+     * @return member with status set\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws MemberNotValidYetException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws PrivilegeException\n+     */\n+    Member setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n+\n+    /**\n+     * Set date to which will be member suspended in his VO.\n+     * <p>\n+     * For almost unlimited time please use time in the far future.\n+     *\n+     * @param sess\n+     * @param member      member who will be suspended\n+     * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException if member not exists in Perun\n+     */\n+    void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n+     * <p>\n+     * WARNING: this will remove the date even if it is in the past (so member is no longer considered as suspended)\n+     *\n+     * @param sess\n+     * @param member member for which the suspend state will be removed\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws MemberNotSuspendedException if member has not set date to which should be considered as suspended\n+     * @throws PrivilegeException\n+     */\n+    void unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException;\n+\n+\n+    /**\n+     * Validate all attributes for member and set member's status to VALID.\n+     * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n+     * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member with new status set\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Member validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Extend member membership using membershipExpirationRules attribute defined at VO.\n+     *\n+     * @param sess\n+     * @param member\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    void extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n+\n+    /**\n+     * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    boolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param loa\n+     * @return true if user can be apply for membership to the VO\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     */\n+    boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param loa\n+     * @return true if user can be apply for membership to the VO\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, ExtendMembershipException, PrivilegeException;\n+\n+    /**\n+     * Get member by extSourceName, extSourceLogin and Vo\n+     *\n+     * @param sess\n+     * @param extSourceName name of extSource\n+     * @param extLogin      login of user in extSource\n+     * @param vo            Vo where we are looking for member\n+     * @return member\n+     * @throws ExtSourceNotExistsException\n+     * @throws UserExtSourceNotExistsException\n+     * @throws MemberNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns the date to which will be extended member's expiration time.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return date\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Date getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException;\n+\n+    /**\n+     * Returns the date to which will be extended member's expiration time.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param loa\n+     * @return date\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException;\n+\n+    /**\n+     * Send mail to user's preferred email address with link for non-authz password reset.\n+     * Correct authz information is stored in link's URL.\n+     *\n+     * @param sess             PerunSession\n+     * @param member           Member to get user to send link mail to\n+     * @param namespace        namespace to change password in (member must have login in it)\n+     * @param url              base URL of Perun instance\n+     * @param mailAttributeUrn urn of the attribute with stored mail\n+     * @param language         language of the message\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException                  If not VO admin of member\n+     * @throws MemberNotExistsException            If member not exists\n+     * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n+     */\n+    void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n+\n+    /**\n+     * Send mail to user's preferred email address with link for non-authz account activation.\n+     * Correct authz information is stored in link's URL.\n+     *\n+     * @param sess             PerunSession\n+     * @param member           Member to get user to send link mail to\n+     * @param namespace        namespace to activate account in (member must have login in it)\n+     * @param url              base URL of Perun instance\n+     * @param mailAttributeUrn urn of the attribute with stored mail\n+     * @param language         language of the message\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException                  If not VO admin of member\n+     * @throws MemberNotExistsException            If member not exists\n+     * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n+     */\n+    void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n+\n+    /**\n+     * Creates a new sponsored Member and its User.\n+     *\n+     * @param session            actor\n+     * @param vo                 virtual organization  for the member\n+     * @param namespace          namespace for selecting password module\n+     * @param name               a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n+     * @param password           password\n+     * @param email              (optional) preferred email that will be set to the created user. If no email\n+     *                           is provided, \"no-reply@muni.cz\" is used.\n+     * @param sponsor            sponsoring user or null for the caller\n+     * @param validityTo         last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @param sendActivationLink if true link for manual activation of account will be send to the email\n+     *                           be careful when using with empty (no-reply) email\n+     * @param url                base URL of Perun Instance\n+     * @return new Member in the Vo\n+     * @throws InternalErrorException                if given parameters are invalid\n+     * @throws PrivilegeException                    if not REGISTRAR or VOADMIN\n+     * @throws AlreadyMemberException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordCreationFailedException\n+     * @throws ExtendMembershipException\n+     * @throws WrongAttributeValueException\n+     * @throws ExtSourceNotExistsException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws UserNotInRoleException\n+     * @throws AlreadySponsorException\n+     */\n+    RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url)\n+            throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException,\n+            InvalidLoginException, AlreadySponsorException;\n+\n+    /**\n+     * Creates a sponsored membership for the given user.\n+     *\n+     * @param session           actor\n+     * @param vo                virtual organization for the member\n+     * @param userToBeSponsored user, that will be sponsored by sponsor\n+     * @param namespace         namespace for selecting password module\n+     * @param password          password\n+     * @param sponsor           sponsoring user or null for the caller\n+     * @param validityTo        last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @return sponsored member\n+     * @throws PrivilegeException\n+     * @throws AlreadyMemberException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordCreationFailedException\n+     * @throws ExtendMembershipException\n+     * @throws WrongAttributeValueException\n+     * @throws ExtSourceNotExistsException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws UserNotInRoleException\n+     * @throws PasswordStrengthException\n+     * @throws InvalidLoginException\n+     * @throws AlreadySponsorException\n+     */\n+    RichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo)\n+            throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException,\n+            InvalidLoginException, AlreadySponsorException;\n+\n+    /**\n+     * Creates new sponsored members using input from CSV file.\n+     * <p>\n+     * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n+     * start over, exceptions during member creation are not thrown and the returned map has this structure:\n+     * <p>\n+     * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+     * <p>\n+     * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+     * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+     * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+     *\n+     * @param sess               perun session\n+     * @param vo                 virtual organization to created sponsored members in\n+     * @param namespace          used for selecting external system in which guest user account will be created\n+     * @param data               csv file values separated by semicolon ';' characters\n+     * @param header             header to the given csv data, it should represent columns for the given data.\n+     *                           Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n+     *                           Optional values are - urn:perun:user:attribute-def:def:note\n+     *                           The order of the items doesn't matter.\n+     * @param sponsor            sponsoring user\n+     * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+     *                           to email which was set for him, be careful when using no-reply emails\n+     * @param url                base URL of Perun Instance\n+     * @return map of names to map of status, login and password\n+     * @throws PrivilegeException insufficient permissions\n+     */\n+    Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n+                                                                   List<String> data, String header, User sponsor,\n+                                                                   LocalDate validityTo, boolean sendActivationLink,\n+                                                                   String url) throws PrivilegeException;\n+\n+    /**\n+     * Creates new sponsored Members (with random generated passwords).\n+     * <p>\n+     * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n+     * exceptions during member creation are not thrown and the returned map has this structure:\n+     * <p>\n+     * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+     * <p>\n+     * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+     * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+     * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+     *\n+     * @param session            perun session\n+     * @param vo                 vo for members\n+     * @param namespace          namespace for selecting password module\n+     * @param names              names of members to create, single name should have the format {firstName};{lastName} to be\n+     *                           parsed well\n+     * @param email              (optional) preferred email that will be set to the created user. If no email\n+     *                           is provided, \"no-reply@muni.cz\" is used.\n+     * @param sponsor            sponsoring user or null for the caller\n+     * @param validityTo         last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+     *                           to the email, be careful when using with empty (no-reply) email\n+     * @param url                base URL of Perun Instance\n+     * @return map of names to map of status, login and password\n+     * @throws PrivilegeException\n+     */\n+    Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n+\n+    /**\n+     * Transform non-sponsored member to sponsored one with defined sponsor\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member who will be set as sponsored one\n+     * @param sponsor         new sponsor of this member\n+     * @param validityTo      last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @return sponsored member\n+     * @throws InternalErrorException          if given parameters are invalid\n+     * @throws MemberNotExistsException        if member with defined id not exists in system Perun\n+     * @throws AlreadySponsoredMemberException if member is already sponsored\n+     * @throws UserNotInRoleException          if sponsor hasn't right role in the same vo\n+     * @throws AlreadySponsorException         sponsoredMember is already sponsored by User and his sponsorship is still active\n+     * @throws PrivilegeException              if not PerunAdmin\n+     */\n+    RichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException, PrivilegeException;\n+\n+    /**\n+     * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member who will be unset from sponsoring\n+     * @return non-sponsored member\n+     * @throws MemberNotExistsException    if member with defined id not exists in system Perun\n+     * @throws MemberNotSponsoredException if member is not sponsored yet\n+     * @throws InternalErrorException      if given parameters are invalid\n+     * @throws PrivilegeException          if not PerunAdmin\n+     */\n+    RichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException;\n+\n+    /**\n+     * Assigns a new sponsor to an existing member.\n+     *\n+     * @param session    actor\n+     * @param sponsored  existing member that needs sponsoring\n+     * @param sponsor    sponsoring user or null for the caller\n+     * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @return existing Member\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotSponsoredException\n+     * @throws AlreadySponsorException\n+     * @throws UserNotInRoleException\n+     */\n+    RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n+\n+    /**\n+     * Get all sponsored RichMembers with attributes by list of attribute names for specific User and Vo.\n+     *\n+     * @param sess\n+     * @param vo        to specify Member for User\n+     * @param user      to specify Member for User\n+     * @param attrNames list of attrNames - if empty, return richMembers without attributes\n+     * @return list of sponsored rich members with attributes from the list\n+     * @throws InternalErrorException      if any internal error has occurred\n+     * @throws AttributeNotExistsException if any attributeDefinition can't be found by one of attribute names\n+     * @throws VoNotExistsException        if Vo not exists in Perun\n+     * @throws UserNotExistsException      if User not exists in Perun\n+     * @throws PrivilegeException          if user in session is not allowed to call this method\n+     */\n+    List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Gets list of members of a VO sponsored by the given user.\n+     *\n+     * @param sess actor\n+     * @param vo   virtual organization from which are the sponsored members chosen\n+     * @param user user of system\n+     * @return list of members from given VO who are sponsored by the given user.\n+     * @throws InternalErrorException if given parameters are invalid\n+     * @throws PrivilegeException     if not REGISTRAR or VOADMIN\n+     */\n+    List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Gets list of sponsored members of a VO.\n+     *\n+     * @param sess actor\n+     * @param vo   virtual organization from which are the sponsored members chosen\n+     * @return list of members from given VO who are sponsored\n+     * @throws InternalErrorException if given parameters are invalid\n+     * @throws PrivilegeException     if not REGISTRAR or VOADMIN\n+     */\n+    List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Gets list of all sponsored members of a VO.\n+     *\n+     * @param sess actor\n+     * @param vo   virtual organization from which are the sponsored members chosen\n+     * @return list of members from given VO who are sponsored\n+     * @throws PrivilegeException insufficient permissions\n+     */\n+    List<RichMember> getAllSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Gets list of sponsored members with sponsors.\n+     *\n+     * @param sess      session\n+     * @param vo        virtual organization from which are the sponsored members chosen\n+     * @param attrNames list of attrNames for selected attributes\n+     * @return list of members with sponsors\n+     * @throws VoNotExistsException if given VO does not exist\n+     * @throws PrivilegeException   if not VOADMIN, VOOBSERVER, PERUNOBSERVER or SPONSOR\n+     */\n+    List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException;\n+\n+    /**\n+     * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n+     *\n+     * @param session   actor\n+     * @param sponsored existing member that is sponsored\n+     * @param sponsor   sponsoring user or null for the caller\n+     * @return new expiration date\n+     * @throws InternalErrorException if given parameters are invalid\n+     * @throws PrivilegeException     if not REGISTRAR or VOADMIN\n+     */\n+    String extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws PrivilegeException, MemberNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Removes the sponsor.\n+     *\n+     * @param sess            actor\n+     * @param sponsoredMember existing member that is sponsored\n+     * @param sponsorToRemove sponsoring user for removal\n+     * @throws InternalErrorException if given parameters are invalid\n+     * @throws PrivilegeException     if not REGISTRAR or VOADMIN\n+     */\n+    void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException;\n+\n+    /**\n+     * Update the sponsorship of given member for given sponsor.\n+     *\n+     * @param sess            session\n+     * @param sponsoredMember sponsored member\n+     * @param sponsor         sponsor\n+     * @param newValidity     new validity, can be set to null never expire\n+     * @throws PrivilegeException               insufficient permissions\n+     * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n+     * @throws MemberNotExistsException         if there is no such member\n+     * @throws UserNotExistsException           if there is no such user\n+     */\n+    void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException, UserNotExistsException;\n }\n",
            "diff_size": 1373
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/222/MembersManager.java\nindex b6165b7c520..e39e1b22e5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/222/MembersManager.java\n@@ -29,7 +29,6 @@ import cz.metacentrum.perun.core.api.exceptions.UserNotInRoleException;\n import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n-\n import java.time.LocalDate;\n import java.util.Date;\n import java.util.List;\n@@ -42,1064 +41,1204 @@ import java.util.Map;\n  * @author Slavek Licehammer\n  * @author Zora Sebestianova\n  */\n+\n+\n public interface MembersManager {\n \n-\t/**\n-\t * Attribute which contains rules for membership expiration\n-\t */\n-\tString membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n-\n-\t/**\n-\t *  Deletes only member data  appropriated by member id.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Delete given members. It is possible to delete members from multiple vos.\n-\t *\n-\t * @param sess session\n-\t * @param members members that will be deleted\n-\t * @throws InternalErrorException internal error\n-\t * @throws MemberNotExistsException if any member doesn't exist\n-\t * @throws PrivilegeException insufficient permissions\n-\t * @throws MemberAlreadyRemovedException if already removed\n-\t */\n-\tvoid deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n-\n-\t/**\n-\t *  Deletes all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specific User\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service)\n-\t * @return newly created member (of specificUser)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specificUser\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service)\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member (of specific User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners,SpecificUserType specificUserType, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @param groups\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Find member of this Vo by his login in external source\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSource\n-\t * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tMember getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws VoNotExistsException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns members by their ids.\n-\t *\n-\t * @param perunSession\n-\t * @param ids\n-\t * @return list of members with specified ids\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids) throws PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his user and vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns members by his user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO members who have the status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get richMember without attribute by id of member\n-\t *\n-\t * @param sess\n-\t * @param id of member\n-\t * @return richMember without attributes (only with user)\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException if user has no rights to get this richMember\n-\t * @throws MemberNotExistsException if member not exists\n-\t */\n-\tRichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tRichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsDef list of attrDefs only for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param group to get richMembers from\n-\t * @param allowedStatuses only allowed statuses\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws AttributeNotExistsException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrNames.\n-\t * Attributes are defined by member (user) and resource (facility) objects.\n-\t * It returns also user-facility (in userAttributes of RichMember) and\n-\t * member-resource (in memberAttributes of RichMember) attributes.\n-\t * Members are defined by group and are filtered by list of allowed statuses.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t *\n-\t * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @return list of rich members, empty list if there are no members in Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return list of rich members, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count with defined status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the member VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member's VO\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tVo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t *  Set status of the member to specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status new status\n-\t * @return member with status set\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws MemberNotValidYetException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n-\n-\t/**\n-\t * Set date to which will be member suspended in his VO.\n-\t *\n-\t * For almost unlimited time please use time in the far future.\n-\t *\n-\t * @param sess\n-\t * @param member member who will be suspended\n-\t * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException if member not exists in Perun\n-\t */\n-\tvoid suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n-\t *\n-\t * WARNING: this will remove the date even if it is in the past (so member is no longer considered as suspended)\n-\t *\n-\t * @param sess\n-\t * @param member member for which the suspend state will be removed\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws MemberNotSuspendedException if member has not set date to which should be considered as suspended\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException;\n-\n-\n-\t/**\n-\t * Validate all attributes for member and set member's status to VALID.\n-\t * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n-\t * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Extend member membership using membershipExpirationRules attribute defined at VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tvoid extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t */\n-\tboolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, ExtendMembershipException, PrivilegeException;\n-\n-\t/**\n-\t * Get member by extSourceName, extSourceLogin and Vo\n-\t *\n-\t * @param sess\n-\t * @param extSourceName name of extSource\n-\t * @param extLogin login of user in extSource\n-\t * @param vo Vo where we are looking for member\n-\t * @return member\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns the date to which will be extended member's expiration time.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return date\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tDate getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException;\n-\n-\t/**\n+ /**\n+  * Attribute which contains rules for membership expiration\n+  */\n+\n+ String membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n+\n+ /**\n+  *  Deletes only member data  appropriated by member id.\n+  *\n+  * @param sess\n+  * @param member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  * @throws MemberAlreadyRemovedException\n+  */\n+\n+\n+ void deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n+\n+ /**\n+  * Delete given members. It is possible to delete members from multiple vos.\n+  *\n+  * @param sess session\n+  * @param members members that will be deleted\n+  * @throws InternalErrorException internal error\n+  * @throws MemberNotExistsException if any member doesn't exist\n+  * @throws PrivilegeException insufficient permissions\n+  * @throws MemberAlreadyRemovedException if already removed\n+  */\n+\n+\n+ void deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n+\n+ /**\n+  *  Deletes all VO members.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws MemberAlreadyRemovedException\n+  */\n+\n+\n+ void deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException;\n+\n+ /**\n+  * Creates a new member from candidate which is prepared for creating specific User\n+  * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate prepared future specificUser\n+  * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+  * @param specificUserType type of specific user (service)\n+  * @return newly created member (of specificUser)\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws UserNotExistsException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member from candidate which is prepared for creating specificUser\n+  * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate prepared future specificUser\n+  * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+  * @param specificUserType type of specific user (service)\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member (of specific User)\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws UserNotExistsException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param login user's login within extSource\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param login user's login within extSource\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param extSourceLoa level of assurance\n+  * @param login user's login within extSource\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param extSourceLoa level of assurance\n+  * @param login user's login within extSource\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param groups list of groups where member will be added too\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member from user.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Creates a new member from user.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException;\n+\n+ /**\n+  * Create new member from user by login and ExtSource.\n+  *\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param extSource\n+  * @param login\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @throws VoNotExistsException\n+  * @throws ExtSourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Create new member from user by login and ExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param extSource\n+  * @param login\n+  * @param groups\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @throws VoNotExistsException\n+  * @throws ExtSourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Find member of this Vo by his login in external source\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @param userExtSource\n+  * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ Member getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws VoNotExistsException, MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns member by his id.\n+  *\n+  * @param sess\n+  * @param id\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns members by their ids.\n+  *\n+  * @param perunSession\n+  * @param ids\n+  * @return list of members with specified ids\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids) throws PrivilegeException;\n+\n+ /**\n+  * Returns member by his user and vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Returns members by his user.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException;\n+\n+ /**\n+  * Get all VO members.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return all members of the VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all VO members who have the status.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status\n+  * @return all members of the VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get richMember without attribute by id of member\n+  *\n+  * @param sess\n+  * @param id of member\n+  * @return richMember without attributes (only with user)\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException if user has no rights to get this richMember\n+  * @throws MemberNotExistsException if member not exists\n+  */\n+\n+\n+ RichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Get Member to RichMember with attributes.\n+  * @param sess\n+  * @param member\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsDef list of attrDefs only for selected attributes\n+  * @return list of richmembers\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n+  *\n+  * @param sess\n+  * @param group to get richMembers from\n+  * @param allowedStatuses only allowed statuses\n+  * @return list of rich members with all member/user attributes, empty list if there are no members in group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of richmembers\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of richmembers\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws AttributeNotExistsException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @return list of richMembers with specific attributes from Vo\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n+  * status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @return list of richMembers with specific attributes from Vo\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the group.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so get richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param lookingInParentGroup\n+  * @return list of richMembers with specific attributes from Group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n+  * status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so get richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param lookingInParentGroup\n+  * @return list of richMembers with specific attributes from group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrNames.\n+  * Attributes are defined by member (user) and resource (facility) objects.\n+  * It returns also user-facility (in userAttributes of RichMember) and\n+  * member-resource (in memberAttributes of RichMember) attributes.\n+  * Members are defined by group and are filtered by list of allowed statuses.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param resource\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @return list of richMembers with specific attributes\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws GroupNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupResourceMismatchException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n+\n+ /**\n+  * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param searchString\n+  * @param onlySponsored return only sponsored members\n+  * @return list of founded richMembers with specific attributes from Vo for searchString\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess,\n+                                          Vo vo,\n+                                          List<String> attrsNames,\n+                                          String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  *\n+  * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException;\n+\n+ /**\n+  * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so find richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param searchString\n+  * @param lookingInParentGroup\n+  * @return list of founded richMembers with specific attributes from Group for searchString\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so find richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @param lookingInParentGroup\n+  * @return list of founded richMembers with specific attributes from Group for searchString\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsDef\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of rich members, empty list if there are no members in VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param group\n+  * @return list of rich members, empty list if there are no members in Group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status\n+  * @return list of rich members, empty list if there are no members in VO with specified status\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status\n+  * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get the VO members count.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return count of VO members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ int getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get the VO members count with defined status.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status\n+  * @return count of VO members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ int getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get the member VO.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member's VO\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Vo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException;\n+\n+ /**\n+  * Return list of members by the searchString under defined VO.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param searchString\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group this group is used to get parent group, we are searching members of the parent group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group this group is used to get parent group, we are searching members of the parent group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of rich members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of rich members with attributes\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  *  Set status of the member to specified status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param status new status\n+  * @return member with status set\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws MemberNotValidYetException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n+\n+ /**\n+  * Set date to which will be member suspended in his VO.\n+  *\n+  * For almost unlimited time please use time in the far future.\n+  *\n+  * @param sess\n+  * @param member member who will be suspended\n+  * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException if member not exists in Perun\n+  */\n+\n+\n+ void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n+  *\n+  * WARNING: this will remove the date even if it is in the past (so member is no longer considered as suspended)\n+  *\n+  * @param sess\n+  * @param member member for which the suspend state will be removed\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws MemberNotSuspendedException if member has not set date to which should be considered as suspended\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ void unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException;\n+\n+\n+ /**\n+  * Validate all attributes for member and set member's status to VALID.\n+  * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n+  * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member with new status set\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Extend member membership using membershipExpirationRules attribute defined at VO.\n+  *\n+  * @param sess\n+  * @param member\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ void extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n+\n+ /**\n+  * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ boolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n+  * @throws InternalErrorException\n+  * @throws ExtendMembershipException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param loa\n+  * @return true if user can be apply for membership to the VO\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param loa\n+  * @return true if user can be apply for membership to the VO\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, ExtendMembershipException, PrivilegeException;\n+\n+ /**\n+  * Get member by extSourceName, extSourceLogin and Vo\n+  *\n+  * @param sess\n+  * @param extSourceName name of extSource\n+  * @param extLogin login of user in extSource\n+  * @param vo Vo where we are looking for member\n+  * @return member\n+  * @throws ExtSourceNotExistsException\n+  * @throws UserExtSourceNotExistsException\n+  * @throws MemberNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns the date to which will be extended member's expiration time.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return date\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Date getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException;\n+\n+ /**\n    * Returns the date to which will be extended member's expiration time.\n    *\n    * @param sess\n@@ -1110,302 +1249,336 @@ public interface MembersManager {\n    * @throws VoNotExistsException\n    * @throws ExtendMembershipException\n    */\n-  Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz password reset.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace namespace to change password in (member must have login in it)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAttributeUrn urn of the attribute with stored mail\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException If not VO admin of member\n-\t * @throws MemberNotExistsException If member not exists\n-\t * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n-\t */\n-\tvoid sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz account activation.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace namespace to activate account in (member must have login in it)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAttributeUrn urn of the attribute with stored mail\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException If not VO admin of member\n-\t * @throws MemberNotExistsException If member not exists\n-\t * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n-\t */\n-\tvoid sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n-\n-\t/**\n-\t * Creates a new sponsored Member and its User.\n-\t * @param session actor\n-\t * @param vo virtual organization  for the member\n-\t * @param namespace namespace for selecting password module\n-\t * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n-\t * @param password  password\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @param sendActivationLink if true link for manual activation of account will be send to the email\n-\t *                           be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @return new Member in the Vo\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tRichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a sponsored membership for the given user.\n-\t *\n-\t * @param session actor\n-\t * @param vo virtual organization for the member\n-\t * @param userToBeSponsored user, that will be sponsored by sponsor\n-\t * @param namespace namespace for selecting password module\n-\t * @param password password\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException\n-\t * @throws PasswordStrengthException\n-\t * @throws InvalidLoginException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tRichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates new sponsored members using input from CSV file.\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n-\t * start over, exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo virtual organization to created sponsored members in\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param data csv file values separated by semicolon ';' characters\n-\t * @param header header to the given csv data, it should represent columns for the given data.\n-\t *               Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n-\t *               Optional values are - urn:perun:user:attribute-def:def:note\n-\t *               The order of the items doesn't matter.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to email which was set for him, be careful when using no-reply emails\n-\t * @param url base URL of Perun Instance\n-\t * @return map of names to map of status, login and password\n-\t * @throws PrivilegeException insufficient permissions\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n-\t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url) throws PrivilegeException;\n-\n-\t/**\n-\t * Creates new sponsored Members (with random generated passwords).\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n-\t * exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param session perun session\n-\t * @param vo vo for members\n-\t * @param namespace namespace for selecting password module\n-\t * @param names names of members to create, single name should have the format {firstName};{lastName} to be\n-\t *              parsed well\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to the email, be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @return map of names to map of status, login and password\n-\t * @throws PrivilegeException\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n-\n-\t/**\n-\t * Transform non-sponsored member to sponsored one with defined sponsor\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be set as sponsored one\n-\t * @param sponsor new sponsor of this member\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws MemberNotExistsException if member with defined id not exists in system Perun\n-\t * @throws AlreadySponsoredMemberException if member is already sponsored\n-\t * @throws UserNotInRoleException if sponsor hasn't right role in the same vo\n-\t * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n-\t * @throws PrivilegeException if not PerunAdmin\n-\t */\n-\tRichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException, PrivilegeException;\n-\n-\t/**\n-\t * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be unset from sponsoring\n-\t *\n-\t * @return non-sponsored member\n-\t *\n-\t * @throws MemberNotExistsException if member with defined id not exists in system Perun\n-\t * @throws MemberNotSponsoredException if member is not sponsored yet\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not PerunAdmin\n-\t */\n-\tRichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException;\n-\n-\t/**\n-\t * Assigns a new sponsor to an existing member.\n-\t * @param session actor\n-\t * @param sponsored existing member that needs sponsoring\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @return existing Member\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotSponsoredException\n-\t * @throws AlreadySponsorException\n-\t * @throws UserNotInRoleException\n-\t */\n-\tRichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n-\n-\t/**\n-\t * Get all sponsored RichMembers with attributes by list of attribute names for specific User and Vo.\n-\t *\n-\t * @param sess\n-\t * @param vo to specify Member for User\n-\t * @param user to specify Member for User\n-\t * @param attrNames list of attrNames - if empty, return richMembers without attributes\n-\t * @return list of sponsored rich members with attributes from the list\n-\t *\n-\t * @throws InternalErrorException if any internal error has occurred\n-\t * @throws AttributeNotExistsException if any attributeDefinition can't be found by one of attribute names\n-\t * @throws VoNotExistsException if Vo not exists in Perun\n-\t * @throws UserNotExistsException if User not exists in Perun\n-\t * @throws PrivilegeException if user in session is not allowed to call this method\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Gets list of members of a VO sponsored by the given user.\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @param user user of system\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @return list of members from given VO who are sponsored by the given user.\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Gets list of sponsored members of a VO.\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @return list of members from given VO who are sponsored\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Gets list of all sponsored members of a VO.\n-\t *\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws PrivilegeException insufficient permissions\n-\t * @return list of members from given VO who are sponsored\n-\t */\n-\tList<RichMember> getAllSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Gets list of sponsored members with sponsors.\n-\t *\n-\t * @param sess session\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @param attrNames list of attrNames for selected attributes\n-\t * @throws VoNotExistsException if given VO does not exist\n-\t * @throws PrivilegeException if not VOADMIN, VOOBSERVER, PERUNOBSERVER or SPONSOR\n-\t * @return list of members with sponsors\n-\t */\n-\tList<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n-\t * @param session actor\n-\t * @param sponsored existing member that is sponsored\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t * @return new expiration date\n-\t */\n-\tString extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws PrivilegeException, MemberNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Removes the sponsor.\n-\t *\n-\t * @param sess actor\n-\t * @param sponsoredMember existing member that is sponsored\n-\t * @param sponsorToRemove sponsoring user for removal\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException if not REGISTRAR or VOADMIN\n-\t */\n-\tvoid removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException;\n-\n-\t/**\n-\t * Update the sponsorship of given member for given sponsor.\n-\t *\n-\t * @param sess session\n-\t * @param sponsoredMember sponsored member\n-\t * @param sponsor sponsor\n-\t * @param newValidity new validity, can be set to null never expire\n-\t * @throws PrivilegeException insufficient permissions\n-\t * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n-\t * @throws MemberNotExistsException if there is no such member\n-\t * @throws UserNotExistsException if there is no such user\n-\t */\n-\tvoid updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException, UserNotExistsException;\n-}\n+\n+\n+ Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException;\n+\n+ /**\n+  * Send mail to user's preferred email address with link for non-authz password reset.\n+  * Correct authz information is stored in link's URL.\n+  *\n+  * @param sess PerunSession\n+  * @param member Member to get user to send link mail to\n+  * @param namespace namespace to change password in (member must have login in it)\n+  * @param url base URL of Perun instance\n+  * @param mailAttributeUrn urn of the attribute with stored mail\n+  * @param language language of the message\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException If not VO admin of member\n+  * @throws MemberNotExistsException If member not exists\n+  * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n+  */\n+\n+\n+ void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n+\n+ /**\n+  * Send mail to user's preferred email address with link for non-authz account activation.\n+  * Correct authz information is stored in link's URL.\n+  *\n+  * @param sess PerunSession\n+  * @param member Member to get user to send link mail to\n+  * @param namespace namespace to activate account in (member must have login in it)\n+  * @param url base URL of Perun instance\n+  * @param mailAttributeUrn urn of the attribute with stored mail\n+  * @param language language of the message\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException If not VO admin of member\n+  * @throws MemberNotExistsException If member not exists\n+  * @throws PasswordResetMailNotExistsException If the attribute with stored mail is not filled.\n+  */\n+\n+\n+ void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException;\n+\n+ /**\n+  * Creates a new sponsored Member and its User.\n+  * @param session actor\n+  * @param vo virtual organization  for the member\n+  * @param namespace namespace for selecting password module\n+  * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n+  * @param password  password\n+  * @param email (optional) preferred email that will be set to the created user. If no email\n+  *              is provided, \"no-reply@muni.cz\" is used.\n+  * @param sponsor sponsoring user or null for the caller\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  * @param sendActivationLink if true link for manual activation of account will be send to the email\n+  *                           be careful when using with empty (no-reply) email\n+  * @param url base URL of Perun Instance\n+  * @return new Member in the Vo\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException if not REGISTRAR or VOADMIN\n+  * @throws AlreadyMemberException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordCreationFailedException\n+  * @throws ExtendMembershipException\n+  * @throws WrongAttributeValueException\n+  * @throws ExtSourceNotExistsException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws UserNotInRoleException\n+  * @throws AlreadySponsorException\n+  */\n+\n+\n+ RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n+\n+ /**\n+  * Creates a sponsored membership for the given user.\n+  *\n+  * @param session actor\n+  * @param vo virtual organization for the member\n+  * @param userToBeSponsored user, that will be sponsored by sponsor\n+  * @param namespace namespace for selecting password module\n+  * @param password password\n+  * @param sponsor sponsoring user or null for the caller\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  *\n+  * @return sponsored member\n+  *\n+  * @throws PrivilegeException\n+  * @throws AlreadyMemberException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordCreationFailedException\n+  * @throws ExtendMembershipException\n+  * @throws WrongAttributeValueException\n+  * @throws ExtSourceNotExistsException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws UserNotInRoleException\n+  * @throws PasswordStrengthException\n+  * @throws InvalidLoginException\n+  * @throws AlreadySponsorException\n+  */\n+\n+\n+ RichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n+\n+ /**\n+  * Creates new sponsored members using input from CSV file.\n+  *\n+  * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n+  * start over, exceptions during member creation are not thrown and the returned map has this structure:\n+  *\n+  * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+  *\n+  * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+  * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+  * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+  *\n+  * @param sess perun session\n+  * @param vo virtual organization to created sponsored members in\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param data csv file values separated by semicolon ';' characters\n+  * @param header header to the given csv data, it should represent columns for the given data.\n+  *               Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n+  *               Optional values are - urn:perun:user:attribute-def:def:note\n+  *               The order of the items doesn't matter.\n+  * @param sponsor sponsoring user\n+  * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+  *                           to email which was set for him, be careful when using no-reply emails\n+  * @param url base URL of Perun Instance\n+  * @return map of names to map of status, login and password\n+  * @throws PrivilegeException insufficient permissions\n+  */\n+\n+\n+ Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace, List<String> data, String header, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n+\n+ /**\n+  * Creates new sponsored Members (with random generated passwords).\n+  *\n+  * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n+  * exceptions during member creation are not thrown and the returned map has this structure:\n+  *\n+  * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+  *\n+  * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+  * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+  * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+  *\n+  * @param session perun session\n+  * @param vo vo for members\n+  * @param namespace namespace for selecting password module\n+  * @param names names of members to create, single name should have the format {firstName};{lastName} to be\n+  *              parsed well\n+  * @param email (optional) preferred email that will be set to the created user. If no email\n+  *              is provided, \"no-reply@muni.cz\" is used.\n+  * @param sponsor sponsoring user or null for the caller\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+  *                           to the email, be careful when using with empty (no-reply) email\n+  * @param url base URL of Perun Instance\n+  * @return map of names to map of status, login and password\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n+\n+ /**\n+  * Transform non-sponsored member to sponsored one with defined sponsor\n+  *\n+  * @param session perun session\n+  * @param sponsoredMember member who will be set as sponsored one\n+  * @param sponsor new sponsor of this member\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  *\n+  * @return sponsored member\n+  *\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws MemberNotExistsException if member with defined id not exists in system Perun\n+  * @throws AlreadySponsoredMemberException if member is already sponsored\n+  * @throws UserNotInRoleException if sponsor hasn't right role in the same vo\n+  * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n+  * @throws PrivilegeException if not PerunAdmin\n+  */\n+\n+\n+ RichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException, PrivilegeException;\n+\n+ /**\n+  * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n+  *\n+  * @param session perun session\n+  * @param sponsoredMember member who will be unset from sponsoring\n+  *\n+  * @return non-sponsored member\n+  *\n+  * @throws MemberNotExistsException if member with defined id not exists in system Perun\n+  * @throws MemberNotSponsoredException if member is not sponsored yet\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException if not PerunAdmin\n+  */\n+\n+\n+ RichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException;\n+\n+ /**\n+  * Assigns a new sponsor to an existing member.\n+  * @param session actor\n+  * @param sponsored existing member that needs sponsoring\n+  * @param sponsor sponsoring user or null for the caller\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  * @return existing Member\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotSponsoredException\n+  * @throws AlreadySponsorException\n+  * @throws UserNotInRoleException\n+  */\n+\n+\n+ RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n+\n+ /**\n+  * Get all sponsored RichMembers with attributes by list of attribute names for specific User and Vo.\n+  *\n+  * @param sess\n+  * @param vo to specify Member for User\n+  * @param user to specify Member for User\n+  * @param attrNames list of attrNames - if empty, return richMembers without attributes\n+  * @return list of sponsored rich members with attributes from the list\n+  *\n+  * @throws InternalErrorException if any internal error has occurred\n+  * @throws AttributeNotExistsException if any attributeDefinition can't be found by one of attribute names\n+  * @throws VoNotExistsException if Vo not exists in Perun\n+  * @throws UserNotExistsException if User not exists in Perun\n+  * @throws PrivilegeException if user in session is not allowed to call this method\n+  */\n+\n+\n+ List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Gets list of members of a VO sponsored by the given user.\n+  * @param sess actor\n+  * @param vo virtual organization from which are the sponsored members chosen\n+  * @param user user of system\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException if not REGISTRAR or VOADMIN\n+  * @return list of members from given VO who are sponsored by the given user.\n+  */\n+\n+\n+ List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Gets list of sponsored members of a VO.\n+  * @param sess actor\n+  * @param vo virtual organization from which are the sponsored members chosen\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException if not REGISTRAR or VOADMIN\n+  * @return list of members from given VO who are sponsored\n+  */\n+\n+\n+ List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Gets list of all sponsored members of a VO.\n+  *\n+  * @param sess actor\n+  * @param vo virtual organization from which are the sponsored members chosen\n+  * @throws PrivilegeException insufficient permissions\n+  * @return list of members from given VO who are sponsored\n+  */\n+\n+\n+ List<RichMember> getAllSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Gets list of sponsored members with sponsors.\n+  *\n+  * @param sess session\n+  * @param vo virtual organization from which are the sponsored members chosen\n+  * @param attrNames list of attrNames for selected attributes\n+  * @throws VoNotExistsException if given VO does not exist\n+  * @throws PrivilegeException if not VOADMIN, VOOBSERVER, PERUNOBSERVER or SPONSOR\n+  * @return list of members with sponsors\n+  */\n+\n+\n+ List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException;\n+\n+ /**\n+  * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n+  * @param session actor\n+  * @param sponsored existing member that is sponsored\n+  * @param sponsor sponsoring user or null for the caller\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException if not REGISTRAR or VOADMIN\n+  * @return new expiration date\n+  */\n+\n+\n+ String extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws PrivilegeException, MemberNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Removes the sponsor.\n+  *\n+  * @param sess actor\n+  * @param sponsoredMember existing member that is sponsored\n+  * @param sponsorToRemove sponsoring user for removal\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException if not REGISTRAR or VOADMIN\n+  */\n+\n+\n+ void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException;\n+\n+ /**\n+  * Update the sponsorship of given member for given sponsor.\n+  *\n+  * @param sess session\n+  * @param sponsoredMember sponsored member\n+  * @param sponsor sponsor\n+  * @param newValidity new validity, can be set to null never expire\n+  * @throws PrivilegeException insufficient permissions\n+  * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n+  * @throws MemberNotExistsException if there is no such member\n+  * @throws UserNotExistsException if there is no such user\n+  */\n+\n+\n+ void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException, UserNotExistsException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1530
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/222/MembersManager.java\nindex b6165b7c520..769ea1fe2d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/222/MembersManager.java\n@@ -1232,8 +1232,7 @@ public interface MembersManager {\n \t */\n \tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n \t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url) throws PrivilegeException;\n+                                                                LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException;\n \n \t/**\n \t * Creates new sponsored Members (with random generated passwords).\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/222/MembersManager.java\nindex b6165b7c520..91102a04c93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/222/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/222/MembersManager.java\n@@ -1232,8 +1232,7 @@ public interface MembersManager {\n \t */\n \tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n \t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url) throws PrivilegeException;\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDate validityTo, boolean sendActivationLink,String url) throws PrivilegeException;\n \n \t/**\n \t * Creates new sponsored Members (with random generated passwords).\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}