{
    "project_name": "graphfoundation-ongdb",
    "error_id": "915",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "10",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "10",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/915/CausalClusterInProcessBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/915/CausalClusterInProcessBuilder.java\nindex 51798fd1135..a8c88bedaad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/915/CausalClusterInProcessBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/915/CausalClusterInProcessBuilder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.harness;\n \n import java.nio.file.Path;\n@@ -50,379 +51,379 @@ import static java.util.Collections.synchronizedList;\n public class CausalClusterInProcessBuilder\n {\n \n-    public static WithCores init()\n+  public static WithCores init()\n+  {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Step Builder to ensure that Cluster has all the required pieces\n+   * TODO: Add mapping methods to allow for core hosts and replicas to be unevenly distributed  between databases\n+   */\n+  public static class Builder implements WithCores, WithReplicas, WithLogger, WithPath, WithOptionalDatabasesAndPorts\n+  {\n+\n+    private int numCoreHosts;\n+    private int numReadReplicas;\n+    private Log log;\n+    private Path path;\n+    private PortPickingFactory portFactory = PortPickingFactory.DEFAULT;\n+    private List<String> databases = new ArrayList<>(Collections.singletonList(\"default\"));\n+\n+    public WithReplicas withCores(int n)\n     {\n-        return new Builder();\n+      numCoreHosts = n;\n+      return this;\n     }\n \n-    /**\n-     * Step Builder to ensure that Cluster has all the required pieces\n-     * TODO: Add mapping methods to allow for core hosts and replicas to be unevenly distributed  between databases\n-     */\n-    public static class Builder implements WithCores, WithReplicas, WithLogger, WithPath, WithOptionalDatabasesAndPorts\n+    public WithLogger withReplicas(int n)\n     {\n+      numReadReplicas = n;\n+      return this;\n+    }\n \n-        private int numCoreHosts;\n-        private int numReadReplicas;\n-        private Log log;\n-        private Path path;\n-        private PortPickingFactory portFactory = PortPickingFactory.DEFAULT;\n-        private List<String> databases = new ArrayList<>( Collections.singletonList( \"default\" ) );\n+    public WithPath withLogger(LogProvider l)\n+    {\n+      log = l.getLog(\"org.neo4j.harness.CausalCluster\");\n+      return this;\n+    }\n \n-        public WithReplicas withCores( int n )\n-        {\n-            numCoreHosts = n;\n-            return this;\n-        }\n+    public Builder atPath(Path p)\n+    {\n+      path = p;\n+      return this;\n+    }\n \n-        public WithLogger withReplicas( int n )\n-        {\n-            numReadReplicas = n;\n-            return this;\n-        }\n+    @Override\n+    public Builder withOptionalPortsStrategy(PortPickingStrategy s)\n+    {\n+      portFactory = new PortPickingFactory(s);\n+      return this;\n+    }\n \n-        public WithPath withLogger( LogProvider l )\n-        {\n-            log = l.getLog( \"org.neo4j.harness.CausalCluster\" );\n-            return this;\n-        }\n+    @Override\n+    public Builder withOptionalDatabases(List<String> databaseNames)\n+    {\n+      if (!databaseNames.isEmpty())\n+      {\n+        databases = databaseNames;\n+      }\n+      return this;\n+    }\n \n-        public Builder atPath( Path p )\n-        {\n-            path = p;\n-            return this;\n-        }\n+    public CausalCluster build()\n+    {\n+      int nDatabases = databases.size();\n+      if (nDatabases > numCoreHosts)\n+      {\n+        throw new IllegalArgumentException(\n+            \"You cannot have more databases than core hosts. Each database in the cluster must have at least 1 core \" + \"host. You have provided \" +\n+                nDatabases + \" databases and \" + numCoreHosts + \" core hosts.\");\n+      }\n+      return new CausalCluster(this);\n+    }\n+  }\n+\n+  /**\n+   * Builder step interfaces\n+   */\n+  interface WithCores\n+  {\n+    WithReplicas withCores(int n);\n+  }\n+\n+  interface WithReplicas\n+  {\n+    WithLogger withReplicas(int n);\n+  }\n+\n+  interface WithLogger\n+  {\n+    WithPath withLogger(LogProvider l);\n+  }\n+\n+  interface WithPath\n+  {\n+    Builder atPath(Path p);\n+  }\n+\n+  interface WithOptionalDatabasesAndPorts\n+  {\n+    Builder withOptionalPortsStrategy(PortPickingStrategy s);\n+\n+    Builder withOptionalDatabases(List<String> databaseNames);\n+  }\n+\n+  /**\n+   * Port picker functional interface\n+   */\n+  public interface PortPickingStrategy\n+  {\n+    int port(int offset, int id);\n+  }\n+\n+  /**\n+   * Port picker factory\n+   */\n+  public static final class PortPickingFactory\n+  {\n+    public static final PortPickingFactory DEFAULT = new PortPickingFactory((offset, id) -> offset + id);\n+\n+    private final PortPickingStrategy st;\n+\n+    public PortPickingFactory(PortPickingStrategy st)\n+    {\n+      this.st = st;\n+    }\n \n-        @Override\n-        public Builder withOptionalPortsStrategy( PortPickingStrategy s )\n-        {\n-            portFactory = new PortPickingFactory( s );\n-            return this;\n-        }\n+    int hazelcastPort(int coreId)\n+    {\n+      return st.port(55000, coreId);\n+    }\n \n-        @Override\n-        public Builder withOptionalDatabases( List<String> databaseNames )\n-        {\n-            if ( !databaseNames.isEmpty() )\n-            {\n-                databases = databaseNames;\n-            }\n-            return this;\n-        }\n-\n-        public CausalCluster build()\n-        {\n-            int nDatabases = databases.size();\n-            if ( nDatabases > numCoreHosts )\n-            {\n-                throw new IllegalArgumentException(\n-                        \"You cannot have more databases than core hosts. Each database in the cluster must have at least 1 core \" + \"host. You have provided \" +\n-                                nDatabases + \" databases and \" + numCoreHosts + \" core hosts.\" );\n-            }\n-            return new CausalCluster( this );\n-        }\n+    int txCorePort(int coreId)\n+    {\n+      return st.port(56000, coreId);\n     }\n \n-    /**\n-     * Builder step interfaces\n-     */\n-    interface WithCores\n+    int raftCorePort(int coreId)\n     {\n-        WithReplicas withCores( int n );\n+      return st.port(57000, coreId);\n     }\n \n-    interface WithReplicas\n+    int boltCorePort(int coreId)\n     {\n-        WithLogger withReplicas( int n );\n+      return st.port(58000, coreId);\n     }\n \n-    interface WithLogger\n+    int httpCorePort(int coreId)\n     {\n-        WithPath withLogger( LogProvider l );\n+      return st.port(59000, coreId);\n     }\n \n-    interface WithPath\n+    int httpsCorePort(int coreId)\n     {\n-        Builder atPath( Path p );\n+      return st.port(60000, coreId);\n     }\n \n-    interface WithOptionalDatabasesAndPorts\n+    int txReadReplicaPort(int replicaId)\n     {\n-        Builder withOptionalPortsStrategy( PortPickingStrategy s );\n+      return st.port(56500, replicaId);\n+    }\n \n-        Builder withOptionalDatabases( List<String> databaseNames );\n+    int boltReadReplicaPort(int replicaId)\n+    {\n+      return st.port(58500, replicaId);\n     }\n \n-    /**\n-     * Port picker functional interface\n-     */\n-    public interface PortPickingStrategy\n+    int httpReadReplicaPort(int replicaId)\n     {\n-        int port( int offset, int id );\n+      return st.port(59500, replicaId);\n     }\n \n-    /**\n-     * Port picker factory\n-     */\n-    public static final class PortPickingFactory\n+    int httpsReadReplicaPort(int replicaId)\n+    {\n+      return st.port(60500, replicaId);\n+    }\n+  }\n+\n+  /**\n+   * Implementation of in process Cluster\n+   */\n+  static class CausalCluster\n+  {\n+    private final int nCores;\n+    private final int nReplicas;\n+    private final int nDatabases;\n+    private final List<String> databaseNames;\n+    private final Path clusterPath;\n+    private final Log log;\n+    private final PortPickingFactory portFactory;\n+\n+    private List<ServerControls> coreControls = synchronizedList(new ArrayList<>());\n+    private List<ServerControls> replicaControls = synchronizedList(new ArrayList<>());\n+\n+    private CausalCluster(CausalClusterInProcessBuilder.Builder bldr)\n     {\n-        public static final PortPickingFactory DEFAULT = new PortPickingFactory( ( offset, id ) -> offset + id );\n+      this.nCores = bldr.numCoreHosts;\n+      this.nReplicas = bldr.numReadReplicas;\n+      this.clusterPath = bldr.path;\n+      this.log = bldr.log;\n+      this.portFactory = bldr.portFactory;\n+      this.nDatabases = bldr.databases.size();\n+      this.databaseNames = bldr.databases;\n+    }\n \n-        private final PortPickingStrategy st;\n+    private Map<Integer, String> distributeHostsBetweenDatabases(int nHosts, List<String> databases)\n+    {\n+      //Max number of hosts per database is (nHosts / nDatabases) or (nHosts / nDatabases) + 1\n+      int nDatabases = databases.size();\n+      int maxCapacity = (nHosts % nDatabases == 0) ? (nHosts / nDatabases) : (nHosts / nDatabases) + 1;\n \n-        public PortPickingFactory( PortPickingStrategy st )\n-        {\n-            this.st = st;\n-        }\n+      List<String> repeated =\n+          databases.stream().flatMap(db -> IntStream.range(0, maxCapacity).mapToObj(ignored -> db)).collect(Collectors.toList());\n \n-        int hazelcastPort( int coreId )\n-        {\n-            return st.port( 55000, coreId );\n-        }\n+      Map<Integer, String> mapping = new HashMap<>(nHosts);\n \n-        int txCorePort( int coreId )\n-        {\n-            return st.port( 56000, coreId );\n-        }\n+      for (int hostId = 0; hostId < nHosts; hostId++)\n+      {\n+        mapping.put(hostId, repeated.get(hostId));\n+      }\n+      return mapping;\n+    }\n \n-        int raftCorePort( int coreId )\n-        {\n-            return st.port( 57000, coreId );\n-        }\n+    void boot() throws InterruptedException\n+    {\n+      List<String> initialMembers = new ArrayList<>(nCores);\n \n-        int boltCorePort( int coreId )\n-        {\n-            return st.port( 58000, coreId );\n-        }\n+      Map<Integer, String> initialMembersToDatabase = distributeHostsBetweenDatabases(nCores, databaseNames);\n \n-        int httpCorePort( int coreId )\n-        {\n-            return st.port( 59000, coreId );\n-        }\n+      for (int coreId = 0; coreId < nCores; coreId++)\n+      {\n+        int hazelcastPort = portFactory.hazelcastPort(coreId);\n+        initialMembers.add(\"localhost:\" + hazelcastPort);\n+      }\n \n-        int httpsCorePort( int coreId )\n-        {\n-            return st.port( 60000, coreId );\n-        }\n+      List<Thread> coreThreads = new ArrayList<>();\n+      List<Thread> replicaThreads = new ArrayList<>();\n \n-        int txReadReplicaPort( int replicaId )\n-        {\n-            return st.port( 56500, replicaId );\n-        }\n+      for (int coreId = 0; coreId < nCores; coreId++)\n+      {\n+        int hazelcastPort = portFactory.hazelcastPort(coreId);\n+        int txPort = portFactory.txCorePort(coreId);\n+        int raftPort = portFactory.raftCorePort(coreId);\n+        int boltPort = portFactory.boltCorePort(coreId);\n+        int httpPort = portFactory.httpCorePort(coreId);\n+        int httpsPort = portFactory.httpsCorePort(coreId);\n \n-        int boltReadReplicaPort( int replicaId )\n-        {\n-            return st.port( 58500, replicaId );\n-        }\n+        String homeDir = \"core-\" + coreId;\n+        TestServerBuilder builder = new EnterpriseInProcessServerBuilder(clusterPath.toFile(), homeDir);\n \n-        int httpReadReplicaPort( int replicaId )\n-        {\n-            return st.port( 59500, replicaId );\n-        }\n+        String homePath = Paths.get(clusterPath.toString(), homeDir).toAbsolutePath().toString();\n+        builder.withConfig(GraphDatabaseSettings.neo4j_home.name(), homePath);\n+        builder.withConfig(GraphDatabaseSettings.pagecache_memory.name(), \"8m\");\n \n-        int httpsReadReplicaPort( int replicaId )\n-        {\n-            return st.port( 60500, replicaId );\n-        }\n-    }\n+        builder.withConfig(EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.CORE.name());\n+        builder.withConfig(CausalClusteringSettings.multi_dc_license.name(), \"true\");\n+        builder.withConfig(CausalClusteringSettings.initial_discovery_members.name(), String.join(\",\", initialMembers));\n \n-    /**\n-     * Implementation of in process Cluster\n-     */\n-    static class CausalCluster\n-    {\n-        private final int nCores;\n-        private final int nReplicas;\n-        private final int nDatabases;\n-        private final List<String> databaseNames;\n-        private final Path clusterPath;\n-        private final Log log;\n-        private final PortPickingFactory portFactory;\n-\n-        private List<ServerControls> coreControls = synchronizedList( new ArrayList<>() );\n-        private List<ServerControls> replicaControls = synchronizedList( new ArrayList<>() );\n-\n-        private CausalCluster( CausalClusterInProcessBuilder.Builder bldr )\n-        {\n-            this.nCores = bldr.numCoreHosts;\n-            this.nReplicas = bldr.numReadReplicas;\n-            this.clusterPath = bldr.path;\n-            this.log = bldr.log;\n-            this.portFactory = bldr.portFactory;\n-            this.nDatabases = bldr.databases.size();\n-            this.databaseNames = bldr.databases;\n-        }\n-\n-        private Map<Integer,String> distributeHostsBetweenDatabases( int nHosts, List<String> databases )\n-        {\n-            //Max number of hosts per database is (nHosts / nDatabases) or (nHosts / nDatabases) + 1\n-            int nDatabases = databases.size();\n-            int maxCapacity = ( nHosts % nDatabases == 0 ) ? (nHosts / nDatabases) : (nHosts / nDatabases) + 1;\n+        builder.withConfig(CausalClusteringSettings.discovery_listen_address.name(), specifyPortOnly(hazelcastPort));\n+        builder.withConfig(CausalClusteringSettings.transaction_listen_address.name(), specifyPortOnly(txPort));\n+        builder.withConfig(CausalClusteringSettings.raft_listen_address.name(), specifyPortOnly(raftPort));\n \n-            List<String> repeated =\n-                    databases.stream().flatMap( db -> IntStream.range( 0, maxCapacity ).mapToObj( ignored -> db ) ).collect( Collectors.toList() );\n+        builder.withConfig(CausalClusteringSettings.database.name(), initialMembersToDatabase.get(coreId));\n \n-            Map<Integer,String> mapping = new HashMap<>( nHosts );\n+        builder.withConfig(CausalClusteringSettings.minimum_core_cluster_size_at_formation.name(), String.valueOf(nCores));\n+        builder.withConfig(CausalClusteringSettings.minimum_core_cluster_size_at_runtime.name(), String.valueOf(nCores));\n+        builder.withConfig(CausalClusteringSettings.server_groups.name(), \"core,\" + \"core\" + coreId);\n+        configureConnectors(boltPort, httpPort, httpsPort, builder);\n \n-            for ( int hostId = 0; hostId < nHosts; hostId++ )\n-            {\n-                mapping.put( hostId, repeated.get( hostId ) );\n-            }\n-            return mapping;\n-        }\n+        builder.withConfig(ServerSettings.jmx_module_enabled.name(), Settings.FALSE);\n \n-        void boot() throws InterruptedException\n-        {\n-            List<String> initialMembers = new ArrayList<>( nCores );\n-\n-            Map<Integer,String> initialMembersToDatabase = distributeHostsBetweenDatabases( nCores, databaseNames );\n-\n-            for ( int coreId = 0; coreId < nCores; coreId++ )\n-            {\n-                int hazelcastPort = portFactory.hazelcastPort( coreId );\n-                initialMembers.add( \"localhost:\" + hazelcastPort );\n-            }\n-\n-            List<Thread> coreThreads = new ArrayList<>();\n-            List<Thread> replicaThreads = new ArrayList<>();\n-\n-            for ( int coreId = 0; coreId < nCores; coreId++ )\n-            {\n-                int hazelcastPort = portFactory.hazelcastPort( coreId );\n-                int txPort = portFactory.txCorePort( coreId );\n-                int raftPort = portFactory.raftCorePort( coreId );\n-                int boltPort = portFactory.boltCorePort( coreId );\n-                int httpPort = portFactory.httpCorePort( coreId );\n-                int httpsPort = portFactory.httpsCorePort( coreId );\n-\n-                String homeDir = \"core-\" + coreId;\n-                TestServerBuilder builder = new EnterpriseInProcessServerBuilder( clusterPath.toFile(), homeDir );\n-\n-                String homePath = Paths.get( clusterPath.toString(), homeDir ).toAbsolutePath().toString();\n-                builder.withConfig( GraphDatabaseSettings.neo4j_home.name(), homePath );\n-                builder.withConfig( GraphDatabaseSettings.pagecache_memory.name(), \"8m\" );\n-\n-                builder.withConfig( EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.CORE.name() );\n-                builder.withConfig( CausalClusteringSettings.multi_dc_license.name(), \"true\" );\n-                builder.withConfig( CausalClusteringSettings.initial_discovery_members.name(), String.join( \",\", initialMembers ) );\n-\n-                builder.withConfig( CausalClusteringSettings.discovery_listen_address.name(), specifyPortOnly( hazelcastPort ) );\n-                builder.withConfig( CausalClusteringSettings.transaction_listen_address.name(), specifyPortOnly( txPort ) );\n-                builder.withConfig( CausalClusteringSettings.raft_listen_address.name(), specifyPortOnly( raftPort ) );\n-\n-                builder.withConfig( CausalClusteringSettings.database.name(), initialMembersToDatabase.get( coreId ) );\n-\n-                builder.withConfig( CausalClusteringSettings.minimum_core_cluster_size_at_formation.name(), String.valueOf( nCores ) );\n-                builder.withConfig( CausalClusteringSettings.minimum_core_cluster_size_at_runtime.name(), String.valueOf( nCores ) );\n-                builder.withConfig( CausalClusteringSettings.server_groups.name(), \"core,\" + \"core\" + coreId );\n-                configureConnectors( boltPort, httpPort, httpsPort, builder );\n-\n-                builder.withConfig( ServerSettings.jmx_module_enabled.name(), Settings.FALSE );\n-\n-                builder.withConfig( OnlineBackupSettings.online_backup_enabled, Settings.FALSE );\n-\n-                int finalCoreId = coreId;\n-                Thread coreThread = new Thread( () ->\n-                {\n-                    coreControls.add( builder.newServer() );\n-                    log.info( \"Core \" + finalCoreId + \" started.\" );\n-                } );\n-                coreThreads.add( coreThread );\n-                coreThread.start();\n-            }\n-\n-            for ( Thread coreThread : coreThreads )\n-            {\n-                coreThread.join();\n-            }\n-\n-            Map<Integer,String> replicasToDatabase = distributeHostsBetweenDatabases( nReplicas, databaseNames );\n-\n-            for ( int replicaId = 0; replicaId < nReplicas; replicaId++ )\n-            {\n-                int txPort = portFactory.txReadReplicaPort( replicaId );\n-                int boltPort = portFactory.boltReadReplicaPort( replicaId );\n-                int httpPort = portFactory.httpReadReplicaPort( replicaId );\n-                int httpsPort = portFactory.httpsReadReplicaPort( replicaId );\n-\n-                String homeDir = \"replica-\" + replicaId;\n-                TestServerBuilder builder = new EnterpriseInProcessServerBuilder( clusterPath.toFile(), homeDir );\n-\n-                String homePath = Paths.get( clusterPath.toString(), homeDir ).toAbsolutePath().toString();\n-                builder.withConfig( GraphDatabaseSettings.neo4j_home.name(), homePath );\n-                builder.withConfig( GraphDatabaseSettings.pagecache_memory.name(), \"8m\" );\n-\n-                builder.withConfig( EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.READ_REPLICA.name() );\n-                builder.withConfig( CausalClusteringSettings.initial_discovery_members.name(), String.join( \",\", initialMembers ) );\n-                builder.withConfig( CausalClusteringSettings.transaction_listen_address.name(), specifyPortOnly( txPort ) );\n-\n-                builder.withConfig( CausalClusteringSettings.database.name(), replicasToDatabase.get( replicaId ) );\n-\n-                builder.withConfig( CausalClusteringSettings.server_groups.name(), \"replica,\" + \"replica\" + replicaId );\n-                configureConnectors( boltPort, httpPort, httpsPort, builder );\n-\n-                builder.withConfig( ServerSettings.jmx_module_enabled.name(), Settings.FALSE );\n-\n-                builder.withConfig( OnlineBackupSettings.online_backup_enabled, Settings.FALSE );\n-                int finalReplicaId = replicaId;\n-                Thread replicaThread = new Thread( () ->\n-                {\n-                    replicaControls.add( builder.newServer() );\n-                    log.info( \"Read replica \" + finalReplicaId + \" started.\" );\n-                } );\n-                replicaThreads.add( replicaThread );\n-                replicaThread.start();\n-            }\n-\n-            for ( Thread replicaThread : replicaThreads )\n-            {\n-                replicaThread.join();\n-            }\n-        }\n-\n-        private static String specifyPortOnly( int port )\n-        {\n-            return \":\" + port;\n-        }\n+        builder.withConfig(OnlineBackupSettings.online_backup_enabled, Settings.FALSE);\n \n-        private static void configureConnectors( int boltPort, int httpPort, int httpsPort, TestServerBuilder builder )\n-        {\n-            builder.withConfig( new BoltConnector( \"bolt\" ).type.name(), \"BOLT\" );\n-            builder.withConfig( new BoltConnector( \"bolt\" ).enabled.name(), \"true\" );\n-            builder.withConfig( new BoltConnector( \"bolt\" ).listen_address.name(), specifyPortOnly( boltPort ) );\n-            builder.withConfig( new BoltConnector( \"bolt\" ).advertised_address.name(), specifyPortOnly( boltPort ) );\n-\n-            builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).type.name(), \"HTTP\" );\n-            builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).enabled.name(), \"true\" );\n-            builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).listen_address.name(), specifyPortOnly( httpPort ) );\n-            builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).advertised_address.name(), specifyPortOnly( httpPort ) );\n-\n-            builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).type.name(), \"HTTP\" );\n-            builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).enabled.name(), \"true\" );\n-            builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).listen_address.name(), specifyPortOnly( httpsPort ) );\n-            builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).advertised_address.name(), specifyPortOnly( httpsPort ) );\n-        }\n-\n-        void shutdown() throws InterruptedException\n+        int finalCoreId = coreId;\n+        Thread coreThread = new Thread(() ->\n         {\n-            shutdownControls( replicaControls );\n-            shutdownControls( coreControls );\n-        }\n+          coreControls.add(builder.newServer());\n+          log.info(\"Core \" + finalCoreId + \" started.\");\n+        });\n+        coreThreads.add(coreThread);\n+        coreThread.start();\n+      }\n+\n+      for (Thread coreThread : coreThreads)\n+      {\n+        coreThread.join();\n+      }\n+\n+      Map<Integer, String> replicasToDatabase = distributeHostsBetweenDatabases(nReplicas, databaseNames);\n+\n+      for (int replicaId = 0; replicaId < nReplicas; replicaId++)\n+      {\n+        int txPort = portFactory.txReadReplicaPort(replicaId);\n+        int boltPort = portFactory.boltReadReplicaPort(replicaId);\n+        int httpPort = portFactory.httpReadReplicaPort(replicaId);\n+        int httpsPort = portFactory.httpsReadReplicaPort(replicaId);\n+\n+        String homeDir = \"replica-\" + replicaId;\n+        TestServerBuilder builder = new EnterpriseInProcessServerBuilder(clusterPath.toFile(), homeDir);\n \n-        private void shutdownControls( Iterable<? extends ServerControls> controls ) throws InterruptedException\n+        String homePath = Paths.get(clusterPath.toString(), homeDir).toAbsolutePath().toString();\n+        builder.withConfig(GraphDatabaseSettings.neo4j_home.name(), homePath);\n+        builder.withConfig(GraphDatabaseSettings.pagecache_memory.name(), \"8m\");\n+\n+        builder.withConfig(EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.READ_REPLICA.name());\n+        builder.withConfig(CausalClusteringSettings.initial_discovery_members.name(), String.join(\",\", initialMembers));\n+        builder.withConfig(CausalClusteringSettings.transaction_listen_address.name(), specifyPortOnly(txPort));\n+\n+        builder.withConfig(CausalClusteringSettings.database.name(), replicasToDatabase.get(replicaId));\n+\n+        builder.withConfig(CausalClusteringSettings.server_groups.name(), \"replica,\" + \"replica\" + replicaId);\n+        configureConnectors(boltPort, httpPort, httpsPort, builder);\n+\n+        builder.withConfig(ServerSettings.jmx_module_enabled.name(), Settings.FALSE);\n+\n+        builder.withConfig(OnlineBackupSettings.online_backup_enabled, Settings.FALSE);\n+        int finalReplicaId = replicaId;\n+        Thread replicaThread = new Thread(() ->\n         {\n-            Collection<Thread> threads = new ArrayList<>();\n-            for ( ServerControls control : controls )\n-            {\n-                Thread thread = new Thread( control::close );\n-                threads.add( thread );\n-                thread.start();\n-            }\n-\n-            for ( Thread thread : threads )\n-            {\n-                thread.join();\n-            }\n-        }\n+          replicaControls.add(builder.newServer());\n+          log.info(\"Read replica \" + finalReplicaId + \" started.\");\n+        });\n+        replicaThreads.add(replicaThread);\n+        replicaThread.start();\n+      }\n+\n+      for (Thread replicaThread : replicaThreads)\n+      {\n+        replicaThread.join();\n+      }\n+    }\n+\n+    private static String specifyPortOnly(int port)\n+    {\n+      return \":\" + port;\n+    }\n+\n+    private static void configureConnectors(int boltPort, int httpPort, int httpsPort, TestServerBuilder builder)\n+    {\n+      builder.withConfig(new BoltConnector(\"bolt\").type.name(), \"BOLT\");\n+      builder.withConfig(new BoltConnector(\"bolt\").enabled.name(), \"true\");\n+      builder.withConfig(new BoltConnector(\"bolt\").listen_address.name(), specifyPortOnly(boltPort));\n+      builder.withConfig(new BoltConnector(\"bolt\").advertised_address.name(), specifyPortOnly(boltPort));\n+\n+      builder.withConfig(new HttpConnector(\"http\", HttpConnector.Encryption.NONE).type.name(), \"HTTP\");\n+      builder.withConfig(new HttpConnector(\"http\", HttpConnector.Encryption.NONE).enabled.name(), \"true\");\n+      builder.withConfig(new HttpConnector(\"http\", HttpConnector.Encryption.NONE).listen_address.name(), specifyPortOnly(httpPort));\n+      builder.withConfig(new HttpConnector(\"http\", HttpConnector.Encryption.NONE).advertised_address.name(), specifyPortOnly(httpPort));\n+\n+      builder.withConfig(new HttpConnector(\"https\", HttpConnector.Encryption.TLS).type.name(), \"HTTP\");\n+      builder.withConfig(new HttpConnector(\"https\", HttpConnector.Encryption.TLS).enabled.name(), \"true\");\n+      builder.withConfig(new HttpConnector(\"https\", HttpConnector.Encryption.TLS).listen_address.name(), specifyPortOnly(httpsPort));\n+      builder.withConfig(new HttpConnector(\"https\", HttpConnector.Encryption.TLS).advertised_address.name(), specifyPortOnly(httpsPort));\n+    }\n+\n+    void shutdown() throws InterruptedException\n+    {\n+      shutdownControls(replicaControls);\n+      shutdownControls(coreControls);\n+    }\n+\n+    private void shutdownControls(Iterable<? extends ServerControls> controls) throws InterruptedException\n+    {\n+      Collection<Thread> threads = new ArrayList<>();\n+      for (ServerControls control : controls)\n+      {\n+        Thread thread = new Thread(control::close);\n+        threads.add(thread);\n+        thread.start();\n+      }\n+\n+      for (Thread thread : threads)\n+      {\n+        thread.join();\n+      }\n     }\n+  }\n }\n",
            "diff_size": 532
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "114",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "257",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/915/CausalClusterInProcessBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/915/CausalClusterInProcessBuilder.java\nindex 51798fd1135..4a2d9663ca8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/915/CausalClusterInProcessBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/915/CausalClusterInProcessBuilder.java\n@@ -49,7 +49,6 @@ import static java.util.Collections.synchronizedList;\n \n public class CausalClusterInProcessBuilder\n {\n-\n     public static WithCores init()\n     {\n         return new Builder();\n@@ -61,8 +60,7 @@ public class CausalClusterInProcessBuilder\n      */\n     public static class Builder implements WithCores, WithReplicas, WithLogger, WithPath, WithOptionalDatabasesAndPorts\n     {\n-\n-        private int numCoreHosts;\n+    private int numCoreHosts;\n         private int numReadReplicas;\n         private Log log;\n         private Path path;\n@@ -113,12 +111,10 @@ public class CausalClusterInProcessBuilder\n         public CausalCluster build()\n         {\n             int nDatabases = databases.size();\n-            if ( nDatabases > numCoreHosts )\n+            if ( nDatabases> numCoreHosts )\n             {\n-                throw new IllegalArgumentException(\n-                        \"You cannot have more databases than core hosts. Each database in the cluster must have at least 1 core \" + \"host. You have provided \" +\n-                                nDatabases + \" databases and \" + numCoreHosts + \" core hosts.\" );\n-            }\n+                throw new IllegalArgumentException( \"You cannot have more databases than core hosts. Each database in the cluster must have at least 1 core \" + \"host. You have provided \" + nDatabases + \" databases and \" + numCoreHosts + \" core hosts.\" );\n+    }\n             return new CausalCluster( this );\n         }\n     }\n@@ -149,8 +145,7 @@ public class CausalClusterInProcessBuilder\n     interface WithOptionalDatabasesAndPorts\n     {\n         Builder withOptionalPortsStrategy( PortPickingStrategy s );\n-\n-        Builder withOptionalDatabases( List<String> databaseNames );\n+Builder withOptionalDatabases( List<String> databaseNames );\n     }\n \n     /**\n@@ -257,18 +252,16 @@ public class CausalClusterInProcessBuilder\n         {\n             //Max number of hosts per database is (nHosts / nDatabases) or (nHosts / nDatabases) + 1\n             int nDatabases = databases.size();\n-            int maxCapacity = ( nHosts % nDatabases == 0 ) ? (nHosts / nDatabases) : (nHosts / nDatabases) + 1;\n-\n-            List<String> repeated =\n-                    databases.stream().flatMap( db -> IntStream.range( 0, maxCapacity ).mapToObj( ignored -> db ) ).collect( Collectors.toList() );\n-\n-            Map<Integer,String> mapping = new HashMap<>( nHosts );\n+            int maxCapacity = ( nHosts % nDatabases == 0 ) ? ( nHosts / nDatabases) : ( nHosts / nDatabases) + 1;\n \n-            for ( int hostId = 0; hostId < nHosts; hostId++ )\n+            List<String> repeated = databases.stream().flatMap( db -> IntStream.range( 0, maxCapacity ).mapToObj( ignored -> db ) ).collect( Collectors.toList() );\n+Map<Integer,String> mapping = new HashMap<>( nHosts );\n+for ( int hostId = 0; hostId < nHosts; hostId++ )\n             {\n                 mapping.put( hostId, repeated.get( hostId ) );\n             }\n-            return mapping;\n+\n+return mapping;\n         }\n \n         void boot() throws InterruptedException\n@@ -276,8 +269,7 @@ public class CausalClusterInProcessBuilder\n             List<String> initialMembers = new ArrayList<>( nCores );\n \n             Map<Integer,String> initialMembersToDatabase = distributeHostsBetweenDatabases( nCores, databaseNames );\n-\n-            for ( int coreId = 0; coreId < nCores; coreId++ )\n+for ( int coreId = 0; coreId < nCores; coreId++ )\n             {\n                 int hazelcastPort = portFactory.hazelcastPort( coreId );\n                 initialMembers.add( \"localhost:\" + hazelcastPort );\n@@ -285,8 +277,7 @@ public class CausalClusterInProcessBuilder\n \n             List<Thread> coreThreads = new ArrayList<>();\n             List<Thread> replicaThreads = new ArrayList<>();\n-\n-            for ( int coreId = 0; coreId < nCores; coreId++ )\n+for ( int coreId = 0; coreId < nCores; coreId++ )\n             {\n                 int hazelcastPort = portFactory.hazelcastPort( coreId );\n                 int txPort = portFactory.txCorePort( coreId );\n@@ -294,32 +285,24 @@ public class CausalClusterInProcessBuilder\n                 int boltPort = portFactory.boltCorePort( coreId );\n                 int httpPort = portFactory.httpCorePort( coreId );\n                 int httpsPort = portFactory.httpsCorePort( coreId );\n-\n-                String homeDir = \"core-\" + coreId;\n+String homeDir = \"core-\" + coreId;\n                 TestServerBuilder builder = new EnterpriseInProcessServerBuilder( clusterPath.toFile(), homeDir );\n-\n-                String homePath = Paths.get( clusterPath.toString(), homeDir ).toAbsolutePath().toString();\n+String homePath = Paths.get( clusterPath.toString(), homeDir ).toAbsolutePath().toString();\n                 builder.withConfig( GraphDatabaseSettings.neo4j_home.name(), homePath );\n                 builder.withConfig( GraphDatabaseSettings.pagecache_memory.name(), \"8m\" );\n-\n-                builder.withConfig( EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.CORE.name() );\n+builder.withConfig( EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.CORE.name() );\n                 builder.withConfig( CausalClusteringSettings.multi_dc_license.name(), \"true\" );\n                 builder.withConfig( CausalClusteringSettings.initial_discovery_members.name(), String.join( \",\", initialMembers ) );\n-\n-                builder.withConfig( CausalClusteringSettings.discovery_listen_address.name(), specifyPortOnly( hazelcastPort ) );\n+builder.withConfig( CausalClusteringSettings.discovery_listen_address.name(), specifyPortOnly( hazelcastPort ) );\n                 builder.withConfig( CausalClusteringSettings.transaction_listen_address.name(), specifyPortOnly( txPort ) );\n                 builder.withConfig( CausalClusteringSettings.raft_listen_address.name(), specifyPortOnly( raftPort ) );\n-\n-                builder.withConfig( CausalClusteringSettings.database.name(), initialMembersToDatabase.get( coreId ) );\n-\n-                builder.withConfig( CausalClusteringSettings.minimum_core_cluster_size_at_formation.name(), String.valueOf( nCores ) );\n+builder.withConfig( CausalClusteringSettings.database.name(), initialMembersToDatabase.get( coreId ) );\n+builder.withConfig( CausalClusteringSettings.minimum_core_cluster_size_at_formation.name(), String.valueOf( nCores ) );\n                 builder.withConfig( CausalClusteringSettings.minimum_core_cluster_size_at_runtime.name(), String.valueOf( nCores ) );\n                 builder.withConfig( CausalClusteringSettings.server_groups.name(), \"core,\" + \"core\" + coreId );\n                 configureConnectors( boltPort, httpPort, httpsPort, builder );\n-\n-                builder.withConfig( ServerSettings.jmx_module_enabled.name(), Settings.FALSE );\n-\n-                builder.withConfig( OnlineBackupSettings.online_backup_enabled, Settings.FALSE );\n+builder.withConfig( ServerSettings.jmx_module_enabled.name(), Settings.FALSE );\n+builder.withConfig( OnlineBackupSettings.online_backup_enabled, Settings.FALSE );\n \n                 int finalCoreId = coreId;\n                 Thread coreThread = new Thread( () ->\n@@ -337,33 +320,25 @@ public class CausalClusterInProcessBuilder\n             }\n \n             Map<Integer,String> replicasToDatabase = distributeHostsBetweenDatabases( nReplicas, databaseNames );\n-\n-            for ( int replicaId = 0; replicaId < nReplicas; replicaId++ )\n+for ( int replicaId = 0; replicaId < nReplicas; replicaId++ )\n             {\n                 int txPort = portFactory.txReadReplicaPort( replicaId );\n                 int boltPort = portFactory.boltReadReplicaPort( replicaId );\n                 int httpPort = portFactory.httpReadReplicaPort( replicaId );\n                 int httpsPort = portFactory.httpsReadReplicaPort( replicaId );\n-\n-                String homeDir = \"replica-\" + replicaId;\n+String homeDir = \"replica-\" + replicaId;\n                 TestServerBuilder builder = new EnterpriseInProcessServerBuilder( clusterPath.toFile(), homeDir );\n-\n-                String homePath = Paths.get( clusterPath.toString(), homeDir ).toAbsolutePath().toString();\n+String homePath = Paths.get( clusterPath.toString(), homeDir ).toAbsolutePath().toString();\n                 builder.withConfig( GraphDatabaseSettings.neo4j_home.name(), homePath );\n                 builder.withConfig( GraphDatabaseSettings.pagecache_memory.name(), \"8m\" );\n-\n-                builder.withConfig( EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.READ_REPLICA.name() );\n+builder.withConfig( EnterpriseEditionSettings.mode.name(), EnterpriseEditionSettings.Mode.READ_REPLICA.name() );\n                 builder.withConfig( CausalClusteringSettings.initial_discovery_members.name(), String.join( \",\", initialMembers ) );\n                 builder.withConfig( CausalClusteringSettings.transaction_listen_address.name(), specifyPortOnly( txPort ) );\n-\n-                builder.withConfig( CausalClusteringSettings.database.name(), replicasToDatabase.get( replicaId ) );\n-\n-                builder.withConfig( CausalClusteringSettings.server_groups.name(), \"replica,\" + \"replica\" + replicaId );\n+builder.withConfig( CausalClusteringSettings.database.name(), replicasToDatabase.get( replicaId ) );\n+builder.withConfig( CausalClusteringSettings.server_groups.name(), \"replica,\" + \"replica\" + replicaId );\n                 configureConnectors( boltPort, httpPort, httpsPort, builder );\n-\n-                builder.withConfig( ServerSettings.jmx_module_enabled.name(), Settings.FALSE );\n-\n-                builder.withConfig( OnlineBackupSettings.online_backup_enabled, Settings.FALSE );\n+builder.withConfig( ServerSettings.jmx_module_enabled.name(), Settings.FALSE );\n+builder.withConfig( OnlineBackupSettings.online_backup_enabled, Settings.FALSE );\n                 int finalReplicaId = replicaId;\n                 Thread replicaThread = new Thread( () ->\n                 {\n@@ -391,13 +366,11 @@ public class CausalClusterInProcessBuilder\n             builder.withConfig( new BoltConnector( \"bolt\" ).enabled.name(), \"true\" );\n             builder.withConfig( new BoltConnector( \"bolt\" ).listen_address.name(), specifyPortOnly( boltPort ) );\n             builder.withConfig( new BoltConnector( \"bolt\" ).advertised_address.name(), specifyPortOnly( boltPort ) );\n-\n-            builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).type.name(), \"HTTP\" );\n+builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).type.name(), \"HTTP\" );\n             builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).enabled.name(), \"true\" );\n             builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).listen_address.name(), specifyPortOnly( httpPort ) );\n             builder.withConfig( new HttpConnector( \"http\", HttpConnector.Encryption.NONE ).advertised_address.name(), specifyPortOnly( httpPort ) );\n-\n-            builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).type.name(), \"HTTP\" );\n+builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).type.name(), \"HTTP\" );\n             builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).enabled.name(), \"true\" );\n             builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).listen_address.name(), specifyPortOnly( httpsPort ) );\n             builder.withConfig( new HttpConnector( \"https\", HttpConnector.Encryption.TLS ).advertised_address.name(), specifyPortOnly( httpsPort ) );\n@@ -425,4 +398,4 @@ public class CausalClusterInProcessBuilder\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}