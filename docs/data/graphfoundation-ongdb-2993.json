{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2993",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2993/ClosenessCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2993/ClosenessCentrality.java\nindex f550323d9d8..a8d352d18ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2993/ClosenessCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2993/ClosenessCentrality.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.Set;\n@@ -28,92 +29,88 @@ import org.neo4j.graphdb.Node;\n /**\n  * Implementation of closeness centrality, which can be seen as the \"average\"\n  * distance from every node to all other nodes.\n- * @complexity Using a {@link SingleSourceShortestPath} algorithm with time\n- *             complexity A, this algorithm runs in time O(A + n) for every\n- *             vertex the closeness is to be computed for. Thus doing it for all\n- *             vertices takes O(n * (A + m)) time.\n+ *\n+ * @param <ShortestPathCostType> The datatype used by the underlying\n+ *                               {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n+ *                               weights are represented by.\n  * @author Patrik Larsson\n- * @param <ShortestPathCostType>\n- *            The datatype used by the underlying\n- *            {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n- *            weights are represented by.\n+ * @complexity Using a {@link SingleSourceShortestPath} algorithm with time\n+ * complexity A, this algorithm runs in time O(A + n) for every\n+ * vertex the closeness is to be computed for. Thus doing it for all\n+ * vertices takes O(n * (A + m)) time.\n  */\n public class ClosenessCentrality<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<ShortestPathCostType,ShortestPathCostType>\n+    ShortestPathBasedCentrality<ShortestPathCostType, ShortestPathCostType>\n {\n-    CostDivider<ShortestPathCostType> centralityDivider;\n+  CostDivider<ShortestPathCostType> centralityDivider;\n \n-    /**\n-     * Default constructor.\n-     * @param singleSourceShortestPath\n-     *            Underlying singleSourceShortestPath.\n-     * @param centralityAccumulator\n-     *            Object capable of adding distances. Needed since an \"average\"\n-     *            will be computed.\n-     * @param zeroValue\n-     *            Default value and starting value to the accumulator.\n-     * @param nodeSet\n-     *            A set containing the nodes for which centrality values should\n-     *            be computed.\n-     * @param centralityDivider\n-     *            An object capable of inverting a distance.\n-     */\n-    public ClosenessCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        CostAccumulator<ShortestPathCostType> centralityAccumulator,\n-        ShortestPathCostType zeroValue, Set<Node> nodeSet,\n-        CostDivider<ShortestPathCostType> centralityDivider )\n+  /**\n+   * Default constructor.\n+   *\n+   * @param singleSourceShortestPath Underlying singleSourceShortestPath.\n+   * @param centralityAccumulator    Object capable of adding distances. Needed since an \"average\"\n+   *                                 will be computed.\n+   * @param zeroValue                Default value and starting value to the accumulator.\n+   * @param nodeSet                  A set containing the nodes for which centrality values should\n+   *                                 be computed.\n+   * @param centralityDivider        An object capable of inverting a distance.\n+   */\n+  public ClosenessCentrality(\n+      SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n+      CostAccumulator<ShortestPathCostType> centralityAccumulator,\n+      ShortestPathCostType zeroValue, Set<Node> nodeSet,\n+      CostDivider<ShortestPathCostType> centralityDivider)\n+  {\n+    super(singleSourceShortestPath, centralityAccumulator, zeroValue,\n+        nodeSet);\n+    this.centralityDivider = centralityDivider;\n+  }\n+\n+  /*\n+   * Since we dont need to do the calculation for all the nodes before we get\n+   * a usable result, we can just calculate the result for any given node when\n+   * it is asked for. This function just checks if the value has been computed\n+   * before, and computes it if needed.\n+   */\n+  @Override\n+  public ShortestPathCostType getCentrality(Node node)\n+  {\n+    ShortestPathCostType centrality = centralities.get(node);\n+    if (centrality == null)\n     {\n-        super( singleSourceShortestPath, centralityAccumulator, zeroValue,\n-            nodeSet );\n-        this.centralityDivider = centralityDivider;\n+      return null;\n     }\n-\n-    /*\n-     * Since we dont need to do the calculation for all the nodes before we get\n-     * a usable result, we can just calculate the result for any given node when\n-     * it is asked for. This function just checks if the value has been computed\n-     * before, and computes it if needed.\n-     */\n-    @Override\n-    public ShortestPathCostType getCentrality( Node node )\n+    // Not calculated yet, or if it actually is 0 it is very fast to\n+    // compute so just do it.\n+    if (centrality.equals(zeroValue))\n     {\n-        ShortestPathCostType centrality = centralities.get( node );\n-        if ( centrality == null )\n-        {\n-            return null;\n-        }\n-        // Not calculated yet, or if it actually is 0 it is very fast to\n-        // compute so just do it.\n-        if ( centrality.equals( zeroValue ) )\n-        {\n-            singleSourceShortestPath.reset();\n-            singleSourceShortestPath.setStartNode( node );\n-            processShortestPaths( node, singleSourceShortestPath );\n-        }\n-        // When the value is calculated, just retrieve it normally\n-        return centralities.get( node );\n+      singleSourceShortestPath.reset();\n+      singleSourceShortestPath.setStartNode(node);\n+      processShortestPaths(node, singleSourceShortestPath);\n     }\n+    // When the value is calculated, just retrieve it normally\n+    return centralities.get(node);\n+  }\n \n-    @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+  @Override\n+  public void processShortestPaths(Node node,\n+                                   SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath)\n+  {\n+    ShortestPathCostType shortestPathSum = zeroValue;\n+    for (Node targetNode : nodeSet)\n+    {\n+      ShortestPathCostType cost = singleSourceShortestPath\n+          .getCost(targetNode);\n+      if (cost != null)\n+      {\n+        shortestPathSum = centralityAccumulator.addCosts(shortestPathSum, cost);\n+      }\n+    }\n+    // TODO: what should the result be when sum is 0 ?\n+    if (!shortestPathSum.equals(zeroValue))\n     {\n-        ShortestPathCostType shortestPathSum = zeroValue;\n-        for ( Node targetNode : nodeSet )\n-        {\n-            ShortestPathCostType cost = singleSourceShortestPath\n-                    .getCost( targetNode );\n-            if ( cost != null )\n-            {\n-                shortestPathSum = centralityAccumulator.addCosts( shortestPathSum, cost );\n-            }\n-        }\n-        // TODO: what should the result be when sum is 0 ?\n-        if ( !shortestPathSum.equals( zeroValue ) )\n-        {\n-            setCentralityForNode( node, centralityDivider.divideByCost( 1.0,\n-                shortestPathSum ) );\n-        }\n+      setCentralityForNode(node, centralityDivider.divideByCost(1.0,\n+          shortestPathSum));\n     }\n+  }\n }\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "76",
                    "severity": "error",
                    "message": "'{' at column 76 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2993/ClosenessCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2993/ClosenessCentrality.java\nindex f550323d9d8..731e0222d99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2993/ClosenessCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2993/ClosenessCentrality.java\n@@ -39,8 +39,7 @@ import org.neo4j.graphdb.Node;\n  *            weights are represented by.\n  */\n public class ClosenessCentrality<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<ShortestPathCostType,ShortestPathCostType>\n-{\n+    ShortestPathBasedCentrality<ShortestPathCostType,ShortestPathCostType> {\n     CostDivider<ShortestPathCostType> centralityDivider;\n \n     /**\n@@ -58,15 +57,11 @@ public class ClosenessCentrality<ShortestPathCostType> extends\n      * @param centralityDivider\n      *            An object capable of inverting a distance.\n      */\n-    public ClosenessCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        CostAccumulator<ShortestPathCostType> centralityAccumulator,\n-        ShortestPathCostType zeroValue, Set<Node> nodeSet,\n-        CostDivider<ShortestPathCostType> centralityDivider )\n-    {\n-        super( singleSourceShortestPath, centralityAccumulator, zeroValue,\n-            nodeSet );\n-        this.centralityDivider = centralityDivider;\n+    public ClosenessCentrality( SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath, CostAccumulator<ShortestPathCostType> centralityAccumulator,\n+        ShortestPathCostType zeroValue, Set<Node> nodeSet, CostDivider<ShortestPathCostType> centralityDivider )\n+{\n+        super( singleSourceShortestPath, centralityAccumulator, zeroValue, nodeSet );\n+this.centralityDivider = centralityDivider;\n     }\n \n     /*\n@@ -96,15 +91,13 @@ public class ClosenessCentrality<ShortestPathCostType> extends\n     }\n \n     @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n-    {\n+    public void processShortestPaths( Node node, SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+{\n         ShortestPathCostType shortestPathSum = zeroValue;\n         for ( Node targetNode : nodeSet )\n         {\n-            ShortestPathCostType cost = singleSourceShortestPath\n-                    .getCost( targetNode );\n-            if ( cost != null )\n+            ShortestPathCostType cost = singleSourceShortestPath.getCost( targetNode );\n+if ( cost != null )\n             {\n                 shortestPathSum = centralityAccumulator.addCosts( shortestPathSum, cost );\n             }\n@@ -112,8 +105,7 @@ public class ClosenessCentrality<ShortestPathCostType> extends\n         // TODO: what should the result be when sum is 0 ?\n         if ( !shortestPathSum.equals( zeroValue ) )\n         {\n-            setCentralityForNode( node, centralityDivider.divideByCost( 1.0,\n-                shortestPathSum ) );\n-        }\n+            setCentralityForNode( node, centralityDivider.divideByCost( 1.0, shortestPathSum ) );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}