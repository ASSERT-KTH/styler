{
    "project_name": "Angel-ML-angel",
    "error_id": "428",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/428/ModelParseTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/428/ModelParseTask.java\nindex df93ef51617..00cecb37b33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/428/ModelParseTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/428/ModelParseTask.java\n@@ -33,7 +33,7 @@ public class ModelParseTask extends TrainTask<LongWritable, Text> {\n   private static final Log LOG = LogFactory.getLog(ModelParseTask.class);\n \n \n-  public ModelParseTask(TaskContext taskContext){\n+  public ModelParseTask(TaskContext taskContext) {\n     super(taskContext);\n   }\n \n@@ -50,10 +50,10 @@ public class ModelParseTask extends TrainTask<LongWritable, Text> {\n     String outputStr = conf.get(AngelConfiguration.ANGEL_PARSE_MODEL_PATH);\n     String modelName = conf.get(AngelConfiguration.ANGEL_MODEL_PARSE_NAME);\n     int convertThreadCount = conf.getInt(AngelConfiguration.ANGEL_MODEL_PARSE_THREAD_COUNT,\n-            AngelConfiguration.DEFAULT_ANGEL_MODEL_PARSE_THREAD_COUNT);\n+        AngelConfiguration.DEFAULT_ANGEL_MODEL_PARSE_THREAD_COUNT);\n     ModelParse modelLoader = new ModelParse(inputStr, outputStr, modelName, convertThreadCount);\n \n-    try{\n+    try {\n       modelLoader.convertModel();\n     } catch (Exception x) {\n       throw new AngelException(x);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/428/ModelParseTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/428/ModelParseTask.java\nindex df93ef51617..f9788ee8b65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/428/ModelParseTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/428/ModelParseTask.java\n@@ -33,12 +33,11 @@ public class ModelParseTask extends TrainTask<LongWritable, Text> {\n   private static final Log LOG = LogFactory.getLog(ModelParseTask.class);\n \n \n-  public ModelParseTask(TaskContext taskContext){\n+  public ModelParseTask(TaskContext taskContext) {\n     super(taskContext);\n   }\n \n-\n-  @Override\n+@Override\n   public LabeledData parse(LongWritable key, Text value) {\n     return null;\n   }\n@@ -49,15 +48,13 @@ public class ModelParseTask extends TrainTask<LongWritable, Text> {\n     String inputStr = conf.get(AngelConfiguration.ANGEL_TRAIN_DATA_PATH);\n     String outputStr = conf.get(AngelConfiguration.ANGEL_PARSE_MODEL_PATH);\n     String modelName = conf.get(AngelConfiguration.ANGEL_MODEL_PARSE_NAME);\n-    int convertThreadCount = conf.getInt(AngelConfiguration.ANGEL_MODEL_PARSE_THREAD_COUNT,\n-            AngelConfiguration.DEFAULT_ANGEL_MODEL_PARSE_THREAD_COUNT);\n-    ModelParse modelLoader = new ModelParse(inputStr, outputStr, modelName, convertThreadCount);\n-\n-    try{\n+    int convertThreadCount = conf.getInt(AngelConfiguration.ANGEL_MODEL_PARSE_THREAD_COUNT, AngelConfiguration.DEFAULT_ANGEL_MODEL_PARSE_THREAD_COUNT);\n+ModelParse modelLoader = new ModelParse(inputStr, outputStr, modelName, convertThreadCount);\n+try {\n       modelLoader.convertModel();\n     } catch (Exception x) {\n       throw new AngelException(x);\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/428/ModelParseTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/428/ModelParseTask.java\nindex df93ef51617..be4a812151d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/428/ModelParseTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/428/ModelParseTask.java\n@@ -16,7 +16,6 @@\n \n package com.tencent.angel.example;\n \n-\n import com.tencent.angel.conf.AngelConfiguration;\n import com.tencent.angel.exception.AngelException;\n import com.tencent.angel.ml.feature.LabeledData;\n@@ -30,14 +29,13 @@ import org.apache.hadoop.io.LongWritable;\n import org.apache.hadoop.io.Text;\n \n public class ModelParseTask extends TrainTask<LongWritable, Text> {\n-  private static final Log LOG = LogFactory.getLog(ModelParseTask.class);\n \n+  private static final Log LOG = LogFactory.getLog(ModelParseTask.class);\n \n-  public ModelParseTask(TaskContext taskContext){\n+  public ModelParseTask(TaskContext taskContext) {\n     super(taskContext);\n   }\n \n-\n   @Override\n   public LabeledData parse(LongWritable key, Text value) {\n     return null;\n@@ -49,15 +47,13 @@ public class ModelParseTask extends TrainTask<LongWritable, Text> {\n     String inputStr = conf.get(AngelConfiguration.ANGEL_TRAIN_DATA_PATH);\n     String outputStr = conf.get(AngelConfiguration.ANGEL_PARSE_MODEL_PATH);\n     String modelName = conf.get(AngelConfiguration.ANGEL_MODEL_PARSE_NAME);\n-    int convertThreadCount = conf.getInt(AngelConfiguration.ANGEL_MODEL_PARSE_THREAD_COUNT,\n-            AngelConfiguration.DEFAULT_ANGEL_MODEL_PARSE_THREAD_COUNT);\n+    int convertThreadCount = conf.getInt(AngelConfiguration.ANGEL_MODEL_PARSE_THREAD_COUNT, AngelConfiguration.DEFAULT_ANGEL_MODEL_PARSE_THREAD_COUNT);\n     ModelParse modelLoader = new ModelParse(inputStr, outputStr, modelName, convertThreadCount);\n-\n-    try{\n+    try {\n       modelLoader.convertModel();\n     } catch (Exception x) {\n       throw new AngelException(x);\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}