{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "392",
    "information": {
        "errors": [
            {
                "line": "182",
                "column": "5",
                "severity": "error",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "     */\n    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n    {\n        // verify the required parameter 'Document' is set\n        if (getDocument() == null) {\n            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/392/ConvertDocumentRequest.java\nindex 57325187646..800517c17d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/392/ConvertDocumentRequest.java\n@@ -178,8 +178,7 @@ public class ConvertDocumentRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n         if (getDocument() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/392/ConvertDocumentRequest.java\nindex 57325187646..acd8701c0d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/392/ConvertDocumentRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -30,6 +30,7 @@ package com.aspose.words.cloud.model.requests;\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.squareup.okhttp.*;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -178,8 +179,7 @@ public class ConvertDocumentRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n         if (getDocument() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");\n@@ -207,8 +207,9 @@ public class ConvertDocumentRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n+        if (getDocument() != null) {\n             localVarFormParams.put(\"Document\", getDocument());\n+        }\n \n         final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n@@ -228,8 +229,8 @@ public class ConvertDocumentRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/392/ConvertDocumentRequest.java\nindex 57325187646..e069b737064 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/392/ConvertDocumentRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.squareup.okhttp.*;\n@@ -37,36 +36,49 @@ import java.util.*;\n /*\n  * Request model for convertDocument operation.\n  */\n+\n+\n public class ConvertDocumentRequest implements RequestIfc {\n     /*\n      * Converting document.\n      */\n-    private byte[] document;\n+\n+  private byte[] document;\n \n     /*\n      * Format to convert.\n      */\n-    private String format;\n+\n+\n+  private String format;\n \n     /*\n      * Original document storage.\n      */\n-    private String storage;\n+\n+\n+  private String storage;\n \n     /*\n      * Path for saving operation result to the local storage.\n      */\n-    private String outPath;\n+\n+\n+  private String outPath;\n \n     /*\n      * This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, \"sourceFilename\" will be used instead.\n      */\n-    private String fileNameFieldValue;\n+\n+\n+  private String fileNameFieldValue;\n \n     /*\n      * Folder in filestorage with custom fonts.\n      */\n-    private String fontsLocation;\n+\n+\n+  private String fontsLocation;\n \n     /*\n      * Initializes a new instance of the ConvertDocumentRequest class.\n@@ -78,98 +90,113 @@ public class ConvertDocumentRequest implements RequestIfc {\n      * @param String fileNameFieldValue This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, \"sourceFilename\" will be used instead.\n      * @param String fontsLocation Folder in filestorage with custom fonts.\n      */\n-    public ConvertDocumentRequest(byte[] document, String format, String storage, String outPath, String fileNameFieldValue, String fontsLocation) {\n-        this.document = document;\n-        this.format = format;\n-        this.storage = storage;\n-        this.outPath = outPath;\n-        this.fileNameFieldValue = fileNameFieldValue;\n-        this.fontsLocation = fontsLocation;\n-    }\n+\n+\n+  public ConvertDocumentRequest(byte[] document,  String format,  String storage,  String outPath,  String fileNameFieldValue,  String fontsLocation) {\n+    this.document = document;\n+    this.format = format;\n+    this.storage = storage;\n+    this.outPath = outPath;\n+    this.fileNameFieldValue = fileNameFieldValue;\n+    this.fontsLocation = fontsLocation;\n+  }\n \n     /*\n      * Gets Converting document.\n      */\n-    public byte[] getDocument() {\n-        return this.document;\n-    }\n+\n+\n+  public byte[] getDocument() {\n+    return this.document;\n+  }\n \n     /*\n      * Sets Converting document.\n      */\n-    public void setDocument(byte[] value) {\n-        this.document = value;\n-    }\n+\n+  public void setDocument(byte[] value) {\n+    this.document = value;\n+  }\n \n     /*\n      * Gets Format to convert.\n      */\n-    public String getFormat() {\n-        return this.format;\n-    }\n+\n+  public String getFormat() {\n+    return this.format;\n+  }\n \n     /*\n      * Sets Format to convert.\n      */\n-    public void setFormat(String value) {\n-        this.format = value;\n-    }\n+\n+  public void setFormat(String value) {\n+    this.format = value;\n+  }\n \n     /*\n      * Gets Original document storage.\n      */\n-    public String getStorage() {\n-        return this.storage;\n-    }\n+\n+  public String getStorage() {\n+    return this.storage;\n+  }\n \n     /*\n      * Sets Original document storage.\n      */\n-    public void setStorage(String value) {\n-        this.storage = value;\n-    }\n+\n+  public void setStorage(String value) {\n+    this.storage = value;\n+  }\n \n     /*\n      * Gets Path for saving operation result to the local storage.\n      */\n-    public String getOutPath() {\n-        return this.outPath;\n-    }\n+\n+  public String getOutPath() {\n+    return this.outPath;\n+  }\n \n     /*\n      * Sets Path for saving operation result to the local storage.\n      */\n-    public void setOutPath(String value) {\n-        this.outPath = value;\n-    }\n+\n+  public void setOutPath(String value) {\n+    this.outPath = value;\n+  }\n \n     /*\n      * Gets This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, \"sourceFilename\" will be used instead.\n      */\n-    public String getFileNameFieldValue() {\n-        return this.fileNameFieldValue;\n-    }\n+\n+  public String getFileNameFieldValue() {\n+    return this.fileNameFieldValue;\n+  }\n \n     /*\n      * Sets This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, \"sourceFilename\" will be used instead.\n      */\n-    public void setFileNameFieldValue(String value) {\n-        this.fileNameFieldValue = value;\n-    }\n+\n+  public void setFileNameFieldValue(String value) {\n+    this.fileNameFieldValue = value;\n+  }\n \n     /*\n      * Gets Folder in filestorage with custom fonts.\n      */\n-    public String getFontsLocation() {\n-        return this.fontsLocation;\n-    }\n+\n+  public String getFontsLocation() {\n+    return this.fontsLocation;\n+  }\n \n     /*\n      * Sets Folder in filestorage with custom fonts.\n      */\n-    public void setFontsLocation(String value) {\n-        this.fontsLocation = value;\n-    }\n+\n+  public void setFontsLocation(String value) {\n+    this.fontsLocation = value;\n+  }\n \n     /*\n      * Creates the http request based on this request model.\n@@ -178,69 +205,67 @@ public class ConvertDocumentRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n-        if (getDocument() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");\n-        }\n+    if (getDocument() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");\n+    }\n \n         // verify the required parameter 'Format' is set\n-        if (getFormat() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Format' when calling convertDocument\");\n-        }\n+    if (getFormat() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Format' when calling convertDocument\");\n+    }\n \n-        Object localVarPostBody = null;\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/convert\";\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"format\", getFormat());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"outPath\", getOutPath());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"fileNameFieldValue\", getFileNameFieldValue());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"fontsLocation\", getFontsLocation());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n-            localVarFormParams.put(\"Document\", getDocument());\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"multipart/form-data\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/convert\";\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"format\", getFormat());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"outPath\", getOutPath());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"fileNameFieldValue\", getFileNameFieldValue());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"fontsLocation\", getFontsLocation());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (getDocument() != null) localVarFormParams.put(\"Document\", getDocument());\n+\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"multipart/form-data\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return File.class;\n-    }\n-}\n+\n+  public Type getResponseType() {\n+    return File.class;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 138
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/392/ConvertDocumentRequest.java\nindex 57325187646..800517c17d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/392/ConvertDocumentRequest.java\n@@ -178,8 +178,7 @@ public class ConvertDocumentRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n         if (getDocument() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/392/ConvertDocumentRequest.java\nindex 57325187646..800517c17d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/392/ConvertDocumentRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/392/ConvertDocumentRequest.java\n@@ -178,8 +178,7 @@ public class ConvertDocumentRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n         if (getDocument() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling convertDocument\");\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}