{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1328",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "126",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "153",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1328/BatchingNeoStores.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1328/BatchingNeoStores.java\nindex c736568554a..aab8c0c68aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1328/BatchingNeoStores.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1328/BatchingNeoStores.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.store;\n \n import java.io.File;\n@@ -89,424 +90,425 @@ import static org.neo4j.kernel.impl.transaction.log.TransactionIdStore.BASE_TX_C\n  */\n public class BatchingNeoStores implements AutoCloseable, MemoryStatsVisitor.Visitable\n {\n-    // Empirical and slightly defensive threshold where relationship records seem to start requiring double record units.\n-    // Basically decided by picking a maxId of pointer (as well as node ids) in the relationship record and randomizing its data,\n-    // seeing which is a maxId where records starts to require a secondary unit.\n-    static final long DOUBLE_RELATIONSHIP_RECORD_UNIT_THRESHOLD = 1L << 33;\n-    private static final String TEMP_NEOSTORE_NAME = \"temp.\" + DEFAULT_NAME;\n-    private static final StoreType[] TEMP_STORE_TYPES = {RELATIONSHIP_GROUP, PROPERTY, PROPERTY_ARRAY, PROPERTY_STRING};\n-\n-    private final FileSystemAbstraction fileSystem;\n-    private final LogProvider logProvider;\n-    private final File storeDir;\n-    private final Config neo4jConfig;\n-    private final Configuration importConfiguration;\n-    private final PageCache pageCache;\n-    private final IoTracer ioTracer;\n-    private final RecordFormats recordFormats;\n-    private final AdditionalInitialIds initialIds;\n-    private final boolean externalPageCache;\n-    private final IdGeneratorFactory idGeneratorFactory;\n-\n-    // Some stores are considered temporary during the import and will be reordered/restructured\n-    // into the main store. These temporary stores will live here\n-    private NeoStores neoStores;\n-    private NeoStores temporaryNeoStores;\n-    private BatchingPropertyKeyTokenRepository propertyKeyRepository;\n-    private BatchingLabelTokenRepository labelRepository;\n-    private BatchingRelationshipTypeTokenRepository relationshipTypeRepository;\n-    private LifeSupport life = new LifeSupport();\n-    private LabelScanStore labelScanStore;\n-    private PageCacheFlusher flusher;\n-    private boolean doubleRelationshipRecordUnits;\n-\n-    private boolean successful;\n-\n-    private BatchingNeoStores( FileSystemAbstraction fileSystem, PageCache pageCache, File storeDir,\n-            RecordFormats recordFormats, Config neo4jConfig, Configuration importConfiguration, LogService logService,\n-            AdditionalInitialIds initialIds, boolean externalPageCache, IoTracer ioTracer )\n-    {\n-        this.fileSystem = fileSystem;\n-        this.recordFormats = recordFormats;\n-        this.importConfiguration = importConfiguration;\n-        this.initialIds = initialIds;\n-        this.logProvider = logService.getInternalLogProvider();\n-        this.storeDir = storeDir;\n-        this.neo4jConfig = neo4jConfig;\n-        this.pageCache = pageCache;\n-        this.ioTracer = ioTracer;\n-        this.externalPageCache = externalPageCache;\n-        this.idGeneratorFactory = new DefaultIdGeneratorFactory( fileSystem );\n-    }\n-\n-    private boolean databaseExistsAndContainsData()\n-    {\n-        File metaDataFile = new File( storeDir, StoreType.META_DATA.getStoreFile().fileName( StoreFileType.STORE ) );\n-        try ( PagedFile pagedFile = pageCache.map( metaDataFile, pageCache.pageSize(), StandardOpenOption.READ ) )\n-        {\n-            // OK so the db probably exists\n-        }\n-        catch ( IOException e )\n-        {\n-            // It's OK\n-            return false;\n-        }\n-\n-        try ( NeoStores stores = newStoreFactory( DEFAULT_NAME ).openNeoStores( StoreType.NODE, StoreType.RELATIONSHIP ) )\n-        {\n-            return stores.getNodeStore().getHighId() > 0 || stores.getRelationshipStore().getHighId() > 0;\n-        }\n-    }\n-\n-    /**\n-     * Called when expecting a clean {@code storeDir} folder and where a new store will be created.\n-     * This happens on an initial attempt to import.\n-     *\n-     * @throws IOException on I/O error.\n-     * @throws IllegalStateException if {@code storeDir} already contains a database.\n-     */\n-    public void createNew() throws IOException\n-    {\n-        assertDatabaseIsEmptyOrNonExistent();\n-\n-        // There may have been a previous import which was killed before it even started, where the label scan store could\n-        // be in a semi-initialized state. Better to be on the safe side and deleted it. We get her after determining that\n-        // the db is either completely empty or non-existent anyway, so deleting this file is OK.\n-        fileSystem.deleteFile( getLabelScanStoreFile( storeDir ) );\n-\n-        instantiateStores();\n-        neoStores.getMetaDataStore().setLastCommittedAndClosedTransactionId(\n-                initialIds.lastCommittedTransactionId(), initialIds.lastCommittedTransactionChecksum(),\n-                BASE_TX_COMMIT_TIMESTAMP, initialIds.lastCommittedTransactionLogByteOffset(),\n-                initialIds.lastCommittedTransactionLogVersion() );\n-        neoStores.startCountStore();\n-    }\n-\n-    public void assertDatabaseIsEmptyOrNonExistent()\n-    {\n-        if ( databaseExistsAndContainsData() )\n+  // Empirical and slightly defensive threshold where relationship records seem to start requiring double record units.\n+  // Basically decided by picking a maxId of pointer (as well as node ids) in the relationship record and randomizing its data,\n+  // seeing which is a maxId where records starts to require a secondary unit.\n+  static final long DOUBLE_RELATIONSHIP_RECORD_UNIT_THRESHOLD = 1L << 33;\n+  private static final String TEMP_NEOSTORE_NAME = \"temp.\" + DEFAULT_NAME;\n+  private static final StoreType[] TEMP_STORE_TYPES = {RELATIONSHIP_GROUP, PROPERTY, PROPERTY_ARRAY, PROPERTY_STRING};\n+\n+  private final FileSystemAbstraction fileSystem;\n+  private final LogProvider logProvider;\n+  private final File storeDir;\n+  private final Config neo4jConfig;\n+  private final Configuration importConfiguration;\n+  private final PageCache pageCache;\n+  private final IoTracer ioTracer;\n+  private final RecordFormats recordFormats;\n+  private final AdditionalInitialIds initialIds;\n+  private final boolean externalPageCache;\n+  private final IdGeneratorFactory idGeneratorFactory;\n+\n+  // Some stores are considered temporary during the import and will be reordered/restructured\n+  // into the main store. These temporary stores will live here\n+  private NeoStores neoStores;\n+  private NeoStores temporaryNeoStores;\n+  private BatchingPropertyKeyTokenRepository propertyKeyRepository;\n+  private BatchingLabelTokenRepository labelRepository;\n+  private BatchingRelationshipTypeTokenRepository relationshipTypeRepository;\n+  private LifeSupport life = new LifeSupport();\n+  private LabelScanStore labelScanStore;\n+  private PageCacheFlusher flusher;\n+  private boolean doubleRelationshipRecordUnits;\n+\n+  private boolean successful;\n+\n+  private BatchingNeoStores(FileSystemAbstraction fileSystem, PageCache pageCache, File storeDir,\n+                            RecordFormats recordFormats, Config neo4jConfig, Configuration importConfiguration, LogService logService,\n+                            AdditionalInitialIds initialIds, boolean externalPageCache, IoTracer ioTracer)\n+  {\n+    this.fileSystem = fileSystem;\n+    this.recordFormats = recordFormats;\n+    this.importConfiguration = importConfiguration;\n+    this.initialIds = initialIds;\n+    this.logProvider = logService.getInternalLogProvider();\n+    this.storeDir = storeDir;\n+    this.neo4jConfig = neo4jConfig;\n+    this.pageCache = pageCache;\n+    this.ioTracer = ioTracer;\n+    this.externalPageCache = externalPageCache;\n+    this.idGeneratorFactory = new DefaultIdGeneratorFactory(fileSystem);\n+  }\n+\n+  private boolean databaseExistsAndContainsData()\n+  {\n+    File metaDataFile = new File(storeDir, StoreType.META_DATA.getStoreFile().fileName(StoreFileType.STORE));\n+    try (PagedFile pagedFile = pageCache.map(metaDataFile, pageCache.pageSize(), StandardOpenOption.READ))\n+    {\n+      // OK so the db probably exists\n+    } catch (IOException e)\n+    {\n+      // It's OK\n+      return false;\n+    }\n+\n+    try (NeoStores stores = newStoreFactory(DEFAULT_NAME).openNeoStores(StoreType.NODE, StoreType.RELATIONSHIP))\n+    {\n+      return stores.getNodeStore().getHighId() > 0 || stores.getRelationshipStore().getHighId() > 0;\n+    }\n+  }\n+\n+  /**\n+   * Called when expecting a clean {@code storeDir} folder and where a new store will be created.\n+   * This happens on an initial attempt to import.\n+   *\n+   * @throws IOException           on I/O error.\n+   * @throws IllegalStateException if {@code storeDir} already contains a database.\n+   */\n+  public void createNew() throws IOException\n+  {\n+    assertDatabaseIsEmptyOrNonExistent();\n+\n+    // There may have been a previous import which was killed before it even started, where the label scan store could\n+    // be in a semi-initialized state. Better to be on the safe side and deleted it. We get her after determining that\n+    // the db is either completely empty or non-existent anyway, so deleting this file is OK.\n+    fileSystem.deleteFile(getLabelScanStoreFile(storeDir));\n+\n+    instantiateStores();\n+    neoStores.getMetaDataStore().setLastCommittedAndClosedTransactionId(\n+        initialIds.lastCommittedTransactionId(), initialIds.lastCommittedTransactionChecksum(),\n+        BASE_TX_COMMIT_TIMESTAMP, initialIds.lastCommittedTransactionLogByteOffset(),\n+        initialIds.lastCommittedTransactionLogVersion());\n+    neoStores.startCountStore();\n+  }\n+\n+  public void assertDatabaseIsEmptyOrNonExistent()\n+  {\n+    if (databaseExistsAndContainsData())\n+    {\n+      throw new IllegalStateException(storeDir + \" already contains data, cannot do import here\");\n+    }\n+  }\n+\n+  /**\n+   * Called when expecting a previous attempt/state of a database to open, where some store files should be kept,\n+   * but others deleted. All temporary stores will be deleted in this call.\n+   *\n+   * @param mainStoresToKeep {@link Predicate} controlling which files to keep, i.e. {@code true} means keep, {@code false} means delete.\n+   * @param tempStoresToKeep {@link Predicate} controlling which files to keep, i.e. {@code true} means keep, {@code false} means delete.\n+   * @throws IOException on I/O error.\n+   */\n+  public void pruneAndOpenExistingStore(Predicate<StoreType> mainStoresToKeep, Predicate<StoreType> tempStoresToKeep) throws IOException\n+  {\n+    deleteStoreFiles(TEMP_NEOSTORE_NAME, tempStoresToKeep);\n+    deleteStoreFiles(DEFAULT_NAME, mainStoresToKeep);\n+    instantiateStores();\n+    neoStores.startCountStore();\n+  }\n+\n+  private void deleteStoreFiles(String storeName, Predicate<StoreType> storesToKeep)\n+  {\n+    FileSystemAbstraction fs = pageCache.getCachedFileSystem();\n+    for (StoreType type : StoreType.values())\n+    {\n+      if (type.isRecordStore() && !storesToKeep.test(type))\n+      {\n+        for (StoreFileType fileType : StoreFileType.values())\n         {\n-            throw new IllegalStateException( storeDir + \" already contains data, cannot do import here\" );\n+          fs.deleteFile(new File(storeDir, fileType.augment(storeName + type.getStoreFile().fileNamePart())));\n         }\n-    }\n-\n-    /**\n-     * Called when expecting a previous attempt/state of a database to open, where some store files should be kept,\n-     * but others deleted. All temporary stores will be deleted in this call.\n-     *\n-     * @param mainStoresToKeep {@link Predicate} controlling which files to keep, i.e. {@code true} means keep, {@code false} means delete.\n-     * @param tempStoresToKeep {@link Predicate} controlling which files to keep, i.e. {@code true} means keep, {@code false} means delete.\n-     * @throws IOException on I/O error.\n-     */\n-    public void pruneAndOpenExistingStore( Predicate<StoreType> mainStoresToKeep, Predicate<StoreType> tempStoresToKeep ) throws IOException\n-    {\n-        deleteStoreFiles( TEMP_NEOSTORE_NAME, tempStoresToKeep );\n-        deleteStoreFiles( DEFAULT_NAME, mainStoresToKeep );\n-        instantiateStores();\n-        neoStores.startCountStore();\n-    }\n-\n-    private void deleteStoreFiles( String storeName, Predicate<StoreType> storesToKeep )\n-    {\n-        FileSystemAbstraction fs = pageCache.getCachedFileSystem();\n-        for ( StoreType type : StoreType.values() )\n-        {\n-            if ( type.isRecordStore() && !storesToKeep.test( type ) )\n-            {\n-                for ( StoreFileType fileType : StoreFileType.values() )\n-                {\n-                    fs.deleteFile( new File( storeDir, fileType.augment( storeName + type.getStoreFile().fileNamePart() ) ) );\n-                }\n-            }\n-        }\n-    }\n-\n-    private void instantiateKernelExtensions()\n-    {\n-        life = new LifeSupport();\n-        life.start();\n-        labelScanStore = new NativeLabelScanStore( pageCache, fileSystem, storeDir, FullStoreChangeStream.EMPTY, false, new Monitors(),\n-                RecoveryCleanupWorkCollector.immediate() );\n-        life.add( labelScanStore );\n-    }\n-\n-    private void instantiateStores()\n-    {\n-        neoStores = newStoreFactory( DEFAULT_NAME ).openAllNeoStores( true );\n-        propertyKeyRepository = new BatchingPropertyKeyTokenRepository(\n-                neoStores.getPropertyKeyTokenStore() );\n-        labelRepository = new BatchingLabelTokenRepository(\n-                neoStores.getLabelTokenStore() );\n-        relationshipTypeRepository = new BatchingRelationshipTypeTokenRepository(\n-                neoStores.getRelationshipTypeTokenStore() );\n-        temporaryNeoStores = instantiateTempStores();\n-        instantiateKernelExtensions();\n-\n-        // Delete the id generators because makeStoreOk isn't atomic in the sense that there's a possibility of an unlucky timing such\n-        // that if the process is killed at the right time some store may end up with a .id file that looks to be CLEAN and has highId=0,\n-        // i.e. effectively making the store look empty on the next start. Normal recovery of a db is sort of protected by this recovery\n-        // recognizing that the db needs recovery when it looks at the tx log and also calling deleteIdGenerators. In the import case\n-        // there are no tx logs at all, and therefore we do this manually right here.\n-        neoStores.deleteIdGenerators();\n-        temporaryNeoStores.deleteIdGenerators();\n-\n-        neoStores.makeStoreOk();\n-        temporaryNeoStores.makeStoreOk();\n-    }\n-\n-    private NeoStores instantiateTempStores()\n-    {\n-        return newStoreFactory( TEMP_NEOSTORE_NAME ).openNeoStores( true, TEMP_STORE_TYPES );\n-    }\n-\n-    public static BatchingNeoStores batchingNeoStores( FileSystemAbstraction fileSystem, File storeDir,\n-            RecordFormats recordFormats, Configuration config, LogService logService, AdditionalInitialIds initialIds,\n-            Config dbConfig )\n-    {\n-        Config neo4jConfig = getNeo4jConfig( config, dbConfig );\n-        final PageCacheTracer tracer = new DefaultPageCacheTracer();\n-        PageCache pageCache = createPageCache( fileSystem, neo4jConfig, logService.getInternalLogProvider(), tracer,\n-                DefaultPageCursorTracerSupplier.INSTANCE, EmptyVersionContextSupplier.EMPTY );\n-\n-        return new BatchingNeoStores( fileSystem, pageCache, storeDir, recordFormats, neo4jConfig, config, logService,\n-                initialIds, false, tracer::bytesWritten );\n-    }\n-\n-    public static BatchingNeoStores batchingNeoStoresWithExternalPageCache( FileSystemAbstraction fileSystem,\n-            PageCache pageCache, PageCacheTracer tracer, File storeDir, RecordFormats recordFormats,\n-            Configuration config, LogService logService, AdditionalInitialIds initialIds, Config dbConfig )\n-    {\n-        Config neo4jConfig = getNeo4jConfig( config, dbConfig );\n-\n-        return new BatchingNeoStores( fileSystem, pageCache, storeDir, recordFormats, neo4jConfig, config, logService,\n-                initialIds, true, tracer::bytesWritten );\n-    }\n-\n-    private static Config getNeo4jConfig( Configuration config, Config dbConfig )\n-    {\n-        dbConfig.augment( stringMap(\n-                dense_node_threshold.name(), valueOf( config.denseNodeThreshold() ),\n-                pagecache_memory.name(), valueOf( config.pageCacheMemory() ) ) );\n-        return dbConfig;\n-    }\n-\n-    private static PageCache createPageCache( FileSystemAbstraction fileSystem, Config config, LogProvider log,\n-            PageCacheTracer tracer, PageCursorTracerSupplier cursorTracerSupplier, VersionContextSupplier contextSupplier )\n-    {\n-        return new ConfiguringPageCacheFactory( fileSystem, config, tracer, cursorTracerSupplier,\n-                log.getLog( BatchingNeoStores.class ), contextSupplier ).getOrCreatePageCache();\n-    }\n-\n-    private StoreFactory newStoreFactory( String name, OpenOption... openOptions )\n-    {\n-        return new StoreFactory( storeDir, name, neo4jConfig, idGeneratorFactory, pageCache, fileSystem, recordFormats, logProvider,\n-                        EmptyVersionContextSupplier.EMPTY, openOptions );\n-    }\n-\n-    /**\n-     * @return temporary relationship group store which will be deleted in {@link #close()}.\n-     */\n-    public RecordStore<RelationshipGroupRecord> getTemporaryRelationshipGroupStore()\n-    {\n-        return temporaryNeoStores.getRelationshipGroupStore();\n-    }\n-\n-    /**\n-     * @return temporary property store which will be deleted in {@link #close()}.\n-     */\n-    public PropertyStore getTemporaryPropertyStore()\n-    {\n-        return temporaryNeoStores.getPropertyStore();\n-    }\n+      }\n+    }\n+  }\n+\n+  private void instantiateKernelExtensions()\n+  {\n+    life = new LifeSupport();\n+    life.start();\n+    labelScanStore = new NativeLabelScanStore(pageCache, fileSystem, storeDir, FullStoreChangeStream.EMPTY, false, new Monitors(),\n+        RecoveryCleanupWorkCollector.immediate());\n+    life.add(labelScanStore);\n+  }\n+\n+  private void instantiateStores()\n+  {\n+    neoStores = newStoreFactory(DEFAULT_NAME).openAllNeoStores(true);\n+    propertyKeyRepository = new BatchingPropertyKeyTokenRepository(\n+        neoStores.getPropertyKeyTokenStore());\n+    labelRepository = new BatchingLabelTokenRepository(\n+        neoStores.getLabelTokenStore());\n+    relationshipTypeRepository = new BatchingRelationshipTypeTokenRepository(\n+        neoStores.getRelationshipTypeTokenStore());\n+    temporaryNeoStores = instantiateTempStores();\n+    instantiateKernelExtensions();\n+\n+    // Delete the id generators because makeStoreOk isn't atomic in the sense that there's a possibility of an unlucky timing such\n+    // that if the process is killed at the right time some store may end up with a .id file that looks to be CLEAN and has highId=0,\n+    // i.e. effectively making the store look empty on the next start. Normal recovery of a db is sort of protected by this recovery\n+    // recognizing that the db needs recovery when it looks at the tx log and also calling deleteIdGenerators. In the import case\n+    // there are no tx logs at all, and therefore we do this manually right here.\n+    neoStores.deleteIdGenerators();\n+    temporaryNeoStores.deleteIdGenerators();\n+\n+    neoStores.makeStoreOk();\n+    temporaryNeoStores.makeStoreOk();\n+  }\n+\n+  private NeoStores instantiateTempStores()\n+  {\n+    return newStoreFactory(TEMP_NEOSTORE_NAME).openNeoStores(true, TEMP_STORE_TYPES);\n+  }\n+\n+  public static BatchingNeoStores batchingNeoStores(FileSystemAbstraction fileSystem, File storeDir,\n+                                                    RecordFormats recordFormats, Configuration config, LogService logService, AdditionalInitialIds initialIds,\n+                                                    Config dbConfig)\n+  {\n+    Config neo4jConfig = getNeo4jConfig(config, dbConfig);\n+    final PageCacheTracer tracer = new DefaultPageCacheTracer();\n+    PageCache pageCache = createPageCache(fileSystem, neo4jConfig, logService.getInternalLogProvider(), tracer,\n+        DefaultPageCursorTracerSupplier.INSTANCE, EmptyVersionContextSupplier.EMPTY);\n+\n+    return new BatchingNeoStores(fileSystem, pageCache, storeDir, recordFormats, neo4jConfig, config, logService,\n+        initialIds, false, tracer::bytesWritten);\n+  }\n+\n+  public static BatchingNeoStores batchingNeoStoresWithExternalPageCache(FileSystemAbstraction fileSystem,\n+                                                                         PageCache pageCache, PageCacheTracer tracer, File storeDir,\n+                                                                         RecordFormats recordFormats,\n+                                                                         Configuration config, LogService logService, AdditionalInitialIds initialIds,\n+                                                                         Config dbConfig)\n+  {\n+    Config neo4jConfig = getNeo4jConfig(config, dbConfig);\n+\n+    return new BatchingNeoStores(fileSystem, pageCache, storeDir, recordFormats, neo4jConfig, config, logService,\n+        initialIds, true, tracer::bytesWritten);\n+  }\n+\n+  private static Config getNeo4jConfig(Configuration config, Config dbConfig)\n+  {\n+    dbConfig.augment(stringMap(\n+        dense_node_threshold.name(), valueOf(config.denseNodeThreshold()),\n+        pagecache_memory.name(), valueOf(config.pageCacheMemory())));\n+    return dbConfig;\n+  }\n+\n+  private static PageCache createPageCache(FileSystemAbstraction fileSystem, Config config, LogProvider log,\n+                                           PageCacheTracer tracer, PageCursorTracerSupplier cursorTracerSupplier, VersionContextSupplier contextSupplier)\n+  {\n+    return new ConfiguringPageCacheFactory(fileSystem, config, tracer, cursorTracerSupplier,\n+        log.getLog(BatchingNeoStores.class), contextSupplier).getOrCreatePageCache();\n+  }\n+\n+  private StoreFactory newStoreFactory(String name, OpenOption... openOptions)\n+  {\n+    return new StoreFactory(storeDir, name, neo4jConfig, idGeneratorFactory, pageCache, fileSystem, recordFormats, logProvider,\n+        EmptyVersionContextSupplier.EMPTY, openOptions);\n+  }\n+\n+  /**\n+   * @return temporary relationship group store which will be deleted in {@link #close()}.\n+   */\n+  public RecordStore<RelationshipGroupRecord> getTemporaryRelationshipGroupStore()\n+  {\n+    return temporaryNeoStores.getRelationshipGroupStore();\n+  }\n+\n+  /**\n+   * @return temporary property store which will be deleted in {@link #close()}.\n+   */\n+  public PropertyStore getTemporaryPropertyStore()\n+  {\n+    return temporaryNeoStores.getPropertyStore();\n+  }\n+\n+  public IoTracer getIoTracer()\n+  {\n+    return ioTracer;\n+  }\n+\n+  public NodeStore getNodeStore()\n+  {\n+    return neoStores.getNodeStore();\n+  }\n+\n+  public PropertyStore getPropertyStore()\n+  {\n+    return neoStores.getPropertyStore();\n+  }\n+\n+  public BatchingPropertyKeyTokenRepository getPropertyKeyRepository()\n+  {\n+    return propertyKeyRepository;\n+  }\n+\n+  public BatchingLabelTokenRepository getLabelRepository()\n+  {\n+    return labelRepository;\n+  }\n+\n+  public BatchingRelationshipTypeTokenRepository getRelationshipTypeRepository()\n+  {\n+    return relationshipTypeRepository;\n+  }\n+\n+  public RelationshipStore getRelationshipStore()\n+  {\n+    return neoStores.getRelationshipStore();\n+  }\n+\n+  public RecordStore<RelationshipGroupRecord> getRelationshipGroupStore()\n+  {\n+    return neoStores.getRelationshipGroupStore();\n+  }\n+\n+  public CountsTracker getCountsStore()\n+  {\n+    return neoStores.getCounts();\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    // Here as a safety mechanism when e.g. panicking.\n+    if (flusher != null)\n+    {\n+      stopFlushingPageCache();\n+    }\n+\n+    flushAndForce();\n \n-    public IoTracer getIoTracer()\n-    {\n-        return ioTracer;\n-    }\n+    // Flush out all pending changes\n+    closeAll(propertyKeyRepository, labelRepository, relationshipTypeRepository);\n \n-    public NodeStore getNodeStore()\n+    // Close the neo store\n+    life.shutdown();\n+    closeAll(neoStores, temporaryNeoStores);\n+    if (!externalPageCache)\n     {\n-        return neoStores.getNodeStore();\n+      pageCache.close();\n     }\n \n-    public PropertyStore getPropertyStore()\n+    if (successful)\n     {\n-        return neoStores.getPropertyStore();\n+      cleanup();\n     }\n+  }\n \n-    public BatchingPropertyKeyTokenRepository getPropertyKeyRepository()\n-    {\n-        return propertyKeyRepository;\n-    }\n+  private void cleanup()\n+  {\n+    deleteStoreFiles(TEMP_NEOSTORE_NAME, Predicates.alwaysFalse());\n+  }\n \n-    public BatchingLabelTokenRepository getLabelRepository()\n-    {\n-        return labelRepository;\n-    }\n+  public long getLastCommittedTransactionId()\n+  {\n+    return neoStores.getMetaDataStore().getLastCommittedTransactionId();\n+  }\n \n-    public BatchingRelationshipTypeTokenRepository getRelationshipTypeRepository()\n-    {\n-        return relationshipTypeRepository;\n-    }\n+  public LabelScanStore getLabelScanStore()\n+  {\n+    return labelScanStore;\n+  }\n \n-    public RelationshipStore getRelationshipStore()\n-    {\n-        return neoStores.getRelationshipStore();\n-    }\n+  public NeoStores getNeoStores()\n+  {\n+    return neoStores;\n+  }\n \n-    public RecordStore<RelationshipGroupRecord> getRelationshipGroupStore()\n+  public void startFlushingPageCache()\n+  {\n+    if (importConfiguration.sequentialBackgroundFlushing())\n     {\n-        return neoStores.getRelationshipGroupStore();\n+      if (flusher != null)\n+      {\n+        throw new IllegalStateException(\"Flusher already started\");\n+      }\n+      flusher = new PageCacheFlusher(pageCache);\n+      flusher.start();\n     }\n+  }\n \n-    public CountsTracker getCountsStore()\n+  public void stopFlushingPageCache()\n+  {\n+    if (importConfiguration.sequentialBackgroundFlushing())\n     {\n-        return neoStores.getCounts();\n+      if (flusher == null)\n+      {\n+        throw new IllegalStateException(\"Flusher not started\");\n+      }\n+      flusher.halt();\n+      flusher = null;\n     }\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        // Here as a safety mechanism when e.g. panicking.\n-        if ( flusher != null )\n-        {\n-            stopFlushingPageCache();\n-        }\n-\n-        flushAndForce();\n-\n-        // Flush out all pending changes\n-        closeAll( propertyKeyRepository, labelRepository, relationshipTypeRepository );\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    visitor.offHeapUsage(pageCache.maxCachedPages() * pageCache.pageSize());\n+  }\n \n-        // Close the neo store\n-        life.shutdown();\n-        closeAll( neoStores, temporaryNeoStores );\n-        if ( !externalPageCache )\n-        {\n-            pageCache.close();\n-        }\n-\n-        if ( successful )\n-        {\n-            cleanup();\n-        }\n-    }\n+  public PageCache getPageCache()\n+  {\n+    return pageCache;\n+  }\n \n-    private void cleanup()\n+  public void flushAndForce()\n+  {\n+    if (propertyKeyRepository != null)\n     {\n-        deleteStoreFiles( TEMP_NEOSTORE_NAME, Predicates.alwaysFalse() );\n+      propertyKeyRepository.flush();\n     }\n-\n-    public long getLastCommittedTransactionId()\n+    if (labelRepository != null)\n     {\n-        return neoStores.getMetaDataStore().getLastCommittedTransactionId();\n+      labelRepository.flush();\n     }\n-\n-    public LabelScanStore getLabelScanStore()\n+    if (relationshipTypeRepository != null)\n     {\n-        return labelScanStore;\n+      relationshipTypeRepository.flush();\n     }\n-\n-    public NeoStores getNeoStores()\n+    if (neoStores != null)\n     {\n-        return neoStores;\n+      neoStores.flush(unlimited());\n+      flushIdFiles(neoStores, StoreType.values());\n     }\n-\n-    public void startFlushingPageCache()\n+    if (temporaryNeoStores != null)\n     {\n-        if ( importConfiguration.sequentialBackgroundFlushing() )\n-        {\n-            if ( flusher != null )\n-            {\n-                throw new IllegalStateException( \"Flusher already started\" );\n-            }\n-            flusher = new PageCacheFlusher( pageCache );\n-            flusher.start();\n-        }\n+      temporaryNeoStores.flush(unlimited());\n+      flushIdFiles(temporaryNeoStores, TEMP_STORE_TYPES);\n     }\n-\n-    public void stopFlushingPageCache()\n+    if (labelScanStore != null)\n     {\n-        if ( importConfiguration.sequentialBackgroundFlushing() )\n-        {\n-            if ( flusher == null )\n-            {\n-                throw new IllegalStateException( \"Flusher not started\" );\n-            }\n-            flusher.halt();\n-            flusher = null;\n-        }\n+      labelScanStore.force(unlimited());\n     }\n+  }\n \n-    @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-    {\n-        visitor.offHeapUsage( pageCache.maxCachedPages() * pageCache.pageSize() );\n-    }\n+  public void success()\n+  {\n+    successful = true;\n+  }\n \n-    public PageCache getPageCache()\n-    {\n-        return pageCache;\n-    }\n+  public boolean determineDoubleRelationshipRecordUnits(Estimates inputEstimates)\n+  {\n+    doubleRelationshipRecordUnits =\n+        recordFormats.hasCapability(Capability.SECONDARY_RECORD_UNITS) &&\n+            inputEstimates.numberOfRelationships() > DOUBLE_RELATIONSHIP_RECORD_UNIT_THRESHOLD;\n+    return doubleRelationshipRecordUnits;\n+  }\n \n-    public void flushAndForce()\n-    {\n-        if ( propertyKeyRepository != null )\n-        {\n-            propertyKeyRepository.flush();\n-        }\n-        if ( labelRepository != null )\n-        {\n-            labelRepository.flush();\n-        }\n-        if ( relationshipTypeRepository != null )\n-        {\n-            relationshipTypeRepository.flush();\n-        }\n-        if ( neoStores != null )\n-        {\n-            neoStores.flush( unlimited() );\n-            flushIdFiles( neoStores, StoreType.values() );\n-        }\n-        if ( temporaryNeoStores != null )\n-        {\n-            temporaryNeoStores.flush( unlimited() );\n-            flushIdFiles( temporaryNeoStores, TEMP_STORE_TYPES );\n-        }\n-        if ( labelScanStore != null )\n-        {\n-            labelScanStore.force( unlimited() );\n-        }\n-    }\n-\n-    public void success()\n-    {\n-        successful = true;\n-    }\n-\n-    public boolean determineDoubleRelationshipRecordUnits( Estimates inputEstimates )\n-    {\n-        doubleRelationshipRecordUnits =\n-                recordFormats.hasCapability( Capability.SECONDARY_RECORD_UNITS ) &&\n-                inputEstimates.numberOfRelationships() > DOUBLE_RELATIONSHIP_RECORD_UNIT_THRESHOLD;\n-        return doubleRelationshipRecordUnits;\n-    }\n+  public boolean usesDoubleRelationshipRecordUnits()\n+  {\n+    return doubleRelationshipRecordUnits;\n+  }\n \n-    public boolean usesDoubleRelationshipRecordUnits()\n+  private void flushIdFiles(NeoStores neoStores, StoreType[] storeTypes)\n+  {\n+    for (StoreType type : storeTypes)\n     {\n-        return doubleRelationshipRecordUnits;\n-    }\n-\n-    private void flushIdFiles( NeoStores neoStores, StoreType[] storeTypes )\n-    {\n-        for ( StoreType type : storeTypes )\n-        {\n-            if ( type.isRecordStore() )\n-            {\n-                RecordStore<AbstractBaseRecord> recordStore = neoStores.getRecordStore( type );\n-                idGeneratorFactory.create( new File( storeDir, type.getStoreFile().fileName( StoreFileType.ID ) ), recordStore.getHighId(),\n-                        false );\n-            }\n-        }\n+      if (type.isRecordStore())\n+      {\n+        RecordStore<AbstractBaseRecord> recordStore = neoStores.getRecordStore(type);\n+        idGeneratorFactory.create(new File(storeDir, type.getStoreFile().fileName(StoreFileType.ID)), recordStore.getHighId(),\n+            false);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 468
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}