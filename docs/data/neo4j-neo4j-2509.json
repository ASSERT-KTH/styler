{
    "project_name": "neo4j-neo4j",
    "error_id": "2509",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2509/TransactionDependenciesResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2509/TransactionDependenciesResolver.java\nindex 4f6bab2ed51..61f1edbeefd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2509/TransactionDependenciesResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2509/TransactionDependenciesResolver.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.builtin;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -47,125 +48,126 @@ import static org.neo4j.lock.LockType.EXCLUSIVE;\n \n class TransactionDependenciesResolver\n {\n-    private final Map<KernelTransactionHandle,Optional<QuerySnapshot>> handleSnapshotsMap;\n-    private final Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies;\n+    private final Map<KernelTransactionHandle, Optional<QuerySnapshot>> handleSnapshotsMap;\n+    private final Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies;\n \n-    TransactionDependenciesResolver( Map<KernelTransactionHandle,Optional<QuerySnapshot>> handleSnapshotsMap )\n+    TransactionDependenciesResolver(Map<KernelTransactionHandle, Optional<QuerySnapshot>> handleSnapshotsMap)\n     {\n         this.handleSnapshotsMap = handleSnapshotsMap;\n         this.directDependencies = initDirectDependencies();\n     }\n \n-    boolean isBlocked( KernelTransactionHandle handle )\n+    boolean isBlocked(KernelTransactionHandle handle)\n     {\n-        return directDependencies.get( handle ) != null;\n+        return directDependencies.get(handle) != null;\n     }\n \n-    String describeBlockingTransactions( KernelTransactionHandle handle )\n+    String describeBlockingTransactions(KernelTransactionHandle handle)\n     {\n         Set<KernelTransactionHandle> allBlockers = new TreeSet<>(\n-                Comparator.comparingLong( KernelTransactionHandle::getUserTransactionId ) );\n-        Set<KernelTransactionHandle> handles = directDependencies.get( handle );\n-        if ( handles != null )\n+          Comparator.comparingLong(KernelTransactionHandle::getUserTransactionId));\n+        Set<KernelTransactionHandle> handles = directDependencies.get(handle);\n+        if (handles != null)\n         {\n-            Deque<KernelTransactionHandle> blockerQueue = new ArrayDeque<>( handles );\n-            while ( !blockerQueue.isEmpty() )\n+            Deque<KernelTransactionHandle> blockerQueue = new ArrayDeque<>(handles);\n+            while (!blockerQueue.isEmpty())\n             {\n                 KernelTransactionHandle transactionHandle = blockerQueue.pop();\n-                if ( allBlockers.add( transactionHandle ) )\n+                if (allBlockers.add(transactionHandle))\n                 {\n-                    Set<KernelTransactionHandle> transactionHandleSet = directDependencies.get( transactionHandle );\n-                    if ( transactionHandleSet != null )\n+                    Set<KernelTransactionHandle> transactionHandleSet = directDependencies.get(transactionHandle);\n+                    if (transactionHandleSet != null)\n                     {\n-                        blockerQueue.addAll( transactionHandleSet );\n+                        blockerQueue.addAll(transactionHandleSet);\n                     }\n                 }\n             }\n         }\n-        return describe( allBlockers );\n+        return describe(allBlockers);\n     }\n \n-    Map<String,Object> describeBlockingLocks( KernelTransactionHandle handle )\n+    Map<String, Object> describeBlockingLocks(KernelTransactionHandle handle)\n     {\n-        Optional<QuerySnapshot> snapshot = handleSnapshotsMap.get( handle );\n-        return snapshot.map( QuerySnapshot::resourceInformation ).orElse( Collections.emptyMap() );\n+        Optional<QuerySnapshot> snapshot = handleSnapshotsMap.get(handle);\n+        return snapshot.map(QuerySnapshot::resourceInformation).orElse(Collections.emptyMap());\n     }\n \n-    private Map<KernelTransactionHandle,Set<KernelTransactionHandle>> initDirectDependencies()\n+    private Map<KernelTransactionHandle, Set<KernelTransactionHandle>> initDirectDependencies()\n     {\n         Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies = new HashMap<>();\n \n-        Map<KernelTransactionHandle,List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream()\n-                .collect( toMap( identity(), getTransactionLocks() ) );\n+        Map<KernelTransactionHandle, List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream()\n+          .collect(toMap(identity(), getTransactionLocks()));\n \n-        for ( Map.Entry<KernelTransactionHandle,Optional<QuerySnapshot>> entry : handleSnapshotsMap.entrySet() )\n+        for (Map.Entry<KernelTransactionHandle, Optional<QuerySnapshot>> entry : handleSnapshotsMap.entrySet())\n         {\n             Optional<QuerySnapshot> snapshot = entry.getValue();\n-            if ( snapshot.isPresent() )\n+            if (snapshot.isPresent())\n             {\n                 KernelTransactionHandle txHandle = entry.getKey();\n-                evaluateDirectDependencies( directDependencies, transactionLocksMap, txHandle, snapshot.get() );\n+                evaluateDirectDependencies(directDependencies, transactionLocksMap, txHandle, snapshot.get());\n             }\n         }\n         return directDependencies;\n     }\n \n-    private static Function<KernelTransactionHandle,List<ActiveLock>> getTransactionLocks()\n+    private static Function<KernelTransactionHandle, List<ActiveLock>> getTransactionLocks()\n     {\n-        return transactionHandle -> transactionHandle.activeLocks().collect( toList() );\n+        return transactionHandle -> transactionHandle.activeLocks().collect(toList());\n     }\n \n-    private static void evaluateDirectDependencies( Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies,\n-            Map<KernelTransactionHandle,List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle, QuerySnapshot querySnapshot )\n+    private static void evaluateDirectDependencies(Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies,\n+                                                   Map<KernelTransactionHandle, List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle,\n+                                                   QuerySnapshot querySnapshot)\n     {\n         List<ActiveLock> waitingOnLocks = querySnapshot.waitingLocks();\n-        for ( ActiveLock activeLock : waitingOnLocks )\n+        for (ActiveLock activeLock : waitingOnLocks)\n         {\n-            for ( Map.Entry<KernelTransactionHandle,List<ActiveLock>> handleListEntry : handleLocksMap.entrySet() )\n+            for (Map.Entry<KernelTransactionHandle, List<ActiveLock>> handleListEntry : handleLocksMap.entrySet())\n             {\n                 KernelTransactionHandle kernelTransactionHandle = handleListEntry.getKey();\n-                if ( !kernelTransactionHandle.equals( txHandle ) )\n+                if (!kernelTransactionHandle.equals(txHandle))\n                 {\n-                    if ( isBlocked( activeLock, handleListEntry.getValue() ) )\n+                    if (isBlocked(activeLock, handleListEntry.getValue()))\n                     {\n                         Set<KernelTransactionHandle> kernelTransactionHandles =\n-                                directDependencies.computeIfAbsent( txHandle, handle -> new HashSet<>() );\n-                        kernelTransactionHandles.add( kernelTransactionHandle );\n+                          directDependencies.computeIfAbsent(txHandle, handle -> new HashSet<>());\n+                        kernelTransactionHandles.add(kernelTransactionHandle);\n                     }\n                 }\n             }\n         }\n     }\n \n-    private static boolean isBlocked( ActiveLock activeLock, List<ActiveLock> activeLocks )\n+    private static boolean isBlocked(ActiveLock activeLock, List<ActiveLock> activeLocks)\n     {\n         return EXCLUSIVE == activeLock.lockType() ?\n-               haveAnyLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() ) :\n-               haveExclusiveLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() );\n+          haveAnyLocking(activeLocks, activeLock.resourceType(), activeLock.resourceId()) :\n+          haveExclusiveLocking(activeLocks, activeLock.resourceType(), activeLock.resourceId());\n     }\n \n-    private static boolean haveAnyLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n+    private static boolean haveAnyLocking(List<ActiveLock> locks, ResourceType resourceType, long resourceId)\n     {\n-        return locks.stream().anyMatch( lock -> lock.resourceId() == resourceId && lock.resourceType() == resourceType );\n+        return locks.stream().anyMatch(lock -> lock.resourceId() == resourceId && lock.resourceType() == resourceType);\n     }\n \n-    private static boolean haveExclusiveLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n+    private static boolean haveExclusiveLocking(List<ActiveLock> locks, ResourceType resourceType, long resourceId)\n     {\n-        return locks.stream().anyMatch( lock -> EXCLUSIVE == lock.lockType() &&\n-                lock.resourceId() == resourceId &&\n-                lock.resourceType() == resourceType );\n+        return locks.stream().anyMatch(lock -> EXCLUSIVE == lock.lockType() &&\n+          lock.resourceId() == resourceId &&\n+          lock.resourceType() == resourceType);\n     }\n \n-    private static String describe( Set<KernelTransactionHandle> allBlockers )\n+    private static String describe(Set<KernelTransactionHandle> allBlockers)\n     {\n-        if ( allBlockers.isEmpty() )\n+        if (allBlockers.isEmpty())\n         {\n             return StringUtils.EMPTY;\n         }\n-        StringJoiner stringJoiner = new StringJoiner( \", \", \"[\", \"]\" );\n-        for ( KernelTransactionHandle blocker : allBlockers )\n+        StringJoiner stringJoiner = new StringJoiner(\", \", \"[\", \"]\");\n+        for (KernelTransactionHandle blocker : allBlockers)\n         {\n-            stringJoiner.add( blocker.getUserTransactionName() );\n+            stringJoiner.add(blocker.getUserTransactionName());\n         }\n         return stringJoiner.toString();\n     }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}