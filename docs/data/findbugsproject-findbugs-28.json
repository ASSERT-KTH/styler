{
    "project_name": "findbugsproject-findbugs",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "13",
                "column": "56",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/28/DefaultSortedTableModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/28/DefaultSortedTableModel.java\nindex c7117bc36da..0726abebf8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/28/DefaultSortedTableModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/28/DefaultSortedTableModel.java\n@@ -45,53 +45,52 @@ import javax.swing.table.TableModel;\n  * A Table model that sits between the JTable and the real model.\n  * This model converts view row indexes, into sorted model row indexes.\n  */\n-public class DefaultSortedTableModel extends AbstractTableModel\n-{\n+public class DefaultSortedTableModel extends AbstractTableModel {\n     /**\n      *\n      */\n-\tprivate static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n     public static final int SORT_NO_ORDER = 0;\n     public static final int SORT_ASCENDING_ORDER = 1;\n     public static final int SORT_DESCENDING_ORDER = 2;\n-\tpublic static final int NUM_SORT_DIREECTIONS = 3;\n+    public static final int NUM_SORT_DIREECTIONS = 3;\n \n     private AbstractTableModel baseModel;\n     private List<Integer> viewToModelMapping;\n     private int sortDirection = SORT_ASCENDING_ORDER;\n-\tprivate int sortColumn = 0;\n+    private int sortColumn = 0;\n     private ImageIcon upIcon, downIcon;\n \n \n-    public DefaultSortedTableModel( AbstractTableModel model, JTableHeader header ) {\n+    public DefaultSortedTableModel(AbstractTableModel model, JTableHeader header) {\n         baseModel = model;\n         model.addTableModelListener(new BaseTableModelListener());\n \n         final JTableHeader baseHeader = header;\n         baseHeader.addMouseListener(new HeaderListener());\n         final TableCellRenderer baseRenderer = baseHeader.getDefaultRenderer();\n-\t\tbaseHeader.setDefaultRenderer( new DefaultTableCellRenderer() {\n+        baseHeader.setDefaultRenderer(new DefaultTableCellRenderer() {\n             @Override\n             public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n-                JLabel label = (JLabel)baseRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n-\t\t\t\tif (baseHeader.getTable().convertColumnIndexToModel(column) == sortColumn) {\n+                JLabel label = (JLabel) baseRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n+                if (baseHeader.getTable().convertColumnIndexToModel(column) == sortColumn) {\n                     if (sortDirection != SORT_NO_ORDER) {\n                         label.setHorizontalTextPosition(SwingConstants.LEFT);\n-                        label.setIcon( sortDirection == SORT_ASCENDING_ORDER ? downIcon : upIcon );\n-\t\t\t\t\t} else {\n+                        label.setIcon(sortDirection == SORT_ASCENDING_ORDER ? downIcon : upIcon);\n+                    } else {\n                         label.setIcon(null);\n                     }\n                 } else {\n-\t\t\t\t\tlabel.setIcon(null);\n+                    label.setIcon(null);\n                 }\n                 return label;\n             }\n-\t\t});\n+        });\n \n         setupMapping();\n         ClassLoader classLoader = this.getClass().getClassLoader();\n         upIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/up.png\"));\n-\t\tdownIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/down.png\"));\n+        downIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/down.png\"));\n     }\n \n     // Base Model handling\n@@ -100,171 +99,187 @@ public class DefaultSortedTableModel extends AbstractTableModel\n         return baseModel;\n     }\n \n-    public int getBaseModelIndex( int viewIndex ) {\n+    public int getBaseModelIndex(int viewIndex) {\n         return viewToModelMapping.get(viewIndex).intValue();\n     }\n \n     // Event handling\n \n     @Override\n-    public void fireTableCellUpdated( int row, int col ) {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n+    public void fireTableCellUpdated(int row, int col) {\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n         super.fireTableCellUpdated(row, col);\n     }\n \n     @Override\n-    public void fireTableChanged( TableModelEvent e ) {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n+    public void fireTableChanged(TableModelEvent e) {\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n         super.fireTableChanged(e);\n     }\n \n     @Override\n     public void fireTableDataChanged() {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n         super.fireTableDataChanged();\n     }\n \n     @Override\n-    public void fireTableRowsDeleted( int first, int last ) {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableRowsDeleted(first,last);\n+    public void fireTableRowsDeleted(int first, int last) {\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n+        super.fireTableRowsDeleted(first, last);\n     }\n \n     @Override\n-    public void fireTableRowsInserted( int first, int last ) {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n+    public void fireTableRowsInserted(int first, int last) {\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n         super.fireTableRowsInserted(first, last);\n     }\n \n     @Override\n-    public void fireTableRowsUpdated( int first, int last ) {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n+    public void fireTableRowsUpdated(int first, int last) {\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n         super.fireTableRowsUpdated(first, last);\n     }\n \n     @Override\n     public void fireTableStructureChanged() {\n-        if (baseModel != null)\n-\t\t\tsetupMapping();\n+        if (baseModel != null) {\n+            setupMapping();\n+        }\n         super.fireTableStructureChanged();\n     }\n \n     // accessors\n \n     @Override\n-    public int findColumn( String columnName ) {\n-        if (baseModel == null)\n-\t\t\treturn -1;\n+    public int findColumn(String columnName) {\n+        if (baseModel == null) {\n+            return -1;\n+        }\n \n         return baseModel.findColumn(columnName);\n     }\n \n     public int getColumnCount() {\n-        if (baseModel == null)\n+        if (baseModel == null) {\n             return 0;\n+        }\n \n         return baseModel.getColumnCount();\n     }\n \n     public int getRowCount() {\n-        if (baseModel == null)\n+        if (baseModel == null) {\n             return 0;\n+        }\n \n         return baseModel.getRowCount();\n     }\n \n     @Override\n-    public Class<?> getColumnClass( int column ) {\n-        if (baseModel == null)\n-\t\t\treturn null;\n+    public Class<?> getColumnClass(int column) {\n+        if (baseModel == null) {\n+            return null;\n+        }\n \n         return baseModel.getColumnClass(column);\n     }\n \n     @Override\n-    public String getColumnName( int column ) {\n-        if (baseModel == null)\n-\t\t\treturn null;\n+    public String getColumnName(int column) {\n+        if (baseModel == null) {\n+            return null;\n+        }\n \n         return baseModel.getColumnName(column);\n     }\n \n     @Override\n-    public boolean isCellEditable( int row, int col ) {\n-        if (baseModel == null)\n-\t\t\treturn false;\n+    public boolean isCellEditable(int row, int col) {\n+        if (baseModel == null) {\n+            return false;\n+        }\n \n-        return baseModel.isCellEditable( row, col );\n+        return baseModel.isCellEditable(row, col);\n     }\n \n-    public Object getValueAt( int row, int col ) {\n-        if (baseModel == null)\n+    public Object getValueAt(int row, int col) {\n+        if (baseModel == null) {\n             return null;\n+        }\n \n         return baseModel.getValueAt(viewToModelMapping.get(row).intValue(), col);\n     }\n \n     @Override\n-    public void setValueAt( Object value, int row, int col ) {\n-        if (baseModel == null)\n-\t\t\treturn;\n+    public void setValueAt(Object value, int row, int col) {\n+        if (baseModel == null) {\n+            return;\n+        }\n \n-        baseModel.setValueAt( value, viewToModelMapping.get(row).intValue(), col );\n+        baseModel.setValueAt(value, viewToModelMapping.get(row).intValue(), col);\n         fireTableDataChanged();\n     }\n \n     private void setupMapping() {\n         int numRows = baseModel.getRowCount();\n         viewToModelMapping = new ArrayList<Integer>(numRows);\n-\t\tfor (int i = 0; i < numRows; i++)\n+        for (int i = 0; i < numRows; i++) {\n             viewToModelMapping.add(i);\n+        }\n \n-        Collections.sort( viewToModelMapping, new Comparator<Integer>() {\n+        Collections.sort(viewToModelMapping, new Comparator<Integer>() {\n             @SuppressWarnings(\"unchecked\")\n-            public int compare( Integer a, Integer b ) {\n-\t\t\t\tif ((sortDirection == SORT_NO_ORDER) || (sortColumn == -1))\n+            public int compare(Integer a, Integer b) {\n+                if ((sortDirection == SORT_NO_ORDER) || (sortColumn == -1)) {\n                     return a.compareTo(b);\n+                }\n \n-                Comparable<Object> first = (Comparable<Object>)baseModel.getValueAt( a.intValue(), sortColumn );\n-                Comparable<Object>  second = (Comparable<Object>)baseModel.getValueAt( b.intValue(), sortColumn );\n+                Comparable<Object> first = (Comparable<Object>) baseModel.getValueAt(a.intValue(), sortColumn);\n+                Comparable<Object> second = (Comparable<Object>) baseModel.getValueAt(b.intValue(), sortColumn);\n \n-                if (sortDirection == SORT_ASCENDING_ORDER)\n+                if (sortDirection == SORT_ASCENDING_ORDER) {\n                     return first.compareTo(second);\n-                else\n-\t\t\t\t\treturn second.compareTo(first);\n+                } else {\n+                    return second.compareTo(first);\n+                }\n             }\n         });\n \n     }\n \n-    private class BaseTableModelListener implements TableModelListener\n-    {\n-        public void tableChanged( TableModelEvent e ) {\n-\t\t\tDefaultSortedTableModel.this.fireTableChanged(e);\n+    private class BaseTableModelListener implements TableModelListener {\n+        public void tableChanged(TableModelEvent e) {\n+            DefaultSortedTableModel.this.fireTableChanged(e);\n         }\n     }\n \n-    private class HeaderListener extends MouseAdapter\n-    {\n+    private class HeaderListener extends MouseAdapter {\n         @Override\n-\t\tpublic void mouseClicked(MouseEvent e) {\n-            JTableHeader header = (JTableHeader)e.getSource();\n+        public void mouseClicked(MouseEvent e) {\n+            JTableHeader header = (JTableHeader) e.getSource();\n             int column = header.columnAtPoint(e.getPoint());\n             column = header.getTable().convertColumnIndexToModel(column);\n-\t\t\tif (column != sortColumn) {\n+            if (column != sortColumn) {\n                 sortColumn = column;\n                 sortDirection = SORT_ASCENDING_ORDER;\n             } else {\n-\t\t\t\tsortDirection = (sortDirection + 1) % NUM_SORT_DIREECTIONS;\n+                sortDirection = (sortDirection + 1) % NUM_SORT_DIREECTIONS;\n             }\n             super.mouseClicked(e);\n             DefaultSortedTableModel.this.fireTableDataChanged();\n-\t\t}\n+        }\n     }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/28/DefaultSortedTableModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/28/DefaultSortedTableModel.java\nindex c7117bc36da..c14a8bf5546 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/28/DefaultSortedTableModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/28/DefaultSortedTableModel.java\n@@ -18,7 +18,6 @@\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\t 02111-1307\t USA\n  */\n \n-\n package edu.umd.cs.findbugs.gui;\n \n import java.awt.Component;\n@@ -45,53 +44,54 @@ import javax.swing.table.TableModel;\n  * A Table model that sits between the JTable and the real model.\n  * This model converts view row indexes, into sorted model row indexes.\n  */\n-public class DefaultSortedTableModel extends AbstractTableModel\n-{\n+public class DefaultSortedTableModel extends AbstractTableModel {\n     /**\n      *\n      */\n-\tprivate static final long serialVersionUID = 1L;\n-    public static final int SORT_NO_ORDER = 0;\n+private static final long serialVersionUID = 1L;\n+\n+public static final int SORT_NO_ORDER = 0;\n     public static final int SORT_ASCENDING_ORDER = 1;\n     public static final int SORT_DESCENDING_ORDER = 2;\n-\tpublic static final int NUM_SORT_DIREECTIONS = 3;\n \n-    private AbstractTableModel baseModel;\n+public static final int NUM_SORT_DIREECTIONS = 3;\n+\n+private AbstractTableModel baseModel;\n     private List<Integer> viewToModelMapping;\n     private int sortDirection = SORT_ASCENDING_ORDER;\n-\tprivate int sortColumn = 0;\n-    private ImageIcon upIcon, downIcon;\n \n+private int sortColumn = 0;\n \n-    public DefaultSortedTableModel( AbstractTableModel model, JTableHeader header ) {\n+private ImageIcon upIcon, downIcon;\n+\n+public DefaultSortedTableModel(AbstractTableModel model, JTableHeader header) {\n         baseModel = model;\n         model.addTableModelListener(new BaseTableModelListener());\n \n         final JTableHeader baseHeader = header;\n         baseHeader.addMouseListener(new HeaderListener());\n         final TableCellRenderer baseRenderer = baseHeader.getDefaultRenderer();\n-\t\tbaseHeader.setDefaultRenderer( new DefaultTableCellRenderer() {\n-            @Override\n+baseHeader.setDefaultRenderer(new DefaultTableCellRenderer() {\n+    @Override\n             public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n                 JLabel label = (JLabel)baseRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n-\t\t\t\tif (baseHeader.getTable().convertColumnIndexToModel(column) == sortColumn) {\n-                    if (sortDirection != SORT_NO_ORDER) {\n+if (baseHeader.getTable().convertColumnIndexToModel(column) == sortColumn) {\n+    if (sortDirection != SORT_NO_ORDER) {\n                         label.setHorizontalTextPosition(SwingConstants.LEFT);\n-                        label.setIcon( sortDirection == SORT_ASCENDING_ORDER ? downIcon : upIcon );\n-\t\t\t\t\t} else {\n-                        label.setIcon(null);\n+                        label.setIcon(sortDirection == SORT_ASCENDING_ORDER ? downIcon : upIcon);\n+    } else {\n+    label.setIcon(null);\n                     }\n                 } else {\n-\t\t\t\t\tlabel.setIcon(null);\n-                }\n+    label.setIcon(null);\n+    }\n                 return label;\n             }\n-\t\t});\n-\n-        setupMapping();\n+    });\n+setupMapping();\n         ClassLoader classLoader = this.getClass().getClassLoader();\n         upIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/up.png\"));\n-\t\tdownIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/down.png\"));\n+downIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/down.png\"));\n     }\n \n     // Base Model handling\n@@ -100,69 +100,68 @@ public class DefaultSortedTableModel extends AbstractTableModel\n         return baseModel;\n     }\n \n-    public int getBaseModelIndex( int viewIndex ) {\n+    public int getBaseModelIndex(int viewIndex) {\n         return viewToModelMapping.get(viewIndex).intValue();\n     }\n \n     // Event handling\n \n     @Override\n-    public void fireTableCellUpdated( int row, int col ) {\n+    public void fireTableCellUpdated(int row, int col) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableCellUpdated(row, col);\n+    setupMapping();\n+super.fireTableCellUpdated(row, col);\n     }\n \n     @Override\n-    public void fireTableChanged( TableModelEvent e ) {\n+    public void fireTableChanged(TableModelEvent e) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableChanged(e);\n+    setupMapping();\n+super.fireTableChanged(e);\n     }\n \n     @Override\n     public void fireTableDataChanged() {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableDataChanged();\n+    setupMapping();\n+super.fireTableDataChanged();\n     }\n \n     @Override\n-    public void fireTableRowsDeleted( int first, int last ) {\n+    public void fireTableRowsDeleted(int first, int last) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableRowsDeleted(first,last);\n+    setupMapping();\n+super.fireTableRowsDeleted(first, last);\n     }\n \n     @Override\n-    public void fireTableRowsInserted( int first, int last ) {\n+    public void fireTableRowsInserted(int first, int last) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableRowsInserted(first, last);\n+    setupMapping();\n+super.fireTableRowsInserted(first, last);\n     }\n \n     @Override\n-    public void fireTableRowsUpdated( int first, int last ) {\n+    public void fireTableRowsUpdated(int first, int last) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableRowsUpdated(first, last);\n+    setupMapping();\n+super.fireTableRowsUpdated(first, last);\n     }\n \n     @Override\n     public void fireTableStructureChanged() {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableStructureChanged();\n+    setupMapping();\n+super.fireTableStructureChanged();\n     }\n \n     // accessors\n \n     @Override\n-    public int findColumn( String columnName ) {\n+    public int findColumn(String columnName) {\n         if (baseModel == null)\n-\t\t\treturn -1;\n-\n-        return baseModel.findColumn(columnName);\n+    return -1;\n+    return baseModel.findColumn(columnName);\n     }\n \n     public int getColumnCount() {\n@@ -180,30 +179,27 @@ public class DefaultSortedTableModel extends AbstractTableModel\n     }\n \n     @Override\n-    public Class<?> getColumnClass( int column ) {\n+    public Class<?> getColumnClass(int column) {\n         if (baseModel == null)\n-\t\t\treturn null;\n-\n-        return baseModel.getColumnClass(column);\n+    return null;\n+return baseModel.getColumnClass(column);\n     }\n \n     @Override\n-    public String getColumnName( int column ) {\n+    public String getColumnName(int column) {\n         if (baseModel == null)\n-\t\t\treturn null;\n-\n-        return baseModel.getColumnName(column);\n+    return null;\n+return baseModel.getColumnName(column);\n     }\n \n     @Override\n-    public boolean isCellEditable( int row, int col ) {\n+    public boolean isCellEditable(int row, int col) {\n         if (baseModel == null)\n-\t\t\treturn false;\n-\n-        return baseModel.isCellEditable( row, col );\n+    return false;\n+    return baseModel.isCellEditable(row, col);\n     }\n \n-    public Object getValueAt( int row, int col ) {\n+    public Object getValueAt(int row, int col) {\n         if (baseModel == null)\n             return null;\n \n@@ -211,60 +207,57 @@ public class DefaultSortedTableModel extends AbstractTableModel\n     }\n \n     @Override\n-    public void setValueAt( Object value, int row, int col ) {\n+    public void setValueAt(Object value, int row, int col) {\n         if (baseModel == null)\n-\t\t\treturn;\n-\n-        baseModel.setValueAt( value, viewToModelMapping.get(row).intValue(), col );\n+    return;\n+    baseModel.setValueAt(value, viewToModelMapping.get(row).intValue(), col);\n         fireTableDataChanged();\n     }\n \n     private void setupMapping() {\n         int numRows = baseModel.getRowCount();\n         viewToModelMapping = new ArrayList<Integer>(numRows);\n-\t\tfor (int i = 0; i < numRows; i++)\n-            viewToModelMapping.add(i);\n+for (int i = 0; i < numRows; i++)\n+    viewToModelMapping.add(i);\n \n-        Collections.sort( viewToModelMapping, new Comparator<Integer>() {\n+        Collections.sort(viewToModelMapping, new Comparator<Integer>() {\n             @SuppressWarnings(\"unchecked\")\n-            public int compare( Integer a, Integer b ) {\n-\t\t\t\tif ((sortDirection == SORT_NO_ORDER) || (sortColumn == -1))\n-                    return a.compareTo(b);\n+            public int compare(Integer a, Integer b) {\n+    if ((sortDirection == SORT_NO_ORDER) || (sortColumn == -1))\n+    return a.compareTo(b);\n \n-                Comparable<Object> first = (Comparable<Object>)baseModel.getValueAt( a.intValue(), sortColumn );\n-                Comparable<Object>  second = (Comparable<Object>)baseModel.getValueAt( b.intValue(), sortColumn );\n+                Comparable<Object> first = (Comparable<Object>) baseModel.getValueAt(a.intValue(), sortColumn);\n+                Comparable<Object> second = (Comparable<Object>) baseModel.getValueAt(b.intValue(), sortColumn);\n \n                 if (sortDirection == SORT_ASCENDING_ORDER)\n                     return first.compareTo(second);\n                 else\n-\t\t\t\t\treturn second.compareTo(first);\n-            }\n+    return second.compareTo(first);\n+    }\n         });\n \n     }\n \n-    private class BaseTableModelListener implements TableModelListener\n-    {\n-        public void tableChanged( TableModelEvent e ) {\n-\t\t\tDefaultSortedTableModel.this.fireTableChanged(e);\n-        }\n+    private class BaseTableModelListener implements TableModelListener {\n+        public void tableChanged(TableModelEvent e) {\n+    DefaultSortedTableModel.this.fireTableChanged(e);\n+    }\n     }\n \n-    private class HeaderListener extends MouseAdapter\n-    {\n+    private class HeaderListener extends MouseAdapter {\n         @Override\n-\t\tpublic void mouseClicked(MouseEvent e) {\n-            JTableHeader header = (JTableHeader)e.getSource();\n+public void mouseClicked(MouseEvent e) {\n+    JTableHeader header = (JTableHeader)e.getSource();\n             int column = header.columnAtPoint(e.getPoint());\n             column = header.getTable().convertColumnIndexToModel(column);\n-\t\t\tif (column != sortColumn) {\n-                sortColumn = column;\n+if (column != sortColumn) {\n+    sortColumn = column;\n                 sortDirection = SORT_ASCENDING_ORDER;\n             } else {\n-\t\t\t\tsortDirection = (sortDirection + 1) % NUM_SORT_DIREECTIONS;\n-            }\n+    sortDirection = (sortDirection + 1) % NUM_SORT_DIREECTIONS;\n+    }\n             super.mouseClicked(e);\n             DefaultSortedTableModel.this.fireTableDataChanged();\n-\t\t}\n     }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/28/DefaultSortedTableModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/28/DefaultSortedTableModel.java\nindex c7117bc36da..f546599fc41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/28/DefaultSortedTableModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/28/DefaultSortedTableModel.java\n@@ -10,12 +10,12 @@\n  *\n  * This library is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * Lesser General Public License for more details.\n  *\n  * You should have received a copy of the GNU Lesser General Public\n  * License along with this library; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\t 02111-1307\t USA\n+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n  */\n \n \n@@ -28,7 +28,6 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n-\n import javax.swing.ImageIcon;\n import javax.swing.JLabel;\n import javax.swing.JTable;\n@@ -45,226 +44,226 @@ import javax.swing.table.TableModel;\n  * A Table model that sits between the JTable and the real model.\n  * This model converts view row indexes, into sorted model row indexes.\n  */\n-public class DefaultSortedTableModel extends AbstractTableModel\n-{\n+\n+public class DefaultSortedTableModel extends AbstractTableModel {\n     /**\n      *\n      */\n-\tprivate static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n+\n     public static final int SORT_NO_ORDER = 0;\n+\n     public static final int SORT_ASCENDING_ORDER = 1;\n+\n     public static final int SORT_DESCENDING_ORDER = 2;\n-\tpublic static final int NUM_SORT_DIREECTIONS = 3;\n+\n+    public static final int NUM_SORT_DIREECTIONS = 3;\n \n     private AbstractTableModel baseModel;\n+\n     private List<Integer> viewToModelMapping;\n+\n     private int sortDirection = SORT_ASCENDING_ORDER;\n-\tprivate int sortColumn = 0;\n+\n+    private int sortColumn = 0;\n+\n     private ImageIcon upIcon, downIcon;\n \n \n-    public DefaultSortedTableModel( AbstractTableModel model, JTableHeader header ) {\n+    public DefaultSortedTableModel(AbstractTableModel model, JTableHeader header) {\n         baseModel = model;\n         model.addTableModelListener(new BaseTableModelListener());\n \n         final JTableHeader baseHeader = header;\n         baseHeader.addMouseListener(new HeaderListener());\n+\n         final TableCellRenderer baseRenderer = baseHeader.getDefaultRenderer();\n-\t\tbaseHeader.setDefaultRenderer( new DefaultTableCellRenderer() {\n+        baseHeader.setDefaultRenderer(new DefaultTableCellRenderer() {\n             @Override\n             public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n-                JLabel label = (JLabel)baseRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n-\t\t\t\tif (baseHeader.getTable().convertColumnIndexToModel(column) == sortColumn) {\n+                JLabel label = (JLabel) baseRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n+                if (baseHeader.getTable().convertColumnIndexToModel(column) == sortColumn) {\n                     if (sortDirection != SORT_NO_ORDER) {\n                         label.setHorizontalTextPosition(SwingConstants.LEFT);\n-                        label.setIcon( sortDirection == SORT_ASCENDING_ORDER ? downIcon : upIcon );\n-\t\t\t\t\t} else {\n+                        label.setIcon(sortDirection == SORT_ASCENDING_ORDER ? downIcon : upIcon);\n+                    } else {\n                         label.setIcon(null);\n                     }\n                 } else {\n-\t\t\t\t\tlabel.setIcon(null);\n+                    label.setIcon(null);\n                 }\n                 return label;\n             }\n-\t\t});\n-\n+        });\n         setupMapping();\n         ClassLoader classLoader = this.getClass().getClassLoader();\n         upIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/up.png\"));\n-\t\tdownIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/down.png\"));\n+        downIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/down.png\"));\n     }\n \n     // Base Model handling\n \n+\n     public TableModel getBaseTableModel() {\n         return baseModel;\n     }\n \n-    public int getBaseModelIndex( int viewIndex ) {\n+    public int getBaseModelIndex(int viewIndex) {\n         return viewToModelMapping.get(viewIndex).intValue();\n     }\n \n     // Event handling\n \n     @Override\n-    public void fireTableCellUpdated( int row, int col ) {\n+    public void fireTableCellUpdated(int row, int col) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n+            setupMapping();\n         super.fireTableCellUpdated(row, col);\n     }\n \n     @Override\n-    public void fireTableChanged( TableModelEvent e ) {\n+    public void fireTableChanged(TableModelEvent e) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n+            setupMapping();\n         super.fireTableChanged(e);\n     }\n \n     @Override\n     public void fireTableDataChanged() {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n+            setupMapping();\n         super.fireTableDataChanged();\n     }\n \n     @Override\n-    public void fireTableRowsDeleted( int first, int last ) {\n+    public void fireTableRowsDeleted(int first, int last) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n-        super.fireTableRowsDeleted(first,last);\n+            setupMapping();\n+        super.fireTableRowsDeleted(first, last);\n     }\n \n     @Override\n-    public void fireTableRowsInserted( int first, int last ) {\n+    public void fireTableRowsInserted(int first, int last) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n+            setupMapping();\n         super.fireTableRowsInserted(first, last);\n     }\n \n     @Override\n-    public void fireTableRowsUpdated( int first, int last ) {\n+    public void fireTableRowsUpdated(int first, int last) {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n+            setupMapping();\n         super.fireTableRowsUpdated(first, last);\n     }\n \n     @Override\n     public void fireTableStructureChanged() {\n         if (baseModel != null)\n-\t\t\tsetupMapping();\n+            setupMapping();\n         super.fireTableStructureChanged();\n     }\n \n     // accessors\n \n     @Override\n-    public int findColumn( String columnName ) {\n+    public int findColumn(String columnName) {\n         if (baseModel == null)\n-\t\t\treturn -1;\n-\n+            return -1;\n         return baseModel.findColumn(columnName);\n     }\n \n     public int getColumnCount() {\n         if (baseModel == null)\n             return 0;\n-\n         return baseModel.getColumnCount();\n     }\n \n     public int getRowCount() {\n         if (baseModel == null)\n             return 0;\n-\n         return baseModel.getRowCount();\n     }\n \n     @Override\n-    public Class<?> getColumnClass( int column ) {\n+    public Class<?> getColumnClass(int column) {\n         if (baseModel == null)\n-\t\t\treturn null;\n-\n+            return null;\n         return baseModel.getColumnClass(column);\n     }\n \n     @Override\n-    public String getColumnName( int column ) {\n+    public String getColumnName(int column) {\n         if (baseModel == null)\n-\t\t\treturn null;\n-\n+            return null;\n         return baseModel.getColumnName(column);\n     }\n \n     @Override\n-    public boolean isCellEditable( int row, int col ) {\n+    public boolean isCellEditable(int row, int col) {\n         if (baseModel == null)\n-\t\t\treturn false;\n-\n-        return baseModel.isCellEditable( row, col );\n+            return false;\n+        return baseModel.isCellEditable(row, col);\n     }\n \n-    public Object getValueAt( int row, int col ) {\n+    public Object getValueAt(int row, int col) {\n         if (baseModel == null)\n             return null;\n-\n         return baseModel.getValueAt(viewToModelMapping.get(row).intValue(), col);\n     }\n \n     @Override\n-    public void setValueAt( Object value, int row, int col ) {\n+    public void setValueAt(Object value, int row, int col) {\n         if (baseModel == null)\n-\t\t\treturn;\n-\n-        baseModel.setValueAt( value, viewToModelMapping.get(row).intValue(), col );\n+            return;\n+        baseModel.setValueAt(value, viewToModelMapping.get(row).intValue(), col);\n         fireTableDataChanged();\n     }\n \n+\n     private void setupMapping() {\n         int numRows = baseModel.getRowCount();\n         viewToModelMapping = new ArrayList<Integer>(numRows);\n-\t\tfor (int i = 0; i < numRows; i++)\n+        for (int i = 0; i < numRows; i++)\n             viewToModelMapping.add(i);\n-\n-        Collections.sort( viewToModelMapping, new Comparator<Integer>() {\n+        Collections.sort(viewToModelMapping, new Comparator<Integer>() {\n             @SuppressWarnings(\"unchecked\")\n-            public int compare( Integer a, Integer b ) {\n-\t\t\t\tif ((sortDirection == SORT_NO_ORDER) || (sortColumn == -1))\n+            public int compare(Integer a, Integer b) {\n+                if ((sortDirection == SORT_NO_ORDER) || (sortColumn == -1))\n                     return a.compareTo(b);\n-\n-                Comparable<Object> first = (Comparable<Object>)baseModel.getValueAt( a.intValue(), sortColumn );\n-                Comparable<Object>  second = (Comparable<Object>)baseModel.getValueAt( b.intValue(), sortColumn );\n-\n+                Comparable<Object> first = (Comparable<Object>) baseModel.getValueAt(a.intValue(), sortColumn);\n+                Comparable<Object> second = (Comparable<Object>) baseModel.getValueAt(b.intValue(), sortColumn);\n                 if (sortDirection == SORT_ASCENDING_ORDER)\n                     return first.compareTo(second);\n                 else\n-\t\t\t\t\treturn second.compareTo(first);\n+                    return second.compareTo(first);\n             }\n-        });\n-\n+                         });\n     }\n \n-    private class BaseTableModelListener implements TableModelListener\n-    {\n-        public void tableChanged( TableModelEvent e ) {\n-\t\t\tDefaultSortedTableModel.this.fireTableChanged(e);\n+\n+    private class BaseTableModelListener implements TableModelListener {\n+        public void tableChanged(TableModelEvent e) {\n+            DefaultSortedTableModel.this.fireTableChanged(e);\n         }\n+\n     }\n \n-    private class HeaderListener extends MouseAdapter\n-    {\n+\n+    private class HeaderListener extends MouseAdapter {\n         @Override\n-\t\tpublic void mouseClicked(MouseEvent e) {\n-            JTableHeader header = (JTableHeader)e.getSource();\n+        public void mouseClicked(MouseEvent e) {\n+            JTableHeader header = (JTableHeader) e.getSource();\n             int column = header.columnAtPoint(e.getPoint());\n             column = header.getTable().convertColumnIndexToModel(column);\n-\t\t\tif (column != sortColumn) {\n+            if (column != sortColumn) {\n                 sortColumn = column;\n                 sortDirection = SORT_ASCENDING_ORDER;\n             } else {\n-\t\t\t\tsortDirection = (sortDirection + 1) % NUM_SORT_DIREECTIONS;\n+                sortDirection = (sortDirection + 1) % NUM_SORT_DIREECTIONS;\n             }\n             super.mouseClicked(e);\n             DefaultSortedTableModel.this.fireTableDataChanged();\n-\t\t}\n+        }\n+\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 90
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}