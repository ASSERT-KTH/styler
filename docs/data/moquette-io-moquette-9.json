{
    "project_name": "moquette-io-moquette",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "warning",
                "message": "missing copyright header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "package io.moquette.persistence;\n\nimport io.moquette.BrokerConstants;\nimport io.moquette.broker.ISubscriptionsRepository;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/9/H2Builder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/9/H2Builder.java\nindex 324528c1085..6f288edb5a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/9/H2Builder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/9/H2Builder.java\n@@ -12,44 +12,44 @@ import java.util.concurrent.TimeUnit;\n \n public class H2Builder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(H2Builder.class);\n-\n-    private final String storePath;\n-    private final int autosaveInterval; // in seconds\n-    private final ScheduledExecutorService scheduler;\n-    private MVStore mvStore;\n-\n-    public H2Builder(IConfig props, ScheduledExecutorService scheduler) {\n-        this.storePath = props.getProperty(BrokerConstants.PERSISTENT_STORE_PROPERTY_NAME, \"\");\n-        final String autosaveProp = props.getProperty(BrokerConstants.AUTOSAVE_INTERVAL_PROPERTY_NAME, \"30\");\n-        this.autosaveInterval = Integer.parseInt(autosaveProp);\n-        this.scheduler = scheduler;\n-    }\n-\n-    @SuppressWarnings(\"FutureReturnValueIgnored\")\n-    public H2Builder initStore() {\n-        LOG.info(\"Initializing H2 store\");\n-        if (storePath == null || storePath.isEmpty()) {\n-            throw new IllegalArgumentException(\"H2 store path can't be null or empty\");\n-        }\n-        mvStore = new MVStore.Builder()\n-            .fileName(storePath)\n-            .autoCommitDisabled()\n-            .open();\n-\n-        LOG.trace(\"Scheduling H2 commit task\");\n-        scheduler.scheduleWithFixedDelay(() -> {\n-            LOG.trace(\"Committing to H2\");\n-            mvStore.commit();\n-        }, autosaveInterval, autosaveInterval, TimeUnit.SECONDS);\n-        return this;\n-    }\n-\n-    public ISubscriptionsRepository subscriptionsRepository() {\n-        return new H2SubscriptionsRepository(mvStore);\n-    }\n-\n-    public void closeStore() {\n-        mvStore.close();\n+  private static final Logger LOG = LoggerFactory.getLogger(H2Builder.class);\n+\n+  private final String storePath;\n+  private final int autosaveInterval; // in seconds\n+  private final ScheduledExecutorService scheduler;\n+  private MVStore mvStore;\n+\n+  public H2Builder(IConfig props, ScheduledExecutorService scheduler) {\n+    this.storePath = props.getProperty(BrokerConstants.PERSISTENT_STORE_PROPERTY_NAME, \"\");\n+    final String autosaveProp = props.getProperty(BrokerConstants.AUTOSAVE_INTERVAL_PROPERTY_NAME, \"30\");\n+    this.autosaveInterval = Integer.parseInt(autosaveProp);\n+    this.scheduler = scheduler;\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  public H2Builder initStore() {\n+    LOG.info(\"Initializing H2 store\");\n+    if (storePath == null || storePath.isEmpty()) {\n+      throw new IllegalArgumentException(\"H2 store path can't be null or empty\");\n     }\n+    mvStore = new MVStore.Builder()\n+        .fileName(storePath)\n+        .autoCommitDisabled()\n+        .open();\n+\n+    LOG.trace(\"Scheduling H2 commit task\");\n+    scheduler.scheduleWithFixedDelay(() -> {\n+      LOG.trace(\"Committing to H2\");\n+      mvStore.commit();\n+    }, autosaveInterval, autosaveInterval, TimeUnit.SECONDS);\n+    return this;\n+  }\n+\n+  public ISubscriptionsRepository subscriptionsRepository() {\n+    return new H2SubscriptionsRepository(mvStore);\n+  }\n+\n+  public void closeStore() {\n+    mvStore.close();\n+  }\n }\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/9/H2Builder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/9/H2Builder.java\nindex 324528c1085..e588141d760 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/9/H2Builder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/9/H2Builder.java\n@@ -52,4 +52,4 @@ public class H2Builder {\n     public void closeStore() {\n         mvStore.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/9/H2Builder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/9/H2Builder.java\nindex 324528c1085..62b14f31ce3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/9/H2Builder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/9/H2Builder.java\n@@ -6,14 +6,13 @@ import io.moquette.broker.config.IConfig;\n import org.h2.mvstore.MVStore;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n+\n public class H2Builder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(H2Builder.class);\n-\n     private final String storePath;\n     private final int autosaveInterval; // in seconds\n     private final ScheduledExecutorService scheduler;\n@@ -32,11 +31,9 @@ public class H2Builder {\n         if (storePath == null || storePath.isEmpty()) {\n             throw new IllegalArgumentException(\"H2 store path can't be null or empty\");\n         }\n-        mvStore = new MVStore.Builder()\n-            .fileName(storePath)\n-            .autoCommitDisabled()\n-            .open();\n-\n+        mvStore = new MVStore.Builder().fileName(storePath)\n+.autoCommitDisabled()\n+.open();\n         LOG.trace(\"Scheduling H2 commit task\");\n         scheduler.scheduleWithFixedDelay(() -> {\n             LOG.trace(\"Committing to H2\");\n@@ -52,4 +49,5 @@ public class H2Builder {\n     public void closeStore() {\n         mvStore.close();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}