{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4102",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4102/Begin.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4102/Begin.java\nindex 3002d38cbd8..debf1f3baa2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4102/Begin.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4102/Begin.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.rmi.RemoteException;\n@@ -32,67 +33,65 @@ import org.neo4j.shell.Session;\n import org.neo4j.shell.ShellException;\n import org.neo4j.shell.kernel.GraphDatabaseShellServer;\n \n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Begin extends NonTransactionProvidingApp\n {\n-    private static final String TRANSACTION = \"TRANSACTION\";\n+  private static final String TRANSACTION = \"TRANSACTION\";\n \n-    @Override\n-    public String getDescription()\n-    {\n-        return \"Opens a transaction\";\n-    }\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Opens a transaction\";\n+  }\n \n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-            throws RemoteException\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session, Output out)\n+      throws RemoteException\n+  {\n+    String lineWithoutApp = parser.getLineWithoutApp();\n+    if (!acceptableText(lineWithoutApp))\n     {\n-        String lineWithoutApp = parser.getLineWithoutApp();\n-        if ( !acceptableText( lineWithoutApp ) )\n-        {\n-            out.println( \"Error: To open a transaction, write BEGIN TRANSACTION\" );\n-            return Continuation.INPUT_COMPLETE;\n-        }\n-\n-        KernelTransaction tx = currentTransaction( getServer() );\n+      out.println(\"Error: To open a transaction, write BEGIN TRANSACTION\");\n+      return Continuation.INPUT_COMPLETE;\n+    }\n \n-        // This is a \"begin\" app so it will leave a transaction open. Don't close it in here\n-        getServer().getDb().beginTx();\n-        Integer txCount = session.getCommitCount();\n+    KernelTransaction tx = currentTransaction(getServer());\n \n-        int count;\n-        if ( txCount == null )\n-        {\n-            if ( tx == null )\n-            {\n-                count = 0;\n-                out.println( \"Transaction started\" );\n-            }\n-            else\n-            {\n-                count = 1;\n-                out.println( \"Warning: transaction found that was not started by the shell.\" );\n-            }\n-        }\n-        else\n-        {\n-            count = txCount;\n-            out.println( String.format( \"Nested transaction started (Tx count: %d)\", count + 1 ) );\n-        }\n+    // This is a \"begin\" app so it will leave a transaction open. Don't close it in here\n+    getServer().getDb().beginTx();\n+    Integer txCount = session.getCommitCount();\n \n-        session.setCommitCount( ++count );\n-        return Continuation.INPUT_COMPLETE;\n+    int count;\n+    if (txCount == null)\n+    {\n+      if (tx == null)\n+      {\n+        count = 0;\n+        out.println(\"Transaction started\");\n+      } else\n+      {\n+        count = 1;\n+        out.println(\"Warning: transaction found that was not started by the shell.\");\n+      }\n+    } else\n+    {\n+      count = txCount;\n+      out.println(String.format(\"Nested transaction started (Tx count: %d)\", count + 1));\n     }\n \n-    private boolean acceptableText( String line )\n-    {\n-        return line != null && line.length() <= TRANSACTION.length() && TRANSACTION.startsWith( line.toUpperCase() );\n+    session.setCommitCount(++count);\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-    }\n+  private boolean acceptableText(String line)\n+  {\n+    return line != null && line.length() <= TRANSACTION.length() && TRANSACTION.startsWith(line.toUpperCase());\n \n-    public static KernelTransaction currentTransaction( GraphDatabaseShellServer server )\n-    {\n-        return server.getDb().getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class )\n-                .getTopLevelTransactionBoundToThisThread( false );\n-    }\n+  }\n+\n+  public static KernelTransaction currentTransaction(GraphDatabaseShellServer server)\n+  {\n+    return server.getDb().getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class)\n+        .getTopLevelTransactionBoundToThisThread(false);\n+  }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4102/Begin.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4102/Begin.java\nindex 3002d38cbd8..898dded56d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4102/Begin.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4102/Begin.java\n@@ -44,9 +44,8 @@ public class Begin extends NonTransactionProvidingApp\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-            throws RemoteException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws RemoteException\n+{\n         String lineWithoutApp = parser.getLineWithoutApp();\n         if ( !acceptableText( lineWithoutApp ) )\n         {\n@@ -87,12 +86,10 @@ public class Begin extends NonTransactionProvidingApp\n     private boolean acceptableText( String line )\n     {\n         return line != null && line.length() <= TRANSACTION.length() && TRANSACTION.startsWith( line.toUpperCase() );\n-\n     }\n \n     public static KernelTransaction currentTransaction( GraphDatabaseShellServer server )\n     {\n-        return server.getDb().getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class )\n-                .getTopLevelTransactionBoundToThisThread( false );\n+        return server.getDb().getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class ).getTopLevelTransactionBoundToThisThread( false );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}