{
    "project_name": "neo4j-neo4j",
    "error_id": "1649",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1649/InspectingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1649/InspectingVisitor.java\nindex 3c1d278a855..7f7a6fce22d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1649/InspectingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1649/InspectingVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.apache.commons.lang3.tuple.Pair;\n@@ -34,13 +35,13 @@ import java.util.stream.Collectors;\n import static java.util.Collections.unmodifiableList;\n import static java.util.Collections.unmodifiableMap;\n \n-public class InspectingVisitor<KEY, VALUE> extends GBPTreeVisitor.Adaptor<KEY,VALUE>\n+public class InspectingVisitor<KEY, VALUE> extends GBPTreeVisitor.Adaptor<KEY, VALUE>\n {\n     private final MutableLongList internalNodes = LongLists.mutable.empty();\n     private final MutableLongList leafNodes = LongLists.mutable.empty();\n     private final MutableLongList allNodes = LongLists.mutable.empty();\n     private final MutableLongList offloadNodes = LongLists.mutable.empty();\n-    private final Map<Long,Integer> allKeyCounts = new HashMap<>();\n+    private final Map<Long, Integer> allKeyCounts = new HashMap<>();\n     private final List<LongList> nodesPerLevel = new ArrayList<>();\n     private final List<FreelistEntry> allFreelistEntries = new ArrayList<>();\n     private long rootNode;\n@@ -54,81 +55,80 @@ public class InspectingVisitor<KEY, VALUE> extends GBPTreeVisitor.Adaptor<KEY,VA\n         clear();\n     }\n \n-    public GBPTreeInspection<KEY,VALUE> get()\n+    public GBPTreeInspection<KEY, VALUE> get()\n     {\n         final List<ImmutableLongList> immutableNodesPerLevel = nodesPerLevel.stream()\n-                .map( LongLists.immutable::ofAll )\n-                .collect( Collectors.toList() );\n+          .map(LongLists.immutable::ofAll)\n+          .collect(Collectors.toList());\n         return new GBPTreeInspection<>(\n-                LongLists.immutable.ofAll( internalNodes ),\n-                LongLists.immutable.ofAll( leafNodes ),\n-                LongLists.immutable.ofAll( allNodes ),\n-                LongLists.immutable.ofAll( offloadNodes ),\n-                unmodifiableMap( allKeyCounts ),\n-                immutableNodesPerLevel,\n-                unmodifiableList( allFreelistEntries ),\n-                rootNode,\n-                lastLevel,\n-                treeState );\n+          LongLists.immutable.ofAll(internalNodes),\n+          LongLists.immutable.ofAll(leafNodes),\n+          LongLists.immutable.ofAll(allNodes),\n+          LongLists.immutable.ofAll(offloadNodes),\n+          unmodifiableMap(allKeyCounts),\n+          immutableNodesPerLevel,\n+          unmodifiableList(allFreelistEntries),\n+          rootNode,\n+          lastLevel,\n+          treeState);\n     }\n \n     @Override\n-    public void treeState( Pair<TreeState,TreeState> statePair )\n+    public void treeState(Pair<TreeState, TreeState> statePair)\n     {\n-        this.treeState = TreeStatePair.selectNewestValidState( statePair );\n+        this.treeState = TreeStatePair.selectNewestValidState(statePair);\n     }\n \n     @Override\n-    public void beginLevel( int level )\n+    public void beginLevel(int level)\n     {\n         lastLevel = level;\n         currentLevelNodes = LongLists.mutable.empty();\n-        nodesPerLevel.add( currentLevelNodes );\n+        nodesPerLevel.add(currentLevelNodes);\n     }\n \n     @Override\n-    public void beginNode( long pageId, boolean isLeaf, long generation, int keyCount )\n+    public void beginNode(long pageId, boolean isLeaf, long generation, int keyCount)\n     {\n-        if ( lastLevel == 0 )\n+        if (lastLevel == 0)\n         {\n-            if ( rootNode != -1 )\n+            if (rootNode != -1)\n             {\n-                throw new IllegalStateException( \"Expected to only have a single node on level 0\" );\n+                throw new IllegalStateException(\"Expected to only have a single node on level 0\");\n             }\n             rootNode = pageId;\n         }\n \n-        currentLevelNodes.add( pageId );\n-        allNodes.add( pageId );\n-        allKeyCounts.put( pageId, keyCount );\n-        if ( isLeaf )\n+        currentLevelNodes.add(pageId);\n+        allNodes.add(pageId);\n+        allKeyCounts.put(pageId, keyCount);\n+        if (isLeaf)\n         {\n-            leafNodes.add( pageId );\n-        }\n-        else\n+            leafNodes.add(pageId);\n+        } else\n         {\n-            internalNodes.add( pageId );\n+            internalNodes.add(pageId);\n         }\n     }\n \n     @Override\n-    public void beginFreelistPage( long pageId )\n+    public void beginFreelistPage(long pageId)\n     {\n         currentFreelistPage = pageId;\n     }\n \n     @Override\n-    public void freelistEntry( long pageId, long generation, int pos )\n+    public void freelistEntry(long pageId, long generation, int pos)\n     {\n-        allFreelistEntries.add( new FreelistEntry( currentFreelistPage, pos, pageId, generation ) );\n+        allFreelistEntries.add(new FreelistEntry(currentFreelistPage, pos, pageId, generation));\n     }\n \n     @Override\n-    public void key( KEY key, boolean isLeaf, long offloadId )\n+    public void key(KEY key, boolean isLeaf, long offloadId)\n     {\n-        if ( offloadId != TreeNode.NO_OFFLOAD_ID )\n+        if (offloadId != TreeNode.NO_OFFLOAD_ID)\n         {\n-            offloadNodes.add( offloadId );\n+            offloadNodes.add(offloadId);\n         }\n     }\n \n@@ -145,7 +145,7 @@ public class InspectingVisitor<KEY, VALUE> extends GBPTreeVisitor.Adaptor<KEY,VA\n         final long id;\n         final long generation;\n \n-        private FreelistEntry( long freelistPageId, int pos, long id, long generation )\n+        private FreelistEntry(long freelistPageId, int pos, long id, long generation)\n         {\n             this.freelistPageId = freelistPageId;\n             this.pos = pos;\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1649/InspectingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1649/InspectingVisitor.java\nindex 3c1d278a855..aaed8a23a86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1649/InspectingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1649/InspectingVisitor.java\n@@ -153,4 +153,4 @@ public class InspectingVisitor<KEY, VALUE> extends GBPTreeVisitor.Adaptor<KEY,VA\n             this.generation = generation;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}