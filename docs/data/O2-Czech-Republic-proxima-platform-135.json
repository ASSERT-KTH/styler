{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "135",
    "information": {
        "errors": [
            {
                "line": "40",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        };\n    KafkaWatermarkConfiguration configuration = new KafkaWatermarkConfiguration(cfg);\n    WatermarkIdlePolicyFactory policyFactory = configuration.getWatermarkIdlePolicyFactory();\n    BoundedOutOfOrdernessWatermarkEstimator estimator =\n        (BoundedOutOfOrdernessWatermarkEstimator)\n            configuration.getWatermarkEstimatorFactory().create(cfg, policyFactory);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/135/KafkaWatermarkConfigurationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/135/KafkaWatermarkConfigurationTest.java\nindex 569ca2ac43b..1da53497801 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/135/KafkaWatermarkConfigurationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/135/KafkaWatermarkConfigurationTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.kafka;\n \n import static org.junit.Assert.*;\n@@ -37,7 +38,8 @@ public class KafkaWatermarkConfigurationTest {\n           }\n         };\n     KafkaWatermarkConfiguration configuration = new KafkaWatermarkConfiguration(cfg);\n-    WatermarkIdlePolicyFactory policyFactory = configuration.getWatermarkIdlePolicyFactory();\n+    WatermarkIdlePolicyFactory policyFactory =\n+        configuration.getWatermarkIdlePolicyFactory();\n     BoundedOutOfOrdernessWatermarkEstimator estimator =\n         (BoundedOutOfOrdernessWatermarkEstimator)\n             configuration.getWatermarkEstimatorFactory().create(cfg, policyFactory);\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/135/KafkaWatermarkConfigurationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/135/KafkaWatermarkConfigurationTest.java\nindex 569ca2ac43b..395247c718b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/135/KafkaWatermarkConfigurationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/135/KafkaWatermarkConfigurationTest.java\n@@ -36,7 +36,8 @@ public class KafkaWatermarkConfigurationTest {\n             put(\"timestamp-skew\", 10L);\n           }\n         };\n-    KafkaWatermarkConfiguration configuration = new KafkaWatermarkConfiguration(cfg);\n+\n+KafkaWatermarkConfiguration configuration = new KafkaWatermarkConfiguration(cfg);\n     WatermarkIdlePolicyFactory policyFactory = configuration.getWatermarkIdlePolicyFactory();\n     BoundedOutOfOrdernessWatermarkEstimator estimator =\n         (BoundedOutOfOrdernessWatermarkEstimator)\n@@ -44,10 +45,10 @@ public class KafkaWatermarkConfigurationTest {\n     SkewedProcessingTimeIdlePolicy policy =\n         (SkewedProcessingTimeIdlePolicy) policyFactory.create(cfg);\n \n-    assertNotNull(estimator);\n+assertNotNull(estimator);\n     assertNotNull(policy);\n     assertEquals(0L, estimator.getMaxOutOfOrderness());\n     assertEquals(Watermarks.MIN_WATERMARK, estimator.getMinWatermark());\n     assertEquals(10L, policy.getTimestampSkew());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'block lcurly' has incorrect indentation level 32, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 62, expected level should be 34.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 60, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 30, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/135/KafkaWatermarkConfigurationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/135/KafkaWatermarkConfigurationTest.java\nindex 569ca2ac43b..bf1801eda41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/135/KafkaWatermarkConfigurationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/135/KafkaWatermarkConfigurationTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.direct.kafka;\n \n import static org.junit.Assert.*;\n-\n import cz.o2.proxima.direct.time.BoundedOutOfOrdernessWatermarkEstimator;\n import cz.o2.proxima.direct.time.SkewedProcessingTimeIdlePolicy;\n import cz.o2.proxima.time.WatermarkIdlePolicyFactory;\n@@ -25,29 +24,26 @@ import java.util.HashMap;\n import java.util.Map;\n import org.junit.Test;\n \n+\n public class KafkaWatermarkConfigurationTest {\n \n   @Test\n   public void testConfigureDefault() {\n     // Check backward compatibility with legacy behaviour\n-    Map<String, Object> cfg =\n-        new HashMap<String, Object>() {\n-          {\n-            put(\"timestamp-skew\", 10L);\n-          }\n-        };\n+    Map<String, Object> cfg = new HashMap<String, Object>() {\n+\n+                                {\n+                                                              put(\"timestamp-skew\", 10L);\n+                                                            }\n+                              };\n     KafkaWatermarkConfiguration configuration = new KafkaWatermarkConfiguration(cfg);\n     WatermarkIdlePolicyFactory policyFactory = configuration.getWatermarkIdlePolicyFactory();\n-    BoundedOutOfOrdernessWatermarkEstimator estimator =\n-        (BoundedOutOfOrdernessWatermarkEstimator)\n-            configuration.getWatermarkEstimatorFactory().create(cfg, policyFactory);\n-    SkewedProcessingTimeIdlePolicy policy =\n-        (SkewedProcessingTimeIdlePolicy) policyFactory.create(cfg);\n-\n+    BoundedOutOfOrdernessWatermarkEstimator estimator = (BoundedOutOfOrdernessWatermarkEstimator) configuration.getWatermarkEstimatorFactory().create(cfg, policyFactory);\n+    SkewedProcessingTimeIdlePolicy policy = (SkewedProcessingTimeIdlePolicy) policyFactory.create(cfg);\n     assertNotNull(estimator);\n     assertNotNull(policy);\n     assertEquals(0L, estimator.getMaxOutOfOrderness());\n     assertEquals(Watermarks.MIN_WATERMARK, estimator.getMinWatermark());\n     assertEquals(10L, policy.getTimestampSkew());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}