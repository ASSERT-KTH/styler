{
    "project_name": "neo4j-neo4j",
    "error_id": "340",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/340/CountsStoreTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/340/CountsStoreTransactionApplier.java\nindex 973fa125a3d..c9aad785465 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/340/CountsStoreTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/340/CountsStoreTransactionApplier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import org.neo4j.counts.CountsAccessor;\n@@ -28,7 +29,7 @@ class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n     private boolean haveUpdates;\n     private boolean countsUpdaterClosed;\n \n-    CountsStoreTransactionApplier( CountsAccessor.Updater countsUpdater )\n+    CountsStoreTransactionApplier(CountsAccessor.Updater countsUpdater)\n     {\n         this.countsUpdater = countsUpdater;\n     }\n@@ -41,7 +42,7 @@ class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n \n     private void closeCountsUpdaterIfOpen()\n     {\n-        if ( !countsUpdaterClosed )\n+        if (!countsUpdaterClosed)\n         {\n             countsUpdater.close();\n             countsUpdaterClosed = true;\n@@ -49,30 +50,30 @@ class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n     }\n \n     @Override\n-    public boolean visitNodeCountsCommand( Command.NodeCountsCommand command )\n+    public boolean visitNodeCountsCommand(Command.NodeCountsCommand command)\n     {\n         haveUpdates = true;\n-        countsUpdater.incrementNodeCount( command.labelId(), command.delta() );\n+        countsUpdater.incrementNodeCount(command.labelId(), command.delta());\n         return false;\n     }\n \n     @Override\n-    public boolean visitRelationshipCountsCommand( Command.RelationshipCountsCommand command )\n+    public boolean visitRelationshipCountsCommand(Command.RelationshipCountsCommand command)\n     {\n         haveUpdates = true;\n-        countsUpdater.incrementRelationshipCount( command.startLabelId(), command.typeId(), command.endLabelId(), command.delta() );\n+        countsUpdater.incrementRelationshipCount(command.startLabelId(), command.typeId(), command.endLabelId(), command.delta());\n         return false;\n     }\n \n     @Override\n-    public boolean visitSchemaRuleCommand( SchemaRuleCommand command )\n+    public boolean visitSchemaRuleCommand(SchemaRuleCommand command)\n     {\n         // This shows that this transaction is a schema transaction, so it cannot have commands\n         // updating any counts anyway. Therefore the counts updater is closed right away.\n         // This also breaks an otherwise deadlocking scenario between check pointer, this applier\n         // and an index population thread wanting to apply index sampling to the counts store.\n         assert !haveUpdates : \"Assumed that a schema transaction wouldn't also contain data commands affecting \" +\n-                \"counts store, but was proven wrong with this transaction\";\n+          \"counts store, but was proven wrong with this transaction\";\n         closeCountsUpdaterIfOpen();\n         return false;\n     }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/340/CountsStoreTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/340/CountsStoreTransactionApplier.java\nindex 973fa125a3d..261674d816a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/340/CountsStoreTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/340/CountsStoreTransactionApplier.java\n@@ -76,4 +76,4 @@ class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n         closeCountsUpdaterIfOpen();\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}