{
    "project_name": "kitodo-kitodo-production",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "13",
                "severity": "warning",
                "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n        for (Division division : divisions) {\n            if(!division.isWithWorkflow()) {\n                divionsWithNoWorkflow.add(division.getId());\n            }\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/28/RulesetManagement.java\nindex f8def405b56..3ee916df698 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/28/RulesetManagement.java\n@@ -87,7 +87,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n     private Collection<String> getDivionsWithNoWorkflow(List<Division> divisions) {\n         ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n         for (Division division : divisions) {\n-            if(!division.isWithWorkflow()) {\n+            if (!division.isWithWorkflow()) {\n                 divionsWithNoWorkflow.add(division.getId());\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/28/RulesetManagement.java\nindex f8def405b56..90896838b15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/28/RulesetManagement.java\n@@ -87,7 +87,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n     private Collection<String> getDivionsWithNoWorkflow(List<Division> divisions) {\n         ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n         for (Division division : divisions) {\n-            if(!division.isWithWorkflow()) {\n+            if (!division.isWithWorkflow()) {\n                 divionsWithNoWorkflow.add(division.getId());\n             }\n         }\n@@ -95,7 +95,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n     }\n \n     private List<String> getIdsOfDivisionsForSpecialField(List<Division> divisions,\n-            FunctionalDivision functionalDivision) {\n+                                                          FunctionalDivision functionalDivision) {\n         ArrayList<String> idsOfDivisionsForSpecialField = new ArrayList<>();\n         for (Division division : divisions) {\n             if (Objects.isNull(division.getUse())) {\n@@ -144,33 +144,28 @@ public class RulesetManagement implements RulesetManagementInterface {\n     /**\n      * Opens a view on a division of the rule set.\n      *\n-     * @param divisionId\n-     *            the division in view\n-     * @param acquisitionStage\n-     *            the current acquisition level\n-     * @param priorityList\n-     *            the wish list of the user regarding its preferred human\n-     *            languages\n+     * @param divisionId       the division in view\n+     * @param acquisitionStage the current acquisition level\n+     * @param priorityList     the wish list of the user regarding its preferred human\n+     *                         languages\n      * @return a view on a division\n      */\n     @Override\n     public StructuralElementViewInterface getStructuralElementView(String divisionId, String acquisitionStage,\n-            List<LanguageRange> priorityList) {\n+                                                                   List<LanguageRange> priorityList) {\n \n         Optional<Division> division = ruleset.getDivision(divisionId);\n         UniversalDivision universalDivision = division.isPresent() ? new UniversalDivision(ruleset, division.get())\n-                : new UniversalDivision(ruleset, divisionId);\n+            : new UniversalDivision(ruleset, divisionId);\n         return new DivisionView(ruleset, universalDivision, acquisitionStage, priorityList);\n     }\n \n     /**\n      * Returns the most appropriate label for a key, if there is one.\n      *\n-     * @param key\n-     *            key whose label should be returned\n-     * @param priorityList\n-     *            weighted list of user-preferred display languages. Return\n-     *            value of the function {@link LanguageRange#parse(String)}.\n+     * @param key          key whose label should be returned\n+     * @param priorityList weighted list of user-preferred display languages. Return\n+     *                     value of the function {@link LanguageRange#parse(String)}.\n      * @return the best-matching label, if any\n      */\n     @Override\n@@ -188,10 +183,8 @@ public class RulesetManagement implements RulesetManagementInterface {\n     /**\n      * Loads a ruleset from a file.\n      *\n-     * @param rulesetFile\n-     *            file to load\n-     * @throws IOException\n-     *             if something goes wrong when reading\n+     * @param rulesetFile file to load\n+     * @throws IOException if something goes wrong when reading\n      */\n     @Override\n     public void load(File rulesetFile) throws IOException {\n@@ -202,12 +195,9 @@ public class RulesetManagement implements RulesetManagementInterface {\n     /**\n      * Initializes the elements of namespaces if there is a corresponding file.\n      *\n-     * @param keys\n-     *            the keys of the rule set (are processed recursively)\n-     * @param home\n-     *            the ruleset directory\n-     * @throws IOException\n-     *             if I/O fails\n+     * @param keys the keys of the rule set (are processed recursively)\n+     * @param home the ruleset directory\n+     * @throws IOException if I/O fails\n      */\n     private void initializeNamespaces(List<Key> keys, File home) throws IOException {\n         for (Key key : keys) {\n@@ -246,13 +236,10 @@ public class RulesetManagement implements RulesetManagementInterface {\n      * directly. Other marshal eliminator exceptions are packed in I/O\n      * exceptions, so the interface is independent of the parser used.\n      *\n-     * @param objectClass\n-     *            class of object to read\n-     * @param inputFile\n-     *            file to read from\n+     * @param objectClass class of object to read\n+     * @param inputFile   file to read from\n      * @return the read object\n-     * @throws IOException\n-     *             if I/O fails\n+     * @throws IOException if I/O fails\n      */\n     @SuppressWarnings(\"unchecked\")\n     private <T> T read(Class<T> objectClass, File inputFile) throws IOException {\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/28/RulesetManagement.java\nindex f8def405b56..218de000ddf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/28/RulesetManagement.java\n@@ -87,7 +87,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n     private Collection<String> getDivionsWithNoWorkflow(List<Division> divisions) {\n         ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n         for (Division division : divisions) {\n-            if(!division.isWithWorkflow()) {\n+            if (!division.isWithWorkflow()) {\n                 divionsWithNoWorkflow.add(division.getId());\n             }\n         }\n@@ -276,4 +276,4 @@ public class RulesetManagement implements RulesetManagementInterface {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/28/RulesetManagement.java\nindex f8def405b56..ac01f4d6c6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/28/RulesetManagement.java\n@@ -21,11 +21,9 @@ import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n-\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.JAXBException;\n import javax.xml.bind.Unmarshaller;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.kitodo.api.dataeditor.rulesetmanagement.FunctionalDivision;\n@@ -41,10 +39,12 @@ import org.kitodo.dataeditor.ruleset.xml.Ruleset;\n /**\n  * This class provides the functionality of the rule set.\n  */\n+\n public class RulesetManagement implements RulesetManagementInterface {\n     /**\n      * A logger can be used to keep a log.\n      */\n+\n     private static final Logger logger = LogManager.getLogger(RulesetManagement.class);\n \n     /**\n@@ -59,6 +59,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n      *\n      * @return all acquisition levels showing up\n      */\n+\n     @Override\n     public Collection<String> getAcquisitionStages() {\n         List<AcquisitionStage> acquisitionStages = ruleset.getAcquisitionStages();\n@@ -84,18 +85,19 @@ public class RulesetManagement implements RulesetManagementInterface {\n         return getDivionsWithNoWorkflow(ruleset.getDivisions());\n     }\n \n+\n     private Collection<String> getDivionsWithNoWorkflow(List<Division> divisions) {\n         ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n         for (Division division : divisions) {\n-            if(!division.isWithWorkflow()) {\n+            if (!division.isWithWorkflow()) {\n                 divionsWithNoWorkflow.add(division.getId());\n             }\n         }\n         return divionsWithNoWorkflow;\n     }\n \n-    private List<String> getIdsOfDivisionsForSpecialField(List<Division> divisions,\n-            FunctionalDivision functionalDivision) {\n+\n+    private List<String> getIdsOfDivisionsForSpecialField(List<Division> divisions, FunctionalDivision functionalDivision) {\n         ArrayList<String> idsOfDivisionsForSpecialField = new ArrayList<>();\n         for (Division division : divisions) {\n             if (Objects.isNull(division.getUse())) {\n@@ -109,6 +111,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n         return idsOfDivisionsForSpecialField;\n     }\n \n+\n     private List<String> getIdsOfKeysForSpecialField(List<Key> keys, FunctionalMetadata functionalMetadata) {\n         ArrayList<String> idsOfKeysForSpecialField = new ArrayList<>(1);\n         for (Key key : keys) {\n@@ -136,6 +139,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n      *\n      * @return the list of divisions\n      */\n+\n     @Override\n     public Map<String, String> getStructuralElements(List<LanguageRange> priorityList) {\n         return ruleset.getDivisions(priorityList, false, true);\n@@ -153,13 +157,11 @@ public class RulesetManagement implements RulesetManagementInterface {\n      *            languages\n      * @return a view on a division\n      */\n-    @Override\n-    public StructuralElementViewInterface getStructuralElementView(String divisionId, String acquisitionStage,\n-            List<LanguageRange> priorityList) {\n \n+    @Override\n+    public StructuralElementViewInterface getStructuralElementView(String divisionId, String acquisitionStage, List<LanguageRange> priorityList) {\n         Optional<Division> division = ruleset.getDivision(divisionId);\n-        UniversalDivision universalDivision = division.isPresent() ? new UniversalDivision(ruleset, division.get())\n-                : new UniversalDivision(ruleset, divisionId);\n+        UniversalDivision universalDivision = division.isPresent() ? new UniversalDivision(ruleset, division.get()) : new UniversalDivision(ruleset, divisionId);\n         return new DivisionView(ruleset, universalDivision, acquisitionStage, priorityList);\n     }\n \n@@ -173,6 +175,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n      *            value of the function {@link LanguageRange#parse(String)}.\n      * @return the best-matching label, if any\n      */\n+\n     @Override\n     public Optional<String> getTranslationForKey(String key, List<LanguageRange> priorityList) {\n         Optional<Key> optionalKey = ruleset.getKey(key);\n@@ -193,6 +196,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n      * @throws IOException\n      *             if something goes wrong when reading\n      */\n+\n     @Override\n     public void load(File rulesetFile) throws IOException {\n         this.ruleset = read(Ruleset.class, rulesetFile);\n@@ -209,6 +213,8 @@ public class RulesetManagement implements RulesetManagementInterface {\n      * @throws IOException\n      *             if I/O fails\n      */\n+\n+\n     private void initializeNamespaces(List<Key> keys, File home) throws IOException {\n         for (Key key : keys) {\n             Optional<String> optionalNamespace = key.getNamespace();\n@@ -221,16 +227,19 @@ public class RulesetManagement implements RulesetManagementInterface {\n                         if (namespace.isAbout(namespaceURI)) {\n                             key.setOptions(namespace.getOptions());\n                         } else {\n-                            logger.debug(\n-                                \"The file {} for the namespace {} declares an inappropriate namespace. (Check about.)\",\n-                                file, namespaceURI);\n+                            logger.debug(\"The file {} for the namespace {} declares an inappropriate namespace. (Check about.)\",\n+                                file,\n+                                namespaceURI);\n                         }\n                     } catch (IOException e) {\n-                        logger.debug(\"The file {} for the namespace {} cannot be parsed: {}\", file, namespaceURI,\n+                        logger.debug(\"The file {} for the namespace {} cannot be parsed: {}\",\n+                            file,\n+                            namespaceURI,\n                             e.getMessage());\n                     }\n                 } else {\n-                    logger.debug(\"The file {} for the namespace {} was not found or is unreadable.\", file,\n+                    logger.debug(\"The file {} for the namespace {} was not found or is unreadable.\",\n+                        file,\n                         namespaceURI);\n                 }\n             }\n@@ -254,6 +263,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n      * @throws IOException\n      *             if I/O fails\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     private <T> T read(Class<T> objectClass, File inputFile) throws IOException {\n         try {\n@@ -276,4 +286,4 @@ public class RulesetManagement implements RulesetManagementInterface {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/28/RulesetManagement.java\nindex f8def405b56..3ee916df698 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/28/RulesetManagement.java\n@@ -87,7 +87,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n     private Collection<String> getDivionsWithNoWorkflow(List<Division> divisions) {\n         ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n         for (Division division : divisions) {\n-            if(!division.isWithWorkflow()) {\n+            if (!division.isWithWorkflow()) {\n                 divionsWithNoWorkflow.add(division.getId());\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/28/RulesetManagement.java\nindex f8def405b56..3ee916df698 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/28/RulesetManagement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/28/RulesetManagement.java\n@@ -87,7 +87,7 @@ public class RulesetManagement implements RulesetManagementInterface {\n     private Collection<String> getDivionsWithNoWorkflow(List<Division> divisions) {\n         ArrayList<String> divionsWithNoWorkflow = new ArrayList<>();\n         for (Division division : divisions) {\n-            if(!division.isWithWorkflow()) {\n+            if (!division.isWithWorkflow()) {\n                 divionsWithNoWorkflow.add(division.getId());\n             }\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}