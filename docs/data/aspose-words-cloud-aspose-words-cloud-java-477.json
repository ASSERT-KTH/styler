{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "477",
    "information": {
        "errors": [
            {
                "line": "189",
                "column": "64",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData)o;\n    return\n        Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n        Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/477/OdtSaveOptionsData.java\nindex e3bcd775e11..2fcf686a7f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/477/OdtSaveOptionsData.java\n@@ -186,7 +186,7 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData)o;\n+    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData) o;\n     return\n         Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n         Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/477/OdtSaveOptionsData.java\nindex e3bcd775e11..a15415447b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/477/OdtSaveOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -80,7 +83,7 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< MeasureUnitEnum > {\n+        public static class Adapter extends TypeAdapter<MeasureUnitEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final MeasureUnitEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -105,6 +108,7 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n \n     @SerializedName(\"PrettyFormat\")\n     private Boolean prettyFormat = null;\n+\n     public OdtSaveOptionsData isStrictSchema11(Boolean isStrictSchema11) {\n         this.isStrictSchema11 = isStrictSchema11;\n         return this;\n@@ -112,8 +116,9 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n \n     /**\n      * Gets or sets specifies whether export should correspond to ODT specification 1.1 strictly.\n-    * @return isStrictSchema11\n-    **/\n+     *\n+     * @return isStrictSchema11\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies whether export should correspond to ODT specification 1.1 strictly.\")\n     public Boolean getIsStrictSchema11() {\n         return isStrictSchema11;\n@@ -131,8 +136,9 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n     /**\n      * Gets or sets allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters.\n      * Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.\n-    * @return measureUnit\n-    **/\n+     *\n+     * @return measureUnit\n+     **/\n     @ApiModelProperty(value = \"Gets or sets allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters. Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.\")\n     public MeasureUnitEnum getMeasureUnit() {\n         return measureUnit;\n@@ -149,8 +155,9 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n \n     /**\n      * Gets or sets a password to encrypt document.\n-    * @return password\n-    **/\n+     *\n+     * @return password\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a password to encrypt document.\")\n     public String getPassword() {\n         return password;\n@@ -167,8 +174,9 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n \n     /**\n      * Gets or sets specifies whether or not use pretty formats output.\n-    * @return prettyFormat\n-    **/\n+     *\n+     * @return prettyFormat\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies whether or not use pretty formats output.\")\n     public Boolean getPrettyFormat() {\n         return prettyFormat;\n@@ -186,41 +194,41 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData)o;\n-    return\n-        Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n-        Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n-        Objects.equals(this.password, odtSaveOptionsData.password) &&\n-        Objects.equals(this.prettyFormat, odtSaveOptionsData.prettyFormat) &&\n-        super.equals(o);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(isStrictSchema11, measureUnit, password, prettyFormat, super.hashCode());\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class OdtSaveOptionsData {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    isStrictSchema11: \").append(toIndentedString(isStrictSchema11)).append(\"\\n\");\n-    sb.append(\"    measureUnit: \").append(toIndentedString(measureUnit)).append(\"\\n\");\n-    sb.append(\"    password: \").append(toIndentedString(password)).append(\"\\n\");\n-    sb.append(\"    prettyFormat: \").append(toIndentedString(prettyFormat)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData) o;\n+        return\n+            Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n+                Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n+                Objects.equals(this.password, odtSaveOptionsData.password) &&\n+                Objects.equals(this.prettyFormat, odtSaveOptionsData.prettyFormat) &&\n+                super.equals(o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(isStrictSchema11, measureUnit, password, prettyFormat, super.hashCode());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class OdtSaveOptionsData {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    isStrictSchema11: \").append(toIndentedString(isStrictSchema11)).append(\"\\n\");\n+        sb.append(\"    measureUnit: \").append(toIndentedString(measureUnit)).append(\"\\n\");\n+        sb.append(\"    password: \").append(toIndentedString(password)).append(\"\\n\");\n+        sb.append(\"    prettyFormat: \").append(toIndentedString(prettyFormat)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/477/OdtSaveOptionsData.java\nindex e3bcd775e11..947991e1d2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/477/OdtSaveOptionsData.java\n@@ -45,161 +45,179 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * container class for odt/ott save options.\n  */\n+\n+\n @ApiModel(description = \"container class for odt/ott save options.\")\n+\n public class OdtSaveOptionsData extends SaveOptionsData {\n     /**\n      * Gets or sets allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters.\n      * Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.\n      */\n-    @JsonAdapter(MeasureUnitEnum.Adapter.class)\n-    public enum MeasureUnitEnum {\n-        CENTIMETERS(\"Centimeters\"),\n-        INCHES(\"Inches\");\n+  @JsonAdapter(MeasureUnitEnum.Adapter.class)\n+  public enum MeasureUnitEnum {\n+    CENTIMETERS(\"Centimeters\"),\n \n-        private String value;\n+    INCHES(\"Inches\");\n \n-        MeasureUnitEnum(String value) {\n-            this.value = value;\n-        }\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n-        }\n+    MeasureUnitEnum(String value) {\n+      this.value = value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static MeasureUnitEnum fromValue(String text) {\n-            for (MeasureUnitEnum b : MeasureUnitEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< MeasureUnitEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final MeasureUnitEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public MeasureUnitEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return MeasureUnitEnum.fromValue(String.valueOf(value));\n-            }\n+    public static MeasureUnitEnum fromValue(String text) {\n+      for (MeasureUnitEnum b : MeasureUnitEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"IsStrictSchema11\")\n-    private Boolean isStrictSchema11 = null;\n-\n-    @SerializedName(\"MeasureUnit\")\n-    private MeasureUnitEnum measureUnit = null;\n+    public static class Adapter extends TypeAdapter<MeasureUnitEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final MeasureUnitEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-    @SerializedName(\"Password\")\n-    private String password = null;\n \n-    @SerializedName(\"PrettyFormat\")\n-    private Boolean prettyFormat = null;\n-    public OdtSaveOptionsData isStrictSchema11(Boolean isStrictSchema11) {\n-        this.isStrictSchema11 = isStrictSchema11;\n-        return this;\n+      @Override\n+      public MeasureUnitEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return MeasureUnitEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n+\n+\n+  @SerializedName(\"IsStrictSchema11\")\n+  private Boolean isStrictSchema11 = null;\n+\n+  @SerializedName(\"MeasureUnit\")\n+  private MeasureUnitEnum measureUnit = null;\n+\n+  @SerializedName(\"Password\")\n+  private String password = null;\n+\n+  @SerializedName(\"PrettyFormat\")\n+  private Boolean prettyFormat = null;\n+\n+  public OdtSaveOptionsData isStrictSchema11(Boolean isStrictSchema11) {\n+    this.isStrictSchema11 = isStrictSchema11;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies whether export should correspond to ODT specification 1.1 strictly.\n     * @return isStrictSchema11\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether export should correspond to ODT specification 1.1 strictly.\")\n-    public Boolean getIsStrictSchema11() {\n-        return isStrictSchema11;\n-    }\n \n-    public void setIsStrictSchema11(Boolean isStrictSchema11) {\n-        this.isStrictSchema11 = isStrictSchema11;\n-    }\n \n-    public OdtSaveOptionsData measureUnit(MeasureUnitEnum measureUnit) {\n-        this.measureUnit = measureUnit;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies whether export should correspond to ODT specification 1.1 strictly.\")\n+  public Boolean getIsStrictSchema11() {\n+    return isStrictSchema11;\n+  }\n+\n+  public void setIsStrictSchema11(Boolean isStrictSchema11) {\n+    this.isStrictSchema11 = isStrictSchema11;\n+  }\n+\n+  public OdtSaveOptionsData measureUnit(MeasureUnitEnum measureUnit) {\n+    this.measureUnit = measureUnit;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters.\n      * Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.\n     * @return measureUnit\n     **/\n-    @ApiModelProperty(value = \"Gets or sets allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters. Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.\")\n-    public MeasureUnitEnum getMeasureUnit() {\n-        return measureUnit;\n-    }\n \n-    public void setMeasureUnit(MeasureUnitEnum measureUnit) {\n-        this.measureUnit = measureUnit;\n-    }\n \n-    public OdtSaveOptionsData password(String password) {\n-        this.password = password;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters. Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.\")\n+  public MeasureUnitEnum getMeasureUnit() {\n+    return measureUnit;\n+  }\n+\n+  public void setMeasureUnit(MeasureUnitEnum measureUnit) {\n+    this.measureUnit = measureUnit;\n+  }\n+\n+  public OdtSaveOptionsData password(String password) {\n+    this.password = password;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a password to encrypt document.\n     * @return password\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a password to encrypt document.\")\n-    public String getPassword() {\n-        return password;\n-    }\n \n-    public void setPassword(String password) {\n-        this.password = password;\n-    }\n \n-    public OdtSaveOptionsData prettyFormat(Boolean prettyFormat) {\n-        this.prettyFormat = prettyFormat;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a password to encrypt document.\")\n+  public String getPassword() {\n+    return password;\n+  }\n+\n+  public void setPassword(String password) {\n+    this.password = password;\n+  }\n+\n+  public OdtSaveOptionsData prettyFormat(Boolean prettyFormat) {\n+    this.prettyFormat = prettyFormat;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies whether or not use pretty formats output.\n     * @return prettyFormat\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether or not use pretty formats output.\")\n-    public Boolean getPrettyFormat() {\n-        return prettyFormat;\n-    }\n \n-    public void setPrettyFormat(Boolean prettyFormat) {\n-        this.prettyFormat = prettyFormat;\n+\n+  @ApiModelProperty(value = \"Gets or sets specifies whether or not use pretty formats output.\")\n+  public Boolean getPrettyFormat() {\n+    return prettyFormat;\n+  }\n+\n+  public void setPrettyFormat(Boolean prettyFormat) {\n+    this.prettyFormat = prettyFormat;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData)o;\n-    return\n-        Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n-        Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n-        Objects.equals(this.password, odtSaveOptionsData.password) &&\n-        Objects.equals(this.prettyFormat, odtSaveOptionsData.prettyFormat) &&\n-        super.equals(o);\n+    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData) o;\n+    return Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n+    Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n+    Objects.equals(this.password, odtSaveOptionsData.password) &&\n+    Objects.equals(this.prettyFormat, odtSaveOptionsData.prettyFormat) &&\n+    super.equals(o);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(isStrictSchema11, measureUnit, password, prettyFormat, super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -217,10 +235,12 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 172
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/477/OdtSaveOptionsData.java\nindex e3bcd775e11..2fcf686a7f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/477/OdtSaveOptionsData.java\n@@ -186,7 +186,7 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData)o;\n+    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData) o;\n     return\n         Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n         Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/477/OdtSaveOptionsData.java\nindex e3bcd775e11..2fcf686a7f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/477/OdtSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/477/OdtSaveOptionsData.java\n@@ -186,7 +186,7 @@ public class OdtSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData)o;\n+    OdtSaveOptionsData odtSaveOptionsData = (OdtSaveOptionsData) o;\n     return\n         Objects.equals(this.isStrictSchema11, odtSaveOptionsData.isStrictSchema11) &&\n         Objects.equals(this.measureUnit, odtSaveOptionsData.measureUnit) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}