{
    "project_name": "neo4j-neo4j",
    "error_id": "1630",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1630/DefaultIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1630/DefaultIdGeneratorFactory.java\nindex 11f9120629d..0441bda12c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1630/DefaultIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1630/DefaultIdGeneratorFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.id;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -41,7 +42,7 @@ import static org.neo4j.io.pagecache.IOLimiter.UNLIMITED;\n \n public class DefaultIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final EnumMap<IdType, IndexedIdGenerator> generators = new EnumMap<>( IdType.class );\n+    private final EnumMap<IdType, IndexedIdGenerator> generators = new EnumMap<>(IdType.class);\n     protected final FileSystemAbstraction fs;\n     private final RecoveryCleanupWorkCollector recoveryCleanupWorkCollector;\n     protected final boolean allowLargeIdCaches;\n@@ -49,22 +50,22 @@ public class DefaultIdGeneratorFactory implements IdGeneratorFactory\n     /**\n      * By default doesn't allow large ID caches.\n      *\n-     * @param fs {@link FileSystemAbstraction} to back the id generators.\n+     * @param fs                           {@link FileSystemAbstraction} to back the id generators.\n      * @param recoveryCleanupWorkCollector {@link RecoveryCleanupWorkCollector} for cleanup on starting the id generators.\n      */\n-    public DefaultIdGeneratorFactory( FileSystemAbstraction fs, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector )\n+    public DefaultIdGeneratorFactory(FileSystemAbstraction fs, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector)\n     {\n-        this( fs, recoveryCleanupWorkCollector, false );\n+        this(fs, recoveryCleanupWorkCollector, false);\n     }\n \n     /**\n-     * @param fs {@link FileSystemAbstraction} to back the id generators.\n+     * @param fs                           {@link FileSystemAbstraction} to back the id generators.\n      * @param recoveryCleanupWorkCollector {@link RecoveryCleanupWorkCollector} for cleanup on starting the id generators.\n-     * @param allowLargeIdCaches override the \"activity\" setting from {@link IdType} to always use low activity. This is useful for databases\n-     * that generally see very low activity so that the id generators won't benefit from having large ID caches and instead use small ID caches.\n-     * Functionally this makes no difference, it only affects performance (and memory usage which is the main driver for forcing low activity).\n+     * @param allowLargeIdCaches           override the \"activity\" setting from {@link IdType} to always use low activity. This is useful for databases\n+     *                                     that generally see very low activity so that the id generators won't benefit from having large ID caches and instead use small ID caches.\n+     *                                     Functionally this makes no difference, it only affects performance (and memory usage which is the main driver for forcing low activity).\n      */\n-    public DefaultIdGeneratorFactory( FileSystemAbstraction fs, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, boolean allowLargeIdCaches )\n+    public DefaultIdGeneratorFactory(FileSystemAbstraction fs, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, boolean allowLargeIdCaches)\n     {\n         this.fs = fs;\n         this.recoveryCleanupWorkCollector = recoveryCleanupWorkCollector;\n@@ -72,61 +73,62 @@ public class DefaultIdGeneratorFactory implements IdGeneratorFactory\n     }\n \n     @Override\n-    public IdGenerator open( PageCache pageCache, Path filename, IdType idType, LongSupplier highIdScanner, long maxId, boolean readOnly, Config config,\n-            PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions )\n+    public IdGenerator open(PageCache pageCache, Path filename, IdType idType, LongSupplier highIdScanner, long maxId, boolean readOnly, Config config,\n+                            PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions)\n     {\n         IndexedIdGenerator generator =\n-                instantiate( fs, pageCache, recoveryCleanupWorkCollector, filename, highIdScanner, maxId, idType, readOnly, config, cursorTracer, openOptions );\n-        generators.put( idType, generator );\n+          instantiate(fs, pageCache, recoveryCleanupWorkCollector, filename, highIdScanner, maxId, idType, readOnly, config, cursorTracer, openOptions);\n+        generators.put(idType, generator);\n         return generator;\n     }\n \n-    protected IndexedIdGenerator instantiate( FileSystemAbstraction fs, PageCache pageCache, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector,\n-            Path fileName, LongSupplier highIdSupplier, long maxValue, IdType idType, boolean readOnly, Config config, PageCursorTracer cursorTracer,\n-            ImmutableSet<OpenOption> openOptions )\n+    protected IndexedIdGenerator instantiate(FileSystemAbstraction fs, PageCache pageCache, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector,\n+                                             Path fileName, LongSupplier highIdSupplier, long maxValue, IdType idType, boolean readOnly, Config config,\n+                                             PageCursorTracer cursorTracer,\n+                                             ImmutableSet<OpenOption> openOptions)\n     {\n         // highId not used when opening an IndexedIdGenerator\n-        return new IndexedIdGenerator( pageCache, fileName, recoveryCleanupWorkCollector, idType, allowLargeIdCaches, highIdSupplier, maxValue, readOnly,\n-                config, cursorTracer, defaultIdMonitor( fs, fileName, config ), openOptions );\n+        return new IndexedIdGenerator(pageCache, fileName, recoveryCleanupWorkCollector, idType, allowLargeIdCaches, highIdSupplier, maxValue, readOnly,\n+          config, cursorTracer, defaultIdMonitor(fs, fileName, config), openOptions);\n     }\n \n     @Override\n-    public IdGenerator get( IdType idType )\n+    public IdGenerator get(IdType idType)\n     {\n-        return generators.get( idType );\n+        return generators.get(idType);\n     }\n \n     @Override\n-    public IdGenerator create( PageCache pageCache, Path fileName, IdType idType, long highId, boolean throwIfFileExists, long maxId, boolean readOnly,\n-            Config config, PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions )\n+    public IdGenerator create(PageCache pageCache, Path fileName, IdType idType, long highId, boolean throwIfFileExists, long maxId, boolean readOnly,\n+                              Config config, PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions)\n     {\n         // For the potential scenario where there's no store (of course this is where this method will be called),\n         // but there's a naked id generator, then delete the id generator so that it too starts from a clean state.\n-        fs.deleteFile( fileName );\n+        fs.deleteFile(fileName);\n \n         IndexedIdGenerator generator =\n-                new IndexedIdGenerator( pageCache, fileName, recoveryCleanupWorkCollector, idType, allowLargeIdCaches, () -> highId, maxId, readOnly,\n-                        config, cursorTracer, defaultIdMonitor( fs, fileName, config ), openOptions );\n-        generator.checkpoint( UNLIMITED, cursorTracer );\n-        generators.put( idType, generator );\n+          new IndexedIdGenerator(pageCache, fileName, recoveryCleanupWorkCollector, idType, allowLargeIdCaches, () -> highId, maxId, readOnly,\n+            config, cursorTracer, defaultIdMonitor(fs, fileName, config), openOptions);\n+        generator.checkpoint(UNLIMITED, cursorTracer);\n+        generators.put(idType, generator);\n         return generator;\n     }\n \n     @Override\n-    public void visit( Consumer<IdGenerator> visitor )\n+    public void visit(Consumer<IdGenerator> visitor)\n     {\n-        generators.values().forEach( visitor );\n+        generators.values().forEach(visitor);\n     }\n \n     @Override\n-    public void clearCache( PageCursorTracer cursorTracer )\n+    public void clearCache(PageCursorTracer cursorTracer)\n     {\n-        generators.values().forEach( generator -> generator.clearCache( cursorTracer ) );\n+        generators.values().forEach(generator -> generator.clearCache(cursorTracer));\n     }\n \n     @Override\n     public Collection<Path> listIdFiles()\n     {\n-        return generators.values().stream().map( IndexedIdGenerator::path ).collect( Collectors.toList() );\n+        return generators.values().stream().map(IndexedIdGenerator::path).collect(Collectors.toList());\n     }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}