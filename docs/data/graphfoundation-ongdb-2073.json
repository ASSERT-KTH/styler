{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2073",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "310",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "318",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2073/DefaultNodeValueIndexCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2073/DefaultNodeValueIndexCursor.java\nindex d3cd541e923..6b2ef36ed04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2073/DefaultNodeValueIndexCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2073/DefaultNodeValueIndexCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import java.util.Arrays;\n@@ -43,292 +44,286 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.emptySet;\n import static org.neo4j.kernel.impl.store.record.AbstractBaseRecord.NO_ID;\n \n final class DefaultNodeValueIndexCursor extends IndexCursor<IndexProgressor>\n-        implements NodeValueIndexCursor, NodeValueClient\n+    implements NodeValueIndexCursor, NodeValueClient\n {\n-    private Read read;\n-    private long node;\n-    private IndexQuery[] query;\n-    private Value[] values;\n-    private PrimitiveLongIterator added = emptyIterator();\n-    private PrimitiveLongSet removed = emptySet();\n-    private boolean needsValues;\n-    private final DefaultCursors pool;\n-\n-    DefaultNodeValueIndexCursor( DefaultCursors pool )\n-    {\n-        this.pool = pool;\n-        node = NO_ID;\n-    }\n-\n-    @Override\n-    public void initialize( SchemaIndexDescriptor descriptor, IndexProgressor progressor,\n-                            IndexQuery[] query )\n-    {\n-        assert query != null;\n-        super.initialize( progressor );\n-        this.query = query;\n-\n-        if ( query.length > 0 )\n-        {\n-            IndexQuery firstPredicate = query[0];\n-            switch ( firstPredicate.type() )\n-            {\n-            case exact:\n-                seekQuery( descriptor, query );\n-                break;\n-\n-            case exists:\n-                scanQuery( descriptor );\n-                break;\n-\n-            case range:\n-                assert query.length == 1;\n-                rangeQuery( descriptor, (IndexQuery.RangePredicate) firstPredicate );\n-                break;\n-\n-            case stringPrefix:\n-                assert query.length == 1;\n-                prefixQuery( descriptor, (IndexQuery.StringPrefixPredicate) firstPredicate );\n-                break;\n-\n-            case stringSuffix:\n-            case stringContains:\n-                assert query.length == 1;\n-                suffixOrContainsQuery( descriptor, firstPredicate );\n-                break;\n-\n-            default:\n-                throw new UnsupportedOperationException( \"Query not supported: \" + Arrays.toString( query ) );\n-            }\n-        }\n-        else\n-        {\n-            // this is used for distinct values query\n-            needsValues = true;\n-        }\n-    }\n-\n-    private boolean isRemoved( long reference )\n-    {\n-        return removed.contains( reference );\n-    }\n-\n-    @Override\n-    public boolean acceptNode( long reference, Value[] values )\n-    {\n-        if ( isRemoved( reference ) )\n-        {\n-            return false;\n-        }\n-        else\n-        {\n-            this.node = reference;\n-            this.values = values;\n-            return true;\n-        }\n-    }\n-\n-    @Override\n-    public boolean needsValues()\n+  private Read read;\n+  private long node;\n+  private IndexQuery[] query;\n+  private Value[] values;\n+  private PrimitiveLongIterator added = emptyIterator();\n+  private PrimitiveLongSet removed = emptySet();\n+  private boolean needsValues;\n+  private final DefaultCursors pool;\n+\n+  DefaultNodeValueIndexCursor(DefaultCursors pool)\n+  {\n+    this.pool = pool;\n+    node = NO_ID;\n+  }\n+\n+  @Override\n+  public void initialize(SchemaIndexDescriptor descriptor, IndexProgressor progressor,\n+                         IndexQuery[] query)\n+  {\n+    assert query != null;\n+    super.initialize(progressor);\n+    this.query = query;\n+\n+    if (query.length > 0)\n     {\n-        return needsValues;\n-    }\n-\n-    @Override\n-    public boolean next()\n-    {\n-        if ( added.hasNext() )\n-        {\n-            this.node = added.next();\n-            this.values = null;\n-            return true;\n-        }\n-        else\n-        {\n-            return innerNext();\n-        }\n-    }\n-\n-    public void setRead( Read read )\n-    {\n-        this.read = read;\n-    }\n-\n-    @Override\n-    public void node( NodeCursor cursor )\n+      IndexQuery firstPredicate = query[0];\n+      switch (firstPredicate.type())\n+      {\n+        case exact:\n+          seekQuery(descriptor, query);\n+          break;\n+\n+        case exists:\n+          scanQuery(descriptor);\n+          break;\n+\n+        case range:\n+          assert query.length == 1;\n+          rangeQuery(descriptor, (IndexQuery.RangePredicate) firstPredicate);\n+          break;\n+\n+        case stringPrefix:\n+          assert query.length == 1;\n+          prefixQuery(descriptor, (IndexQuery.StringPrefixPredicate) firstPredicate);\n+          break;\n+\n+        case stringSuffix:\n+        case stringContains:\n+          assert query.length == 1;\n+          suffixOrContainsQuery(descriptor, firstPredicate);\n+          break;\n+\n+        default:\n+          throw new UnsupportedOperationException(\"Query not supported: \" + Arrays.toString(query));\n+      }\n+    } else\n     {\n-        read.singleNode( node, cursor );\n+      // this is used for distinct values query\n+      needsValues = true;\n     }\n+  }\n \n-    @Override\n-    public long nodeReference()\n-    {\n-        return node;\n-    }\n+  private boolean isRemoved(long reference)\n+  {\n+    return removed.contains(reference);\n+  }\n \n-    @Override\n-    public int numberOfProperties()\n+  @Override\n+  public boolean acceptNode(long reference, Value[] values)\n+  {\n+    if (isRemoved(reference))\n     {\n-        return query == null ? 0 : query.length;\n-    }\n-\n-    @Override\n-    public int propertyKey( int offset )\n+      return false;\n+    } else\n     {\n-        return query[offset].propertyKeyId();\n+      this.node = reference;\n+      this.values = values;\n+      return true;\n     }\n-\n-    @Override\n-    public boolean hasValue()\n+  }\n+\n+  @Override\n+  public boolean needsValues()\n+  {\n+    return needsValues;\n+  }\n+\n+  @Override\n+  public boolean next()\n+  {\n+    if (added.hasNext())\n     {\n-        return values != null;\n-    }\n-\n-    @Override\n-    public Value propertyValue( int offset )\n+      this.node = added.next();\n+      this.values = null;\n+      return true;\n+    } else\n     {\n-        return values[offset];\n+      return innerNext();\n     }\n-\n-    @Override\n-    public void close()\n+  }\n+\n+  public void setRead(Read read)\n+  {\n+    this.read = read;\n+  }\n+\n+  @Override\n+  public void node(NodeCursor cursor)\n+  {\n+    read.singleNode(node, cursor);\n+  }\n+\n+  @Override\n+  public long nodeReference()\n+  {\n+    return node;\n+  }\n+\n+  @Override\n+  public int numberOfProperties()\n+  {\n+    return query == null ? 0 : query.length;\n+  }\n+\n+  @Override\n+  public int propertyKey(int offset)\n+  {\n+    return query[offset].propertyKeyId();\n+  }\n+\n+  @Override\n+  public boolean hasValue()\n+  {\n+    return values != null;\n+  }\n+\n+  @Override\n+  public Value propertyValue(int offset)\n+  {\n+    return values[offset];\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    if (!isClosed())\n     {\n-        if ( !isClosed() )\n-        {\n-            super.close();\n-            this.node = NO_ID;\n-            this.query = null;\n-            this.values = null;\n-            this.read = null;\n-            this.added = emptyIterator();\n-            this.removed = PrimitiveLongCollections.emptySet();\n-\n-            pool.accept( this );\n-        }\n+      super.close();\n+      this.node = NO_ID;\n+      this.query = null;\n+      this.values = null;\n+      this.read = null;\n+      this.added = emptyIterator();\n+      this.removed = PrimitiveLongCollections.emptySet();\n+\n+      pool.accept(this);\n     }\n-\n-    @Override\n-    public boolean isClosed()\n+  }\n+\n+  @Override\n+  public boolean isClosed()\n+  {\n+    return super.isClosed();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    if (isClosed())\n     {\n-        return super.isClosed();\n-    }\n-\n-    @Override\n-    public String toString()\n+      return \"NodeValueIndexCursor[closed state]\";\n+    } else\n     {\n-        if ( isClosed() )\n-        {\n-            return \"NodeValueIndexCursor[closed state]\";\n-        }\n-        else\n-        {\n-            String keys = query == null ? \"unknown\" : Arrays.toString( stream( query ).map( IndexQuery::propertyKeyId ).toArray( Integer[]::new ) );\n-            return \"NodeValueIndexCursor[node=\" + node + \", open state with: keys=\" + keys +\n-                   \", values=\" + Arrays.toString( values ) +\n-                   \", underlying record=\" + super.toString() + \" ]\";\n-        }\n+      String keys = query == null ? \"unknown\" : Arrays.toString(stream(query).map(IndexQuery::propertyKeyId).toArray(Integer[]::new));\n+      return \"NodeValueIndexCursor[node=\" + node + \", open state with: keys=\" + keys +\n+          \", values=\" + Arrays.toString(values) +\n+          \", underlying record=\" + super.toString() + \" ]\";\n     }\n+  }\n \n-    private void prefixQuery( SchemaIndexDescriptor descriptor, IndexQuery.StringPrefixPredicate predicate )\n+  private void prefixQuery(SchemaIndexDescriptor descriptor, IndexQuery.StringPrefixPredicate predicate)\n+  {\n+    needsValues = true;\n+    if (read.hasTxStateWithChanges())\n     {\n-        needsValues = true;\n-        if ( read.hasTxStateWithChanges() )\n-        {\n-            TransactionState txState = read.txState();\n-            PrimitiveLongReadableDiffSets changes = txState\n-                    .indexUpdatesForRangeSeekByPrefix( descriptor, predicate.prefix() );\n-            added = changes.augment( emptyIterator() );\n-            removed = removed( txState, changes );\n-        }\n+      TransactionState txState = read.txState();\n+      PrimitiveLongReadableDiffSets changes = txState\n+          .indexUpdatesForRangeSeekByPrefix(descriptor, predicate.prefix());\n+      added = changes.augment(emptyIterator());\n+      removed = removed(txState, changes);\n     }\n-\n-    private void rangeQuery( SchemaIndexDescriptor descriptor, IndexQuery.RangePredicate<?> predicate )\n+  }\n+\n+  private void rangeQuery(SchemaIndexDescriptor descriptor, IndexQuery.RangePredicate<?> predicate)\n+  {\n+    ValueGroup valueGroup = predicate.valueGroup();\n+    ValueCategory category = valueGroup.category();\n+    this.needsValues = category == ValueCategory.TEXT || category == ValueCategory.NUMBER || category == ValueCategory.TEMPORAL;\n+    if (read.hasTxStateWithChanges())\n     {\n-        ValueGroup valueGroup = predicate.valueGroup();\n-        ValueCategory category = valueGroup.category();\n-        this.needsValues = category == ValueCategory.TEXT || category == ValueCategory.NUMBER || category == ValueCategory.TEMPORAL;\n-        if ( read.hasTxStateWithChanges() )\n-        {\n-            TransactionState txState = read.txState();\n-            PrimitiveLongReadableDiffSets changes = txState.indexUpdatesForRangeSeek( descriptor, predicate );\n-            added = changes.augment( emptyIterator() );\n-            removed = removed( txState, changes );\n-        }\n+      TransactionState txState = read.txState();\n+      PrimitiveLongReadableDiffSets changes = txState.indexUpdatesForRangeSeek(descriptor, predicate);\n+      added = changes.augment(emptyIterator());\n+      removed = removed(txState, changes);\n     }\n+  }\n \n-    private void scanQuery( SchemaIndexDescriptor descriptor )\n+  private void scanQuery(SchemaIndexDescriptor descriptor)\n+  {\n+    needsValues = true;\n+    if (read.hasTxStateWithChanges())\n     {\n-        needsValues = true;\n-        if ( read.hasTxStateWithChanges() )\n-        {\n-            TransactionState txState = read.txState();\n-            PrimitiveLongReadableDiffSets changes = txState.indexUpdatesForScan( descriptor );\n-            added = changes.augment( emptyIterator() );\n-            removed = removed( txState, changes );\n-        }\n+      TransactionState txState = read.txState();\n+      PrimitiveLongReadableDiffSets changes = txState.indexUpdatesForScan(descriptor);\n+      added = changes.augment(emptyIterator());\n+      removed = removed(txState, changes);\n     }\n+  }\n \n-    private void suffixOrContainsQuery( SchemaIndexDescriptor descriptor, IndexQuery query )\n+  private void suffixOrContainsQuery(SchemaIndexDescriptor descriptor, IndexQuery query)\n+  {\n+    needsValues = true;\n+    if (read.hasTxStateWithChanges())\n     {\n-        needsValues = true;\n-        if ( read.hasTxStateWithChanges() )\n-        {\n-            TransactionState txState = read.txState();\n-            PrimitiveLongReadableDiffSets changes = txState.indexUpdatesForSuffixOrContains( descriptor, query );\n-            added = changes.augment( emptyIterator() );\n-            removed = removed( txState, changes );\n-        }\n+      TransactionState txState = read.txState();\n+      PrimitiveLongReadableDiffSets changes = txState.indexUpdatesForSuffixOrContains(descriptor, query);\n+      added = changes.augment(emptyIterator());\n+      removed = removed(txState, changes);\n     }\n+  }\n \n-    private void seekQuery( SchemaIndexDescriptor descriptor, IndexQuery[] query )\n+  private void seekQuery(SchemaIndexDescriptor descriptor, IndexQuery[] query)\n+  {\n+    needsValues = false;\n+    IndexQuery.ExactPredicate[] exactPreds = assertOnlyExactPredicates(query);\n+    if (read.hasTxStateWithChanges())\n     {\n-        needsValues = false;\n-        IndexQuery.ExactPredicate[] exactPreds = assertOnlyExactPredicates( query );\n-        if ( read.hasTxStateWithChanges() )\n-        {\n-            TransactionState txState = read.txState();\n-            PrimitiveLongReadableDiffSets changes = read.txState()\n-                    .indexUpdatesForSeek( descriptor, IndexQuery.asValueTuple( exactPreds ) );\n-            added = changes.augment( emptyIterator() );\n-            removed = removed( txState, changes );\n-        }\n+      TransactionState txState = read.txState();\n+      PrimitiveLongReadableDiffSets changes = read.txState()\n+          .indexUpdatesForSeek(descriptor, IndexQuery.asValueTuple(exactPreds));\n+      added = changes.augment(emptyIterator());\n+      removed = removed(txState, changes);\n     }\n-\n-    private PrimitiveLongSet removed( TransactionState txState, PrimitiveLongReadableDiffSets changes )\n+  }\n+\n+  private PrimitiveLongSet removed(TransactionState txState, PrimitiveLongReadableDiffSets changes)\n+  {\n+    PrimitiveLongSet longSet = asSet(txState.addedAndRemovedNodes().getRemoved());\n+    longSet.addAll(changes.getRemoved().iterator());\n+    return longSet;\n+  }\n+\n+  private static IndexQuery.ExactPredicate[] assertOnlyExactPredicates(IndexQuery[] predicates)\n+  {\n+    IndexQuery.ExactPredicate[] exactPredicates;\n+    if (predicates.getClass() == IndexQuery.ExactPredicate[].class)\n     {\n-        PrimitiveLongSet longSet = asSet( txState.addedAndRemovedNodes().getRemoved() );\n-        longSet.addAll( changes.getRemoved().iterator() );\n-        return longSet;\n-    }\n-\n-    private static IndexQuery.ExactPredicate[] assertOnlyExactPredicates( IndexQuery[] predicates )\n+      exactPredicates = (IndexQuery.ExactPredicate[]) predicates;\n+    } else\n     {\n-        IndexQuery.ExactPredicate[] exactPredicates;\n-        if ( predicates.getClass() == IndexQuery.ExactPredicate[].class )\n+      exactPredicates = new IndexQuery.ExactPredicate[predicates.length];\n+      for (int i = 0; i < predicates.length; i++)\n+      {\n+        if (predicates[i] instanceof IndexQuery.ExactPredicate)\n         {\n-            exactPredicates = (IndexQuery.ExactPredicate[]) predicates;\n-        }\n-        else\n+          exactPredicates[i] = (IndexQuery.ExactPredicate) predicates[i];\n+        } else\n         {\n-            exactPredicates = new IndexQuery.ExactPredicate[predicates.length];\n-            for ( int i = 0; i < predicates.length; i++ )\n-            {\n-                if ( predicates[i] instanceof IndexQuery.ExactPredicate )\n-                {\n-                    exactPredicates[i] = (IndexQuery.ExactPredicate) predicates[i];\n-                }\n-                else\n-                {\n-                    // TODO: what to throw?\n-                    throw new IllegalArgumentException( \"Query not supported: \" + Arrays.toString( predicates ) );\n-                }\n-            }\n+          // TODO: what to throw?\n+          throw new IllegalArgumentException(\"Query not supported: \" + Arrays.toString(predicates));\n         }\n-        return exactPredicates;\n+      }\n     }\n+    return exactPredicates;\n+  }\n \n-    public void release()\n-    {\n-        // nothing to do\n-    }\n+  public void release()\n+  {\n+    // nothing to do\n+  }\n }\n",
            "diff_size": 363
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}