{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "283",
    "information": {
        "errors": [
            {
                "line": "25",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public interface RegExDerivative<E, T>\n{\n\t/**\n\t * Determines whether the specified expression is the empty set.\n\t * \n\t * @param expression",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/283/RegExDerivative.java\nindex bc24fb4ddd4..ead25275976 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/283/RegExDerivative.java\n@@ -22,13 +22,13 @@ import java.util.Collection;\n  */\n public interface RegExDerivative<E, T>\n {\n-\t/**\n+/**\n \t * Determines whether the specified expression is the empty set.\n \t * \n \t * @param expression\n \t *            The expression describing a set of sequences of tokens.\n \t */\n-\tboolean empty(E expression);\n+ boolean empty(E expression);\n \n \t/**\n \t * Determines whether the specified expression contains the zero length token sequence.\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/283/RegExDerivative.java\nindex bc24fb4ddd4..3839e734cc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/283/RegExDerivative.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.regex.api;\n \n import java.util.Collection;\n@@ -20,34 +21,33 @@ import java.util.Collection;\n /**\n  * Provides the aspects of a set that are required for lazily matching tokens.\n  */\n-public interface RegExDerivative<E, T>\n-{\n-\t/**\n-\t * Determines whether the specified expression is the empty set.\n-\t * \n-\t * @param expression\n-\t *            The expression describing a set of sequences of tokens.\n-\t */\n-\tboolean empty(E expression);\n+public interface RegExDerivative<E, T> {\n+    /**\n+     * Determines whether the specified expression is the empty set.\n+     *\n+     * @param expression\n+     *            The expression describing a set of sequences of tokens.\n+     */\n+    boolean empty(E expression);\n \n-\t/**\n-\t * Determines whether the specified expression contains the zero length token sequence.\n-\t * \n-\t * @param expression\n-\t *            The expression describing a set of sequences of tokens.\n-\t */\n-\tboolean delta(E expression);\n+    /**\n+     * Determines whether the specified expression contains the zero length token sequence.\n+     *\n+     * @param expression\n+     *            The expression describing a set of sequences of tokens.\n+     */\n+    boolean delta(E expression);\n \n-\t/**\n-\t * Computes the derivative (residual) of the expression wrt the specified token.\n-\t * \n-\t * @param expression\n-\t *            The expression describing a set of sequences of tokens.\n-\t * @param token\n-\t *            A token.\n-\t * @param matchers\n-\t *            The expressions that matched the token.\n-\t * @return <code>null</code> for an expression that does not allow any sequence (empty set).\n-\t */\n-\tE residual(E expression, T token, Collection<? super E> matchers);\n+    /**\n+     * Computes the derivative (residual) of the expression wrt the specified token.\n+     *\n+     * @param expression\n+     *            The expression describing a set of sequences of tokens.\n+     * @param token\n+     *            A token.\n+     * @param matchers\n+     *            The expressions that matched the token.\n+     * @return <code>null</code> for an expression that does not allow any sequence (empty set).\n+     */\n+    E residual(E expression, T token, Collection<? super E> matchers);\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/283/RegExDerivative.java\nindex bc24fb4ddd4..9e5635b1646 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/283/RegExDerivative.java\n@@ -22,7 +22,7 @@ import java.util.Collection;\n  */\n public interface RegExDerivative<E, T>\n {\n-\t/**\n+    /**\n \t * Determines whether the specified expression is the empty set.\n \t * \n \t * @param expression\n@@ -50,4 +50,4 @@ public interface RegExDerivative<E, T>\n \t * @return <code>null</code> for an expression that does not allow any sequence (empty set).\n \t */\n \tE residual(E expression, T token, Collection<? super E> matchers);\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/283/RegExDerivative.java\nindex bc24fb4ddd4..77e58bd1a16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/283/RegExDerivative.java\n@@ -20,34 +20,41 @@ import java.util.Collection;\n /**\n  * Provides the aspects of a set that are required for lazily matching tokens.\n  */\n+\n+\n public interface RegExDerivative<E, T>\n {\n-\t/**\n-\t * Determines whether the specified expression is the empty set.\n-\t * \n-\t * @param expression\n-\t *            The expression describing a set of sequences of tokens.\n-\t */\n-\tboolean empty(E expression);\n-\n-\t/**\n-\t * Determines whether the specified expression contains the zero length token sequence.\n-\t * \n-\t * @param expression\n-\t *            The expression describing a set of sequences of tokens.\n-\t */\n-\tboolean delta(E expression);\n-\n-\t/**\n-\t * Computes the derivative (residual) of the expression wrt the specified token.\n-\t * \n-\t * @param expression\n-\t *            The expression describing a set of sequences of tokens.\n-\t * @param token\n-\t *            A token.\n-\t * @param matchers\n-\t *            The expressions that matched the token.\n-\t * @return <code>null</code> for an expression that does not allow any sequence (empty set).\n-\t */\n-\tE residual(E expression, T token, Collection<? super E> matchers);\n-}\n+    /**\n+     * Determines whether the specified expression is the empty set.\n+     * \n+     * @param expression\n+     *            The expression describing a set of sequences of tokens.\n+     */\n+\n+    boolean empty(E expression);\n+\n+    /**\n+     * Determines whether the specified expression contains the zero length token sequence.\n+     * \n+     * @param expression\n+     *            The expression describing a set of sequences of tokens.\n+     */\n+\n+\n+    boolean delta(E expression);\n+\n+    /**\n+     * Computes the derivative (residual) of the expression wrt the specified token.\n+     * \n+     * @param expression\n+     *            The expression describing a set of sequences of tokens.\n+     * @param token\n+     *            A token.\n+     * @param matchers\n+     *            The expressions that matched the token.\n+     * @return <code>null</code> for an expression that does not allow any sequence (empty set).\n+     */\n+\n+\n+    E residual(E expression, T token, Collection<? super E> matchers);\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/283/RegExDerivative.java\nindex bc24fb4ddd4..ead25275976 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/283/RegExDerivative.java\n@@ -22,13 +22,13 @@ import java.util.Collection;\n  */\n public interface RegExDerivative<E, T>\n {\n-\t/**\n+/**\n \t * Determines whether the specified expression is the empty set.\n \t * \n \t * @param expression\n \t *            The expression describing a set of sequences of tokens.\n \t */\n-\tboolean empty(E expression);\n+ boolean empty(E expression);\n \n \t/**\n \t * Determines whether the specified expression contains the zero length token sequence.\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/283/RegExDerivative.java\nindex bc24fb4ddd4..01fb9492c33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/283/RegExDerivative.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/283/RegExDerivative.java\n@@ -22,13 +22,13 @@ import java.util.Collection;\n  */\n public interface RegExDerivative<E, T>\n {\n-\t/**\n+    /**\n \t * Determines whether the specified expression is the empty set.\n \t * \n \t * @param expression\n \t *            The expression describing a set of sequences of tokens.\n \t */\n-\tboolean empty(E expression);\n+ boolean empty(E expression);\n \n \t/**\n \t * Determines whether the specified expression contains the zero length token sequence.\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}