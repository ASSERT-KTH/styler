{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "590",
    "information": {
        "errors": [
            {
                "line": "432",
                "column": "88",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n    return\n        Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n        Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/590/GraphicsQualityOptionsData.java\nindex 87b66d8cd6d..14091daeaae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/590/GraphicsQualityOptionsData.java\n@@ -429,7 +429,7 @@ public class GraphicsQualityOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n+    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData) o;\n     return\n         Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n         Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/590/GraphicsQualityOptionsData.java\nindex 87b66d8cd6d..0b9bbb42623 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/590/GraphicsQualityOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -79,7 +82,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< CompositingModeEnum > {\n+        public static class Adapter extends TypeAdapter<CompositingModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final CompositingModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -129,7 +132,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< CompositingQualityEnum > {\n+        public static class Adapter extends TypeAdapter<CompositingQualityEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final CompositingQualityEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -182,7 +185,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< InterpolationModeEnum > {\n+        public static class Adapter extends TypeAdapter<InterpolationModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final InterpolationModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -232,7 +235,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< SmoothingModeEnum > {\n+        public static class Adapter extends TypeAdapter<SmoothingModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final SmoothingModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -282,7 +285,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TextRenderingHintEnum > {\n+        public static class Adapter extends TypeAdapter<TextRenderingHintEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TextRenderingHintEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -313,6 +316,7 @@ public class GraphicsQualityOptionsData {\n \n     @SerializedName(\"TextRenderingHint\")\n     private TextRenderingHintEnum textRenderingHint = null;\n+\n     public GraphicsQualityOptionsData compositingMode(CompositingModeEnum compositingMode) {\n         this.compositingMode = compositingMode;\n         return this;\n@@ -320,8 +324,9 @@ public class GraphicsQualityOptionsData {\n \n     /**\n      * Gets or sets a value that specifies how composited images are drawn to this Graphics.\n-    * @return compositingMode\n-    **/\n+     *\n+     * @return compositingMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value that specifies how composited images are drawn to this Graphics.\")\n     public CompositingModeEnum getCompositingMode() {\n         return compositingMode;\n@@ -338,8 +343,9 @@ public class GraphicsQualityOptionsData {\n \n     /**\n      * Gets or sets the rendering quality of composited images drawn to this Graphics.\n-    * @return compositingQuality\n-    **/\n+     *\n+     * @return compositingQuality\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the rendering quality of composited images drawn to this Graphics.\")\n     public CompositingQualityEnum getCompositingQuality() {\n         return compositingQuality;\n@@ -356,8 +362,9 @@ public class GraphicsQualityOptionsData {\n \n     /**\n      * Gets or sets the interpolation mode associated with this Graphics.\n-    * @return interpolationMode\n-    **/\n+     *\n+     * @return interpolationMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the interpolation mode associated with this Graphics.\")\n     public InterpolationModeEnum getInterpolationMode() {\n         return interpolationMode;\n@@ -374,8 +381,9 @@ public class GraphicsQualityOptionsData {\n \n     /**\n      * Gets or sets the rendering quality for this Graphics.\n-    * @return smoothingMode\n-    **/\n+     *\n+     * @return smoothingMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the rendering quality for this Graphics.\")\n     public SmoothingModeEnum getSmoothingMode() {\n         return smoothingMode;\n@@ -392,8 +400,9 @@ public class GraphicsQualityOptionsData {\n \n     /**\n      * Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.\n-    * @return stringFormat\n-    **/\n+     *\n+     * @return stringFormat\n+     **/\n     @ApiModelProperty(value = \"Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.\")\n     public StringFormatData getStringFormat() {\n         return stringFormat;\n@@ -410,8 +419,9 @@ public class GraphicsQualityOptionsData {\n \n     /**\n      * Gets or sets the rendering mode for text associated with this Graphics.\n-    * @return textRenderingHint\n-    **/\n+     *\n+     * @return textRenderingHint\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the rendering mode for text associated with this Graphics.\")\n     public TextRenderingHintEnum getTextRenderingHint() {\n         return textRenderingHint;\n@@ -429,43 +439,43 @@ public class GraphicsQualityOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n-    return\n-        Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n-        Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n-        Objects.equals(this.interpolationMode, graphicsQualityOptionsData.interpolationMode) &&\n-        Objects.equals(this.smoothingMode, graphicsQualityOptionsData.smoothingMode) &&\n-        Objects.equals(this.stringFormat, graphicsQualityOptionsData.stringFormat) &&\n-        Objects.equals(this.textRenderingHint, graphicsQualityOptionsData.textRenderingHint);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(compositingMode, compositingQuality, interpolationMode, smoothingMode, stringFormat, textRenderingHint);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class GraphicsQualityOptionsData {\\n\");\n-    sb.append(\"    compositingMode: \").append(toIndentedString(compositingMode)).append(\"\\n\");\n-    sb.append(\"    compositingQuality: \").append(toIndentedString(compositingQuality)).append(\"\\n\");\n-    sb.append(\"    interpolationMode: \").append(toIndentedString(interpolationMode)).append(\"\\n\");\n-    sb.append(\"    smoothingMode: \").append(toIndentedString(smoothingMode)).append(\"\\n\");\n-    sb.append(\"    stringFormat: \").append(toIndentedString(stringFormat)).append(\"\\n\");\n-    sb.append(\"    textRenderingHint: \").append(toIndentedString(textRenderingHint)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n+        GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData) o;\n+        return\n+            Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n+                Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n+                Objects.equals(this.interpolationMode, graphicsQualityOptionsData.interpolationMode) &&\n+                Objects.equals(this.smoothingMode, graphicsQualityOptionsData.smoothingMode) &&\n+                Objects.equals(this.stringFormat, graphicsQualityOptionsData.stringFormat) &&\n+                Objects.equals(this.textRenderingHint, graphicsQualityOptionsData.textRenderingHint);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(compositingMode, compositingQuality, interpolationMode, smoothingMode, stringFormat, textRenderingHint);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class GraphicsQualityOptionsData {\\n\");\n+        sb.append(\"    compositingMode: \").append(toIndentedString(compositingMode)).append(\"\\n\");\n+        sb.append(\"    compositingQuality: \").append(toIndentedString(compositingQuality)).append(\"\\n\");\n+        sb.append(\"    interpolationMode: \").append(toIndentedString(interpolationMode)).append(\"\\n\");\n+        sb.append(\"    smoothingMode: \").append(toIndentedString(smoothingMode)).append(\"\\n\");\n+        sb.append(\"    stringFormat: \").append(toIndentedString(stringFormat)).append(\"\\n\");\n+        sb.append(\"    textRenderingHint: \").append(toIndentedString(textRenderingHint)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n     }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "458",
                    "column": "84",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/590/GraphicsQualityOptionsData.java\nindex 87b66d8cd6d..554bfb0f3e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/590/GraphicsQualityOptionsData.java\n@@ -53,7 +53,8 @@ public class GraphicsQualityOptionsData {\n     @JsonAdapter(CompositingModeEnum.Adapter.class)\n     public enum CompositingModeEnum {\n         SOURCEOVER(\"SourceOver\"),\n-        SOURCECOPY(\"SourceCopy\");\n+\n+SOURCECOPY(\"SourceCopy\");\n \n         private String value;\n \n@@ -79,7 +80,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< CompositingModeEnum > {\n+        public static class Adapter extends TypeAdapter<CompositingModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final CompositingModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -99,11 +100,16 @@ public class GraphicsQualityOptionsData {\n     @JsonAdapter(CompositingQualityEnum.Adapter.class)\n     public enum CompositingQualityEnum {\n         DEFAULT(\"Default\"),\n-        HIGHSPEED(\"HighSpeed\"),\n-        HIGHQUALITY(\"HighQuality\"),\n-        GAMMACORRECTED(\"GammaCorrected\"),\n-        ASSUMELINEAR(\"AssumeLinear\"),\n-        INVALID(\"Invalid\");\n+\n+HIGHSPEED(\"HighSpeed\"),\n+\n+HIGHQUALITY(\"HighQuality\"),\n+\n+GAMMACORRECTED(\"GammaCorrected\"),\n+\n+ASSUMELINEAR(\"AssumeLinear\"),\n+\n+INVALID(\"Invalid\");\n \n         private String value;\n \n@@ -129,7 +135,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< CompositingQualityEnum > {\n+        public static class Adapter extends TypeAdapter<CompositingQualityEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final CompositingQualityEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -149,14 +155,22 @@ public class GraphicsQualityOptionsData {\n     @JsonAdapter(InterpolationModeEnum.Adapter.class)\n     public enum InterpolationModeEnum {\n         DEFAULT(\"Default\"),\n-        LOW(\"Low\"),\n-        HIGH(\"High\"),\n-        BILINEAR(\"Bilinear\"),\n-        BICUBIC(\"Bicubic\"),\n-        NEARESTNEIGHBOR(\"NearestNeighbor\"),\n-        HIGHQUALITYBILINEAR(\"HighQualityBilinear\"),\n-        HIGHQUALITYBICUBIC(\"HighQualityBicubic\"),\n-        INVALID(\"Invalid\");\n+\n+LOW(\"Low\"),\n+\n+HIGH(\"High\"),\n+\n+BILINEAR(\"Bilinear\"),\n+\n+BICUBIC(\"Bicubic\"),\n+\n+NEARESTNEIGHBOR(\"NearestNeighbor\"),\n+\n+HIGHQUALITYBILINEAR(\"HighQualityBilinear\"),\n+\n+HIGHQUALITYBICUBIC(\"HighQualityBicubic\"),\n+\n+INVALID(\"Invalid\");\n \n         private String value;\n \n@@ -182,7 +196,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< InterpolationModeEnum > {\n+        public static class Adapter extends TypeAdapter<InterpolationModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final InterpolationModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -202,11 +216,16 @@ public class GraphicsQualityOptionsData {\n     @JsonAdapter(SmoothingModeEnum.Adapter.class)\n     public enum SmoothingModeEnum {\n         DEFAULT(\"Default\"),\n-        HIGHSPEED(\"HighSpeed\"),\n-        HIGHQUALITY(\"HighQuality\"),\n-        NONE(\"None\"),\n-        ANTIALIAS(\"AntiAlias\"),\n-        INVALID(\"Invalid\");\n+\n+HIGHSPEED(\"HighSpeed\"),\n+\n+HIGHQUALITY(\"HighQuality\"),\n+\n+NONE(\"None\"),\n+\n+ANTIALIAS(\"AntiAlias\"),\n+\n+INVALID(\"Invalid\");\n \n         private String value;\n \n@@ -232,7 +251,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< SmoothingModeEnum > {\n+        public static class Adapter extends TypeAdapter<SmoothingModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final SmoothingModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -252,11 +271,16 @@ public class GraphicsQualityOptionsData {\n     @JsonAdapter(TextRenderingHintEnum.Adapter.class)\n     public enum TextRenderingHintEnum {\n         SYSTEMDEFAULT(\"SystemDefault\"),\n-        SINGLEBITPERPIXELGRIDFIT(\"SingleBitPerPixelGridFit\"),\n-        SINGLEBITPERPIXEL(\"SingleBitPerPixel\"),\n-        ANTIALIASGRIDFIT(\"AntiAliasGridFit\"),\n-        ANTIALIAS(\"AntiAlias\"),\n-        CLEARTYPEGRIDFIT(\"ClearTypeGridFit\");\n+\n+SINGLEBITPERPIXELGRIDFIT(\"SingleBitPerPixelGridFit\"),\n+\n+SINGLEBITPERPIXEL(\"SingleBitPerPixel\"),\n+\n+ANTIALIASGRIDFIT(\"AntiAliasGridFit\"),\n+\n+ANTIALIAS(\"AntiAlias\"),\n+\n+CLEARTYPEGRIDFIT(\"ClearTypeGridFit\");\n \n         private String value;\n \n@@ -282,7 +306,7 @@ public class GraphicsQualityOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TextRenderingHintEnum > {\n+        public static class Adapter extends TypeAdapter<TextRenderingHintEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TextRenderingHintEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -313,7 +337,8 @@ public class GraphicsQualityOptionsData {\n \n     @SerializedName(\"TextRenderingHint\")\n     private TextRenderingHintEnum textRenderingHint = null;\n-    public GraphicsQualityOptionsData compositingMode(CompositingModeEnum compositingMode) {\n+\n+public GraphicsQualityOptionsData compositingMode(CompositingModeEnum compositingMode) {\n         this.compositingMode = compositingMode;\n         return this;\n     }\n@@ -425,13 +450,13 @@ public class GraphicsQualityOptionsData {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n-    return\n-        Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n+\n+GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n+    return Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n         Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n         Objects.equals(this.interpolationMode, graphicsQualityOptionsData.interpolationMode) &&\n         Objects.equals(this.smoothingMode, graphicsQualityOptionsData.smoothingMode) &&\n@@ -468,4 +493,4 @@ public class GraphicsQualityOptionsData {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/590/GraphicsQualityOptionsData.java\nindex 87b66d8cd6d..4c017d9bb00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/590/GraphicsQualityOptionsData.java\n@@ -45,405 +45,462 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Allows to specify additional System.Drawing.Graphics quality options.\n  */\n+\n+\n @ApiModel(description = \"Allows to specify additional System.Drawing.Graphics quality options.\")\n+\n public class GraphicsQualityOptionsData {\n     /**\n      * Gets or sets a value that specifies how composited images are drawn to this Graphics.\n      */\n-    @JsonAdapter(CompositingModeEnum.Adapter.class)\n-    public enum CompositingModeEnum {\n-        SOURCEOVER(\"SourceOver\"),\n-        SOURCECOPY(\"SourceCopy\");\n+  @JsonAdapter(CompositingModeEnum.Adapter.class)\n+  public enum CompositingModeEnum {\n+    SOURCEOVER(\"SourceOver\"),\n \n-        private String value;\n+    SOURCECOPY(\"SourceCopy\");\n \n-        CompositingModeEnum(String value) {\n-            this.value = value;\n-        }\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n-        }\n+    CompositingModeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static CompositingModeEnum fromValue(String text) {\n-            for (CompositingModeEnum b : CompositingModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< CompositingModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final CompositingModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public CompositingModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return CompositingModeEnum.fromValue(String.valueOf(value));\n-            }\n+    public static CompositingModeEnum fromValue(String text) {\n+      for (CompositingModeEnum b : CompositingModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<CompositingModeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final CompositingModeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public CompositingModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return CompositingModeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets the rendering quality of composited images drawn to this Graphics.\n      */\n-    @JsonAdapter(CompositingQualityEnum.Adapter.class)\n-    public enum CompositingQualityEnum {\n-        DEFAULT(\"Default\"),\n-        HIGHSPEED(\"HighSpeed\"),\n-        HIGHQUALITY(\"HighQuality\"),\n-        GAMMACORRECTED(\"GammaCorrected\"),\n-        ASSUMELINEAR(\"AssumeLinear\"),\n-        INVALID(\"Invalid\");\n-\n-        private String value;\n-\n-        CompositingQualityEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(CompositingQualityEnum.Adapter.class)\n+  public enum CompositingQualityEnum {\n+    DEFAULT(\"Default\"),\n \n-        public static CompositingQualityEnum fromValue(String text) {\n-            for (CompositingQualityEnum b : CompositingQualityEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    HIGHSPEED(\"HighSpeed\"),\n+\n+    HIGHQUALITY(\"HighQuality\"),\n \n-        public static class Adapter extends TypeAdapter< CompositingQualityEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final CompositingQualityEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public CompositingQualityEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return CompositingQualityEnum.fromValue(String.valueOf(value));\n-            }\n+    GAMMACORRECTED(\"GammaCorrected\"),\n+\n+    ASSUMELINEAR(\"AssumeLinear\"),\n+\n+    INVALID(\"Invalid\");\n+\n+    private String value;\n+\n+    CompositingQualityEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static CompositingQualityEnum fromValue(String text) {\n+      for (CompositingQualityEnum b : CompositingQualityEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n+\n+    public static class Adapter extends TypeAdapter<CompositingQualityEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final CompositingQualityEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public CompositingQualityEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return CompositingQualityEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n     /**\n      * Gets or sets the interpolation mode associated with this Graphics.\n      */\n-    @JsonAdapter(InterpolationModeEnum.Adapter.class)\n-    public enum InterpolationModeEnum {\n-        DEFAULT(\"Default\"),\n-        LOW(\"Low\"),\n-        HIGH(\"High\"),\n-        BILINEAR(\"Bilinear\"),\n-        BICUBIC(\"Bicubic\"),\n-        NEARESTNEIGHBOR(\"NearestNeighbor\"),\n-        HIGHQUALITYBILINEAR(\"HighQualityBilinear\"),\n-        HIGHQUALITYBICUBIC(\"HighQualityBicubic\"),\n-        INVALID(\"Invalid\");\n-\n-        private String value;\n-\n-        InterpolationModeEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(InterpolationModeEnum.Adapter.class)\n+  public enum InterpolationModeEnum {\n+    DEFAULT(\"Default\"),\n \n-        public static InterpolationModeEnum fromValue(String text) {\n-            for (InterpolationModeEnum b : InterpolationModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    LOW(\"Low\"),\n \n-        public static class Adapter extends TypeAdapter< InterpolationModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final InterpolationModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public InterpolationModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return InterpolationModeEnum.fromValue(String.valueOf(value));\n-            }\n+    HIGH(\"High\"),\n+\n+    BILINEAR(\"Bilinear\"),\n+\n+    BICUBIC(\"Bicubic\"),\n+\n+    NEARESTNEIGHBOR(\"NearestNeighbor\"),\n+\n+    HIGHQUALITYBILINEAR(\"HighQualityBilinear\"),\n+\n+    HIGHQUALITYBICUBIC(\"HighQualityBicubic\"),\n+\n+    INVALID(\"Invalid\");\n+\n+    private String value;\n+\n+    InterpolationModeEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static InterpolationModeEnum fromValue(String text) {\n+      for (InterpolationModeEnum b : InterpolationModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n+\n+    public static class Adapter extends TypeAdapter<InterpolationModeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final InterpolationModeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public InterpolationModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return InterpolationModeEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n     /**\n      * Gets or sets the rendering quality for this Graphics.\n      */\n-    @JsonAdapter(SmoothingModeEnum.Adapter.class)\n-    public enum SmoothingModeEnum {\n-        DEFAULT(\"Default\"),\n-        HIGHSPEED(\"HighSpeed\"),\n-        HIGHQUALITY(\"HighQuality\"),\n-        NONE(\"None\"),\n-        ANTIALIAS(\"AntiAlias\"),\n-        INVALID(\"Invalid\");\n-\n-        private String value;\n-\n-        SmoothingModeEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(SmoothingModeEnum.Adapter.class)\n+  public enum SmoothingModeEnum {\n+    DEFAULT(\"Default\"),\n \n-        public static SmoothingModeEnum fromValue(String text) {\n-            for (SmoothingModeEnum b : SmoothingModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    HIGHSPEED(\"HighSpeed\"),\n+\n+    HIGHQUALITY(\"HighQuality\"),\n+\n+    NONE(\"None\"),\n+\n+    ANTIALIAS(\"AntiAlias\"),\n+\n+    INVALID(\"Invalid\");\n+\n+    private String value;\n+\n+    SmoothingModeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< SmoothingModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final SmoothingModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public SmoothingModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return SmoothingModeEnum.fromValue(String.valueOf(value));\n-            }\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static SmoothingModeEnum fromValue(String text) {\n+      for (SmoothingModeEnum b : SmoothingModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<SmoothingModeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final SmoothingModeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public SmoothingModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return SmoothingModeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets the rendering mode for text associated with this Graphics.\n      */\n-    @JsonAdapter(TextRenderingHintEnum.Adapter.class)\n-    public enum TextRenderingHintEnum {\n-        SYSTEMDEFAULT(\"SystemDefault\"),\n-        SINGLEBITPERPIXELGRIDFIT(\"SingleBitPerPixelGridFit\"),\n-        SINGLEBITPERPIXEL(\"SingleBitPerPixel\"),\n-        ANTIALIASGRIDFIT(\"AntiAliasGridFit\"),\n-        ANTIALIAS(\"AntiAlias\"),\n-        CLEARTYPEGRIDFIT(\"ClearTypeGridFit\");\n-\n-        private String value;\n-\n-        TextRenderingHintEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(TextRenderingHintEnum.Adapter.class)\n+  public enum TextRenderingHintEnum {\n+    SYSTEMDEFAULT(\"SystemDefault\"),\n \n-        public static TextRenderingHintEnum fromValue(String text) {\n-            for (TextRenderingHintEnum b : TextRenderingHintEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    SINGLEBITPERPIXELGRIDFIT(\"SingleBitPerPixelGridFit\"),\n \n-        public static class Adapter extends TypeAdapter< TextRenderingHintEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TextRenderingHintEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TextRenderingHintEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TextRenderingHintEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    SINGLEBITPERPIXEL(\"SingleBitPerPixel\"),\n+\n+    ANTIALIASGRIDFIT(\"AntiAliasGridFit\"),\n+\n+    ANTIALIAS(\"AntiAlias\"),\n+\n+    CLEARTYPEGRIDFIT(\"ClearTypeGridFit\");\n+\n+    private String value;\n+\n+    TextRenderingHintEnum(String value) {\n+      this.value = value;\n     }\n \n-    @SerializedName(\"CompositingMode\")\n-    private CompositingModeEnum compositingMode = null;\n+    public String getValue() {\n+      return value;\n+    }\n \n-    @SerializedName(\"CompositingQuality\")\n-    private CompositingQualityEnum compositingQuality = null;\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-    @SerializedName(\"InterpolationMode\")\n-    private InterpolationModeEnum interpolationMode = null;\n+    public static TextRenderingHintEnum fromValue(String text) {\n+      for (TextRenderingHintEnum b : TextRenderingHintEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n+        }\n+      }\n+      return null;\n+    }\n \n-    @SerializedName(\"SmoothingMode\")\n-    private SmoothingModeEnum smoothingMode = null;\n+    public static class Adapter extends TypeAdapter<TextRenderingHintEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final TextRenderingHintEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-    @SerializedName(\"StringFormat\")\n-    private StringFormatData stringFormat = null;\n \n-    @SerializedName(\"TextRenderingHint\")\n-    private TextRenderingHintEnum textRenderingHint = null;\n-    public GraphicsQualityOptionsData compositingMode(CompositingModeEnum compositingMode) {\n-        this.compositingMode = compositingMode;\n-        return this;\n+      @Override\n+      public TextRenderingHintEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TextRenderingHintEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n+\n+\n+  @SerializedName(\"CompositingMode\")\n+  private CompositingModeEnum compositingMode = null;\n+\n+  @SerializedName(\"CompositingQuality\")\n+  private CompositingQualityEnum compositingQuality = null;\n+\n+  @SerializedName(\"InterpolationMode\")\n+  private InterpolationModeEnum interpolationMode = null;\n+\n+  @SerializedName(\"SmoothingMode\")\n+  private SmoothingModeEnum smoothingMode = null;\n+\n+  @SerializedName(\"StringFormat\")\n+  private StringFormatData stringFormat = null;\n+\n+  @SerializedName(\"TextRenderingHint\")\n+  private TextRenderingHintEnum textRenderingHint = null;\n+\n+  public GraphicsQualityOptionsData compositingMode(CompositingModeEnum compositingMode) {\n+    this.compositingMode = compositingMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value that specifies how composited images are drawn to this Graphics.\n     * @return compositingMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value that specifies how composited images are drawn to this Graphics.\")\n-    public CompositingModeEnum getCompositingMode() {\n-        return compositingMode;\n-    }\n \n-    public void setCompositingMode(CompositingModeEnum compositingMode) {\n-        this.compositingMode = compositingMode;\n-    }\n \n-    public GraphicsQualityOptionsData compositingQuality(CompositingQualityEnum compositingQuality) {\n-        this.compositingQuality = compositingQuality;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value that specifies how composited images are drawn to this Graphics.\")\n+  public CompositingModeEnum getCompositingMode() {\n+    return compositingMode;\n+  }\n+\n+  public void setCompositingMode(CompositingModeEnum compositingMode) {\n+    this.compositingMode = compositingMode;\n+  }\n+\n+  public GraphicsQualityOptionsData compositingQuality(CompositingQualityEnum compositingQuality) {\n+    this.compositingQuality = compositingQuality;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the rendering quality of composited images drawn to this Graphics.\n     * @return compositingQuality\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the rendering quality of composited images drawn to this Graphics.\")\n-    public CompositingQualityEnum getCompositingQuality() {\n-        return compositingQuality;\n-    }\n \n-    public void setCompositingQuality(CompositingQualityEnum compositingQuality) {\n-        this.compositingQuality = compositingQuality;\n-    }\n \n-    public GraphicsQualityOptionsData interpolationMode(InterpolationModeEnum interpolationMode) {\n-        this.interpolationMode = interpolationMode;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the rendering quality of composited images drawn to this Graphics.\")\n+  public CompositingQualityEnum getCompositingQuality() {\n+    return compositingQuality;\n+  }\n+\n+  public void setCompositingQuality(CompositingQualityEnum compositingQuality) {\n+    this.compositingQuality = compositingQuality;\n+  }\n+\n+  public GraphicsQualityOptionsData interpolationMode(InterpolationModeEnum interpolationMode) {\n+    this.interpolationMode = interpolationMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the interpolation mode associated with this Graphics.\n     * @return interpolationMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the interpolation mode associated with this Graphics.\")\n-    public InterpolationModeEnum getInterpolationMode() {\n-        return interpolationMode;\n-    }\n \n-    public void setInterpolationMode(InterpolationModeEnum interpolationMode) {\n-        this.interpolationMode = interpolationMode;\n-    }\n \n-    public GraphicsQualityOptionsData smoothingMode(SmoothingModeEnum smoothingMode) {\n-        this.smoothingMode = smoothingMode;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the interpolation mode associated with this Graphics.\")\n+  public InterpolationModeEnum getInterpolationMode() {\n+    return interpolationMode;\n+  }\n+\n+  public void setInterpolationMode(InterpolationModeEnum interpolationMode) {\n+    this.interpolationMode = interpolationMode;\n+  }\n+\n+  public GraphicsQualityOptionsData smoothingMode(SmoothingModeEnum smoothingMode) {\n+    this.smoothingMode = smoothingMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the rendering quality for this Graphics.\n     * @return smoothingMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the rendering quality for this Graphics.\")\n-    public SmoothingModeEnum getSmoothingMode() {\n-        return smoothingMode;\n-    }\n \n-    public void setSmoothingMode(SmoothingModeEnum smoothingMode) {\n-        this.smoothingMode = smoothingMode;\n-    }\n \n-    public GraphicsQualityOptionsData stringFormat(StringFormatData stringFormat) {\n-        this.stringFormat = stringFormat;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the rendering quality for this Graphics.\")\n+  public SmoothingModeEnum getSmoothingMode() {\n+    return smoothingMode;\n+  }\n+\n+  public void setSmoothingMode(SmoothingModeEnum smoothingMode) {\n+    this.smoothingMode = smoothingMode;\n+  }\n+\n+  public GraphicsQualityOptionsData stringFormat(StringFormatData stringFormat) {\n+    this.stringFormat = stringFormat;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.\n     * @return stringFormat\n     **/\n-    @ApiModelProperty(value = \"Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.\")\n-    public StringFormatData getStringFormat() {\n-        return stringFormat;\n-    }\n \n-    public void setStringFormat(StringFormatData stringFormat) {\n-        this.stringFormat = stringFormat;\n-    }\n \n-    public GraphicsQualityOptionsData textRenderingHint(TextRenderingHintEnum textRenderingHint) {\n-        this.textRenderingHint = textRenderingHint;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.\")\n+  public StringFormatData getStringFormat() {\n+    return stringFormat;\n+  }\n+\n+  public void setStringFormat(StringFormatData stringFormat) {\n+    this.stringFormat = stringFormat;\n+  }\n+\n+  public GraphicsQualityOptionsData textRenderingHint(TextRenderingHintEnum textRenderingHint) {\n+    this.textRenderingHint = textRenderingHint;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the rendering mode for text associated with this Graphics.\n     * @return textRenderingHint\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the rendering mode for text associated with this Graphics.\")\n-    public TextRenderingHintEnum getTextRenderingHint() {\n-        return textRenderingHint;\n-    }\n \n-    public void setTextRenderingHint(TextRenderingHintEnum textRenderingHint) {\n-        this.textRenderingHint = textRenderingHint;\n+\n+  @ApiModelProperty(value = \"Gets or sets the rendering mode for text associated with this Graphics.\")\n+  public TextRenderingHintEnum getTextRenderingHint() {\n+    return textRenderingHint;\n+  }\n+\n+  public void setTextRenderingHint(TextRenderingHintEnum textRenderingHint) {\n+    this.textRenderingHint = textRenderingHint;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n-    return\n-        Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n-        Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n-        Objects.equals(this.interpolationMode, graphicsQualityOptionsData.interpolationMode) &&\n-        Objects.equals(this.smoothingMode, graphicsQualityOptionsData.smoothingMode) &&\n-        Objects.equals(this.stringFormat, graphicsQualityOptionsData.stringFormat) &&\n-        Objects.equals(this.textRenderingHint, graphicsQualityOptionsData.textRenderingHint);\n+    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData) o;\n+    return Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n+    Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n+    Objects.equals(this.interpolationMode, graphicsQualityOptionsData.interpolationMode) &&\n+    Objects.equals(this.smoothingMode, graphicsQualityOptionsData.smoothingMode) &&\n+    Objects.equals(this.stringFormat, graphicsQualityOptionsData.stringFormat) &&\n+    Objects.equals(this.textRenderingHint, graphicsQualityOptionsData.textRenderingHint);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(compositingMode, compositingQuality, interpolationMode, smoothingMode, stringFormat, textRenderingHint);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -462,10 +519,12 @@ public class GraphicsQualityOptionsData {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 509
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/590/GraphicsQualityOptionsData.java\nindex 87b66d8cd6d..14091daeaae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/590/GraphicsQualityOptionsData.java\n@@ -429,7 +429,7 @@ public class GraphicsQualityOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n+    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData) o;\n     return\n         Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n         Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/590/GraphicsQualityOptionsData.java\nindex 87b66d8cd6d..14091daeaae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/590/GraphicsQualityOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/590/GraphicsQualityOptionsData.java\n@@ -429,7 +429,7 @@ public class GraphicsQualityOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData)o;\n+    GraphicsQualityOptionsData graphicsQualityOptionsData = (GraphicsQualityOptionsData) o;\n     return\n         Objects.equals(this.compositingMode, graphicsQualityOptionsData.compositingMode) &&\n         Objects.equals(this.compositingQuality, graphicsQualityOptionsData.compositingQuality) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}