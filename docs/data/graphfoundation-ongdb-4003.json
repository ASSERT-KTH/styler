{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4003",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "195",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4003/KernelDiagnosticsOfflineReportProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4003/KernelDiagnosticsOfflineReportProvider.java\nindex e91aaac9122..0a998182970 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4003/KernelDiagnosticsOfflineReportProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4003/KernelDiagnosticsOfflineReportProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.diagnostics;\n \n import java.io.File;\n@@ -40,164 +41,162 @@ import static org.neo4j.diagnostics.DiagnosticsReportSources.newDiagnosticsStrin\n \n public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineReportProvider\n {\n-    private FileSystemAbstraction fs;\n-    private Config config;\n-    private File storeDirectory;\n-\n-    public KernelDiagnosticsOfflineReportProvider()\n+  private FileSystemAbstraction fs;\n+  private Config config;\n+  private File storeDirectory;\n+\n+  public KernelDiagnosticsOfflineReportProvider()\n+  {\n+    super(\"kernel\", \"logs\", \"plugins\", \"tree\", \"tx\");\n+  }\n+\n+  @Override\n+  public void init(FileSystemAbstraction fs, Config config, File storeDirectory)\n+  {\n+    this.fs = fs;\n+    this.config = config;\n+    this.storeDirectory = storeDirectory;\n+  }\n+\n+  @Override\n+  protected List<DiagnosticsReportSource> provideSources(Set<String> classifiers)\n+  {\n+    List<DiagnosticsReportSource> sources = new ArrayList<>();\n+    if (classifiers.contains(\"logs\"))\n     {\n-        super( \"kernel\", \"logs\", \"plugins\", \"tree\", \"tx\" );\n+      getLogFiles(sources);\n     }\n-\n-    @Override\n-    public void init( FileSystemAbstraction fs, Config config, File storeDirectory )\n+    if (classifiers.contains(\"plugins\"))\n     {\n-        this.fs = fs;\n-        this.config = config;\n-        this.storeDirectory = storeDirectory;\n+      listPlugins(sources);\n     }\n-\n-    @Override\n-    protected List<DiagnosticsReportSource> provideSources( Set<String> classifiers )\n+    if (classifiers.contains(\"tree\"))\n     {\n-        List<DiagnosticsReportSource> sources = new ArrayList<>();\n-        if ( classifiers.contains( \"logs\" ) )\n-        {\n-            getLogFiles( sources );\n-        }\n-        if ( classifiers.contains( \"plugins\" ) )\n-        {\n-            listPlugins( sources );\n-        }\n-        if ( classifiers.contains( \"tree\" ) )\n-        {\n-            listDataDirectory( sources );\n-        }\n-        if ( classifiers.contains( \"tx\" ) )\n-        {\n-            getTransactionLogFiles( sources );\n-        }\n-\n-        return sources;\n+      listDataDirectory(sources);\n     }\n-\n-    /**\n-     * Collect a list of all the files in the plugins directory.\n-     *\n-     * @param sources destination of the sources.\n-     */\n-    private void listPlugins( List<DiagnosticsReportSource> sources )\n+    if (classifiers.contains(\"tx\"))\n     {\n-        File pluginDirectory = config.get( GraphDatabaseSettings.plugin_dir );\n-        if ( fs.fileExists( pluginDirectory ) )\n-        {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append( \"List of plugin directory:\" ).append( System.lineSeparator() );\n-            listContentOfDirectory( pluginDirectory, \"  \", sb );\n-\n-            sources.add( newDiagnosticsString( \"plugins.txt\", sb::toString ) );\n-        }\n+      getTransactionLogFiles(sources);\n     }\n \n-    private void listContentOfDirectory( File directory, String prefix, StringBuilder sb )\n+    return sources;\n+  }\n+\n+  /**\n+   * Collect a list of all the files in the plugins directory.\n+   *\n+   * @param sources destination of the sources.\n+   */\n+  private void listPlugins(List<DiagnosticsReportSource> sources)\n+  {\n+    File pluginDirectory = config.get(GraphDatabaseSettings.plugin_dir);\n+    if (fs.fileExists(pluginDirectory))\n     {\n-        if ( !fs.isDirectory( directory ) )\n-        {\n-            return;\n-        }\n-\n-        File[] files = fs.listFiles( directory );\n-        for ( File file : files )\n-        {\n-            if ( fs.isDirectory( file ) )\n-            {\n-                listContentOfDirectory( file, prefix + File.separator + file.getName(), sb );\n-            }\n-            else\n-            {\n-                sb.append( prefix ).append( file.getName() ).append( System.lineSeparator() );\n-            }\n-        }\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"List of plugin directory:\").append(System.lineSeparator());\n+      listContentOfDirectory(pluginDirectory, \"  \", sb);\n+\n+      sources.add(newDiagnosticsString(\"plugins.txt\", sb::toString));\n     }\n+  }\n \n-    /**\n-     * Print a tree view of all the files in the graph.db directory with files sizes.\n-     *\n-     * @param sources destination of the sources.\n-     */\n-    private void listDataDirectory( List<DiagnosticsReportSource> sources )\n+  private void listContentOfDirectory(File directory, String prefix, StringBuilder sb)\n+  {\n+    if (!fs.isDirectory(directory))\n     {\n-        KernelDiagnostics.StoreFiles storeFiles = new KernelDiagnostics.StoreFiles( storeDirectory );\n-\n-        BufferingLog logger = new BufferingLog();\n-        storeFiles.dump( DiagnosticsPhase.INITIALIZED, logger.debugLogger() );\n+      return;\n+    }\n \n-        sources.add( newDiagnosticsString( \"tree.txt\", logger::toString ) );\n+    File[] files = fs.listFiles(directory);\n+    for (File file : files)\n+    {\n+      if (fs.isDirectory(file))\n+      {\n+        listContentOfDirectory(file, prefix + File.separator + file.getName(), sb);\n+      } else\n+      {\n+        sb.append(prefix).append(file.getName()).append(System.lineSeparator());\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Print a tree view of all the files in the graph.db directory with files sizes.\n+   *\n+   * @param sources destination of the sources.\n+   */\n+  private void listDataDirectory(List<DiagnosticsReportSource> sources)\n+  {\n+    KernelDiagnostics.StoreFiles storeFiles = new KernelDiagnostics.StoreFiles(storeDirectory);\n+\n+    BufferingLog logger = new BufferingLog();\n+    storeFiles.dump(DiagnosticsPhase.INITIALIZED, logger.debugLogger());\n+\n+    sources.add(newDiagnosticsString(\"tree.txt\", logger::toString));\n+  }\n+\n+  /**\n+   * Add {@code debug.log}, {@code neo4j.log} and {@code gc.log}. All with all available rotated files.\n+   *\n+   * @param sources destination of the sources.\n+   */\n+  private void getLogFiles(List<DiagnosticsReportSource> sources)\n+  {\n+    // debug.log\n+    File debugLogFile = config.get(GraphDatabaseSettings.store_internal_log_path);\n+    if (fs.fileExists(debugLogFile))\n+    {\n+      sources.addAll(newDiagnosticsRotatingFile(\"logs/debug.log\", fs, debugLogFile));\n     }\n \n-    /**\n-     * Add {@code debug.log}, {@code neo4j.log} and {@code gc.log}. All with all available rotated files.\n-     *\n-     * @param sources destination of the sources.\n-     */\n-    private void getLogFiles( List<DiagnosticsReportSource> sources )\n+    // neo4j.log\n+    File logDirectory = config.get(GraphDatabaseSettings.logs_directory);\n+    File neo4jLog = new File(logDirectory, \"neo4j.log\");\n+    if (fs.fileExists(neo4jLog))\n     {\n-        // debug.log\n-        File debugLogFile = config.get( GraphDatabaseSettings.store_internal_log_path );\n-        if ( fs.fileExists( debugLogFile ) )\n-        {\n-            sources.addAll( newDiagnosticsRotatingFile( \"logs/debug.log\", fs, debugLogFile ) );\n-        }\n-\n-        // neo4j.log\n-        File logDirectory = config.get( GraphDatabaseSettings.logs_directory );\n-        File neo4jLog = new File( logDirectory, \"neo4j.log\" );\n-        if ( fs.fileExists( neo4jLog ) )\n-        {\n-            sources.add( newDiagnosticsFile( \"logs/neo4j.log\", fs, neo4jLog ) );\n-        }\n-\n-        // gc.log\n-        File gcLog = new File( logDirectory, \"gc.log\" );\n-        if ( fs.fileExists( gcLog ) )\n-        {\n-            sources.add( newDiagnosticsFile( \"logs/gc.log\", fs, gcLog ) );\n-        }\n-        // we might have rotation activated, check\n-        int i = 0;\n-        while ( true )\n-        {\n-            File gcRotationLog = new File( logDirectory, \"gc.log.\" + i );\n-            if ( !fs.fileExists( gcRotationLog ) )\n-            {\n-                break;\n-            }\n-            sources.add( newDiagnosticsFile( \"logs/gc.log.\" + i, fs, gcRotationLog ) );\n-            i++;\n-        }\n-        // there are other rotation schemas but nothing we can predict...\n+      sources.add(newDiagnosticsFile(\"logs/neo4j.log\", fs, neo4jLog));\n     }\n \n-    /**\n-     * Add all available log files as sources.\n-     *\n-     * @param sources destination of the sources.\n-     */\n-    private void getTransactionLogFiles( List<DiagnosticsReportSource> sources )\n+    // gc.log\n+    File gcLog = new File(logDirectory, \"gc.log\");\n+    if (fs.fileExists(gcLog))\n+    {\n+      sources.add(newDiagnosticsFile(\"logs/gc.log\", fs, gcLog));\n+    }\n+    // we might have rotation activated, check\n+    int i = 0;\n+    while (true)\n+    {\n+      File gcRotationLog = new File(logDirectory, \"gc.log.\" + i);\n+      if (!fs.fileExists(gcRotationLog))\n+      {\n+        break;\n+      }\n+      sources.add(newDiagnosticsFile(\"logs/gc.log.\" + i, fs, gcRotationLog));\n+      i++;\n+    }\n+    // there are other rotation schemas but nothing we can predict...\n+  }\n+\n+  /**\n+   * Add all available log files as sources.\n+   *\n+   * @param sources destination of the sources.\n+   */\n+  private void getTransactionLogFiles(List<DiagnosticsReportSource> sources)\n+  {\n+    try\n+    {\n+      LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder(storeDirectory, fs).build();\n+      for (File file : logFiles.logFiles())\n+      {\n+        sources.add(DiagnosticsReportSources.newDiagnosticsFile(\"tx/\" + file.getName(), fs, file));\n+      }\n+    } catch (IOException e)\n     {\n-        try\n-        {\n-            LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder( storeDirectory, fs ).build();\n-            for ( File file : logFiles.logFiles() )\n-            {\n-                sources.add( DiagnosticsReportSources.newDiagnosticsFile( \"tx/\" + file.getName(), fs, file ) );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            sources.add( DiagnosticsReportSources\n-                    .newDiagnosticsString( \"tx.txt\", () -> \"Error getting tx logs: \" + e.getMessage() ) );\n-        }\n+      sources.add(DiagnosticsReportSources\n+          .newDiagnosticsString(\"tx.txt\", () -> \"Error getting tx logs: \" + e.getMessage()));\n     }\n+  }\n \n }\n",
            "diff_size": 238
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4003/KernelDiagnosticsOfflineReportProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4003/KernelDiagnosticsOfflineReportProvider.java\nindex e91aaac9122..a44e1ed7e0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4003/KernelDiagnosticsOfflineReportProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4003/KernelDiagnosticsOfflineReportProvider.java\n@@ -65,15 +65,18 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n         {\n             getLogFiles( sources );\n         }\n-        if ( classifiers.contains( \"plugins\" ) )\n+\n+if ( classifiers.contains( \"plugins\" ) )\n         {\n             listPlugins( sources );\n         }\n-        if ( classifiers.contains( \"tree\" ) )\n+\n+if ( classifiers.contains( \"tree\" ) )\n         {\n             listDataDirectory( sources );\n         }\n-        if ( classifiers.contains( \"tx\" ) )\n+\n+if ( classifiers.contains( \"tx\" ) )\n         {\n             getTransactionLogFiles( sources );\n         }\n@@ -94,8 +97,7 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n             StringBuilder sb = new StringBuilder();\n             sb.append( \"List of plugin directory:\" ).append( System.lineSeparator() );\n             listContentOfDirectory( pluginDirectory, \"  \", sb );\n-\n-            sources.add( newDiagnosticsString( \"plugins.txt\", sb::toString ) );\n+sources.add( newDiagnosticsString( \"plugins.txt\", sb::toString ) );\n         }\n     }\n \n@@ -128,11 +130,9 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n     private void listDataDirectory( List<DiagnosticsReportSource> sources )\n     {\n         KernelDiagnostics.StoreFiles storeFiles = new KernelDiagnostics.StoreFiles( storeDirectory );\n-\n-        BufferingLog logger = new BufferingLog();\n+BufferingLog logger = new BufferingLog();\n         storeFiles.dump( DiagnosticsPhase.INITIALIZED, logger.debugLogger() );\n-\n-        sources.add( newDiagnosticsString( \"tree.txt\", logger::toString ) );\n+sources.add( newDiagnosticsString( \"tree.txt\", logger::toString ) );\n     }\n \n     /**\n@@ -195,9 +195,7 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n         }\n         catch ( IOException e )\n         {\n-            sources.add( DiagnosticsReportSources\n-                    .newDiagnosticsString( \"tx.txt\", () -> \"Error getting tx logs: \" + e.getMessage() ) );\n-        }\n+            sources.add( DiagnosticsReportSources.newDiagnosticsString( \"tx.txt\", () -> \"Error getting tx logs: \" + e.getMessage() ) );\n     }\n-\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}