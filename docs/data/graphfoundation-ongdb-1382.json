{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1382",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "78",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "247",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "255",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "298",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "317",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "320",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "354",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "372",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1382/TransactionPropagator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1382/TransactionPropagator.java\nindex e85cdc8adbc..1aec36dbc54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1382/TransactionPropagator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1382/TransactionPropagator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.transaction;\n \n import java.util.ArrayList;\n@@ -52,348 +53,339 @@ import static java.util.concurrent.TimeUnit.SECONDS;\n  * Pushes transactions committed on master to one or more slaves. Number of slaves receiving each transactions\n  * is controlled by {@link HaSettings#tx_push_factor}. Which slaves receives transactions is controlled by\n  * {@link HaSettings#tx_push_strategy}.\n- *\n+ * <p>\n  * An attempt is made to push each transaction to the wanted number of slaves, but if it isn't possible\n  * and a timeout is hit, propagation will still be considered as successful and occurrence will be logged.\n  */\n public class TransactionPropagator implements Lifecycle\n {\n-    public interface Configuration\n-    {\n-        int getTxPushFactor();\n+  public interface Configuration\n+  {\n+    int getTxPushFactor();\n \n-        InstanceId getServerId();\n+    InstanceId getServerId();\n \n-        SlavePriority getReplicationStrategy();\n-    }\n-\n-    private static class ReplicationContext\n-    {\n-        final Future<Void> future;\n-        final Slave slave;\n+    SlavePriority getReplicationStrategy();\n+  }\n \n-        Throwable throwable;\n+  private static class ReplicationContext\n+  {\n+    final Future<Void> future;\n+    final Slave slave;\n \n-        ReplicationContext( Future<Void> future, Slave slave )\n-        {\n-            this.future = future;\n-            this.slave = slave;\n-        }\n-    }\n+    Throwable throwable;\n \n-    public static Configuration from( final Config config )\n+    ReplicationContext(Future<Void> future, Slave slave)\n     {\n-        return new Configuration()\n-        {\n-            @Override\n-            public int getTxPushFactor()\n-            {\n-                return config.get( HaSettings.tx_push_factor );\n-            }\n-\n-            @Override\n-            public InstanceId getServerId()\n-            {\n-                return config.get( ClusterSettings.server_id );\n-            }\n-\n-            @Override\n-            public SlavePriority getReplicationStrategy()\n-            {\n-                switch ( config.get( HaSettings.tx_push_strategy ) )\n-                {\n-                    case fixed_descending:\n-                        return SlavePriorities.fixedDescending();\n-\n-                    case fixed_ascending:\n-                        return SlavePriorities.fixedAscending();\n-\n-                    case round_robin:\n-                        return SlavePriorities.roundRobin();\n-\n-                    default:\n-                        throw new RuntimeException( \"Unknown replication strategy \" );\n-                }\n-            }\n-        };\n+      this.future = future;\n+      this.slave = slave;\n     }\n+  }\n \n-    public static Configuration from( final Config config, final SlavePriority slavePriority )\n+  public static Configuration from(final Config config)\n+  {\n+    return new Configuration()\n     {\n-        return new Configuration()\n+      @Override\n+      public int getTxPushFactor()\n+      {\n+        return config.get(HaSettings.tx_push_factor);\n+      }\n+\n+      @Override\n+      public InstanceId getServerId()\n+      {\n+        return config.get(ClusterSettings.server_id);\n+      }\n+\n+      @Override\n+      public SlavePriority getReplicationStrategy()\n+      {\n+        switch (config.get(HaSettings.tx_push_strategy))\n         {\n-            @Override\n-            public int getTxPushFactor()\n-            {\n-                return config.get( HaSettings.tx_push_factor );\n-            }\n+          case fixed_descending:\n+            return SlavePriorities.fixedDescending();\n \n-            @Override\n-            public InstanceId getServerId()\n-            {\n-                return config.get( ClusterSettings.server_id );\n-            }\n+          case fixed_ascending:\n+            return SlavePriorities.fixedAscending();\n \n-            @Override\n-            public SlavePriority getReplicationStrategy()\n-            {\n-                return slavePriority;\n-            }\n-        };\n-    }\n+          case round_robin:\n+            return SlavePriorities.roundRobin();\n \n-    private int desiredReplicationFactor;\n-    private SlavePriority replicationStrategy;\n-    private ExecutorService slaveCommitters;\n-    private final Log log;\n-    private final Configuration config;\n-    private final Slaves slaves;\n-    private final CommitPusher pusher;\n-    private final CappedLogger slaveCommitFailureLogger;\n-    private final CappedLogger pushedToTooFewSlaveLogger;\n-\n-    public TransactionPropagator( Configuration config, Log log, Slaves slaves, CommitPusher pusher )\n-    {\n-        this.config = config;\n-        this.log = log;\n-        this.slaves = slaves;\n-        this.pusher = pusher;\n-        slaveCommitFailureLogger = new CappedLogger( log ).setTimeLimit( 5, SECONDS, Clocks.systemClock() );\n-        pushedToTooFewSlaveLogger = new CappedLogger( log ).setTimeLimit( 5, SECONDS, Clocks.systemClock() );\n-    }\n-\n-    @Override\n-    public void init()\n-    {\n-    }\n+          default:\n+            throw new RuntimeException(\"Unknown replication strategy \");\n+        }\n+      }\n+    };\n+  }\n \n-    @Override\n-    public void start()\n+  public static Configuration from(final Config config, final SlavePriority slavePriority)\n+  {\n+    return new Configuration()\n     {\n-        this.slaveCommitters = Executors.newCachedThreadPool( new NamedThreadFactory( \"slave-committer\" ) );\n-        desiredReplicationFactor = config.getTxPushFactor();\n-        replicationStrategy = config.getReplicationStrategy();\n-    }\n-\n-    @Override\n-    public void stop()\n+      @Override\n+      public int getTxPushFactor()\n+      {\n+        return config.get(HaSettings.tx_push_factor);\n+      }\n+\n+      @Override\n+      public InstanceId getServerId()\n+      {\n+        return config.get(ClusterSettings.server_id);\n+      }\n+\n+      @Override\n+      public SlavePriority getReplicationStrategy()\n+      {\n+        return slavePriority;\n+      }\n+    };\n+  }\n+\n+  private int desiredReplicationFactor;\n+  private SlavePriority replicationStrategy;\n+  private ExecutorService slaveCommitters;\n+  private final Log log;\n+  private final Configuration config;\n+  private final Slaves slaves;\n+  private final CommitPusher pusher;\n+  private final CappedLogger slaveCommitFailureLogger;\n+  private final CappedLogger pushedToTooFewSlaveLogger;\n+\n+  public TransactionPropagator(Configuration config, Log log, Slaves slaves, CommitPusher pusher)\n+  {\n+    this.config = config;\n+    this.log = log;\n+    this.slaves = slaves;\n+    this.pusher = pusher;\n+    slaveCommitFailureLogger = new CappedLogger(log).setTimeLimit(5, SECONDS, Clocks.systemClock());\n+    pushedToTooFewSlaveLogger = new CappedLogger(log).setTimeLimit(5, SECONDS, Clocks.systemClock());\n+  }\n+\n+  @Override\n+  public void init()\n+  {\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    this.slaveCommitters = Executors.newCachedThreadPool(new NamedThreadFactory(\"slave-committer\"));\n+    desiredReplicationFactor = config.getTxPushFactor();\n+    replicationStrategy = config.getReplicationStrategy();\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    this.slaveCommitters.shutdown();\n+  }\n+\n+  @Override\n+  public void shutdown()\n+  {\n+  }\n+\n+  /**\n+   * @param txId     transaction id to replicate\n+   * @param authorId author id for such transaction id\n+   * @return the number of missed replicas (e.g., desired replication factor - number of successful replications)\n+   */\n+  public int committed(long txId, int authorId)\n+  {\n+    int replicationFactor = desiredReplicationFactor;\n+    // If the author is not this instance, then we need to push to one less - the committer already has it\n+    boolean isAuthoredBySlave = config.getServerId().toIntegerIndex() != authorId;\n+    if (isAuthoredBySlave)\n     {\n-        this.slaveCommitters.shutdown();\n+      replicationFactor--;\n     }\n \n-    @Override\n-    public void shutdown()\n+    if (replicationFactor == 0)\n     {\n+      return replicationFactor;\n     }\n+    Collection<ReplicationContext> committers = new HashSet<>();\n \n-    /**\n-     *\n-     * @param txId transaction id to replicate\n-     * @param authorId author id for such transaction id\n-     * @return the number of missed replicas (e.g., desired replication factor - number of successful replications)\n-     */\n-    public int committed( long txId, int authorId )\n+    try\n     {\n-        int replicationFactor = desiredReplicationFactor;\n-        // If the author is not this instance, then we need to push to one less - the committer already has it\n-        boolean isAuthoredBySlave = config.getServerId().toIntegerIndex() != authorId;\n-        if ( isAuthoredBySlave )\n-        {\n-            replicationFactor--;\n-        }\n-\n-        if ( replicationFactor == 0 )\n-        {\n-            return replicationFactor;\n-        }\n-        Collection<ReplicationContext> committers = new HashSet<>();\n-\n-        try\n+      // TODO: Move this logic into {@link CommitPusher}\n+      // Commit at the configured amount of slaves in parallel.\n+      int successfulReplications = 0;\n+      Iterator<Slave> slaveList =\n+          filter(replicationStrategy.prioritize(slaves.getSlaves()).iterator(), authorId);\n+      CompletionNotifier notifier = new CompletionNotifier();\n+\n+      // Start as many initial committers as needed\n+      for (int i = 0; i < replicationFactor && slaveList.hasNext(); i++)\n+      {\n+        Slave slave = slaveList.next();\n+        Callable<Void> slaveCommitter = slaveCommitter(slave, txId, notifier);\n+        committers.add(new ReplicationContext(slaveCommitters.submit(slaveCommitter), slave));\n+      }\n+\n+      // Wait for them and perhaps spawn new ones for failing committers until we're done\n+      // or until we have no more slaves to try out.\n+      Collection<ReplicationContext> toAdd = new ArrayList<>();\n+      Collection<ReplicationContext> toRemove = new ArrayList<>();\n+      while (!committers.isEmpty() && successfulReplications < replicationFactor)\n+      {\n+        toAdd.clear();\n+        toRemove.clear();\n+        for (ReplicationContext context : committers)\n         {\n-            // TODO: Move this logic into {@link CommitPusher}\n-            // Commit at the configured amount of slaves in parallel.\n-            int successfulReplications = 0;\n-            Iterator<Slave> slaveList =\n-                    filter( replicationStrategy.prioritize( slaves.getSlaves() ).iterator(), authorId );\n-            CompletionNotifier notifier = new CompletionNotifier();\n-\n-            // Start as many initial committers as needed\n-            for ( int i = 0; i < replicationFactor && slaveList.hasNext(); i++ )\n+          if (!context.future.isDone())\n+          {\n+            continue;\n+          }\n+\n+          if (isSuccessful(context))\n+          // This committer was successful, increment counter\n+          {\n+            successfulReplications++;\n+          } else if (slaveList.hasNext())\n+          // This committer failed, spawn another one\n+          {\n+            Slave newSlave = slaveList.next();\n+            Callable<Void> slaveCommitter;\n+            try\n             {\n-                Slave slave = slaveList.next();\n-                Callable<Void> slaveCommitter = slaveCommitter( slave, txId, notifier );\n-                committers.add( new ReplicationContext( slaveCommitters.submit( slaveCommitter ), slave ) );\n-            }\n-\n-            // Wait for them and perhaps spawn new ones for failing committers until we're done\n-            // or until we have no more slaves to try out.\n-            Collection<ReplicationContext> toAdd = new ArrayList<>();\n-            Collection<ReplicationContext> toRemove = new ArrayList<>();\n-            while ( !committers.isEmpty() && successfulReplications < replicationFactor )\n+              slaveCommitter = slaveCommitter(newSlave, txId, notifier);\n+            } catch (Throwable t)\n             {\n-                toAdd.clear();\n-                toRemove.clear();\n-                for ( ReplicationContext context : committers )\n-                {\n-                    if ( !context.future.isDone() )\n-                    {\n-                        continue;\n-                    }\n-\n-                    if ( isSuccessful( context ) )\n-                    // This committer was successful, increment counter\n-                    {\n-                        successfulReplications++;\n-                    }\n-                    else if ( slaveList.hasNext() )\n-                    // This committer failed, spawn another one\n-                    {\n-                        Slave newSlave = slaveList.next();\n-                        Callable<Void> slaveCommitter;\n-                        try\n-                        {\n-                            slaveCommitter = slaveCommitter( newSlave, txId, notifier );\n-                        }\n-                        catch ( Throwable t )\n-                        {\n-                            log.error( \"Unknown error commit master transaction at slave\", t );\n-                            return desiredReplicationFactor /* missed them all :( */;\n-                        }\n-\n-                        toAdd.add( new ReplicationContext( slaveCommitters.submit( slaveCommitter ), newSlave ) );\n-                    }\n-                    toRemove.add( context );\n-                }\n-\n-                // Incorporate the results into committers collection\n-                if ( !toAdd.isEmpty() )\n-                {\n-                    committers.addAll( toAdd );\n-                }\n-                if ( !toRemove.isEmpty() )\n-                {\n-                    committers.removeAll( toRemove );\n-                }\n-\n-                if ( !committers.isEmpty() )\n-                // There are committers doing work right now, so go and wait for\n-                // any of the committers to be done so that we can reevaluate\n-                // the situation again.\n-                {\n-                    notifier.waitForAnyCompletion();\n-                }\n+              log.error(\"Unknown error commit master transaction at slave\", t);\n+              return desiredReplicationFactor /* missed them all :( */;\n             }\n \n-            // We did the best we could, have we committed successfully on enough slaves?\n-            if ( successfulReplications < replicationFactor )\n-            {\n-                pushedToTooFewSlaveLogger\n-                        .info( \"Transaction \" + txId + \" couldn't commit on enough slaves, desired \" +\n-                               replicationFactor +\n-                               \", but could only commit at \" + successfulReplications );\n-            }\n+            toAdd.add(new ReplicationContext(slaveCommitters.submit(slaveCommitter), newSlave));\n+          }\n+          toRemove.add(context);\n+        }\n \n-            return replicationFactor - successfulReplications;\n+        // Incorporate the results into committers collection\n+        if (!toAdd.isEmpty())\n+        {\n+          committers.addAll(toAdd);\n         }\n-        finally\n+        if (!toRemove.isEmpty())\n         {\n-            // Cancel all ongoing committers in the executor\n-            for ( ReplicationContext committer : committers )\n-            {\n-                committer.future.cancel( false );\n-            }\n+          committers.removeAll(toRemove);\n         }\n+\n+        if (!committers.isEmpty())\n+        // There are committers doing work right now, so go and wait for\n+        // any of the committers to be done so that we can reevaluate\n+        // the situation again.\n+        {\n+          notifier.waitForAnyCompletion();\n+        }\n+      }\n+\n+      // We did the best we could, have we committed successfully on enough slaves?\n+      if (successfulReplications < replicationFactor)\n+      {\n+        pushedToTooFewSlaveLogger\n+            .info(\"Transaction \" + txId + \" couldn't commit on enough slaves, desired \" +\n+                replicationFactor +\n+                \", but could only commit at \" + successfulReplications);\n+      }\n+\n+      return replicationFactor - successfulReplications;\n+    } finally\n+    {\n+      // Cancel all ongoing committers in the executor\n+      for (ReplicationContext committer : committers)\n+      {\n+        committer.future.cancel(false);\n+      }\n     }\n+  }\n \n-    private Iterator<Slave> filter( Iterator<Slave> slaves, final Integer externalAuthorServerId )\n+  private Iterator<Slave> filter(Iterator<Slave> slaves, final Integer externalAuthorServerId)\n+  {\n+    return externalAuthorServerId == null ? slaves : new FilteringIterator<>(slaves,\n+        item -> item.getServerId() != externalAuthorServerId);\n+  }\n+\n+  private boolean isSuccessful(ReplicationContext context)\n+  {\n+    try\n+    {\n+      context.future.get();\n+      return true;\n+    } catch (InterruptedException | CancellationException e)\n+    {\n+      return false;\n+    } catch (ExecutionException e)\n     {\n-        return externalAuthorServerId == null ? slaves : new FilteringIterator<>( slaves,\n-                item -> item.getServerId() != externalAuthorServerId );\n+      context.throwable = e.getCause();\n+      slaveCommitFailureLogger.error(\"Slave \" + context.slave.getServerId() + \": Replication commit threw\" +\n+          (context.throwable instanceof ComException ? \" communication\" : \"\") +\n+          \" exception:\", context.throwable);\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * A version of wait/notify which can handle that a notify comes before the\n+   * call to wait, in which case the call to wait will return immediately.\n+   *\n+   * @author Mattias Persson\n+   */\n+  private static class CompletionNotifier\n+  {\n+    private boolean notified;\n+\n+    synchronized void completed()\n+    {\n+      notified = true;\n+      notifyAll();\n     }\n \n-    private boolean isSuccessful( ReplicationContext context )\n+    synchronized void waitForAnyCompletion()\n     {\n+      if (!notified)\n+      {\n+        notified = false;\n         try\n         {\n-            context.future.get();\n-            return true;\n-        }\n-        catch ( InterruptedException | CancellationException e )\n-        {\n-            return false;\n-        }\n-        catch ( ExecutionException e )\n+          wait(2000 /*wait timeout just for safety*/);\n+        } catch (InterruptedException e)\n         {\n-            context.throwable = e.getCause();\n-            slaveCommitFailureLogger.error( \"Slave \" + context.slave.getServerId() + \": Replication commit threw\" +\n-                                            (context.throwable instanceof ComException ? \" communication\" : \"\") +\n-                                            \" exception:\", context.throwable );\n-            return false;\n+          Thread.interrupted();\n+          // Hmm, ok we got interrupted. No biggy I'd guess\n         }\n+      } else\n+      {\n+        notified = false;\n+      }\n     }\n \n-    /**\n-     * A version of wait/notify which can handle that a notify comes before the\n-     * call to wait, in which case the call to wait will return immediately.\n-     *\n-     * @author Mattias Persson\n-     */\n-    private static class CompletionNotifier\n+    @Override\n+    public String toString()\n     {\n-        private boolean notified;\n-\n-        synchronized void completed()\n-        {\n-            notified = true;\n-            notifyAll();\n-        }\n-\n-        synchronized void waitForAnyCompletion()\n-        {\n-            if ( !notified )\n-            {\n-                notified = false;\n-                try\n-                {\n-                    wait( 2000 /*wait timeout just for safety*/ );\n-                }\n-                catch ( InterruptedException e )\n-                {\n-                    Thread.interrupted();\n-                    // Hmm, ok we got interrupted. No biggy I'd guess\n-                }\n-            }\n-            else\n-            {\n-                notified = false;\n-            }\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"CompletionNotifier{id=\" + System.identityHashCode( this ) + \",notified=\" + notified + \"}\";\n-        }\n+      return \"CompletionNotifier{id=\" + System.identityHashCode(this) + \",notified=\" + notified + \"}\";\n     }\n+  }\n \n-    private Callable<Void> slaveCommitter( final Slave slave, final long txId, final CompletionNotifier notifier )\n+  private Callable<Void> slaveCommitter(final Slave slave, final long txId, final CompletionNotifier notifier)\n+  {\n+    return () ->\n     {\n-        return () ->\n-        {\n-            try\n-            {\n-                // TODO Bypass the CommitPusher, now that we have a single thread pulling updates on each slave\n-                // The CommitPusher is all about batching transaction pushing to slaves, to reduce the overhead\n-                // of multiple threads pulling the same transactions on each slave. That should be fine now.\n+      try\n+      {\n+        // TODO Bypass the CommitPusher, now that we have a single thread pulling updates on each slave\n+        // The CommitPusher is all about batching transaction pushing to slaves, to reduce the overhead\n+        // of multiple threads pulling the same transactions on each slave. That should be fine now.\n //                    slave.pullUpdates( txId );\n-                pusher.queuePush( slave, txId );\n-\n-                return null;\n-            }\n-            finally\n-            {\n-                notifier.completed();\n-            }\n-        };\n-    }\n+        pusher.queuePush(slave, txId);\n+\n+        return null;\n+      } finally\n+      {\n+        notifier.completed();\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 475
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}