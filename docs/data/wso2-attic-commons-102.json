{
    "project_name": "wso2-attic-commons",
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "120",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        try {\n            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n\t\t\tMethod m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n\t\t\tif (m == null) {\n\t\t\t\tthrow new ReflectionException(new NoSuchMethodException(actionName));\n\t\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/102/ProcessAndInstanceManagementMBean.java\nindex 676265e0ad5..5fd8c3aa118 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/102/ProcessAndInstanceManagementMBean.java\n@@ -117,7 +117,7 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n \t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n         try {\n             Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n-\t\t\tMethod m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n+    Method m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n \t\t\tif (m == null) {\n \t\t\t\tthrow new ReflectionException(new NoSuchMethodException(actionName));\n \t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/102/ProcessAndInstanceManagementMBean.java\nindex 676265e0ad5..54d5d5ee040 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/102/ProcessAndInstanceManagementMBean.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.engine;\n \n import java.lang.reflect.Method;\n@@ -47,113 +48,117 @@ import org.apache.ode.bpel.iapi.ProcessStore;\n  */\n public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n \n-    private MBeanInfo _mbeanInfo;\n-    private ProcessAndInstanceManagementImpl _pm;\n-\n-    private static final List<String> __excludes = new ArrayList<String>();\n-        static {\n-        __excludes.add(\"hashCode\");\n-        __excludes.add(\"equals\");\n-        __excludes.add(\"getClass\");\n-        __excludes.add(\"wait\");\n-        __excludes.add(\"notify\");\n-        __excludes.add(\"notifyAll\");\n-        __excludes.add(\"toString\");\n-    }\n-\n-    private final static Hashtable<String, Class<?>> primitives = new Hashtable<String, Class<?>>();\n-    static {\n-        primitives.put(Boolean.TYPE.toString(), Boolean.TYPE);\n-        primitives.put(Character.TYPE.toString(), Character.TYPE);\n-        primitives.put(Byte.TYPE.toString(), Byte.TYPE);\n-        primitives.put(Short.TYPE.toString(), Short.TYPE);\n-        primitives.put(Integer.TYPE.toString(), Integer.TYPE);\n-        primitives.put(Long.TYPE.toString(), Long.TYPE);\n-        primitives.put(Float.TYPE.toString(), Float.TYPE);\n-        primitives.put(Double.TYPE.toString(), Double.TYPE);\n-    }\n-\n-    public ProcessAndInstanceManagementMBean(BpelServer server, ProcessStore store) {\n-        this(new ProcessAndInstanceManagementImpl(server, store));\n-    }\n-\n-    /**\n-     */\n-    public ProcessAndInstanceManagementMBean(ProcessAndInstanceManagementImpl pm) {\n-        _pm = pm;\n-        List<MBeanOperationInfo> exposedOperations = new ArrayList<MBeanOperationInfo>();\n-        for (Method m : pm.getClass().getMethods()) {\n-            if (!__excludes.contains(m.getName())) {\n-                exposedOperations.add(new MBeanOperationInfo(m.getName(), m));\n-            }\n-        }\n-\n-        MBeanAttributeInfo[] attributes = new MBeanAttributeInfo[] {};\n-        MBeanConstructorInfo[] constructors = new MBeanConstructorInfo[] {};\n-        MBeanOperationInfo[] operations = new MBeanOperationInfo[exposedOperations.size()];\n-        operations = (MBeanOperationInfo[]) exposedOperations.toArray(operations);\n-        MBeanNotificationInfo[] notifications = new MBeanNotificationInfo[] {};\n-\n-        _mbeanInfo = new MBeanInfo(getClass().getName(), \"Process and Instance Management\",\n-                attributes, constructors, operations, notifications);\n+  private MBeanInfo _mbeanInfo;\n+  private ProcessAndInstanceManagementImpl _pm;\n+\n+  private static final List<String> __excludes = new ArrayList<String>();\n+\n+  static {\n+    __excludes.add(\"hashCode\");\n+    __excludes.add(\"equals\");\n+    __excludes.add(\"getClass\");\n+    __excludes.add(\"wait\");\n+    __excludes.add(\"notify\");\n+    __excludes.add(\"notifyAll\");\n+    __excludes.add(\"toString\");\n+  }\n+\n+  private final static Hashtable<String, Class<?>> primitives = new Hashtable<String, Class<?>>();\n+\n+  static {\n+    primitives.put(Boolean.TYPE.toString(), Boolean.TYPE);\n+    primitives.put(Character.TYPE.toString(), Character.TYPE);\n+    primitives.put(Byte.TYPE.toString(), Byte.TYPE);\n+    primitives.put(Short.TYPE.toString(), Short.TYPE);\n+    primitives.put(Integer.TYPE.toString(), Integer.TYPE);\n+    primitives.put(Long.TYPE.toString(), Long.TYPE);\n+    primitives.put(Float.TYPE.toString(), Float.TYPE);\n+    primitives.put(Double.TYPE.toString(), Double.TYPE);\n+  }\n+\n+  public ProcessAndInstanceManagementMBean(BpelServer server, ProcessStore store) {\n+    this(new ProcessAndInstanceManagementImpl(server, store));\n+  }\n+\n+  /**\n+   *\n+   */\n+  public ProcessAndInstanceManagementMBean(ProcessAndInstanceManagementImpl pm) {\n+    _pm = pm;\n+    List<MBeanOperationInfo> exposedOperations = new ArrayList<MBeanOperationInfo>();\n+    for (Method m : pm.getClass().getMethods()) {\n+      if (!__excludes.contains(m.getName())) {\n+        exposedOperations.add(new MBeanOperationInfo(m.getName(), m));\n+      }\n     }\n \n-    public Object getAttribute(String attribute)\n-            throws AttributeNotFoundException, MBeanException,\n-            ReflectionException {\n-        throw new UnsupportedOperationException();\n+    MBeanAttributeInfo[] attributes = new MBeanAttributeInfo[] {};\n+    MBeanConstructorInfo[] constructors = new MBeanConstructorInfo[] {};\n+    MBeanOperationInfo[] operations = new MBeanOperationInfo[exposedOperations.size()];\n+    operations = (MBeanOperationInfo[]) exposedOperations.toArray(operations);\n+    MBeanNotificationInfo[] notifications = new MBeanNotificationInfo[] {};\n+\n+    _mbeanInfo = new MBeanInfo(getClass().getName(), \"Process and Instance Management\",\n+      attributes, constructors, operations, notifications);\n+  }\n+\n+  public Object getAttribute(String attribute)\n+    throws AttributeNotFoundException, MBeanException,\n+    ReflectionException {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public AttributeList getAttributes(String[] attributes) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public MBeanInfo getMBeanInfo() {\n+    return _mbeanInfo;\n+  }\n+\n+  public Object invoke(String actionName, Object[] params, String[] signature)\n+    throws MBeanException, ReflectionException {\n+    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+    try {\n+      Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n+      Method m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n+      if (m == null) {\n+        throw new ReflectionException(new NoSuchMethodException(actionName));\n+      }\n+      return m.invoke(_pm, params);\n+    } catch (Exception e) {\n+      throw new ReflectionException(e);\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(cl);\n     }\n+  }\n \n-    public AttributeList getAttributes(String[] attributes) {\n-        throw new UnsupportedOperationException();\n+  private Class[] findTypes(ClassLoader loader, String[] signature) throws ReflectionException {\n+    if (signature == null) {\n+      return null;\n     }\n-\n-    public MBeanInfo getMBeanInfo() {\n-        return _mbeanInfo;\n-    }\n-\n-\tpublic Object invoke(String actionName, Object[] params, String[] signature)\n-\t\t\tthrows MBeanException, ReflectionException {\n-\t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n-        try {\n-            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n-\t\t\tMethod m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n-\t\t\tif (m == null) {\n-\t\t\t\tthrow new ReflectionException(new NoSuchMethodException(actionName));\n-\t\t\t}\n-\t\t\treturn m.invoke(_pm, params);\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new ReflectionException(e);\n-\t\t} finally {\n-            Thread.currentThread().setContextClassLoader(cl);\n-        }\n-    }\n-\n-    private Class[] findTypes(ClassLoader loader, String[] signature) throws ReflectionException {\n-        if (signature == null)\n-            return null;\n-        final Class[] result = new Class[signature.length];\n-        try {\n-            for (int i = 0; i < signature.length; i++) {\n-                result[i] = primitives.get(signature[i]);\n-                if (result[i] == null) {\n-                    result[i] = Class.forName(signature[i], false, loader);\n-                }\n-            }\n-        } catch (ClassNotFoundException e) {\n-            throw new ReflectionException(e);\n+    final Class[] result = new Class[signature.length];\n+    try {\n+      for (int i = 0; i < signature.length; i++) {\n+        result[i] = primitives.get(signature[i]);\n+        if (result[i] == null) {\n+          result[i] = Class.forName(signature[i], false, loader);\n         }\n-        return result;\n-    }\n-\n-    public void setAttribute(Attribute attribute)\n-            throws AttributeNotFoundException, InvalidAttributeValueException,\n-            MBeanException, ReflectionException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    public AttributeList setAttributes(AttributeList attributes) {\n-        throw new UnsupportedOperationException();\n+      }\n+    } catch (ClassNotFoundException e) {\n+      throw new ReflectionException(e);\n     }\n+    return result;\n+  }\n+\n+  public void setAttribute(Attribute attribute)\n+    throws AttributeNotFoundException, InvalidAttributeValueException,\n+    MBeanException, ReflectionException {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public AttributeList setAttributes(AttributeList attributes) {\n+    throw new UnsupportedOperationException();\n+  }\n \n }\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/102/ProcessAndInstanceManagementMBean.java\nindex 676265e0ad5..15a4fc40be7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/102/ProcessAndInstanceManagementMBean.java\n@@ -51,7 +51,8 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n     private ProcessAndInstanceManagementImpl _pm;\n \n     private static final List<String> __excludes = new ArrayList<String>();\n-        static {\n+\n+    static {\n         __excludes.add(\"hashCode\");\n         __excludes.add(\"equals\");\n         __excludes.add(\"getClass\");\n@@ -112,12 +113,12 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n         return _mbeanInfo;\n     }\n \n-\tpublic Object invoke(String actionName, Object[] params, String[] signature)\n+public Object invoke(String actionName, Object[] params, String[] signature)\n \t\t\tthrows MBeanException, ReflectionException {\n \t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n-        try {\n+try {\n             Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n-\t\t\tMethod m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n+Method m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n \t\t\tif (m == null) {\n \t\t\t\tthrow new ReflectionException(new NoSuchMethodException(actionName));\n \t\t\t}\n@@ -125,7 +126,7 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n \t\t} catch (Exception e) {\n \t\t\tthrow new ReflectionException(e);\n \t\t} finally {\n-            Thread.currentThread().setContextClassLoader(cl);\n+    Thread.currentThread().setContextClassLoader(cl);\n         }\n     }\n \n@@ -156,4 +157,4 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n         throw new UnsupportedOperationException();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/102/ProcessAndInstanceManagementMBean.java\nindex 676265e0ad5..5fd8c3aa118 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/102/ProcessAndInstanceManagementMBean.java\n@@ -117,7 +117,7 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n \t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n         try {\n             Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n-\t\t\tMethod m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n+    Method m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n \t\t\tif (m == null) {\n \t\t\t\tthrow new ReflectionException(new NoSuchMethodException(actionName));\n \t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/102/ProcessAndInstanceManagementMBean.java\nindex 676265e0ad5..66f52e53bdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/102/ProcessAndInstanceManagementMBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/102/ProcessAndInstanceManagementMBean.java\n@@ -117,7 +117,7 @@ public class ProcessAndInstanceManagementMBean implements DynamicMBean {\n \t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n         try {\n             Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n-\t\t\tMethod m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n+              Method m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));\n \t\t\tif (m == null) {\n \t\t\t\tthrow new ReflectionException(new NoSuchMethodException(actionName));\n \t\t\t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}