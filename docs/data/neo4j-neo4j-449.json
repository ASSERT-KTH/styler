{
    "project_name": "neo4j-neo4j",
    "error_id": "449",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/449/ProcedureOutputSignatureCompiler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/449/ProcedureOutputSignatureCompiler.java\nindex 1bbdbd6ba0f..b3499c3db29 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/449/ProcedureOutputSignatureCompiler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/449/ProcedureOutputSignatureCompiler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.impl;\n \n import java.lang.reflect.Field;\n@@ -44,7 +45,7 @@ import static java.util.stream.Collectors.toList;\n  */\n class ProcedureOutputSignatureCompiler\n {\n-    ProcedureOutputSignatureCompiler( TypeCheckers typeCheckers )\n+    ProcedureOutputSignatureCompiler(TypeCheckers typeCheckers)\n     {\n         this.typeCheckers = typeCheckers;\n     }\n@@ -58,117 +59,116 @@ class ProcedureOutputSignatureCompiler\n      * @return an output mapper for the return type of the method.\n      * @throws ProcedureException\n      */\n-    List<FieldSignature> fieldSignatures( Method method ) throws ProcedureException\n+    List<FieldSignature> fieldSignatures(Method method) throws ProcedureException\n     {\n         Class<?> cls = method.getReturnType();\n-        if ( cls == Void.class || cls == void.class )\n+        if (cls == Void.class || cls == void.class)\n         {\n             return ProcedureSignature.VOID;\n         }\n \n-        if ( cls != Stream.class )\n+        if (cls != Stream.class)\n         {\n-            throw invalidReturnType( cls );\n+            throw invalidReturnType(cls);\n         }\n \n         Type genericReturnType = method.getGenericReturnType();\n-        if ( !(genericReturnType instanceof ParameterizedType) )\n+        if (!(genericReturnType instanceof ParameterizedType))\n         {\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                            \"that you define and not a raw Stream.\" );\n+            throw new ProcedureException(Status.Procedure.TypeError,\n+              \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+                \"that you define and not a raw Stream.\");\n         }\n \n         ParameterizedType genType = (ParameterizedType) genericReturnType;\n         Type recordType = genType.getActualTypeArguments()[0];\n-        if ( recordType instanceof WildcardType )\n+        if (recordType instanceof WildcardType)\n         {\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                    \"that you define and not a Stream<?>.\" );\n+            throw new ProcedureException(Status.Procedure.TypeError,\n+              \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+                \"that you define and not a Stream<?>.\");\n         }\n-        if ( recordType instanceof ParameterizedType )\n+        if (recordType instanceof ParameterizedType)\n         {\n             ParameterizedType type = (ParameterizedType) recordType;\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                            \"that you define and not a parameterized type such as %s.\", type );\n+            throw new ProcedureException(Status.Procedure.TypeError,\n+              \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+                \"that you define and not a parameterized type such as %s.\", type);\n         }\n \n-        return fieldSignatures( (Class<?>) recordType );\n+        return fieldSignatures((Class<?>) recordType);\n     }\n \n-    List<FieldSignature> fieldSignatures( Class<?> userClass ) throws ProcedureException\n+    List<FieldSignature> fieldSignatures(Class<?> userClass) throws ProcedureException\n     {\n-        assertIsValidRecordClass( userClass );\n+        assertIsValidRecordClass(userClass);\n \n-        List<Field> fields = instanceFields( userClass );\n+        List<Field> fields = instanceFields(userClass);\n         FieldSignature[] signature = new FieldSignature[fields.size()];\n \n-        for ( int i = 0; i < fields.size(); i++ )\n+        for (int i = 0; i < fields.size(); i++)\n         {\n-            Field field = fields.get( i );\n-            if ( !isPublic( field.getModifiers() ) )\n+            Field field = fields.get(i);\n+            if (!isPublic(field.getModifiers()))\n             {\n-                throw new ProcedureException( Status.Procedure.TypeError,\n-                        \"Field `%s` in record `%s` cannot be accessed. Please ensure the field is marked as `public`.\", field.getName(),\n-                        userClass.getSimpleName() );\n+                throw new ProcedureException(Status.Procedure.TypeError,\n+                  \"Field `%s` in record `%s` cannot be accessed. Please ensure the field is marked as `public`.\", field.getName(),\n+                  userClass.getSimpleName());\n             }\n \n             try\n             {\n-                TypeCheckers.TypeChecker checker = typeCheckers.checkerFor( field.getGenericType() );\n-                signature[i] = FieldSignature.outputField( field.getName(), checker.type(), field.isAnnotationPresent( Deprecated.class ) );\n-            }\n-            catch ( ProcedureException e )\n+                TypeCheckers.TypeChecker checker = typeCheckers.checkerFor(field.getGenericType());\n+                signature[i] = FieldSignature.outputField(field.getName(), checker.type(), field.isAnnotationPresent(Deprecated.class));\n+            } catch (ProcedureException e)\n             {\n-                throw new ProcedureException( e.status(), e,\n-                        \"Field `%s` in record `%s` cannot be converted to a Neo4j type: %s\", field.getName(),\n-                        userClass.getSimpleName(), e.getMessage() );\n+                throw new ProcedureException(e.status(), e,\n+                  \"Field `%s` in record `%s` cannot be converted to a Neo4j type: %s\", field.getName(),\n+                  userClass.getSimpleName(), e.getMessage());\n             }\n         }\n \n-        return Arrays.asList( signature );\n+        return Arrays.asList(signature);\n     }\n \n-    private void assertIsValidRecordClass( Class<?> userClass ) throws ProcedureException\n+    private void assertIsValidRecordClass(Class<?> userClass) throws ProcedureException\n     {\n-        if ( userClass.isPrimitive() || userClass.isArray() ||\n-                userClass.getPackage() != null && userClass.getPackage().getName().startsWith( \"java.\" ) )\n+        if (userClass.isPrimitive() || userClass.isArray() ||\n+          userClass.getPackage() != null && userClass.getPackage().getName().startsWith(\"java.\"))\n         {\n-            throw invalidReturnType( userClass );\n+            throw invalidReturnType(userClass);\n         }\n     }\n \n-    private ProcedureException invalidReturnType( Class<?> userClass )\n+    private ProcedureException invalidReturnType(Class<?> userClass)\n     {\n-        return new ProcedureException( Status.Procedure.TypeError,\n-                \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                \"that you define, with public non-final fields defining the fields in the record.%n\" +\n-                \"If you''d like your procedure to return `%s`, you could define a record class like:%n\" +\n-                \"public class Output '{'%n\" +\n-                \"    public %s out;%n\" +\n-                \"'}'%n\" +\n-                \"%n\" +\n-                \"And then define your procedure as returning `Stream<Output>`.\", userClass.getSimpleName(),\n-                userClass.getSimpleName() );\n+        return new ProcedureException(Status.Procedure.TypeError,\n+          \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+            \"that you define, with public non-final fields defining the fields in the record.%n\" +\n+            \"If you''d like your procedure to return `%s`, you could define a record class like:%n\" +\n+            \"public class Output '{'%n\" +\n+            \"    public %s out;%n\" +\n+            \"'}'%n\" +\n+            \"%n\" +\n+            \"And then define your procedure as returning `Stream<Output>`.\", userClass.getSimpleName(),\n+          userClass.getSimpleName());\n     }\n \n-    static List<Field> instanceFields( Class<?> userClass )\n+    static List<Field> instanceFields(Class<?> userClass)\n     {\n         return Stream\n-                .<Class<?>>iterate(\n-                        userClass,\n-                        not( ProcedureOutputSignatureCompiler::isJavaLangClass ),\n-                        Class::getSuperclass\n-                )\n-                .flatMap( c -> Arrays.stream( c.getDeclaredFields() ) )\n-                .filter( f -> !isStatic( f.getModifiers() ) && !f.isSynthetic() )\n-                .collect( toList() );\n+          .<Class<?>>iterate(\n+            userClass,\n+            not(ProcedureOutputSignatureCompiler::isJavaLangClass),\n+            Class::getSuperclass\n+          )\n+          .flatMap(c -> Arrays.stream(c.getDeclaredFields()))\n+          .filter(f -> !isStatic(f.getModifiers()) && !f.isSynthetic())\n+          .collect(toList());\n     }\n \n-    private static boolean isJavaLangClass( Class<?> cls )\n+    private static boolean isJavaLangClass(Class<?> cls)\n     {\n-        return cls.getPackage().getName().equals( \"java.lang\" );\n+        return cls.getPackage().getName().equals(\"java.lang\");\n     }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}