{
    "project_name": "neo4j-neo4j",
    "error_id": "333",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/333/NodeLabelSecurityFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/333/NodeLabelSecurityFilter.java\nindex cb54def714a..f5edf0f2837 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/333/NodeLabelSecurityFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/333/NodeLabelSecurityFilter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import org.neo4j.internal.kernel.api.IndexQuery;\n@@ -37,7 +38,7 @@ class NodeLabelSecurityFilter implements IndexProgressor.EntityValueClient, Inde\n     private final AccessMode accessMode;\n     private IndexProgressor progressor;\n \n-    NodeLabelSecurityFilter( int[] properties, EntityValueClient target, NodeCursor node, Read read, AccessMode accessMode )\n+    NodeLabelSecurityFilter(int[] properties, EntityValueClient target, NodeCursor node, Read read, AccessMode accessMode)\n     {\n         this.properties = properties;\n         this.target = target;\n@@ -55,22 +56,22 @@ class NodeLabelSecurityFilter implements IndexProgressor.EntityValueClient, Inde\n     @Override\n     public void close()\n     {\n-        IOUtils.close( RuntimeException::new, node, progressor );\n+        IOUtils.close(RuntimeException::new, node, progressor);\n     }\n \n     @Override\n-    public void initialize( IndexDescriptor descriptor, IndexProgressor progressor, IndexQuery[] query, IndexQueryConstraints constraints,\n-            boolean indexIncludesTransactionState )\n+    public void initialize(IndexDescriptor descriptor, IndexProgressor progressor, IndexQuery[] query, IndexQueryConstraints constraints,\n+                           boolean indexIncludesTransactionState)\n     {\n         this.progressor = progressor;\n-        target.initialize( descriptor, this, query, constraints, indexIncludesTransactionState );\n+        target.initialize(descriptor, this, query, constraints, indexIncludesTransactionState);\n     }\n \n     @Override\n-    public boolean acceptEntity( long reference, float score, Value... values )\n+    public boolean acceptEntity(long reference, float score, Value... values)\n     {\n-        read.singleNode( reference, node );\n-        if ( !node.next() )\n+        read.singleNode(reference, node);\n+        if (!node.next())\n         {\n             // This node is not visible to this security context\n             return false;\n@@ -78,12 +79,12 @@ class NodeLabelSecurityFilter implements IndexProgressor.EntityValueClient, Inde\n \n         boolean allowed = true;\n         long[] labels = node.labelsIgnoringTxStateSetRemove().all();\n-        for ( int prop : properties )\n+        for (int prop : properties)\n         {\n-            allowed &= accessMode.allowsReadNodeProperty( () -> Labels.from( labels ), prop );\n+            allowed &= accessMode.allowsReadNodeProperty(() -> Labels.from(labels), prop);\n         }\n \n-        return allowed && target.acceptEntity( reference, score, values );\n+        return allowed && target.acceptEntity(reference, score, values);\n     }\n \n     @Override\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}