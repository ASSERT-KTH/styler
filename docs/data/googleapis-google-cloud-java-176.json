{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "176",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "warning",
                "message": "'object def rcurly' has incorrect indentation level 6, expected level should be one of the following: 8, 10, 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                  getUploadId(), getBuffer(), 0, getPosition(), length, last);\n            }\n      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n      job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n    } catch (RetryHelper.RetryHelperException e) {\n      throw BigQueryException.translateAndThrow(e);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "60",
                    "column": "87",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/176/TableDataWriteChannel.java\nindex 34f027f3ced..19b92a475f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/176/TableDataWriteChannel.java\n@@ -57,7 +57,8 @@ public class TableDataWriteChannel extends\n               return getOptions().getRpc().write(\n                   getUploadId(), getBuffer(), 0, getPosition(), length, last);\n             }\n-      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n+          }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER,getOptions () .getClock(\n+          ) );\n       job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n     } catch (RetryHelper.RetryHelperException e) {\n       throw BigQueryException.translateAndThrow(e);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/176/TableDataWriteChannel.java\nindex 34f027f3ced..0227e41b659 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/176/TableDataWriteChannel.java\n@@ -38,12 +38,12 @@ public class TableDataWriteChannel extends\n   private Job job;\n \n   TableDataWriteChannel(BigQueryOptions options,\n-      WriteChannelConfiguration writeChannelConfiguration) {\n+                        WriteChannelConfiguration writeChannelConfiguration) {\n     this(options, writeChannelConfiguration, open(options, writeChannelConfiguration));\n   }\n \n   TableDataWriteChannel(BigQueryOptions options, WriteChannelConfiguration config,\n-      String uploadId) {\n+                        String uploadId) {\n     super(options, config, uploadId);\n   }\n \n@@ -57,7 +57,8 @@ public class TableDataWriteChannel extends\n               return getOptions().getRpc().write(\n                   getUploadId(), getBuffer(), 0, getPosition(), length, last);\n             }\n-      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n+          }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER,\n+          getOptions().getClock());\n       job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n     } catch (RetryHelper.RetryHelperException e) {\n       throw BigQueryException.translateAndThrow(e);\n@@ -70,7 +71,7 @@ public class TableDataWriteChannel extends\n   }\n \n   private static String open(final BigQueryOptions options,\n-      final WriteChannelConfiguration writeChannelConfiguration) {\n+                             final WriteChannelConfiguration writeChannelConfiguration) {\n     try {\n       return runWithRetries(new Callable<String>() {\n         @Override\n@@ -113,7 +114,7 @@ public class TableDataWriteChannel extends\n       private final Job job;\n \n       private Builder(BigQueryOptions options, WriteChannelConfiguration configuration,\n-          String uploadId, Job job) {\n+                      String uploadId, Job job) {\n         super(options, configuration, uploadId);\n         this.job = job;\n       }\n@@ -124,7 +125,7 @@ public class TableDataWriteChannel extends\n     }\n \n     static Builder builder(BigQueryOptions options, WriteChannelConfiguration config,\n-        String uploadId, Job job) {\n+                           String uploadId, Job job) {\n       return new Builder(options, config, uploadId, job);\n     }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 2, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 2, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/176/TableDataWriteChannel.java\nindex 34f027f3ced..3311f5d564c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/176/TableDataWriteChannel.java\n@@ -39,25 +39,24 @@ public class TableDataWriteChannel extends\n \n   TableDataWriteChannel(BigQueryOptions options,\n       WriteChannelConfiguration writeChannelConfiguration) {\n-    this(options, writeChannelConfiguration, open(options, writeChannelConfiguration));\n+  this(options, writeChannelConfiguration, open(options, writeChannelConfiguration));\n   }\n \n   TableDataWriteChannel(BigQueryOptions options, WriteChannelConfiguration config,\n       String uploadId) {\n-    super(options, config, uploadId);\n+  super(options, config, uploadId);\n   }\n \n   @Override\n   protected void flushBuffer(final int length, final boolean last) {\n     try {\n-      com.google.api.services.bigquery.model.Job jobPb = runWithRetries(\n-          new Callable<com.google.api.services.bigquery.model.Job>() {\n+      com.google.api.services.bigquery.model.Job jobPb = runWithRetries(new Callable<com.google.api.services.bigquery.model.Job>() {\n             @Override\n             public com.google.api.services.bigquery.model.Job call() {\n               return getOptions().getRpc().write(\n                   getUploadId(), getBuffer(), 0, getPosition(), length, last);\n-            }\n-      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n+  }\n+  }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n       job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n     } catch (RetryHelper.RetryHelperException e) {\n       throw BigQueryException.translateAndThrow(e);\n@@ -69,8 +68,7 @@ public class TableDataWriteChannel extends\n     return StateImpl.builder(getOptions(), getEntity(), getUploadId(), job);\n   }\n \n-  private static String open(final BigQueryOptions options,\n-      final WriteChannelConfiguration writeChannelConfiguration) {\n+  private static String open(final BigQueryOptions options, final WriteChannelConfiguration writeChannelConfiguration) {\n     try {\n       return runWithRetries(new Callable<String>() {\n         @Override\n@@ -114,7 +112,7 @@ public class TableDataWriteChannel extends\n \n       private Builder(BigQueryOptions options, WriteChannelConfiguration configuration,\n           String uploadId, Job job) {\n-        super(options, configuration, uploadId);\n+  super(options, configuration, uploadId);\n         this.job = job;\n       }\n \n@@ -144,8 +142,7 @@ public class TableDataWriteChannel extends\n     @Override\n     public boolean equals(Object obj) {\n       return super.equals(obj)\n-          && obj instanceof StateImpl\n-          && Objects.equals(job, ((StateImpl) obj).job);\n+          && obj instanceof StateImpl && Objects.equals(job, ((StateImpl) obj).job);\n     }\n \n     @Override\n@@ -153,4 +150,4 @@ public class TableDataWriteChannel extends\n       return super.toStringHelper().add(\"job\", job);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 59, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 61, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 59, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 57, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/176/TableDataWriteChannel.java\nindex 34f027f3ced..b6bc9d5268f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/176/TableDataWriteChannel.java\n@@ -23,7 +23,6 @@ import com.google.cloud.RestorableState;\n import com.google.cloud.RetryHelper;\n import com.google.cloud.WriteChannel;\n import com.google.common.base.MoreObjects;\n-\n import java.util.Objects;\n import java.util.concurrent.Callable;\n \n@@ -32,32 +31,29 @@ import java.util.concurrent.Callable;\n  * to get the job used to insert streamed data. Please notice that {@link #getJob()} returns\n  * {@code null} until the channel is closed.\n  */\n-public class TableDataWriteChannel extends\n-    BaseWriteChannel<BigQueryOptions, WriteChannelConfiguration> {\n+\n+\n+public class TableDataWriteChannel extends BaseWriteChannel<BigQueryOptions, WriteChannelConfiguration> {\n \n   private Job job;\n \n-  TableDataWriteChannel(BigQueryOptions options,\n-      WriteChannelConfiguration writeChannelConfiguration) {\n+  TableDataWriteChannel(BigQueryOptions options, WriteChannelConfiguration writeChannelConfiguration) {\n     this(options, writeChannelConfiguration, open(options, writeChannelConfiguration));\n   }\n \n-  TableDataWriteChannel(BigQueryOptions options, WriteChannelConfiguration config,\n-      String uploadId) {\n+  TableDataWriteChannel(BigQueryOptions options, WriteChannelConfiguration config, String uploadId) {\n     super(options, config, uploadId);\n   }\n \n   @Override\n   protected void flushBuffer(final int length, final boolean last) {\n     try {\n-      com.google.api.services.bigquery.model.Job jobPb = runWithRetries(\n-          new Callable<com.google.api.services.bigquery.model.Job>() {\n-            @Override\n-            public com.google.api.services.bigquery.model.Job call() {\n-              return getOptions().getRpc().write(\n-                  getUploadId(), getBuffer(), 0, getPosition(), length, last);\n-            }\n-      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n+      com.google.api.services.bigquery.model.Job jobPb = runWithRetries(new Callable<com.google.api.services.bigquery.model.Job>() {\n+                                                           @Override\n+                                                           public com.google.api.services.bigquery.model.Job call() {\n+                                                             return getOptions().getRpc().write(getUploadId(), getBuffer(), 0, getPosition(), length, last);\n+                                                           }\n+                                                         }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n       job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n     } catch (RetryHelper.RetryHelperException e) {\n       throw BigQueryException.translateAndThrow(e);\n@@ -69,8 +65,7 @@ public class TableDataWriteChannel extends\n     return StateImpl.builder(getOptions(), getEntity(), getUploadId(), job);\n   }\n \n-  private static String open(final BigQueryOptions options,\n-      final WriteChannelConfiguration writeChannelConfiguration) {\n+  private static String open(final BigQueryOptions options, final WriteChannelConfiguration writeChannelConfiguration) {\n     try {\n       return runWithRetries(new Callable<String>() {\n         @Override\n@@ -91,15 +86,14 @@ public class TableDataWriteChannel extends\n    * Returns the {@code Job} created to insert the rows. The job is available only once the upload\n    * finished and the channel was closed, returns {@code null} otherwise.\n    */\n+\n   public Job getJob() {\n     return job;\n   }\n \n-  static class StateImpl\n-      extends BaseWriteChannel.BaseState<BigQueryOptions, WriteChannelConfiguration> {\n+  static class StateImpl extends BaseWriteChannel.BaseState<BigQueryOptions, WriteChannelConfiguration> {\n \n     private static final long serialVersionUID = -2692851818766876346L;\n-\n     private final Job job;\n \n     StateImpl(Builder builder) {\n@@ -107,13 +101,11 @@ public class TableDataWriteChannel extends\n       this.job = builder.job;\n     }\n \n-    static class Builder\n-        extends BaseWriteChannel.BaseState.Builder<BigQueryOptions, WriteChannelConfiguration> {\n+    static class Builder extends BaseWriteChannel.BaseState.Builder<BigQueryOptions, WriteChannelConfiguration> {\n \n       private final Job job;\n \n-      private Builder(BigQueryOptions options, WriteChannelConfiguration configuration,\n-          String uploadId, Job job) {\n+      private Builder(BigQueryOptions options, WriteChannelConfiguration configuration, String uploadId, Job job) {\n         super(options, configuration, uploadId);\n         this.job = job;\n       }\n@@ -123,8 +115,7 @@ public class TableDataWriteChannel extends\n       }\n     }\n \n-    static Builder builder(BigQueryOptions options, WriteChannelConfiguration config,\n-        String uploadId, Job job) {\n+    static Builder builder(BigQueryOptions options, WriteChannelConfiguration config, String uploadId, Job job) {\n       return new Builder(options, config, uploadId, job);\n     }\n \n@@ -144,8 +135,8 @@ public class TableDataWriteChannel extends\n     @Override\n     public boolean equals(Object obj) {\n       return super.equals(obj)\n-          && obj instanceof StateImpl\n-          && Objects.equals(job, ((StateImpl) obj).job);\n+        && obj instanceof StateImpl\n+        && Objects.equals(job, ((StateImpl) obj).job);\n     }\n \n     @Override\n@@ -153,4 +144,4 @@ public class TableDataWriteChannel extends\n       return super.toStringHelper().add(\"job\", job);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "column": "84",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/176/TableDataWriteChannel.java\nindex 34f027f3ced..ed1bd2dc4a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/176/TableDataWriteChannel.java\n@@ -57,8 +57,8 @@ public class TableDataWriteChannel extends\n               return getOptions().getRpc().write(\n                   getUploadId(), getBuffer(), 0, getPosition(), length, last);\n             }\n-      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n-      job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n+          }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock())\n+        ; job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n     } catch (RetryHelper.RetryHelperException e) {\n       throw BigQueryException.translateAndThrow(e);\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "column": "87",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/176/TableDataWriteChannel.java\nindex 34f027f3ced..19b92a475f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/176/TableDataWriteChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/176/TableDataWriteChannel.java\n@@ -57,7 +57,8 @@ public class TableDataWriteChannel extends\n               return getOptions().getRpc().write(\n                   getUploadId(), getBuffer(), 0, getPosition(), length, last);\n             }\n-      }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER, getOptions().getClock());\n+          }, getOptions().getRetryParams(), BigQueryImpl.EXCEPTION_HANDLER,getOptions () .getClock(\n+          ) );\n       job = jobPb != null ? Job.fromPb(getOptions().getService(), jobPb) : null;\n     } catch (RetryHelper.RetryHelperException e) {\n       throw BigQueryException.translateAndThrow(e);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}