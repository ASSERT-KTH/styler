{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2002",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2002/WritableIndexPartition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2002/WritableIndexPartition.java\nindex 0cbc73d2753..6ec88d3815e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2002/WritableIndexPartition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2002/WritableIndexPartition.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index.partition;\n \n import org.apache.lucene.index.IndexWriter;\n@@ -34,63 +35,64 @@ import org.neo4j.kernel.api.impl.index.backup.LuceneIndexSnapshots;\n \n /**\n  * Represents a single writable partition of a partitioned lucene index.\n+ *\n  * @see AbstractIndexPartition\n  */\n public class WritableIndexPartition extends AbstractIndexPartition\n {\n-    private final IndexWriter indexWriter;\n-    private final SearcherManager searcherManager;\n+  private final IndexWriter indexWriter;\n+  private final SearcherManager searcherManager;\n \n-    public WritableIndexPartition( File partitionFolder, Directory directory, IndexWriterConfig writerConfig )\n-            throws IOException\n-    {\n-        super( partitionFolder, directory );\n-        this.indexWriter = new IndexWriter( directory, writerConfig );\n-        this.searcherManager = new SearcherManager( indexWriter, new SearcherFactory() );\n-    }\n+  public WritableIndexPartition(File partitionFolder, Directory directory, IndexWriterConfig writerConfig)\n+      throws IOException\n+  {\n+    super(partitionFolder, directory);\n+    this.indexWriter = new IndexWriter(directory, writerConfig);\n+    this.searcherManager = new SearcherManager(indexWriter, new SearcherFactory());\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public IndexWriter getIndexWriter()\n-    {\n-        return indexWriter;\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public IndexWriter getIndexWriter()\n+  {\n+    return indexWriter;\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public PartitionSearcher acquireSearcher() throws IOException\n-    {\n-        return new PartitionSearcher( searcherManager );\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public PartitionSearcher acquireSearcher() throws IOException\n+  {\n+    return new PartitionSearcher(searcherManager);\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void maybeRefreshBlocking() throws IOException\n-    {\n-        searcherManager.maybeRefreshBlocking();\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void maybeRefreshBlocking() throws IOException\n+  {\n+    searcherManager.maybeRefreshBlocking();\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void close() throws IOException\n-    {\n-        IOUtils.closeAll( searcherManager, indexWriter, getDirectory() );\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void close() throws IOException\n+  {\n+    IOUtils.closeAll(searcherManager, indexWriter, getDirectory());\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public ResourceIterator<File> snapshot() throws IOException\n-    {\n-        return LuceneIndexSnapshots.forIndex( partitionFolder, indexWriter );\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public ResourceIterator<File> snapshot() throws IOException\n+  {\n+    return LuceneIndexSnapshots.forIndex(partitionFolder, indexWriter);\n+  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2002/WritableIndexPartition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2002/WritableIndexPartition.java\nindex 0cbc73d2753..12536c71864 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2002/WritableIndexPartition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2002/WritableIndexPartition.java\n@@ -41,9 +41,8 @@ public class WritableIndexPartition extends AbstractIndexPartition\n     private final IndexWriter indexWriter;\n     private final SearcherManager searcherManager;\n \n-    public WritableIndexPartition( File partitionFolder, Directory directory, IndexWriterConfig writerConfig )\n-            throws IOException\n-    {\n+    public WritableIndexPartition( File partitionFolder, Directory directory, IndexWriterConfig writerConfig ) throws IOException\n+{\n         super( partitionFolder, directory );\n         this.indexWriter = new IndexWriter( directory, writerConfig );\n         this.searcherManager = new SearcherManager( indexWriter, new SearcherFactory() );\n@@ -93,4 +92,4 @@ public class WritableIndexPartition extends AbstractIndexPartition\n     {\n         return LuceneIndexSnapshots.forIndex( partitionFolder, indexWriter );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}