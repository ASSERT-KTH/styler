{
    "project_name": "CESNET-perun",
    "error_id": "196",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t */\n\tgetPublicationSystems {\n\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n\t\t}\n\t},",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/196/CabinetManagerMethod.java\nindex bdad162063c..72ce56b0f38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/196/CabinetManagerMethod.java\n@@ -27,7 +27,7 @@ public enum CabinetManagerMethod implements ManagerMethod {\n \t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n \t */\n \tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\t\tpublic List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\treturn ac.getCabinetManager().getPublicationSystems();\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/196/CabinetManagerMethod.java\nindex bdad162063c..397c78a5542 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/196/CabinetManagerMethod.java\n@@ -21,440 +21,440 @@ import cz.metacentrum.perun.cabinet.bl.CabinetException;\n \n public enum CabinetManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Get all PublicationSystems in Perun. If none, return empty list.\n-\t *\n-\t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n-\t */\n-\tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of all Categories in Perun or empty list of none present.\n-\t *\n-\t * @return List<Category> Categories\n-\t */\n-\tgetCategories {\n-\t\tpublic List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getCategories();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Category for Publications with specified name and rank.\n-\t *\n-\t * @param category Category new Category object\n-\t * @return Category Created Category with ID set\n-\t */\n-\tcreateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates publications category in Perun. Category to update\n-\t * is found by ID. When category rank is changed, priorityCoefficient\n-\t * for all authors of books from this category, is recalculated.\n-\t *\n-\t * @param category Category to update to\n-\t * @return Category Updated category\n-\t * @throw CabinetException When Category doesn't exists\n-\t */\n-\tupdateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete category by its ID. If category contains any publications,\n-\t * it can't be deleted.\n-\t *\n-\t * @param id int Category <code>id</code>\n-\t * @throw CabinetException When Category doesn't exists or has publications\n-\t */\n-\tdeleteCategory {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Thanks for Publication\n-\t *\n-\t * @param thanks Thanks new Thanks object\n-\t * @return Thanks Created thanks\n-\t */\n-\tcreateThanks {\n-\t\tpublic Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete Thanks by its ID.\n-\t *\n-\t * @param id int Thanks <code>id</code>\n-\t * @throw CabinetException When Thanks doesn't exists\n-\t */\n-\tdeleteThanks {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get ThanksForGUI of Publication specified by its ID or empty list.\n-\t *\n-\t * @param id int Publication <code>id</code>\n-\t * @return List<ThanksForGUI> Found thanks\n-\t */\n-\tgetRichThanksByPublicationId {\n-\t\tpublic List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates Authorship. Everything except current date must be already set in Authorship object.\n-\t * Authorship is checked for existence before creation, if exists, existing object is returned.\n-\t * When authorship is successfully created, users priority coefficient is updated.\n-\t *\n-\t * @param authorship Authorship Authorship to be created\n-\t * @return Authorship Created authorship\n-\t */\n-\tcreateAuthorship {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship auth = parms.read(\"authorship\", Authorship.class);\n-\t\t\tif (ac.getCabinetManager().authorshipExists(auth)) {\n-\t\t\t\t// exists - return existing\n-\t\t\t\t// we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n-\t\t\t\treturn ac.getCabinetManager().getAuthorshipByUserAndPublicationId(auth.getUserId(), auth.getPublicationId());\n-\t\t\t\t// pubId and userId are unique and checked before, so we can safely return first and only authorship.\n-\t\t\t} else {\n-\t\t\t\treturn ac.getCabinetManager().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete Authorship by its userId and publicationId.\n-\t * @param publicationId int Publication <code>id</code>\n-\t * @param userId int User <code>id</code>\n-\t * @throw CabinetException When Authorship doesn't exists\n-\t */\n-\tdeleteAuthorship {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship authorship = ac.getCabinetManager().getAuthorshipByUserAndPublicationId(parms.readInt(\"userId\"),parms.readInt(\"publicationId\"));\n-\t\t\tac.getCabinetManager().deleteAuthorship(ac.getSession(), authorship);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets overall rank of given user as sum of all his publications Authorships.\n-\t *\n-\t * @param user int ID of user to get Rank for\n-\t * @return double Total rank of user or 1.0 if user has no Authorships yet (default rank).\n-\t */\n-\tgetRank {\n-\t\tpublic Double call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRank(parms.readInt(\"user\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all Authors of Publication specified by its ID. Empty list of none found.\n-\t *\n-\t * @param id int ID of Publication to look by\n-\t * @return List<Author> List of Authors of Publication specified its ID. Empty list of none found.\n-\t */\n-\tfindAuthorsByPublicationId {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getAuthorsByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all Authors of Publications. Empty list of none found.\n-\t *\n-\t * @return List<Author> List of all Authors of Publications. Empty list of none found.\n-\t */\n-\tfindAllAuthors {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getAllAuthors();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n-\t *\n-\t * @param publication Publication Publication to create\n-\t * @return Publication Created publication with ID set\n-\t * @throw CabinetException\n-\t */\n-\tcreatePublication {\n-\t\tpublic Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tif (ac.getCabinetManager().publicationExists(pub)) {\n-\t\t\t\t// get for external pubs\n-\t\t\t\tif (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n-\t\t\t\t\t// externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n-\t\t\t\t\treturn ac.getCabinetManager().getRichPublicationByExternalId(pub.getExternalId(), pub.getPublicationSystemId());\n-\t\t\t\t\t// for internal pubs\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// else create one\n-\t\t\tPublication returnedPub = ac.getCabinetManager().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n-\t\t\treturn ac.getCabinetManager().getRichPublicationById(returnedPub.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update existing publication by its ID.\n-\t *\n-\t * @param publication Publication Publication to update\n-\t * @return Publication Updated publication by its ID\n-\t * @throw CabinetException When same Publication already exists\n-\t */\n-\tupdatePublication {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tac.getCabinetManager().updatePublication(ac.getSession(), pub);\n-\t\t\treturn ac.getCabinetManager().getRichPublicationById(pub.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete publication by its ID. Only Author of the record or PerunAdmin can do this.\n-\t *  - Author deletes Authorships and Thanks from publication.\n-\t *  - PerunAdmin also delete publication record.\n-\t *\n-\t * @param id int ID of Publication to delete\n-\t * @throw CabinetException When publication not exists\n-\t */\n-\tdeletePublication {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deletePublication(ac.getSession(), ac.getPublicationById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return Publication by its ID.\n-\t *\n-\t * @param id int ID of Publication\n-\t * @return PublicationForGUI by its ID\n-\t * @throw CabinetException When such Publication doesn't exists\n-\t */\n-\tfindPublicationById {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRichPublicationById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Finds rich publications in Cabinet by GUI filter:\n-\t *\n-\t * id = exact match (used when search for publication of authors)\n-\t * title = if \"like\" this substring\n-\t * year = exact match\n-\t * isbn = if \"like\" this substring\n-\t * category = exact match\n-\t * yearSince = if year >= yearSince\n-\t * yearTill = if year <= yearTill\n-\t * userId = exact match or 0\n-\t *\n-\t * If you don't want to filter by publication params, do not include the attribute in the query.\n-\t *\n-\t * @param id int Publication <code>id</code>\n-\t * @param title String Title\n-\t * @param isbn String ISBN\n-\t * @param year int Year\n-\t * @param category int Category\n-\t * @param doi String DOI\n-\t * @param yearSince int Year since\n-\t * @param yearTill int Year till\n-\t * @param userId int User <code>id</code>\n-\t * @return List<PublicationForGUI> Found publications\n-\t*/\n-\tfindPublicationsByGUIFilter {\n-\t\tpublic List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\t// set filter\n-\t\t\tPublication filter = new Publication();\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tint userId = 0;\n-\n-\t\t\tif (parms.contains(\"id\")) {\n-\t\t\t\tfilter.setId(parms.readInt(\"id\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"year\")) {\n-\t\t\t\tfilter.setYear(parms.readInt(\"year\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"category\")) {\n-\t\t\t\tfilter.setCategoryId(parms.readInt(\"category\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearSince\")) {\n-\t\t\t\tyearSince = parms.readInt(\"yearSince\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearTill\")) {\n-\t\t\t\tyearTill = parms.readInt(\"yearTill\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"userId\")) {\n-\t\t\t\tuserId = parms.readInt(\"userId\");\n-\t\t\t}\n-\n-\t\t\t// result list\n-\t\t\tList<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n-\n-\t\t\tresult = ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill);\n-\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * (Un)Lock passed Publications for changes.\n-\t *\n-\t * @param lock boolean TRUE (lock) / FALSE (unlock)\n-\t * @param publications List<Publication> Publications to (un)lock\n-\t */\n-\tlockPublications {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tList<Publication> pubs = parms.readList(\"publications\", Publication.class);\n-\t\t\tboolean lock = parms.readBoolean(\"lock\");\n-\t\t\tac.getCabinetManager().lockPublications(ac.getSession(), lock, pubs);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Finds publications of perun's user specified in param\n-\t * Search is done in external publication systems (MU, ZCU)\n-\t * All parameters are required.\n-\t *\n-\t * @param user int Perun user\n-\t * @param yearSince int Year since\n-\t * @param yearTill int Year till - must be equal or greater then yearSince\n-\t * @param pubSysNamespace String (MU or ZCU)\n-\t * @return List<Publication> Found publications\n-\t */\n-\tfindExternalPublications {\n-\t\tpublic List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetManager().findExternalPublications(ac.getSession(), parms.readInt(\"user\"), parms.readInt(\"yearSince\"), parms.readInt(\"yearTill\"), parms.readString(\"pubSysNamespace\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\tfindSimilarPublications {\n-\t\tpublic Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\tSet<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n-\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tint userId = 0;\n-\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t\tresult.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t\tresult.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t\tresult.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n+    /*#\n+     * Get all PublicationSystems in Perun. If none, return empty list.\n+     *\n+     * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n+     */\n+    getPublicationSystems {\n+        public List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getPublicationSystems();\n+        }\n+    },\n+\n+    /*#\n+     * Return list of all Categories in Perun or empty list of none present.\n+     *\n+     * @return List<Category> Categories\n+     */\n+    getCategories {\n+        public List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getCategories();\n+        }\n+    },\n+\n+    /*#\n+     * Creates new Category for Publications with specified name and rank.\n+     *\n+     * @param category Category new Category object\n+     * @return Category Created Category with ID set\n+     */\n+    createCategory {\n+        public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+        }\n+    },\n+\n+    /*#\n+     * Updates publications category in Perun. Category to update\n+     * is found by ID. When category rank is changed, priorityCoefficient\n+     * for all authors of books from this category, is recalculated.\n+     *\n+     * @param category Category to update to\n+     * @return Category Updated category\n+     * @throw CabinetException When Category doesn't exists\n+     */\n+    updateCategory {\n+        public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+        }\n+    },\n+\n+    /*#\n+     * Delete category by its ID. If category contains any publications,\n+     * it can't be deleted.\n+     *\n+     * @param id int Category <code>id</code>\n+     * @throw CabinetException When Category doesn't exists or has publications\n+     */\n+    deleteCategory {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Creates new Thanks for Publication\n+     *\n+     * @param thanks Thanks new Thanks object\n+     * @return Thanks Created thanks\n+     */\n+    createThanks {\n+        public Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n+        }\n+    },\n+\n+    /*#\n+     * Delete Thanks by its ID.\n+     *\n+     * @param id int Thanks <code>id</code>\n+     * @throw CabinetException When Thanks doesn't exists\n+     */\n+    deleteThanks {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get ThanksForGUI of Publication specified by its ID or empty list.\n+     *\n+     * @param id int Publication <code>id</code>\n+     * @return List<ThanksForGUI> Found thanks\n+     */\n+    getRichThanksByPublicationId {\n+        public List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Creates Authorship. Everything except current date must be already set in Authorship object.\n+     * Authorship is checked for existence before creation, if exists, existing object is returned.\n+     * When authorship is successfully created, users priority coefficient is updated.\n+     *\n+     * @param authorship Authorship Authorship to be created\n+     * @return Authorship Created authorship\n+     */\n+    createAuthorship {\n+        public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            Authorship auth = parms.read(\"authorship\", Authorship.class);\n+            if (ac.getCabinetManager().authorshipExists(auth)) {\n+                // exists - return existing\n+                // we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n+                return ac.getCabinetManager().getAuthorshipByUserAndPublicationId(auth.getUserId(), auth.getPublicationId());\n+                // pubId and userId are unique and checked before, so we can safely return first and only authorship.\n+            } else {\n+                return ac.getCabinetManager().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Delete Authorship by its userId and publicationId.\n+     * @param publicationId int Publication <code>id</code>\n+     * @param userId int User <code>id</code>\n+     * @throw CabinetException When Authorship doesn't exists\n+     */\n+    deleteAuthorship {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            Authorship authorship = ac.getCabinetManager().getAuthorshipByUserAndPublicationId(parms.readInt(\"userId\"), parms.readInt(\"publicationId\"));\n+            ac.getCabinetManager().deleteAuthorship(ac.getSession(), authorship);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Gets overall rank of given user as sum of all his publications Authorships.\n+     *\n+     * @param user int ID of user to get Rank for\n+     * @return double Total rank of user or 1.0 if user has no Authorships yet (default rank).\n+     */\n+    getRank {\n+        public Double call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getRank(parms.readInt(\"user\"));\n+        }\n+    },\n+\n+    /*#\n+     * Return all Authors of Publication specified by its ID. Empty list of none found.\n+     *\n+     * @param id int ID of Publication to look by\n+     * @return List<Author> List of Authors of Publication specified its ID. Empty list of none found.\n+     */\n+    findAuthorsByPublicationId {\n+        public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getAuthorsByPublicationId(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Return all Authors of Publications. Empty list of none found.\n+     *\n+     * @return List<Author> List of all Authors of Publications. Empty list of none found.\n+     */\n+    findAllAuthors {\n+        public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getAllAuthors();\n+        }\n+    },\n+\n+    /*#\n+     * Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n+     *\n+     * @param publication Publication Publication to create\n+     * @return Publication Created publication with ID set\n+     * @throw CabinetException\n+     */\n+    createPublication {\n+        public Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Publication pub = parms.read(\"publication\", Publication.class);\n+            if (ac.getCabinetManager().publicationExists(pub)) {\n+                // get for external pubs\n+                if (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n+                    // externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n+                    return ac.getCabinetManager().getRichPublicationByExternalId(pub.getExternalId(), pub.getPublicationSystemId());\n+                    // for internal pubs\n+                }\n+            }\n+            // else create one\n+            Publication returnedPub = ac.getCabinetManager().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n+            return ac.getCabinetManager().getRichPublicationById(returnedPub.getId());\n+        }\n+    },\n+\n+    /*#\n+     * Update existing publication by its ID.\n+     *\n+     * @param publication Publication Publication to update\n+     * @return Publication Updated publication by its ID\n+     * @throw CabinetException When same Publication already exists\n+     */\n+    updatePublication {\n+        public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Publication pub = parms.read(\"publication\", Publication.class);\n+            ac.getCabinetManager().updatePublication(ac.getSession(), pub);\n+            return ac.getCabinetManager().getRichPublicationById(pub.getId());\n+        }\n+    },\n+\n+    /*#\n+     * Delete publication by its ID. Only Author of the record or PerunAdmin can do this.\n+     *  - Author deletes Authorships and Thanks from publication.\n+     *  - PerunAdmin also delete publication record.\n+     *\n+     * @param id int ID of Publication to delete\n+     * @throw CabinetException When publication not exists\n+     */\n+    deletePublication {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getCabinetManager().deletePublication(ac.getSession(), ac.getPublicationById(parms.readInt(\"id\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Return Publication by its ID.\n+     *\n+     * @param id int ID of Publication\n+     * @return PublicationForGUI by its ID\n+     * @throw CabinetException When such Publication doesn't exists\n+     */\n+    findPublicationById {\n+        public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getRichPublicationById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Finds rich publications in Cabinet by GUI filter:\n+     *\n+     * id = exact match (used when search for publication of authors)\n+     * title = if \"like\" this substring\n+     * year = exact match\n+     * isbn = if \"like\" this substring\n+     * category = exact match\n+     * yearSince = if year >= yearSince\n+     * yearTill = if year <= yearTill\n+     * userId = exact match or 0\n+     *\n+     * If you don't want to filter by publication params, do not include the attribute in the query.\n+     *\n+     * @param id int Publication <code>id</code>\n+     * @param title String Title\n+     * @param isbn String ISBN\n+     * @param year int Year\n+     * @param category int Category\n+     * @param doi String DOI\n+     * @param yearSince int Year since\n+     * @param yearTill int Year till\n+     * @param userId int User <code>id</code>\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    findPublicationsByGUIFilter {\n+        public List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+\n+            // set filter\n+            Publication filter = new Publication();\n+            int yearSince = 0;\n+            int yearTill = 0;\n+            int userId = 0;\n+\n+            if (parms.contains(\"id\")) {\n+                filter.setId(parms.readInt(\"id\"));\n+            }\n+            if (parms.contains(\"title\")) {\n+                filter.setTitle(parms.readString(\"title\"));\n+            }\n+            if (parms.contains(\"isbn\")) {\n+                filter.setIsbn(parms.readString(\"isbn\"));\n+            }\n+            if (parms.contains(\"year\")) {\n+                filter.setYear(parms.readInt(\"year\"));\n+            }\n+            if (parms.contains(\"category\")) {\n+                filter.setCategoryId(parms.readInt(\"category\"));\n+            }\n+            if (parms.contains(\"doi\")) {\n+                filter.setDoi(parms.readString(\"doi\"));\n+            }\n+            if (parms.contains(\"yearSince\")) {\n+                yearSince = parms.readInt(\"yearSince\");\n+            }\n+            if (parms.contains(\"yearTill\")) {\n+                yearTill = parms.readInt(\"yearTill\");\n+            }\n+            if (parms.contains(\"userId\")) {\n+                userId = parms.readInt(\"userId\");\n+            }\n+\n+            // result list\n+            List<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n+\n+            result = ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill);\n+\n+            return result;\n+\n+        }\n+    },\n+\n+    /*#\n+     * (Un)Lock passed Publications for changes.\n+     *\n+     * @param lock boolean TRUE (lock) / FALSE (unlock)\n+     * @param publications List<Publication> Publications to (un)lock\n+     */\n+    lockPublications {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            List<Publication> pubs = parms.readList(\"publications\", Publication.class);\n+            boolean lock = parms.readBoolean(\"lock\");\n+            ac.getCabinetManager().lockPublications(ac.getSession(), lock, pubs);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Finds publications of perun's user specified in param\n+     * Search is done in external publication systems (MU, ZCU)\n+     * All parameters are required.\n+     *\n+     * @param user int Perun user\n+     * @param yearSince int Year since\n+     * @param yearTill int Year till - must be equal or greater then yearSince\n+     * @param pubSysNamespace String (MU or ZCU)\n+     * @return List<Publication> Found publications\n+     */\n+    findExternalPublications {\n+        public List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetManager().findExternalPublications(ac.getSession(), parms.readInt(\"user\"), parms.readInt(\"yearSince\"), parms.readInt(\"yearTill\"), parms.readString(\"pubSysNamespace\"));\n+        }\n+    },\n+\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param title String Title\n+     * @param isbn String ISBN\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param isbn String ISBN\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param title String Title\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param title String Title\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param isbn String ISBN\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param isbn String ISBN\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    findSimilarPublications {\n+        public Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+\n+            Set<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n+\n+            int yearSince = 0;\n+            int yearTill = 0;\n+            int userId = 0;\n+\n+            if (parms.contains(\"title\")) {\n+                Publication filter = new Publication();\n+                filter.setTitle(parms.readString(\"title\"));\n+                result.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n+            }\n+            if (parms.contains(\"isbn\")) {\n+                Publication filter = new Publication();\n+                filter.setIsbn(parms.readString(\"isbn\"));\n+                result.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n+            }\n+            if (parms.contains(\"doi\")) {\n+                Publication filter = new Publication();\n+                filter.setDoi(parms.readString(\"doi\"));\n+                result.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n+            }\n+            return result;\n+\n+        }\n+    },\n \n }\n",
            "diff_size": 435
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/196/CabinetManagerMethod.java\nindex bdad162063c..7895ecf2e0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/196/CabinetManagerMethod.java\n@@ -4,7 +4,6 @@ import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.rpc.ApiCaller;\n import cz.metacentrum.perun.rpc.ManagerMethod;\n@@ -19,442 +18,482 @@ import cz.metacentrum.perun.cabinet.model.Thanks;\n import cz.metacentrum.perun.cabinet.model.ThanksForGUI;\n import cz.metacentrum.perun.cabinet.bl.CabinetException;\n \n+\n public enum CabinetManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Get all PublicationSystems in Perun. If none, return empty list.\n-\t *\n-\t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n-\t */\n-\tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of all Categories in Perun or empty list of none present.\n-\t *\n-\t * @return List<Category> Categories\n-\t */\n-\tgetCategories {\n-\t\tpublic List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getCategories();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Category for Publications with specified name and rank.\n-\t *\n-\t * @param category Category new Category object\n-\t * @return Category Created Category with ID set\n-\t */\n-\tcreateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates publications category in Perun. Category to update\n-\t * is found by ID. When category rank is changed, priorityCoefficient\n-\t * for all authors of books from this category, is recalculated.\n-\t *\n-\t * @param category Category to update to\n-\t * @return Category Updated category\n-\t * @throw CabinetException When Category doesn't exists\n-\t */\n-\tupdateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete category by its ID. If category contains any publications,\n-\t * it can't be deleted.\n-\t *\n-\t * @param id int Category <code>id</code>\n-\t * @throw CabinetException When Category doesn't exists or has publications\n-\t */\n-\tdeleteCategory {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Thanks for Publication\n-\t *\n-\t * @param thanks Thanks new Thanks object\n-\t * @return Thanks Created thanks\n-\t */\n-\tcreateThanks {\n-\t\tpublic Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete Thanks by its ID.\n-\t *\n-\t * @param id int Thanks <code>id</code>\n-\t * @throw CabinetException When Thanks doesn't exists\n-\t */\n-\tdeleteThanks {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get ThanksForGUI of Publication specified by its ID or empty list.\n-\t *\n-\t * @param id int Publication <code>id</code>\n-\t * @return List<ThanksForGUI> Found thanks\n-\t */\n-\tgetRichThanksByPublicationId {\n-\t\tpublic List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates Authorship. Everything except current date must be already set in Authorship object.\n-\t * Authorship is checked for existence before creation, if exists, existing object is returned.\n-\t * When authorship is successfully created, users priority coefficient is updated.\n-\t *\n-\t * @param authorship Authorship Authorship to be created\n-\t * @return Authorship Created authorship\n-\t */\n-\tcreateAuthorship {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship auth = parms.read(\"authorship\", Authorship.class);\n-\t\t\tif (ac.getCabinetManager().authorshipExists(auth)) {\n-\t\t\t\t// exists - return existing\n-\t\t\t\t// we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n-\t\t\t\treturn ac.getCabinetManager().getAuthorshipByUserAndPublicationId(auth.getUserId(), auth.getPublicationId());\n-\t\t\t\t// pubId and userId are unique and checked before, so we can safely return first and only authorship.\n-\t\t\t} else {\n-\t\t\t\treturn ac.getCabinetManager().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete Authorship by its userId and publicationId.\n-\t * @param publicationId int Publication <code>id</code>\n-\t * @param userId int User <code>id</code>\n-\t * @throw CabinetException When Authorship doesn't exists\n-\t */\n-\tdeleteAuthorship {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship authorship = ac.getCabinetManager().getAuthorshipByUserAndPublicationId(parms.readInt(\"userId\"),parms.readInt(\"publicationId\"));\n-\t\t\tac.getCabinetManager().deleteAuthorship(ac.getSession(), authorship);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets overall rank of given user as sum of all his publications Authorships.\n-\t *\n-\t * @param user int ID of user to get Rank for\n-\t * @return double Total rank of user or 1.0 if user has no Authorships yet (default rank).\n-\t */\n-\tgetRank {\n-\t\tpublic Double call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRank(parms.readInt(\"user\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all Authors of Publication specified by its ID. Empty list of none found.\n-\t *\n-\t * @param id int ID of Publication to look by\n-\t * @return List<Author> List of Authors of Publication specified its ID. Empty list of none found.\n-\t */\n-\tfindAuthorsByPublicationId {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getAuthorsByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all Authors of Publications. Empty list of none found.\n-\t *\n-\t * @return List<Author> List of all Authors of Publications. Empty list of none found.\n-\t */\n-\tfindAllAuthors {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getAllAuthors();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n-\t *\n-\t * @param publication Publication Publication to create\n-\t * @return Publication Created publication with ID set\n-\t * @throw CabinetException\n-\t */\n-\tcreatePublication {\n-\t\tpublic Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tif (ac.getCabinetManager().publicationExists(pub)) {\n-\t\t\t\t// get for external pubs\n-\t\t\t\tif (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n-\t\t\t\t\t// externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n-\t\t\t\t\treturn ac.getCabinetManager().getRichPublicationByExternalId(pub.getExternalId(), pub.getPublicationSystemId());\n-\t\t\t\t\t// for internal pubs\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// else create one\n-\t\t\tPublication returnedPub = ac.getCabinetManager().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n-\t\t\treturn ac.getCabinetManager().getRichPublicationById(returnedPub.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update existing publication by its ID.\n-\t *\n-\t * @param publication Publication Publication to update\n-\t * @return Publication Updated publication by its ID\n-\t * @throw CabinetException When same Publication already exists\n-\t */\n-\tupdatePublication {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tac.getCabinetManager().updatePublication(ac.getSession(), pub);\n-\t\t\treturn ac.getCabinetManager().getRichPublicationById(pub.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete publication by its ID. Only Author of the record or PerunAdmin can do this.\n-\t *  - Author deletes Authorships and Thanks from publication.\n-\t *  - PerunAdmin also delete publication record.\n-\t *\n-\t * @param id int ID of Publication to delete\n-\t * @throw CabinetException When publication not exists\n-\t */\n-\tdeletePublication {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deletePublication(ac.getSession(), ac.getPublicationById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return Publication by its ID.\n-\t *\n-\t * @param id int ID of Publication\n-\t * @return PublicationForGUI by its ID\n-\t * @throw CabinetException When such Publication doesn't exists\n-\t */\n-\tfindPublicationById {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRichPublicationById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Finds rich publications in Cabinet by GUI filter:\n-\t *\n-\t * id = exact match (used when search for publication of authors)\n-\t * title = if \"like\" this substring\n-\t * year = exact match\n-\t * isbn = if \"like\" this substring\n-\t * category = exact match\n-\t * yearSince = if year >= yearSince\n-\t * yearTill = if year <= yearTill\n-\t * userId = exact match or 0\n-\t *\n-\t * If you don't want to filter by publication params, do not include the attribute in the query.\n-\t *\n-\t * @param id int Publication <code>id</code>\n-\t * @param title String Title\n-\t * @param isbn String ISBN\n-\t * @param year int Year\n-\t * @param category int Category\n-\t * @param doi String DOI\n-\t * @param yearSince int Year since\n-\t * @param yearTill int Year till\n-\t * @param userId int User <code>id</code>\n-\t * @return List<PublicationForGUI> Found publications\n-\t*/\n-\tfindPublicationsByGUIFilter {\n-\t\tpublic List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\t// set filter\n-\t\t\tPublication filter = new Publication();\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tint userId = 0;\n-\n-\t\t\tif (parms.contains(\"id\")) {\n-\t\t\t\tfilter.setId(parms.readInt(\"id\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"year\")) {\n-\t\t\t\tfilter.setYear(parms.readInt(\"year\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"category\")) {\n-\t\t\t\tfilter.setCategoryId(parms.readInt(\"category\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearSince\")) {\n-\t\t\t\tyearSince = parms.readInt(\"yearSince\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearTill\")) {\n-\t\t\t\tyearTill = parms.readInt(\"yearTill\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"userId\")) {\n-\t\t\t\tuserId = parms.readInt(\"userId\");\n-\t\t\t}\n-\n-\t\t\t// result list\n-\t\t\tList<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n-\n-\t\t\tresult = ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill);\n-\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * (Un)Lock passed Publications for changes.\n-\t *\n-\t * @param lock boolean TRUE (lock) / FALSE (unlock)\n-\t * @param publications List<Publication> Publications to (un)lock\n-\t */\n-\tlockPublications {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tList<Publication> pubs = parms.readList(\"publications\", Publication.class);\n-\t\t\tboolean lock = parms.readBoolean(\"lock\");\n-\t\t\tac.getCabinetManager().lockPublications(ac.getSession(), lock, pubs);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Finds publications of perun's user specified in param\n-\t * Search is done in external publication systems (MU, ZCU)\n-\t * All parameters are required.\n-\t *\n-\t * @param user int Perun user\n-\t * @param yearSince int Year since\n-\t * @param yearTill int Year till - must be equal or greater then yearSince\n-\t * @param pubSysNamespace String (MU or ZCU)\n-\t * @return List<Publication> Found publications\n-\t */\n-\tfindExternalPublications {\n-\t\tpublic List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetManager().findExternalPublications(ac.getSession(), parms.readInt(\"user\"), parms.readInt(\"yearSince\"), parms.readInt(\"yearTill\"), parms.readString(\"pubSysNamespace\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\tfindSimilarPublications {\n-\t\tpublic Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\tSet<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n-\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tint userId = 0;\n-\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t\tresult.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t\tresult.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t\tresult.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-}\n+ /*#\n+  * Get all PublicationSystems in Perun. If none, return empty list.\n+  *\n+  * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n+  */\n+\n+\n+ getPublicationSystems {\n+  public List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getPublicationSystems();\n+  }\n+ },\n+\n+ /*#\n+  * Return list of all Categories in Perun or empty list of none present.\n+  *\n+  * @return List<Category> Categories\n+  */\n+\n+\n+ getCategories {\n+  public List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getCategories();\n+  }\n+ },\n+\n+ /*#\n+  * Creates new Category for Publications with specified name and rank.\n+  *\n+  * @param category Category new Category object\n+  * @return Category Created Category with ID set\n+  */\n+\n+\n+ createCategory {\n+  public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+  }\n+ },\n+\n+ /*#\n+  * Updates publications category in Perun. Category to update\n+  * is found by ID. When category rank is changed, priorityCoefficient\n+  * for all authors of books from this category, is recalculated.\n+  *\n+  * @param category Category to update to\n+  * @return Category Updated category\n+  * @throw CabinetException When Category doesn't exists\n+  */\n+\n+\n+ updateCategory {\n+  public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+  }\n+ },\n+\n+ /*#\n+  * Delete category by its ID. If category contains any publications,\n+  * it can't be deleted.\n+  *\n+  * @param id int Category <code>id</code>\n+  * @throw CabinetException When Category doesn't exists or has publications\n+  */\n+\n+\n+ deleteCategory {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Creates new Thanks for Publication\n+  *\n+  * @param thanks Thanks new Thanks object\n+  * @return Thanks Created thanks\n+  */\n+\n+\n+ createThanks {\n+  public Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n+  }\n+ },\n+\n+ /*#\n+  * Delete Thanks by its ID.\n+  *\n+  * @param id int Thanks <code>id</code>\n+  * @throw CabinetException When Thanks doesn't exists\n+  */\n+\n+\n+ deleteThanks {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get ThanksForGUI of Publication specified by its ID or empty list.\n+  *\n+  * @param id int Publication <code>id</code>\n+  * @return List<ThanksForGUI> Found thanks\n+  */\n+\n+\n+ getRichThanksByPublicationId {\n+  public List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Creates Authorship. Everything except current date must be already set in Authorship object.\n+  * Authorship is checked for existence before creation, if exists, existing object is returned.\n+  * When authorship is successfully created, users priority coefficient is updated.\n+  *\n+  * @param authorship Authorship Authorship to be created\n+  * @return Authorship Created authorship\n+  */\n+\n+\n+ createAuthorship {\n+  public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   Authorship auth = parms.read(\"authorship\", Authorship.class);\n+   if (ac.getCabinetManager().authorshipExists(auth)) {\n+    // exists - return existing\n+    // we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n+    return ac.getCabinetManager().getAuthorshipByUserAndPublicationId(auth.getUserId(), auth.getPublicationId());\n+    // pubId and userId are unique and checked before, so we can safely return first and only authorship.\n+   } else {\n+    return ac.getCabinetManager().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Delete Authorship by its userId and publicationId.\n+  * @param publicationId int Publication <code>id</code>\n+  * @param userId int User <code>id</code>\n+  * @throw CabinetException When Authorship doesn't exists\n+  */\n+\n+\n+ deleteAuthorship {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   Authorship authorship = ac.getCabinetManager().getAuthorshipByUserAndPublicationId(parms.readInt(\"userId\"), parms.readInt(\"publicationId\"));\n+   ac.getCabinetManager().deleteAuthorship(ac.getSession(), authorship);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Gets overall rank of given user as sum of all his publications Authorships.\n+  *\n+  * @param user int ID of user to get Rank for\n+  * @return double Total rank of user or 1.0 if user has no Authorships yet (default rank).\n+  */\n+\n+\n+ getRank {\n+  public Double call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getRank(parms.readInt(\"user\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return all Authors of Publication specified by its ID. Empty list of none found.\n+  *\n+  * @param id int ID of Publication to look by\n+  * @return List<Author> List of Authors of Publication specified its ID. Empty list of none found.\n+  */\n+\n+\n+ findAuthorsByPublicationId {\n+  public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getAuthorsByPublicationId(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return all Authors of Publications. Empty list of none found.\n+  *\n+  * @return List<Author> List of all Authors of Publications. Empty list of none found.\n+  */\n+\n+\n+ findAllAuthors {\n+  public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getAllAuthors();\n+  }\n+ },\n+\n+ /*#\n+  * Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n+  *\n+  * @param publication Publication Publication to create\n+  * @return Publication Created publication with ID set\n+  * @throw CabinetException\n+  */\n+\n+\n+ createPublication {\n+  public Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Publication pub = parms.read(\"publication\", Publication.class);\n+   if (ac.getCabinetManager().publicationExists(pub)) {\n+    // get for external pubs\n+    if (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n+     // externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n+     return ac.getCabinetManager().getRichPublicationByExternalId(pub.getExternalId(), pub.getPublicationSystemId());\n+     // for internal pubs\n+    }\n+   }\n+   // else create one\n+   Publication returnedPub = ac.getCabinetManager().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n+   return ac.getCabinetManager().getRichPublicationById(returnedPub.getId());\n+  }\n+ },\n+\n+ /*#\n+  * Update existing publication by its ID.\n+  *\n+  * @param publication Publication Publication to update\n+  * @return Publication Updated publication by its ID\n+  * @throw CabinetException When same Publication already exists\n+  */\n+\n+\n+ updatePublication {\n+  public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Publication pub = parms.read(\"publication\", Publication.class);\n+   ac.getCabinetManager().updatePublication(ac.getSession(), pub);\n+   return ac.getCabinetManager().getRichPublicationById(pub.getId());\n+  }\n+ },\n+\n+ /*#\n+  * Delete publication by its ID. Only Author of the record or PerunAdmin can do this.\n+  *  - Author deletes Authorships and Thanks from publication.\n+  *  - PerunAdmin also delete publication record.\n+  *\n+  * @param id int ID of Publication to delete\n+  * @throw CabinetException When publication not exists\n+  */\n+\n+\n+ deletePublication {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getCabinetManager().deletePublication(ac.getSession(), ac.getPublicationById(parms.readInt(\"id\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Return Publication by its ID.\n+  *\n+  * @param id int ID of Publication\n+  * @return PublicationForGUI by its ID\n+  * @throw CabinetException When such Publication doesn't exists\n+  */\n+\n+\n+ findPublicationById {\n+  public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getRichPublicationById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Finds rich publications in Cabinet by GUI filter:\n+  *\n+  * id = exact match (used when search for publication of authors)\n+  * title = if \"like\" this substring\n+  * year = exact match\n+  * isbn = if \"like\" this substring\n+  * category = exact match\n+  * yearSince = if year >= yearSince\n+  * yearTill = if year <= yearTill\n+  * userId = exact match or 0\n+  *\n+  * If you don't want to filter by publication params, do not include the attribute in the query.\n+  *\n+  * @param id int Publication <code>id</code>\n+  * @param title String Title\n+  * @param isbn String ISBN\n+  * @param year int Year\n+  * @param category int Category\n+  * @param doi String DOI\n+  * @param yearSince int Year since\n+  * @param yearTill int Year till\n+  * @param userId int User <code>id</code>\n+  * @return List<PublicationForGUI> Found publications\n+ */\n+\n+\n+ findPublicationsByGUIFilter {\n+  public List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+\n+   // set filter\n+   Publication filter = new Publication();\n+   int yearSince = 0;\n+   int yearTill = 0;\n+   int userId = 0;\n+   if (parms.contains(\"id\")) {\n+    filter.setId(parms.readInt(\"id\"));\n+   }\n+   if (parms.contains(\"title\")) {\n+    filter.setTitle(parms.readString(\"title\"));\n+   }\n+   if (parms.contains(\"isbn\")) {\n+    filter.setIsbn(parms.readString(\"isbn\"));\n+   }\n+   if (parms.contains(\"year\")) {\n+    filter.setYear(parms.readInt(\"year\"));\n+   }\n+   if (parms.contains(\"category\")) {\n+    filter.setCategoryId(parms.readInt(\"category\"));\n+   }\n+   if (parms.contains(\"doi\")) {\n+    filter.setDoi(parms.readString(\"doi\"));\n+   }\n+   if (parms.contains(\"yearSince\")) {\n+    yearSince = parms.readInt(\"yearSince\");\n+   }\n+   if (parms.contains(\"yearTill\")) {\n+    yearTill = parms.readInt(\"yearTill\");\n+   }\n+   if (parms.contains(\"userId\")) {\n+    userId = parms.readInt(\"userId\");\n+   }\n+\n+   // result list\n+   List<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n+   result = ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill);\n+   return result;\n+  }\n+ },\n+\n+ /*#\n+  * (Un)Lock passed Publications for changes.\n+  *\n+  * @param lock boolean TRUE (lock) / FALSE (unlock)\n+  * @param publications List<Publication> Publications to (un)lock\n+  */\n+\n+\n+ lockPublications {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   List<Publication> pubs = parms.readList(\"publications\", Publication.class);\n+   boolean lock = parms.readBoolean(\"lock\");\n+   ac.getCabinetManager().lockPublications(ac.getSession(), lock, pubs);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Finds publications of perun's user specified in param\n+  * Search is done in external publication systems (MU, ZCU)\n+  * All parameters are required.\n+  *\n+  * @param user int Perun user\n+  * @param yearSince int Year since\n+  * @param yearTill int Year till - must be equal or greater then yearSince\n+  * @param pubSysNamespace String (MU or ZCU)\n+  * @return List<Publication> Found publications\n+  */\n+\n+\n+ findExternalPublications {\n+  public List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetManager().findExternalPublications(ac.getSession(),\n+parms.readInt(\"user\"),\n+parms.readInt(\"yearSince\"),\n+parms.readInt(\"yearTill\"),\n+parms.readString(\"pubSysNamespace\"));\n+  }\n+ },\n+\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param title String Title\n+  * @param isbn String ISBN\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param isbn String ISBN\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param title String Title\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param title String Title\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param isbn String ISBN\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param isbn String ISBN\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+\n+\n+ findSimilarPublications {\n+  public Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   Set<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n+   int yearSince = 0;\n+   int yearTill = 0;\n+   int userId = 0;\n+   if (parms.contains(\"title\")) {\n+    Publication filter = new Publication();\n+    filter.setTitle(parms.readString(\"title\"));\n+    result.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n+   }\n+   if (parms.contains(\"isbn\")) {\n+    Publication filter = new Publication();\n+    filter.setIsbn(parms.readString(\"isbn\"));\n+    result.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n+   }\n+   if (parms.contains(\"doi\")) {\n+    Publication filter = new Publication();\n+    filter.setDoi(parms.readString(\"doi\"));\n+    result.addAll(ac.getCabinetManager().getRichPublicationsByFilter(filter, userId, yearSince, yearTill));\n+   }\n+\n+   return result;\n+  }\n+ }\n+,\n+}\n\\ No newline at end of file\n",
            "diff_size": 478
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/196/CabinetManagerMethod.java\nindex bdad162063c..72ce56b0f38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/196/CabinetManagerMethod.java\n@@ -27,7 +27,7 @@ public enum CabinetManagerMethod implements ManagerMethod {\n \t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n \t */\n \tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\t\tpublic List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\treturn ac.getCabinetManager().getPublicationSystems();\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/196/CabinetManagerMethod.java\nindex bdad162063c..c4ed1361064 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/196/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/196/CabinetManagerMethod.java\n@@ -27,8 +27,9 @@ public enum CabinetManagerMethod implements ManagerMethod {\n \t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n \t */\n \tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n+\t\tpublic List<PublicationSystem >call ( ApiCaller\n+\t\t\tac , Deserializer parms) throws PerunException {\n+\t\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n \t\t}\n \t},\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}