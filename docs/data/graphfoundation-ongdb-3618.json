{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3618",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3618/LocalDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3618/LocalDatabase.java\nindex c2868651a5d..8e96e18bbaa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3618/LocalDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3618/LocalDatabase.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.catchup.storecopy;\n \n import java.io.File;\n@@ -49,213 +50,211 @@ import static org.neo4j.kernel.AvailabilityGuard.availabilityRequirement;\n \n public class LocalDatabase implements Lifecycle\n {\n-    private static final AvailabilityRequirement NOT_STOPPED =\n-            availabilityRequirement( \"Database is stopped\" );\n-    private static final AvailabilityRequirement NOT_COPYING_STORE =\n-            availabilityRequirement( \"Database is stopped to copy store from another cluster member\" );\n-\n-    private final File storeDir;\n-\n-    private final StoreFiles storeFiles;\n-    private final DataSourceManager dataSourceManager;\n-    private final Supplier<DatabaseHealth> databaseHealthSupplier;\n-    private final AvailabilityGuard availabilityGuard;\n-    private final Log log;\n-    private final FileSystemWatcherService watcherService;\n-\n-    private volatile StoreId storeId;\n-    private volatile DatabaseHealth databaseHealth;\n-    private volatile AvailabilityRequirement currentRequirement;\n-\n-    private volatile TransactionCommitProcess localCommit;\n-    private LogFiles logFiles;\n-\n-    public LocalDatabase( File storeDir,\n-            StoreFiles storeFiles,\n-            LogFiles logFiles,\n-            DataSourceManager dataSourceManager,\n-            Supplier<DatabaseHealth> databaseHealthSupplier,\n-            FileSystemWatcherService watcherService,\n-            AvailabilityGuard availabilityGuard,\n-            LogProvider logProvider )\n-    {\n-        this.storeDir = storeDir;\n-        this.storeFiles = storeFiles;\n-        this.logFiles = logFiles;\n-        this.dataSourceManager = dataSourceManager;\n-        this.databaseHealthSupplier = databaseHealthSupplier;\n-        this.availabilityGuard = availabilityGuard;\n-        this.watcherService = watcherService;\n-        this.log = logProvider.getLog( getClass() );\n-        raiseAvailabilityGuard( NOT_STOPPED );\n-    }\n-\n-    @Override\n-    public void init() throws Throwable\n-    {\n-        dataSourceManager.init();\n-        watcherService.init();\n-    }\n-\n-    @Override\n-    public synchronized void start() throws Throwable\n-    {\n-        if ( isAvailable() )\n-        {\n-            return;\n-        }\n-        storeId = readStoreIdFromDisk();\n-        log.info( \"Starting with storeId: \" + storeId );\n-\n-        dataSourceManager.start();\n-        watcherService.start();\n-\n-        dropAvailabilityGuard();\n-    }\n-\n-    @Override\n-    public void stop() throws Throwable\n-    {\n-        stopWithRequirement( NOT_STOPPED );\n-    }\n-\n-    /**\n-     * Stop database to perform a store copy. This will raise {@link AvailabilityGuard} with\n-     * a more friendly blocking requirement.\n-     *\n-     * @throws Throwable if any of the components are unable to stop.\n-     */\n-    public void stopForStoreCopy() throws Throwable\n-    {\n-        stopWithRequirement( NOT_COPYING_STORE );\n-    }\n-\n-    public boolean isAvailable()\n-    {\n-        return currentRequirement == null;\n-    }\n-\n-    @Override\n-    public void shutdown() throws Throwable\n-    {\n-        watcherService.shutdown();\n-        dataSourceManager.shutdown();\n-    }\n-\n-    public synchronized StoreId storeId()\n-    {\n-        if ( isAvailable() )\n-        {\n-            return storeId;\n-        }\n-        else\n-        {\n-            return readStoreIdFromDisk();\n-        }\n-    }\n-\n-    private StoreId readStoreIdFromDisk()\n-    {\n-        try\n-        {\n-            return storeFiles.readStoreId( storeDir );\n-        }\n-        catch ( IOException e )\n-        {\n-            log.error( \"Failure reading store id\", e );\n-            return null;\n-        }\n-    }\n-\n-    public void panic( Throwable cause )\n-    {\n-        getDatabaseHealth().panic( cause );\n-    }\n-\n-    public <EXCEPTION extends Throwable> void assertHealthy( Class<EXCEPTION> cause ) throws EXCEPTION\n-    {\n-        getDatabaseHealth().assertHealthy( cause );\n-    }\n-\n-    private DatabaseHealth getDatabaseHealth()\n-    {\n-        if ( databaseHealth == null )\n-        {\n-            databaseHealth = databaseHealthSupplier.get();\n-        }\n-        return databaseHealth;\n-    }\n-\n-    public void delete() throws IOException\n+  private static final AvailabilityRequirement NOT_STOPPED =\n+      availabilityRequirement(\"Database is stopped\");\n+  private static final AvailabilityRequirement NOT_COPYING_STORE =\n+      availabilityRequirement(\"Database is stopped to copy store from another cluster member\");\n+\n+  private final File storeDir;\n+\n+  private final StoreFiles storeFiles;\n+  private final DataSourceManager dataSourceManager;\n+  private final Supplier<DatabaseHealth> databaseHealthSupplier;\n+  private final AvailabilityGuard availabilityGuard;\n+  private final Log log;\n+  private final FileSystemWatcherService watcherService;\n+\n+  private volatile StoreId storeId;\n+  private volatile DatabaseHealth databaseHealth;\n+  private volatile AvailabilityRequirement currentRequirement;\n+\n+  private volatile TransactionCommitProcess localCommit;\n+  private LogFiles logFiles;\n+\n+  public LocalDatabase(File storeDir,\n+                       StoreFiles storeFiles,\n+                       LogFiles logFiles,\n+                       DataSourceManager dataSourceManager,\n+                       Supplier<DatabaseHealth> databaseHealthSupplier,\n+                       FileSystemWatcherService watcherService,\n+                       AvailabilityGuard availabilityGuard,\n+                       LogProvider logProvider)\n+  {\n+    this.storeDir = storeDir;\n+    this.storeFiles = storeFiles;\n+    this.logFiles = logFiles;\n+    this.dataSourceManager = dataSourceManager;\n+    this.databaseHealthSupplier = databaseHealthSupplier;\n+    this.availabilityGuard = availabilityGuard;\n+    this.watcherService = watcherService;\n+    this.log = logProvider.getLog(getClass());\n+    raiseAvailabilityGuard(NOT_STOPPED);\n+  }\n+\n+  @Override\n+  public void init() throws Throwable\n+  {\n+    dataSourceManager.init();\n+    watcherService.init();\n+  }\n+\n+  @Override\n+  public synchronized void start() throws Throwable\n+  {\n+    if (isAvailable())\n     {\n-        storeFiles.delete( storeDir, logFiles );\n+      return;\n     }\n-\n-    public boolean isEmpty() throws IOException\n+    storeId = readStoreIdFromDisk();\n+    log.info(\"Starting with storeId: \" + storeId);\n+\n+    dataSourceManager.start();\n+    watcherService.start();\n+\n+    dropAvailabilityGuard();\n+  }\n+\n+  @Override\n+  public void stop() throws Throwable\n+  {\n+    stopWithRequirement(NOT_STOPPED);\n+  }\n+\n+  /**\n+   * Stop database to perform a store copy. This will raise {@link AvailabilityGuard} with\n+   * a more friendly blocking requirement.\n+   *\n+   * @throws Throwable if any of the components are unable to stop.\n+   */\n+  public void stopForStoreCopy() throws Throwable\n+  {\n+    stopWithRequirement(NOT_COPYING_STORE);\n+  }\n+\n+  public boolean isAvailable()\n+  {\n+    return currentRequirement == null;\n+  }\n+\n+  @Override\n+  public void shutdown() throws Throwable\n+  {\n+    watcherService.shutdown();\n+    dataSourceManager.shutdown();\n+  }\n+\n+  public synchronized StoreId storeId()\n+  {\n+    if (isAvailable())\n     {\n-        List<File> filesToLookFor = Arrays.stream( StoreType.values() )\n-                .map( StoreType::getStoreFile )\n-                .filter( Objects::nonNull )\n-                .map( StoreFile::storeFileName )\n-                .map( name -> new File( storeDir, name ) )\n-                .collect( Collectors.toList() );\n-        return storeFiles.isEmpty( storeDir, filesToLookFor );\n-    }\n-\n-    public File storeDir()\n+      return storeId;\n+    } else\n     {\n-        return storeDir;\n+      return readStoreIdFromDisk();\n     }\n+  }\n \n-    void replaceWith( File sourceDir ) throws IOException\n+  private StoreId readStoreIdFromDisk()\n+  {\n+    try\n     {\n-        storeFiles.delete( storeDir, logFiles );\n-        storeFiles.moveTo( sourceDir, storeDir, logFiles );\n-    }\n-\n-    public NeoStoreDataSource dataSource()\n+      return storeFiles.readStoreId(storeDir);\n+    } catch (IOException e)\n     {\n-        return dataSourceManager.getDataSource();\n+      log.error(\"Failure reading store id\", e);\n+      return null;\n     }\n+  }\n \n-    /**\n-     * Called by the DataSourceManager during start.\n-     */\n-    public void registerCommitProcessDependencies( TransactionAppender appender, StorageEngine applier )\n-    {\n-        localCommit = new TransactionRepresentationCommitProcess( appender, applier );\n-    }\n+  public void panic(Throwable cause)\n+  {\n+    getDatabaseHealth().panic(cause);\n+  }\n \n-    public TransactionCommitProcess getCommitProcess()\n-    {\n-        return localCommit;\n-    }\n-\n-    private synchronized void stopWithRequirement( AvailabilityRequirement requirement ) throws Throwable\n-    {\n-        log.info( \"Stopping, reason: \" + requirement.description() );\n-        raiseAvailabilityGuard( requirement );\n-        databaseHealth = null;\n-        localCommit = null;\n-        watcherService.stop();\n-        dataSourceManager.stop();\n-    }\n+  public <EXCEPTION extends Throwable> void assertHealthy(Class<EXCEPTION> cause) throws EXCEPTION\n+  {\n+    getDatabaseHealth().assertHealthy(cause);\n+  }\n \n-    private void raiseAvailabilityGuard( AvailabilityRequirement requirement )\n+  private DatabaseHealth getDatabaseHealth()\n+  {\n+    if (databaseHealth == null)\n     {\n-        // it is possible for the local database to be created and stopped right after that to perform a store copy\n-        // in this case we need to impose new requirement and drop the old one\n-        availabilityGuard.require( requirement );\n-        if ( currentRequirement != null )\n-        {\n-            dropAvailabilityGuard();\n-        }\n-        currentRequirement = requirement;\n+      databaseHealth = databaseHealthSupplier.get();\n     }\n-\n-    private void dropAvailabilityGuard()\n+    return databaseHealth;\n+  }\n+\n+  public void delete() throws IOException\n+  {\n+    storeFiles.delete(storeDir, logFiles);\n+  }\n+\n+  public boolean isEmpty() throws IOException\n+  {\n+    List<File> filesToLookFor = Arrays.stream(StoreType.values())\n+        .map(StoreType::getStoreFile)\n+        .filter(Objects::nonNull)\n+        .map(StoreFile::storeFileName)\n+        .map(name -> new File(storeDir, name))\n+        .collect(Collectors.toList());\n+    return storeFiles.isEmpty(storeDir, filesToLookFor);\n+  }\n+\n+  public File storeDir()\n+  {\n+    return storeDir;\n+  }\n+\n+  void replaceWith(File sourceDir) throws IOException\n+  {\n+    storeFiles.delete(storeDir, logFiles);\n+    storeFiles.moveTo(sourceDir, storeDir, logFiles);\n+  }\n+\n+  public NeoStoreDataSource dataSource()\n+  {\n+    return dataSourceManager.getDataSource();\n+  }\n+\n+  /**\n+   * Called by the DataSourceManager during start.\n+   */\n+  public void registerCommitProcessDependencies(TransactionAppender appender, StorageEngine applier)\n+  {\n+    localCommit = new TransactionRepresentationCommitProcess(appender, applier);\n+  }\n+\n+  public TransactionCommitProcess getCommitProcess()\n+  {\n+    return localCommit;\n+  }\n+\n+  private synchronized void stopWithRequirement(AvailabilityRequirement requirement) throws Throwable\n+  {\n+    log.info(\"Stopping, reason: \" + requirement.description());\n+    raiseAvailabilityGuard(requirement);\n+    databaseHealth = null;\n+    localCommit = null;\n+    watcherService.stop();\n+    dataSourceManager.stop();\n+  }\n+\n+  private void raiseAvailabilityGuard(AvailabilityRequirement requirement)\n+  {\n+    // it is possible for the local database to be created and stopped right after that to perform a store copy\n+    // in this case we need to impose new requirement and drop the old one\n+    availabilityGuard.require(requirement);\n+    if (currentRequirement != null)\n     {\n-        availabilityGuard.fulfill( currentRequirement );\n-        currentRequirement = null;\n+      dropAvailabilityGuard();\n     }\n+    currentRequirement = requirement;\n+  }\n+\n+  private void dropAvailabilityGuard()\n+  {\n+    availabilityGuard.fulfill(currentRequirement);\n+    currentRequirement = null;\n+  }\n }\n",
            "diff_size": 310
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 235).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3618/LocalDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3618/LocalDatabase.java\nindex c2868651a5d..24cee2e337e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3618/LocalDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3618/LocalDatabase.java\n@@ -49,12 +49,10 @@ import static org.neo4j.kernel.AvailabilityGuard.availabilityRequirement;\n \n public class LocalDatabase implements Lifecycle\n {\n-    private static final AvailabilityRequirement NOT_STOPPED =\n-            availabilityRequirement( \"Database is stopped\" );\n-    private static final AvailabilityRequirement NOT_COPYING_STORE =\n-            availabilityRequirement( \"Database is stopped to copy store from another cluster member\" );\n+    private static final AvailabilityRequirement NOT_STOPPED = availabilityRequirement( \"Database is stopped\" );\n \n-    private final File storeDir;\n+private static final AvailabilityRequirement NOT_COPYING_STORE = availabilityRequirement( \"Database is stopped to copy store from another cluster member\" );\n+private final File storeDir;\n \n     private final StoreFiles storeFiles;\n     private final DataSourceManager dataSourceManager;\n@@ -73,8 +71,7 @@ public class LocalDatabase implements Lifecycle\n     public LocalDatabase( File storeDir,\n             StoreFiles storeFiles,\n             LogFiles logFiles,\n-            DataSourceManager dataSourceManager,\n-            Supplier<DatabaseHealth> databaseHealthSupplier,\n+            DataSourceManager dataSourceManager, Supplier<DatabaseHealth> databaseHealthSupplier,\n             FileSystemWatcherService watcherService,\n             AvailabilityGuard availabilityGuard,\n             LogProvider logProvider )\n@@ -104,10 +101,10 @@ public class LocalDatabase implements Lifecycle\n         {\n             return;\n         }\n-        storeId = readStoreIdFromDisk();\n-        log.info( \"Starting with storeId: \" + storeId );\n \n-        dataSourceManager.start();\n+storeId = readStoreIdFromDisk();\n+        log.info( \"Starting with storeId: \" + storeId );\n+dataSourceManager.start();\n         watcherService.start();\n \n         dropAvailabilityGuard();\n@@ -183,7 +180,8 @@ public class LocalDatabase implements Lifecycle\n         {\n             databaseHealth = databaseHealthSupplier.get();\n         }\n-        return databaseHealth;\n+\n+return databaseHealth;\n     }\n \n     public void delete() throws IOException\n@@ -193,13 +191,8 @@ public class LocalDatabase implements Lifecycle\n \n     public boolean isEmpty() throws IOException\n     {\n-        List<File> filesToLookFor = Arrays.stream( StoreType.values() )\n-                .map( StoreType::getStoreFile )\n-                .filter( Objects::nonNull )\n-                .map( StoreFile::storeFileName )\n-                .map( name -> new File( storeDir, name ) )\n-                .collect( Collectors.toList() );\n-        return storeFiles.isEmpty( storeDir, filesToLookFor );\n+        List<File> filesToLookFor = Arrays.stream( StoreType.values() ).map( StoreType::getStoreFile ).filter( Objects::nonNull ).map( StoreFile::storeFileName ).map( name -> new File( storeDir, name ) ).collect( Collectors.toList() );\n+return storeFiles.isEmpty( storeDir, filesToLookFor );\n     }\n \n     public File storeDir()\n@@ -250,7 +243,8 @@ public class LocalDatabase implements Lifecycle\n         {\n             dropAvailabilityGuard();\n         }\n-        currentRequirement = requirement;\n+\n+currentRequirement = requirement;\n     }\n \n     private void dropAvailabilityGuard()\n@@ -258,4 +252,4 @@ public class LocalDatabase implements Lifecycle\n         availabilityGuard.fulfill( currentRequirement );\n         currentRequirement = null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}