{
    "project_name": "graphfoundation-ongdb",
    "error_id": "903",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/903/ReentrantLockService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/903/ReentrantLockService.java\nindex 86773756992..dd1197b9c34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/903/ReentrantLockService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/903/ReentrantLockService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking;\n \n import java.util.concurrent.ConcurrentHashMap;\n@@ -34,156 +35,156 @@ import static java.util.concurrent.locks.LockSupport.unpark;\n  */\n public final class ReentrantLockService extends AbstractLockService<ReentrantLockService.OwnerQueueElement<Thread>>\n {\n-    private final ConcurrentMap<LockedEntity, OwnerQueueElement<Thread>> locks = new ConcurrentHashMap<>();\n-    private final long maxParkNanos;\n-\n-    int lockCount()\n+  private final ConcurrentMap<LockedEntity, OwnerQueueElement<Thread>> locks = new ConcurrentHashMap<>();\n+  private final long maxParkNanos;\n+\n+  int lockCount()\n+  {\n+    return locks.size();\n+  }\n+\n+  public ReentrantLockService()\n+  {\n+    this(1, TimeUnit.MILLISECONDS);\n+  }\n+\n+  public ReentrantLockService(long maxParkTime, TimeUnit unit)\n+  {\n+    this.maxParkNanos = unit.toNanos(maxParkTime);\n+  }\n+\n+  @Override\n+  protected OwnerQueueElement<Thread> acquire(LockedEntity key)\n+  {\n+    OwnerQueueElement<Thread> suggestion = new OwnerQueueElement<>(currentThread());\n+    for (; ; )\n     {\n-        return locks.size();\n+      OwnerQueueElement<Thread> owner = locks.putIfAbsent(key, suggestion);\n+      if (owner == null)\n+      { // Our suggestion was accepted, we got the lock\n+        return suggestion;\n+      }\n+\n+      Thread other = owner.owner;\n+      if (other == currentThread())\n+      { // the lock has been handed to us (or we are re-entering), claim it!\n+        owner.count++;\n+        return owner;\n+      }\n+\n+      // Make sure that we only add to the queue once, and if that addition fails (because the queue is dead\n+      // - i.e. has been removed from the map), retry form the top of the loop immediately.\n+      if (suggestion.head == suggestion) // true if enqueue() has not been invoked (i.e. first time around)\n+      { // otherwise it has already been enqueued, and we are in a spurious (or timed) wake up\n+        if (!owner.enqueue(suggestion))\n+        {\n+          continue; // the lock has already been released, the queue is dead, retry!\n+        }\n+      }\n+      parkNanos(key, maxParkNanos);\n     }\n+  }\n \n-    public ReentrantLockService()\n+  @Override\n+  @SuppressWarnings(\"SynchronizationOnLocalVariableOrMethodParameter\")\n+  protected void release(LockedEntity key, OwnerQueueElement<Thread> ownerQueueElement)\n+  {\n+    if (0 == --ownerQueueElement.count)\n     {\n-        this( 1, TimeUnit.MILLISECONDS );\n+      Thread nextThread;\n+      synchronized (ownerQueueElement)\n+      {\n+        nextThread = ownerQueueElement.dequeue();\n+        if (nextThread == currentThread())\n+        { // no more threads in the queue, remove this list\n+          locks.remove(key, ownerQueueElement); // done under synchronization to honour definition of 'dead'\n+          nextThread = null; // to make unpark() a no-op.\n+        }\n+      }\n+      unpark(nextThread);\n     }\n-\n-    public ReentrantLockService( long maxParkTime, TimeUnit unit )\n+  }\n+\n+  /**\n+   * Element in a queue of owners. Contains two fields {@link #head} and {@link #tail} which form the queue.\n+   * <p>\n+   * Example queue with 3 members:\n+   *\n+   * <pre>\n+   * locks -> [H]--+ <+\n+   *          [T]  |  |\n+   *          ^|   V  |\n+   *          ||  [H]-+\n+   *          ||  [T] ^\n+   *          ||   |  |\n+   *          ||   V  |\n+   *          |+->[H]-+\n+   *          +---[T]\n+   * </pre>\n+   *\n+   * @param <OWNER> Type of the object that owns (or wishes to own) the lock.\n+   *                In practice this is always {@link Thread}, only a parameter for testing purposes.\n+   */\n+  static final class OwnerQueueElement<OWNER>\n+  {\n+    volatile OWNER owner;\n+    int count = 1; // does not need to be volatile, only updated by the owning thread.\n+\n+    OwnerQueueElement(OWNER owner)\n     {\n-        this.maxParkNanos = unit.toNanos( maxParkTime );\n+      this.owner = owner;\n     }\n \n-    @Override\n-    protected OwnerQueueElement<Thread> acquire( LockedEntity key )\n+    /**\n+     * In the first element, head will point to the next waiting element, and tail is where we enqueue new elements.\n+     * In the waiting elements, head will point to the first element, and tail to the next element.\n+     */\n+    private OwnerQueueElement<OWNER> head = this;\n+    private OwnerQueueElement<OWNER> tail = this;\n+\n+    /**\n+     * Return true if the item was enqueued, or false if this LockOwner is dead.\n+     * A dead LockOwner is no longer reachable from the map, and so no longer participates in the lock.\n+     */\n+    synchronized boolean enqueue(OwnerQueueElement<OWNER> last)\n     {\n-        OwnerQueueElement<Thread> suggestion = new OwnerQueueElement<>( currentThread() );\n-        for ( ; ; )\n-        {\n-            OwnerQueueElement<Thread> owner = locks.putIfAbsent( key, suggestion );\n-            if ( owner == null )\n-            { // Our suggestion was accepted, we got the lock\n-                return suggestion;\n-            }\n-\n-            Thread other = owner.owner;\n-            if ( other == currentThread() )\n-            { // the lock has been handed to us (or we are re-entering), claim it!\n-                owner.count++;\n-                return owner;\n-            }\n-\n-            // Make sure that we only add to the queue once, and if that addition fails (because the queue is dead\n-            // - i.e. has been removed from the map), retry form the top of the loop immediately.\n-            if ( suggestion.head == suggestion ) // true if enqueue() has not been invoked (i.e. first time around)\n-            { // otherwise it has already been enqueued, and we are in a spurious (or timed) wake up\n-                if ( !owner.enqueue( suggestion ) )\n-                {\n-                    continue; // the lock has already been released, the queue is dead, retry!\n-                }\n-            }\n-            parkNanos( key, maxParkNanos );\n-        }\n+      if (owner == null)\n+      {\n+        return false; // don't enqueue into a dead queue\n+      }\n+      last.head = this;\n+      last.tail = this;\n+      tail.tail = last;\n+      this.tail = last;\n+      if (head == this)\n+      {\n+        head = last;\n+      }\n+      return true;\n     }\n \n-    @Override\n-    @SuppressWarnings( \"SynchronizationOnLocalVariableOrMethodParameter\" )\n-    protected void release( LockedEntity key, OwnerQueueElement<Thread> ownerQueueElement )\n+    synchronized OWNER dequeue()\n     {\n-        if ( 0 == --ownerQueueElement.count )\n-        {\n-            Thread nextThread;\n-            synchronized ( ownerQueueElement )\n-            {\n-                nextThread = ownerQueueElement.dequeue();\n-                if ( nextThread == currentThread() )\n-                { // no more threads in the queue, remove this list\n-                    locks.remove( key, ownerQueueElement ); // done under synchronization to honour definition of 'dead'\n-                    nextThread = null; // to make unpark() a no-op.\n-                }\n-            }\n-            unpark( nextThread );\n-        }\n+      OwnerQueueElement<OWNER> first = this.head;\n+      (this.head = first.tail).head = this;\n+      first.tail = this;\n+      if (this.head == this)\n+      {\n+        this.tail = this; // don't leave junk references around!\n+      }\n+      try\n+      {\n+        return this.owner = first.owner;\n+      } finally\n+      {\n+        first.owner = null; // mark 'first' as dead.\n+      }\n     }\n \n-    /**\n-     * Element in a queue of owners. Contains two fields {@link #head} and {@link #tail} which form the queue.\n-     *\n-     * Example queue with 3 members:\n-     *\n-     * <pre>\n-     * locks -> [H]--+ <+\n-     *          [T]  |  |\n-     *          ^|   V  |\n-     *          ||  [H]-+\n-     *          ||  [T] ^\n-     *          ||   |  |\n-     *          ||   V  |\n-     *          |+->[H]-+\n-     *          +---[T]\n-     * </pre>\n-     * @param <OWNER> Type of the object that owns (or wishes to own) the lock.\n-     *               In practice this is always {@link Thread}, only a parameter for testing purposes.\n-     */\n-    static final class OwnerQueueElement<OWNER>\n+    @Override\n+    public String toString()\n     {\n-        volatile OWNER owner;\n-        int count = 1; // does not need to be volatile, only updated by the owning thread.\n-\n-        OwnerQueueElement( OWNER owner )\n-        {\n-            this.owner = owner;\n-        }\n-\n-        /**\n-         * In the first element, head will point to the next waiting element, and tail is where we enqueue new elements.\n-         * In the waiting elements, head will point to the first element, and tail to the next element.\n-         */\n-        private OwnerQueueElement<OWNER> head = this;\n-        private OwnerQueueElement<OWNER> tail = this;\n-\n-        /**\n-         * Return true if the item was enqueued, or false if this LockOwner is dead.\n-         * A dead LockOwner is no longer reachable from the map, and so no longer participates in the lock.\n-         */\n-        synchronized boolean enqueue( OwnerQueueElement<OWNER> last )\n-        {\n-            if ( owner == null )\n-            {\n-                return false; // don't enqueue into a dead queue\n-            }\n-            last.head = this;\n-            last.tail = this;\n-            tail.tail = last;\n-            this.tail = last;\n-            if ( head == this )\n-            {\n-                head = last;\n-            }\n-            return true;\n-        }\n-\n-        synchronized OWNER dequeue()\n-        {\n-            OwnerQueueElement<OWNER> first = this.head;\n-            (this.head = first.tail).head = this;\n-            first.tail = this;\n-            if ( this.head == this )\n-            {\n-                this.tail = this; // don't leave junk references around!\n-            }\n-            try\n-            {\n-                return this.owner = first.owner;\n-            }\n-            finally\n-            {\n-                first.owner = null; // mark 'first' as dead.\n-            }\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"%s*%s\", count, owner );\n-        }\n+      return String.format(\"%s*%s\", count, owner);\n     }\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/903/ReentrantLockService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/903/ReentrantLockService.java\nindex 86773756992..9112b564653 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/903/ReentrantLockService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/903/ReentrantLockService.java\n@@ -80,7 +80,8 @@ public final class ReentrantLockService extends AbstractLockService<ReentrantLoc\n                     continue; // the lock has already been released, the queue is dead, retry!\n                 }\n             }\n-            parkNanos( key, maxParkNanos );\n+\n+parkNanos( key, maxParkNanos );\n         }\n     }\n \n@@ -100,7 +101,8 @@ public final class ReentrantLockService extends AbstractLockService<ReentrantLoc\n                     nextThread = null; // to make unpark() a no-op.\n                 }\n             }\n-            unpark( nextThread );\n+\n+unpark( nextThread );\n         }\n     }\n \n@@ -164,13 +166,14 @@ public final class ReentrantLockService extends AbstractLockService<ReentrantLoc\n         synchronized OWNER dequeue()\n         {\n             OwnerQueueElement<OWNER> first = this.head;\n-            (this.head = first.tail).head = this;\n+            ( this.head = first.tail).head = this;\n             first.tail = this;\n             if ( this.head == this )\n             {\n                 this.tail = this; // don't leave junk references around!\n             }\n-            try\n+\n+try\n             {\n                 return this.owner = first.owner;\n             }\n@@ -186,4 +189,4 @@ public final class ReentrantLockService extends AbstractLockService<ReentrantLoc\n             return String.format( \"%s*%s\", count, owner );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}