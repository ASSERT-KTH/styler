{
    "project_name": "delight-im-NationSoccer",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "91",
                "column": "70",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t@Override\n\tpublic void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>)pTextureStateListener);\n\t}\n\n\t@Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/8/TextureAtlas.java\nindex e16f9b42138..8068d21a199 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/8/TextureAtlas.java\n@@ -88,7 +88,7 @@ public abstract class TextureAtlas<T extends ITextureAtlasSource> extends Textur\n \t@Deprecated\n \t@Override\n \tpublic void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n-\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>)pTextureStateListener);\n+\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>) pTextureStateListener);\n \t}\n \n \t@Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/8/TextureAtlas.java\nindex e16f9b42138..e315969529a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/8/TextureAtlas.java\n@@ -16,160 +16,201 @@ import org.andengine.opengl.texture.atlas.source.ITextureAtlasSource;\n  * @author Nicolas Gramlich\n  * @since 14:22:55 - 14.07.2011\n  */\n-public abstract class TextureAtlas<T extends ITextureAtlasSource> extends Texture implements ITextureAtlas<T> {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprotected final int mWidth;\n-\tprotected final int mHeight;\n-\n-\tprotected final ArrayList<T> mTextureAtlasSources = new ArrayList<T>();\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic TextureAtlas(final TextureManager pTextureManager, final int pWidth, final int pHeight, final PixelFormat pPixelFormat, final TextureOptions pTextureOptions, final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n-\t\tsuper(pTextureManager, pPixelFormat, pTextureOptions, pTextureAtlasStateListener);\n-\n-\t\tthis.mWidth = pWidth;\n-\t\tthis.mHeight = pHeight;\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t@Override\n-\tpublic int getWidth() {\n-\t\treturn this.mWidth;\n-\t}\n-\n-\t@Override\n-\tpublic int getHeight() {\n-\t\treturn this.mHeight;\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic boolean hasTextureStateListener() {\n-\t\treturn super.hasTextureStateListener();\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasTextureAtlasStateListener() {\n-\t\treturn super.hasTextureStateListener();\n-\t}\n-\n-\t/**\n-\t * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n-\t */\n-\t@Deprecated\n-\t@Override\n-\tpublic ITextureAtlasStateListener<T> getTextureStateListener() {\n-\t\treturn this.getTextureAtlasStateListener();\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic ITextureAtlasStateListener<T> getTextureAtlasStateListener() {\n-\t\treturn (ITextureAtlasStateListener<T>) super.getTextureStateListener();\n-\t}\n-\n-\t/**\n-\t * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Deprecated\n-\t@Override\n-\tpublic void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n-\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>)pTextureStateListener);\n-\t}\n-\n-\t@Override\n-\tpublic void setTextureAtlasStateListener(final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n-\t\tsuper.setTextureStateListener(pTextureAtlasStateListener);\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t@Override\n-\tpublic void addTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) throws IllegalArgumentException {\n-\t\tthis.checkTextureAtlasSourcePosition(pTextureAtlasSource, pTextureX, pTextureY);\n-\t\tpTextureAtlasSource.setTextureX(pTextureX);\n-\t\tpTextureAtlasSource.setTextureY(pTextureY);\n-\t\tthis.mTextureAtlasSources.add(pTextureAtlasSource);\n-\t\tthis.mUpdateOnHardwareNeeded = true;\n-\t}\n-\n-\t@Override\n-\tpublic void addTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY, final int pTextureAtlasSourcePadding) throws IllegalArgumentException {\n-\t\tthis.addTextureAtlasSource(pTextureAtlasSource, pTextureX, pTextureY);\n-\n-\t\tif (pTextureAtlasSourcePadding > 0) {\n-\t\t\t/* Left padding. */\n-\t\t\tif (pTextureX >= pTextureAtlasSourcePadding) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX - pTextureAtlasSourcePadding, pTextureY, pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureHeight());\n-\t\t\t}\n-\n-\t\t\t/* Top padding. */\n-\t\t\tif (pTextureY >= pTextureAtlasSourcePadding) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX, pTextureY - pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureWidth(), pTextureAtlasSourcePadding);\n-\t\t\t}\n-\n-\t\t\t/* Right padding. */\n-\t\t\tif (pTextureX + pTextureAtlasSource.getTextureWidth() - 1 + pTextureAtlasSourcePadding <= this.getWidth()) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX + pTextureAtlasSource.getTextureWidth(), pTextureY, pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureHeight());\n-\t\t\t}\n-\n-\t\t\t/* Bottom padding. */\n-\t\t\tif (pTextureY + pTextureAtlasSource.getTextureHeight() - 1 + pTextureAtlasSourcePadding <= this.getHeight()) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX, pTextureY + pTextureAtlasSource.getTextureHeight(), pTextureAtlasSource.getTextureWidth(), pTextureAtlasSourcePadding);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) {\n-\t\tfinal ArrayList<T> textureSources = this.mTextureAtlasSources;\n-\t\tfor (int i = textureSources.size() - 1; i >= 0; i--) {\n-\t\t\tfinal T textureSource = textureSources.get(i);\n-\t\t\tif (textureSource == pTextureAtlasSource && textureSource.getTextureX() == pTextureX && textureSource.getTextureY() == pTextureY) {\n-\t\t\t\ttextureSources.remove(i);\n-\t\t\t\tthis.mUpdateOnHardwareNeeded = true;\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void clearTextureAtlasSources() {\n-\t\tthis.mTextureAtlasSources.clear();\n-\t\tthis.mUpdateOnHardwareNeeded = true;\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tprivate void checkTextureAtlasSourcePosition(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) throws IllegalArgumentException {\n-\t\tif (pTextureX < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Illegal negative pTextureX supplied: '\" + pTextureX + \"'\");\n-\t\t} else if (pTextureY < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Illegal negative pTextureY supplied: '\" + pTextureY + \"'\");\n-\t\t} else if (pTextureX + pTextureAtlasSource.getTextureWidth() > this.getWidth() || pTextureY + pTextureAtlasSource.getTextureHeight() > this.getHeight()) {\n-\t\t\tthrow new IllegalArgumentException(\"Supplied pTextureAtlasSource must not exceed bounds of Texture.\");\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n+public abstract class TextureAtlas<T extends ITextureAtlasSource>\n+    extends Texture implements ITextureAtlas<T> {\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+    protected final int mWidth;\n+    protected final int mHeight;\n+\n+    protected final ArrayList<T> mTextureAtlasSources = new ArrayList<T>();\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    public TextureAtlas(final TextureManager pTextureManager, final int pWidth,\n+                        final int pHeight, final PixelFormat pPixelFormat,\n+                        final TextureOptions pTextureOptions,\n+                        final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n+        super(pTextureManager, pPixelFormat, pTextureOptions,\n+            pTextureAtlasStateListener);\n+\n+        this.mWidth = pWidth;\n+        this.mHeight = pHeight;\n+    }\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    @Override\n+    public int getWidth() {\n+        return this.mWidth;\n+    }\n+\n+    @Override\n+    public int getHeight() {\n+        return this.mHeight;\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public boolean hasTextureStateListener() {\n+        return super.hasTextureStateListener();\n+    }\n+\n+    @Override\n+    public boolean hasTextureAtlasStateListener() {\n+        return super.hasTextureStateListener();\n+    }\n+\n+    /**\n+     * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n+     */\n+    @Deprecated\n+    @Override\n+    public ITextureAtlasStateListener<T> getTextureStateListener() {\n+        return this.getTextureAtlasStateListener();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public ITextureAtlasStateListener<T> getTextureAtlasStateListener() {\n+        return (ITextureAtlasStateListener<T>) super.getTextureStateListener();\n+    }\n+\n+    /**\n+     * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Deprecated\n+    @Override\n+    public void setTextureStateListener(\n+        final ITextureStateListener pTextureStateListener) {\n+        super.setTextureStateListener(\n+            (ITextureAtlasStateListener<T>) pTextureStateListener);\n+    }\n+\n+    @Override\n+    public void setTextureAtlasStateListener(\n+        final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n+        super.setTextureStateListener(pTextureAtlasStateListener);\n+    }\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    @Override\n+    public void addTextureAtlasSource(final T pTextureAtlasSource,\n+                                      final int pTextureX, final int pTextureY)\n+        throws IllegalArgumentException {\n+        this.checkTextureAtlasSourcePosition(pTextureAtlasSource, pTextureX,\n+            pTextureY);\n+        pTextureAtlasSource.setTextureX(pTextureX);\n+        pTextureAtlasSource.setTextureY(pTextureY);\n+        this.mTextureAtlasSources.add(pTextureAtlasSource);\n+        this.mUpdateOnHardwareNeeded = true;\n+    }\n+\n+    @Override\n+    public void addTextureAtlasSource(final T pTextureAtlasSource,\n+                                      final int pTextureX, final int pTextureY,\n+                                      final int pTextureAtlasSourcePadding)\n+        throws IllegalArgumentException {\n+        this.addTextureAtlasSource(pTextureAtlasSource, pTextureX, pTextureY);\n+\n+        if (pTextureAtlasSourcePadding > 0) {\n+            /* Left padding. */\n+            if (pTextureX >= pTextureAtlasSourcePadding) {\n+                this.addEmptyTextureAtlasSource(\n+                    pTextureX - pTextureAtlasSourcePadding, pTextureY,\n+                    pTextureAtlasSourcePadding,\n+                    pTextureAtlasSource.getTextureHeight());\n+            }\n+\n+            /* Top padding. */\n+            if (pTextureY >= pTextureAtlasSourcePadding) {\n+                this.addEmptyTextureAtlasSource(pTextureX,\n+                    pTextureY - pTextureAtlasSourcePadding,\n+                    pTextureAtlasSource.getTextureWidth(),\n+                    pTextureAtlasSourcePadding);\n+            }\n+\n+            /* Right padding. */\n+            if (pTextureX + pTextureAtlasSource.getTextureWidth() - 1 +\n+                pTextureAtlasSourcePadding <= this.getWidth()) {\n+                this.addEmptyTextureAtlasSource(\n+                    pTextureX + pTextureAtlasSource.getTextureWidth(),\n+                    pTextureY, pTextureAtlasSourcePadding,\n+                    pTextureAtlasSource.getTextureHeight());\n+            }\n+\n+            /* Bottom padding. */\n+            if (pTextureY + pTextureAtlasSource.getTextureHeight() - 1 +\n+                pTextureAtlasSourcePadding <= this.getHeight()) {\n+                this.addEmptyTextureAtlasSource(pTextureX,\n+                    pTextureY + pTextureAtlasSource.getTextureHeight(),\n+                    pTextureAtlasSource.getTextureWidth(),\n+                    pTextureAtlasSourcePadding);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeTextureAtlasSource(final T pTextureAtlasSource,\n+                                         final int pTextureX,\n+                                         final int pTextureY) {\n+        final ArrayList<T> textureSources = this.mTextureAtlasSources;\n+        for (int i = textureSources.size() - 1; i >= 0; i--) {\n+            final T textureSource = textureSources.get(i);\n+            if (textureSource == pTextureAtlasSource &&\n+                textureSource.getTextureX() == pTextureX &&\n+                textureSource.getTextureY() == pTextureY) {\n+                textureSources.remove(i);\n+                this.mUpdateOnHardwareNeeded = true;\n+                return;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void clearTextureAtlasSources() {\n+        this.mTextureAtlasSources.clear();\n+        this.mUpdateOnHardwareNeeded = true;\n+    }\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+    private void checkTextureAtlasSourcePosition(final T pTextureAtlasSource,\n+                                                 final int pTextureX,\n+                                                 final int pTextureY)\n+        throws IllegalArgumentException {\n+        if (pTextureX < 0) {\n+            throw new IllegalArgumentException(\n+                \"Illegal negative pTextureX supplied: '\" + pTextureX + \"'\");\n+        } else if (pTextureY < 0) {\n+            throw new IllegalArgumentException(\n+                \"Illegal negative pTextureY supplied: '\" + pTextureY + \"'\");\n+        } else if (pTextureX + pTextureAtlasSource.getTextureWidth() >\n+            this.getWidth() ||\n+            pTextureY + pTextureAtlasSource.getTextureHeight() >\n+                this.getHeight()) {\n+            throw new IllegalArgumentException(\n+                \"Supplied pTextureAtlasSource must not exceed bounds of Texture.\");\n+        }\n+    }\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n }\n",
            "diff_size": 197
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "91",
                    "column": "70",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/8/TextureAtlas.java\nindex e16f9b42138..a0e0726a1ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/8/TextureAtlas.java\n@@ -172,4 +172,4 @@ public abstract class TextureAtlas<T extends ITextureAtlasSource> extends Textur\n \t// ===========================================================\n \t// Inner and Anonymous Classes\n \t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/8/TextureAtlas.java\nindex e16f9b42138..f2d9319ca0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/8/TextureAtlas.java\n@@ -1,7 +1,6 @@\n package org.andengine.opengl.texture.atlas;\n \n import java.util.ArrayList;\n-\n import org.andengine.opengl.texture.ITextureStateListener;\n import org.andengine.opengl.texture.PixelFormat;\n import org.andengine.opengl.texture.Texture;\n@@ -16,160 +15,180 @@ import org.andengine.opengl.texture.atlas.source.ITextureAtlasSource;\n  * @author Nicolas Gramlich\n  * @since 14:22:55 - 14.07.2011\n  */\n+\n+\n public abstract class TextureAtlas<T extends ITextureAtlasSource> extends Texture implements ITextureAtlas<T> {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprotected final int mWidth;\n-\tprotected final int mHeight;\n-\n-\tprotected final ArrayList<T> mTextureAtlasSources = new ArrayList<T>();\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic TextureAtlas(final TextureManager pTextureManager, final int pWidth, final int pHeight, final PixelFormat pPixelFormat, final TextureOptions pTextureOptions, final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n-\t\tsuper(pTextureManager, pPixelFormat, pTextureOptions, pTextureAtlasStateListener);\n-\n-\t\tthis.mWidth = pWidth;\n-\t\tthis.mHeight = pHeight;\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t@Override\n-\tpublic int getWidth() {\n-\t\treturn this.mWidth;\n-\t}\n-\n-\t@Override\n-\tpublic int getHeight() {\n-\t\treturn this.mHeight;\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic boolean hasTextureStateListener() {\n-\t\treturn super.hasTextureStateListener();\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasTextureAtlasStateListener() {\n-\t\treturn super.hasTextureStateListener();\n-\t}\n-\n-\t/**\n-\t * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n-\t */\n-\t@Deprecated\n-\t@Override\n-\tpublic ITextureAtlasStateListener<T> getTextureStateListener() {\n-\t\treturn this.getTextureAtlasStateListener();\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic ITextureAtlasStateListener<T> getTextureAtlasStateListener() {\n-\t\treturn (ITextureAtlasStateListener<T>) super.getTextureStateListener();\n-\t}\n-\n-\t/**\n-\t * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Deprecated\n-\t@Override\n-\tpublic void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n-\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>)pTextureStateListener);\n-\t}\n-\n-\t@Override\n-\tpublic void setTextureAtlasStateListener(final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n-\t\tsuper.setTextureStateListener(pTextureAtlasStateListener);\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t@Override\n-\tpublic void addTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) throws IllegalArgumentException {\n-\t\tthis.checkTextureAtlasSourcePosition(pTextureAtlasSource, pTextureX, pTextureY);\n-\t\tpTextureAtlasSource.setTextureX(pTextureX);\n-\t\tpTextureAtlasSource.setTextureY(pTextureY);\n-\t\tthis.mTextureAtlasSources.add(pTextureAtlasSource);\n-\t\tthis.mUpdateOnHardwareNeeded = true;\n-\t}\n-\n-\t@Override\n-\tpublic void addTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY, final int pTextureAtlasSourcePadding) throws IllegalArgumentException {\n-\t\tthis.addTextureAtlasSource(pTextureAtlasSource, pTextureX, pTextureY);\n-\n-\t\tif (pTextureAtlasSourcePadding > 0) {\n-\t\t\t/* Left padding. */\n-\t\t\tif (pTextureX >= pTextureAtlasSourcePadding) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX - pTextureAtlasSourcePadding, pTextureY, pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureHeight());\n-\t\t\t}\n-\n-\t\t\t/* Top padding. */\n-\t\t\tif (pTextureY >= pTextureAtlasSourcePadding) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX, pTextureY - pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureWidth(), pTextureAtlasSourcePadding);\n-\t\t\t}\n-\n-\t\t\t/* Right padding. */\n-\t\t\tif (pTextureX + pTextureAtlasSource.getTextureWidth() - 1 + pTextureAtlasSourcePadding <= this.getWidth()) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX + pTextureAtlasSource.getTextureWidth(), pTextureY, pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureHeight());\n-\t\t\t}\n-\n-\t\t\t/* Bottom padding. */\n-\t\t\tif (pTextureY + pTextureAtlasSource.getTextureHeight() - 1 + pTextureAtlasSourcePadding <= this.getHeight()) {\n-\t\t\t\tthis.addEmptyTextureAtlasSource(pTextureX, pTextureY + pTextureAtlasSource.getTextureHeight(), pTextureAtlasSource.getTextureWidth(), pTextureAtlasSourcePadding);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) {\n-\t\tfinal ArrayList<T> textureSources = this.mTextureAtlasSources;\n-\t\tfor (int i = textureSources.size() - 1; i >= 0; i--) {\n-\t\t\tfinal T textureSource = textureSources.get(i);\n-\t\t\tif (textureSource == pTextureAtlasSource && textureSource.getTextureX() == pTextureX && textureSource.getTextureY() == pTextureY) {\n-\t\t\t\ttextureSources.remove(i);\n-\t\t\t\tthis.mUpdateOnHardwareNeeded = true;\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void clearTextureAtlasSources() {\n-\t\tthis.mTextureAtlasSources.clear();\n-\t\tthis.mUpdateOnHardwareNeeded = true;\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tprivate void checkTextureAtlasSourcePosition(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) throws IllegalArgumentException {\n-\t\tif (pTextureX < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Illegal negative pTextureX supplied: '\" + pTextureX + \"'\");\n-\t\t} else if (pTextureY < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Illegal negative pTextureY supplied: '\" + pTextureY + \"'\");\n-\t\t} else if (pTextureX + pTextureAtlasSource.getTextureWidth() > this.getWidth() || pTextureY + pTextureAtlasSource.getTextureHeight() > this.getHeight()) {\n-\t\t\tthrow new IllegalArgumentException(\"Supplied pTextureAtlasSource must not exceed bounds of Texture.\");\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n-}\n+ // ===========================================================\n+ // Constants\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Fields\n+ // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+ protected final int mWidth;\n+ protected final int mHeight;\n+ protected final ArrayList<T> mTextureAtlasSources = new ArrayList<T>();\n+\n+ // ===========================================================\n+ // Constructors\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ public TextureAtlas(final TextureManager pTextureManager, final int pWidth, final int pHeight, final PixelFormat pPixelFormat, final TextureOptions pTextureOptions, final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n+  super(pTextureManager,\n+   pPixelFormat,\n+    pTextureOptions,\n+     pTextureAtlasStateListener);\n+\n+  this.mWidth = pWidth;\n+  this.mHeight = pHeight;\n+ }\n+\n+ // ===========================================================\n+ // Getter & Setter\n+ // ===========================================================\n+\n+ @Override\n+ public int getWidth() {\n+  return this.mWidth;\n+ }\n+\n+ @Override\n+ public int getHeight() {\n+  return this.mHeight;\n+ }\n+\n+ @Deprecated\n+ @Override\n+ public boolean hasTextureStateListener() {\n+  return super.hasTextureStateListener();\n+ }\n+\n+ @Override\n+ public boolean hasTextureAtlasStateListener() {\n+  return super.hasTextureStateListener();\n+ }\n+\n+ /**\n+  * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n+  */\n+\n+ @Deprecated\n+ @Override\n+ public ITextureAtlasStateListener<T> getTextureStateListener() {\n+  return this.getTextureAtlasStateListener();\n+ }\n+\n+ @SuppressWarnings(\"unchecked\")\n+ @Override\n+ public ITextureAtlasStateListener<T> getTextureAtlasStateListener() {\n+  return (ITextureAtlasStateListener<T>) super.getTextureStateListener();\n+ }\n+\n+ /**\n+  * @see {@link ITextureAtlas#setTextureStateListener(ITextureAtlasStateListener)}\n+  */\n+\n+ @SuppressWarnings(\"unchecked\")\n+ @Deprecated\n+ @Override\n+ public void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n+  super.setTextureStateListener((ITextureAtlasStateListener<T>) pTextureStateListener);\n+ }\n+\n+ @Override\n+ public void setTextureAtlasStateListener(final ITextureAtlasStateListener<T> pTextureAtlasStateListener) {\n+  super.setTextureStateListener(pTextureAtlasStateListener);\n+ }\n+\n+ // ===========================================================\n+ // Methods for/from SuperClass/Interfaces\n+ // ===========================================================\n+\n+ @Override\n+ public void addTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) throws IllegalArgumentException {\n+  this.checkTextureAtlasSourcePosition(pTextureAtlasSource, pTextureX, pTextureY);\n+  pTextureAtlasSource.setTextureX(pTextureX);\n+  pTextureAtlasSource.setTextureY(pTextureY);\n+  this.mTextureAtlasSources.add(pTextureAtlasSource);\n+  this.mUpdateOnHardwareNeeded = true;\n+ }\n+\n+ @Override\n+ public void addTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY, final int pTextureAtlasSourcePadding) throws IllegalArgumentException {\n+  this.addTextureAtlasSource(pTextureAtlasSource, pTextureX, pTextureY);\n+  if (pTextureAtlasSourcePadding > 0) {\n+   /* Left padding. */\n+      if (pTextureX >= pTextureAtlasSourcePadding) {\n+       this.addEmptyTextureAtlasSource(pTextureX - pTextureAtlasSourcePadding, pTextureY, pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureHeight());\n+      }\n+\n+   /* Top padding. */\n+      if (pTextureY >= pTextureAtlasSourcePadding) {\n+       this.addEmptyTextureAtlasSource(pTextureX, pTextureY - pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureWidth(), pTextureAtlasSourcePadding);\n+      }\n+\n+   /* Right padding. */\n+      if (pTextureX + pTextureAtlasSource.getTextureWidth() - 1 + pTextureAtlasSourcePadding <= this.getWidth()) {\n+       this.addEmptyTextureAtlasSource(pTextureX + pTextureAtlasSource.getTextureWidth(), pTextureY, pTextureAtlasSourcePadding, pTextureAtlasSource.getTextureHeight());\n+      }\n+\n+   /* Bottom padding. */\n+      if (pTextureY + pTextureAtlasSource.getTextureHeight() - 1 + pTextureAtlasSourcePadding <= this.getHeight()) {\n+       this.addEmptyTextureAtlasSource(pTextureX, pTextureY + pTextureAtlasSource.getTextureHeight(), pTextureAtlasSource.getTextureWidth(), pTextureAtlasSourcePadding);\n+      }\n+  }\n+ }\n+\n+ @Override\n+ public void removeTextureAtlasSource(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) {\n+  final ArrayList<T> textureSources = this.mTextureAtlasSources;\n+  for (int i = textureSources.size() - 1; i >= 0; i--) {\n+   final T textureSource = textureSources.get(i);\n+   if (textureSource == pTextureAtlasSource && textureSource.getTextureX() == pTextureX && textureSource.getTextureY() == pTextureY) {\n+       textureSources.remove(i);\n+       this.mUpdateOnHardwareNeeded = true;\n+       return;\n+   }\n+  }\n+ }\n+\n+ @Override\n+ public void clearTextureAtlasSources() {\n+  this.mTextureAtlasSources.clear();\n+  this.mUpdateOnHardwareNeeded = true;\n+ }\n+\n+ // ===========================================================\n+ // Methods\n+ // ===========================================================\n+\n+ private void checkTextureAtlasSourcePosition(final T pTextureAtlasSource, final int pTextureX, final int pTextureY) throws IllegalArgumentException {\n+  if (pTextureX < 0) {\n+   throw new IllegalArgumentException(\"Illegal negative pTextureX supplied: '\" + pTextureX + \"'\");\n+  } else if (pTextureY < 0) {\n+   throw new IllegalArgumentException(\"Illegal negative pTextureY supplied: '\" + pTextureY + \"'\");\n+  } else if (pTextureX + pTextureAtlasSource.getTextureWidth() > this.getWidth() || pTextureY + pTextureAtlasSource.getTextureHeight() > this.getHeight()) {\n+          throw new IllegalArgumentException(\"Supplied pTextureAtlasSource must not exceed bounds of Texture.\");\n+         }\n+ }\n+\n+ // ===========================================================\n+ // Inner and Anonymous Classes\n+ // ===========================================================\n+\n+\n+\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 177
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/8/TextureAtlas.java\nindex e16f9b42138..8068d21a199 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/8/TextureAtlas.java\n@@ -88,7 +88,7 @@ public abstract class TextureAtlas<T extends ITextureAtlasSource> extends Textur\n \t@Deprecated\n \t@Override\n \tpublic void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n-\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>)pTextureStateListener);\n+\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>) pTextureStateListener);\n \t}\n \n \t@Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/8/TextureAtlas.java\nindex e16f9b42138..8068d21a199 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/8/TextureAtlas.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/8/TextureAtlas.java\n@@ -88,7 +88,7 @@ public abstract class TextureAtlas<T extends ITextureAtlasSource> extends Textur\n \t@Deprecated\n \t@Override\n \tpublic void setTextureStateListener(final ITextureStateListener pTextureStateListener) {\n-\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>)pTextureStateListener);\n+\t\tsuper.setTextureStateListener((ITextureAtlasStateListener<T>) pTextureStateListener);\n \t}\n \n \t@Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}