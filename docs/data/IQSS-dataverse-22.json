{
    "project_name": "IQSS-dataverse",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "50",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        }\n\n\t// if we got here, we can delete\n\t// Metadata blocks - cant delete metadatablocks\n         /* Don't seem to need to do this SEK 10/23/14\n         for (MetadataBlock block : doomed.getMetadataBlocks(true) ) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/22/DeleteDataverseCommand.java\nindex c7c592f9458..e5aa8d691c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/22/DeleteDataverseCommand.java\n@@ -47,8 +47,8 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n             throw new IllegalCommandException(\"Cannot delete non-empty dataverses\", this);\n         }\n \n-\t// if we got here, we can delete\n-\t// Metadata blocks - cant delete metadatablocks\n+         // if we got here, we can delete\n+ // Metadata blocks - cant delete metadatablocks\n          /* Don't seem to need to do this SEK 10/23/14\n          for (MetadataBlock block : doomed.getMetadataBlocks(true) ) {\n          MetadataBlock merged =  ctxt.em().merge(block);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/22/DeleteDataverseCommand.java\nindex c7c592f9458..1fec8f30bf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/22/DeleteDataverseCommand.java\n@@ -24,86 +24,86 @@ import java.util.List;\n  * @author michael\n  */\n @RequiredPermissionsMap({\n-    @RequiredPermissions(dataverseName = \"doomed\", value = Permission.DeleteDataverse)\n+  @RequiredPermissions(dataverseName = \"doomed\", value = Permission.DeleteDataverse)\n })\n public class DeleteDataverseCommand extends AbstractVoidCommand {\n \n-    private final Dataverse doomed;\n+  private final Dataverse doomed;\n \n-    public DeleteDataverseCommand(DataverseRequest aRequest, Dataverse aDoomedDataverse) {\n-        super(aRequest, dv(\"doomed\", aDoomedDataverse), dv(\"owner\", aDoomedDataverse.getOwner()));\n-        doomed = aDoomedDataverse;\n+  public DeleteDataverseCommand(DataverseRequest aRequest, Dataverse aDoomedDataverse) {\n+    super(aRequest, dv(\"doomed\", aDoomedDataverse), dv(\"owner\", aDoomedDataverse.getOwner()));\n+    doomed = aDoomedDataverse;\n+  }\n+\n+  @Override\n+  protected void executeImpl(CommandContext ctxt) throws CommandException {\n+    // Make sure we don't delete root\n+    if (doomed.getOwner() == null) {\n+      throw new IllegalCommandException(\"Cannot delete the root dataverse\", this);\n     }\n \n-    @Override\n-    protected void executeImpl(CommandContext ctxt) throws CommandException {\n-        // Make sure we don't delete root\n-        if (doomed.getOwner() == null) {\n-            throw new IllegalCommandException(\"Cannot delete the root dataverse\", this);\n-        }\n-        \n-        // make sure the dataverse is emptyw\n-        if (ctxt.dvObjects().hasData(doomed)) {\n-            throw new IllegalCommandException(\"Cannot delete non-empty dataverses\", this);\n-        }\n+    // make sure the dataverse is emptyw\n+    if (ctxt.dvObjects().hasData(doomed)) {\n+      throw new IllegalCommandException(\"Cannot delete non-empty dataverses\", this);\n+    }\n \n-\t// if we got here, we can delete\n-\t// Metadata blocks - cant delete metadatablocks\n+    // if we got here, we can delete\n+    // Metadata blocks - cant delete metadatablocks\n          /* Don't seem to need to do this SEK 10/23/14\n          for (MetadataBlock block : doomed.getMetadataBlocks(true) ) {\n          MetadataBlock merged =  ctxt.em().merge(block);\n          ctxt.em().remove(merged);\n          } */\n-        \n-        // ASSIGNMENTS\n-        for ( RoleAssignment ra : ctxt.roles().directRoleAssignments(doomed) ) {\n-            ctxt.em().remove(ra);\n-        }\n-        // ROLES\n-        for ( DataverseRole ra : ctxt.roles().findByOwnerId(doomed.getId()) ) {\n-            ctxt.em().remove(ra);\n-        }\n-        \n-        // EXPLICIT GROUPS\n-        for ( ExplicitGroup eg : ctxt.em().createNamedQuery(\"ExplicitGroup.findByOwnerId\", ExplicitGroup.class)\n-                                          .setParameter(\"ownerId\", doomed.getId())\n-                                          .getResultList() ) {\n-            ctxt.explicitGroups().removeGroup(eg);\n-        }\n-        // FACETS handled with cascade on dataverse\n \n-        // Input Level\n-        for (DataverseFieldTypeInputLevel inputLevel : doomed.getDataverseFieldTypeInputLevels()) {\n-            DataverseFieldTypeInputLevel merged = ctxt.em().merge(inputLevel);\n-            ctxt.em().remove(merged);\n-        }\n-        doomed.setDataverseFieldTypeInputLevels(new ArrayList<>());\n-        // DATAVERSE\n-        Dataverse doomedAndMerged = ctxt.em().merge(doomed);\n-        ctxt.em().remove(doomedAndMerged);\n+    // ASSIGNMENTS\n+    for (RoleAssignment ra : ctxt.roles().directRoleAssignments(doomed)) {\n+      ctxt.em().remove(ra);\n+    }\n+    // ROLES\n+    for (DataverseRole ra : ctxt.roles().findByOwnerId(doomed.getId())) {\n+      ctxt.em().remove(ra);\n     }\n \n-    @Override \n-    public boolean onSuccess(CommandContext ctxt, Object r) {\n+    // EXPLICIT GROUPS\n+    for (ExplicitGroup eg : ctxt.em().createNamedQuery(\"ExplicitGroup.findByOwnerId\", ExplicitGroup.class)\n+      .setParameter(\"ownerId\", doomed.getId())\n+      .getResultList()) {\n+      ctxt.explicitGroups().removeGroup(eg);\n+    }\n+    // FACETS handled with cascade on dataverse\n \n-        // Remove from index        \n-        ctxt.index().delete(doomed);\n-        List<String> solrIdsToDelete = new ArrayList<>();\n-        List<DvObjectSolrDoc> definitionPoints = ctxt.solrIndex().determineSolrDocs(doomed);\n-        definitionPoints.forEach(dvObjectSolrDoc -> {\n-            boolean add = solrIdsToDelete.add(dvObjectSolrDoc.getSolrId() + IndexServiceBean.discoverabilityPermissionSuffix);\n-        });\n-        var deleteMultipleSolrIds = ctxt.solrIndex().deleteMultipleSolrIds(solrIdsToDelete);\n-        /**\n-        * @todo: this method currently always returns true because the \n-        * underlying methods (already existing) handle exceptions and don't \n-        * return a boolean value\n-        * we need to consider reworking the code such that methods throw\n-        * indexing exception to callers that may need to handle effects such\n-        * as on data integrity where related operations like database updates\n-        * or deletes are expected to be coordinated with indexing operations\n-        */\n-        return true;\n+    // Input Level\n+    for (DataverseFieldTypeInputLevel inputLevel : doomed.getDataverseFieldTypeInputLevels()) {\n+      DataverseFieldTypeInputLevel merged = ctxt.em().merge(inputLevel);\n+      ctxt.em().remove(merged);\n     }\n+    doomed.setDataverseFieldTypeInputLevels(new ArrayList<>());\n+    // DATAVERSE\n+    Dataverse doomedAndMerged = ctxt.em().merge(doomed);\n+    ctxt.em().remove(doomedAndMerged);\n+  }\n+\n+  @Override\n+  public boolean onSuccess(CommandContext ctxt, Object r) {\n+\n+    // Remove from index\n+    ctxt.index().delete(doomed);\n+    List<String> solrIdsToDelete = new ArrayList<>();\n+    List<DvObjectSolrDoc> definitionPoints = ctxt.solrIndex().determineSolrDocs(doomed);\n+    definitionPoints.forEach(dvObjectSolrDoc -> {\n+      boolean add = solrIdsToDelete.add(dvObjectSolrDoc.getSolrId() + IndexServiceBean.discoverabilityPermissionSuffix);\n+    });\n+    var deleteMultipleSolrIds = ctxt.solrIndex().deleteMultipleSolrIds(solrIdsToDelete);\n+    /**\n+     * @todo: this method currently always returns true because the\n+     * underlying methods (already existing) handle exceptions and don't\n+     * return a boolean value\n+     * we need to consider reworking the code such that methods throw\n+     * indexing exception to callers that may need to handle effects such\n+     * as on data integrity where related operations like database updates\n+     * or deletes are expected to be coordinated with indexing operations\n+     */\n+    return true;\n+  }\n \n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/22/DeleteDataverseCommand.java\nindex c7c592f9458..23c1db798b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/22/DeleteDataverseCommand.java\n@@ -23,9 +23,9 @@ import java.util.List;\n  *\n  * @author michael\n  */\n-@RequiredPermissionsMap({\n-    @RequiredPermissions(dataverseName = \"doomed\", value = Permission.DeleteDataverse)\n-})\n+\n+\n+@RequiredPermissionsMap({@RequiredPermissions(dataverseName = \"doomed\", value = Permission.DeleteDataverse)})\n public class DeleteDataverseCommand extends AbstractVoidCommand {\n \n     private final Dataverse doomed;\n@@ -43,12 +43,13 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n         }\n         \n         // make sure the dataverse is emptyw\n+\n         if (ctxt.dvObjects().hasData(doomed)) {\n             throw new IllegalCommandException(\"Cannot delete non-empty dataverses\", this);\n         }\n \n-\t// if we got here, we can delete\n-\t// Metadata blocks - cant delete metadatablocks\n+    // if we got here, we can delete\n+    // Metadata blocks - cant delete metadatablocks\n          /* Don't seem to need to do this SEK 10/23/14\n          for (MetadataBlock block : doomed.getMetadataBlocks(true) ) {\n          MetadataBlock merged =  ctxt.em().merge(block);\n@@ -56,23 +57,25 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n          } */\n         \n         // ASSIGNMENTS\n-        for ( RoleAssignment ra : ctxt.roles().directRoleAssignments(doomed) ) {\n+\n+        for (RoleAssignment ra : ctxt.roles().directRoleAssignments(doomed)) {\n             ctxt.em().remove(ra);\n         }\n         // ROLES\n-        for ( DataverseRole ra : ctxt.roles().findByOwnerId(doomed.getId()) ) {\n+\n+        for (DataverseRole ra : ctxt.roles().findByOwnerId(doomed.getId())) {\n             ctxt.em().remove(ra);\n         }\n         \n         // EXPLICIT GROUPS\n-        for ( ExplicitGroup eg : ctxt.em().createNamedQuery(\"ExplicitGroup.findByOwnerId\", ExplicitGroup.class)\n-                                          .setParameter(\"ownerId\", doomed.getId())\n-                                          .getResultList() ) {\n+\n+        for (ExplicitGroup eg : ctxt.em().createNamedQuery(\"ExplicitGroup.findByOwnerId\", ExplicitGroup.class).setParameter(\"ownerId\", doomed.getId()).getResultList()) {\n             ctxt.explicitGroups().removeGroup(eg);\n         }\n         // FACETS handled with cascade on dataverse\n \n         // Input Level\n+\n         for (DataverseFieldTypeInputLevel inputLevel : doomed.getDataverseFieldTypeInputLevels()) {\n             DataverseFieldTypeInputLevel merged = ctxt.em().merge(inputLevel);\n             ctxt.em().remove(merged);\n@@ -83,7 +86,7 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n         ctxt.em().remove(doomedAndMerged);\n     }\n \n-    @Override \n+    @Override\n     public boolean onSuccess(CommandContext ctxt, Object r) {\n \n         // Remove from index        \n@@ -106,4 +109,4 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n         return true;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/22/DeleteDataverseCommand.java\nindex c7c592f9458..e5aa8d691c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/22/DeleteDataverseCommand.java\n@@ -47,8 +47,8 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n             throw new IllegalCommandException(\"Cannot delete non-empty dataverses\", this);\n         }\n \n-\t// if we got here, we can delete\n-\t// Metadata blocks - cant delete metadatablocks\n+         // if we got here, we can delete\n+ // Metadata blocks - cant delete metadatablocks\n          /* Don't seem to need to do this SEK 10/23/14\n          for (MetadataBlock block : doomed.getMetadataBlocks(true) ) {\n          MetadataBlock merged =  ctxt.em().merge(block);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/22/DeleteDataverseCommand.java\nindex c7c592f9458..0ff51d9c6ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/22/DeleteDataverseCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/22/DeleteDataverseCommand.java\n@@ -47,8 +47,8 @@ public class DeleteDataverseCommand extends AbstractVoidCommand {\n             throw new IllegalCommandException(\"Cannot delete non-empty dataverses\", this);\n         }\n \n-\t// if we got here, we can delete\n-\t// Metadata blocks - cant delete metadatablocks\n+        // if we got here, we can delete\n+ // Metadata blocks - cant delete metadatablocks\n          /* Don't seem to need to do this SEK 10/23/14\n          for (MetadataBlock block : doomed.getMetadataBlocks(true) ) {\n          MetadataBlock merged =  ctxt.em().merge(block);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}