{
    "project_name": "ldp4j-ldp4j",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "41",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\treturn getParser().parse(IOUtils.toString(source));\n\t}\n\t",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/styler/13/InputStreamUnmarshaller.java\nindex f0c5b36e0a3..537a3c99b3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/styler/13/InputStreamUnmarshaller.java\n@@ -38,5 +38,5 @@ final class InputStreamUnmarshaller extends AbstractUnmarshaller<InputStream> {\n \tpublic Iterable<Triple> unmarshall(InputStream source) throws IOException {\n \t\treturn getParser().parse(IOUtils.toString(source));\n \t}\n-\t\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/intellij/13/InputStreamUnmarshaller.java\nindex f0c5b36e0a3..06227352221 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/intellij/13/InputStreamUnmarshaller.java\n@@ -1,29 +1,30 @@\n /**\n  * #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#\n- *   This file is part of the LDP4j Project:\n- *     http://www.ldp4j.org/\n- *\n- *   Center for Open Middleware\n- *     http://www.centeropenmiddleware.com/\n+ * This file is part of the LDP4j Project:\n+ * http://www.ldp4j.org/\n+ * <p>\n+ * Center for Open Middleware\n+ * http://www.centeropenmiddleware.com/\n  * #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#\n- *   Copyright (C) 2014-2016 Center for Open Middleware.\n+ * Copyright (C) 2014-2016 Center for Open Middleware.\n  * #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *             http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  * #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#\n- *   Artifact    : org.ldp4j.commons.rmf:rmf-core:0.2.2\n- *   Bundle      : rmf-core-0.2.2.jar\n+ * Artifact    : org.ldp4j.commons.rmf:rmf-core:0.2.2\n+ * Bundle      : rmf-core-0.2.2.jar\n  * #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#\n  */\n+\n package org.ldp4j.rdf.impl;\n \n import java.io.IOException;\n@@ -34,9 +35,9 @@ import org.ldp4j.rdf.Triple;\n \n final class InputStreamUnmarshaller extends AbstractUnmarshaller<InputStream> {\n \n-\t@Override\n-\tpublic Iterable<Triple> unmarshall(InputStream source) throws IOException {\n-\t\treturn getParser().parse(IOUtils.toString(source));\n-\t}\n-\t\n+    @Override\n+    public Iterable<Triple> unmarshall(InputStream source) throws IOException {\n+        return getParser().parse(IOUtils.toString(source));\n+    }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/codebuff/13/InputStreamUnmarshaller.java\nindex f0c5b36e0a3..a106d20c805 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/codebuff/13/InputStreamUnmarshaller.java\n@@ -28,15 +28,13 @@ package org.ldp4j.rdf.impl;\n \n import java.io.IOException;\n import java.io.InputStream;\n-\n import org.apache.commons.io.IOUtils;\n import org.ldp4j.rdf.Triple;\n \n final class InputStreamUnmarshaller extends AbstractUnmarshaller<InputStream> {\n+ @Override\n+ public Iterable<Triple> unmarshall(InputStream source) throws IOException {\n+  return getParser().parse(IOUtils.toString(source));\n+ }\n \n-\t@Override\n-\tpublic Iterable<Triple> unmarshall(InputStream source) throws IOException {\n-\t\treturn getParser().parse(IOUtils.toString(source));\n-\t}\n-\t\n }\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/styler_random/13/InputStreamUnmarshaller.java\nindex f0c5b36e0a3..537a3c99b3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/styler_random/13/InputStreamUnmarshaller.java\n@@ -38,5 +38,5 @@ final class InputStreamUnmarshaller extends AbstractUnmarshaller<InputStream> {\n \tpublic Iterable<Triple> unmarshall(InputStream source) throws IOException {\n \t\treturn getParser().parse(IOUtils.toString(source));\n \t}\n-\t\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/styler_three_grams/13/InputStreamUnmarshaller.java\nindex f0c5b36e0a3..7e28ce0bd04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/errored/1/13/InputStreamUnmarshaller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ldp4j-ldp4j/styler_three_grams/13/InputStreamUnmarshaller.java\n@@ -37,6 +37,4 @@ final class InputStreamUnmarshaller extends AbstractUnmarshaller<InputStream> {\n \t@Override\n \tpublic Iterable<Triple> unmarshall(InputStream source) throws IOException {\n \t\treturn getParser().parse(IOUtils.toString(source));\n-\t}\n-\t\n-}\n\\ No newline at end of file\n+\t}}\n\\ No newline at end of file\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}