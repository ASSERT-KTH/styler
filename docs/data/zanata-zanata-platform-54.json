{
    "project_name": "zanata-zanata-platform",
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "285",
                "column": "24",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "\n    public void validateSuppliedId() {\n        getInstance(); // this will raise an EntityNotFound exception\n        // when id is invalid and conversation will not\n        // start\n        clearSlugs();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/54/VersionGroupHome.java\nindex 3c70049b354..4cc51163741 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/54/VersionGroupHome.java\n@@ -282,8 +282,9 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n+        getInstance();\n+        // this will raise an EntityNotFound exception\n+         // when id is invalid and conversation will not\n         // start\n         clearSlugs();\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "287",
                    "column": "20",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/54/VersionGroupHome.java\nindex 3c70049b354..ebf1811f18d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/54/VersionGroupHome.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import java.io.Serializable;\n@@ -71,408 +72,409 @@ import static org.apache.commons.lang3.StringUtils.startsWithIgnoreCase;\n @Model\n @Transactional\n public class VersionGroupHome extends SlugHome<HIterationGroup>\n-        implements Serializable {\n-    private static final long serialVersionUID = 1L;\n-    @Inject\n-    @Any\n-    private VersionGroupSlug versionGroupSlug;\n-    @Inject\n-    @Authenticated\n-    private HAccount authenticatedAccount;\n+  implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+  @Inject\n+  @Any\n+  private VersionGroupSlug versionGroupSlug;\n+  @Inject\n+  @Authenticated\n+  private HAccount authenticatedAccount;\n+  @Inject\n+  private FacesMessages facesMessages;\n+  @Inject\n+  private SlugEntityService slugEntityServiceImpl;\n+  @Inject\n+  private Messages msgs;\n+  @Inject\n+  private ZanataIdentity identity;\n+  @Inject\n+  private GroupMaintainerAutocomplete maintainerAutocomplete;\n+  @Inject\n+  private VersionAutocomplete versionAutocomplete;\n+  @Inject\n+  private GroupLocaleAutocomplete localeAutocomplete;\n+  @Inject\n+  private UrlUtil urlUtil;\n+  @Inject\n+  private VersionGroupDAO versionGroupDAO;\n+  private AbstractListFilter<HPerson> maintainerFilter =\n+    new InMemoryListFilter<HPerson>() {\n+\n+      private static final long serialVersionUID =\n+        6521717110985363677L;\n+\n+      @Override\n+      protected List<HPerson> fetchAll() {\n+        return getInstanceMaintainers();\n+      }\n+\n+      @Override\n+      protected boolean include(HPerson elem, String filter) {\n+        return containsIgnoreCase(elem.getName(),\n+          filter);\n+      }\n+    };\n+\n+  public VersionGroupHome() {\n+    setEntityClass(HIterationGroup.class);\n+  }\n+\n+  public String getSlug() {\n+    return versionGroupSlug.getValue();\n+  }\n+\n+  public void setSlug(String slug) {\n+    versionGroupSlug.setValue(slug);\n+  }\n+\n+  public void createNew() {\n+    clearSlugs();\n+    identity.checkPermission(getInstance(), \"insert\");\n+  }\n+\n+  public void verifySlugAvailable(ValueChangeEvent e) {\n+    String slug = (String) e.getNewValue();\n+    validateSlug(slug, e.getComponent().getId());\n+  }\n+\n+  public boolean validateSlug(String slug, String componentId) {\n+    if (!isSlugAvailable(slug)) {\n+      facesMessages.addToControl(componentId,\n+        \"This Group ID is not available\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean isSlugAvailable(String slug) {\n+    return slugEntityServiceImpl.isSlugAvailable(slug,\n+      HIterationGroup.class);\n+  }\n+\n+  @Override\n+  protected void updatedMessage() {\n+    // Disable the default message from Seam\n+  }\n+\n+  @Override\n+  @Transactional\n+  public String persist() {\n+    identity.checkPermission(getInstance(), \"update\");\n+    if (!validateSlug(getInstance().getSlug(), \"slug\")) {\n+      return null;\n+    }\n+    if (authenticatedAccount != null) {\n+      getInstance().addMaintainer(authenticatedAccount.getPerson());\n+    }\n+    return super.persist();\n+  }\n+\n+  @Override\n+  @Transactional\n+  public String update() {\n+    identity.checkPermission(getInstance(), \"update\");\n+    String state = super.update();\n+    facesMessages.addGlobal(msgs.get(\"jsf.group.settings.updated\"));\n+    return state;\n+  }\n+  // TODO ask camunoz if this is still needed\n+\n+  /**\n+   * This is for autocomplete components of which FacesMessages\n+   * will be null\n+   *\n+   * @param facesMessages\n+   * @return\n+   */\n+  private String update(FacesMessages facesMessages) {\n+    if (this.facesMessages == null) {\n+      this.facesMessages = facesMessages;\n+    }\n+    return update();\n+  }\n+\n+  @Transactional\n+  public void deleteSelf() {\n+    identity.checkPermission(getInstance(), \"update\");\n+    String slug = getInstance().getSlug();\n+    versionGroupDAO.makeTransient(getInstance());\n+    versionGroupDAO.flush();\n+    facesMessages.addGlobal(msgs.format(\"jsf.group.notification.deleted\", slug));\n+    urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n+  }\n+\n+  @Transactional\n+  public void removeLanguage(HLocale locale) {\n+    identity.checkPermission(getInstance(), \"update\");\n+    getInstance().getActiveLocales().remove(locale);\n+    update();\n+    facesMessages.addGlobal(msgs.format(\"jsf.LanguageRemoveFromGroup\",\n+      locale.retrieveDisplayName()));\n+  }\n+\n+  @Transactional\n+  public void removeVersion(HProjectIteration version) {\n+    identity.checkPermission(getInstance(), \"update\");\n+    getInstance().getProjectIterations().remove(version);\n+    update();\n+    facesMessages.addGlobal(msgs.format(\"jsf.VersionRemoveFromGroup\", version.getSlug(),\n+      version.getProject().getSlug()));\n+  }\n+\n+  @Transactional\n+  public void removeMaintainer(HPerson maintainer) {\n+    identity.checkPermission(getInstance(), \"update\");\n+    if (getInstance().getMaintainers().size() <= 1) {\n+      facesMessages.addGlobal(msgs.get(\"jsf.group.NeedAtLeastOneMaintainer\"));\n+    } else {\n+      getInstance().removeMaintainer(maintainer);\n+      maintainerFilter.reset();\n+      super.update();\n+      facesMessages.addGlobal(msgs.format(\"jsf.MaintainerRemoveFromGroup\",\n+        maintainer.getName()));\n+      if (maintainer.equals(authenticatedAccount.getPerson())) {\n+        urlUtil.redirectToInternal(\n+          urlUtil.groupUrl(getInstance().getSlug()));\n+      }\n+    }\n+  }\n+\n+  public List<HLocale> getInstanceActiveLocales() {\n+    List<HLocale> activeLocales =\n+      Lists.newArrayList(getInstance().getActiveLocales());\n+    Collections.sort(activeLocales, ComparatorUtil.LOCALE_COMPARATOR);\n+    return activeLocales;\n+  }\n+\n+  @Override\n+  protected HIterationGroup loadInstance() {\n+    Session session = (Session) getEntityManager().getDelegate();\n+    return (HIterationGroup) session.byNaturalId(HIterationGroup.class)\n+      .using(\"slug\", getSlug()).load();\n+  }\n+  // sort by slug\n+\n+  public List<HProjectIteration> getSortedInstanceProjectIterations() {\n+    List<HProjectIteration> list =\n+      Lists.newArrayList(getInstance().getProjectIterations());\n+    Collections.sort(list, ComparatorUtil.VERSION_PROJECT_NAME_COMPARATOR);\n+    return list;\n+  }\n+\n+  public List<HPerson> getInstanceMaintainers() {\n+    List<HPerson> list = Lists.newArrayList(getInstance().getMaintainers());\n+    Collections.sort(list, ComparatorUtil.PERSON_NAME_COMPARATOR);\n+    return list;\n+  }\n+\n+  @Override\n+  public NaturalIdentifier getNaturalId() {\n+    return Restrictions.naturalId().set(\"slug\", getSlug());\n+  }\n+\n+  @Override\n+  public boolean isIdDefined() {\n+    return getSlug() != null;\n+  }\n+\n+  @Override\n+  public Object getId() {\n+    return getSlug();\n+  }\n+\n+  public void validateSuppliedId() {\n+    getInstance(); // this will raise an EntityNotFound exception\n+    // when id is invalid and conversation will not\n+    // start\n+    clearSlugs();\n+  }\n+\n+  public boolean canViewProject(HProjectIteration version) {\n+    return identity.hasPermission(version, \"read\");\n+  }\n+\n+  public FacesMessages getFacesMessages() {\n+    return facesMessages;\n+  }\n+\n+  @ViewScoped\n+  public static class GroupMaintainerAutocomplete\n+    extends MaintainerAutocomplete {\n+\n+    private static final long serialVersionUID = 1150630837852918989L;\n     @Inject\n-    private FacesMessages facesMessages;\n-    @Inject\n-    private SlugEntityService slugEntityServiceImpl;\n-    @Inject\n-    private Messages msgs;\n+    private VersionGroupHome versionGroupHome;\n     @Inject\n     private ZanataIdentity identity;\n     @Inject\n-    private GroupMaintainerAutocomplete maintainerAutocomplete;\n-    @Inject\n-    private VersionAutocomplete versionAutocomplete;\n-    @Inject\n-    private GroupLocaleAutocomplete localeAutocomplete;\n-    @Inject\n-    private UrlUtil urlUtil;\n-    @Inject\n-    private VersionGroupDAO versionGroupDAO;\n-    private AbstractListFilter<HPerson> maintainerFilter =\n-            new InMemoryListFilter<HPerson>() {\n-\n-                private static final long serialVersionUID =\n-                        6521717110985363677L;\n-\n-                @Override\n-                protected List<HPerson> fetchAll() {\n-                    return getInstanceMaintainers();\n-                }\n-\n-                @Override\n-                protected boolean include(HPerson elem, String filter) {\n-                    return containsIgnoreCase(elem.getName(),\n-                            filter);\n-                }\n-            };\n-\n-    public VersionGroupHome() {\n-        setEntityClass(HIterationGroup.class);\n-    }\n-\n-    public String getSlug() {\n-        return versionGroupSlug.getValue();\n-    }\n-\n-    public void setSlug(String slug) {\n-        versionGroupSlug.setValue(slug);\n-    }\n-\n-    public void createNew() {\n-        clearSlugs();\n-        identity.checkPermission(getInstance(), \"insert\");\n-    }\n-\n-    public void verifySlugAvailable(ValueChangeEvent e) {\n-        String slug = (String) e.getNewValue();\n-        validateSlug(slug, e.getComponent().getId());\n-    }\n-\n-    public boolean validateSlug(String slug, String componentId) {\n-        if (!isSlugAvailable(slug)) {\n-            facesMessages.addToControl(componentId,\n-                    \"This Group ID is not available\");\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public boolean isSlugAvailable(String slug) {\n-        return slugEntityServiceImpl.isSlugAvailable(slug,\n-                HIterationGroup.class);\n-    }\n-\n-    @Override\n-    protected void updatedMessage() {\n-        // Disable the default message from Seam\n-    }\n+    private Messages msgs;\n \n     @Override\n-    @Transactional\n-    public String persist() {\n-        identity.checkPermission(getInstance(), \"update\");\n-        if (!validateSlug(getInstance().getSlug(), \"slug\"))\n-            return null;\n-        if (authenticatedAccount != null) {\n-            getInstance().addMaintainer(authenticatedAccount.getPerson());\n-        }\n-        return super.persist();\n+    protected List<HPerson> getMaintainers() {\n+      return versionGroupHome.getInstanceMaintainers();\n     }\n \n-    @Override\n-    @Transactional\n-    public String update() {\n-        identity.checkPermission(getInstance(), \"update\");\n-        String state = super.update();\n-        facesMessages.addGlobal(msgs.get(\"jsf.group.settings.updated\"));\n-        return state;\n+    private HIterationGroup getInstance() {\n+      return versionGroupHome.getInstance();\n     }\n-    // TODO ask camunoz if this is still needed\n \n     /**\n-     * This is for autocomplete components of which FacesMessages\n-     * will be null\n-     *\n-     * @param facesMessages\n-     * @return\n+     * Action when an item is selected\n      */\n-    private String update(FacesMessages facesMessages) {\n-        if (this.facesMessages == null) {\n-            this.facesMessages = facesMessages;\n-        }\n-        return update();\n-    }\n-\n-    @Transactional\n-    public void deleteSelf() {\n-        identity.checkPermission(getInstance(), \"update\");\n-        String slug = getInstance().getSlug();\n-        versionGroupDAO.makeTransient(getInstance());\n-        versionGroupDAO.flush();\n-        facesMessages.addGlobal(msgs.format(\"jsf.group.notification.deleted\", slug));\n-        urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n-    }\n-\n-    @Transactional\n-    public void removeLanguage(HLocale locale) {\n-        identity.checkPermission(getInstance(), \"update\");\n-        getInstance().getActiveLocales().remove(locale);\n-        update();\n-        facesMessages.addGlobal(msgs.format(\"jsf.LanguageRemoveFromGroup\",\n-                locale.retrieveDisplayName()));\n-    }\n-\n-    @Transactional\n-    public void removeVersion(HProjectIteration version) {\n-        identity.checkPermission(getInstance(), \"update\");\n-        getInstance().getProjectIterations().remove(version);\n-        update();\n-        facesMessages.addGlobal(msgs.format(\"jsf.VersionRemoveFromGroup\", version.getSlug(),\n-                version.getProject().getSlug()));\n-    }\n-\n+    @Override\n     @Transactional\n-    public void removeMaintainer(HPerson maintainer) {\n-        identity.checkPermission(getInstance(), \"update\");\n-        if (getInstance().getMaintainers().size() <= 1) {\n-            facesMessages.addGlobal(msgs.get(\"jsf.group.NeedAtLeastOneMaintainer\"));\n-        } else {\n-            getInstance().removeMaintainer(maintainer);\n-            maintainerFilter.reset();\n-            super.update();\n-            facesMessages.addGlobal(msgs.format(\"jsf.MaintainerRemoveFromGroup\",\n-                    maintainer.getName()));\n-            if (maintainer.equals(authenticatedAccount.getPerson())) {\n-                urlUtil.redirectToInternal(\n-                        urlUtil.groupUrl(getInstance().getSlug()));\n-            }\n-        }\n-    }\n+    public void onSelectItemAction() {\n+      if (StringUtils.isEmpty(getSelectedItem())) {\n+        return;\n+      }\n+      identity.checkPermission(getInstance(), \"update\");\n+      HPerson maintainer = personDAO.findByUsername(getSelectedItem());\n+      getInstance().getMaintainers().add(maintainer);\n+      versionGroupHome.update(versionGroupHome.getFacesMessages());\n+      reset();\n+      versionGroupHome.facesMessages.addGlobal(\n+        msgs.format(\"jsf.MaintainerAddedToGroup\", maintainer.getName()));\n+    }\n+  }\n+\n+  @ViewScoped\n+  public static class VersionAutocomplete\n+    extends AbstractAutocomplete<HProjectIteration> {\n+\n+    private static final long serialVersionUID = 8022275695197571957L;\n+    @Inject\n+    private ProjectIterationDAO projectIterationDAO;\n+    @Inject\n+    private VersionGroupService versionGroupServiceImpl;\n+    @Inject\n+    private VersionGroupHome versionGroupHome;\n+    @Inject\n+    private ZanataIdentity identity;\n+    @Inject\n+    private Messages msgs;\n \n-    public List<HLocale> getInstanceActiveLocales() {\n-        List<HLocale> activeLocales =\n-                Lists.newArrayList(getInstance().getActiveLocales());\n-        Collections.sort(activeLocales, ComparatorUtil.LOCALE_COMPARATOR);\n-        return activeLocales;\n+    private HIterationGroup getInstance() {\n+      return versionGroupHome.getInstance();\n     }\n \n     @Override\n-    protected HIterationGroup loadInstance() {\n-        Session session = (Session) getEntityManager().getDelegate();\n-        return (HIterationGroup) session.byNaturalId(HIterationGroup.class)\n-                .using(\"slug\", getSlug()).load();\n-    }\n-    // sort by slug\n-\n-    public List<HProjectIteration> getSortedInstanceProjectIterations() {\n-        List<HProjectIteration> list =\n-                Lists.newArrayList(getInstance().getProjectIterations());\n-        Collections.sort(list, ComparatorUtil.VERSION_PROJECT_NAME_COMPARATOR);\n-        return list;\n-    }\n-\n-    public List<HPerson> getInstanceMaintainers() {\n-        List<HPerson> list = Lists.newArrayList(getInstance().getMaintainers());\n-        Collections.sort(list, ComparatorUtil.PERSON_NAME_COMPARATOR);\n-        return list;\n+    public List<HProjectIteration> suggest() {\n+      List<HProjectIteration> versionList = versionGroupServiceImpl\n+        .searchLikeSlugOrProjectSlug(getQuery());\n+      return versionList.stream()\n+        .filter(it -> it != null && !it.getGroups()\n+          .contains(getInstance()) &&\n+          identity.hasPermission(it, \"read\"))\n+        .collect(Collectors.toList());\n     }\n \n     @Override\n-    public NaturalIdentifier getNaturalId() {\n-        return Restrictions.naturalId().set(\"slug\", getSlug());\n-    }\n+    @Transactional\n+    @SuppressWarnings(\"deprecation\")\n+    public void onSelectItemAction() {\n+      if (StringUtils.isEmpty(getSelectedItem())) {\n+        return;\n+      }\n+      identity.checkPermission(getInstance(), \"update\");\n+      HProjectIteration version =\n+        projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n+      getInstance().getProjectIterations().add(version);\n+      versionGroupHome.update(versionGroupHome.getFacesMessages());\n+      reset();\n+      versionGroupHome.facesMessages.addGlobal(\n+        msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n+          version.getProject().getSlug()));\n+    }\n+  }\n+\n+  @ViewScoped\n+  public static class GroupLocaleAutocomplete extends LocaleAutocomplete {\n+\n+    private static final long serialVersionUID = -4325912450531279919L;\n+    @Inject\n+    private VersionGroupHome versionGroupHome;\n+    @Inject\n+    private ZanataIdentity identity;\n+    @Inject\n+    private Messages msgs;\n \n-    @Override\n-    public boolean isIdDefined() {\n-        return getSlug() != null;\n+    private HIterationGroup getInstance() {\n+      return versionGroupHome.getInstance();\n     }\n \n     @Override\n-    public Object getId() {\n-        return getSlug();\n-    }\n-\n-    public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n-        // start\n-        clearSlugs();\n-    }\n-\n-    public boolean canViewProject(HProjectIteration version) {\n-        return identity.hasPermission(version, \"read\");\n-    }\n-\n-    public FacesMessages getFacesMessages() {\n-        return facesMessages;\n-    }\n-\n-    @ViewScoped\n-    public static class GroupMaintainerAutocomplete\n-            extends MaintainerAutocomplete {\n-\n-        private static final long serialVersionUID = 1150630837852918989L;\n-        @Inject\n-        private VersionGroupHome versionGroupHome;\n-        @Inject\n-        private ZanataIdentity identity;\n-        @Inject\n-        private Messages msgs;\n-\n-        @Override\n-        protected List<HPerson> getMaintainers() {\n-            return versionGroupHome.getInstanceMaintainers();\n-        }\n-\n-        private HIterationGroup getInstance() {\n-            return versionGroupHome.getInstance();\n-        }\n-\n-        /**\n-         * Action when an item is selected\n-         */\n-        @Override\n-        @Transactional\n-        public void onSelectItemAction() {\n-            if (StringUtils.isEmpty(getSelectedItem())) {\n-                return;\n-            }\n-            identity.checkPermission(getInstance(), \"update\");\n-            HPerson maintainer = personDAO.findByUsername(getSelectedItem());\n-            getInstance().getMaintainers().add(maintainer);\n-            versionGroupHome.update(versionGroupHome.getFacesMessages());\n-            reset();\n-            versionGroupHome.facesMessages.addGlobal(\n-                    msgs.format(\"jsf.MaintainerAddedToGroup\", maintainer.getName()));\n-        }\n-    }\n-\n-    @ViewScoped\n-    public static class VersionAutocomplete\n-            extends AbstractAutocomplete<HProjectIteration> {\n-\n-        private static final long serialVersionUID = 8022275695197571957L;\n-        @Inject\n-        private ProjectIterationDAO projectIterationDAO;\n-        @Inject\n-        private VersionGroupService versionGroupServiceImpl;\n-        @Inject\n-        private VersionGroupHome versionGroupHome;\n-        @Inject\n-        private ZanataIdentity identity;\n-        @Inject\n-        private Messages msgs;\n-\n-        private HIterationGroup getInstance() {\n-            return versionGroupHome.getInstance();\n-        }\n-\n-        @Override\n-        public List<HProjectIteration> suggest() {\n-            List<HProjectIteration> versionList = versionGroupServiceImpl\n-                    .searchLikeSlugOrProjectSlug(getQuery());\n-            return versionList.stream()\n-                    .filter(it -> it != null && !it.getGroups()\n-                            .contains(getInstance()) &&\n-                            identity.hasPermission(it, \"read\"))\n-                    .collect(Collectors.toList());\n-        }\n-\n-        @Override\n-        @Transactional\n-        @SuppressWarnings(\"deprecation\")\n-        public void onSelectItemAction() {\n-            if (StringUtils.isEmpty(getSelectedItem())) {\n-                return;\n-            }\n-            identity.checkPermission(getInstance(), \"update\");\n-            HProjectIteration version =\n-                    projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n-            getInstance().getProjectIterations().add(version);\n-            versionGroupHome.update(versionGroupHome.getFacesMessages());\n-            reset();\n-            versionGroupHome.facesMessages.addGlobal(\n-                    msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n-                            version.getProject().getSlug()));\n-        }\n-    }\n-\n-    @ViewScoped\n-    public static class GroupLocaleAutocomplete extends LocaleAutocomplete {\n-\n-        private static final long serialVersionUID = -4325912450531279919L;\n-        @Inject\n-        private VersionGroupHome versionGroupHome;\n-        @Inject\n-        private ZanataIdentity identity;\n-        @Inject\n-        private Messages msgs;\n-\n-        private HIterationGroup getInstance() {\n-            return versionGroupHome.getInstance();\n-        }\n-\n-        @Override\n-        protected Set<HLocale> getLocales() {\n-            // not used because overriding List<HLocale> suggest()\n-            return null;\n-        }\n-\n-        @Override\n-        public List<HLocale> suggest() {\n-            String query = getQuery();\n-            HIterationGroup group = getInstance();\n-            return localeServiceImpl\n-                    .getSupportedLocales()\n-                    .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n-                                    && (matchByLocaleCode(query, locale)\n-                                    || matchByDisplayName(query, locale)))\n-                    .collect(Collectors.toList());\n-        }\n-\n-        private boolean matchByDisplayName(String query, HLocale locale) {\n-            return containsIgnoreCase(\n-                    locale.retrieveDisplayName(),\n-                    query);\n-        }\n-\n-        private boolean matchByLocaleCode(String query, HLocale locale) {\n-            return startsWithIgnoreCase(\n-                    locale.getLocaleId().getId(),\n-                    query);\n-        }\n-\n-        /**\n-         * Action when an item is selected\n-         */\n-\n-        @Override\n-        @Transactional\n-        @SuppressWarnings(\"deprecation\")\n-        public void onSelectItemAction() {\n-            if (StringUtils.isEmpty(getSelectedItem())) {\n-                return;\n-            }\n-            identity.checkPermission(getInstance(), \"update\");\n-            HLocale locale = localeServiceImpl.getByLocaleId(getSelectedItem());\n-            getInstance().getActiveLocales().add(locale);\n-            versionGroupHome.update(versionGroupHome.getFacesMessages());\n-            reset();\n-            versionGroupHome.getMaintainerFilter().reset();\n-            versionGroupHome.facesMessages.addGlobal(\n-                    msgs.format(\"jsf.LanguageAddedToGroup\",\n-                            locale.retrieveDisplayName()));\n-        }\n+    protected Set<HLocale> getLocales() {\n+      // not used because overriding List<HLocale> suggest()\n+      return null;\n     }\n \n-    public VersionGroupSlug getVersionGroupSlug() {\n-        return this.versionGroupSlug;\n+    @Override\n+    public List<HLocale> suggest() {\n+      String query = getQuery();\n+      HIterationGroup group = getInstance();\n+      return localeServiceImpl\n+        .getSupportedLocales()\n+        .stream()\n+        .filter(locale ->\n+          !group.getActiveLocales().contains(locale)\n+            && (matchByLocaleCode(query, locale)\n+            || matchByDisplayName(query, locale)))\n+        .collect(Collectors.toList());\n     }\n \n-    public GroupMaintainerAutocomplete getMaintainerAutocomplete() {\n-        return this.maintainerAutocomplete;\n+    private boolean matchByDisplayName(String query, HLocale locale) {\n+      return containsIgnoreCase(\n+        locale.retrieveDisplayName(),\n+        query);\n     }\n \n-    public VersionAutocomplete getVersionAutocomplete() {\n-        return this.versionAutocomplete;\n+    private boolean matchByLocaleCode(String query, HLocale locale) {\n+      return startsWithIgnoreCase(\n+        locale.getLocaleId().getId(),\n+        query);\n     }\n \n-    public GroupLocaleAutocomplete getLocaleAutocomplete() {\n-        return this.localeAutocomplete;\n-    }\n+    /**\n+     * Action when an item is selected\n+     */\n \n-    public AbstractListFilter<HPerson> getMaintainerFilter() {\n-        return this.maintainerFilter;\n-    }\n+    @Override\n+    @Transactional\n+    @SuppressWarnings(\"deprecation\")\n+    public void onSelectItemAction() {\n+      if (StringUtils.isEmpty(getSelectedItem())) {\n+        return;\n+      }\n+      identity.checkPermission(getInstance(), \"update\");\n+      HLocale locale = localeServiceImpl.getByLocaleId(getSelectedItem());\n+      getInstance().getActiveLocales().add(locale);\n+      versionGroupHome.update(versionGroupHome.getFacesMessages());\n+      reset();\n+      versionGroupHome.getMaintainerFilter().reset();\n+      versionGroupHome.facesMessages.addGlobal(\n+        msgs.format(\"jsf.LanguageAddedToGroup\",\n+          locale.retrieveDisplayName()));\n+    }\n+  }\n+\n+  public VersionGroupSlug getVersionGroupSlug() {\n+    return this.versionGroupSlug;\n+  }\n+\n+  public GroupMaintainerAutocomplete getMaintainerAutocomplete() {\n+    return this.maintainerAutocomplete;\n+  }\n+\n+  public VersionAutocomplete getVersionAutocomplete() {\n+    return this.versionAutocomplete;\n+  }\n+\n+  public GroupLocaleAutocomplete getLocaleAutocomplete() {\n+    return this.localeAutocomplete;\n+  }\n+\n+  public AbstractListFilter<HPerson> getMaintainerFilter() {\n+    return this.maintainerFilter;\n+  }\n }\n",
            "diff_size": 682
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/54/VersionGroupHome.java\nindex 3c70049b354..34d59209d99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/54/VersionGroupHome.java\n@@ -282,7 +282,8 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n+        getInstance();\n+// this will raise an EntityNotFound exception\n         // when id is invalid and conversation will not\n         // start\n         clearSlugs();\n@@ -414,8 +415,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             return localeServiceImpl\n                     .getSupportedLocales()\n                     .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n+                    .filter(locale -> !group.getActiveLocales().contains(locale)\n                                     && (matchByLocaleCode(query, locale)\n                                     || matchByDisplayName(query, locale)))\n                     .collect(Collectors.toList());\n@@ -475,4 +475,4 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     public AbstractListFilter<HPerson> getMaintainerFilter() {\n         return this.maintainerFilter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "274",
                    "column": "24",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/54/VersionGroupHome.java\nindex 3c70049b354..ff01be35cde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/54/VersionGroupHome.java\n@@ -66,12 +66,14 @@ import static org.apache.commons.lang3.StringUtils.startsWithIgnoreCase;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"versionGroupHome\")\n @ViewScoped\n @Model\n @Transactional\n public class VersionGroupHome extends SlugHome<HIterationGroup>\n-        implements Serializable {\n+    implements Serializable {\n     private static final long serialVersionUID = 1L;\n     @Inject\n     @Any\n@@ -97,23 +99,18 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     private UrlUtil urlUtil;\n     @Inject\n     private VersionGroupDAO versionGroupDAO;\n-    private AbstractListFilter<HPerson> maintainerFilter =\n-            new InMemoryListFilter<HPerson>() {\n-\n-                private static final long serialVersionUID =\n-                        6521717110985363677L;\n-\n-                @Override\n-                protected List<HPerson> fetchAll() {\n-                    return getInstanceMaintainers();\n-                }\n-\n-                @Override\n-                protected boolean include(HPerson elem, String filter) {\n-                    return containsIgnoreCase(elem.getName(),\n-                            filter);\n-                }\n-            };\n+    private AbstractListFilter<HPerson> maintainerFilter = new InMemoryListFilter<HPerson>() {\n+                                                               private static final long serialVersionUID = 6521717110985363677L;\n+                                                               @Override\n+                                                               protected List<HPerson> fetchAll() {\n+                                                                   return getInstanceMaintainers();\n+                                                               }\n+\n+                                                               @Override\n+                                                               protected boolean include(HPerson elem, String filter) {\n+                                                                   return containsIgnoreCase(elem.getName(), filter);\n+                                                               }\n+                                                           };\n \n     public VersionGroupHome() {\n         setEntityClass(HIterationGroup.class);\n@@ -139,16 +136,14 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n \n     public boolean validateSlug(String slug, String componentId) {\n         if (!isSlugAvailable(slug)) {\n-            facesMessages.addToControl(componentId,\n-                    \"This Group ID is not available\");\n+            facesMessages.addToControl(componentId, \"This Group ID is not available\");\n             return false;\n         }\n         return true;\n     }\n \n     public boolean isSlugAvailable(String slug) {\n-        return slugEntityServiceImpl.isSlugAvailable(slug,\n-                HIterationGroup.class);\n+        return slugEntityServiceImpl.isSlugAvailable(slug, HIterationGroup.class);\n     }\n \n     @Override\n@@ -185,6 +180,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n      * @param facesMessages\n      * @return\n      */\n+\n     private String update(FacesMessages facesMessages) {\n         if (this.facesMessages == null) {\n             this.facesMessages = facesMessages;\n@@ -207,8 +203,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().getActiveLocales().remove(locale);\n         update();\n-        facesMessages.addGlobal(msgs.format(\"jsf.LanguageRemoveFromGroup\",\n-                locale.retrieveDisplayName()));\n+        facesMessages.addGlobal(msgs.format(\"jsf.LanguageRemoveFromGroup\", locale.retrieveDisplayName()));\n     }\n \n     @Transactional\n@@ -216,8 +211,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().getProjectIterations().remove(version);\n         update();\n-        facesMessages.addGlobal(msgs.format(\"jsf.VersionRemoveFromGroup\", version.getSlug(),\n-                version.getProject().getSlug()));\n+        facesMessages.addGlobal(msgs.format(\"jsf.VersionRemoveFromGroup\", version.getSlug(), version.getProject().getSlug()));\n     }\n \n     @Transactional\n@@ -229,18 +223,15 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             getInstance().removeMaintainer(maintainer);\n             maintainerFilter.reset();\n             super.update();\n-            facesMessages.addGlobal(msgs.format(\"jsf.MaintainerRemoveFromGroup\",\n-                    maintainer.getName()));\n+            facesMessages.addGlobal(msgs.format(\"jsf.MaintainerRemoveFromGroup\", maintainer.getName()));\n             if (maintainer.equals(authenticatedAccount.getPerson())) {\n-                urlUtil.redirectToInternal(\n-                        urlUtil.groupUrl(getInstance().getSlug()));\n+                urlUtil.redirectToInternal(urlUtil.groupUrl(getInstance().getSlug()));\n             }\n         }\n     }\n \n     public List<HLocale> getInstanceActiveLocales() {\n-        List<HLocale> activeLocales =\n-                Lists.newArrayList(getInstance().getActiveLocales());\n+        List<HLocale> activeLocales = Lists.newArrayList(getInstance().getActiveLocales());\n         Collections.sort(activeLocales, ComparatorUtil.LOCALE_COMPARATOR);\n         return activeLocales;\n     }\n@@ -248,14 +239,12 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     @Override\n     protected HIterationGroup loadInstance() {\n         Session session = (Session) getEntityManager().getDelegate();\n-        return (HIterationGroup) session.byNaturalId(HIterationGroup.class)\n-                .using(\"slug\", getSlug()).load();\n+        return (HIterationGroup) session.byNaturalId(HIterationGroup.class).using(\"slug\", getSlug()).load();\n     }\n     // sort by slug\n \n     public List<HProjectIteration> getSortedInstanceProjectIterations() {\n-        List<HProjectIteration> list =\n-                Lists.newArrayList(getInstance().getProjectIterations());\n+        List<HProjectIteration> list = Lists.newArrayList(getInstance().getProjectIterations());\n         Collections.sort(list, ComparatorUtil.VERSION_PROJECT_NAME_COMPARATOR);\n         return list;\n     }\n@@ -297,9 +286,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     @ViewScoped\n-    public static class GroupMaintainerAutocomplete\n-            extends MaintainerAutocomplete {\n-\n+    public static class GroupMaintainerAutocomplete extends MaintainerAutocomplete {\n         private static final long serialVersionUID = 1150630837852918989L;\n         @Inject\n         private VersionGroupHome versionGroupHome;\n@@ -307,7 +294,6 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         private ZanataIdentity identity;\n         @Inject\n         private Messages msgs;\n-\n         @Override\n         protected List<HPerson> getMaintainers() {\n             return versionGroupHome.getInstanceMaintainers();\n@@ -320,6 +306,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         /**\n          * Action when an item is selected\n          */\n+\n         @Override\n         @Transactional\n         public void onSelectItemAction() {\n@@ -331,15 +318,12 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             getInstance().getMaintainers().add(maintainer);\n             versionGroupHome.update(versionGroupHome.getFacesMessages());\n             reset();\n-            versionGroupHome.facesMessages.addGlobal(\n-                    msgs.format(\"jsf.MaintainerAddedToGroup\", maintainer.getName()));\n+            versionGroupHome.facesMessages.addGlobal(msgs.format(\"jsf.MaintainerAddedToGroup\", maintainer.getName()));\n         }\n     }\n \n     @ViewScoped\n-    public static class VersionAutocomplete\n-            extends AbstractAutocomplete<HProjectIteration> {\n-\n+    public static class VersionAutocomplete extends AbstractAutocomplete<HProjectIteration> {\n         private static final long serialVersionUID = 8022275695197571957L;\n         @Inject\n         private ProjectIterationDAO projectIterationDAO;\n@@ -351,20 +335,15 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         private ZanataIdentity identity;\n         @Inject\n         private Messages msgs;\n-\n         private HIterationGroup getInstance() {\n             return versionGroupHome.getInstance();\n         }\n \n         @Override\n         public List<HProjectIteration> suggest() {\n-            List<HProjectIteration> versionList = versionGroupServiceImpl\n-                    .searchLikeSlugOrProjectSlug(getQuery());\n-            return versionList.stream()\n-                    .filter(it -> it != null && !it.getGroups()\n-                            .contains(getInstance()) &&\n-                            identity.hasPermission(it, \"read\"))\n-                    .collect(Collectors.toList());\n+            List<HProjectIteration> versionList = versionGroupServiceImpl.searchLikeSlugOrProjectSlug(getQuery());\n+            return versionList.stream().filter(it -> it != null && !it.getGroups().contains(getInstance())\n+                && identity.hasPermission(it, \"read\")).collect(Collectors.toList());\n         }\n \n         @Override\n@@ -375,20 +354,16 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n                 return;\n             }\n             identity.checkPermission(getInstance(), \"update\");\n-            HProjectIteration version =\n-                    projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n+            HProjectIteration version = projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n             getInstance().getProjectIterations().add(version);\n             versionGroupHome.update(versionGroupHome.getFacesMessages());\n             reset();\n-            versionGroupHome.facesMessages.addGlobal(\n-                    msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n-                            version.getProject().getSlug()));\n+            versionGroupHome.facesMessages.addGlobal(msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(), version.getProject().getSlug()));\n         }\n     }\n \n     @ViewScoped\n     public static class GroupLocaleAutocomplete extends LocaleAutocomplete {\n-\n         private static final long serialVersionUID = -4325912450531279919L;\n         @Inject\n         private VersionGroupHome versionGroupHome;\n@@ -396,7 +371,6 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         private ZanataIdentity identity;\n         @Inject\n         private Messages msgs;\n-\n         private HIterationGroup getInstance() {\n             return versionGroupHome.getInstance();\n         }\n@@ -411,26 +385,16 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         public List<HLocale> suggest() {\n             String query = getQuery();\n             HIterationGroup group = getInstance();\n-            return localeServiceImpl\n-                    .getSupportedLocales()\n-                    .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n-                                    && (matchByLocaleCode(query, locale)\n-                                    || matchByDisplayName(query, locale)))\n-                    .collect(Collectors.toList());\n+            return localeServiceImpl.getSupportedLocales().stream().filter(locale -> !group.getActiveLocales().contains(locale) &&\n+                (matchByLocaleCode(query, locale) || matchByDisplayName(query, locale))).collect(Collectors.toList());\n         }\n \n         private boolean matchByDisplayName(String query, HLocale locale) {\n-            return containsIgnoreCase(\n-                    locale.retrieveDisplayName(),\n-                    query);\n+            return containsIgnoreCase(locale.retrieveDisplayName(), query);\n         }\n \n         private boolean matchByLocaleCode(String query, HLocale locale) {\n-            return startsWithIgnoreCase(\n-                    locale.getLocaleId().getId(),\n-                    query);\n+            return startsWithIgnoreCase(locale.getLocaleId().getId(), query);\n         }\n \n         /**\n@@ -450,9 +414,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             versionGroupHome.update(versionGroupHome.getFacesMessages());\n             reset();\n             versionGroupHome.getMaintainerFilter().reset();\n-            versionGroupHome.facesMessages.addGlobal(\n-                    msgs.format(\"jsf.LanguageAddedToGroup\",\n-                            locale.retrieveDisplayName()));\n+            versionGroupHome.facesMessages.addGlobal(msgs.format(\"jsf.LanguageAddedToGroup\", locale.retrieveDisplayName()));\n         }\n     }\n \n@@ -475,4 +437,4 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     public AbstractListFilter<HPerson> getMaintainerFilter() {\n         return this.maintainerFilter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 82
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/54/VersionGroupHome.java\nindex 3c70049b354..4cc51163741 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/54/VersionGroupHome.java\n@@ -282,8 +282,9 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n+        getInstance();\n+        // this will raise an EntityNotFound exception\n+         // when id is invalid and conversation will not\n         // start\n         clearSlugs();\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/54/VersionGroupHome.java\nindex 3c70049b354..7e16ffc6621 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/54/VersionGroupHome.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/54/VersionGroupHome.java\n@@ -282,8 +282,9 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n+        getInstance();\n+        // this will raise an EntityNotFound exception // when id is invalid and conversation will not\n+         // when id is invalid and conversation will not\n         // start\n         clearSlugs();\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}