{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2398",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2398/DefaultNodeLabelIndexCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2398/DefaultNodeLabelIndexCursor.java\nindex 91613cb8139..7657b5dfd52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2398/DefaultNodeLabelIndexCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2398/DefaultNodeLabelIndexCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import java.util.HashSet;\n@@ -35,153 +36,150 @@ import org.neo4j.storageengine.api.txstate.ReadableDiffSets;\n import static org.neo4j.kernel.impl.store.record.AbstractBaseRecord.NO_ID;\n \n class DefaultNodeLabelIndexCursor extends IndexCursor<LabelScanValueIndexProgressor>\n-        implements NodeLabelIndexCursor, NodeLabelClient\n+    implements NodeLabelIndexCursor, NodeLabelClient\n {\n-    private Read read;\n-    private long node;\n-    private LabelSet labels;\n-    private PrimitiveLongIterator added;\n-    private Set<Long> removed;\n-\n-    private final DefaultCursors pool;\n-\n-    DefaultNodeLabelIndexCursor( DefaultCursors pool )\n+  private Read read;\n+  private long node;\n+  private LabelSet labels;\n+  private PrimitiveLongIterator added;\n+  private Set<Long> removed;\n+\n+  private final DefaultCursors pool;\n+\n+  DefaultNodeLabelIndexCursor(DefaultCursors pool)\n+  {\n+    this.pool = pool;\n+    node = NO_ID;\n+  }\n+\n+  @Override\n+  public void scan(LabelScanValueIndexProgressor progressor, boolean providesLabels, int label)\n+  {\n+    super.initialize(progressor);\n+    if (read.hasTxStateWithChanges())\n     {\n-        this.pool = pool;\n-        node = NO_ID;\n+      ReadableDiffSets<Long> changes =\n+          read.txState().nodesWithLabelChanged(label);\n+      added = changes.augment(PrimitiveLongCollections.emptyIterator());\n+      removed = new HashSet<>(read.txState().addedAndRemovedNodes().getRemoved());\n+      removed.addAll(changes.getRemoved());\n     }\n-\n-    @Override\n-    public void scan( LabelScanValueIndexProgressor progressor, boolean providesLabels, int label )\n+  }\n+\n+  @Override\n+  public void unionScan(IndexProgressor progressor, boolean providesLabels, int... labels)\n+  {\n+    //TODO: Currently we don't have a good way of handling this in the tx state\n+    //The problem is this case:\n+    //Given a node with label :A\n+    //we remove label A in a transaction and follow that by\n+    //a scan of `:A and :B`. In order to figure this out we need\n+    //to check both tx state and disk, which we currently don't.\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void intersectionScan(IndexProgressor progressor, boolean providesLabels, int... labels)\n+  {\n+    //TODO: Currently we don't have a good way of handling this in the tx state\n+    //The problem is for the nodes where some - but not all of the labels - are\n+    //added in the transaction. For these we need to go to disk and check if they\n+    //have the missing labels and hence return them or if not discard them.\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public boolean acceptNode(long reference, LabelSet labels)\n+  {\n+    if (isRemoved(reference))\n     {\n-        super.initialize( progressor );\n-        if ( read.hasTxStateWithChanges() )\n-        {\n-            ReadableDiffSets<Long> changes =\n-                    read.txState().nodesWithLabelChanged( label );\n-            added = changes.augment( PrimitiveLongCollections.emptyIterator() );\n-            removed = new HashSet<>( read.txState().addedAndRemovedNodes().getRemoved() );\n-            removed.addAll( changes.getRemoved() );\n-        }\n-    }\n-\n-    @Override\n-    public void unionScan( IndexProgressor progressor, boolean providesLabels, int... labels )\n+      return false;\n+    } else\n     {\n-        //TODO: Currently we don't have a good way of handling this in the tx state\n-        //The problem is this case:\n-        //Given a node with label :A\n-        //we remove label A in a transaction and follow that by\n-        //a scan of `:A and :B`. In order to figure this out we need\n-        //to check both tx state and disk, which we currently don't.\n-        throw new UnsupportedOperationException(  );\n-    }\n+      this.node = reference;\n+      this.labels = labels;\n \n-    @Override\n-    public void intersectionScan( IndexProgressor progressor, boolean providesLabels, int... labels )\n-    {\n-        //TODO: Currently we don't have a good way of handling this in the tx state\n-        //The problem is for the nodes where some - but not all of the labels - are\n-        //added in the transaction. For these we need to go to disk and check if they\n-        //have the missing labels and hence return them or if not discard them.\n-        throw new UnsupportedOperationException(  );\n+      return true;\n     }\n+  }\n \n-    @Override\n-    public boolean acceptNode( long reference, LabelSet labels )\n+  @Override\n+  public boolean next()\n+  {\n+    if (added != null && added.hasNext())\n     {\n-        if ( isRemoved( reference ) )\n-        {\n-            return false;\n-        }\n-        else\n-        {\n-            this.node = reference;\n-            this.labels = labels;\n-\n-            return true;\n-        }\n-    }\n-\n-    @Override\n-    public boolean next()\n+      this.node = added.next();\n+      return true;\n+    } else\n     {\n-        if ( added != null && added.hasNext() )\n-        {\n-            this.node = added.next();\n-            return true;\n-        }\n-        else\n-        {\n-            return innerNext();\n-        }\n+      return innerNext();\n     }\n-\n-    public void setRead( Read read )\n+  }\n+\n+  public void setRead(Read read)\n+  {\n+    this.read = read;\n+  }\n+\n+  @Override\n+  public void node(NodeCursor cursor)\n+  {\n+    read.singleNode(node, cursor);\n+  }\n+\n+  @Override\n+  public long nodeReference()\n+  {\n+    return node;\n+  }\n+\n+  @Override\n+  public LabelSet labels()\n+  {\n+    return labels;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    if (!isClosed())\n     {\n-        this.read = read;\n-    }\n+      super.close();\n+      node = NO_ID;\n+      labels = null;\n+      read = null;\n+      removed = null;\n \n-    @Override\n-    public void node( NodeCursor cursor )\n-    {\n-        read.singleNode( node, cursor );\n+      pool.accept(this);\n     }\n-\n-    @Override\n-    public long nodeReference()\n+  }\n+\n+  @Override\n+  public boolean isClosed()\n+  {\n+    return super.isClosed();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    if (isClosed())\n     {\n-        return node;\n-    }\n-\n-    @Override\n-    public LabelSet labels()\n-    {\n-        return labels;\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        if ( !isClosed() )\n-        {\n-            super.close();\n-            node = NO_ID;\n-            labels = null;\n-            read = null;\n-            removed = null;\n-\n-            pool.accept( this );\n-        }\n-    }\n-\n-    @Override\n-    public boolean isClosed()\n+      return \"NodeLabelIndexCursor[closed state]\";\n+    } else\n     {\n-        return super.isClosed();\n+      return \"NodeLabelIndexCursor[node=\" + node + \", labels= \" + labels +\n+          \", underlying record=\" + super.toString() + \" ]\";\n     }\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        if ( isClosed() )\n-        {\n-            return \"NodeLabelIndexCursor[closed state]\";\n-        }\n-        else\n-        {\n-            return \"NodeLabelIndexCursor[node=\" + node + \", labels= \" + labels +\n-                    \", underlying record=\" + super.toString() + \" ]\";\n-        }\n-    }\n+  private boolean isRemoved(long reference)\n+  {\n+    return removed != null && removed.contains(reference);\n+  }\n \n-    private boolean isRemoved( long reference )\n-    {\n-        return removed != null && removed.contains( reference );\n-    }\n-\n-    public void release()\n-    {\n-        // nothing to do\n-    }\n+  public void release()\n+  {\n+    // nothing to do\n+  }\n }\n",
            "diff_size": 213
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}