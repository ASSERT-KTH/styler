{
    "project_name": "wso2-attic-commons",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "156",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        System.out.println(\"Options :\\n\");\n\n        System.out.println(\"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n                           \" CipherTool replace all \" +\n                           \"the password listed in cipher-text.properties file with encrypted values \" +\n                           \"and modify related password elements in the configuration files with secret alias names. \" +",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/25/CipherTool.java\nindex 7adeaa71f7f..cdd824f27e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/25/CipherTool.java\n@@ -154,7 +154,7 @@ public class CipherTool {\n         System.out.println(\"Options :\\n\");\n \n         System.out.println(\"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n-                           \" CipherTool replace all \" +\n+            \" CipherTool replace all \" +\n                            \"the password listed in cipher-text.properties file with encrypted values \" +\n                            \"and modify related password elements in the configuration files with secret alias names. \" +\n                            \"Also secret-conf.properties file is modified with the default configuration data\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/25/CipherTool.java\nindex 7adeaa71f7f..798b66bdf17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/25/CipherTool.java\n@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n \n package org.wso2.ciphertool;\n \n@@ -68,800 +68,800 @@ import java.util.Properties;\n  */\n public class CipherTool {\n \n-    private static Map<String, String> aliasXpathMap = new HashMap<String, String>();\n-    private static Map<String, String> configFileXpathMap = new HashMap<String, String>();\n-    private static Map<String, String> aliasPasswordMap = new HashMap<String, String>();\n-    private static String carbonHome;\n-    private static Cipher cipher;\n-\n-    public static void main(String[] args) {\n-\n-        init(args);\n-        cipher = initCipher();\n-        if (System.getProperty(\"configure\") != null && System.getProperty(\"configure\").equals(\"true\")) {\n-            loadXpathValuesAndPasswordDetails();\n-            writeSecureVaultConfigTokens();\n-            createEncryptedValues();\n-            writeEncryptedValues();\n-            writeConfigurations();\n-        } else if (System.getProperty(\"change\") != null && System.getProperty(\"change\").equals(\"true\")) {\n-            changePassword();\n-        } else {\n-            createEncryptedValue();\n-        }\n+  private static Map<String, String> aliasXpathMap = new HashMap<String, String>();\n+  private static Map<String, String> configFileXpathMap = new HashMap<String, String>();\n+  private static Map<String, String> aliasPasswordMap = new HashMap<String, String>();\n+  private static String carbonHome;\n+  private static Cipher cipher;\n+\n+  public static void main(String[] args) {\n+\n+    init(args);\n+    cipher = initCipher();\n+    if (System.getProperty(\"configure\") != null && System.getProperty(\"configure\").equals(\"true\")) {\n+      loadXpathValuesAndPasswordDetails();\n+      writeSecureVaultConfigTokens();\n+      createEncryptedValues();\n+      writeEncryptedValues();\n+      writeConfigurations();\n+    } else if (System.getProperty(\"change\") != null && System.getProperty(\"change\").equals(\"true\")) {\n+      changePassword();\n+    } else {\n+      createEncryptedValue();\n+    }\n+  }\n+\n+  /**\n+   * init the mode of operation of cipher tool using command line argument\n+   *\n+   * @param args command line arguments\n+   */\n+  private static void init(String[] args) {\n+\n+    String osName = System.getProperty(\"os.name\");\n+    File file;\n+    if (osName.toLowerCase().indexOf(\"win\") == -1) {\n+      file = new File(\".\" + File.separator + \"..\" + File.separator);\n+    } else {\n+      file = new File(\".\" + File.separator);\n     }\n \n-    /**\n-     * init the mode of operation of cipher tool using command line argument\n-     *\n-     * @param args command line arguments\n-     */\n-    private static void init(String[] args) {\n+    try {\n+      System.setProperty(\"carbon.home\", file.getCanonicalFile().toString());\n+    } catch (IOException e) {\n+      handleException(\"IOError while calculating CARBON_HOME directory location \", e);\n+    }\n+\n+    for (String arg : args) {\n+      if (arg.equals(\"-help\")) {\n+        printHelp();\n+        System.exit(0);\n+      } else if (arg.equals(\"-Dchange\")) {\n+        String property = arg.substring(2);\n+        System.setProperty(property, \"true\");\n+      } else if (arg.equals(\"-Dconfigure\")) {\n+        String property = arg.substring(2);\n+        System.setProperty(property, \"true\");\n+      }\n+    }\n \n-        String osName = System.getProperty(\"os.name\");\n-        File file;\n-        if (osName.toLowerCase().indexOf(\"win\") == -1) {\n-            file = new File(\".\" + File.separator + \"..\" + File.separator);\n-        } else {\n-            file = new File(\".\" + File.separator);\n-        }\n \n+    carbonHome = System.getProperty(\"carbon.home\");\n+    if (carbonHome == null || carbonHome.equals(\"\")) {\n+      System.out.println(\"\\nCARBON_HOME is not properly set. Please Enter CARBON_HOME again : \");\n+      BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n+      try {\n+        carbonHome = input.readLine();\n+      } catch (IOException e) {\n+        handleException(\"IOError reading command line inputs  \", e);\n+      } finally {\n         try {\n-            System.setProperty(\"carbon.home\", file.getCanonicalFile().toString());\n+          input.close();\n         } catch (IOException e) {\n-            handleException(\"IOError while calculating CARBON_HOME directory location \", e);\n-        }\n-\n-        for (String arg : args) {\n-            if (arg.equals(\"-help\")) {\n-                printHelp();\n-                System.exit(0);\n-            } else if (arg.equals(\"-Dchange\")) {\n-                String property = arg.substring(2);\n-                System.setProperty(property, \"true\");\n-            } else if (arg.equals(\"-Dconfigure\")) {\n-                String property = arg.substring(2);\n-                System.setProperty(property, \"true\");\n-            }\n+          System.err.println(\"Error while closing input stream\");\n         }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * print the help on command line\n+   */\n+  private static void printHelp() {\n+\n+    System.out.println(\"\\n---------Cipher Tool Help---------\\n\");\n+    System.out.println(\"By default, CipherTool can be used for creating encrypted value for given plaint text\\n\");\n+    System.out.println(\"Options :\\n\");\n+\n+    System.out.println(\n+      \"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n+        \" CipherTool replace all \" +\n+        \"the password listed in cipher-text.properties file with encrypted values \" +\n+        \"and modify related password elements in the configuration files with secret alias names. \" +\n+        \"Also secret-conf.properties file is modified with the default configuration data\");\n+\n+    System.out.println(\"\\t-Dchange\\t\\t This option would allow user to change the specific password \" +\n+      \"which has been secured\\n\");\n+  }\n+\n+  /**\n+   * init the Cipher for encryption using the primary key store of carbon server\n+   *\n+   * @return cipher\n+   */\n+  private static Cipher initCipher() {\n+\n+    String keyStoreFile = null;\n+    String keyType = null;\n+    String aliasName = null;\n+    String password = null;\n+    String provider = null;\n+    Cipher cipher = null;\n+\n+    keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n+      .PRIMARY_KEY_LOCATION);\n+    keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile\n+      .indexOf('}')) + 1);\n+\n+    File keyStore = new File(keyStoreFile);\n+\n+    if (!keyStore.exists()) {\n+      handleException(\"Primary Key Store Can not be found at Default location\");\n+    }\n+    keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n+      .PRIMARY_KEY_TYPE);\n+    aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n+      .PRIMARY_KEY_ALIAS);\n+    password = carbonKeyPasswordReader();\n+\n+    try {\n+      KeyStore primaryKeyStore = getKeyStore(keyStoreFile, password, keyType, provider);\n+      java.security.cert.Certificate certs = primaryKeyStore.getCertificate(aliasName);\n+      cipher = Cipher.getInstance(\"RSA\");\n+      cipher.init(Cipher.ENCRYPT_MODE, certs);\n+    } catch (InvalidKeyException e) {\n+      handleException(\"Error initializing Cipher \", e);\n+    } catch (NoSuchAlgorithmException e) {\n+      handleException(\"Error initializing Cipher \", e);\n+    } catch (KeyStoreException e) {\n+      handleException(\"Error initializing Cipher \", e);\n+    } catch (NoSuchPaddingException e) {\n+      handleException(\"Error initializing Cipher \", e);\n+    }\n \n-\n-        carbonHome = System.getProperty(\"carbon.home\");\n-        if (carbonHome == null || carbonHome.equals(\"\")) {\n-            System.out.println(\"\\nCARBON_HOME is not properly set. Please Enter CARBON_HOME again : \");\n-            BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n-            try {\n-                carbonHome = input.readLine();\n-            } catch (IOException e) {\n-                handleException(\"IOError reading command line inputs  \", e);\n-            } finally {\n-                try {\n-                    input.close();\n-                } catch (IOException e) {\n-                    System.err.println(\"Error while closing input stream\");\n-                }\n-            }\n-        }\n+    System.out.println(\"\\nPrimary KeyStore of Carbon Server is initialized Successfully\\n\");\n+\n+    return cipher;\n+  }\n+\n+  /**\n+   * encrypt the plain text password\n+   *\n+   * @param cipher        init cipher\n+   * @param plainTextPass plain text password\n+   * @return encrypted password\n+   */\n+  private static String doEncryption(Cipher cipher, String plainTextPass) {\n+    String encodedValue = null;\n+    try {\n+      byte[] plainTextPassByte = plainTextPass.getBytes();\n+      byte[] encryptedPassword = cipher.doFinal(plainTextPassByte);\n+      BASE64Encoder encoder = new BASE64Encoder();\n+      encodedValue = encoder.encode(encryptedPassword);\n+    } catch (BadPaddingException e) {\n+      handleException(\"Error encrypting password \", e);\n+    } catch (IllegalBlockSizeException e) {\n+      handleException(\"Error encrypting password \", e);\n+    }\n+    System.out.println(\"\\nEncryption is done Successfully\\n\");\n+    return encodedValue;\n+  }\n+\n+  /**\n+   * Print encrypted value for given plain text\n+   */\n+  private static void createEncryptedValue() {\n+\n+    System.out.println(\"By default, CipherTool can be used for creating encrypted value for given plain text.\" +\n+      \" For more options visit help  ./ciphertool.sh -help or ./ciphertool.bat -help\\n\");\n+    Console console;\n+    char[] password;\n+    String firstPassword = null;\n+    String secondPassword = null;\n+    if ((console = System.console()) != null &&\n+      (password = console.readPassword(\"[%s]\",\n+        \"Enter Plain text value :\")) != null) {\n+      firstPassword = String.valueOf(password);\n     }\n \n-    /**\n-     * print the help on command line\n-     */\n-    private static void printHelp() {\n+    if ((console = System.console()) != null &&\n+      (password = console.readPassword(\"[%s]\",\n+        \"Please Enter value Again :\")) != null) {\n+      secondPassword = String.valueOf(password);\n+    }\n \n-        System.out.println(\"\\n---------Cipher Tool Help---------\\n\");\n-        System.out.println(\"By default, CipherTool can be used for creating encrypted value for given plaint text\\n\");\n-        System.out.println(\"Options :\\n\");\n+    if (firstPassword != null && secondPassword != null && !firstPassword.equals(\"\")\n+      && firstPassword.equals(secondPassword)) {\n+      String encryptedText = doEncryption(cipher, firstPassword);\n+      System.out.println(\"\\nEncrypted value is : \\n\" + encryptedText + \"\\n\");\n+    } else {\n+      handleException(\"Error : Password does not match\");\n+    }\n \n-        System.out.println(\"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n-                           \" CipherTool replace all \" +\n-                           \"the password listed in cipher-text.properties file with encrypted values \" +\n-                           \"and modify related password elements in the configuration files with secret alias names. \" +\n-                           \"Also secret-conf.properties file is modified with the default configuration data\");\n \n-        System.out.println(\"\\t-Dchange\\t\\t This option would allow user to change the specific password \" +\n-                           \"which has been secured\\n\");\n+  }\n+\n+  /**\n+   * get primary key store data by reading carbon.xml file\n+   *\n+   * @param xpath Xpath value for each entry\n+   * @return String value of data related to Xpath\n+   */\n+  private static String getPrimaryKeyStoreData(String xpath) {\n+\n+    String nodeValue = null;\n+    try {\n+      String carbonConfigFile = carbonHome + File.separator +\n+        CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR\n+        + File.separator + CipherToolConstants.CARBON_CONFIG_FILE;\n+\n+      DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+      DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+      Document doc = docBuilder.parse(carbonConfigFile);\n+\n+      XPathFactory xpf = XPathFactory.newInstance();\n+      XPath xp = xpf.newXPath();\n+      XPathExpression xpathEx = xp.compile(xpath);\n+      Node text = (Node) xpathEx.evaluate(doc.getDocumentElement(), XPathConstants.NODE);\n+      if (text != null) {\n+        nodeValue = text.getTextContent();\n+      }\n+    } catch (ParserConfigurationException e) {\n+      handleException(\"Error reading primary key Store details from carbon.xml file \", e);\n+    } catch (SAXException e) {\n+      handleException(\"Error reading primary key Store details from carbon.xml file \", e);\n+    } catch (XPathExpressionException e) {\n+      handleException(\"Error reading primary key Store details from carbon.xml file \", e);\n+    } catch (IOException e) {\n+      handleException(\"IOError reading primary key Store details from carbon.xml file \", e);\n     }\n+    return nodeValue;\n+  }\n+\n+  /**\n+   * get the primary key store instant\n+   *\n+   * @param location      location of key store\n+   * @param storePassword password of key store\n+   * @param storeType     key store type\n+   * @param provider      key store provider\n+   * @return KeyStore instant\n+   */\n+  private static KeyStore getKeyStore(String location, String storePassword,\n+                                      String storeType,\n+                                      String provider) {\n+\n+    File keyStoreFile = new File(location);\n+    if (!keyStoreFile.exists()) {\n+      handleException(\"KeyStore can not be found at ' \" + keyStoreFile + \" '\");\n+    }\n+    if (storePassword == null) {\n+      handleException(\"KeyStore password can not be null\");\n+    }\n+    if (storeType == null) {\n+      handleException(\"KeyStore Type can not be null\");\n+    }\n+    BufferedInputStream bufferedInputStream = null;\n+    try {\n+      bufferedInputStream = new BufferedInputStream(new FileInputStream(keyStoreFile));\n+      KeyStore keyStore;\n+      if (provider != null) {\n+        keyStore = KeyStore.getInstance(storeType, provider);\n+      } else {\n+        keyStore = KeyStore.getInstance(storeType);\n+      }\n+      keyStore.load(bufferedInputStream, storePassword.toCharArray());\n+      return keyStore;\n+    } catch (KeyStoreException e) {\n+      handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n+    } catch (IOException e) {\n+      handleException(\"IOError loading keyStore from ' \" + location + \" ' \", e);\n+    } catch (NoSuchAlgorithmException e) {\n+      handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n+    } catch (CertificateException e) {\n+      handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n+    } catch (NoSuchProviderException e) {\n+      handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n+    } finally {\n+      if (bufferedInputStream != null) {\n+        try {\n+          bufferedInputStream.close();\n+        } catch (IOException ignored) {\n+          System.err.println(\"Error while closing input stream\");\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * write the XML syntax to the configuration files, to show that the password is secured.\n+   */\n+  private static void writeSecureVaultConfigTokens() {\n+\n+    for (String key : configFileXpathMap.keySet()) {\n+      String unprocessedXpath = configFileXpathMap.get(key);\n+      boolean capitalLetter = false;\n+      String XPath;\n+      String fileName = unprocessedXpath.substring(0, unprocessedXpath.indexOf(\"//\"));\n+      if (unprocessedXpath.indexOf(\",\") > 0) {\n+        if ((unprocessedXpath.substring(unprocessedXpath.indexOf(\",\") + 1)).trim().equals(\"true\")) {\n+          capitalLetter = true;\n+        }\n+        XPath = unprocessedXpath.substring(unprocessedXpath.indexOf(\"//\"), unprocessedXpath.indexOf(\",\"));\n+      } else {\n+        XPath = unprocessedXpath.substring(unprocessedXpath.indexOf(\"//\"));\n+      }\n+\n+      writeTokenToConfigFile(fileName, XPath, key, capitalLetter);\n+    }\n+  }\n \n-    /**\n-     * init the Cipher for encryption using the primary key store of carbon server\n-     *\n-     * @return cipher\n-     */\n-    private static Cipher initCipher() {\n-\n-        String keyStoreFile = null;\n-        String keyType = null;\n-        String aliasName = null;\n-        String password = null;\n-        String provider = null;\n-        Cipher cipher = null;\n+  /**\n+   * write the XML syntax to the configuration file,\n+   *\n+   * @param fileName      file name\n+   * @param xPath         Xpath value of the element that needs to be modified\n+   * @param secretAlias   alias name for the element value\n+   * @param capitalLetter element name is started with Capital letter or not\n+   */\n+  private static void writeTokenToConfigFile(String fileName, String xPath, String secretAlias,\n+                                             boolean capitalLetter) {\n \n-        keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                      .PRIMARY_KEY_LOCATION);\n-        keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile\n-                                                                    .indexOf('}')) + 1);\n \n-        File keyStore = new File(keyStoreFile);\n+    if (xPath != null && !xPath.equals(\"\") && secretAlias != null && !secretAlias.equals(\"\")) {\n+      File configFile;\n+      try {\n+        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR\n+          + File.separator + CipherToolConstants.CONF_DIR + File.separator + fileName;\n \n-        if (!keyStore.exists()) {\n-            handleException(\"Primary Key Store Can not be found at Default location\");\n-        }\n-        keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                 .PRIMARY_KEY_TYPE);\n-        aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                   .PRIMARY_KEY_ALIAS);\n-        password = carbonKeyPasswordReader();\n+        configFile = new File(filePath);\n \n-        try {\n-            KeyStore primaryKeyStore = getKeyStore(keyStoreFile, password, keyType, provider);\n-            java.security.cert.Certificate certs = primaryKeyStore.getCertificate(aliasName);\n-            cipher = Cipher.getInstance(\"RSA\");\n-            cipher.init(Cipher.ENCRYPT_MODE, certs);\n-        } catch (InvalidKeyException e) {\n-            handleException(\"Error initializing Cipher \", e);\n-        } catch (NoSuchAlgorithmException e) {\n-            handleException(\"Error initializing Cipher \", e);\n-        } catch (KeyStoreException e) {\n-            handleException(\"Error initializing Cipher \", e);\n-        } catch (NoSuchPaddingException e) {\n-            handleException(\"Error initializing Cipher \", e);\n+        if (!configFile.exists()) {\n+          filePath = carbonHome + fileName;\n+          configFile = new File(filePath);\n         }\n \n-        System.out.println(\"\\nPrimary KeyStore of Carbon Server is initialized Successfully\\n\");\n \n-        return cipher;\n-    }\n-\n-    /**\n-     * encrypt the plain text password\n-     *\n-     * @param cipher        init cipher\n-     * @param plainTextPass plain text password\n-     * @return encrypted password\n-     */\n-    private static String doEncryption(Cipher cipher, String plainTextPass) {\n-        String encodedValue = null;\n-        try {\n-            byte[] plainTextPassByte = plainTextPass.getBytes();\n-            byte[] encryptedPassword = cipher.doFinal(plainTextPassByte);\n-            BASE64Encoder  encoder  = new BASE64Encoder();\n-            encodedValue = encoder.encode(encryptedPassword);\n-        } catch (BadPaddingException e) {\n-            handleException(\"Error encrypting password \", e);\n-        } catch (IllegalBlockSizeException e) {\n-            handleException(\"Error encrypting password \", e);\n-        }\n-         System.out.println(\"\\nEncryption is done Successfully\\n\");\n-        return encodedValue;\n-    }\n-\n-    /**\n-     * Print encrypted value for given plain text\n-     */\n-    private static void createEncryptedValue() {\n-\n-         System.out.println(\"By default, CipherTool can be used for creating encrypted value for given plain text.\" +\n-                 \" For more options visit help  ./ciphertool.sh -help or ./ciphertool.bat -help\\n\");\n-        Console console;\n-        char[] password;\n-        String firstPassword = null;\n-        String secondPassword = null;\n-        if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                             \"Enter Plain text value :\")) != null) {\n-            firstPassword = String.valueOf(password);\n+        if (!configFile.exists()) {\n+          filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+            CipherToolConstants.CONF_DIR + File.separator +\n+            CipherToolConstants.SECURITY_DIR + File.separator + fileName;\n+          configFile = new File(filePath);\n         }\n \n-        if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                             \"Please Enter value Again :\")) != null) {\n-            secondPassword = String.valueOf(password);\n-        }\n \n-        if (firstPassword != null && secondPassword != null && !firstPassword.equals(\"\")\n-            && firstPassword.equals(secondPassword)) {\n-            String encryptedText = doEncryption(cipher, firstPassword);\n-            System.out.println(\"\\nEncrypted value is : \\n\" + encryptedText + \"\\n\");\n-        } else {\n-            handleException(\"Error : Password does not match\");\n+        if (!configFile.exists()) {\n+          filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+            CipherToolConstants.CONF_DIR + File.separator +\n+            CipherToolConstants.AXIS2_DIR + File.separator + fileName;\n+          configFile = new File(filePath);\n         }\n \n \n-    }\n+        if (!configFile.exists()) {\n+          filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+            CipherToolConstants.CONF_DIR + File.separator +\n+            CipherToolConstants.TOMCAT_DIR + File.separator + fileName;\n+          configFile = new File(filePath);\n+        }\n \n-    /**\n-     * get primary key store data by reading carbon.xml file\n-     *\n-     * @param xpath Xpath value for each entry\n-     * @return String value of data related to Xpath\n-     */\n-    private static String getPrimaryKeyStoreData(String xpath) {\n \n-        String nodeValue = null;\n-        try {\n-            String carbonConfigFile = carbonHome + File.separator +\n-                                      CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR\n-                                      + File.separator + CipherToolConstants.CARBON_CONFIG_FILE;\n-\n-            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n-            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n-            Document doc = docBuilder.parse(carbonConfigFile);\n-\n-            XPathFactory xpf = XPathFactory.newInstance();\n-            XPath xp = xpf.newXPath();\n-            XPathExpression xpathEx = xp.compile(xpath);\n-            Node text = (Node) xpathEx.evaluate(doc.getDocumentElement(), XPathConstants.NODE);\n-            if (text != null) {\n-                nodeValue = text.getTextContent();\n-            }\n-        } catch (ParserConfigurationException e) {\n-            handleException(\"Error reading primary key Store details from carbon.xml file \", e);\n-        } catch (SAXException e) {\n-            handleException(\"Error reading primary key Store details from carbon.xml file \", e);\n-        } catch (XPathExpressionException e) {\n-            handleException(\"Error reading primary key Store details from carbon.xml file \", e);\n-        } catch (IOException e) {\n-            handleException(\"IOError reading primary key Store details from carbon.xml file \", e);\n-        }\n-        return nodeValue;\n-    }\n-\n-    /**\n-     * get the primary key store instant\n-     *\n-     * @param location      location of key store\n-     * @param storePassword password of key store\n-     * @param storeType     key store type\n-     * @param provider      key store provider\n-     * @return KeyStore instant\n-     */\n-    private static KeyStore getKeyStore(String location, String storePassword,\n-                                        String storeType,\n-                                        String provider) {\n-\n-        File keyStoreFile = new File(location);\n-        if (!keyStoreFile.exists()) {\n-            handleException(\"KeyStore can not be found at ' \" + keyStoreFile + \" '\");\n-        }\n-        if (storePassword == null) {\n-            handleException(\"KeyStore password can not be null\");\n+        if (!configFile.exists()) {\n+          filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+            CipherToolConstants.CONF_DIR + File.separator +\n+            CipherToolConstants.ETC_DIR + File.separator + fileName;\n+          configFile = new File(filePath);\n         }\n-        if (storeType == null) {\n-            handleException(\"KeyStore Type can not be null\");\n-        }\n-        BufferedInputStream bufferedInputStream = null;\n-        try {\n-            bufferedInputStream = new BufferedInputStream(new FileInputStream(keyStoreFile));\n-            KeyStore keyStore;\n-            if (provider != null) {\n-                keyStore = KeyStore.getInstance(storeType, provider);\n-            } else {\n-                keyStore = KeyStore.getInstance(storeType);\n-            }\n-            keyStore.load(bufferedInputStream, storePassword.toCharArray());\n-            return keyStore;\n-        } catch (KeyStoreException e) {\n-            handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n-        } catch (IOException e) {\n-            handleException(\"IOError loading keyStore from ' \" + location + \" ' \", e);\n-        } catch (NoSuchAlgorithmException e) {\n-            handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n-        } catch (CertificateException e) {\n-            handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n-        } catch (NoSuchProviderException e) {\n-            handleException(\"Error loading keyStore from ' \" + location + \" ' \", e);\n-        } finally {\n-            if (bufferedInputStream != null) {\n-                try {\n-                    bufferedInputStream.close();\n-                } catch (IOException ignored) {\n-                     System.err.println(\"Error while closing input stream\");\n-                }\n-            }\n+\n+        if (!configFile.exists()) {\n+          filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+            CipherToolConstants.CONF_DIR + File.separator +\n+            CipherToolConstants.DATA_SOURCE_DIRECTORY + File.separator + fileName;\n+          configFile = new File(filePath);\n         }\n-        return null;\n-    }\n-\n-    /**\n-     * write the XML syntax to the configuration files, to show that the password is secured.\n-     */\n-    private static void writeSecureVaultConfigTokens() {\n-\n-        for (String key : configFileXpathMap.keySet()) {\n-            String unprocessedXpath = configFileXpathMap.get(key);\n-            boolean capitalLetter = false;\n-            String XPath;\n-            String fileName = unprocessedXpath.substring(0, unprocessedXpath.indexOf(\"//\"));\n-            if (unprocessedXpath.indexOf(\",\") > 0) {\n-                if ((unprocessedXpath.substring(unprocessedXpath.indexOf(\",\") + 1)).trim().equals(\"true\")) {\n-                    capitalLetter = true;\n-                }\n-                XPath = unprocessedXpath.substring(unprocessedXpath.indexOf(\"//\"), unprocessedXpath.indexOf(\",\"));\n-            } else {\n-                XPath = unprocessedXpath.substring(unprocessedXpath.indexOf(\"//\"));\n-            }\n \n-            writeTokenToConfigFile(fileName, XPath, key, capitalLetter);\n+        if (!configFile.exists()) {\n+          return;\n         }\n-    }\n \n-    /**\n-     * write the XML syntax to the configuration file,\n-     *\n-     * @param fileName      file name\n-     * @param xPath         Xpath value of the element that needs to be modified\n-     * @param secretAlias   alias name for the element value\n-     * @param capitalLetter element name is started with Capital letter or not\n-     */\n-    private static void writeTokenToConfigFile(String fileName, String xPath, String secretAlias,\n-                                               boolean capitalLetter) {\n-\n-\n-\n-        if (xPath != null && !xPath.equals(\"\") && secretAlias != null && !secretAlias.equals(\"\")) {\n-            File configFile;\n-            try {\n-                String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR\n-                                  + File.separator + CipherToolConstants.CONF_DIR + File.separator + fileName;\n-\n-                configFile = new File(filePath);\n-\n-                if (!configFile.exists()) {\n-                    filePath = carbonHome + fileName;\n-                    configFile = new File(filePath);\n-                }\n-\n-\n-                if (!configFile.exists()) {\n-                    filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                        CipherToolConstants.CONF_DIR + File.separator +\n-                        CipherToolConstants.SECURITY_DIR + File.separator + fileName;\n-                    configFile = new File(filePath);\n-                }\n-\n-\n-                if (!configFile.exists()) {\n-                    filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                            CipherToolConstants.CONF_DIR + File.separator +\n-                            CipherToolConstants.AXIS2_DIR + File.separator + fileName;\n-                    configFile = new File(filePath);\n-                }\n-\n-\n-                if (!configFile.exists()) {\n-                    filePath = carbonHome +  File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                            CipherToolConstants.CONF_DIR + File.separator +\n-                            CipherToolConstants.TOMCAT_DIR + File.separator + fileName;\n-                    configFile = new File(filePath);\n-                }\n-\n-\n-                if (!configFile.exists()) {\n-                    filePath = carbonHome +  File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                            CipherToolConstants.CONF_DIR + File.separator +\n-                            CipherToolConstants.ETC_DIR + File.separator + fileName;\n-                    configFile = new File(filePath);\n-                }\n-\n-                if (!configFile.exists()) {\n-                    filePath = carbonHome +  File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                            CipherToolConstants.CONF_DIR + File.separator +\n-                            CipherToolConstants.DATA_SOURCE_DIRECTORY + File.separator + fileName;\n-                    configFile = new File(filePath);\n-                }\n-\n-                if (!configFile.exists()) {\n-                    return;\n-                }\n-\n-                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n-                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n-                Document doc = docBuilder.parse(filePath);\n-                Node rootNode = doc.getDocumentElement();\n-                Node secretNamespaceNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_NS_PREFIX);\n-                secretNamespaceNode.setTextContent(CipherToolConstants.SECURE_VAULT_NS);\n-                rootNode.getAttributes().setNamedItem(secretNamespaceNode);\n-                Node secretProviderNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_ATTRIBUTE);\n-                secretProviderNode.setTextContent(CipherToolConstants.SECRET_PROVIDER);\n-\n-                XPathFactory xpf = XPathFactory.newInstance();\n-                XPath xp = xpf.newXPath();\n-                XPathExpression xpathEx = xp.compile(xPath);\n-                NodeList securedNodes = (NodeList) xpathEx.evaluate(doc.getDocumentElement(),\n-                                                                            XPathConstants.NODESET);\n-                if (securedNodes != null && securedNodes.getLength() > 0) {\n-                    for(int i = 0; i< securedNodes.getLength(); i++){\n-                        Node secretAliasNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_ALIAS);\n-                        secretAliasNode.setTextContent(secretAlias);\n-                        Node node = securedNodes.item(i);\n-                        if(node != null){\n-                            node.setTextContent(\"password\");\n-                            node.getAttributes().setNamedItem(secretAliasNode);\n-                        }\n-                    }\n-                } else {\n-                    handleException(\"Element for secret alias '\" + secretAlias + \"' can not be found in \" +\n-                                    fileName + \" file or You have entered invalid Xpath value\");\n-                }\n-                TransformerFactory transformerFactory = TransformerFactory.newInstance();\n-                Transformer transformer = transformerFactory.newTransformer();\n-                DOMSource source = new DOMSource(doc);\n-                StreamResult result = new StreamResult(new File(filePath));\n-                transformer.transform(source, result);\n-\n-            } catch (ParserConfigurationException e) {\n-                handleException(\"Error writing protected token [\"+ secretAlias +\"] to \" +\n-                        fileName + \" file \", e);\n-            } catch (TransformerException e) {\n-                handleException(\"Error writing protected token [\"+ secretAlias +\"] to \" +\n-                        fileName + \" file \", e);\n-            } catch (SAXException e) {\n-                handleException(\"Error writing protected token  [\"+ secretAlias +\"] to \" +\n-                        fileName + \" file \", e);\n-            } catch (IOException e) {\n-                handleException(\"IOError writing protected token  [\"+ secretAlias +\"] to \" +\n-                        fileName + \" file \", e);\n-            } catch (XPathExpressionException e) {\n-                handleException(\"IOError writing protected token  [\"+ secretAlias +\"] to \" +\n-                        fileName +\" file \", e);\n-            }\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(filePath);\n+        Node rootNode = doc.getDocumentElement();\n+        Node secretNamespaceNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_NS_PREFIX);\n+        secretNamespaceNode.setTextContent(CipherToolConstants.SECURE_VAULT_NS);\n+        rootNode.getAttributes().setNamedItem(secretNamespaceNode);\n+        Node secretProviderNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_ATTRIBUTE);\n+        secretProviderNode.setTextContent(CipherToolConstants.SECRET_PROVIDER);\n \n-             System.out.println(\"Protected Token [\" +secretAlias +\"] is updated in \" + fileName +\n-                     \" successfully\\n\");\n-        }\n+        XPathFactory xpf = XPathFactory.newInstance();\n+        XPath xp = xpf.newXPath();\n+        XPathExpression xpathEx = xp.compile(xPath);\n+        NodeList securedNodes = (NodeList) xpathEx.evaluate(doc.getDocumentElement(),\n+          XPathConstants.NODESET);\n+        if (securedNodes != null && securedNodes.getLength() > 0) {\n+          for (int i = 0; i < securedNodes.getLength(); i++) {\n+            Node secretAliasNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_ALIAS);\n+            secretAliasNode.setTextContent(secretAlias);\n+            Node node = securedNodes.item(i);\n+            if (node != null) {\n+              node.setTextContent(\"password\");\n+              node.getAttributes().setNamedItem(secretAliasNode);\n+            }\n+          }\n+        } else {\n+          handleException(\"Element for secret alias '\" + secretAlias + \"' can not be found in \" +\n+            fileName + \" file or You have entered invalid Xpath value\");\n+        }\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        Transformer transformer = transformerFactory.newTransformer();\n+        DOMSource source = new DOMSource(doc);\n+        StreamResult result = new StreamResult(new File(filePath));\n+        transformer.transform(source, result);\n+\n+      } catch (ParserConfigurationException e) {\n+        handleException(\"Error writing protected token [\" + secretAlias + \"] to \" +\n+          fileName + \" file \", e);\n+      } catch (TransformerException e) {\n+        handleException(\"Error writing protected token [\" + secretAlias + \"] to \" +\n+          fileName + \" file \", e);\n+      } catch (SAXException e) {\n+        handleException(\"Error writing protected token  [\" + secretAlias + \"] to \" +\n+          fileName + \" file \", e);\n+      } catch (IOException e) {\n+        handleException(\"IOError writing protected token  [\" + secretAlias + \"] to \" +\n+          fileName + \" file \", e);\n+      } catch (XPathExpressionException e) {\n+        handleException(\"IOError writing protected token  [\" + secretAlias + \"] to \" +\n+          fileName + \" file \", e);\n+      }\n+\n+      System.out.println(\"Protected Token [\" + secretAlias + \"] is updated in \" + fileName +\n+        \" successfully\\n\");\n+    }\n+  }\n+\n+  /**\n+   * Read password from command line inputs\n+   *\n+   * @param key secure alias of password\n+   * @return Password\n+   */\n+  private static String passwordReader(String key) {\n+\n+    Console console;\n+    char[] password;\n+    String firstPassword = null;\n+    String secondPassword = null;\n+    if ((console = System.console()) != null &&\n+      (password = console.readPassword(\"[%s]\",\n+        \"Enter Password of Secret Alias - '\" + key + \"' :\")) != null) {\n+      firstPassword = String.valueOf(password);\n     }\n \n-    /**\n-     * Read password from command line inputs\n-     *\n-     * @param key secure alias of password\n-     * @return Password\n-     */\n-    private static String passwordReader(String key) {\n-\n-        Console console;\n-        char[] password;\n-        String firstPassword = null;\n-        String secondPassword = null;\n-        if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                 \"Enter Password of Secret Alias - '\" + key + \"' :\")) != null) {\n-            firstPassword = String.valueOf(password);\n-        }\n+    if ((console = System.console()) != null &&\n+      (password = console.readPassword(\"[%s]\",\n+        \"Please Enter Password Again :\")) != null) {\n+      secondPassword = String.valueOf(password);\n+    }\n \n-        if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                             \"Please Enter Password Again :\")) != null) {\n-            secondPassword = String.valueOf(password);\n-        }\n+    if (firstPassword != null && secondPassword != null && !firstPassword.equals(\"\")\n+      && firstPassword.equals(secondPassword)) {\n+      return firstPassword;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Read primary key store password of carbon sever from command-line\n+   *\n+   * @return password\n+   */\n+  protected static String carbonKeyPasswordReader() {\n+    Console console;\n+    char[] password;\n+    if ((console = System.console()) != null &&\n+      (password = console.readPassword(\"[%s]\",\n+        \"Please Enter Primary KeyStore Password of Carbon Server : \")) != null) {\n+      return String.valueOf(password);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * check whether the configuration file already has been secured\n+   *\n+   * @param firstNode     Root element of configuration file\n+   * @param capitalLetter element name is started with Capital letter or not\n+   * @return true of false\n+   */\n+  private static boolean isSecureVaultNodeExist(Node firstNode, boolean capitalLetter) {\n+\n+    for (int i = 0; i < firstNode.getChildNodes().getLength(); i++) {\n+      if (capitalLetter) {\n+        if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.\n+          SECURE_VAULT_CAPITAL)) {\n+          return true;\n+        }\n+      } else {\n+        if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.\n+          SECURE_VAULT_SIMPLE)) {\n+          return true;\n+        }\n+      }\n \n-        if (firstPassword != null && secondPassword != null && !firstPassword.equals(\"\")\n-            && firstPassword.equals(secondPassword)) {\n-            return firstPassword;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * create encrypted values for plain text password defined in cipher-text.properties file.. if not\n+   * read password from command-line\n+   */\n+  private static void createEncryptedValues() {\n+\n+    for (String key : aliasPasswordMap.keySet()) {\n+      String value = aliasPasswordMap.get(key);\n+      if (value != null && !value.equals(\"\")) {\n+        if (value.indexOf(\"[\") >= 0 && value.indexOf(\"]\") > 0) {\n+          value = value.substring(value.indexOf(\"[\") + 1, value.indexOf(\"]\"));\n+          aliasPasswordMap.put(key, doEncryption(cipher, value));\n+        }\n+\n+      } else {\n+        value = passwordReader(key);\n+        if (value != null) {\n+          aliasPasswordMap.put(key, doEncryption(cipher, value));\n         } else {\n-            return null;\n+          handleException(\"Error : Password does not match\");\n         }\n+      }\n     }\n+  }\n \n-    /**\n-     * Read primary key store password of carbon sever from command-line\n-     *\n-     * @return password\n-     */\n-    protected static String carbonKeyPasswordReader() {\n-        Console console;\n-        char[] password;\n-        if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                         \"Please Enter Primary KeyStore Password of Carbon Server : \")) != null) {\n-            return String.valueOf(password);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * check whether the configuration file already has been secured\n-     *\n-     * @param firstNode     Root element of configuration file\n-     * @param capitalLetter element name is started with Capital letter or not\n-     * @return true of false\n-     */\n-    private static boolean isSecureVaultNodeExist(Node firstNode, boolean capitalLetter) {\n-\n-        for (int i = 0; i < firstNode.getChildNodes().getLength(); i++) {\n-            if (capitalLetter) {\n-                if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.\n-                                                                           SECURE_VAULT_CAPITAL)) {\n-                    return true;\n-                }\n-            } else {\n-                if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.\n-                                                                           SECURE_VAULT_SIMPLE)) {\n-                    return true;\n-                }\n-            }\n+  /**\n+   * write encrypted values to the cipher-text.properties\n+   */\n+  private static void writeEncryptedValues() {\n \n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * create encrypted values for plain text password defined in cipher-text.properties file.. if not\n-     * read password from command-line\n-     */\n-    private static void createEncryptedValues() {\n-\n-        for (String key : aliasPasswordMap.keySet()) {\n-            String value = aliasPasswordMap.get(key);\n-            if (value != null && !value.equals(\"\")) {\n-                if (value.indexOf(\"[\") >= 0 && value.indexOf(\"]\") > 0) {\n-                    value = value.substring(value.indexOf(\"[\") + 1, value.indexOf(\"]\"));\n-                    aliasPasswordMap.put(key, doEncryption(cipher, value));\n-                }\n-\n-            } else {\n-                value = passwordReader(key);\n-                if (value != null) {\n-                    aliasPasswordMap.put(key, doEncryption(cipher, value));\n-                } else {\n-                    handleException(\"Error : Password does not match\");\n-                }\n-            }\n-        }\n+    Properties properties = new Properties();\n+    for (String key : aliasPasswordMap.keySet()) {\n+      properties.setProperty(key, aliasPasswordMap.get(key));\n     }\n-\n-    /**\n-     * write encrypted values to the cipher-text.properties\n-     */\n-    private static void writeEncryptedValues() {\n-\n-        Properties properties = new Properties();\n-        for (String key : aliasPasswordMap.keySet()) {\n-            properties.setProperty(key, aliasPasswordMap.get(key));\n-        }\n-        writeProperties(properties, CipherToolConstants.CIPHER_PROPERTY_FILE);\n-    }\n-\n-    /**\n-     * write default configurations (primary key store of carbon server is used) to the secret-config file\n-     */\n-    private static void writeConfigurations() {\n-\n-        Properties properties = new Properties();\n-\n-        String keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                             .PRIMARY_KEY_LOCATION);\n-        keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile.indexOf('}')) + 1);\n-        String keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                        .PRIMARY_KEY_TYPE);\n-        String aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                          .PRIMARY_KEY_ALIAS);\n-\n-        properties.setProperty(\"carbon.secretProvider\", CipherToolConstants.SECRET_PROVIDER);\n-        properties.setProperty(\"secretRepositories\", \"file\");\n-        properties.setProperty(\"secretRepositories.file.provider\",\n-                       \"org.wso2.securevault.secret.repository.FileBaseSecretRepositoryProvider\");\n-        properties.setProperty(\"secretRepositories.file.location\", \"repository\" + File.separator +\n-                    \"conf\" + File.separator + \"security\" + File.separator +\"cipher-text.properties\");\n-        properties.setProperty(\"keystore.identity.location\", keyStoreFile);\n-        properties.setProperty(\"keystore.identity.type\", keyType);\n-        properties.setProperty(\"keystore.identity.alias\", aliasName);\n-        properties.setProperty(\"keystore.identity.store.password\", \"identity.store.password\");\n-        properties.setProperty(\"keystore.identity.store.secretProvider\",\n-                CipherToolConstants.CARBON_DEFAULT_SECRET_PROVIDER);\n-        properties.setProperty(\"keystore.identity.key.password\", \"identity.key.password\");\n-        properties.setProperty(\"keystore.identity.key.secretProvider\",\n-                CipherToolConstants.CARBON_DEFAULT_SECRET_PROVIDER);\n-\n-        writeProperties(properties, CipherToolConstants.SECRET_PROPERTY_FILE);\n-\n-        System.out.println(\"\\nSecret Configurations are written to the property file successfully\\n\");\n-    }\n-\n-\n-    /**\n-     * load xpath values for corresponding secret alias defined in the cipher-text.properties\n-     * Some of the Xpath value has been hard coded as constants\n-     */\n-    private static void loadXpathValuesAndPasswordDetails() {\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SSL_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.SSL_KEY_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_PRIVATE_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.PRIMARY_PRIVATE_KEY_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_KEY_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.PRIMARY_KEY_STORE_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_TRUST_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.PRIMARY_TRUST_STORE_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_TRUST_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.LISTENER_TRUST_STORE_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_STORE_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_STORE_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_TRUST_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_TRUST_STORE_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_DB,\n-                          CipherToolConstants.ProtectedPasswordXpath.USER_DB_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_STORE_CONNECTION,\n-                          CipherToolConstants.ProtectedPasswordXpath.USER_STORE_CONNECTION_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.ADMIN,\n-                          CipherToolConstants.ProtectedPasswordXpath.ADMIN_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_EMAIL,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_EMAIL_PASSWORD);\n-\n-        Properties cipherToolProperties = loadProperties(CipherToolConstants.CIPHER_TOOL_PROPERTY_FILE);\n-        for (Object key : cipherToolProperties.keySet()) {\n-            String passwordAlias = (String) key;\n-            aliasXpathMap.put(passwordAlias, cipherToolProperties.getProperty(passwordAlias));\n-        }\n-\n-        Properties cipherTextProperties = loadProperties(CipherToolConstants.CIPHER_PROPERTY_FILE);\n-\n-        for (Object key : cipherTextProperties.keySet()) {\n-            String passwordAlias = (String) key;\n-            if (aliasXpathMap.containsKey(passwordAlias)) {\n-                String unprocessedXpath = aliasXpathMap.get(passwordAlias);\n-                configFileXpathMap.put(passwordAlias, unprocessedXpath);\n-                aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n-            } else {\n-                System.out.println(\"XPath value for secret alias '\" + passwordAlias + \"' \" +\n-                                            \"can not be found \" + \"Please enter XPath manually : \");\n-                String buffer1 = null;\n-                String buffer2 = null;\n-                BufferedReader input1 = new BufferedReader(new InputStreamReader(System.in));\n-                try {\n-                    buffer1 = input1.readLine();\n-                } catch (IOException e) {\n-                    handleException(\"IOError reading command line inputs  \", e);\n-                }\n-\n-                System.out.println(\"Please enter configuration file : \");\n-                BufferedReader input2 = new BufferedReader(new InputStreamReader(System.in));\n-                try {\n-                    buffer2 = input2.readLine();\n-                } catch (IOException e) {\n-                    handleException(\"IOError reading command line inputs  \", e);\n-                }\n-\n-                if (buffer1 != null && !buffer1.trim().equals(\"\") && buffer2 != null &&\n-                    !buffer2.trim().equals(\"\")) {\n-                    configFileXpathMap.put(passwordAlias, buffer1.trim() + buffer2.trim());\n-                    aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n-                }\n-            }\n-        }\n+    writeProperties(properties, CipherToolConstants.CIPHER_PROPERTY_FILE);\n+  }\n+\n+  /**\n+   * write default configurations (primary key store of carbon server is used) to the secret-config file\n+   */\n+  private static void writeConfigurations() {\n+\n+    Properties properties = new Properties();\n+\n+    String keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n+      .PRIMARY_KEY_LOCATION);\n+    keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile.indexOf('}')) + 1);\n+    String keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n+      .PRIMARY_KEY_TYPE);\n+    String aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n+      .PRIMARY_KEY_ALIAS);\n+\n+    properties.setProperty(\"carbon.secretProvider\", CipherToolConstants.SECRET_PROVIDER);\n+    properties.setProperty(\"secretRepositories\", \"file\");\n+    properties.setProperty(\"secretRepositories.file.provider\",\n+      \"org.wso2.securevault.secret.repository.FileBaseSecretRepositoryProvider\");\n+    properties.setProperty(\"secretRepositories.file.location\", \"repository\" + File.separator +\n+      \"conf\" + File.separator + \"security\" + File.separator + \"cipher-text.properties\");\n+    properties.setProperty(\"keystore.identity.location\", keyStoreFile);\n+    properties.setProperty(\"keystore.identity.type\", keyType);\n+    properties.setProperty(\"keystore.identity.alias\", aliasName);\n+    properties.setProperty(\"keystore.identity.store.password\", \"identity.store.password\");\n+    properties.setProperty(\"keystore.identity.store.secretProvider\",\n+      CipherToolConstants.CARBON_DEFAULT_SECRET_PROVIDER);\n+    properties.setProperty(\"keystore.identity.key.password\", \"identity.key.password\");\n+    properties.setProperty(\"keystore.identity.key.secretProvider\",\n+      CipherToolConstants.CARBON_DEFAULT_SECRET_PROVIDER);\n+\n+    writeProperties(properties, CipherToolConstants.SECRET_PROPERTY_FILE);\n+\n+    System.out.println(\"\\nSecret Configurations are written to the property file successfully\\n\");\n+  }\n+\n+\n+  /**\n+   * load xpath values for corresponding secret alias defined in the cipher-text.properties\n+   * Some of the Xpath value has been hard coded as constants\n+   */\n+  private static void loadXpathValuesAndPasswordDetails() {\n+\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.SSL_KEY,\n+      CipherToolConstants.ProtectedPasswordXpath.SSL_KEY_PASSWORD);\n+\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_PRIVATE_KEY,\n+      CipherToolConstants.ProtectedPasswordXpath.PRIMARY_PRIVATE_KEY_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_KEY_STORE,\n+      CipherToolConstants.ProtectedPasswordXpath.PRIMARY_KEY_STORE_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_TRUST_STORE,\n+      CipherToolConstants.ProtectedPasswordXpath.PRIMARY_TRUST_STORE_PASSWORD);\n+\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY,\n+      CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_TRUST_STORE,\n+      CipherToolConstants.ProtectedPasswordXpath.LISTENER_TRUST_STORE_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY_STORE,\n+      CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_STORE_PASSWORD);\n+\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY,\n+      CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY_STORE,\n+      CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_STORE_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_TRUST_STORE,\n+      CipherToolConstants.ProtectedPasswordXpath.SENDER_TRUST_STORE_PASSWORD);\n+\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_DB,\n+      CipherToolConstants.ProtectedPasswordXpath.USER_DB_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_STORE_CONNECTION,\n+      CipherToolConstants.ProtectedPasswordXpath.USER_STORE_CONNECTION_PASSWORD);\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.ADMIN,\n+      CipherToolConstants.ProtectedPasswordXpath.ADMIN_PASSWORD);\n+\n+    aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_EMAIL,\n+      CipherToolConstants.ProtectedPasswordXpath.SENDER_EMAIL_PASSWORD);\n+\n+    Properties cipherToolProperties = loadProperties(CipherToolConstants.CIPHER_TOOL_PROPERTY_FILE);\n+    for (Object key : cipherToolProperties.keySet()) {\n+      String passwordAlias = (String) key;\n+      aliasXpathMap.put(passwordAlias, cipherToolProperties.getProperty(passwordAlias));\n     }\n \n-    /**\n-     * use to change an specific password.\n-     */\n-    private static void changePassword() {\n-        Properties cipherTextProperties = loadProperties(CipherToolConstants.CIPHER_PROPERTY_FILE);\n-        List<String> keyValueList = new ArrayList<String>();\n-        int i = 1;\n-        for (Object key : cipherTextProperties.keySet()) {\n-            String passwordAlias = (String) key;\n-            aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n-            keyValueList.add(passwordAlias);\n-            System.out.println(\"[\" + i + \"] \" + passwordAlias);\n-            i++;\n+    Properties cipherTextProperties = loadProperties(CipherToolConstants.CIPHER_PROPERTY_FILE);\n+\n+    for (Object key : cipherTextProperties.keySet()) {\n+      String passwordAlias = (String) key;\n+      if (aliasXpathMap.containsKey(passwordAlias)) {\n+        String unprocessedXpath = aliasXpathMap.get(passwordAlias);\n+        configFileXpathMap.put(passwordAlias, unprocessedXpath);\n+        aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n+      } else {\n+        System.out.println(\"XPath value for secret alias '\" + passwordAlias + \"' \" +\n+          \"can not be found \" + \"Please enter XPath manually : \");\n+        String buffer1 = null;\n+        String buffer2 = null;\n+        BufferedReader input1 = new BufferedReader(new InputStreamReader(System.in));\n+        try {\n+          buffer1 = input1.readLine();\n+        } catch (IOException e) {\n+          handleException(\"IOError reading command line inputs  \", e);\n         }\n \n-        while (true) {\n-            System.out.println(\"\\nPlease enter the Number which is corresponding to \" +\n-                               \"the Password that is needed be changed [Press Enter to Skip] :\");\n-\n-            String buffer = null;\n-            BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n-            try {\n-                buffer = input.readLine();\n-            } catch (IOException e) {\n-                handleException(\"IOError reading command line inputs  \", e);\n-            }\n-\n-            if (buffer != null && !buffer.trim().equals(\"\")) {\n-                String selectedPasswordAlias = keyValueList.get(Integer.parseInt(buffer.trim()) - 1);\n-                String value = passwordReader(selectedPasswordAlias);\n-                if (value != null) {\n-                    aliasPasswordMap.put(selectedPasswordAlias, doEncryption(cipher, value));\n-                } else {\n-                    handleException(\"Error : Password does not match\");\n-                }\n-\n-            } else {\n-                break;\n-            }\n+        System.out.println(\"Please enter configuration file : \");\n+        BufferedReader input2 = new BufferedReader(new InputStreamReader(System.in));\n+        try {\n+          buffer2 = input2.readLine();\n+        } catch (IOException e) {\n+          handleException(\"IOError reading command line inputs  \", e);\n         }\n \n-        writeEncryptedValues();\n-        System.exit(0);\n+        if (buffer1 != null && !buffer1.trim().equals(\"\") && buffer2 != null &&\n+          !buffer2.trim().equals(\"\")) {\n+          configFileXpathMap.put(passwordAlias, buffer1.trim() + buffer2.trim());\n+          aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * use to change an specific password.\n+   */\n+  private static void changePassword() {\n+    Properties cipherTextProperties = loadProperties(CipherToolConstants.CIPHER_PROPERTY_FILE);\n+    List<String> keyValueList = new ArrayList<String>();\n+    int i = 1;\n+    for (Object key : cipherTextProperties.keySet()) {\n+      String passwordAlias = (String) key;\n+      aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n+      keyValueList.add(passwordAlias);\n+      System.out.println(\"[\" + i + \"] \" + passwordAlias);\n+      i++;\n     }\n \n-    /**\n-     * read values from property file\n-     *\n-     * @param fileName file name\n-     * @return Properties\n-     */\n-    private static Properties loadProperties(String fileName) {\n-        Properties properties = new Properties();\n-        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                          CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n-                          File.separator + fileName;\n-\n-        File dataSourceFile = new File(filePath);\n-        if (!dataSourceFile.exists()) {\n-            return properties;\n+    while (true) {\n+      System.out.println(\"\\nPlease enter the Number which is corresponding to \" +\n+        \"the Password that is needed be changed [Press Enter to Skip] :\");\n+\n+      String buffer = null;\n+      BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n+      try {\n+        buffer = input.readLine();\n+      } catch (IOException e) {\n+        handleException(\"IOError reading command line inputs  \", e);\n+      }\n+\n+      if (buffer != null && !buffer.trim().equals(\"\")) {\n+        String selectedPasswordAlias = keyValueList.get(Integer.parseInt(buffer.trim()) - 1);\n+        String value = passwordReader(selectedPasswordAlias);\n+        if (value != null) {\n+          aliasPasswordMap.put(selectedPasswordAlias, doEncryption(cipher, value));\n+        } else {\n+          handleException(\"Error : Password does not match\");\n         }\n \n-        InputStream in = null;\n-        try {\n-            in = new FileInputStream(dataSourceFile);\n-            properties.load(in);\n-        } catch (IOException e) {\n-            String msg = \"Error loading properties from a file at :\" + filePath;\n-            System.err.println(msg + \" Error : \" + e.getMessage());\n-            return properties;\n-        } finally {\n-            if (in != null) {\n-                try {\n-                    in.close();\n-                } catch (IOException ignored) {\n-                     System.err.println(\"Error while closing input stream\");\n-                }\n-            }\n-        }\n-        return properties;\n+      } else {\n+        break;\n+      }\n     }\n \n-    /**\n-     * writes property values to file\n-     *\n-     * @param properties properties\n-     * @param fileName   FileName\n-     */\n-    private static void writeProperties(Properties properties, String fileName) {\n-\n-        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                          CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n-                          File.separator + fileName;\n+    writeEncryptedValues();\n+    System.exit(0);\n+  }\n+\n+  /**\n+   * read values from property file\n+   *\n+   * @param fileName file name\n+   * @return Properties\n+   */\n+  private static Properties loadProperties(String fileName) {\n+    Properties properties = new Properties();\n+    String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+      CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n+      File.separator + fileName;\n+\n+    File dataSourceFile = new File(filePath);\n+    if (!dataSourceFile.exists()) {\n+      return properties;\n+    }\n \n-        FileOutputStream fileOutputStream = null;\n+    InputStream in = null;\n+    try {\n+      in = new FileInputStream(dataSourceFile);\n+      properties.load(in);\n+    } catch (IOException e) {\n+      String msg = \"Error loading properties from a file at :\" + filePath;\n+      System.err.println(msg + \" Error : \" + e.getMessage());\n+      return properties;\n+    } finally {\n+      if (in != null) {\n         try {\n-            fileOutputStream = new FileOutputStream(filePath);\n-            properties.store(fileOutputStream, null);\n-        } catch (IOException e) {\n-            String msg = \"Error loading properties from a file at :\" + filePath;\n-             System.err.println(msg + \" Error : \" + e.getMessage());\n-        } finally {\n-            try {\n-                if (fileOutputStream != null) {\n-                    fileOutputStream.close();\n-                }\n-            } catch (IOException e) {\n-                System.err.println(\"Error while closing output stream\");\n-            }\n+          in.close();\n+        } catch (IOException ignored) {\n+          System.err.println(\"Error while closing input stream\");\n         }\n-\n+      }\n+    }\n+    return properties;\n+  }\n+\n+  /**\n+   * writes property values to file\n+   *\n+   * @param properties properties\n+   * @param fileName   FileName\n+   */\n+  private static void writeProperties(Properties properties, String fileName) {\n+\n+    String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+      CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n+      File.separator + fileName;\n+\n+    FileOutputStream fileOutputStream = null;\n+    try {\n+      fileOutputStream = new FileOutputStream(filePath);\n+      properties.store(fileOutputStream, null);\n+    } catch (IOException e) {\n+      String msg = \"Error loading properties from a file at :\" + filePath;\n+      System.err.println(msg + \" Error : \" + e.getMessage());\n+    } finally {\n+      try {\n+        if (fileOutputStream != null) {\n+          fileOutputStream.close();\n+        }\n+      } catch (IOException e) {\n+        System.err.println(\"Error while closing output stream\");\n+      }\n     }\n \n+  }\n \n-    protected static void handleException(String msg, Exception e) {\n-        throw new CipherToolException(msg, e);\n-    }\n \n-    protected static void handleException(String msg) {\n-        throw new CipherToolException(msg);\n-    }\n+  protected static void handleException(String msg, Exception e) {\n+    throw new CipherToolException(msg, e);\n+  }\n+\n+  protected static void handleException(String msg) {\n+    throw new CipherToolException(msg);\n+  }\n }\n",
            "diff_size": 1210
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "383",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "459",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "527",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "607",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "608",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "631",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "632",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "633",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "634",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "635",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "636",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "637",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "638",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "639",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "640",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "641",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "642",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "644",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "660",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "739",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "774",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/25/CipherTool.java\nindex 7adeaa71f7f..b06c2f7e83b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/25/CipherTool.java\n@@ -75,8 +75,7 @@ public class CipherTool {\n     private static Cipher cipher;\n \n     public static void main(String[] args) {\n-\n-        init(args);\n+    init(args);\n         cipher = initCipher();\n         if (System.getProperty(\"configure\") != null && System.getProperty(\"configure\").equals(\"true\")) {\n             loadXpathValuesAndPasswordDetails();\n@@ -124,9 +123,7 @@ public class CipherTool {\n                 System.setProperty(property, \"true\");\n             }\n         }\n-\n-\n-        carbonHome = System.getProperty(\"carbon.home\");\n+carbonHome = System.getProperty(\"carbon.home\");\n         if (carbonHome == null || carbonHome.equals(\"\")) {\n             System.out.println(\"\\nCARBON_HOME is not properly set. Please Enter CARBON_HOME again : \");\n             BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n@@ -154,13 +151,12 @@ public class CipherTool {\n         System.out.println(\"Options :\\n\");\n \n         System.out.println(\"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n-                           \" CipherTool replace all \" +\n+\" CipherTool replace all \" +\n                            \"the password listed in cipher-text.properties file with encrypted values \" +\n                            \"and modify related password elements in the configuration files with secret alias names. \" +\n                            \"Also secret-conf.properties file is modified with the default configuration data\");\n-\n-        System.out.println(\"\\t-Dchange\\t\\t This option would allow user to change the specific password \" +\n-                           \"which has been secured\\n\");\n+System.out.println(\"\\t-Dchange\\t\\t This option would allow user to change the specific password \" +\n+        \"which has been secured\\n\");\n     }\n \n     /**\n@@ -177,21 +173,16 @@ public class CipherTool {\n         String provider = null;\n         Cipher cipher = null;\n \n-        keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                      .PRIMARY_KEY_LOCATION);\n-        keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile\n-                                                                    .indexOf('}')) + 1);\n-\n-        File keyStore = new File(keyStoreFile);\n+        keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore.PRIMARY_KEY_LOCATION);\n+keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile.indexOf('}')) + 1);\n+File keyStore = new File(keyStoreFile);\n \n         if (!keyStore.exists()) {\n             handleException(\"Primary Key Store Can not be found at Default location\");\n         }\n-        keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                 .PRIMARY_KEY_TYPE);\n-        aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                   .PRIMARY_KEY_ALIAS);\n-        password = carbonKeyPasswordReader();\n+        keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore.PRIMARY_KEY_TYPE);\n+aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore.PRIMARY_KEY_ALIAS);\n+password = carbonKeyPasswordReader();\n \n         try {\n             KeyStore primaryKeyStore = getKeyStore(keyStoreFile, password, keyType, provider);\n@@ -225,7 +216,7 @@ public class CipherTool {\n         try {\n             byte[] plainTextPassByte = plainTextPass.getBytes();\n             byte[] encryptedPassword = cipher.doFinal(plainTextPassByte);\n-            BASE64Encoder  encoder  = new BASE64Encoder();\n+            BASE64Encoder encoder = new BASE64Encoder();\n             encodedValue = encoder.encode(encryptedPassword);\n         } catch (BadPaddingException e) {\n             handleException(\"Error encrypting password \", e);\n@@ -240,23 +231,20 @@ public class CipherTool {\n      * Print encrypted value for given plain text\n      */\n     private static void createEncryptedValue() {\n-\n-         System.out.println(\"By default, CipherTool can be used for creating encrypted value for given plain text.\" +\n+    System.out.println(\"By default, CipherTool can be used for creating encrypted value for given plain text.\" +\n                  \" For more options visit help  ./ciphertool.sh -help or ./ciphertool.bat -help\\n\");\n-        Console console;\n+Console console;\n         char[] password;\n         String firstPassword = null;\n         String secondPassword = null;\n         if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                             \"Enter Plain text value :\")) != null) {\n-            firstPassword = String.valueOf(password);\n+            (password = console.readPassword(\"[%s]\", \"Enter Plain text value :\")) != null) {\n+    firstPassword = String.valueOf(password);\n         }\n \n         if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                             \"Please Enter value Again :\")) != null) {\n-            secondPassword = String.valueOf(password);\n+            (password = console.readPassword(\"[%s]\", \"Please Enter value Again :\")) != null) {\n+    secondPassword = String.valueOf(password);\n         }\n \n         if (firstPassword != null && secondPassword != null && !firstPassword.equals(\"\")\n@@ -266,8 +254,6 @@ public class CipherTool {\n         } else {\n             handleException(\"Error : Password does not match\");\n         }\n-\n-\n     }\n \n     /**\n@@ -280,11 +266,9 @@ public class CipherTool {\n \n         String nodeValue = null;\n         try {\n-            String carbonConfigFile = carbonHome + File.separator +\n-                                      CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR\n+            String carbonConfigFile = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR\n                                       + File.separator + CipherToolConstants.CARBON_CONFIG_FILE;\n-\n-            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n             DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n             Document doc = docBuilder.parse(carbonConfigFile);\n \n@@ -316,11 +300,9 @@ public class CipherTool {\n      * @param provider      key store provider\n      * @return KeyStore instant\n      */\n-    private static KeyStore getKeyStore(String location, String storePassword,\n-                                        String storeType,\n+    private static KeyStore getKeyStore(String location, String storePassword, String storeType,\n                                         String provider) {\n-\n-        File keyStoreFile = new File(location);\n+    File keyStoreFile = new File(location);\n         if (!keyStoreFile.exists()) {\n             handleException(\"KeyStore can not be found at ' \" + keyStoreFile + \" '\");\n         }\n@@ -394,18 +376,12 @@ public class CipherTool {\n      * @param secretAlias   alias name for the element value\n      * @param capitalLetter element name is started with Capital letter or not\n      */\n-    private static void writeTokenToConfigFile(String fileName, String xPath, String secretAlias,\n-                                               boolean capitalLetter) {\n-\n-\n-\n-        if (xPath != null && !xPath.equals(\"\") && secretAlias != null && !secretAlias.equals(\"\")) {\n+    private static void writeTokenToConfigFile(String fileName, String xPath, String secretAlias, boolean capitalLetter) {\n+    if (xPath != null && !xPath.equals(\"\") && secretAlias != null && !secretAlias.equals(\"\")) {\n             File configFile;\n             try {\n-                String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR\n-                                  + File.separator + CipherToolConstants.CONF_DIR + File.separator + fileName;\n-\n-                configFile = new File(filePath);\n+                String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR + File.separator + fileName;\n+configFile = new File(filePath);\n \n                 if (!configFile.exists()) {\n                     filePath = carbonHome + fileName;\n@@ -430,7 +406,7 @@ public class CipherTool {\n \n \n                 if (!configFile.exists()) {\n-                    filePath = carbonHome +  File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+                    filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n                             CipherToolConstants.CONF_DIR + File.separator +\n                             CipherToolConstants.TOMCAT_DIR + File.separator + fileName;\n                     configFile = new File(filePath);\n@@ -438,14 +414,14 @@ public class CipherTool {\n \n \n                 if (!configFile.exists()) {\n-                    filePath = carbonHome +  File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+                    filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n                             CipherToolConstants.CONF_DIR + File.separator +\n                             CipherToolConstants.ETC_DIR + File.separator + fileName;\n                     configFile = new File(filePath);\n                 }\n \n                 if (!configFile.exists()) {\n-                    filePath = carbonHome +  File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n+                    filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n                             CipherToolConstants.CONF_DIR + File.separator +\n                             CipherToolConstants.DATA_SOURCE_DIRECTORY + File.separator + fileName;\n                     configFile = new File(filePath);\n@@ -468,10 +444,9 @@ public class CipherTool {\n                 XPathFactory xpf = XPathFactory.newInstance();\n                 XPath xp = xpf.newXPath();\n                 XPathExpression xpathEx = xp.compile(xPath);\n-                NodeList securedNodes = (NodeList) xpathEx.evaluate(doc.getDocumentElement(),\n-                                                                            XPathConstants.NODESET);\n-                if (securedNodes != null && securedNodes.getLength() > 0) {\n-                    for(int i = 0; i< securedNodes.getLength(); i++){\n+                NodeList securedNodes = (NodeList) xpathEx.evaluate(doc.getDocumentElement(), XPathConstants.NODESET);\n+if (securedNodes != null && securedNodes.getLength() > 0) {\n+                    for(int i = 0; i < securedNodes.getLength(); i++){\n                         Node secretAliasNode = doc.createAttribute(CipherToolConstants.SECURE_VAULT_ALIAS);\n                         secretAliasNode.setTextContent(secretAlias);\n                         Node node = securedNodes.item(i);\n@@ -481,8 +456,7 @@ public class CipherTool {\n                         }\n                     }\n                 } else {\n-                    handleException(\"Element for secret alias '\" + secretAlias + \"' can not be found in \" +\n-                                    fileName + \" file or You have entered invalid Xpath value\");\n+                    handleException(\"Element for secret alias '\" + secretAlias + \"' can not be found in \" + fileName + \" file or You have entered invalid Xpath value\");\n                 }\n                 TransformerFactory transformerFactory = TransformerFactory.newInstance();\n                 Transformer transformer = transformerFactory.newTransformer();\n@@ -505,9 +479,8 @@ public class CipherTool {\n             } catch (XPathExpressionException e) {\n                 handleException(\"IOError writing protected token  [\"+ secretAlias +\"] to \" +\n                         fileName +\" file \", e);\n-            }\n-\n-             System.out.println(\"Protected Token [\" +secretAlias +\"] is updated in \" + fileName +\n+    }\n+System.out.println(\"Protected Token [\" +secretAlias + \"] is updated in \" + fileName +\n                      \" successfully\\n\");\n         }\n     }\n@@ -525,15 +498,13 @@ public class CipherTool {\n         String firstPassword = null;\n         String secondPassword = null;\n         if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                 \"Enter Password of Secret Alias - '\" + key + \"' :\")) != null) {\n-            firstPassword = String.valueOf(password);\n+            (password = console.readPassword(\"[%s]\", \"Enter Password of Secret Alias - '\" + key + \"' :\")) != null) {\n+    firstPassword = String.valueOf(password);\n         }\n \n         if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                                             \"Please Enter Password Again :\")) != null) {\n-            secondPassword = String.valueOf(password);\n+            (password = console.readPassword(\"[%s]\", \"Please Enter Password Again :\")) != null) {\n+    secondPassword = String.valueOf(password);\n         }\n \n         if (firstPassword != null && secondPassword != null && !firstPassword.equals(\"\")\n@@ -553,9 +524,8 @@ public class CipherTool {\n         Console console;\n         char[] password;\n         if ((console = System.console()) != null &&\n-            (password = console.readPassword(\"[%s]\",\n-                         \"Please Enter Primary KeyStore Password of Carbon Server : \")) != null) {\n-            return String.valueOf(password);\n+            (password = console.readPassword(\"[%s]\", \"Please Enter Primary KeyStore Password of Carbon Server : \")) != null) {\n+    return String.valueOf(password);\n         }\n         return null;\n     }\n@@ -571,14 +541,12 @@ public class CipherTool {\n \n         for (int i = 0; i < firstNode.getChildNodes().getLength(); i++) {\n             if (capitalLetter) {\n-                if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.\n-                                                                           SECURE_VAULT_CAPITAL)) {\n-                    return true;\n+                if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.SECURE_VAULT_CAPITAL)) {\n+    return true;\n                 }\n             } else {\n-                if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.\n-                                                                           SECURE_VAULT_SIMPLE)) {\n-                    return true;\n+                if (firstNode.getChildNodes().item(i).getNodeName().equals(CipherToolConstants.SECURE_VAULT_SIMPLE)) {\n+    return true;\n                 }\n             }\n \n@@ -630,20 +598,14 @@ public class CipherTool {\n \n         Properties properties = new Properties();\n \n-        String keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                             .PRIMARY_KEY_LOCATION);\n-        keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile.indexOf('}')) + 1);\n-        String keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                        .PRIMARY_KEY_TYPE);\n-        String aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore\n-                                                          .PRIMARY_KEY_ALIAS);\n-\n-        properties.setProperty(\"carbon.secretProvider\", CipherToolConstants.SECRET_PROVIDER);\n+        String keyStoreFile = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore.PRIMARY_KEY_LOCATION);\n+keyStoreFile = carbonHome + keyStoreFile.substring((keyStoreFile.indexOf('}')) + 1);\n+        String keyType = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore.PRIMARY_KEY_TYPE);\n+String aliasName = getPrimaryKeyStoreData(CipherToolConstants.PrimaryKeyStore.PRIMARY_KEY_ALIAS);\n+properties.setProperty(\"carbon.secretProvider\", CipherToolConstants.SECRET_PROVIDER);\n         properties.setProperty(\"secretRepositories\", \"file\");\n-        properties.setProperty(\"secretRepositories.file.provider\",\n-                       \"org.wso2.securevault.secret.repository.FileBaseSecretRepositoryProvider\");\n-        properties.setProperty(\"secretRepositories.file.location\", \"repository\" + File.separator +\n-                    \"conf\" + File.separator + \"security\" + File.separator +\"cipher-text.properties\");\n+        properties.setProperty(\"secretRepositories.file.provider\", \"org.wso2.securevault.secret.repository.FileBaseSecretRepositoryProvider\");\n+properties.setProperty(\"secretRepositories.file.location\", \"repository\" + File.separator + \"conf\" + File.separator + \"security\" + File.separator +\"cipher-text.properties\");\n         properties.setProperty(\"keystore.identity.location\", keyStoreFile);\n         properties.setProperty(\"keystore.identity.type\", keyType);\n         properties.setProperty(\"keystore.identity.alias\", aliasName);\n@@ -666,41 +628,21 @@ public class CipherTool {\n      */\n     private static void loadXpathValuesAndPasswordDetails() {\n \n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SSL_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.SSL_KEY_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_PRIVATE_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.PRIMARY_PRIVATE_KEY_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_KEY_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.PRIMARY_KEY_STORE_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_TRUST_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.PRIMARY_TRUST_STORE_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_TRUST_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.LISTENER_TRUST_STORE_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_STORE_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_STORE_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_TRUST_STORE,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_TRUST_STORE_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_DB,\n-                          CipherToolConstants.ProtectedPasswordXpath.USER_DB_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_STORE_CONNECTION,\n-                          CipherToolConstants.ProtectedPasswordXpath.USER_STORE_CONNECTION_PASSWORD);\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.ADMIN,\n-                          CipherToolConstants.ProtectedPasswordXpath.ADMIN_PASSWORD);\n-\n-        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_EMAIL,\n-                          CipherToolConstants.ProtectedPasswordXpath.SENDER_EMAIL_PASSWORD);\n-\n-        Properties cipherToolProperties = loadProperties(CipherToolConstants.CIPHER_TOOL_PROPERTY_FILE);\n+        aliasXpathMap.put(CipherToolConstants.PasswordAlias.SSL_KEY, CipherToolConstants.ProtectedPasswordXpath.SSL_KEY_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_PRIVATE_KEY, CipherToolConstants.ProtectedPasswordXpath.PRIMARY_PRIVATE_KEY_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_KEY_STORE, CipherToolConstants.ProtectedPasswordXpath.PRIMARY_KEY_STORE_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.PRIMARY_TRUST_STORE, CipherToolConstants.ProtectedPasswordXpath.PRIMARY_TRUST_STORE_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY, CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_TRUST_STORE, CipherToolConstants.ProtectedPasswordXpath.LISTENER_TRUST_STORE_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.LISTENER_KEY_STORE, CipherToolConstants.ProtectedPasswordXpath.LISTENER_KEY_STORE_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY, CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_KEY_STORE, CipherToolConstants.ProtectedPasswordXpath.SENDER_KEY_STORE_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_TRUST_STORE, CipherToolConstants.ProtectedPasswordXpath.SENDER_TRUST_STORE_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_DB, CipherToolConstants.ProtectedPasswordXpath.USER_DB_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.USER_STORE_CONNECTION, CipherToolConstants.ProtectedPasswordXpath.USER_STORE_CONNECTION_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.ADMIN, CipherToolConstants.ProtectedPasswordXpath.ADMIN_PASSWORD);\n+aliasXpathMap.put(CipherToolConstants.PasswordAlias.SENDER_EMAIL, CipherToolConstants.ProtectedPasswordXpath.SENDER_EMAIL_PASSWORD);\n+Properties cipherToolProperties = loadProperties(CipherToolConstants.CIPHER_TOOL_PROPERTY_FILE);\n         for (Object key : cipherToolProperties.keySet()) {\n             String passwordAlias = (String) key;\n             aliasXpathMap.put(passwordAlias, cipherToolProperties.getProperty(passwordAlias));\n@@ -715,9 +657,8 @@ public class CipherTool {\n                 configFileXpathMap.put(passwordAlias, unprocessedXpath);\n                 aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias));\n             } else {\n-                System.out.println(\"XPath value for secret alias '\" + passwordAlias + \"' \" +\n-                                            \"can not be found \" + \"Please enter XPath manually : \");\n-                String buffer1 = null;\n+                System.out.println(\"XPath value for secret alias '\" + passwordAlias + \"' \" + \"can not be found \" + \"Please enter XPath manually : \");\n+String buffer1 = null;\n                 String buffer2 = null;\n                 BufferedReader input1 = new BufferedReader(new InputStreamReader(System.in));\n                 try {\n@@ -760,9 +701,8 @@ public class CipherTool {\n \n         while (true) {\n             System.out.println(\"\\nPlease enter the Number which is corresponding to \" +\n-                               \"the Password that is needed be changed [Press Enter to Skip] :\");\n-\n-            String buffer = null;\n+        \"the Password that is needed be changed [Press Enter to Skip] :\");\n+String buffer = null;\n             BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n             try {\n                 buffer = input.readLine();\n@@ -796,11 +736,9 @@ public class CipherTool {\n      */\n     private static Properties loadProperties(String fileName) {\n         Properties properties = new Properties();\n-        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                          CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n+        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n                           File.separator + fileName;\n-\n-        File dataSourceFile = new File(filePath);\n+File dataSourceFile = new File(filePath);\n         if (!dataSourceFile.exists()) {\n             return properties;\n         }\n@@ -833,18 +771,16 @@ public class CipherTool {\n      */\n     private static void writeProperties(Properties properties, String fileName) {\n \n-        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator +\n-                          CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n+        String filePath = carbonHome + File.separator + CipherToolConstants.REPOSITORY_DIR + File.separator + CipherToolConstants.CONF_DIR + File.separator + CipherToolConstants.SECURITY_DIR +\n                           File.separator + fileName;\n-\n-        FileOutputStream fileOutputStream = null;\n+FileOutputStream fileOutputStream = null;\n         try {\n             fileOutputStream = new FileOutputStream(filePath);\n             properties.store(fileOutputStream, null);\n         } catch (IOException e) {\n             String msg = \"Error loading properties from a file at :\" + filePath;\n              System.err.println(msg + \" Error : \" + e.getMessage());\n-        } finally {\n+    } finally {\n             try {\n                 if (fileOutputStream != null) {\n                     fileOutputStream.close();\n@@ -856,12 +792,11 @@ public class CipherTool {\n \n     }\n \n-\n-    protected static void handleException(String msg, Exception e) {\n+protected static void handleException(String msg, Exception e) {\n         throw new CipherToolException(msg, e);\n     }\n \n     protected static void handleException(String msg) {\n         throw new CipherToolException(msg);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 143
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/25/CipherTool.java\nindex 7adeaa71f7f..cdd824f27e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/25/CipherTool.java\n@@ -154,7 +154,7 @@ public class CipherTool {\n         System.out.println(\"Options :\\n\");\n \n         System.out.println(\"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n-                           \" CipherTool replace all \" +\n+            \" CipherTool replace all \" +\n                            \"the password listed in cipher-text.properties file with encrypted values \" +\n                            \"and modify related password elements in the configuration files with secret alias names. \" +\n                            \"Also secret-conf.properties file is modified with the default configuration data\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/25/CipherTool.java\nindex 7adeaa71f7f..ea8348db438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/25/CipherTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/25/CipherTool.java\n@@ -154,7 +154,7 @@ public class CipherTool {\n         System.out.println(\"Options :\\n\");\n \n         System.out.println(\"\\t-Dconfigure\\t\\t This option would allow user to secure plain text passwords in carbon configuration files.\" +\n-                           \" CipherTool replace all \" +\n+                \" CipherTool replace all \" +\n                            \"the password listed in cipher-text.properties file with encrypted values \" +\n                            \"and modify related password elements in the configuration files with secret alias names. \" +\n                            \"Also secret-conf.properties file is modified with the default configuration data\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}