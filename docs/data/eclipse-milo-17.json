{
    "project_name": "eclipse-milo",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "1311",
                "column": "32",
                "severity": "error",
                "message": "'}' at column 32 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "            private UInteger nodeClassMask = uint(0xFF);\n\n            private Builder() {}\n\n            private Builder(BrowseOptions browseOptions) {\n                this.browseDirection = browseOptions.getBrowseDirection();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1311",
                    "column": "32",
                    "severity": "error",
                    "message": "'}' at column 32 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/17/AddressSpace.java\nindex 7c58628eb67..62fa3e2bafe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/17/AddressSpace.java\n@@ -1308,7 +1308,8 @@ public class AddressSpace {\n             private boolean includeSubtypes = true;\n             private UInteger nodeClassMask = uint(0xFF);\n \n-            private Builder() {}\n+            private Builder() {\n+            }\n \n             private Builder(BrowseOptions browseOptions) {\n                 this.browseDirection = browseOptions.getBrowseDirection();\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1311",
                    "column": "32",
                    "severity": "error",
                    "message": "'}' at column 32 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/17/AddressSpace.java\nindex 7c58628eb67..380698eff37 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/17/AddressSpace.java\n@@ -1357,4 +1357,4 @@ public class AddressSpace {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'lambda arguments' has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "537",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 83, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "537",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "539",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 83, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "539",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "541",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 83, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "541",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "543",
                    "severity": "error",
                    "message": "'switch' has incorrect indentation level 83, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "544",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 87, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "545",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 87, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "546",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 91, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "546",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "547",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "548",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "549",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 95, expected level should be 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "549",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "550",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 99, expected level should be 103.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "550",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "551",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 95, expected level should be 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "552",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 99, expected level should be 103.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "552",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "553",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 95, expected level should be 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "554",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 151, expected level should be 95.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "554",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "556",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 91, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "557",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 87, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "559",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 87, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "560",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 28, expected is 91, indentation should be the same level as line 561.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "561",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 91, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "561",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "562",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 87, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "563",
                    "severity": "error",
                    "message": "'switch rcurly' has incorrect indentation level 83, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "564",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 60, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "578",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "580",
                    "severity": "error",
                    "message": "'for' has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "581",
                    "severity": "error",
                    "message": "'for' child has incorrect indentation level 50, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "582",
                    "severity": "error",
                    "message": "'for rcurly' has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "584",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "588",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "626",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "627",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "695",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "699",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "700",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "700",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "701",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "703",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "704",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "705",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "706",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "726",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "769",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "770",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "785",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "786",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "801",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "802",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "818",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "822",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "823",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "838",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "839",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "854",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "855",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "871",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "875",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "876",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "891",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "892",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "908",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "917",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "936",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "943",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "983",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1005",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1012",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1031",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1038",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1082",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1122",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1123",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1148",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/17/AddressSpace.java\nindex 7c58628eb67..3afb05b72d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/17/AddressSpace.java\n@@ -21,7 +21,6 @@ import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n-\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Sets;\n import org.eclipse.milo.opcua.sdk.client.ObjectTypeManager.ObjectNodeConstructor;\n@@ -80,12 +79,12 @@ public class AddressSpace {\n      * @return a {@link UaNode} instance for the Node identified by {@code nodeId}.\n      * @throws UaException if an error occurs while creating the Node.\n      */\n+\n     public UaNode getNode(NodeId nodeId) throws UaException {\n         try {\n             return getNodeAsync(nodeId).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -98,13 +97,15 @@ public class AddressSpace {\n      * @return a CompletableFuture that completes successfully with the UaNode instance or\n      * completes exceptionally if a service-level error occurs.\n      */\n+\n     public CompletableFuture<? extends UaNode> getNodeAsync(NodeId nodeId) {\n         UaNode cachedNode = nodeCache.getIfPresent(nodeId);\n \n         if (cachedNode != null) {\n             return completedFuture(cachedNode);\n         } else {\n-            return createNode(nodeId).whenComplete((node, ex) -> {\n+            return createNode(nodeId).whenComplete(\n+                       (node, ex) -> {\n                 if (node != null) {\n                     nodeCache.put(nodeId, node);\n                 }\n@@ -123,12 +124,12 @@ public class AddressSpace {\n      * @return a {@link UaObjectNode} instance for the ObjectNode identified by {@code nodeId}.\n      * @throws UaException if an error occurs while creating the ObjectNode.\n      */\n+\n     public UaObjectNode getObjectNode(NodeId nodeId) throws UaException {\n         try {\n             return getObjectNodeAsync(nodeId).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -144,12 +145,12 @@ public class AddressSpace {\n      * @return a {@link UaObjectNode} instance for the ObjectNode identified by {@code nodeId}.\n      * @throws UaException if an error occurs while creating the ObjectNode.\n      */\n+\n     public UaObjectNode getObjectNode(NodeId nodeId, NodeId typeDefinitionId) throws UaException {\n         try {\n             return getObjectNodeAsync(nodeId, typeDefinitionId).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -167,6 +168,7 @@ public class AddressSpace {\n      * for the ObjectNode identified by {@code nodeId} or completes exceptionally if an error\n      * occurs creating the ObjectNode.\n      */\n+\n     public CompletableFuture<UaObjectNode> getObjectNodeAsync(NodeId nodeId) {\n         UaNode cachedNode = nodeCache.getIfPresent(nodeId);\n \n@@ -174,7 +176,6 @@ public class AddressSpace {\n             return completedFuture((UaObjectNode) cachedNode);\n         } else {\n             CompletableFuture<NodeId> typeDefinitionFuture = readTypeDefinition(nodeId);\n-\n             return typeDefinitionFuture.thenCompose(typeDefinitionId -> getObjectNodeAsync(nodeId, typeDefinitionId));\n         }\n     }\n@@ -194,6 +195,7 @@ public class AddressSpace {\n      * for the ObjectNode identified by {@code nodeId} or completes exceptionally if an error\n      * occurs creating the ObjectNode.\n      */\n+\n     public CompletableFuture<UaObjectNode> getObjectNodeAsync(NodeId nodeId, NodeId typeDefinitionId) {\n         UaNode cachedNode = nodeCache.getIfPresent(nodeId);\n \n@@ -201,14 +203,12 @@ public class AddressSpace {\n             return completedFuture((UaObjectNode) cachedNode);\n         } else {\n             CompletableFuture<ReadResponse> future = readAttributes(nodeId, AttributeId.OBJECT_ATTRIBUTES);\n-\n             return future.thenApply(response -> {\n                 List<DataValue> attributeValues = l(response.getResults());\n \n                 UaObjectNode node = newObjectNode(nodeId, typeDefinitionId, attributeValues);\n \n                 nodeCache.put(node.getNodeId(), node);\n-\n                 return node;\n             });\n         }\n@@ -225,12 +225,12 @@ public class AddressSpace {\n      * @return a {@link UaVariableNode} instance for the VariableNode identified by {@code nodeId}.\n      * @throws UaException if an error occurs while creating the VariableNode.\n      */\n+\n     public UaVariableNode getVariableNode(NodeId nodeId) throws UaException {\n         try {\n             return getVariableNodeAsync(nodeId).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -246,12 +246,12 @@ public class AddressSpace {\n      * @return a {@link UaVariableNode} instance for the VariableNode identified by {@code nodeId}.\n      * @throws UaException if an error occurs while creating the VariableNode.\n      */\n+\n     public UaVariableNode getVariableNode(NodeId nodeId, NodeId typeDefinitionId) throws UaException {\n         try {\n             return getVariableNodeAsync(nodeId, typeDefinitionId).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -269,6 +269,7 @@ public class AddressSpace {\n      * instance for the VariableNode identified by {@code nodeId} or completes exceptionally if an\n      * error occurs while creating the VariableNode.\n      */\n+\n     public CompletableFuture<UaVariableNode> getVariableNodeAsync(NodeId nodeId) {\n         UaNode cachedNode = nodeCache.getIfPresent(nodeId);\n \n@@ -276,7 +277,6 @@ public class AddressSpace {\n             return completedFuture((UaVariableNode) cachedNode);\n         } else {\n             CompletableFuture<NodeId> typeDefinitionFuture = readTypeDefinition(nodeId);\n-\n             return typeDefinitionFuture.thenCompose(typeDefinitionId -> getVariableNodeAsync(nodeId, typeDefinitionId));\n         }\n     }\n@@ -296,6 +296,7 @@ public class AddressSpace {\n      * instance for the VariableNode identified by {@code nodeId} or completes exceptionally if an\n      * error occurs while creating the VariableNode.\n      */\n+\n     public CompletableFuture<UaVariableNode> getVariableNodeAsync(NodeId nodeId, NodeId typeDefinitionId) {\n         UaNode cachedNode = nodeCache.getIfPresent(nodeId);\n \n@@ -303,14 +304,12 @@ public class AddressSpace {\n             return completedFuture((UaVariableNode) cachedNode);\n         } else {\n             CompletableFuture<ReadResponse> future = readAttributes(nodeId, AttributeId.VARIABLE_ATTRIBUTES);\n-\n             return future.thenApply(response -> {\n                 List<DataValue> attributeValues = l(response.getResults());\n \n                 UaVariableNode node = newVariableNode(nodeId, typeDefinitionId, attributeValues);\n \n                 nodeCache.put(node.getNodeId(), node);\n-\n                 return node;\n             });\n         }\n@@ -324,12 +323,12 @@ public class AddressSpace {\n      * @return a List of {@link ReferenceDescription}s.\n      * @throws UaException if a service-level error occurs.\n      */\n+\n     public List<ReferenceDescription> browse(UaNode node, BrowseOptions browseOptions) throws UaException {\n         try {\n             return browseAsync(node, browseOptions).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -341,12 +340,12 @@ public class AddressSpace {\n      * @return a List of {@link ReferenceDescription}s.\n      * @throws UaException if a service-level error occurs.\n      */\n+\n     public List<ReferenceDescription> browse(NodeId nodeId, BrowseOptions browseOptions) throws UaException {\n         try {\n             return browseAsync(nodeId, browseOptions).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -360,6 +359,7 @@ public class AddressSpace {\n      * @return a CompletableFuture that completes successfully with the List of references or\n      * completes exceptionally if a service-level error occurs.\n      */\n+\n     public CompletableFuture<List<ReferenceDescription>> browseAsync(UaNode node, BrowseOptions browseOptions) {\n         return browseAsync(node.getNodeId(), browseOptions);\n     }\n@@ -374,6 +374,7 @@ public class AddressSpace {\n      * @return a CompletableFuture that completes successfully with the List of references or\n      * completes exceptionally if a service-level error occurs.\n      */\n+\n     public CompletableFuture<List<ReferenceDescription>> browseAsync(NodeId nodeId, BrowseOptions browseOptions) {\n         BrowseDescription browseDescription = new BrowseDescription(\n             nodeId,\n@@ -383,7 +384,6 @@ public class AddressSpace {\n             browseOptions.getNodeClassMask(),\n             uint(BrowseResultMask.All.getValue())\n         );\n-\n         return BrowseHelper.browse(client, browseDescription);\n     }\n \n@@ -399,6 +399,7 @@ public class AddressSpace {\n      * @see #modifyBrowseOptions(Consumer)\n      * @see #setBrowseOptions(BrowseOptions)\n      */\n+\n     public List<? extends UaNode> browseNodes(UaNode node) throws UaException {\n         return browseNodes(node, getBrowseOptions());\n     }\n@@ -411,12 +412,12 @@ public class AddressSpace {\n      * @return a List of {@link UaNode}s referenced by {@code node} given {@code browseOptions}.\n      * @throws UaException if an error occurs while browsing or creating Nodes.\n      */\n+\n     public List<? extends UaNode> browseNodes(UaNode node, BrowseOptions browseOptions) throws UaException {\n         try {\n             return browseNodesAsync(node, browseOptions).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -432,6 +433,7 @@ public class AddressSpace {\n      * @see #modifyBrowseOptions(Consumer)\n      * @see #setBrowseOptions(BrowseOptions)\n      */\n+\n     public List<? extends UaNode> browseNodes(NodeId nodeId) throws UaException {\n         return browseNodes(nodeId, getBrowseOptions());\n     }\n@@ -444,12 +446,12 @@ public class AddressSpace {\n      * @return a List of {@link UaNode}s referenced by {@code nodeId} given {@code browseOptions}.\n      * @throws UaException if an error occurs while browsing or creating Nodes.\n      */\n+\n     public List<? extends UaNode> browseNodes(NodeId nodeId, BrowseOptions browseOptions) throws UaException {\n         try {\n             return browseNodesAsync(nodeId, browseOptions).get();\n         } catch (ExecutionException | InterruptedException e) {\n-            throw UaException.extract(e)\n-                .orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n+            throw UaException.extract(e).orElse(new UaException(StatusCodes.Bad_UnexpectedError, e));\n         }\n     }\n \n@@ -467,6 +469,7 @@ public class AddressSpace {\n      * @see #modifyBrowseOptions(Consumer)\n      * @see #setBrowseOptions(BrowseOptions)\n      */\n+\n     public CompletableFuture<List<? extends UaNode>> browseNodesAsync(UaNode node) {\n         return browseNodesAsync(node.getNodeId());\n     }\n@@ -482,6 +485,7 @@ public class AddressSpace {\n      * referenced by {@code node} given the currently configured {@link BrowseOptions} or completes\n      * exceptionally if a service-level error occurs.\n      */\n+\n     public CompletableFuture<List<? extends UaNode>> browseNodesAsync(UaNode node, BrowseOptions browseOptions) {\n         return browseNodesAsync(node.getNodeId(), browseOptions);\n     }\n@@ -500,6 +504,7 @@ public class AddressSpace {\n      * @see #modifyBrowseOptions(Consumer)\n      * @see #setBrowseOptions(BrowseOptions)\n      */\n+\n     public CompletableFuture<List<? extends UaNode>> browseNodesAsync(NodeId nodeId) {\n         return browseNodesAsync(nodeId, getBrowseOptions());\n     }\n@@ -515,6 +520,7 @@ public class AddressSpace {\n      * referenced by {@code node} given the currently configured {@link BrowseOptions} or completes\n      * exceptionally if a service-level error occurs.\n      */\n+\n     public CompletableFuture<List<? extends UaNode>> browseNodesAsync(NodeId nodeId, BrowseOptions browseOptions) {\n         BrowseDescription browseDescription = new BrowseDescription(\n             nodeId,\n@@ -526,69 +532,60 @@ public class AddressSpace {\n         );\n \n         CompletableFuture<List<ReferenceDescription>> browse = BrowseHelper.browse(client, browseDescription);\n-\n         return browse.thenCompose(references -> {\n-            List<CompletableFuture<? extends UaNode>> cfs = references.stream()\n-                .map(reference -> {\n-                    NodeClass nodeClass = reference.getNodeClass();\n-                    ExpandedNodeId xNodeId = reference.getNodeId();\n-                    ExpandedNodeId xTypeDefinitionId = reference.getTypeDefinition();\n-\n-                    switch (nodeClass) {\n-                        case Object:\n-                        case Variable: {\n-                            CompletableFuture<CompletableFuture<? extends UaNode>> ff =\n-                                toNodeIdAsync(xNodeId).thenCombine(\n-                                    toNodeIdAsync(xTypeDefinitionId),\n-                                    (targetNodeId, typeDefinitionId) -> {\n-                                        if (nodeClass == NodeClass.Object) {\n-                                            return getObjectNodeAsync(targetNodeId, typeDefinitionId);\n-                                        } else {\n-                                            return getVariableNodeAsync(targetNodeId, typeDefinitionId);\n-                                        }\n-                                    }\n-                                );\n-\n-                            return unwrap(ff);\n-                        }\n-                        default: {\n+            List<CompletableFuture<? extends UaNode>> cfs = references.stream().map(reference -> {\n+                                                                                   NodeClass nodeClass = reference.getNodeClass();\n+\n+                                                                                   ExpandedNodeId xNodeId = reference.getNodeId();\n+\n+                                                                                   ExpandedNodeId xTypeDefinitionId = reference.getTypeDefinition();\n+\n+                                                                                   switch (nodeClass) {\n+                                                                                       case Object:\n+                                                                                       case Variable: {\n+                                                                                           CompletableFuture<CompletableFuture<? extends UaNode>> ff = toNodeIdAsync(xNodeId).thenCombine(\n+                                                                                               toNodeIdAsync(xTypeDefinitionId),\n+                                                                                               (targetNodeId, typeDefinitionId) -> {\n+                                                                                               if (nodeClass == NodeClass.Object) {\n+                                                                                                   return getObjectNodeAsync(targetNodeId, typeDefinitionId);\n+                                                                                               } else {\n+                                                                                                   return getVariableNodeAsync(targetNodeId, typeDefinitionId);\n+                                                                                               }\n+                                                                                                                                                       }\n+                                                                                           );\n+                                                                                           return unwrap(ff);\n+                                                                                       }\n+\n+                                                                                       default: {\n                             // TODO specialized getNode for other NodeClasses?\n-                            return toNodeIdAsync(xNodeId).thenCompose(this::getNodeAsync);\n-                        }\n-                    }\n-                })\n-                .collect(Collectors.toList());\n-\n+                                                                                           return toNodeIdAsync(xNodeId).thenCompose(this::getNodeAsync);\n+                                                                                       }\n+                                                                                   }\n+                                                            })\n+                                                                               .collect(Collectors.toList());\n             return sequence(cfs);\n         });\n     }\n \n-    private static CompletableFuture<List<? extends UaNode>> sequence(\n-        List<CompletableFuture<? extends UaNode>> cfs\n-    ) {\n-\n+    private static CompletableFuture<List<? extends UaNode>> sequence(List<CompletableFuture<? extends UaNode>> cfs) {\n         if (cfs.isEmpty()) {\n             return completedFuture(Collections.emptyList());\n         }\n \n         @SuppressWarnings(\"rawtypes\")\n         CompletableFuture[] fa = cfs.toArray(new CompletableFuture[0]);\n-\n         return CompletableFuture.allOf(fa).thenApply(v -> {\n-            List<UaNode> results = new ArrayList<>(cfs.size());\n+                                              List<UaNode> results = new ArrayList<>(cfs.size());\n \n-            for (CompletableFuture<? extends UaNode> cf : cfs) {\n-                results.add(cf.join());\n-            }\n+                                              for (CompletableFuture<? extends UaNode> cf : cfs) {\n+                                                  results.add(cf.join());\n+                                              }\n \n-            return results;\n+                                              return results;\n         });\n     }\n \n-    private static CompletableFuture<? extends UaNode> unwrap(\n-        CompletableFuture<CompletableFuture<? extends UaNode>> future\n-    ) {\n-\n+    private static CompletableFuture<? extends UaNode> unwrap(CompletableFuture<CompletableFuture<? extends UaNode>> future) {\n         return future.thenCompose(node -> node);\n     }\n \n@@ -602,6 +599,7 @@ public class AddressSpace {\n      * @return a {@link NodeId} local to the server, or {@link NodeId#NULL_VALUE} if conversion\n      * could not be completed for any reason.\n      */\n+\n     public NodeId toNodeId(ExpandedNodeId xni) {\n         try {\n             return toNodeIdAsync(xni).get();\n@@ -620,19 +618,13 @@ public class AddressSpace {\n      * @return a {@link NodeId} local to the server, or {@link NodeId#NULL_VALUE} if conversion\n      * could not be completed for any reason.\n      */\n+\n     public CompletableFuture<NodeId> toNodeIdAsync(ExpandedNodeId xni) {\n         // TODO should this fail with Bad_NodeIdUnknown instead of returning NodeId.NULL_VALUE?\n         if (xni.isLocal()) {\n             Optional<NodeId> local = xni.toNodeId(client.getNamespaceTable());\n-\n-            return local.map(CompletableFuture::completedFuture).orElse(\n-                client.readNamespaceTableAsync()\n-                    .thenCompose(\n-                        namespaceTable ->\n-                            completedFuture(xni.toNodeId(namespaceTable).orElse(NodeId.NULL_VALUE))\n-                    )\n-                    .exceptionally(e -> NodeId.NULL_VALUE)\n-            );\n+            return local.map(CompletableFuture::completedFuture).orElse(client.readNamespaceTableAsync().thenCompose(namespaceTable -> completedFuture(xni.toNodeId(namespaceTable).orElse(NodeId.NULL_VALUE)))\n+                                                                                                        .exceptionally(e -> NodeId.NULL_VALUE));\n         } else {\n             return completedFuture(NodeId.NULL_VALUE);\n         }\n@@ -644,6 +636,7 @@ public class AddressSpace {\n      *\n      * @return the default {@link BrowseOptions}.\n      */\n+\n     public synchronized BrowseOptions getBrowseOptions() {\n         return browseOptions;\n     }\n@@ -654,11 +647,11 @@ public class AddressSpace {\n      *\n      * @param builderConsumer a {@link Consumer} that receives a {@link BrowseOptions.Builder}.\n      */\n+\n     public synchronized void modifyBrowseOptions(Consumer<BrowseOptions.Builder> builderConsumer) {\n         BrowseOptions.Builder builder = new BrowseOptions.Builder(browseOptions);\n \n         builderConsumer.accept(builder);\n-\n         setBrowseOptions(builder.build());\n     }\n \n@@ -668,6 +661,7 @@ public class AddressSpace {\n      *\n      * @param browseOptions the new default {@link BrowseOptions}.\n      */\n+\n     public synchronized void setBrowseOptions(BrowseOptions browseOptions) {\n         this.browseOptions = browseOptions;\n     }\n@@ -677,6 +671,7 @@ public class AddressSpace {\n      *\n      * @return the current {@link NodeCache}.\n      */\n+\n     public synchronized NodeCache getNodeCache() {\n         return nodeCache;\n     }\n@@ -686,32 +681,29 @@ public class AddressSpace {\n      *\n      * @param nodeCache a new {@link NodeCache}.\n      */\n+\n     public synchronized void setNodeCache(NodeCache nodeCache) {\n         this.nodeCache = nodeCache;\n     }\n \n     private CompletableFuture<NodeId> readTypeDefinition(NodeId nodeId) {\n         CompletableFuture<BrowseResult> browseFuture = client.browse(new BrowseDescription(\n-            nodeId,\n-            BrowseDirection.Forward,\n-            Identifiers.HasTypeDefinition,\n-            false,\n-            uint(NodeClass.ObjectType.getValue() | NodeClass.VariableType.getValue()),\n-            uint(BrowseResultMask.All.getValue())\n-        ));\n-\n+                                                           nodeId,\n+                                                           BrowseDirection.Forward,\n+                                                           Identifiers.HasTypeDefinition,\n+                                                           false,\n+                                                           uint(NodeClass.ObjectType.getValue() | NodeClass.VariableType.getValue()),\n+                                                           uint(BrowseResultMask.All.getValue())\n+                                                       ));\n         return browseFuture.thenCompose(result -> {\n-            if (result.getStatusCode().isGood()) {\n-                Optional<ExpandedNodeId> typeDefinitionId = Arrays.stream(result.getReferences())\n-                    .filter(r -> Objects.equals(Identifiers.HasTypeDefinition, r.getReferenceTypeId()))\n-                    .map(ReferenceDescription::getNodeId)\n-                    .findFirst();\n-\n-                return typeDefinitionId.map(this::toNodeIdAsync)\n-                    .orElse(completedFuture(NodeId.NULL_VALUE));\n-            } else {\n-                return completedFuture(NodeId.NULL_VALUE);\n-            }\n+                   if (result.getStatusCode().isGood()) {\n+                       Optional<ExpandedNodeId> typeDefinitionId = Arrays.stream(result.getReferences()).filter(r -> Objects.equals(Identifiers.HasTypeDefinition, r.getReferenceTypeId()))\n+                                                                                                        .map(ReferenceDescription::getNodeId)\n+                                                                                                        .findFirst();\n+                       return typeDefinitionId.map(this::toNodeIdAsync).orElse(completedFuture(NodeId.NULL_VALUE));\n+                   } else {\n+                       return completedFuture(NodeId.NULL_VALUE);\n+                   }\n         });\n     }\n \n@@ -722,26 +714,25 @@ public class AddressSpace {\n      * @param nodeId the {@link NodeId} of the Node to create.\n      * @return a {@link UaNode} instance for the Node identified by {@code nodeId}.\n      */\n+\n     private CompletableFuture<? extends UaNode> createNode(NodeId nodeId) {\n         CompletableFuture<ReadResponse> future = readAttributes(nodeId, AttributeId.BASE_ATTRIBUTES);\n-\n         return future.thenCompose(response -> {\n             List<DataValue> results = l(response.getResults());\n-\n             return createNodeFromBaseAttributes(nodeId, results);\n         });\n     }\n \n-    private CompletableFuture<? extends UaNode> createNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n+    private CompletableFuture<? extends UaNode> createNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Integer nodeClassValue = (Integer) baseAttributeValues.get(1).getValue()\n+                                                                     .getValue();\n \n-        Integer nodeClassValue = (Integer) baseAttributeValues.get(1).getValue().getValue();\n         if (nodeClassValue == null) {\n             return FutureUtils.failedUaFuture(StatusCodes.Bad_NodeClassInvalid);\n         }\n+\n         NodeClass nodeClass = NodeClass.from(nodeClassValue);\n+\n         if (nodeClass == null) {\n             return FutureUtils.failedUaFuture(StatusCodes.Bad_NodeClassInvalid);\n         }\n@@ -749,18 +740,25 @@ public class AddressSpace {\n         switch (nodeClass) {\n             case DataType:\n                 return createDataTypeNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case Method:\n                 return createMethodNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case Object:\n                 return createObjectNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case ObjectType:\n                 return createObjectTypeNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case ReferenceType:\n                 return createReferenceTypeNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case Variable:\n                 return createVariableNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case VariableType:\n                 return createVariableTypeNodeFromBaseAttributes(nodeId, baseAttributeValues);\n+\n             case View:\n                 return createViewNodeFromBaseAttributes(nodeId, baseAttributeValues);\n             default:\n@@ -768,263 +766,202 @@ public class AddressSpace {\n         }\n     }\n \n-    private CompletableFuture<UaDataTypeNode> createDataTypeNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.DATA_TYPE_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaDataTypeNode> createDataTypeNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.DATA_TYPE_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n-\n         return attributesFuture.thenApply(response -> {\n             List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n+\n             Collections.addAll(attributeValues, response.getResults());\n \n             UaDataTypeNode node = newDataTypeNode(nodeId, attributeValues);\n \n             nodeCache.put(node.getNodeId(), node);\n-\n             return node;\n         });\n     }\n \n-    private CompletableFuture<UaMethodNode> createMethodNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.METHOD_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaMethodNode> createMethodNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.METHOD_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n-\n         return attributesFuture.thenApply(response -> {\n             List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n+\n             Collections.addAll(attributeValues, response.getResults());\n \n             UaMethodNode node = newMethodNode(nodeId, attributeValues);\n \n             nodeCache.put(node.getNodeId(), node);\n-\n             return node;\n         });\n     }\n \n-    private CompletableFuture<UaObjectNode> createObjectNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.OBJECT_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaObjectNode> createObjectNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.OBJECT_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n \n         CompletableFuture<NodeId> typeDefinitionFuture = readTypeDefinition(nodeId);\n+        return attributesFuture.thenCombine(\n+            typeDefinitionFuture,\n+            (response, typeDefinitionId) -> {\n+                List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n \n-        return attributesFuture.thenCombine(typeDefinitionFuture, (response, typeDefinitionId) -> {\n-            List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n-            Collections.addAll(attributeValues, response.getResults());\n-\n-            UaObjectNode node = newObjectNode(nodeId, typeDefinitionId, attributeValues);\n+                Collections.addAll(attributeValues, response.getResults());\n \n-            nodeCache.put(node.getNodeId(), node);\n+                UaObjectNode node = newObjectNode(nodeId, typeDefinitionId, attributeValues);\n \n-            return node;\n-        });\n+                nodeCache.put(node.getNodeId(), node);\n+                return node;\n+        }\n+        );\n     }\n \n-    private CompletableFuture<UaObjectTypeNode> createObjectTypeNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.OBJECT_TYPE_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaObjectTypeNode> createObjectTypeNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.OBJECT_TYPE_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n-\n         return attributesFuture.thenApply(response -> {\n             List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n+\n             Collections.addAll(attributeValues, response.getResults());\n \n             UaObjectTypeNode node = newObjectTypeNode(nodeId, attributeValues);\n \n             nodeCache.put(node.getNodeId(), node);\n-\n             return node;\n         });\n     }\n \n-    private CompletableFuture<UaReferenceTypeNode> createReferenceTypeNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.REFERENCE_TYPE_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaReferenceTypeNode> createReferenceTypeNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.REFERENCE_TYPE_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n-\n         return attributesFuture.thenApply(response -> {\n             List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n+\n             Collections.addAll(attributeValues, response.getResults());\n \n             UaReferenceTypeNode node = newReferenceTypeNode(nodeId, attributeValues);\n \n             nodeCache.put(node.getNodeId(), node);\n-\n             return node;\n         });\n     }\n \n-    private CompletableFuture<UaVariableNode> createVariableNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.VARIABLE_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaVariableNode> createVariableNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.VARIABLE_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n \n         CompletableFuture<NodeId> typeDefinitionFuture = readTypeDefinition(nodeId);\n+        return attributesFuture.thenCombine(\n+            typeDefinitionFuture,\n+            (response, typeDefinitionId) -> {\n+                List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n \n-        return attributesFuture.thenCombine(typeDefinitionFuture, (response, typeDefinitionId) -> {\n-            List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n-            Collections.addAll(attributeValues, response.getResults());\n-\n-            UaVariableNode node = newVariableNode(nodeId, typeDefinitionId, attributeValues);\n+                Collections.addAll(attributeValues, response.getResults());\n \n-            nodeCache.put(node.getNodeId(), node);\n+                UaVariableNode node = newVariableNode(nodeId, typeDefinitionId, attributeValues);\n \n-            return node;\n-        });\n+                nodeCache.put(node.getNodeId(), node);\n+                return node;\n+        }\n+        );\n     }\n \n-    private CompletableFuture<UaVariableTypeNode> createVariableTypeNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.VARIABLE_TYPE_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaVariableTypeNode> createVariableTypeNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.VARIABLE_TYPE_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n-\n         return attributesFuture.thenApply(response -> {\n             List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n+\n             Collections.addAll(attributeValues, response.getResults());\n \n             UaVariableTypeNode node = newVariableTypeNode(nodeId, attributeValues);\n \n             nodeCache.put(node.getNodeId(), node);\n-\n             return node;\n         });\n     }\n \n-    private CompletableFuture<UaViewNode> createViewNodeFromBaseAttributes(\n-        NodeId nodeId,\n-        List<DataValue> baseAttributeValues\n-    ) {\n-\n-        Set<AttributeId> remainingAttributes = Sets.difference(\n-            AttributeId.VIEW_ATTRIBUTES,\n-            AttributeId.BASE_ATTRIBUTES\n-        );\n+    private CompletableFuture<UaViewNode> createViewNodeFromBaseAttributes(NodeId nodeId, List<DataValue> baseAttributeValues) {\n+        Set<AttributeId> remainingAttributes = Sets.difference(AttributeId.VIEW_ATTRIBUTES, AttributeId.BASE_ATTRIBUTES);\n \n         CompletableFuture<ReadResponse> attributesFuture = readAttributes(nodeId, remainingAttributes);\n-\n         return attributesFuture.thenApply(response -> {\n             List<DataValue> attributeValues = new ArrayList<>(baseAttributeValues);\n+\n             Collections.addAll(attributeValues, response.getResults());\n \n             UaViewNode node = newViewNode(nodeId, attributeValues);\n \n             nodeCache.put(node.getNodeId(), node);\n-\n             return node;\n         });\n     }\n \n     private CompletableFuture<ReadResponse> readAttributes(NodeId nodeId, Set<AttributeId> attributeIds) {\n-        List<ReadValueId> readValueIds = attributeIds.stream()\n-            .map(id ->\n-                new ReadValueId(\n-                    nodeId,\n-                    id.uid(),\n-                    null,\n-                    QualifiedName.NULL_VALUE\n-                )\n-            )\n-            .collect(Collectors.toList());\n-\n+        List<ReadValueId> readValueIds = attributeIds.stream().map(id -> new ReadValueId(nodeId, id.uid(), null, QualifiedName.NULL_VALUE))\n+                                                              .collect(Collectors.toList());\n         return client.read(0.0, TimestampsToReturn.Neither, readValueIds);\n     }\n \n     private UaDataTypeNode newDataTypeNode(NodeId nodeId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.DataType,\n-            \"expected NodeClass.DataType, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.DataType, \"expected NodeClass.DataType, got NodeClass.\" + nodeClass);\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n \n-        Boolean isAbstract = (Boolean) attributeValues.get(7).getValue().getValue();\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n \n-        return new UaDataTypeNode(\n-            client,\n-            nodeId,\n-            nodeClass,\n-            browseName,\n-            displayName,\n-            description,\n-            writeMask,\n-            userWriteMask,\n-            isAbstract\n-        );\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n+\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n+\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n+\n+        Boolean isAbstract = (Boolean) attributeValues.get(7).getValue()\n+                                                             .getValue();\n+        return new UaDataTypeNode(client, nodeId, nodeClass, browseName, displayName, description, writeMask, userWriteMask, isAbstract);\n     }\n \n     private UaMethodNode newMethodNode(NodeId nodeId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.Method,\n-            \"expected NodeClass.Method, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.Method, \"expected NodeClass.Method, got NodeClass.\" + nodeClass);\n+\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n+\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n \n-        Boolean executable = (Boolean) attributeValues.get(7).getValue().getValue();\n-        Boolean userExecutable = (Boolean) attributeValues.get(8).getValue().getValue();\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n \n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n+\n+        Boolean executable = (Boolean) attributeValues.get(7).getValue()\n+                                                             .getValue();\n+\n+        Boolean userExecutable = (Boolean) attributeValues.get(8).getValue()\n+                                                                 .getValue();\n         return new UaMethodNode(\n             client,\n             nodeId,\n@@ -1040,85 +977,89 @@ public class AddressSpace {\n     }\n \n     private UaObjectNode newObjectNode(NodeId nodeId, NodeId typeDefinitionId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.Object,\n-            \"expected NodeClass.Object, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.Object, \"expected NodeClass.Object, got NodeClass.\" + nodeClass);\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n \n-        UByte eventNotifier = (UByte) attributeValues.get(7).getValue().getValue();\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n \n-        ObjectNodeConstructor constructor = client.getObjectTypeManager()\n-            .getNodeConstructor(typeDefinitionId)\n-            .orElse(UaObjectNode::new);\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n \n-        return constructor.apply(\n-            client,\n-            nodeId,\n-            nodeClass,\n-            browseName,\n-            displayName,\n-            description,\n-            writeMask,\n-            userWriteMask,\n-            eventNotifier\n-        );\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n+\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n+\n+        UByte eventNotifier = (UByte) attributeValues.get(7).getValue()\n+                                                            .getValue();\n+\n+        ObjectNodeConstructor constructor = client.getObjectTypeManager().getNodeConstructor(typeDefinitionId)\n+                                                                         .orElse(UaObjectNode::new);\n+        return constructor.apply(client, nodeId, nodeClass, browseName, displayName, description, writeMask, userWriteMask, eventNotifier);\n     }\n \n     private UaObjectTypeNode newObjectTypeNode(NodeId nodeId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.ObjectType,\n-            \"expected NodeClass.ObjectType, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.ObjectType, \"expected NodeClass.ObjectType, got NodeClass.\" + nodeClass);\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n \n-        Boolean isAbstract = (Boolean) attributeValues.get(7).getValue().getValue();\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n \n-        return new UaObjectTypeNode(\n-            client,\n-            nodeId,\n-            nodeClass,\n-            browseName,\n-            displayName,\n-            description,\n-            writeMask,\n-            userWriteMask,\n-            isAbstract\n-        );\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n+\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n+\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n+\n+        Boolean isAbstract = (Boolean) attributeValues.get(7).getValue()\n+                                                             .getValue();\n+        return new UaObjectTypeNode(client, nodeId, nodeClass, browseName, displayName, description, writeMask, userWriteMask, isAbstract);\n     }\n \n     private UaReferenceTypeNode newReferenceTypeNode(NodeId nodeId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.ReferenceType,\n-            \"expected NodeClass.ReferenceType, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.ReferenceType, \"expected NodeClass.ReferenceType, got NodeClass.\" + nodeClass);\n+\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n+\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n+\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n \n-        Boolean isAbstract = (Boolean) attributeValues.get(7).getValue().getValue();\n-        Boolean symmetric = (Boolean) attributeValues.get(8).getValue().getValue();\n-        LocalizedText inverseName = (LocalizedText) attributeValues.get(9).getValue().getValue();\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n \n+        Boolean isAbstract = (Boolean) attributeValues.get(7).getValue()\n+                                                             .getValue();\n+\n+        Boolean symmetric = (Boolean) attributeValues.get(8).getValue()\n+                                                            .getValue();\n+\n+        LocalizedText inverseName = (LocalizedText) attributeValues.get(9).getValue()\n+                                                                          .getValue();\n         return new UaReferenceTypeNode(\n             client,\n             nodeId,\n@@ -1135,32 +1076,51 @@ public class AddressSpace {\n     }\n \n     private UaVariableNode newVariableNode(NodeId nodeId, NodeId typeDefinitionId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.Variable,\n-            \"expected NodeClass.Variable, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.Variable, \"expected NodeClass.Variable, got NodeClass.\" + nodeClass);\n+\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n+\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n+\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n+\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n \n         DataValue value = attributeValues.get(7);\n-        NodeId dataType = (NodeId) attributeValues.get(8).getValue().getValue();\n-        Integer valueRank = (Integer) attributeValues.get(9).getValue().getValue();\n-        UInteger[] arrayDimensions = (UInteger[]) attributeValues.get(10).getValue().getValue();\n-        UByte accessLevel = (UByte) attributeValues.get(11).getValue().getValue();\n-        UByte userAccessLevel = (UByte) attributeValues.get(12).getValue().getValue();\n-        Double minimumSamplingInterval = (Double) attributeValues.get(13).getValue().getValue();\n-        Boolean historizing = (Boolean) attributeValues.get(14).getValue().getValue();\n-\n-        VariableTypeManager.VariableNodeConstructor constructor = client.getVariableTypeManager()\n-            .getNodeConstructor(typeDefinitionId)\n-            .orElse(UaVariableNode::new);\n \n+        NodeId dataType = (NodeId) attributeValues.get(8).getValue()\n+                                                         .getValue();\n+\n+        Integer valueRank = (Integer) attributeValues.get(9).getValue()\n+                                                            .getValue();\n+\n+        UInteger[] arrayDimensions = (UInteger[]) attributeValues.get(10).getValue()\n+                                                                         .getValue();\n+\n+        UByte accessLevel = (UByte) attributeValues.get(11).getValue()\n+                                                           .getValue();\n+\n+        UByte userAccessLevel = (UByte) attributeValues.get(12).getValue()\n+                                                               .getValue();\n+\n+        Double minimumSamplingInterval = (Double) attributeValues.get(13).getValue()\n+                                                                         .getValue();\n+\n+        Boolean historizing = (Boolean) attributeValues.get(14).getValue()\n+                                                               .getValue();\n+\n+        VariableTypeManager.VariableNodeConstructor constructor = client.getVariableTypeManager().getNodeConstructor(typeDefinitionId)\n+                                                                                                 .orElse(UaVariableNode::new);\n         return constructor.apply(\n             client,\n             nodeId,\n@@ -1182,25 +1142,39 @@ public class AddressSpace {\n     }\n \n     private UaVariableTypeNode newVariableTypeNode(NodeId nodeId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.VariableType,\n-            \"expected NodeClass.VariableType, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.VariableType, \"expected NodeClass.VariableType, got NodeClass.\" + nodeClass);\n+\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n+\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n+\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n+\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n \n         DataValue value = attributeValues.get(7);\n-        NodeId dataType = (NodeId) attributeValues.get(8).getValue().getValue();\n-        Integer valueRank = (Integer) attributeValues.get(9).getValue().getValue();\n-        UInteger[] arrayDimensions = (UInteger[]) attributeValues.get(10).getValue().getValue();\n-        Boolean isAbstract = (Boolean) attributeValues.get(11).getValue().getValue();\n \n+        NodeId dataType = (NodeId) attributeValues.get(8).getValue()\n+                                                         .getValue();\n+\n+        Integer valueRank = (Integer) attributeValues.get(9).getValue()\n+                                                            .getValue();\n+\n+        UInteger[] arrayDimensions = (UInteger[]) attributeValues.get(10).getValue()\n+                                                                         .getValue();\n+\n+        Boolean isAbstract = (Boolean) attributeValues.get(11).getValue()\n+                                                              .getValue();\n         return new UaVariableTypeNode(\n             client,\n             nodeId,\n@@ -1219,22 +1193,31 @@ public class AddressSpace {\n     }\n \n     private UaViewNode newViewNode(NodeId nodeId, List<DataValue> attributeValues) {\n-        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue().getValue());\n+        NodeClass nodeClass = NodeClass.from((Integer) attributeValues.get(1).getValue()\n+                                                                             .getValue());\n \n-        Preconditions.checkArgument(\n-            nodeClass == NodeClass.View,\n-            \"expected NodeClass.View, got NodeClass.\" + nodeClass\n-        );\n+        Preconditions.checkArgument(nodeClass == NodeClass.View, \"expected NodeClass.View, got NodeClass.\" + nodeClass);\n+\n+        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue()\n+                                                                         .getValue();\n+\n+        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue()\n+                                                                          .getValue();\n+\n+        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue()\n+                                                                          .getValue();\n \n-        QualifiedName browseName = (QualifiedName) attributeValues.get(2).getValue().getValue();\n-        LocalizedText displayName = (LocalizedText) attributeValues.get(3).getValue().getValue();\n-        LocalizedText description = (LocalizedText) attributeValues.get(4).getValue().getValue();\n-        UInteger writeMask = (UInteger) attributeValues.get(5).getValue().getValue();\n-        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue().getValue();\n+        UInteger writeMask = (UInteger) attributeValues.get(5).getValue()\n+                                                              .getValue();\n \n-        Boolean containsNoLoops = (Boolean) attributeValues.get(7).getValue().getValue();\n-        UByte eventNotifier = (UByte) attributeValues.get(8).getValue().getValue();\n+        UInteger userWriteMask = (UInteger) attributeValues.get(6).getValue()\n+                                                                  .getValue();\n \n+        Boolean containsNoLoops = (Boolean) attributeValues.get(7).getValue()\n+                                                                  .getValue();\n+\n+        UByte eventNotifier = (UByte) attributeValues.get(8).getValue()\n+                                                            .getValue();\n         return new UaViewNode(\n             client,\n             nodeId,\n@@ -1252,8 +1235,11 @@ public class AddressSpace {\n     public static class BrowseOptions {\n \n         private final BrowseDirection browseDirection;\n+\n         private final NodeId referenceTypeId;\n+\n         private final boolean includeSubtypes;\n+\n         private final UInteger nodeClassMask;\n \n         public BrowseOptions() {\n@@ -1263,10 +1249,7 @@ public class AddressSpace {\n         public BrowseOptions(\n             BrowseDirection browseDirection,\n             NodeId referenceTypeId,\n-            boolean includeSubtypes,\n-            UInteger nodeClassMask\n-        ) {\n-\n+            boolean includeSubtypes, UInteger nodeClassMask) {\n             this.browseDirection = browseDirection;\n             this.referenceTypeId = referenceTypeId;\n             this.includeSubtypes = includeSubtypes;\n@@ -1293,7 +1276,6 @@ public class AddressSpace {\n             Builder builder = new Builder(this);\n \n             builderConsumer.accept(builder);\n-\n             return builder.build();\n         }\n \n@@ -1304,11 +1286,16 @@ public class AddressSpace {\n         public static class Builder {\n \n             private BrowseDirection browseDirection = BrowseDirection.Forward;\n+\n             private NodeId referenceTypeId = Identifiers.HierarchicalReferences;\n+\n             private boolean includeSubtypes = true;\n+\n             private UInteger nodeClassMask = uint(0xFF);\n \n-            private Builder() {}\n+            private Builder() {\n+            }\n+\n \n             private Builder(BrowseOptions browseOptions) {\n                 this.browseDirection = browseOptions.getBrowseDirection();\n@@ -1343,9 +1330,11 @@ public class AddressSpace {\n \n             public Builder setNodeClassMask(Set<NodeClass> nodeClasses) {\n                 int mask = 0;\n+\n                 for (NodeClass nodeClass : nodeClasses) {\n                     mask |= nodeClass.getValue();\n                 }\n+\n                 return setNodeClassMask(uint(mask));\n             }\n \n@@ -1357,4 +1346,4 @@ public class AddressSpace {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 534
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1311",
                    "column": "32",
                    "severity": "error",
                    "message": "'}' at column 32 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1313",
                    "severity": "error",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1313",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_three_grams/17/AddressSpace.java\nindex 7c58628eb67..e3b3a9948af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/17/AddressSpace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_three_grams/17/AddressSpace.java\n@@ -1308,9 +1308,9 @@ public class AddressSpace {\n             private boolean includeSubtypes = true;\n             private UInteger nodeClassMask = uint(0xFF);\n \n-            private Builder() {}\n+            private Builder() {\n \n-            private Builder(BrowseOptions browseOptions) {\n+            } private Builder(BrowseOptions browseOptions) {\n                 this.browseDirection = browseOptions.getBrowseDirection();\n                 this.referenceTypeId = browseOptions.getReferenceTypeId();\n                 this.includeSubtypes = browseOptions.isIncludeSubtypes();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}