{
    "project_name": "apache-ignite-3",
    "error_id": "77",
    "information": {
        "errors": [
            {
                "line": "73",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    private final OpCode opCode;\n    private final ParameterizedType type;\n\n    public TypeInstruction(OpCode opCode, ParameterizedType type) {\n        this.opCode = opCode;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/77/TypeInstruction.java\nindex 07c76736b17..c7cd7d611a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/77/TypeInstruction.java\n@@ -70,6 +70,7 @@ public class TypeInstruction\n     }\n \n     private final OpCode opCode;\n+\n     private final ParameterizedType type;\n \n     public TypeInstruction(OpCode opCode, ParameterizedType type) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/77/TypeInstruction.java\nindex 07c76736b17..670fde1bb7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/77/TypeInstruction.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.instruction;\n \n import com.facebook.presto.bytecode.BytecodeNode;\n@@ -33,77 +34,77 @@ import static com.facebook.presto.bytecode.ParameterizedType.type;\n @SuppressWarnings(\"UnusedDeclaration\")\n public class TypeInstruction\n     implements InstructionNode {\n-    public static InstructionNode newObject(Class<?> type) {\n-        return new TypeInstruction(NEW, type(type));\n-    }\n-\n-    public static InstructionNode newObject(ParameterizedType type) {\n-        return new TypeInstruction(NEW, type);\n-    }\n-\n-    public static InstructionNode newPrimitiveArray(ParameterizedType type) {\n-        return new TypeInstruction(NEWARRAY, type);\n-    }\n-\n-    public static InstructionNode newObjectArray(Class<?> type) {\n-        return new TypeInstruction(ANEWARRAY, type(type));\n-    }\n-\n-    public static InstructionNode newObjectArray(ParameterizedType type) {\n-        return new TypeInstruction(ANEWARRAY, type);\n-    }\n-\n-    public static InstructionNode instanceOf(Class<?> type) {\n-        return new TypeInstruction(INSTANCEOF, type(type));\n-    }\n-\n-    public static InstructionNode instanceOf(ParameterizedType type) {\n-        return new TypeInstruction(INSTANCEOF, type);\n-    }\n-\n-    public static InstructionNode cast(Class<?> type) {\n-        return new TypeInstruction(CHECKCAST, type(type));\n-    }\n-\n-    public static InstructionNode cast(ParameterizedType type) {\n-        return new TypeInstruction(CHECKCAST, type);\n-    }\n-\n-    private final OpCode opCode;\n-    private final ParameterizedType type;\n-\n-    public TypeInstruction(OpCode opCode, ParameterizedType type) {\n-        this.opCode = opCode;\n-        this.type = type;\n-    }\n-\n-    @Override\n-    public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n-        if (opCode == NEWARRAY) {\n-            checkState(type.isPrimitive(), \"need primitive type for NEWARRAY\");\n-            visitor.visitIntInsn(opCode.getOpCode(), getPrimitiveArrayType(type));\n-        }\n-        else {\n-            visitor.visitTypeInsn(opCode.getOpCode(), type.getClassName());\n-        }\n-    }\n-\n-    private static int getPrimitiveArrayType(ParameterizedType type) {\n-        return getArrayOpCode(type).getAtype();\n-    }\n-\n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n-        return List.of();\n-    }\n-\n-    @Override\n-    public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n-        return visitor.visitInstruction(parent, this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return opCode + \" \" + type;\n+  public static InstructionNode newObject(Class<?> type) {\n+    return new TypeInstruction(NEW, type(type));\n+  }\n+\n+  public static InstructionNode newObject(ParameterizedType type) {\n+    return new TypeInstruction(NEW, type);\n+  }\n+\n+  public static InstructionNode newPrimitiveArray(ParameterizedType type) {\n+    return new TypeInstruction(NEWARRAY, type);\n+  }\n+\n+  public static InstructionNode newObjectArray(Class<?> type) {\n+    return new TypeInstruction(ANEWARRAY, type(type));\n+  }\n+\n+  public static InstructionNode newObjectArray(ParameterizedType type) {\n+    return new TypeInstruction(ANEWARRAY, type);\n+  }\n+\n+  public static InstructionNode instanceOf(Class<?> type) {\n+    return new TypeInstruction(INSTANCEOF, type(type));\n+  }\n+\n+  public static InstructionNode instanceOf(ParameterizedType type) {\n+    return new TypeInstruction(INSTANCEOF, type);\n+  }\n+\n+  public static InstructionNode cast(Class<?> type) {\n+    return new TypeInstruction(CHECKCAST, type(type));\n+  }\n+\n+  public static InstructionNode cast(ParameterizedType type) {\n+    return new TypeInstruction(CHECKCAST, type);\n+  }\n+\n+  private final OpCode opCode;\n+\n+  private final ParameterizedType type;\n+\n+  public TypeInstruction(OpCode opCode, ParameterizedType type) {\n+    this.opCode = opCode;\n+    this.type = type;\n+  }\n+\n+  @Override\n+  public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n+    if (opCode == NEWARRAY) {\n+      checkState(type.isPrimitive(), \"need primitive type for NEWARRAY\");\n+      visitor.visitIntInsn(opCode.getOpCode(), getPrimitiveArrayType(type));\n+    } else {\n+      visitor.visitTypeInsn(opCode.getOpCode(), type.getClassName());\n     }\n+  }\n+\n+  private static int getPrimitiveArrayType(ParameterizedType type) {\n+    return getArrayOpCode(type).getAtype();\n+  }\n+\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n+    return visitor.visitInstruction(parent, this);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return opCode + \" \" + type;\n+  }\n }\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/77/TypeInstruction.java\nindex 07c76736b17..160d6baa86c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/77/TypeInstruction.java\n@@ -106,4 +106,4 @@ public class TypeInstruction\n     public String toString() {\n         return opCode + \" \" + type;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "74",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "77",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "86",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "103",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "108",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "113",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/77/TypeInstruction.java\nindex 07c76736b17..0737b949f66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/77/TypeInstruction.java\n@@ -30,9 +30,10 @@ import static com.facebook.presto.bytecode.OpCode.NEW;\n import static com.facebook.presto.bytecode.OpCode.NEWARRAY;\n import static com.facebook.presto.bytecode.ParameterizedType.type;\n \n+\n @SuppressWarnings(\"UnusedDeclaration\")\n-public class TypeInstruction\n-    implements InstructionNode {\n+public class TypeInstruction implements InstructionNode {\n+\n     public static InstructionNode newObject(Class<?> type) {\n         return new TypeInstruction(NEW, type(type));\n     }\n@@ -69,18 +70,23 @@ public class TypeInstruction\n         return new TypeInstruction(CHECKCAST, type);\n     }\n \n+\n     private final OpCode opCode;\n+\n+\n     private final ParameterizedType type;\n \n+\n     public TypeInstruction(OpCode opCode, ParameterizedType type) {\n         this.opCode = opCode;\n         this.type = type;\n     }\n \n-    @Override\n-    public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n+\n+    @Override public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n         if (opCode == NEWARRAY) {\n             checkState(type.isPrimitive(), \"need primitive type for NEWARRAY\");\n+\n             visitor.visitIntInsn(opCode.getOpCode(), getPrimitiveArrayType(type));\n         }\n         else {\n@@ -88,22 +94,23 @@ public class TypeInstruction\n         }\n     }\n \n+\n     private static int getPrimitiveArrayType(ParameterizedType type) {\n         return getArrayOpCode(type).getAtype();\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.of();\n     }\n \n-    @Override\n-    public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n+\n+    @Override public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n         return visitor.visitInstruction(parent, this);\n     }\n \n-    @Override\n-    public String toString() {\n+\n+    @Override public String toString() {\n         return opCode + \" \" + type;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/77/TypeInstruction.java\nindex 07c76736b17..c7cd7d611a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/77/TypeInstruction.java\n@@ -70,6 +70,7 @@ public class TypeInstruction\n     }\n \n     private final OpCode opCode;\n+\n     private final ParameterizedType type;\n \n     public TypeInstruction(OpCode opCode, ParameterizedType type) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/77/TypeInstruction.java\nindex 07c76736b17..c7cd7d611a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/77/TypeInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/77/TypeInstruction.java\n@@ -70,6 +70,7 @@ public class TypeInstruction\n     }\n \n     private final OpCode opCode;\n+\n     private final ParameterizedType type;\n \n     public TypeInstruction(OpCode opCode, ParameterizedType type) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}