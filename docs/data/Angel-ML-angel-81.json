{
    "project_name": "Angel-ML-angel",
    "error_id": "81",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/81/ServerCompDenseLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/81/ServerCompDenseLongIntRow.java\nindex 425f244013a..0cc92063a44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/81/ServerCompDenseLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/81/ServerCompDenseLongIntRow.java\n@@ -43,14 +43,14 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n   /**\n    * Create a new ServerCompDenseLongIntRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum, IntIntVector innerRow) {\n+                                   int estElemNum, IntIntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.intIntRow = (IntIntVector) row;\n   }\n@@ -58,14 +58,14 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n   /**\n    * Create a new ServerCompDenseLongIntRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+                                   int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n@@ -121,7 +121,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * Set a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements values\n+   * @param values  elements values\n    */\n   public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n@@ -144,7 +144,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * Add a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements plus values\n+   * @param values  elements plus values\n    */\n   public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n@@ -267,7 +267,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n \n   @Override\n   public ServerRow\n-adaptiveClone() {\n+  adaptiveClone() {\n     startRead();\n     try {\n       return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/81/ServerCompDenseLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/81/ServerCompDenseLongIntRow.java\nindex 425f244013a..a1bf34c85dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/81/ServerCompDenseLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/81/ServerCompDenseLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntIntVector;\n@@ -49,8 +48,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum, IntIntVector innerRow) {\n+  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntIntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.intIntRow = (IntIntVector) row;\n   }\n@@ -64,9 +62,8 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n+  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n+  this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n@@ -175,21 +172,17 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n   @Override\n   public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n-\n-    try {\n+try {\n       switch (updateType) {\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseSparse(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n           updateUseDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -226,8 +219,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     return intIntRow.size();\n   }\n@@ -260,19 +252,18 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n     try {\n       return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n           intIntRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n           intIntRow);\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n@@ -297,11 +288,10 @@ adaptiveClone() {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeInt(initAndGet(in.readInt(), func));\n@@ -329,4 +319,4 @@ adaptiveClone() {\n     super.setSplit(row);\n     intIntRow = (IntIntVector) row;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "279",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/81/ServerCompDenseLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/81/ServerCompDenseLongIntRow.java\nindex 425f244013a..ede6cc74460 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/81/ServerCompDenseLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/81/ServerCompDenseLongIntRow.java\n@@ -32,11 +32,13 @@ import java.io.IOException;\n /**\n  * The row with \"long\" index type and \"int\" value type in PS\n  */\n+\n public class ServerCompDenseLongIntRow extends ServerRow {\n \n   /**\n    * Just a view of \"row\" in ServerRow\n    */\n+\n   private IntIntVector intIntRow;\n \n \n@@ -49,8 +51,8 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum, IntIntVector innerRow) {\n+\n+  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntIntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.intIntRow = (IntIntVector) row;\n   }\n@@ -64,8 +66,8 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+\n+  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n@@ -74,6 +76,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerCompDenseLongIntRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -89,6 +92,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public int get(long index) {\n     return intIntRow.get((int) (index - startCol));\n   }\n@@ -99,6 +103,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(long index, int value) {\n     intIntRow.set((int) (index - startCol), value);\n   }\n@@ -109,6 +114,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public int[] get(long[] indices) {\n     int[] values = new int[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n@@ -123,6 +129,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -136,6 +143,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(long index, int value) {\n     set(index, get(index) + value);\n   }\n@@ -146,6 +154,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -158,6 +167,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    *\n    * @return all element values\n    */\n+\n   private int[] getValues() {\n     return intIntRow.getStorage().getValues();\n   }\n@@ -168,31 +178,29 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    *\n    * @return all element values\n    */\n+\n   public ObjectIterator<Int2IntMap.Entry> getIter() {\n     return intIntRow.getStorage().entryIterator();\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n-\n     try {\n       switch (updateType) {\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseSparse(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n           updateUseDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n-      }\n \n+      }\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -226,7 +234,6 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n     }\n   }\n \n-\n   @Override\n   public int size() {\n     return intIntRow.size();\n@@ -243,6 +250,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n   @Override\n   protected void deserializeRow(ByteBuf buf) {\n     intIntRow = (IntIntVector) row;\n+\n     int[] values = getValues();\n     for (int i = 0; i < size; i++) {\n       values[i] = buf.readInt();\n@@ -258,20 +266,17 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n   public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow.clone());\n+      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, intIntRow.clone());\n     } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow);\n+      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, intIntRow);\n     } finally {\n       endRead();\n     }\n@@ -283,6 +288,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(long index) {\n     return intIntRow.getStorage().hasKey((int) (index - startCol));\n   }\n@@ -297,10 +303,9 @@ adaptiveClone() {\n     }\n   }\n \n-\n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -329,4 +334,5 @@ adaptiveClone() {\n     super.setSplit(row);\n     intIntRow = (IntIntVector) row;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}