{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3067",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3067/ProcedureConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3067/ProcedureConfig.java\nindex f7846b21441..104296ffc00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3067/ProcedureConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3067/ProcedureConfig.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import java.time.ZoneId;\n@@ -35,133 +36,131 @@ import static java.util.Arrays.stream;\n \n public class ProcedureConfig\n {\n-    public static final String PROC_ALLOWED_SETTING_DEFAULT_NAME = \"dbms.security.procedures.default_allowed\";\n-    public static final String PROC_ALLOWED_SETTING_ROLES = \"dbms.security.procedures.roles\";\n-\n-    private static final String ROLES_DELIMITER = \",\";\n-    private static final String SETTING_DELIMITER = \";\";\n-    private static final String MAPPING_DELIMITER = \":\";\n-    private static final String PROCEDURE_DELIMITER = \",\";\n-\n-    private final String defaultValue;\n-    private final List<ProcMatcher> matchers;\n-    private final List<Pattern> accessPatterns;\n-    private final List<Pattern> whiteList;\n-    private final ZoneId defaultTemporalTimeZone;\n-\n-    private ProcedureConfig()\n-    {\n-        this.defaultValue = \"\";\n-        this.matchers = Collections.emptyList();\n-        this.accessPatterns = Collections.emptyList();\n-        this.whiteList = Collections.singletonList( compilePattern( \"*\" ) );\n-        this.defaultTemporalTimeZone = UTC;\n-    }\n-\n-    public ProcedureConfig( Config config )\n-    {\n-        this.defaultValue = config.getValue( PROC_ALLOWED_SETTING_DEFAULT_NAME )\n-                .map( Object::toString )\n-                .orElse( \"\" );\n-\n-        String allowedRoles = config.getValue( PROC_ALLOWED_SETTING_ROLES ).map( Object::toString )\n-                .orElse( \"\" );\n-        this.matchers = Stream.of( allowedRoles.split( SETTING_DELIMITER ) )\n-                .map( procToRoleSpec -> procToRoleSpec.split( MAPPING_DELIMITER ) )\n-                .filter( spec -> spec.length > 1 )\n-                .map( spec ->\n-                {\n-                    String[] roles =\n-                            stream( spec[1].split( ROLES_DELIMITER ) ).map( String::trim ).toArray( String[]::new );\n-                    return new ProcMatcher( spec[0].trim(), roles );\n-                } ).collect( Collectors.toList() );\n-\n-        this.accessPatterns =\n-                parseMatchers( GraphDatabaseSettings.procedure_unrestricted.name(), config, PROCEDURE_DELIMITER,\n-                        ProcedureConfig::compilePattern );\n-        this.whiteList =\n-                parseMatchers( GraphDatabaseSettings.procedure_whitelist.name(), config, PROCEDURE_DELIMITER,\n-                        ProcedureConfig::compilePattern );\n-        this.defaultTemporalTimeZone = config.get( GraphDatabaseSettings.db_temporal_timezone );\n-    }\n-\n-    private <T> List<T> parseMatchers( String configName, Config config, String delimiter, Function<String,T>\n-            matchFunc )\n-    {\n-        String fullAccessProcedures = config.getValue( configName ).map( Object::toString ).orElse( \"\" );\n-        if ( fullAccessProcedures.isEmpty() )\n-        {\n-            return Collections.emptyList();\n-        }\n-        else\n+  public static final String PROC_ALLOWED_SETTING_DEFAULT_NAME = \"dbms.security.procedures.default_allowed\";\n+  public static final String PROC_ALLOWED_SETTING_ROLES = \"dbms.security.procedures.roles\";\n+\n+  private static final String ROLES_DELIMITER = \",\";\n+  private static final String SETTING_DELIMITER = \";\";\n+  private static final String MAPPING_DELIMITER = \":\";\n+  private static final String PROCEDURE_DELIMITER = \",\";\n+\n+  private final String defaultValue;\n+  private final List<ProcMatcher> matchers;\n+  private final List<Pattern> accessPatterns;\n+  private final List<Pattern> whiteList;\n+  private final ZoneId defaultTemporalTimeZone;\n+\n+  private ProcedureConfig()\n+  {\n+    this.defaultValue = \"\";\n+    this.matchers = Collections.emptyList();\n+    this.accessPatterns = Collections.emptyList();\n+    this.whiteList = Collections.singletonList(compilePattern(\"*\"));\n+    this.defaultTemporalTimeZone = UTC;\n+  }\n+\n+  public ProcedureConfig(Config config)\n+  {\n+    this.defaultValue = config.getValue(PROC_ALLOWED_SETTING_DEFAULT_NAME)\n+        .map(Object::toString)\n+        .orElse(\"\");\n+\n+    String allowedRoles = config.getValue(PROC_ALLOWED_SETTING_ROLES).map(Object::toString)\n+        .orElse(\"\");\n+    this.matchers = Stream.of(allowedRoles.split(SETTING_DELIMITER))\n+        .map(procToRoleSpec -> procToRoleSpec.split(MAPPING_DELIMITER))\n+        .filter(spec -> spec.length > 1)\n+        .map(spec ->\n         {\n-            return Stream.of( fullAccessProcedures.split( delimiter ) ).map( matchFunc )\n-                    .collect( Collectors.toList() );\n-        }\n-    }\n-\n-    String[] rolesFor( String procedureName )\n+          String[] roles =\n+              stream(spec[1].split(ROLES_DELIMITER)).map(String::trim).toArray(String[]::new);\n+          return new ProcMatcher(spec[0].trim(), roles);\n+        }).collect(Collectors.toList());\n+\n+    this.accessPatterns =\n+        parseMatchers(GraphDatabaseSettings.procedure_unrestricted.name(), config, PROCEDURE_DELIMITER,\n+            ProcedureConfig::compilePattern);\n+    this.whiteList =\n+        parseMatchers(GraphDatabaseSettings.procedure_whitelist.name(), config, PROCEDURE_DELIMITER,\n+            ProcedureConfig::compilePattern);\n+    this.defaultTemporalTimeZone = config.get(GraphDatabaseSettings.db_temporal_timezone);\n+  }\n+\n+  private <T> List<T> parseMatchers(String configName, Config config, String delimiter, Function<String, T>\n+      matchFunc)\n+  {\n+    String fullAccessProcedures = config.getValue(configName).map(Object::toString).orElse(\"\");\n+    if (fullAccessProcedures.isEmpty())\n     {\n-        String[] wildCardRoles = matchers.stream().filter( matcher -> matcher.matches( procedureName ) )\n-                .map( ProcMatcher::roles ).reduce( new String[0],\n-                        ( acc, next ) -> Stream.concat( stream( acc ), stream( next ) ).toArray( String[]::new ) );\n-        if ( wildCardRoles.length > 0 )\n-        {\n-            return wildCardRoles;\n-        }\n-        else\n-        {\n-            return getDefaultValue();\n-        }\n-    }\n-\n-    boolean fullAccessFor( String procedureName )\n+      return Collections.emptyList();\n+    } else\n     {\n-        return accessPatterns.stream().anyMatch( pattern -> pattern.matcher( procedureName ).matches() );\n+      return Stream.of(fullAccessProcedures.split(delimiter)).map(matchFunc)\n+          .collect(Collectors.toList());\n     }\n-\n-    boolean isWhitelisted( String procedureName )\n+  }\n+\n+  String[] rolesFor(String procedureName)\n+  {\n+    String[] wildCardRoles = matchers.stream().filter(matcher -> matcher.matches(procedureName))\n+        .map(ProcMatcher::roles).reduce(new String[0],\n+            (acc, next) -> Stream.concat(stream(acc), stream(next)).toArray(String[]::new));\n+    if (wildCardRoles.length > 0)\n     {\n-        return whiteList.stream().anyMatch( pattern -> pattern.matcher( procedureName ).matches() );\n-    }\n-\n-    private static Pattern compilePattern( String procedure )\n+      return wildCardRoles;\n+    } else\n     {\n-        procedure = procedure.trim().replaceAll( \"([\\\\[\\\\]\\\\\\\\?()^${}+|.])\", \"\\\\\\\\$1\" );\n-        return Pattern.compile( procedure.replaceAll( \"\\\\*\", \".*\" ) );\n+      return getDefaultValue();\n     }\n-\n-    private String[] getDefaultValue()\n+  }\n+\n+  boolean fullAccessFor(String procedureName)\n+  {\n+    return accessPatterns.stream().anyMatch(pattern -> pattern.matcher(procedureName).matches());\n+  }\n+\n+  boolean isWhitelisted(String procedureName)\n+  {\n+    return whiteList.stream().anyMatch(pattern -> pattern.matcher(procedureName).matches());\n+  }\n+\n+  private static Pattern compilePattern(String procedure)\n+  {\n+    procedure = procedure.trim().replaceAll(\"([\\\\[\\\\]\\\\\\\\?()^${}+|.])\", \"\\\\\\\\$1\");\n+    return Pattern.compile(procedure.replaceAll(\"\\\\*\", \".*\"));\n+  }\n+\n+  private String[] getDefaultValue()\n+  {\n+    return defaultValue == null || defaultValue.isEmpty() ? new String[0] : new String[] {defaultValue};\n+  }\n+\n+  static final ProcedureConfig DEFAULT = new ProcedureConfig();\n+\n+  public ZoneId getDefaultTemporalTimeZone()\n+  {\n+    return defaultTemporalTimeZone;\n+  }\n+\n+  private static class ProcMatcher\n+  {\n+    private final Pattern pattern;\n+    private final String[] roles;\n+\n+    private ProcMatcher(String procedurePattern, String[] roles)\n     {\n-        return defaultValue == null || defaultValue.isEmpty() ? new String[0] : new String[]{defaultValue};\n+      this.pattern = Pattern.compile(procedurePattern.replaceAll(\"\\\\.\", \"\\\\\\\\.\").replaceAll(\"\\\\*\", \".*\"));\n+      this.roles = roles;\n     }\n \n-    static final ProcedureConfig DEFAULT = new ProcedureConfig();\n-\n-    public ZoneId getDefaultTemporalTimeZone()\n+    boolean matches(String procedureName)\n     {\n-        return defaultTemporalTimeZone;\n+      return pattern.matcher(procedureName).matches();\n     }\n \n-    private static class ProcMatcher\n+    String[] roles()\n     {\n-        private final Pattern pattern;\n-        private final String[] roles;\n-\n-        private ProcMatcher( String procedurePattern, String[] roles )\n-        {\n-            this.pattern = Pattern.compile( procedurePattern.replaceAll( \"\\\\.\", \"\\\\\\\\.\" ).replaceAll( \"\\\\*\", \".*\" ) );\n-            this.roles = roles;\n-        }\n-\n-        boolean matches( String procedureName )\n-        {\n-            return pattern.matcher( procedureName ).matches();\n-        }\n-\n-        String[] roles()\n-        {\n-            return roles;\n-        }\n+      return roles;\n     }\n+  }\n }\n",
            "diff_size": 171
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}