{
    "project_name": "graphfoundation-ongdb",
    "error_id": "82",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "124",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/82/QueryStatusResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/82/QueryStatusResult.java\nindex 07308cdf5e9..2fcdea6ca71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/82/QueryStatusResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/82/QueryStatusResult.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.enterprise.builtinprocs;\n \n import java.time.ZoneId;\n@@ -45,138 +46,170 @@ import static org.neo4j.kernel.enterprise.builtinprocs.QueryId.ofInternalId;\n \n public class QueryStatusResult\n {\n-    public final String queryId;\n-    public final String username;\n-    public final Map<String,Object> metaData;\n-    public final String query;\n-    public final Map<String,Object> parameters;\n-    /** @since Neo4j 3.2 */\n-    public final String planner;\n-    /** @since Neo4j 3.2 */\n-    public final String runtime;\n-    /** @since Neo4j 3.2 */\n-    public final List<Map<String,String>> indexes;\n-    public final String startTime;\n-    @Deprecated\n-    public final String elapsedTime;\n-    @Deprecated\n-    public final String connectionDetails;\n-    /** @since Neo4j 3.2 */\n-    public final String protocol;\n-    /** @since Neo4j 3.2 */\n-    public final String clientAddress;\n-    /** @since Neo4j 3.2 */\n-    public final String requestUri;\n-    /** @since Neo4j 3.2 */\n-    public final String status;\n-    /** @since Neo4j 3.2 */\n-    public final Map<String,Object> resourceInformation;\n-    /** @since Neo4j 3.2 */\n-    public final long activeLockCount;\n-    /** @since Neo4j 3.2 */\n-    public final long elapsedTimeMillis; // TODO: this field should be of a Duration type (when Cypher supports that)\n-    /** @since Neo4j 3.2, will be {@code null} if measuring CPU time is not supported. */\n-    public final Long cpuTimeMillis; // TODO: we want this field to be of a Duration type (when Cypher supports that)\n-    /** @since Neo4j 3.2 */\n-    public final long waitTimeMillis; // TODO: we want this field to be of a Duration type (when Cypher supports that)\n-    /** @since Neo4j 3.2 */\n-    public final Long idleTimeMillis; // TODO: we want this field to be of a Duration type (when Cypher supports that)\n-    /** @since Neo4j 3.2, will be {@code null} if measuring allocation is not supported. */\n-    public final Long allocatedBytes;\n-    /** @since Neo4j 3.2 */\n-    public final long pageHits;\n-    /** @since Neo4j 3.2 */\n-    public final long pageFaults;\n+  public final String queryId;\n+  public final String username;\n+  public final Map<String, Object> metaData;\n+  public final String query;\n+  public final Map<String, Object> parameters;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final String planner;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final String runtime;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final List<Map<String, String>> indexes;\n+  public final String startTime;\n+  @Deprecated\n+  public final String elapsedTime;\n+  @Deprecated\n+  public final String connectionDetails;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final String protocol;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final String clientAddress;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final String requestUri;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final String status;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final Map<String, Object> resourceInformation;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final long activeLockCount;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final long elapsedTimeMillis; // TODO: this field should be of a Duration type (when Cypher supports that)\n+  /**\n+   * @since Neo4j 3.2, will be {@code null} if measuring CPU time is not supported.\n+   */\n+  public final Long cpuTimeMillis; // TODO: we want this field to be of a Duration type (when Cypher supports that)\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final long waitTimeMillis; // TODO: we want this field to be of a Duration type (when Cypher supports that)\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final Long idleTimeMillis; // TODO: we want this field to be of a Duration type (when Cypher supports that)\n+  /**\n+   * @since Neo4j 3.2, will be {@code null} if measuring allocation is not supported.\n+   */\n+  public final Long allocatedBytes;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final long pageHits;\n+  /**\n+   * @since Neo4j 3.2\n+   */\n+  public final long pageFaults;\n+\n+  QueryStatusResult(ExecutingQuery query, EmbeddedProxySPI manager, ZoneId zoneId) throws InvalidArgumentsException\n+  {\n+    this(query.snapshot(), manager, zoneId);\n+  }\n \n-    QueryStatusResult( ExecutingQuery query, EmbeddedProxySPI manager, ZoneId zoneId ) throws InvalidArgumentsException\n+  private QueryStatusResult(QuerySnapshot query, EmbeddedProxySPI manager, ZoneId zoneId) throws InvalidArgumentsException\n+  {\n+    this.queryId = ofInternalId(query.internalQueryId()).toString();\n+    this.username = query.username();\n+    this.query = query.queryText();\n+    this.parameters = asRawMap(query.queryParameters(), new ParameterWriter(manager));\n+    this.startTime = formatTime(query.startTimestampMillis(), zoneId);\n+    this.elapsedTimeMillis = query.elapsedTimeMillis();\n+    this.elapsedTime = formatInterval(elapsedTimeMillis);\n+    ClientConnectionInfo clientConnection = query.clientConnection();\n+    this.connectionDetails = clientConnection.asConnectionDetails();\n+    this.protocol = clientConnection.protocol();\n+    this.clientAddress = clientConnection.clientAddress();\n+    this.requestUri = clientConnection.requestURI();\n+    this.metaData = query.transactionAnnotationData();\n+    this.cpuTimeMillis = query.cpuTimeMillis();\n+    this.status = query.status();\n+    this.resourceInformation = query.resourceInformation();\n+    this.activeLockCount = query.activeLockCount();\n+    this.waitTimeMillis = query.waitTimeMillis();\n+    this.idleTimeMillis = query.idleTimeMillis();\n+    this.planner = query.planner();\n+    this.runtime = query.runtime();\n+    this.indexes = query.indexes();\n+    this.allocatedBytes = query.allocatedBytes();\n+    this.pageHits = query.pageHits();\n+    this.pageFaults = query.pageFaults();\n+  }\n+\n+  private Map<String, Object> asRawMap(MapValue mapValue, ParameterWriter writer)\n+  {\n+    HashMap<String, Object> map = new HashMap<>();\n+    mapValue.foreach((s, value) ->\n     {\n-        this( query.snapshot(), manager, zoneId );\n-    }\n+      value.writeTo(writer);\n+      map.put(s, writer.value());\n+    });\n+    return map;\n+  }\n \n-    private QueryStatusResult( QuerySnapshot query, EmbeddedProxySPI manager, ZoneId zoneId ) throws InvalidArgumentsException\n+  private static class ParameterWriter extends BaseToObjectValueWriter<RuntimeException>\n+  {\n+    private final EmbeddedProxySPI nodeManager;\n+\n+    private ParameterWriter(EmbeddedProxySPI nodeManager)\n     {\n-        this.queryId = ofInternalId( query.internalQueryId() ).toString();\n-        this.username = query.username();\n-        this.query = query.queryText();\n-        this.parameters = asRawMap( query.queryParameters(), new ParameterWriter( manager ) );\n-        this.startTime = formatTime( query.startTimestampMillis(), zoneId );\n-        this.elapsedTimeMillis = query.elapsedTimeMillis();\n-        this.elapsedTime = formatInterval( elapsedTimeMillis );\n-        ClientConnectionInfo clientConnection = query.clientConnection();\n-        this.connectionDetails = clientConnection.asConnectionDetails();\n-        this.protocol = clientConnection.protocol();\n-        this.clientAddress = clientConnection.clientAddress();\n-        this.requestUri = clientConnection.requestURI();\n-        this.metaData = query.transactionAnnotationData();\n-        this.cpuTimeMillis = query.cpuTimeMillis();\n-        this.status = query.status();\n-        this.resourceInformation = query.resourceInformation();\n-        this.activeLockCount = query.activeLockCount();\n-        this.waitTimeMillis = query.waitTimeMillis();\n-        this.idleTimeMillis = query.idleTimeMillis();\n-        this.planner = query.planner();\n-        this.runtime = query.runtime();\n-        this.indexes = query.indexes();\n-        this.allocatedBytes = query.allocatedBytes();\n-        this.pageHits = query.pageHits();\n-        this.pageFaults = query.pageFaults();\n+      this.nodeManager = nodeManager;\n     }\n \n-    private Map<String,Object> asRawMap( MapValue mapValue, ParameterWriter writer )\n+    @Override\n+    protected Node newNodeProxyById(long id)\n     {\n-        HashMap<String,Object> map = new HashMap<>();\n-        mapValue.foreach( ( s, value ) ->\n-        {\n-            value.writeTo( writer );\n-            map.put( s, writer.value() );\n-        } );\n-        return map;\n+      return nodeManager.newNodeProxy(id);\n     }\n \n-    private static class ParameterWriter extends BaseToObjectValueWriter<RuntimeException>\n+    @Override\n+    protected Relationship newRelationshipProxyById(long id)\n     {\n-        private final EmbeddedProxySPI nodeManager;\n-\n-        private ParameterWriter( EmbeddedProxySPI nodeManager )\n-        {\n-            this.nodeManager = nodeManager;\n-        }\n+      return nodeManager.newRelationshipProxy(id);\n+    }\n \n+    @Override\n+    protected Point newPoint(CoordinateReferenceSystem crs, double[] coordinate)\n+    {\n+      return new Point()\n+      {\n         @Override\n-        protected Node newNodeProxyById( long id )\n+        public String getGeometryType()\n         {\n-            return nodeManager.newNodeProxy( id );\n+          return \"Point\";\n         }\n \n         @Override\n-        protected Relationship newRelationshipProxyById( long id )\n+        public List<Coordinate> getCoordinates()\n         {\n-            return nodeManager.newRelationshipProxy( id );\n+          return singletonList(new Coordinate(coordinate));\n         }\n \n         @Override\n-        protected Point newPoint( CoordinateReferenceSystem crs, double[] coordinate )\n+        public CRS getCRS()\n         {\n-            return new Point()\n-            {\n-                @Override\n-                public String getGeometryType()\n-                {\n-                    return \"Point\";\n-                }\n-\n-                @Override\n-                public List<Coordinate> getCoordinates()\n-                {\n-                    return singletonList( new Coordinate( coordinate ) );\n-                }\n-\n-                @Override\n-                public CRS getCRS()\n-                {\n-                    return crs;\n-                }\n-            };\n+          return crs;\n         }\n+      };\n     }\n+  }\n }\n",
            "diff_size": 197
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}