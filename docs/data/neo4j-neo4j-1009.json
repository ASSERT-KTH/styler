{
    "project_name": "neo4j-neo4j",
    "error_id": "1009",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1009/ProcedureHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1009/ProcedureHolder.java\nindex 07c58b778f6..8e16f486b3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1009/ProcedureHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1009/ProcedureHolder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.impl;\n \n import java.util.ArrayList;\n@@ -30,50 +31,50 @@ import org.neo4j.internal.kernel.api.procs.QualifiedName;\n \n /**\n  * Simple in memory store for procedures.\n- *\n+ * <p>\n  * Should only be accessed from a single thread\n+ *\n  * @param <T> the type to be stored\n  */\n class ProcedureHolder<T>\n {\n-    private final Map<QualifiedName,Integer> nameToId = new HashMap<>();\n-    private final Map<QualifiedName,Integer> caseInsensitiveName2Id = new HashMap<>();\n+    private final Map<QualifiedName, Integer> nameToId = new HashMap<>();\n+    private final Map<QualifiedName, Integer> caseInsensitiveName2Id = new HashMap<>();\n     private final List<T> store = new ArrayList<>();\n \n-    T get( QualifiedName name )\n+    T get(QualifiedName name)\n     {\n-        Integer id = name2Id( name );\n-        if ( id == null )\n+        Integer id = name2Id(name);\n+        if (id == null)\n         {\n             return null;\n         }\n-        return store.get( id );\n+        return store.get(id);\n     }\n \n-    T get( int id )\n+    T get(int id)\n     {\n-        return store.get( id );\n+        return store.get(id);\n     }\n \n-    void put( QualifiedName name, T item, boolean caseInsensitive )\n+    void put(QualifiedName name, T item, boolean caseInsensitive)\n     {\n         int id = store.size();\n-        store.add( item );\n-        nameToId.put( name, id );\n-        if ( caseInsensitive )\n+        store.add(item);\n+        nameToId.put(name, id);\n+        if (caseInsensitive)\n         {\n-            caseInsensitiveName2Id.put( toLowerCaseName( name ), id );\n-        }\n-        else\n+            caseInsensitiveName2Id.put(toLowerCaseName(name), id);\n+        } else\n         {\n-            caseInsensitiveName2Id.remove( toLowerCaseName( name ) );\n+            caseInsensitiveName2Id.remove(toLowerCaseName(name));\n         }\n     }\n \n-    int idOf( QualifiedName name )\n+    int idOf(QualifiedName name)\n     {\n-        Integer id = name2Id( name );\n-        if ( id == null )\n+        Integer id = name2Id(name);\n+        if (id == null)\n         {\n             throw new NoSuchElementException();\n         }\n@@ -83,29 +84,29 @@ class ProcedureHolder<T>\n \n     List<T> all()\n     {\n-        return Collections.unmodifiableList( store );\n+        return Collections.unmodifiableList(store);\n     }\n \n-    private Integer name2Id( QualifiedName name )\n+    private Integer name2Id(QualifiedName name)\n     {\n-        Integer id = nameToId.get( name );\n-        if ( id == null )\n+        Integer id = nameToId.get(name);\n+        if (id == null)\n         { // Did not find it in the case sensitive lookup - let's check for case insensitive objects\n-            QualifiedName lowerCaseName = toLowerCaseName( name );\n-            id = caseInsensitiveName2Id.get( lowerCaseName );\n+            QualifiedName lowerCaseName = toLowerCaseName(name);\n+            id = caseInsensitiveName2Id.get(lowerCaseName);\n         }\n         return id;\n     }\n \n-    private QualifiedName toLowerCaseName( QualifiedName name )\n+    private QualifiedName toLowerCaseName(QualifiedName name)\n     {\n         String[] oldNs = name.namespace();\n         String[] lowerCaseNamespace = new String[oldNs.length];\n-        for ( int i = 0; i < oldNs.length; i++ )\n+        for (int i = 0; i < oldNs.length; i++)\n         {\n             lowerCaseNamespace[i] = oldNs[i].toLowerCase();\n         }\n         String lowercaseName = name.name().toLowerCase();\n-        return new QualifiedName( lowerCaseNamespace, lowercaseName );\n+        return new QualifiedName(lowerCaseNamespace, lowercaseName);\n     }\n }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}