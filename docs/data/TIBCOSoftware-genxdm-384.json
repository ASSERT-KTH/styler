{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "384",
    "information": {
        "errors": [
            {
                "line": "41",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "{\n\n\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\n\t{\n\t\treturn this;\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/384/ConvertibleStringExpr.java\nindex 449e33b2622..a5240696018 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/384/ConvertibleStringExpr.java\n@@ -38,7 +38,7 @@ public abstract class ConvertibleStringExpr\n     implements StringExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\r\n+public StringExpr makeStringExpr(final StaticContext statEnv)\r\n \t{\r\n \t\treturn this;\r\n \t}\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/384/ConvertibleStringExpr.java\nindex 449e33b2622..21e14b744c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/384/ConvertibleStringExpr.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import org.genxdm.Model;\r\n@@ -33,67 +34,70 @@ import org.genxdm.xpath.v10.StringExpr;\n import org.genxdm.xpath.v10.NodeVariant;\r\n import org.genxdm.xpath.v10.VariantExpr;\r\n \r\n-public abstract class ConvertibleStringExpr \r\n-    extends ConvertibleExprImpl \r\n-    implements StringExpr\r\n-{\r\n+public abstract class ConvertibleStringExpr\r\n+    extends ConvertibleExprImpl\r\n+    implements StringExpr {\r\n \r\n-\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+    public StringExpr makeStringExpr(final StaticContext statEnv) {\r\n+        return this;\r\n+    }\r\n \r\n-\tpublic BooleanExpr makeBooleanExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleBooleanExpr()\r\n-\t\t{\r\n+    public BooleanExpr makeBooleanExpr(final StaticContext statEnv) {\r\n+        return new ConvertibleBooleanExpr() {\r\n             @Override\r\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(model, node, dynEnv));\r\n-\t\t\t}\r\n+            public <N> boolean booleanFunction(Model<N> model, final N node,\r\n+                                               final NodeDynamicContext<N> dynEnv) {\r\n+                return Converter\r\n+                    .toBoolean(ConvertibleStringExpr.this.stringFunction(model, node, dynEnv));\r\n+            }\r\n \r\n             @Override\r\n-            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n+            public boolean booleanFunction(TraversingInformer contextNode,\r\n+                                           TraverserDynamicContext dynEnv) {\r\n+                return Converter\r\n+                    .toBoolean(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n \r\n-\tpublic VariantExpr makeVariantExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n+    public VariantExpr makeVariantExpr(final StaticContext statEnv) {\r\n+        return new ConvertibleVariantExpr() {\r\n             @Override\r\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)  {\r\n-\t\t\t\treturn new StringVariant<N>(ConvertibleStringExpr.this.stringFunction(model, contextNode, dynEnv));\r\n-\t\t\t}\r\n+            public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode,\r\n+                                                        final NodeDynamicContext<N> dynEnv) {\r\n+                return new StringVariant<N>(\r\n+                    ConvertibleStringExpr.this.stringFunction(model, contextNode, dynEnv));\r\n+            }\r\n \r\n             @Override\r\n-            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return new StringVariant<Object>(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n+            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode,\r\n+                                                      TraverserDynamicContext dynEnv) {\r\n+                return new StringVariant<Object>(\r\n+                    ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic ConvertibleNumberExpr makeNumberExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n+    @Override\r\n+    public ConvertibleNumberExpr makeNumberExpr(final StaticContext statEnv) {\r\n+        return new ConvertibleNumberExpr() {\r\n             @Override\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> context)  {\r\n-\t\t\t\treturn Converter.toNumber(ConvertibleStringExpr.this.stringFunction(model, contextNode, context));\r\n-\t\t\t}\r\n+            public <N> double numberFunction(Model<N> model, final N contextNode,\r\n+                                             final NodeDynamicContext<N> context) {\r\n+                return Converter.toNumber(\r\n+                    ConvertibleStringExpr.this.stringFunction(model, contextNode, context));\r\n+            }\r\n \r\n             @Override\r\n-            public double numberFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toNumber(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n+            public double numberFunction(TraversingInformer contextNode,\r\n+                                         TraverserDynamicContext dynEnv) {\r\n+                return Converter\r\n+                    .toNumber(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n \r\n-\tpublic String constantValue()\r\n-\t{\r\n-\t\treturn null;\r\n-\t}\r\n+    public String constantValue() {\r\n+        return null;\r\n+    }\r\n }\r\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/384/ConvertibleStringExpr.java\nindex 449e33b2622..d3911697ccb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/384/ConvertibleStringExpr.java\n@@ -36,64 +36,65 @@ import org.genxdm.xpath.v10.VariantExpr;\n public abstract class ConvertibleStringExpr \r\n     extends ConvertibleExprImpl \r\n     implements StringExpr\r\n-{\r\n-\r\n-\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n+{\n+    public StringExpr makeStringExpr(final StaticContext statEnv)\r\n+\t{\n+    return this;\n+    }\r\n \r\n \tpublic BooleanExpr makeBooleanExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleBooleanExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(model, node, dynEnv));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+\t{\n+    return new ConvertibleBooleanExpr()\r\n+\t\t{\n+    @Override\n+public <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n+    return Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(model, node, dynEnv));\n+    }\n+\n+@Override\r\n             public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n                 return Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+            }\n+    };\n+    }\r\n \r\n \tpublic VariantExpr makeVariantExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)  {\r\n-\t\t\t\treturn new StringVariant<N>(ConvertibleStringExpr.this.stringFunction(model, contextNode, dynEnv));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+\t{\n+    return new ConvertibleVariantExpr()\r\n+\t\t{\n+    @Override\n+public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)\n+{\n+    return new StringVariant<N>(ConvertibleStringExpr.this.stringFunction(model, contextNode, dynEnv));\n+    }\n+\n+@Override\r\n             public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n                 return new StringVariant<Object>(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+            }\n+    };\n+    }\r\n \r\n \t@Override\r\n \tpublic ConvertibleNumberExpr makeNumberExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> context)  {\r\n-\t\t\t\treturn Converter.toNumber(ConvertibleStringExpr.this.stringFunction(model, contextNode, context));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+\t{\n+    return new ConvertibleNumberExpr()\r\n+\t\t{\n+    @Override\n+public <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> context)\n+{\n+    return Converter.toNumber(ConvertibleStringExpr.this.stringFunction(model, contextNode, context));\n+    }\n+\n+@Override\r\n             public double numberFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n                 return Converter.toNumber(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n+            }\n+    };\n+    }\r\n \r\n \tpublic String constantValue()\r\n-\t{\r\n-\t\treturn null;\r\n-\t}\r\n-}\r\n+\t{\n+    return null;\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/384/ConvertibleStringExpr.java\nindex 449e33b2622..0552b658b62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/384/ConvertibleStringExpr.java\n@@ -18,82 +18,88 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.nodes.TraversingInformer;\r\n-import org.genxdm.processor.xpath.v10.variants.StringVariant;\r\n-import org.genxdm.xpath.v10.BooleanExpr;\r\n-import org.genxdm.xpath.v10.Converter;\r\n-import org.genxdm.xpath.v10.TraverserDynamicContext;\r\n-import org.genxdm.xpath.v10.TraverserVariant;\r\n-import org.genxdm.xpath.v10.NodeDynamicContext;\r\n-import org.genxdm.xpath.v10.StaticContext;\r\n-import org.genxdm.xpath.v10.StringExpr;\r\n-import org.genxdm.xpath.v10.NodeVariant;\r\n-import org.genxdm.xpath.v10.VariantExpr;\r\n-\r\n-public abstract class ConvertibleStringExpr \r\n-    extends ConvertibleExprImpl \r\n-    implements StringExpr\r\n-{\r\n-\r\n-\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn this;\r\n-\t}\r\n-\r\n-\tpublic BooleanExpr makeBooleanExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleBooleanExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(model, node, dynEnv));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n-            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-\r\n-\tpublic VariantExpr makeVariantExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleVariantExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)  {\r\n-\t\t\t\treturn new StringVariant<N>(ConvertibleStringExpr.this.stringFunction(model, contextNode, dynEnv));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n-            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return new StringVariant<Object>(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic ConvertibleNumberExpr makeNumberExpr(final StaticContext statEnv)\r\n-\t{\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-            @Override\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> context)  {\r\n-\t\t\t\treturn Converter.toNumber(ConvertibleStringExpr.this.stringFunction(model, contextNode, context));\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n-            public double numberFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-                return Converter.toNumber(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-\r\n-\tpublic String constantValue()\r\n-\t{\r\n-\t\treturn null;\r\n-\t}\r\n-}\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.nodes.TraversingInformer;\n+import org.genxdm.processor.xpath.v10.variants.StringVariant;\n+import org.genxdm.xpath.v10.BooleanExpr;\n+import org.genxdm.xpath.v10.Converter;\n+import org.genxdm.xpath.v10.TraverserDynamicContext;\n+import org.genxdm.xpath.v10.TraverserVariant;\n+import org.genxdm.xpath.v10.NodeDynamicContext;\n+import org.genxdm.xpath.v10.StaticContext;\n+import org.genxdm.xpath.v10.StringExpr;\n+import org.genxdm.xpath.v10.NodeVariant;\n+import org.genxdm.xpath.v10.VariantExpr;\n+\n+public abstract class ConvertibleStringExpr extends ConvertibleExprImpl implements StringExpr\n+{\n+    public StringExpr makeStringExpr(final StaticContext statEnv)\n+    {\n+        return this;\n+    }\n+\n+    public BooleanExpr makeBooleanExpr(final StaticContext statEnv)\n+    {\n+        return new ConvertibleBooleanExpr()\n+        {\n+\n+            @Override\n+            public <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(model, node, dynEnv));\n+            }\n+\n+            @Override\n+            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return Converter.toBoolean(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\n+            }\n+        };\n+    }\n+\n+    public VariantExpr makeVariantExpr(final StaticContext statEnv)\n+    {\n+        return new ConvertibleVariantExpr()\n+        {\n+\n+            @Override\n+            public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return new StringVariant<N>(ConvertibleStringExpr.this.stringFunction(model, contextNode, dynEnv));\n+            }\n+\n+            @Override\n+            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return new StringVariant<Object>(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public ConvertibleNumberExpr makeNumberExpr(final StaticContext statEnv)\n+    {\n+        return new ConvertibleNumberExpr()\n+        {\n+\n+            @Override\n+            public <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> context)\n+            {\n+                return Converter.toNumber(ConvertibleStringExpr.this.stringFunction(model, contextNode, context));\n+            }\n+\n+            @Override\n+            public double numberFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return Converter.toNumber(ConvertibleStringExpr.this.stringFunction(contextNode, dynEnv));\n+            }\n+        };\n+    }\n+\n+    public String constantValue()\n+    {\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 85
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/384/ConvertibleStringExpr.java\nindex 449e33b2622..a5240696018 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/384/ConvertibleStringExpr.java\n@@ -38,7 +38,7 @@ public abstract class ConvertibleStringExpr\n     implements StringExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\r\n+public StringExpr makeStringExpr(final StaticContext statEnv)\r\n \t{\r\n \t\treturn this;\r\n \t}\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/384/ConvertibleStringExpr.java\nindex 449e33b2622..a5240696018 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/384/ConvertibleStringExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/384/ConvertibleStringExpr.java\n@@ -38,7 +38,7 @@ public abstract class ConvertibleStringExpr\n     implements StringExpr\r\n {\r\n \r\n-\tpublic StringExpr makeStringExpr(final StaticContext statEnv)\r\n+public StringExpr makeStringExpr(final StaticContext statEnv)\r\n \t{\r\n \t\treturn this;\r\n \t}\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}