{
    "project_name": "IQSS-dataverse",
    "error_id": "37",
    "information": {
        "errors": [
            {
                "line": "56",
                "column": "13",
                "severity": "error",
                "message": "'{' at column 13 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "            varsInGroups = new HashSet<DataVariable>();\n            for (int i=0; i< parts.length; i++)\n            {\n                long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n                DataVariable dv = new DataVariable();\n                dv.setId(varId);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/37/VariableMetadataDDIParser.java\nindex 19a12503262..5244dcaa95e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/37/VariableMetadataDDIParser.java\n@@ -52,8 +52,7 @@ public class VariableMetadataDDIParser {\n             vars = vars.trim();\n             String[] parts = vars.split(\" \");\n             varsInGroups = new HashSet<DataVariable>();\n-            for (int i=0; i< parts.length; i++)\n-            {\n+            for (int i=0; i< parts.length; i++) {\n                 long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n                 DataVariable dv = new DataVariable();\n                 dv.setId(varId);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/37/VariableMetadataDDIParser.java\nindex 19a12503262..f6f2abf2efb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/37/VariableMetadataDDIParser.java\n@@ -14,277 +14,281 @@ import java.util.HashSet;\n public class VariableMetadataDDIParser {\n \n \n-    public static final String LEVEL_VARIABLE = \"variable\";\n-    public static final String LEVEL_CATEGORY = \"category\";\n-    public static final String CAT_STAT_TYPE_FREQUENCY = \"freq\";\n-    public static final String CAT_STAT_WGTD_FREQUENCY = \"wgtd\";\n+  public static final String LEVEL_VARIABLE = \"variable\";\n+  public static final String LEVEL_CATEGORY = \"category\";\n+  public static final String CAT_STAT_TYPE_FREQUENCY = \"freq\";\n+  public static final String CAT_STAT_WGTD_FREQUENCY = \"wgtd\";\n \n \n-    public VariableMetadataDDIParser () {\n-    }\n+  public VariableMetadataDDIParser() {\n+  }\n+\n+  public void processDataDscr(XMLStreamReader xmlr, Map<Long, VariableMetadata> mapVarToVarMet,\n+                              Map<Long, VarGroup> varGroupMap) throws XMLStreamException {\n \n-    public void processDataDscr(XMLStreamReader xmlr, Map<Long,VariableMetadata> mapVarToVarMet, Map<Long,VarGroup> varGroupMap) throws XMLStreamException {\n-\n-        for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n-            if (event == XMLStreamConstants.START_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"varGrp\")) {\n-                    processVarGrp(xmlr, varGroupMap);\n-                } else {\n-                    if (xmlr.getLocalName().equals(\"var\")) {\n-                        processVar(xmlr, mapVarToVarMet);\n-                    }\n-                }\n-            }\n+    for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n+      if (event == XMLStreamConstants.START_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"varGrp\")) {\n+          processVarGrp(xmlr, varGroupMap);\n+        } else {\n+          if (xmlr.getLocalName().equals(\"var\")) {\n+            processVar(xmlr, mapVarToVarMet);\n+          }\n         }\n+      }\n+    }\n \n+  }\n+\n+  private void processVarGrp(XMLStreamReader xmlr, Map<Long, VarGroup> varGroupMap) throws XMLStreamException {\n+    String _id_v = xmlr.getAttributeValue(null, \"ID\");\n+    String _id = _id_v.replace(\"VG\", \"\");\n+    long id = Long.parseLong(_id);\n+    VarGroup vg = new VarGroup();\n+    vg.setId(id);\n+    Set<DataVariable> varsInGroups = null;\n+\n+    String vars = xmlr.getAttributeValue(null, \"var\");\n+    if (vars != null) {\n+      vars = vars.trim();\n+      String[] parts = vars.split(\" \");\n+      varsInGroups = new HashSet<DataVariable>();\n+      for (int i = 0; i < parts.length; i++) {\n+        long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n+        DataVariable dv = new DataVariable();\n+        dv.setId(varId);\n+        varsInGroups.add(dv);\n+      }\n     }\n \n-    private  void processVarGrp(XMLStreamReader xmlr , Map<Long,VarGroup> varGroupMap) throws XMLStreamException {\n-        String _id_v = xmlr.getAttributeValue(null, \"ID\");\n-        String _id = _id_v.replace(\"VG\", \"\");\n-        long id = Long.parseLong(_id);\n-        VarGroup vg = new VarGroup();\n-        vg.setId(id);\n-        Set<DataVariable> varsInGroups = null;\n-\n-        String vars =  xmlr.getAttributeValue(null, \"var\");\n-        if (vars != null) {\n-            vars = vars.trim();\n-            String[] parts = vars.split(\" \");\n-            varsInGroups = new HashSet<DataVariable>();\n-            for (int i=0; i< parts.length; i++)\n-            {\n-                long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n-                DataVariable dv = new DataVariable();\n-                dv.setId(varId);\n-                varsInGroups.add(dv);\n-            }\n+    for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n+      if (event == XMLStreamConstants.START_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"labl\")) {\n+          processLabel(xmlr, vg);\n         }\n-\n-        for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n-            if (event == XMLStreamConstants.START_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"labl\")) {\n-                    processLabel(xmlr, vg);\n-                }\n-            } else if (event == XMLStreamConstants.END_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"varGrp\")) {\n-                    vg.setVarsInGroup(varsInGroups);\n-                    varGroupMap.put(id, vg);\n-                    return;\n-                }\n-            }\n+      } else if (event == XMLStreamConstants.END_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"varGrp\")) {\n+          vg.setVarsInGroup(varsInGroups);\n+          varGroupMap.put(id, vg);\n+          return;\n         }\n+      }\n     }\n+  }\n \n-    private void processVar(XMLStreamReader xmlr,  Map<Long, VariableMetadata> mapVarToVarMet ) throws XMLStreamException {\n+  private void processVar(XMLStreamReader xmlr, Map<Long, VariableMetadata> mapVarToVarMet) throws XMLStreamException {\n \n-        String _id_v = xmlr.getAttributeValue(null, \"ID\");\n-        String _id = _id_v.replace(\"v\", \"\");\n+    String _id_v = xmlr.getAttributeValue(null, \"ID\");\n+    String _id = _id_v.replace(\"v\", \"\");\n \n-        long id = Long.parseLong(_id);\n-        DataVariable dv = new DataVariable();\n-        dv.setId(id);\n+    long id = Long.parseLong(_id);\n+    DataVariable dv = new DataVariable();\n+    dv.setId(id);\n \n-        FileMetadata fm = new FileMetadata();\n+    FileMetadata fm = new FileMetadata();\n \n-        VariableMetadata newVM = new VariableMetadata(dv,fm);\n+    VariableMetadata newVM = new VariableMetadata(dv, fm);\n \n-        String wgt =  xmlr.getAttributeValue(null, \"wgt\");\n-        if (wgt != null && wgt.equals(\"wgt\")) {\n-            newVM.setIsweightvar(true);\n-        } else {\n-            newVM.setIsweightvar(false);\n-        }\n+    String wgt = xmlr.getAttributeValue(null, \"wgt\");\n+    if (wgt != null && wgt.equals(\"wgt\")) {\n+      newVM.setIsweightvar(true);\n+    } else {\n+      newVM.setIsweightvar(false);\n+    }\n \n-        String wgt_var =  xmlr.getAttributeValue(null, \"wgt-var\");\n-        if (wgt_var != null && wgt_var.startsWith(\"v\")) {\n-            long wgt_id = Long.parseLong(wgt_var.replace(\"v\", \"\"));\n-            DataVariable weightVariable = new DataVariable();\n-            weightVariable.setId(wgt_id);\n-            newVM.setWeightvariable(weightVariable);\n-            newVM.setWeighted(true);\n+    String wgt_var = xmlr.getAttributeValue(null, \"wgt-var\");\n+    if (wgt_var != null && wgt_var.startsWith(\"v\")) {\n+      long wgt_id = Long.parseLong(wgt_var.replace(\"v\", \"\"));\n+      DataVariable weightVariable = new DataVariable();\n+      weightVariable.setId(wgt_id);\n+      newVM.setWeightvariable(weightVariable);\n+      newVM.setWeighted(true);\n+\n+    } else {\n+      newVM.setWeightvariable(null);\n+      newVM.setWeighted(false);\n+    }\n \n-        } else {\n-            newVM.setWeightvariable(null);\n-            newVM.setWeighted(false);\n+    for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n+      if (event == XMLStreamConstants.START_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"labl\")) {\n+          processLabel(xmlr, newVM);\n+        } else if (xmlr.getLocalName().equals(\"qstn\")) {\n+          processQstn(xmlr, newVM);\n+        } else if (xmlr.getLocalName().equals(\"universe\")) {\n+          processUniverse(xmlr, newVM);\n+        } else if (xmlr.getLocalName().equals(\"notes\")) {\n+          processNote(xmlr, newVM);\n+        } else if (xmlr.getLocalName().equals(\"catgry\")) {\n+          processCatgry(xmlr, newVM);\n         }\n \n-        for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n-            if (event == XMLStreamConstants.START_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"labl\")) {\n-                    processLabel(xmlr, newVM);\n-                } else if (xmlr.getLocalName().equals(\"qstn\")) {\n-                    processQstn(xmlr, newVM);\n-                } else if (xmlr.getLocalName().equals(\"universe\")) {\n-                    processUniverse(xmlr, newVM);\n-                } else if (xmlr.getLocalName().equals(\"notes\")) {\n-                    processNote(xmlr, newVM);\n-                }  else if (xmlr.getLocalName().equals(\"catgry\")) {\n-                    processCatgry(xmlr, newVM);\n-                }\n-\n-            } else if (event == XMLStreamConstants.END_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"var\")) {\n-                        newVM.setDataVariable(dv);\n-                        mapVarToVarMet.put(id,newVM);\n-                    return;\n-                }\n-            }\n+      } else if (event == XMLStreamConstants.END_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"var\")) {\n+          newVM.setDataVariable(dv);\n+          mapVarToVarMet.put(id, newVM);\n+          return;\n         }\n+      }\n     }\n+  }\n \n-    private void processLabel (XMLStreamReader xmlr, VarGroup vg ) throws XMLStreamException {\n-        String labl = parseText(xmlr);\n-        vg.setLabel(labl);\n+  private void processLabel(XMLStreamReader xmlr, VarGroup vg) throws XMLStreamException {\n+    String labl = parseText(xmlr);\n+    vg.setLabel(labl);\n \n-        return;\n-    }\n-\n-    private void processLabel (XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n+    return;\n+  }\n \n-        if (LEVEL_VARIABLE.equalsIgnoreCase( xmlr.getAttributeValue(null, \"level\") ) ) {\n-            String lable = parseText(xmlr, false);\n-            if (lable != null && !lable.isEmpty()) {\n-                newVM.setLabel(lable);\n-            }\n+  private void processLabel(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n \n-        }\n+    if (LEVEL_VARIABLE.equalsIgnoreCase(xmlr.getAttributeValue(null, \"level\"))) {\n+      String lable = parseText(xmlr, false);\n+      if (lable != null && !lable.isEmpty()) {\n+        newVM.setLabel(lable);\n+      }\n \n-        return;\n     }\n \n-    private void processQstn(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n-\n-        for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n-            if (event == XMLStreamConstants.START_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"qstnLit\")) {\n-                    String text = parseText(xmlr, false);\n-                    newVM.setLiteralquestion(text);\n-\n-                } else if (xmlr.getLocalName().equals(\"ivuInstr\")) {\n-                    String text = parseText(xmlr, false);\n-                    newVM.setInterviewinstruction(text);\n-                } else if (xmlr.getLocalName().equals(\"postQTxt\")) {\n-                    String text = parseText(xmlr, false);\n-                    newVM.setPostquestion(text);\n-                }\n-            } else if (event == XMLStreamConstants.END_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"qstn\")) return;\n-            }\n+    return;\n+  }\n+\n+  private void processQstn(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n+\n+    for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n+      if (event == XMLStreamConstants.START_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"qstnLit\")) {\n+          String text = parseText(xmlr, false);\n+          newVM.setLiteralquestion(text);\n+\n+        } else if (xmlr.getLocalName().equals(\"ivuInstr\")) {\n+          String text = parseText(xmlr, false);\n+          newVM.setInterviewinstruction(text);\n+        } else if (xmlr.getLocalName().equals(\"postQTxt\")) {\n+          String text = parseText(xmlr, false);\n+          newVM.setPostquestion(text);\n         }\n+      } else if (event == XMLStreamConstants.END_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"qstn\")) {\n+          return;\n+        }\n+      }\n     }\n+  }\n \n-    private void processUniverse (XMLStreamReader xmlr, VariableMetadata newVM ) throws XMLStreamException {\n-        String universe = parseText(xmlr);\n-        newVM.setUniverse(universe);\n+  private void processUniverse(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n+    String universe = parseText(xmlr);\n+    newVM.setUniverse(universe);\n \n-        return;\n-    }\n+    return;\n+  }\n \n-    private void processNote (XMLStreamReader xmlr,  VariableMetadata newVM) throws XMLStreamException {\n+  private void processNote(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n \n-        String unf_type =  xmlr.getAttributeValue(null, \"type\");\n-        String note = parseText(xmlr,false);\n+    String unf_type = xmlr.getAttributeValue(null, \"type\");\n+    String note = parseText(xmlr, false);\n \n-        if (unf_type == null )  {\n-            newVM.setNotes(note);\n-        }\n-        return;\n+    if (unf_type == null) {\n+      newVM.setNotes(note);\n     }\n-\n-    private void processCatgry(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n-\n-        CategoryMetadata cm = null;\n-        VariableCategory cat = new VariableCategory();\n-\n-        for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n-            if (event == XMLStreamConstants.START_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"labl\")) {\n-                    String _labl = processLabl(xmlr, LEVEL_CATEGORY);\n-                    if (_labl != null && !_labl.isEmpty()) {\n-                        cat.setLabel(_labl);\n-                    }\n-                } else if (xmlr.getLocalName().equals(\"catValu\")) {\n-                    cat.setValue(parseText(xmlr, false));\n-                } else if (xmlr.getLocalName().equals(\"catStat\")){\n-                    cm = processCatStat(xmlr, cat);\n-                    if (cm != null) {\n-                        cm.setVariableMetadata(newVM);\n-                        cm.setCategory(cat);\n-                        newVM.getCategoriesMetadata().add(cm);\n-                    }\n-                }\n-\n-            } else if (event == XMLStreamConstants.END_ELEMENT) {\n-                if (xmlr.getLocalName().equals(\"catgry\")) return;\n-            }\n+    return;\n+  }\n+\n+  private void processCatgry(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n+\n+    CategoryMetadata cm = null;\n+    VariableCategory cat = new VariableCategory();\n+\n+    for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n+      if (event == XMLStreamConstants.START_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"labl\")) {\n+          String _labl = processLabl(xmlr, LEVEL_CATEGORY);\n+          if (_labl != null && !_labl.isEmpty()) {\n+            cat.setLabel(_labl);\n+          }\n+        } else if (xmlr.getLocalName().equals(\"catValu\")) {\n+          cat.setValue(parseText(xmlr, false));\n+        } else if (xmlr.getLocalName().equals(\"catStat\")) {\n+          cm = processCatStat(xmlr, cat);\n+          if (cm != null) {\n+            cm.setVariableMetadata(newVM);\n+            cm.setCategory(cat);\n+            newVM.getCategoriesMetadata().add(cm);\n+          }\n         }\n-    }\n \n-    private CategoryMetadata processCatStat(XMLStreamReader xmlr, VariableCategory cat) throws XMLStreamException {\n-        CategoryMetadata cm = null;\n-        String type = xmlr.getAttributeValue(null, \"type\");\n-        String wgtd = xmlr.getAttributeValue(null, \"wgtd\");\n-        if (type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) && wgtd == null) {\n-                        String _freq = parseText(xmlr);\n-                        if (_freq != null && !_freq.isEmpty()) {\n-                            cat.setFrequency(new Double(_freq));\n-                        }\n-        } else if (wgtd != null && type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) &&\n-                            CAT_STAT_WGTD_FREQUENCY.equalsIgnoreCase(wgtd)) {\n-                        cm = new CategoryMetadata();\n-                        String wfreq = parseText(xmlr);\n-                        if (wfreq != null && !wfreq.isEmpty()) {\n-                            cm.setWfreq(new Double(wfreq));\n-                        }\n+      } else if (event == XMLStreamConstants.END_ELEMENT) {\n+        if (xmlr.getLocalName().equals(\"catgry\")) {\n+          return;\n         }\n-        return cm;\n+      }\n     }\n-\n-    private String processLabl(XMLStreamReader xmlr, String level) throws XMLStreamException {\n-        if (level.equalsIgnoreCase( xmlr.getAttributeValue(null, \"level\") ) ) {\n-            return parseText(xmlr);\n-        } else {\n-            return null;\n-        }\n+  }\n+\n+  private CategoryMetadata processCatStat(XMLStreamReader xmlr, VariableCategory cat) throws XMLStreamException {\n+    CategoryMetadata cm = null;\n+    String type = xmlr.getAttributeValue(null, \"type\");\n+    String wgtd = xmlr.getAttributeValue(null, \"wgtd\");\n+    if (type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) && wgtd == null) {\n+      String _freq = parseText(xmlr);\n+      if (_freq != null && !_freq.isEmpty()) {\n+        cat.setFrequency(new Double(_freq));\n+      }\n+    } else if (wgtd != null && type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) &&\n+      CAT_STAT_WGTD_FREQUENCY.equalsIgnoreCase(wgtd)) {\n+      cm = new CategoryMetadata();\n+      String wfreq = parseText(xmlr);\n+      if (wfreq != null && !wfreq.isEmpty()) {\n+        cm.setWfreq(new Double(wfreq));\n+      }\n     }\n-\n-    private String parseText(XMLStreamReader xmlr) throws XMLStreamException {\n-        return parseText(xmlr,true);\n+    return cm;\n+  }\n+\n+  private String processLabl(XMLStreamReader xmlr, String level) throws XMLStreamException {\n+    if (level.equalsIgnoreCase(xmlr.getAttributeValue(null, \"level\"))) {\n+      return parseText(xmlr);\n+    } else {\n+      return null;\n     }\n+  }\n \n-    private String parseText(XMLStreamReader xmlr, boolean scrubText) throws XMLStreamException {\n-        String tempString = getElementText(xmlr);\n-        if (scrubText) {\n-            tempString = tempString.trim().replace('\\n',' ');\n-        }\n-        return tempString;\n+  private String parseText(XMLStreamReader xmlr) throws XMLStreamException {\n+    return parseText(xmlr, true);\n+  }\n+\n+  private String parseText(XMLStreamReader xmlr, boolean scrubText) throws XMLStreamException {\n+    String tempString = getElementText(xmlr);\n+    if (scrubText) {\n+      tempString = tempString.trim().replace('\\n', ' ');\n     }\n+    return tempString;\n+  }\n \n-    private String getElementText(XMLStreamReader xmlr) throws XMLStreamException {\n-        if(xmlr.getEventType() != XMLStreamConstants.START_ELEMENT) {\n-            throw new XMLStreamException(\"parser must be on START_ELEMENT to read next text\", xmlr.getLocation());\n-        }\n-        int eventType = xmlr.next();\n-        StringBuilder content = new StringBuilder();\n-        while(eventType != XMLStreamConstants.END_ELEMENT ) {\n-            if(eventType == XMLStreamConstants.CHARACTERS\n-                    || eventType == XMLStreamConstants.CDATA\n-                    || eventType == XMLStreamConstants.SPACE) {\n-                content.append(xmlr.getText());\n-            } else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION\n-                    || eventType == XMLStreamConstants.COMMENT\n-                    || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\n-                // skipping\n-            } else if(eventType == XMLStreamConstants.END_DOCUMENT) {\n-                throw new XMLStreamException(\"unexpected end of document when reading element text content\");\n-            } else if(eventType == XMLStreamConstants.START_ELEMENT) {\n-                throw new XMLStreamException(\"element text content may not contain START_ELEMENT\", xmlr.getLocation());\n-            } else {\n-                throw new XMLStreamException(\"Unexpected event type \"+eventType, xmlr.getLocation());\n-            }\n-            eventType = xmlr.next();\n-        }\n-        return content.toString();\n+  private String getElementText(XMLStreamReader xmlr) throws XMLStreamException {\n+    if (xmlr.getEventType() != XMLStreamConstants.START_ELEMENT) {\n+      throw new XMLStreamException(\"parser must be on START_ELEMENT to read next text\", xmlr.getLocation());\n+    }\n+    int eventType = xmlr.next();\n+    StringBuilder content = new StringBuilder();\n+    while (eventType != XMLStreamConstants.END_ELEMENT) {\n+      if (eventType == XMLStreamConstants.CHARACTERS\n+        || eventType == XMLStreamConstants.CDATA\n+        || eventType == XMLStreamConstants.SPACE) {\n+        content.append(xmlr.getText());\n+      } else if (eventType == XMLStreamConstants.PROCESSING_INSTRUCTION\n+        || eventType == XMLStreamConstants.COMMENT\n+        || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\n+        // skipping\n+      } else if (eventType == XMLStreamConstants.END_DOCUMENT) {\n+        throw new XMLStreamException(\"unexpected end of document when reading element text content\");\n+      } else if (eventType == XMLStreamConstants.START_ELEMENT) {\n+        throw new XMLStreamException(\"element text content may not contain START_ELEMENT\", xmlr.getLocation());\n+      } else {\n+        throw new XMLStreamException(\"Unexpected event type \" + eventType, xmlr.getLocation());\n+      }\n+      eventType = xmlr.next();\n     }\n+    return content.toString();\n+  }\n }\n",
            "diff_size": 303
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/37/VariableMetadataDDIParser.java\nindex 19a12503262..379096e6a14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/37/VariableMetadataDDIParser.java\n@@ -1,8 +1,6 @@\n package edu.harvard.iq.dataverse.datavariable;\n \n-\n import edu.harvard.iq.dataverse.FileMetadata;\n-\n import javax.xml.stream.XMLStreamConstants;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n@@ -13,18 +11,17 @@ import java.util.HashSet;\n \n public class VariableMetadataDDIParser {\n \n-\n     public static final String LEVEL_VARIABLE = \"variable\";\n+\n     public static final String LEVEL_CATEGORY = \"category\";\n-    public static final String CAT_STAT_TYPE_FREQUENCY = \"freq\";\n-    public static final String CAT_STAT_WGTD_FREQUENCY = \"wgtd\";\n \n+    public static final String CAT_STAT_TYPE_FREQUENCY = \"freq\";\n \n-    public VariableMetadataDDIParser () {\n-    }\n+    public static final String CAT_STAT_WGTD_FREQUENCY = \"wgtd\";\n \n-    public void processDataDscr(XMLStreamReader xmlr, Map<Long,VariableMetadata> mapVarToVarMet, Map<Long,VarGroup> varGroupMap) throws XMLStreamException {\n+    public VariableMetadataDDIParser() {}\n \n+    public void processDataDscr(XMLStreamReader xmlr, Map<Long, VariableMetadata> mapVarToVarMet, Map<Long, VarGroup> varGroupMap) throws XMLStreamException {\n         for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n             if (event == XMLStreamConstants.START_ELEMENT) {\n                 if (xmlr.getLocalName().equals(\"varGrp\")) {\n@@ -36,24 +33,22 @@ public class VariableMetadataDDIParser {\n                 }\n             }\n         }\n-\n     }\n \n-    private  void processVarGrp(XMLStreamReader xmlr , Map<Long,VarGroup> varGroupMap) throws XMLStreamException {\n+    private void processVarGrp(XMLStreamReader xmlr, Map<Long, VarGroup> varGroupMap) throws XMLStreamException {\n         String _id_v = xmlr.getAttributeValue(null, \"ID\");\n         String _id = _id_v.replace(\"VG\", \"\");\n         long id = Long.parseLong(_id);\n         VarGroup vg = new VarGroup();\n         vg.setId(id);\n         Set<DataVariable> varsInGroups = null;\n-\n-        String vars =  xmlr.getAttributeValue(null, \"var\");\n+        String vars = xmlr.getAttributeValue(null, \"var\");\n         if (vars != null) {\n             vars = vars.trim();\n             String[] parts = vars.split(\" \");\n             varsInGroups = new HashSet<DataVariable>();\n-            for (int i=0; i< parts.length; i++)\n-            {\n+\n+            for (int i = 0; i < parts.length; i++) {\n                 long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n                 DataVariable dv = new DataVariable();\n                 dv.setId(varId);\n@@ -76,34 +71,28 @@ public class VariableMetadataDDIParser {\n         }\n     }\n \n-    private void processVar(XMLStreamReader xmlr,  Map<Long, VariableMetadata> mapVarToVarMet ) throws XMLStreamException {\n-\n+    private void processVar(XMLStreamReader xmlr, Map<Long, VariableMetadata> mapVarToVarMet) throws XMLStreamException {\n         String _id_v = xmlr.getAttributeValue(null, \"ID\");\n         String _id = _id_v.replace(\"v\", \"\");\n-\n         long id = Long.parseLong(_id);\n         DataVariable dv = new DataVariable();\n         dv.setId(id);\n-\n         FileMetadata fm = new FileMetadata();\n-\n-        VariableMetadata newVM = new VariableMetadata(dv,fm);\n-\n-        String wgt =  xmlr.getAttributeValue(null, \"wgt\");\n+        VariableMetadata newVM = new VariableMetadata(dv, fm);\n+        String wgt = xmlr.getAttributeValue(null, \"wgt\");\n         if (wgt != null && wgt.equals(\"wgt\")) {\n             newVM.setIsweightvar(true);\n         } else {\n             newVM.setIsweightvar(false);\n         }\n \n-        String wgt_var =  xmlr.getAttributeValue(null, \"wgt-var\");\n+        String wgt_var = xmlr.getAttributeValue(null, \"wgt-var\");\n         if (wgt_var != null && wgt_var.startsWith(\"v\")) {\n             long wgt_id = Long.parseLong(wgt_var.replace(\"v\", \"\"));\n             DataVariable weightVariable = new DataVariable();\n             weightVariable.setId(wgt_id);\n             newVM.setWeightvariable(weightVariable);\n             newVM.setWeighted(true);\n-\n         } else {\n             newVM.setWeightvariable(null);\n             newVM.setWeighted(false);\n@@ -116,87 +105,75 @@ public class VariableMetadataDDIParser {\n                 } else if (xmlr.getLocalName().equals(\"qstn\")) {\n                     processQstn(xmlr, newVM);\n                 } else if (xmlr.getLocalName().equals(\"universe\")) {\n-                    processUniverse(xmlr, newVM);\n-                } else if (xmlr.getLocalName().equals(\"notes\")) {\n-                    processNote(xmlr, newVM);\n-                }  else if (xmlr.getLocalName().equals(\"catgry\")) {\n-                    processCatgry(xmlr, newVM);\n-                }\n-\n+                           processUniverse(xmlr, newVM);\n+                       } else if (xmlr.getLocalName().equals(\"notes\")) {\n+                           processNote(xmlr, newVM);\n+                       } else if (xmlr.getLocalName().equals(\"catgry\")) {\n+                                  processCatgry(xmlr, newVM);\n+                              }\n             } else if (event == XMLStreamConstants.END_ELEMENT) {\n                 if (xmlr.getLocalName().equals(\"var\")) {\n-                        newVM.setDataVariable(dv);\n-                        mapVarToVarMet.put(id,newVM);\n+                    newVM.setDataVariable(dv);\n+                    mapVarToVarMet.put(id, newVM);\n                     return;\n                 }\n             }\n         }\n     }\n \n-    private void processLabel (XMLStreamReader xmlr, VarGroup vg ) throws XMLStreamException {\n+    private void processLabel(XMLStreamReader xmlr, VarGroup vg) throws XMLStreamException {\n         String labl = parseText(xmlr);\n         vg.setLabel(labl);\n-\n         return;\n     }\n \n-    private void processLabel (XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n-\n-        if (LEVEL_VARIABLE.equalsIgnoreCase( xmlr.getAttributeValue(null, \"level\") ) ) {\n+    private void processLabel(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n+        if (LEVEL_VARIABLE.equalsIgnoreCase(xmlr.getAttributeValue(null, \"level\"))) {\n             String lable = parseText(xmlr, false);\n             if (lable != null && !lable.isEmpty()) {\n                 newVM.setLabel(lable);\n             }\n-\n         }\n-\n         return;\n     }\n \n     private void processQstn(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n-\n         for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n             if (event == XMLStreamConstants.START_ELEMENT) {\n                 if (xmlr.getLocalName().equals(\"qstnLit\")) {\n                     String text = parseText(xmlr, false);\n                     newVM.setLiteralquestion(text);\n-\n                 } else if (xmlr.getLocalName().equals(\"ivuInstr\")) {\n                     String text = parseText(xmlr, false);\n                     newVM.setInterviewinstruction(text);\n                 } else if (xmlr.getLocalName().equals(\"postQTxt\")) {\n-                    String text = parseText(xmlr, false);\n-                    newVM.setPostquestion(text);\n-                }\n+                           String text = parseText(xmlr, false);\n+                           newVM.setPostquestion(text);\n+                       }\n             } else if (event == XMLStreamConstants.END_ELEMENT) {\n                 if (xmlr.getLocalName().equals(\"qstn\")) return;\n             }\n         }\n     }\n \n-    private void processUniverse (XMLStreamReader xmlr, VariableMetadata newVM ) throws XMLStreamException {\n+    private void processUniverse(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n         String universe = parseText(xmlr);\n         newVM.setUniverse(universe);\n-\n         return;\n     }\n \n-    private void processNote (XMLStreamReader xmlr,  VariableMetadata newVM) throws XMLStreamException {\n-\n-        String unf_type =  xmlr.getAttributeValue(null, \"type\");\n-        String note = parseText(xmlr,false);\n-\n-        if (unf_type == null )  {\n+    private void processNote(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n+        String unf_type = xmlr.getAttributeValue(null, \"type\");\n+        String note = parseText(xmlr, false);\n+        if (unf_type == null) {\n             newVM.setNotes(note);\n         }\n         return;\n     }\n \n     private void processCatgry(XMLStreamReader xmlr, VariableMetadata newVM) throws XMLStreamException {\n-\n         CategoryMetadata cm = null;\n         VariableCategory cat = new VariableCategory();\n-\n         for (int event = xmlr.next(); event != XMLStreamConstants.END_DOCUMENT; event = xmlr.next()) {\n             if (event == XMLStreamConstants.START_ELEMENT) {\n                 if (xmlr.getLocalName().equals(\"labl\")) {\n@@ -206,15 +183,14 @@ public class VariableMetadataDDIParser {\n                     }\n                 } else if (xmlr.getLocalName().equals(\"catValu\")) {\n                     cat.setValue(parseText(xmlr, false));\n-                } else if (xmlr.getLocalName().equals(\"catStat\")){\n-                    cm = processCatStat(xmlr, cat);\n-                    if (cm != null) {\n-                        cm.setVariableMetadata(newVM);\n-                        cm.setCategory(cat);\n-                        newVM.getCategoriesMetadata().add(cm);\n-                    }\n-                }\n-\n+                } else if (xmlr.getLocalName().equals(\"catStat\")) {\n+                           cm = processCatStat(xmlr, cat);\n+                           if (cm != null) {\n+                               cm.setVariableMetadata(newVM);\n+                               cm.setCategory(cat);\n+                               newVM.getCategoriesMetadata().add(cm);\n+                           }\n+                       }\n             } else if (event == XMLStreamConstants.END_ELEMENT) {\n                 if (xmlr.getLocalName().equals(\"catgry\")) return;\n             }\n@@ -226,23 +202,22 @@ public class VariableMetadataDDIParser {\n         String type = xmlr.getAttributeValue(null, \"type\");\n         String wgtd = xmlr.getAttributeValue(null, \"wgtd\");\n         if (type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) && wgtd == null) {\n-                        String _freq = parseText(xmlr);\n-                        if (_freq != null && !_freq.isEmpty()) {\n-                            cat.setFrequency(new Double(_freq));\n-                        }\n-        } else if (wgtd != null && type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) &&\n-                            CAT_STAT_WGTD_FREQUENCY.equalsIgnoreCase(wgtd)) {\n-                        cm = new CategoryMetadata();\n-                        String wfreq = parseText(xmlr);\n-                        if (wfreq != null && !wfreq.isEmpty()) {\n-                            cm.setWfreq(new Double(wfreq));\n-                        }\n+            String _freq = parseText(xmlr);\n+            if (_freq != null && !_freq.isEmpty()) {\n+                cat.setFrequency(new Double(_freq));\n+            }\n+        } else if (wgtd != null && type != null && CAT_STAT_TYPE_FREQUENCY.equalsIgnoreCase(type) && CAT_STAT_WGTD_FREQUENCY.equalsIgnoreCase(wgtd)) {\n+            cm = new CategoryMetadata();\n+            String wfreq = parseText(xmlr);\n+            if (wfreq != null && !wfreq.isEmpty()) {\n+                cm.setWfreq(new Double(wfreq));\n+            }\n         }\n         return cm;\n     }\n \n     private String processLabl(XMLStreamReader xmlr, String level) throws XMLStreamException {\n-        if (level.equalsIgnoreCase( xmlr.getAttributeValue(null, \"level\") ) ) {\n+        if (level.equalsIgnoreCase(xmlr.getAttributeValue(null, \"level\"))) {\n             return parseText(xmlr);\n         } else {\n             return null;\n@@ -250,41 +225,42 @@ public class VariableMetadataDDIParser {\n     }\n \n     private String parseText(XMLStreamReader xmlr) throws XMLStreamException {\n-        return parseText(xmlr,true);\n+        return parseText(xmlr, true);\n     }\n \n     private String parseText(XMLStreamReader xmlr, boolean scrubText) throws XMLStreamException {\n         String tempString = getElementText(xmlr);\n         if (scrubText) {\n-            tempString = tempString.trim().replace('\\n',' ');\n+            tempString = tempString.trim().replace('\\n', ' ');\n         }\n         return tempString;\n     }\n \n     private String getElementText(XMLStreamReader xmlr) throws XMLStreamException {\n-        if(xmlr.getEventType() != XMLStreamConstants.START_ELEMENT) {\n+        if (xmlr.getEventType() != XMLStreamConstants.START_ELEMENT) {\n             throw new XMLStreamException(\"parser must be on START_ELEMENT to read next text\", xmlr.getLocation());\n         }\n+\n         int eventType = xmlr.next();\n         StringBuilder content = new StringBuilder();\n-        while(eventType != XMLStreamConstants.END_ELEMENT ) {\n-            if(eventType == XMLStreamConstants.CHARACTERS\n-                    || eventType == XMLStreamConstants.CDATA\n-                    || eventType == XMLStreamConstants.SPACE) {\n+        while (eventType != XMLStreamConstants.END_ELEMENT) {\n+            if (eventType == XMLStreamConstants.CHARACTERS\n+                || eventType == XMLStreamConstants.CDATA\n+                || eventType == XMLStreamConstants.SPACE) {\n                 content.append(xmlr.getText());\n-            } else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION\n-                    || eventType == XMLStreamConstants.COMMENT\n-                    || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\n-                // skipping\n-            } else if(eventType == XMLStreamConstants.END_DOCUMENT) {\n+            } else if (eventType == XMLStreamConstants.PROCESSING_INSTRUCTION\n+                || eventType == XMLStreamConstants.COMMENT\n+                || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\n+                // skipping} else if (eventType == XMLStreamConstants.END_DOCUMENT) {\n                 throw new XMLStreamException(\"unexpected end of document when reading element text content\");\n-            } else if(eventType == XMLStreamConstants.START_ELEMENT) {\n-                throw new XMLStreamException(\"element text content may not contain START_ELEMENT\", xmlr.getLocation());\n-            } else {\n-                throw new XMLStreamException(\"Unexpected event type \"+eventType, xmlr.getLocation());\n-            }\n+                   } else if (eventType == XMLStreamConstants.START_ELEMENT) {\n+                       throw new XMLStreamException(\"element text content may not contain START_ELEMENT\", xmlr.getLocation());\n+                                                                                                         } else {\n+                                                                                                             throw new XMLStreamException(\"Unexpected event type \" + eventType, xmlr.getLocation());\n+                                                                                                         }\n             eventType = xmlr.next();\n         }\n         return content.toString();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 99
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/37/VariableMetadataDDIParser.java\nindex 19a12503262..5244dcaa95e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/37/VariableMetadataDDIParser.java\n@@ -52,8 +52,7 @@ public class VariableMetadataDDIParser {\n             vars = vars.trim();\n             String[] parts = vars.split(\" \");\n             varsInGroups = new HashSet<DataVariable>();\n-            for (int i=0; i< parts.length; i++)\n-            {\n+            for (int i=0; i< parts.length; i++) {\n                 long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n                 DataVariable dv = new DataVariable();\n                 dv.setId(varId);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/37/VariableMetadataDDIParser.java\nindex 19a12503262..5244dcaa95e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/37/VariableMetadataDDIParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/37/VariableMetadataDDIParser.java\n@@ -52,8 +52,7 @@ public class VariableMetadataDDIParser {\n             vars = vars.trim();\n             String[] parts = vars.split(\" \");\n             varsInGroups = new HashSet<DataVariable>();\n-            for (int i=0; i< parts.length; i++)\n-            {\n+            for (int i=0; i< parts.length; i++) {\n                 long varId = Long.parseLong(parts[i].replace(\"v\", \"\"));\n                 DataVariable dv = new DataVariable();\n                 dv.setId(varId);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}