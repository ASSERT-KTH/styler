{
    "project_name": "apache-iotdb",
    "error_id": "199",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.spark.tsfile.qp;\n\nimport org.apache.iotdb.spark.tsfile.qp.common.FilterOperator;\nimport org.apache.iotdb.spark.tsfile.qp.common.SQLConstant;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/199/QueryProcessor.java\nindex f2c2a19140f..7dce5dc61ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/199/QueryProcessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.spark.tsfile.qp;\n \n import org.apache.iotdb.spark.tsfile.qp.common.FilterOperator;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/199/QueryProcessor.java\nindex f2c2a19140f..7dce5dc61ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/199/QueryProcessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.spark.tsfile.qp;\n \n import org.apache.iotdb.spark.tsfile.qp.common.FilterOperator;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'FilterOperator' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'TsFileSequenceReader' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'Long' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/199/QueryProcessor.java\nindex f2c2a19140f..72cfbf4630e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/199/QueryProcessor.java\n@@ -29,7 +29,6 @@ import org.apache.iotdb.spark.tsfile.qp.optimizer.MergeSingleFilterOptimizer;\n import org.apache.iotdb.spark.tsfile.qp.optimizer.PhysicalOptimizer;\n import org.apache.iotdb.spark.tsfile.qp.optimizer.RemoveNotOptimizer;\n import org.apache.iotdb.tsfile.read.TsFileSequenceReader;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -41,25 +40,22 @@ import java.util.Map;\n  * For TSFile's schema differ from SparkSQL's table schema e.g. TSFile's SQL: select s1,s2 from\n  * root.car.d1 where s1 = 10 SparkSQL's SQL: select s1,s2 from XXX where delta_object = d1\n  */\n+\n public class QueryProcessor {\n \n   // construct logical query plans first, then convert them to physical ones\n+\n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public List<TSQueryPlan> generatePlans(\n-      FilterOperator filter,\n-      List<String> paths,\n-      List<String> columnNames,\n-      TsFileSequenceReader in,\n-      Long start,\n-      Long end)\n-      throws QueryProcessorException, IOException {\n-\n+    FilterOperator filter,\n+    List<String> paths,\n+    List<String> columnNames,\n+    TsFileSequenceReader in,\n+    Long start, Long end) throws QueryProcessorException, IOException {\n     List<TSQueryPlan> queryPlans = new ArrayList<>();\n-\n     if (filter != null) {\n       RemoveNotOptimizer removeNot = new RemoveNotOptimizer();\n       filter = removeNot.optimize(filter);\n-\n       DNFFilterOptimizer dnf = new DNFFilterOptimizer();\n       filter = dnf.optimize(filter);\n \n@@ -68,14 +64,11 @@ public class QueryProcessor {\n       // => or (or (sensor_1 > 20, sensor_1 < 10), sensor_2 > 10)\n       MergeSingleFilterOptimizer merge = new MergeSingleFilterOptimizer();\n       filter = merge.optimize(filter);\n-\n       List<FilterOperator> filterOperators = splitFilter(filter);\n-\n       for (FilterOperator filterOperator : filterOperators) {\n         SingleQuery singleQuery = constructSelectPlan(filterOperator, columnNames);\n         if (singleQuery != null) {\n-          queryPlans.addAll(\n-              new PhysicalOptimizer(columnNames).optimize(singleQuery, paths, in, start, end));\n+          queryPlans.addAll(new PhysicalOptimizer(columnNames).optimize(singleQuery, paths, in, start, end));\n         }\n       }\n     } else {\n@@ -92,9 +85,7 @@ public class QueryProcessor {\n         pathMap.put(tsQueryPlan.getPaths(), plans);\n       }\n     }\n-\n     queryPlans.clear();\n-\n     for (List<TSQueryPlan> plans : pathMap.values()) {\n       TSQueryPlan mergePlan = null;\n       for (TSQueryPlan plan : plans) {\n@@ -107,7 +98,6 @@ public class QueryProcessor {\n           timeFilterChildren.add(plan.getTimeFilterOperator());\n           timeFilterOperator.setChildrenList(timeFilterChildren);\n           mergePlan.setTimeFilterOperator(timeFilterOperator);\n-\n           FilterOperator valueFilterOperator = new FilterOperator(SQLConstant.KW_OR);\n           List<FilterOperator> valueFilterChildren = new ArrayList<>();\n           valueFilterChildren.add(mergePlan.getValueFilterOperator());\n@@ -118,7 +108,6 @@ public class QueryProcessor {\n       }\n       queryPlans.add(mergePlan);\n     }\n-\n     return queryPlans;\n   }\n \n@@ -133,28 +122,22 @@ public class QueryProcessor {\n   }\n \n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n-  private SingleQuery constructSelectPlan(FilterOperator filterOperator, List<String> columnNames)\n-      throws QueryOperatorException {\n+  private SingleQuery constructSelectPlan(FilterOperator filterOperator, List<String> columnNames) throws QueryOperatorException {\n     FilterOperator timeFilter = null;\n     FilterOperator valueFilter = null;\n     List<FilterOperator> columnFilterOperators = new ArrayList<>();\n-\n     List<FilterOperator> singleFilterList = null;\n-\n     if (filterOperator.isSingle()) {\n       singleFilterList = new ArrayList<>();\n       singleFilterList.add(filterOperator);\n-\n     } else if (filterOperator.getTokenIntType() == SQLConstant.KW_AND) {\n       // original query plan has been dealt with merge optimizer, thus all nodes with same\n       // path have been merged to one node\n       singleFilterList = filterOperator.getChildren();\n     }\n-\n     if (singleFilterList == null) {\n       return null;\n     }\n-\n     List<FilterOperator> valueList = new ArrayList<>();\n     for (FilterOperator child : singleFilterList) {\n       if (!child.isSingle()) {\n@@ -165,8 +148,7 @@ public class QueryProcessor {\n           if (!columnFilterOperators.contains(child)) {\n             columnFilterOperators.add(child);\n           } else {\n-            throw new QueryOperatorException(\n-                \"The same key filter has been specified more than once: \" + singlePath);\n+            throw new QueryOperatorException(\"The same key filter has been specified more than once: \" + singlePath);\n           }\n         } else {\n           switch (child.getSinglePath()) {\n@@ -183,15 +165,12 @@ public class QueryProcessor {\n         }\n       }\n     }\n-\n     if (valueList.size() == 1) {\n       valueFilter = valueList.get(0);\n-\n     } else if (valueList.size() > 1) {\n       valueFilter = new FilterOperator(SQLConstant.KW_AND, false);\n       valueFilter.childOperators = valueList;\n     }\n-\n     return new SingleQuery(columnFilterOperators, timeFilter, valueFilter);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/199/QueryProcessor.java\nindex f2c2a19140f..7dce5dc61ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/199/QueryProcessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.spark.tsfile.qp;\n \n import org.apache.iotdb.spark.tsfile.qp.common.FilterOperator;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/199/QueryProcessor.java\nindex f2c2a19140f..7dce5dc61ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/199/QueryProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/199/QueryProcessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.spark.tsfile.qp;\n \n import org.apache.iotdb.spark.tsfile.qp.common.FilterOperator;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}