{
    "project_name": "eclipse-ee4j-glassfish",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "38",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                basePolicy = Policy.getInstance(\"JavaPolicy\", null);\n            } catch (NoSuchAlgorithmException e) {\n                e.printStackTrace(); // Too bad, no policy then\n            }\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "column": "38",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "61",
                    "column": "38",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/51/SimplePolicyProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/51/SimplePolicyProvider.java\nindex 60f7c64559e..9802f15989f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/51/SimplePolicyProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/51/SimplePolicyProvider.java\n@@ -28,7 +28,6 @@ import jakarta.security.jacc.PolicyContext;\n import jakarta.security.jacc.PolicyContextException;\n \n /**\n- *\n  * @author monzillo\n  */\n public class SimplePolicyProvider extends Policy {\n@@ -44,7 +43,7 @@ public class SimplePolicyProvider extends Policy {\n     private static ThreadLocal<Object> reentrancyStatus = new ThreadLocal<>() {\n         @Override\n         protected synchronized Object initialValue() {\n-            return new byte[] { 0 };\n+            return new byte[] {0};\n         }\n     };\n \n@@ -69,17 +68,16 @@ public class SimplePolicyProvider extends Policy {\n      * code from the specified code source.\n      *\n      * @param codesource the CodeSource associated with the caller. This encapsulates the original location of the code\n-     * (where the code came from) and the public key(s) of its signer.\n-     *\n+     *                   (where the code came from) and the public key(s) of its signer.\n      * @return the set of permissions allowed for code from <i>codesource</i> according to the policy.The returned set of\n      * permissions must be a new mutable instance and it must support heterogeneous Permission types.\n-     *\n      */\n     @Override\n     public PermissionCollection getPermissions(CodeSource codesource) {\n         PermissionCollection permissionCollection = basePolicy.getPermissions(codesource);\n         try {\n-            permissionCollection = SimplePolicyConfiguration.getPermissions(permissionCollection, codesource);\n+            permissionCollection =\n+                SimplePolicyConfiguration.getPermissions(permissionCollection, codesource);\n         } catch (PolicyContextException pce) {\n             SimplePolicyConfiguration.logGetPermissionsFailure(codesource, pce);\n         }\n@@ -91,10 +89,8 @@ public class SimplePolicyProvider extends Policy {\n      * the characteristics of the protection domain.\n      *\n      * @param domain the ProtectionDomain associated with the caller.\n-     *\n      * @return the set of permissions allowed for the <i>domain</i> according to the policy.The returned set of permissions\n      * must be a new mutable instance and it must support heterogeneous Permission types.\n-     *\n      * @see java.security.ProtectionDomain\n      * @see java.security.SecureClassLoader\n      * @since 1.4\n@@ -103,7 +99,8 @@ public class SimplePolicyProvider extends Policy {\n     public PermissionCollection getPermissions(ProtectionDomain domain) {\n         PermissionCollection permissionCollection = basePolicy.getPermissions(domain);\n         try {\n-            permissionCollection = SimplePolicyConfiguration.getPermissions(permissionCollection, domain);\n+            permissionCollection =\n+                SimplePolicyConfiguration.getPermissions(permissionCollection, domain);\n         } catch (PolicyContextException pce) {\n             SimplePolicyConfiguration.logGetPermissionsFailure(domain, pce);\n         }\n@@ -114,11 +111,9 @@ public class SimplePolicyProvider extends Policy {\n      * Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is\n      * granted.\n      *\n-     * @param domain the ProtectionDomain to test\n+     * @param domain     the ProtectionDomain to test\n      * @param permission the Permission object to be tested for implication.\n-     *\n      * @return true if \"permission\" is a proper subset of a permission granted to this ProtectionDomain.\n-     *\n      * @see java.security.ProtectionDomain\n      * @since 1.4\n      */\n@@ -162,7 +157,6 @@ public class SimplePolicyProvider extends Policy {\n     /**\n      * Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example,\n      * calling <code>refresh</code> on a file-based policy will cause the file to be re-read.\n-     *\n      */\n     @Override\n     public void refresh() {\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/51/SimplePolicyProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/51/SimplePolicyProvider.java\nindex 60f7c64559e..ddc51c36928 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/51/SimplePolicyProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/51/SimplePolicyProvider.java\n@@ -59,7 +59,8 @@ public class SimplePolicyProvider extends Policy {\n             try {\n                 basePolicy = Policy.getInstance(\"JavaPolicy\", null);\n             } catch (NoSuchAlgorithmException e) {\n-                e.printStackTrace(); // Too bad, no policy then\n+                e.printStackTrace();\n+// Too bad, no policy then\n             }\n         }\n     }\n@@ -190,4 +191,4 @@ public class SimplePolicyProvider extends Policy {\n      * assigned to the protection domain. The calls to getPermissions and implies of SimplePolicyConfiguration remove\n      * excluded permissions from the returned results.\n      */\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "column": "38",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "64",
                    "column": "17",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 16, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/51/SimplePolicyProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/51/SimplePolicyProvider.java\nindex 60f7c64559e..9e6d88a532d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/51/SimplePolicyProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/51/SimplePolicyProvider.java\n@@ -59,8 +59,9 @@ public class SimplePolicyProvider extends Policy {\n             try {\n                 basePolicy = Policy.getInstance(\"JavaPolicy\", null);\n             } catch (NoSuchAlgorithmException e) {\n-                e.printStackTrace(); // Too bad, no policy then\n-            }\n+                e.printStackTrace();\n+            // Too bad, no policy then\n+                }\n         }\n     }\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}