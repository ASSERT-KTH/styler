{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2684",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2684/Clocks.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2684/Clocks.java\nindex 271de5bd94b..86355b29fa0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2684/Clocks.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2684/Clocks.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.time;\n \n import java.time.Clock;\n@@ -32,65 +33,70 @@ import java.util.concurrent.TimeUnit;\n  */\n public class Clocks\n {\n-    private static final Clock SYSTEM_CLOCK = Clock.systemUTC();\n+  private static final Clock SYSTEM_CLOCK = Clock.systemUTC();\n \n-    private Clocks()\n-    {\n-        // non-instantiable\n-    }\n+  private Clocks()\n+  {\n+    // non-instantiable\n+  }\n \n-    /**\n-     * Returns system clock.\n-     * @return system clock\n-     */\n-    public static Clock systemClock()\n-    {\n-        return SYSTEM_CLOCK;\n-    }\n+  /**\n+   * Returns system clock.\n+   *\n+   * @return system clock\n+   */\n+  public static Clock systemClock()\n+  {\n+    return SYSTEM_CLOCK;\n+  }\n \n-    /**\n-     * Returns clock that allow to get current nanos.\n-     * @return clock with nano time support\n-     */\n-    public static SystemNanoClock nanoClock()\n-    {\n-        return SystemNanoClock.INSTANCE;\n-    }\n+  /**\n+   * Returns clock that allow to get current nanos.\n+   *\n+   * @return clock with nano time support\n+   */\n+  public static SystemNanoClock nanoClock()\n+  {\n+    return SystemNanoClock.INSTANCE;\n+  }\n \n-    /**\n-     * Return new fake clock instance.\n-     * @return fake clock\n-     */\n-    public static FakeClock fakeClock()\n-    {\n-        return new FakeClock();\n-    }\n+  /**\n+   * Return new fake clock instance.\n+   *\n+   * @return fake clock\n+   */\n+  public static FakeClock fakeClock()\n+  {\n+    return new FakeClock();\n+  }\n \n-    /**\n-     * Return new fake clock instance.\n-     * @param initialTime initial fake clock time\n-     * @param unit initialTime fake clock time unit\n-     * @return fake clock\n-     */\n-    public static FakeClock fakeClock( long initialTime, TimeUnit unit )\n-    {\n-        return new FakeClock( initialTime, unit );\n-    }\n+  /**\n+   * Return new fake clock instance.\n+   *\n+   * @param initialTime initial fake clock time\n+   * @param unit        initialTime fake clock time unit\n+   * @return fake clock\n+   */\n+  public static FakeClock fakeClock(long initialTime, TimeUnit unit)\n+  {\n+    return new FakeClock(initialTime, unit);\n+  }\n \n-    public static FakeClock fakeClock( TemporalAccessor initialTime )\n-    {\n-        return new FakeClock( initialTime.getLong( ChronoField.INSTANT_SECONDS ), TimeUnit.SECONDS )\n-                .forward( initialTime.getLong( ChronoField.NANO_OF_SECOND ), TimeUnit.NANOSECONDS );\n-    }\n+  public static FakeClock fakeClock(TemporalAccessor initialTime)\n+  {\n+    return new FakeClock(initialTime.getLong(ChronoField.INSTANT_SECONDS), TimeUnit.SECONDS)\n+        .forward(initialTime.getLong(ChronoField.NANO_OF_SECOND), TimeUnit.NANOSECONDS);\n+  }\n \n-    /**\n-     * Returns a clock that ticks every time it is accessed\n-     * @param initialInstant initial time for clock\n-     * @param tickDuration amount of time of each tick\n-     * @return access tick clock\n-     */\n-    public static TickOnAccessClock tickOnAccessClock( Instant initialInstant, Duration tickDuration )\n-    {\n-        return new TickOnAccessClock( initialInstant, tickDuration );\n-    }\n+  /**\n+   * Returns a clock that ticks every time it is accessed\n+   *\n+   * @param initialInstant initial time for clock\n+   * @param tickDuration   amount of time of each tick\n+   * @return access tick clock\n+   */\n+  public static TickOnAccessClock tickOnAccessClock(Instant initialInstant, Duration tickDuration)\n+  {\n+    return new TickOnAccessClock(initialInstant, tickDuration);\n+  }\n }\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2684/Clocks.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2684/Clocks.java\nindex 271de5bd94b..f1319bc34f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2684/Clocks.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2684/Clocks.java\n@@ -79,8 +79,7 @@ public class Clocks\n \n     public static FakeClock fakeClock( TemporalAccessor initialTime )\n     {\n-        return new FakeClock( initialTime.getLong( ChronoField.INSTANT_SECONDS ), TimeUnit.SECONDS )\n-                .forward( initialTime.getLong( ChronoField.NANO_OF_SECOND ), TimeUnit.NANOSECONDS );\n+        return new FakeClock( initialTime.getLong( ChronoField.INSTANT_SECONDS ), TimeUnit.SECONDS ).forward( initialTime.getLong( ChronoField.NANO_OF_SECOND ), TimeUnit.NANOSECONDS );\n     }\n \n     /**\n@@ -93,4 +92,4 @@ public class Clocks\n     {\n         return new TickOnAccessClock( initialInstant, tickDuration );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}