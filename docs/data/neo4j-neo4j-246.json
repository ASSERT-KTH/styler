{
    "project_name": "neo4j-neo4j",
    "error_id": "246",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/246/Label.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/246/Label.java\nindex 1778b50c0e4..e9d8b496cca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/246/Label.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/246/Label.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import org.neo4j.annotations.api.PublicApi;\n@@ -25,10 +26,10 @@ import org.neo4j.annotations.api.PublicApi;\n  * A label is a grouping facility for {@link Node} where all nodes having a label\n  * are part of the same group. Labels on nodes are optional and any node can\n  * have an arbitrary number of labels attached to it.\n- *\n+ * <p>\n  * Objects of classes implementing this interface can be used as label\n  * representations in your code.\n- *\n+ * <p>\n  * It's very important to note that a label is uniquely identified\n  * by its name, not by any particular instance that implements this interface.\n  * This means that the proper way to check if two labels are equal\n@@ -41,17 +42,17 @@ import org.neo4j.annotations.api.PublicApi;\n  * However, you usually want to check whether a specific node\n  * <i>instance</i> has a certain label. That is best achieved with the\n  * {@link Node#hasLabel(Label)} method.\n- *\n+ * <p>\n  * For labels that your application know up front you should specify using an enum,\n  * and since the name is accessed using the {@link #name()} method it fits nicely.\n  * <code>\n  * public enum MyLabels implements Label\n  * {\n- *     PERSON,\n- *     RESTAURANT;\n+ * PERSON,\n+ * RESTAURANT;\n  * }\n  * </code>\n- *\n+ * <p>\n  * For labels that your application don't know up front you can make use of\n  * {@link #label(String)}, or your own implementation of this interface,\n  * as it's just the name that matters.\n@@ -78,11 +79,11 @@ public interface Label\n      * @return a {@link Label} instance for the given name\n      * @throws IllegalArgumentException if name is {@code null}\n      */\n-    static Label label( String name )\n+    static Label label(String name)\n     {\n-        if ( name == null )\n+        if (name == null)\n         {\n-            throw new IllegalArgumentException( \"A label cannot have a null name\" );\n+            throw new IllegalArgumentException(\"A label cannot have a null name\");\n         }\n         return new Label()\n         {\n@@ -99,17 +100,17 @@ public interface Label\n             }\n \n             @Override\n-            public boolean equals( Object that )\n+            public boolean equals(Object that)\n             {\n-                if ( this == that )\n+                if (this == that)\n                 {\n                     return true;\n                 }\n-                if ( that == null || that.getClass() != getClass() )\n+                if (that == null || that.getClass() != getClass())\n                 {\n                     return false;\n                 }\n-                return name.equals( ((Label) that).name() );\n+                return name.equals(((Label) that).name());\n             }\n \n             @Override\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}