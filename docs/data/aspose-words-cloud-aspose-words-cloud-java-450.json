{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "450",
    "information": {
        "errors": [
            {
                "line": "209",
                "column": "34",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    Footnote footnote = (Footnote)o;\n    return\n        Objects.equals(this.content, footnote.content) &&\n        Objects.equals(this.footnoteType, footnote.footnoteType) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/450/Footnote.java\nindex 182bf8950ca..4035deea494 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/450/Footnote.java\n@@ -206,7 +206,7 @@ public class Footnote extends FootnoteLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Footnote footnote = (Footnote)o;\n+    Footnote footnote = (Footnote) o;\n     return\n         Objects.equals(this.content, footnote.content) &&\n         Objects.equals(this.footnoteType, footnote.footnoteType) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/450/Footnote.java\nindex 182bf8950ca..fc3258fb871 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/450/Footnote.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -79,7 +82,7 @@ public class Footnote extends FootnoteLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< FootnoteTypeEnum > {\n+        public static class Adapter extends TypeAdapter<FootnoteTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final FootnoteTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -107,6 +110,7 @@ public class Footnote extends FootnoteLink {\n \n     @SerializedName(\"Text\")\n     private String text = null;\n+\n     public Footnote content(StoryChildNodes content) {\n         this.content = content;\n         return this;\n@@ -114,8 +118,9 @@ public class Footnote extends FootnoteLink {\n \n     /**\n      * Gets or sets content of footnote.\n-    * @return content\n-    **/\n+     *\n+     * @return content\n+     **/\n     @ApiModelProperty(value = \"Gets or sets content of footnote.\")\n     public StoryChildNodes getContent() {\n         return content;\n@@ -132,8 +137,9 @@ public class Footnote extends FootnoteLink {\n \n     /**\n      * Gets or sets returns a value that specifies whether this is a footnote or endnote.\n-    * @return footnoteType\n-    **/\n+     *\n+     * @return footnoteType\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns a value that specifies whether this is a footnote or endnote.\")\n     public FootnoteTypeEnum getFootnoteType() {\n         return footnoteType;\n@@ -150,8 +156,9 @@ public class Footnote extends FootnoteLink {\n \n     /**\n      * Gets or sets link to comment range start node.\n-    * @return position\n-    **/\n+     *\n+     * @return position\n+     **/\n     @ApiModelProperty(value = \"Gets or sets link to comment range start node.\")\n     public DocumentPosition getPosition() {\n         return position;\n@@ -169,8 +176,9 @@ public class Footnote extends FootnoteLink {\n     /**\n      * Gets or sets /sets custom reference mark to be used for this footnote.\n      * Default value is Empty, meaning auto-numbered footnotes are used.\n-    * @return referenceMark\n-    **/\n+     *\n+     * @return referenceMark\n+     **/\n     @ApiModelProperty(value = \"Gets or sets /sets custom reference mark to be used for this footnote. Default value is Empty, meaning auto-numbered footnotes are used.\")\n     public String getReferenceMark() {\n         return referenceMark;\n@@ -187,8 +195,9 @@ public class Footnote extends FootnoteLink {\n \n     /**\n      * Gets or sets this is a convenience property that allows to easily get or set text of the footnote.\n-    * @return text\n-    **/\n+     *\n+     * @return text\n+     **/\n     @ApiModelProperty(value = \"Gets or sets this is a convenience property that allows to easily get or set text of the footnote.\")\n     public String getText() {\n         return text;\n@@ -206,43 +215,43 @@ public class Footnote extends FootnoteLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Footnote footnote = (Footnote)o;\n-    return\n-        Objects.equals(this.content, footnote.content) &&\n-        Objects.equals(this.footnoteType, footnote.footnoteType) &&\n-        Objects.equals(this.position, footnote.position) &&\n-        Objects.equals(this.referenceMark, footnote.referenceMark) &&\n-        Objects.equals(this.text, footnote.text) &&\n-        super.equals(o);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(content, footnoteType, position, referenceMark, text, super.hashCode());\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class Footnote {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    content: \").append(toIndentedString(content)).append(\"\\n\");\n-    sb.append(\"    footnoteType: \").append(toIndentedString(footnoteType)).append(\"\\n\");\n-    sb.append(\"    position: \").append(toIndentedString(position)).append(\"\\n\");\n-    sb.append(\"    referenceMark: \").append(toIndentedString(referenceMark)).append(\"\\n\");\n-    sb.append(\"    text: \").append(toIndentedString(text)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        Footnote footnote = (Footnote) o;\n+        return\n+            Objects.equals(this.content, footnote.content) &&\n+                Objects.equals(this.footnoteType, footnote.footnoteType) &&\n+                Objects.equals(this.position, footnote.position) &&\n+                Objects.equals(this.referenceMark, footnote.referenceMark) &&\n+                Objects.equals(this.text, footnote.text) &&\n+                super.equals(o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(content, footnoteType, position, referenceMark, text, super.hashCode());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class Footnote {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    content: \").append(toIndentedString(content)).append(\"\\n\");\n+        sb.append(\"    footnoteType: \").append(toIndentedString(footnoteType)).append(\"\\n\");\n+        sb.append(\"    position: \").append(toIndentedString(position)).append(\"\\n\");\n+        sb.append(\"    referenceMark: \").append(toIndentedString(referenceMark)).append(\"\\n\");\n+        sb.append(\"    text: \").append(toIndentedString(text)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "212",
                    "column": "30",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/450/Footnote.java\nindex 182bf8950ca..eb8e4ba1a95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/450/Footnote.java\n@@ -53,7 +53,8 @@ public class Footnote extends FootnoteLink {\n     @JsonAdapter(FootnoteTypeEnum.Adapter.class)\n     public enum FootnoteTypeEnum {\n         FOOTNOTE(\"Footnote\"),\n-        ENDNOTE(\"Endnote\");\n+\n+ENDNOTE(\"Endnote\");\n \n         private String value;\n \n@@ -79,7 +80,7 @@ public class Footnote extends FootnoteLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< FootnoteTypeEnum > {\n+        public static class Adapter extends TypeAdapter<FootnoteTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final FootnoteTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -107,7 +108,8 @@ public class Footnote extends FootnoteLink {\n \n     @SerializedName(\"Text\")\n     private String text = null;\n-    public Footnote content(StoryChildNodes content) {\n+\n+public Footnote content(StoryChildNodes content) {\n         this.content = content;\n         return this;\n     }\n@@ -202,13 +204,13 @@ public class Footnote extends FootnoteLink {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Footnote footnote = (Footnote)o;\n-    return\n-        Objects.equals(this.content, footnote.content) &&\n+\n+Footnote footnote = (Footnote)o;\n+    return Objects.equals(this.content, footnote.content) &&\n         Objects.equals(this.footnoteType, footnote.footnoteType) &&\n         Objects.equals(this.position, footnote.position) &&\n         Objects.equals(this.referenceMark, footnote.referenceMark) &&\n@@ -245,4 +247,4 @@ public class Footnote extends FootnoteLink {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/450/Footnote.java\nindex 182bf8950ca..c8a22ba9105 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/450/Footnote.java\n@@ -45,182 +45,200 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Footnote.\n  */\n+\n+\n @ApiModel(description = \"Footnote.\")\n+\n public class Footnote extends FootnoteLink {\n     /**\n      * Gets or sets returns a value that specifies whether this is a footnote or endnote.\n      */\n-    @JsonAdapter(FootnoteTypeEnum.Adapter.class)\n-    public enum FootnoteTypeEnum {\n-        FOOTNOTE(\"Footnote\"),\n-        ENDNOTE(\"Endnote\");\n+  @JsonAdapter(FootnoteTypeEnum.Adapter.class)\n+  public enum FootnoteTypeEnum {\n+    FOOTNOTE(\"Footnote\"), ENDNOTE(\"Endnote\");\n \n-        private String value;\n+    private String value;\n \n-        FootnoteTypeEnum(String value) {\n-            this.value = value;\n-        }\n+    FootnoteTypeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public String getValue() {\n-            return value;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static FootnoteTypeEnum fromValue(String text) {\n-            for (FootnoteTypeEnum b : FootnoteTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n+    public static FootnoteTypeEnum fromValue(String text) {\n+      for (FootnoteTypeEnum b : FootnoteTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n \n-        public static class Adapter extends TypeAdapter< FootnoteTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final FootnoteTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public FootnoteTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return FootnoteTypeEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    public static class Adapter extends TypeAdapter<FootnoteTypeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final FootnoteTypeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public FootnoteTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return FootnoteTypeEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n-    @SerializedName(\"Content\")\n-    private StoryChildNodes content = null;\n \n-    @SerializedName(\"FootnoteType\")\n-    private FootnoteTypeEnum footnoteType = null;\n+  @SerializedName(\"Content\")\n+  private StoryChildNodes content = null;\n \n-    @SerializedName(\"Position\")\n-    private DocumentPosition position = null;\n+  @SerializedName(\"FootnoteType\")\n+  private FootnoteTypeEnum footnoteType = null;\n \n-    @SerializedName(\"ReferenceMark\")\n-    private String referenceMark = null;\n+  @SerializedName(\"Position\")\n+  private DocumentPosition position = null;\n \n-    @SerializedName(\"Text\")\n-    private String text = null;\n-    public Footnote content(StoryChildNodes content) {\n-        this.content = content;\n-        return this;\n-    }\n+  @SerializedName(\"ReferenceMark\")\n+  private String referenceMark = null;\n+\n+  @SerializedName(\"Text\")\n+  private String text = null;\n+\n+  public Footnote content(StoryChildNodes content) {\n+    this.content = content;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets content of footnote.\n     * @return content\n     **/\n-    @ApiModelProperty(value = \"Gets or sets content of footnote.\")\n-    public StoryChildNodes getContent() {\n-        return content;\n-    }\n \n-    public void setContent(StoryChildNodes content) {\n-        this.content = content;\n-    }\n \n-    public Footnote footnoteType(FootnoteTypeEnum footnoteType) {\n-        this.footnoteType = footnoteType;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets content of footnote.\")\n+  public StoryChildNodes getContent() {\n+    return content;\n+  }\n+\n+  public void setContent(StoryChildNodes content) {\n+    this.content = content;\n+  }\n+\n+  public Footnote footnoteType(FootnoteTypeEnum footnoteType) {\n+    this.footnoteType = footnoteType;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns a value that specifies whether this is a footnote or endnote.\n     * @return footnoteType\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns a value that specifies whether this is a footnote or endnote.\")\n-    public FootnoteTypeEnum getFootnoteType() {\n-        return footnoteType;\n-    }\n \n-    public void setFootnoteType(FootnoteTypeEnum footnoteType) {\n-        this.footnoteType = footnoteType;\n-    }\n \n-    public Footnote position(DocumentPosition position) {\n-        this.position = position;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns a value that specifies whether this is a footnote or endnote.\")\n+  public FootnoteTypeEnum getFootnoteType() {\n+    return footnoteType;\n+  }\n+\n+  public void setFootnoteType(FootnoteTypeEnum footnoteType) {\n+    this.footnoteType = footnoteType;\n+  }\n+\n+  public Footnote position(DocumentPosition position) {\n+    this.position = position;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets link to comment range start node.\n     * @return position\n     **/\n-    @ApiModelProperty(value = \"Gets or sets link to comment range start node.\")\n-    public DocumentPosition getPosition() {\n-        return position;\n-    }\n \n-    public void setPosition(DocumentPosition position) {\n-        this.position = position;\n-    }\n \n-    public Footnote referenceMark(String referenceMark) {\n-        this.referenceMark = referenceMark;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets link to comment range start node.\")\n+  public DocumentPosition getPosition() {\n+    return position;\n+  }\n+\n+  public void setPosition(DocumentPosition position) {\n+    this.position = position;\n+  }\n+\n+  public Footnote referenceMark(String referenceMark) {\n+    this.referenceMark = referenceMark;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets /sets custom reference mark to be used for this footnote.\n      * Default value is Empty, meaning auto-numbered footnotes are used.\n     * @return referenceMark\n     **/\n-    @ApiModelProperty(value = \"Gets or sets /sets custom reference mark to be used for this footnote. Default value is Empty, meaning auto-numbered footnotes are used.\")\n-    public String getReferenceMark() {\n-        return referenceMark;\n-    }\n \n-    public void setReferenceMark(String referenceMark) {\n-        this.referenceMark = referenceMark;\n-    }\n \n-    public Footnote text(String text) {\n-        this.text = text;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets /sets custom reference mark to be used for this footnote. Default value is Empty, meaning auto-numbered footnotes are used.\")\n+  public String getReferenceMark() {\n+    return referenceMark;\n+  }\n+\n+  public void setReferenceMark(String referenceMark) {\n+    this.referenceMark = referenceMark;\n+  }\n+\n+  public Footnote text(String text) {\n+    this.text = text;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets this is a convenience property that allows to easily get or set text of the footnote.\n     * @return text\n     **/\n-    @ApiModelProperty(value = \"Gets or sets this is a convenience property that allows to easily get or set text of the footnote.\")\n-    public String getText() {\n-        return text;\n-    }\n \n-    public void setText(String text) {\n-        this.text = text;\n+\n+  @ApiModelProperty(value = \"Gets or sets this is a convenience property that allows to easily get or set text of the footnote.\")\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public void setText(String text) {\n+    this.text = text;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    Footnote footnote = (Footnote)o;\n-    return\n-        Objects.equals(this.content, footnote.content) &&\n-        Objects.equals(this.footnoteType, footnote.footnoteType) &&\n-        Objects.equals(this.position, footnote.position) &&\n-        Objects.equals(this.referenceMark, footnote.referenceMark) &&\n-        Objects.equals(this.text, footnote.text) &&\n-        super.equals(o);\n+    Footnote footnote = (Footnote) o;\n+    return Objects.equals(this.content, footnote.content) &&\n+    Objects.equals(this.footnoteType, footnote.footnoteType) &&\n+    Objects.equals(this.position, footnote.position) &&\n+    Objects.equals(this.referenceMark, footnote.referenceMark) &&\n+    Objects.equals(this.text, footnote.text) &&\n+    super.equals(o);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(content, footnoteType, position, referenceMark, text, super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -239,10 +257,11 @@ public class Footnote extends FootnoteLink {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 181
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/450/Footnote.java\nindex 182bf8950ca..4035deea494 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/450/Footnote.java\n@@ -206,7 +206,7 @@ public class Footnote extends FootnoteLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Footnote footnote = (Footnote)o;\n+    Footnote footnote = (Footnote) o;\n     return\n         Objects.equals(this.content, footnote.content) &&\n         Objects.equals(this.footnoteType, footnote.footnoteType) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/450/Footnote.java\nindex 182bf8950ca..4035deea494 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/450/Footnote.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/450/Footnote.java\n@@ -206,7 +206,7 @@ public class Footnote extends FootnoteLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Footnote footnote = (Footnote)o;\n+    Footnote footnote = (Footnote) o;\n     return\n         Objects.equals(this.content, footnote.content) &&\n         Objects.equals(this.footnoteType, footnote.footnoteType) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}