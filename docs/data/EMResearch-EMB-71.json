{
    "project_name": "EMResearch-EMB",
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "54",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 150).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      return new Contributor[0];\n    }\n    @Override public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, Language motherTongue, List<Language> altLanguages) {\n      return Collections.emptyList();\n    }\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/71/SimpleSentenceTokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/71/SimpleSentenceTokenizer.java\nindex 13b816f5da3..26e114a0824 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/71/SimpleSentenceTokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/71/SimpleSentenceTokenizer.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2014 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.tokenizers;\n \n import org.languagetool.Language;\n@@ -30,30 +31,41 @@ import java.util.ResourceBundle;\n /**\n  * A very simple sentence tokenizer that splits on {@code [.!?\u2026]} followed by whitespace\n  * or an uppercase letter. You probably want to use an adapted {@link SRXSentenceTokenizer} instead.\n+ *\n  * @since 2.6\n  */\n public class SimpleSentenceTokenizer extends SRXSentenceTokenizer {\n \n-  public SimpleSentenceTokenizer() {\n-    super(new AnyLanguage(), \"/org/languagetool/tokenizers/segment-simple.srx\");\n-  }\n-  \n-  static class AnyLanguage extends Language {\n-    @Override public String getShortCode() {\n-      return \"xx\";\n-    }\n-    @Override public String getName() {\n-      return \"FakeLanguage\";\n-    }\n-    @Override public String[] getCountries() {\n-      return new String[0];\n-    }\n-    @Override public Contributor[] getMaintainers() {\n-      return new Contributor[0];\n+    public SimpleSentenceTokenizer() {\n+        super(new AnyLanguage(), \"/org/languagetool/tokenizers/segment-simple.srx\");\n     }\n-    @Override public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, Language motherTongue, List<Language> altLanguages) {\n-      return Collections.emptyList();\n+\n+    static class AnyLanguage extends Language {\n+        @Override\n+        public String getShortCode() {\n+            return \"xx\";\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"FakeLanguage\";\n+        }\n+\n+        @Override\n+        public String[] getCountries() {\n+            return new String[0];\n+        }\n+\n+        @Override\n+        public Contributor[] getMaintainers() {\n+            return new Contributor[0];\n+        }\n+\n+        @Override\n+        public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, Language motherTongue,\n+                                           List<Language> altLanguages) {\n+            return Collections.emptyList();\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/71/SimpleSentenceTokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/71/SimpleSentenceTokenizer.java\nindex 13b816f5da3..378c3fc8454 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/71/SimpleSentenceTokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/71/SimpleSentenceTokenizer.java\n@@ -39,21 +39,31 @@ public class SimpleSentenceTokenizer extends SRXSentenceTokenizer {\n   }\n   \n   static class AnyLanguage extends Language {\n-    @Override public String getShortCode() {\n+\n+    @Override\n+public String getShortCode() {\n       return \"xx\";\n     }\n-    @Override public String getName() {\n+\n+@Override\n+public String getName() {\n       return \"FakeLanguage\";\n     }\n-    @Override public String[] getCountries() {\n+\n+@Override\n+public String[] getCountries() {\n       return new String[0];\n     }\n-    @Override public Contributor[] getMaintainers() {\n+\n+@Override\n+public Contributor[] getMaintainers() {\n       return new Contributor[0];\n     }\n-    @Override public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, Language motherTongue, List<Language> altLanguages) {\n+\n+@Override\n+public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, Language motherTongue, List<Language> altLanguages) {\n       return Collections.emptyList();\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/71/SimpleSentenceTokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/71/SimpleSentenceTokenizer.java\nindex 13b816f5da3..4a79c8ff430 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/71/SimpleSentenceTokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/71/SimpleSentenceTokenizer.java\n@@ -22,7 +22,6 @@ import org.languagetool.Language;\n import org.languagetool.UserConfig;\n import org.languagetool.language.Contributor;\n import org.languagetool.rules.Rule;\n-\n import java.util.Collections;\n import java.util.List;\n import java.util.ResourceBundle;\n@@ -32,28 +31,39 @@ import java.util.ResourceBundle;\n  * or an uppercase letter. You probably want to use an adapted {@link SRXSentenceTokenizer} instead.\n  * @since 2.6\n  */\n-public class SimpleSentenceTokenizer extends SRXSentenceTokenizer {\n \n-  public SimpleSentenceTokenizer() {\n+\n+public class SimpleSentenceTokenizer extends SRXSentenceTokenizer {\n+    public SimpleSentenceTokenizer() {\n     super(new AnyLanguage(), \"/org/languagetool/tokenizers/segment-simple.srx\");\n-  }\n-  \n-  static class AnyLanguage extends Language {\n-    @Override public String getShortCode() {\n-      return \"xx\";\n-    }\n-    @Override public String getName() {\n-      return \"FakeLanguage\";\n-    }\n-    @Override public String[] getCountries() {\n-      return new String[0];\n-    }\n-    @Override public Contributor[] getMaintainers() {\n-      return new Contributor[0];\n     }\n-    @Override public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, Language motherTongue, List<Language> altLanguages) {\n-      return Collections.emptyList();\n-    }\n-  }\n \n-}\n+    static class AnyLanguage extends Language {\n+        @Override\n+        public String getShortCode() {\n+            return \"xx\";\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"FakeLanguage\";\n+        }\n+\n+        @Override\n+        public String[] getCountries() {\n+            return new String[0];\n+        }\n+\n+        @Override\n+        public Contributor[] getMaintainers() {\n+            return new Contributor[0];\n+        }\n+\n+        @Override\n+        public List<Rule> getRelevantRules(ResourceBundle messages,\n+                                           UserConfig userConfig,\n+                                           Language motherTongue, List<Language> altLanguages) {\n+            return Collections.emptyList();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}