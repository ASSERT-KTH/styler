{
    "project_name": "neo4j-neo4j",
    "error_id": "3016",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3016/EntityCommandGrouper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3016/EntityCommandGrouper.java\nindex b4cbedfdf30..a00be8cdd81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3016/EntityCommandGrouper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3016/EntityCommandGrouper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.util.Arrays;\n@@ -53,22 +54,22 @@ public class EntityCommandGrouper<ENTITY extends Command>\n     private final Comparator<Command> COMMAND_COMPARATOR = new Comparator<>()\n     {\n         @Override\n-        public int compare( Command o1, Command o2 )\n+        public int compare(Command o1, Command o2)\n         {\n-            int entityIdComparison = Long.compare( entityId( o1 ), entityId( o2 ) );\n-            return entityIdComparison != 0 ? entityIdComparison : Integer.compare( commandType( o1 ), commandType( o2 ) );\n+            int entityIdComparison = Long.compare(entityId(o1), entityId(o2));\n+            return entityIdComparison != 0 ? entityIdComparison : Integer.compare(commandType(o1), commandType(o2));\n         }\n \n-        private long entityId( Command command )\n+        private long entityId(Command command)\n         {\n-            if ( command.getClass() == entityCommandClass )\n+            if (command.getClass() == entityCommandClass)\n             {\n                 return command.getKey();\n             }\n             return ((PropertyCommand) command).getEntityId();\n         }\n \n-        private int commandType( Command command )\n+        private int commandType(Command command)\n         {\n             return command.getClass() == entityCommandClass ? 0 : 1;\n         }\n@@ -78,33 +79,33 @@ public class EntityCommandGrouper<ENTITY extends Command>\n     private Command[] commands;\n     private int writeCursor;\n \n-    public EntityCommandGrouper( Class<ENTITY> entityCommandClass, int sizeHint )\n+    public EntityCommandGrouper(Class<ENTITY> entityCommandClass, int sizeHint)\n     {\n         this.entityCommandClass = entityCommandClass;\n         this.commands = new Command[sizeHint];\n     }\n \n-    public void add( Command command )\n+    public void add(Command command)\n     {\n-        if ( writeCursor == commands.length )\n+        if (writeCursor == commands.length)\n         {\n-            commands = Arrays.copyOf( commands, commands.length * 2 );\n+            commands = Arrays.copyOf(commands, commands.length * 2);\n         }\n         commands[writeCursor++] = command;\n     }\n \n     public Cursor sortAndAccessGroups()\n     {\n-        Arrays.sort( commands, 0, writeCursor, COMMAND_COMPARATOR );\n+        Arrays.sort(commands, 0, writeCursor, COMMAND_COMPARATOR);\n         return new Cursor();\n     }\n \n     public void clear()\n     {\n-        if ( writeCursor > 1_000 )\n+        if (writeCursor > 1_000)\n         {\n             // Don't continue to hog large transactions\n-            Arrays.fill( commands, 1_000, writeCursor, null );\n+            Arrays.fill(commands, 1_000, writeCursor, null);\n         }\n         writeCursor = 0;\n     }\n@@ -126,17 +127,16 @@ public class EntityCommandGrouper<ENTITY extends Command>\n \n         public boolean nextEntity()\n         {\n-            if ( readCursor >= writeCursor )\n+            if (readCursor >= writeCursor)\n             {\n                 return false;\n             }\n \n-            if ( commands[readCursor].getClass() == entityCommandClass )\n+            if (commands[readCursor].getClass() == entityCommandClass)\n             {\n                 currentEntityCommand = (ENTITY) commands[readCursor++];\n                 currentEntity = currentEntityCommand.getKey();\n-            }\n-            else\n+            } else\n             {\n                 PropertyCommand firstPropertyCommand = (PropertyCommand) commands[readCursor];\n                 currentEntityCommand = null;\n@@ -147,10 +147,10 @@ public class EntityCommandGrouper<ENTITY extends Command>\n \n         public PropertyCommand nextProperty()\n         {\n-            if ( readCursor < writeCursor )\n+            if (readCursor < writeCursor)\n             {\n                 Command command = commands[readCursor];\n-                if ( command instanceof PropertyCommand && ((PropertyCommand) command).getEntityId() == currentEntity )\n+                if (command instanceof PropertyCommand && ((PropertyCommand) command).getEntityId() == currentEntity)\n                 {\n                     readCursor++;\n                     return (PropertyCommand) command;\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3016/EntityCommandGrouper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3016/EntityCommandGrouper.java\nindex b4cbedfdf30..7076b746245 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3016/EntityCommandGrouper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3016/EntityCommandGrouper.java\n@@ -169,4 +169,4 @@ public class EntityCommandGrouper<ENTITY extends Command>\n             return currentEntityCommand;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}