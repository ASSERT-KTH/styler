{
    "project_name": "Activiti-Activiti",
    "error_id": "161",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.helper;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.delegate.DelegateExecution;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/161/SkipExpressionUtil.java\nindex 3f33214705a..34972506b55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/161/SkipExpressionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/161/SkipExpressionUtil.java\nindex 3f33214705a..030f23d804d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/161/SkipExpressionUtil.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n@@ -19,55 +20,55 @@ import org.activiti.engine.impl.interceptor.CommandContext;\n \n public class SkipExpressionUtil {\n \n-  public static boolean isSkipExpressionEnabled(DelegateExecution execution, String skipExpression) {\n-    if (skipExpression == null) {\n-      return false;\n+    public static boolean isSkipExpressionEnabled(DelegateExecution execution, String skipExpression) {\n+        if (skipExpression == null) {\n+            return false;\n+        }\n+        return checkSkipExpressionVariable(execution);\n     }\n-    return checkSkipExpressionVariable(execution);\n-  }\n \n-  public static boolean isSkipExpressionEnabled(DelegateExecution execution, Expression skipExpression) {\n-    if (skipExpression == null) {\n-      return false;\n+    public static boolean isSkipExpressionEnabled(DelegateExecution execution, Expression skipExpression) {\n+        if (skipExpression == null) {\n+            return false;\n+        }\n+        return checkSkipExpressionVariable(execution);\n     }\n-    return checkSkipExpressionVariable(execution);\n-  }\n \n-  private static boolean checkSkipExpressionVariable(DelegateExecution execution) {\n-    final String skipExpressionEnabledVariable = \"_ACTIVITI_SKIP_EXPRESSION_ENABLED\";\n-    Object isSkipExpressionEnabled = execution.getVariable(skipExpressionEnabledVariable);\n+    private static boolean checkSkipExpressionVariable(DelegateExecution execution) {\n+        final String skipExpressionEnabledVariable = \"_ACTIVITI_SKIP_EXPRESSION_ENABLED\";\n+        Object isSkipExpressionEnabled = execution.getVariable(skipExpressionEnabledVariable);\n \n-    if (isSkipExpressionEnabled == null) {\n-      return false;\n+        if (isSkipExpressionEnabled == null) {\n+            return false;\n \n-    } else if (isSkipExpressionEnabled instanceof Boolean) {\n-      return ((Boolean) isSkipExpressionEnabled).booleanValue();\n+        } else if (isSkipExpressionEnabled instanceof Boolean) {\n+            return ((Boolean) isSkipExpressionEnabled).booleanValue();\n \n-    } else {\n-      throw new ActivitiIllegalArgumentException(skipExpressionEnabledVariable + \" variable does not resolve to a boolean. \" + isSkipExpressionEnabled);\n+        } else {\n+            throw new ActivitiIllegalArgumentException(skipExpressionEnabledVariable + \" variable does not resolve to a boolean. \" + isSkipExpressionEnabled);\n+        }\n     }\n-  }\n \n-  public static boolean shouldSkipFlowElement(CommandContext commandContext, DelegateExecution execution, String skipExpressionString) {\n-    Expression skipExpression = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(skipExpressionString);\n-    Object value = skipExpression.getValue(execution);\n+    public static boolean shouldSkipFlowElement(CommandContext commandContext, DelegateExecution execution, String skipExpressionString) {\n+        Expression skipExpression = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(skipExpressionString);\n+        Object value = skipExpression.getValue(execution);\n \n-    if (value instanceof Boolean) {\n-      return ((Boolean) value).booleanValue();\n+        if (value instanceof Boolean) {\n+            return ((Boolean) value).booleanValue();\n \n-    } else {\n-      throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n+        } else {\n+            throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n+        }\n     }\n-  }\n \n-  public static boolean shouldSkipFlowElement(DelegateExecution execution, Expression skipExpression) {\n-    Object value = skipExpression.getValue(execution);\n+    public static boolean shouldSkipFlowElement(DelegateExecution execution, Expression skipExpression) {\n+        Object value = skipExpression.getValue(execution);\n \n-    if (value instanceof Boolean) {\n-      return ((Boolean) value).booleanValue();\n+        if (value instanceof Boolean) {\n+            return ((Boolean) value).booleanValue();\n \n-    } else {\n-      throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n+        } else {\n+            throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n+        }\n     }\n-  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/161/SkipExpressionUtil.java\nindex 3f33214705a..da2149012dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/161/SkipExpressionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n@@ -70,4 +71,4 @@ public class SkipExpressionUtil {\n       throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/161/SkipExpressionUtil.java\nindex 3f33214705a..2e7e63108e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/161/SkipExpressionUtil.java\n@@ -17,6 +17,7 @@ import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.delegate.Expression;\n import org.activiti.engine.impl.interceptor.CommandContext;\n \n+\n public class SkipExpressionUtil {\n \n   public static boolean isSkipExpressionEnabled(DelegateExecution execution, String skipExpression) {\n@@ -36,13 +37,10 @@ public class SkipExpressionUtil {\n   private static boolean checkSkipExpressionVariable(DelegateExecution execution) {\n     final String skipExpressionEnabledVariable = \"_ACTIVITI_SKIP_EXPRESSION_ENABLED\";\n     Object isSkipExpressionEnabled = execution.getVariable(skipExpressionEnabledVariable);\n-\n     if (isSkipExpressionEnabled == null) {\n       return false;\n-\n     } else if (isSkipExpressionEnabled instanceof Boolean) {\n       return ((Boolean) isSkipExpressionEnabled).booleanValue();\n-\n     } else {\n       throw new ActivitiIllegalArgumentException(skipExpressionEnabledVariable + \" variable does not resolve to a boolean. \" + isSkipExpressionEnabled);\n     }\n@@ -51,10 +49,8 @@ public class SkipExpressionUtil {\n   public static boolean shouldSkipFlowElement(CommandContext commandContext, DelegateExecution execution, String skipExpressionString) {\n     Expression skipExpression = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(skipExpressionString);\n     Object value = skipExpression.getValue(execution);\n-\n     if (value instanceof Boolean) {\n       return ((Boolean) value).booleanValue();\n-\n     } else {\n       throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n     }\n@@ -62,12 +58,10 @@ public class SkipExpressionUtil {\n \n   public static boolean shouldSkipFlowElement(DelegateExecution execution, Expression skipExpression) {\n     Object value = skipExpression.getValue(execution);\n-\n     if (value instanceof Boolean) {\n       return ((Boolean) value).booleanValue();\n-\n     } else {\n       throw new ActivitiIllegalArgumentException(\"Skip expression does not resolve to a boolean: \" + skipExpression.getExpressionText());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/161/SkipExpressionUtil.java\nindex 3f33214705a..34972506b55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/161/SkipExpressionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/161/SkipExpressionUtil.java\nindex 3f33214705a..34972506b55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/161/SkipExpressionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/161/SkipExpressionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}