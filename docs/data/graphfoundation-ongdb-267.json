{
    "project_name": "graphfoundation-ongdb",
    "error_id": "267",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/267/StringWrappingStringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/267/StringWrappingStringValue.java\nindex 72c8f30fc9c..ca69c4794f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/267/StringWrappingStringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/267/StringWrappingStringValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.util.regex.Matcher;\n@@ -30,145 +31,145 @@ import org.neo4j.hashing.HashFunction;\n  */\n final class StringWrappingStringValue extends StringValue\n {\n-    private final String value;\n-\n-    StringWrappingStringValue( String value )\n-    {\n-        assert value != null;\n-        this.value = value;\n-    }\n-\n-    @Override\n-    String value()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    public int length()\n-    {\n-        return value.codePointCount( 0, value.length() );\n-    }\n-\n-    @Override\n-    public int computeHash()\n-    {\n-        //NOTE that we are basing the hash code on code points instead of char[] values.\n-        if ( value.isEmpty() )\n-        {\n-            return 0;\n-        }\n-        int h = 1, length = value.length();\n-        for ( int offset = 0, codePoint; offset < length; offset += Character.charCount( codePoint ) )\n-        {\n-            codePoint = value.codePointAt( offset );\n-            h = 31 * h + codePoint;\n-        }\n-        return h;\n-    }\n-\n-    @Override\n-    public long updateHash( HashFunction hashFunction, long hash )\n-    {\n-        return updateHash( hashFunction, hash, value );\n-    }\n-\n-    public static long updateHash( HashFunction hashFunction, long hash, String value )\n-    {\n-        //NOTE that we are basing the hash code on code points instead of char[] values.\n-        int length = value.length();\n-        int codePointCount = 0;\n-        for ( int offset = 0; offset < length; )\n-        {\n-            int codePointA = value.codePointAt( offset );\n-            int codePointB = 0;\n-            offset += Character.charCount( codePointA );\n-            codePointCount++;\n-            if ( offset < length )\n-            {\n-                codePointB = value.codePointAt( offset );\n-                offset += Character.charCount( codePointB );\n-                codePointCount++;\n-            }\n-            hash = hashFunction.update( hash, ((long) codePointA << 32) + codePointB );\n-        }\n-        return hashFunction.update( hash, codePointCount );\n-    }\n-\n-    @Override\n-    public TextValue substring( int start, int length )\n-    {\n-        int s = Math.min( start, length() );\n-        int e = Math.min( s + length, length() );\n-        int codePointStart = value.offsetByCodePoints( 0, s );\n-        int codePointEnd = value.offsetByCodePoints( 0, e );\n-\n-        return Values.stringValue( value.substring( codePointStart, codePointEnd ) );\n-    }\n-\n-    @Override\n-    public TextValue trim()\n+  private final String value;\n+\n+  StringWrappingStringValue(String value)\n+  {\n+    assert value != null;\n+    this.value = value;\n+  }\n+\n+  @Override\n+  String value()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return value.codePointCount(0, value.length());\n+  }\n+\n+  @Override\n+  public int computeHash()\n+  {\n+    //NOTE that we are basing the hash code on code points instead of char[] values.\n+    if (value.isEmpty())\n     {\n-        int start = ltrimIndex( value );\n-        int end = rtrimIndex( value );\n-        return Values.stringValue( value.substring( start, Math.max( end, start ) ) );\n+      return 0;\n     }\n-\n-    @Override\n-    public TextValue ltrim()\n-    {\n-        int start = ltrimIndex( value );\n-        return Values.stringValue( value.substring( start, value.length() ) );\n-    }\n-\n-    @Override\n-    public TextValue rtrim()\n+    int h = 1, length = value.length();\n+    for (int offset = 0, codePoint; offset < length; offset += Character.charCount(codePoint))\n     {\n-        int end = rtrimIndex( value );\n-        return Values.stringValue( value.substring( 0, end ) );\n+      codePoint = value.codePointAt(offset);\n+      h = 31 * h + codePoint;\n     }\n-\n-    @Override\n-    public TextValue reverse()\n+    return h;\n+  }\n+\n+  @Override\n+  public long updateHash(HashFunction hashFunction, long hash)\n+  {\n+    return updateHash(hashFunction, hash, value);\n+  }\n+\n+  public static long updateHash(HashFunction hashFunction, long hash, String value)\n+  {\n+    //NOTE that we are basing the hash code on code points instead of char[] values.\n+    int length = value.length();\n+    int codePointCount = 0;\n+    for (int offset = 0; offset < length; )\n     {\n-        StringBuilder stringBuilder = new StringBuilder( value() );\n-        return Values.stringValue( stringBuilder.reverse().toString() );\n+      int codePointA = value.codePointAt(offset);\n+      int codePointB = 0;\n+      offset += Character.charCount(codePointA);\n+      codePointCount++;\n+      if (offset < length)\n+      {\n+        codePointB = value.codePointAt(offset);\n+        offset += Character.charCount(codePointB);\n+        codePointCount++;\n+      }\n+      hash = hashFunction.update(hash, ((long) codePointA << 32) + codePointB);\n     }\n-\n-    @Override\n-    Matcher matcher( Pattern pattern )\n+    return hashFunction.update(hash, codePointCount);\n+  }\n+\n+  @Override\n+  public TextValue substring(int start, int length)\n+  {\n+    int s = Math.min(start, length());\n+    int e = Math.min(s + length, length());\n+    int codePointStart = value.offsetByCodePoints(0, s);\n+    int codePointEnd = value.offsetByCodePoints(0, e);\n+\n+    return Values.stringValue(value.substring(codePointStart, codePointEnd));\n+  }\n+\n+  @Override\n+  public TextValue trim()\n+  {\n+    int start = ltrimIndex(value);\n+    int end = rtrimIndex(value);\n+    return Values.stringValue(value.substring(start, Math.max(end, start)));\n+  }\n+\n+  @Override\n+  public TextValue ltrim()\n+  {\n+    int start = ltrimIndex(value);\n+    return Values.stringValue(value.substring(start, value.length()));\n+  }\n+\n+  @Override\n+  public TextValue rtrim()\n+  {\n+    int end = rtrimIndex(value);\n+    return Values.stringValue(value.substring(0, end));\n+  }\n+\n+  @Override\n+  public TextValue reverse()\n+  {\n+    StringBuilder stringBuilder = new StringBuilder(value());\n+    return Values.stringValue(stringBuilder.reverse().toString());\n+  }\n+\n+  @Override\n+  Matcher matcher(Pattern pattern)\n+  {\n+    return pattern.matcher(value);\n+  }\n+\n+  private int ltrimIndex(String value)\n+  {\n+    int start = 0, length = value.length();\n+    while (start < length)\n     {\n-        return pattern.matcher( value );\n+      int codePoint = value.codePointAt(start);\n+      if (!Character.isWhitespace(codePoint))\n+      {\n+        break;\n+      }\n+      start += Character.charCount(codePoint);\n     }\n \n-    private int ltrimIndex( String value )\n-    {\n-        int start = 0, length = value.length();\n-        while ( start < length )\n-        {\n-            int codePoint = value.codePointAt( start );\n-            if ( !Character.isWhitespace( codePoint ) )\n-            {\n-                break;\n-            }\n-            start += Character.charCount( codePoint );\n-        }\n-\n-        return start;\n-    }\n+    return start;\n+  }\n \n-    private int rtrimIndex( String value )\n+  private int rtrimIndex(String value)\n+  {\n+    int end = value.length();\n+    while (end > 0)\n     {\n-        int end = value.length();\n-        while ( end > 0 )\n-        {\n-            int codePoint = value.codePointBefore( end );\n-            if ( !Character.isWhitespace( codePoint ) )\n-            {\n-                break;\n-            }\n-            end--;\n-        }\n-        return end;\n+      int codePoint = value.codePointBefore(end);\n+      if (!Character.isWhitespace(codePoint))\n+      {\n+        break;\n+      }\n+      end--;\n     }\n+    return end;\n+  }\n }\n",
            "diff_size": 211
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/267/StringWrappingStringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/267/StringWrappingStringValue.java\nindex 72c8f30fc9c..34027d36c75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/267/StringWrappingStringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/267/StringWrappingStringValue.java\n@@ -64,7 +64,8 @@ final class StringWrappingStringValue extends StringValue\n             codePoint = value.codePointAt( offset );\n             h = 31 * h + codePoint;\n         }\n-        return h;\n+\n+return h;\n     }\n \n     @Override\n@@ -90,9 +91,11 @@ final class StringWrappingStringValue extends StringValue\n                 offset += Character.charCount( codePointB );\n                 codePointCount++;\n             }\n-            hash = hashFunction.update( hash, ((long) codePointA << 32) + codePointB );\n+\n+hash = hashFunction.update( hash, ((long) codePointA << 32) + codePointB );\n         }\n-        return hashFunction.update( hash, codePointCount );\n+\n+return hashFunction.update( hash, codePointCount );\n     }\n \n     @Override\n@@ -102,8 +105,7 @@ final class StringWrappingStringValue extends StringValue\n         int e = Math.min( s + length, length() );\n         int codePointStart = value.offsetByCodePoints( 0, s );\n         int codePointEnd = value.offsetByCodePoints( 0, e );\n-\n-        return Values.stringValue( value.substring( codePointStart, codePointEnd ) );\n+return Values.stringValue( value.substring( codePointStart, codePointEnd ) );\n     }\n \n     @Override\n@@ -151,7 +153,8 @@ final class StringWrappingStringValue extends StringValue\n             {\n                 break;\n             }\n-            start += Character.charCount( codePoint );\n+\n+start += Character.charCount( codePoint );\n         }\n \n         return start;\n@@ -169,6 +172,7 @@ final class StringWrappingStringValue extends StringValue\n             }\n             end--;\n         }\n-        return end;\n+\n+return end;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}