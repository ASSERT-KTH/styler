{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "192",
    "information": {
        "errors": [
            {
                "line": "118",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 137).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    InstanceLevelMetricsModel newInstanceModel = new InstanceLevelMetricsModel(totalCountInQueue, lifeTimeInQueueMax, lifeTimeInQueueMin,\n        totalLifeTimeInQueue / totalProviderCallCount,\n        executionTimeMax, executionTimeMin,\n        totalExecutionTimeAverage / totalProviderCallCount);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/192/DefaultStatisticsRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/192/DefaultStatisticsRunner.java\nindex f97ea922850..27aa1303aa4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/192/DefaultStatisticsRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/192/DefaultStatisticsRunner.java\n@@ -115,10 +115,11 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n       lastRunInvocationModels.put(mergedLocalModel.getOperationName(), mergedLocalModel);\n     }\n \n-    InstanceLevelMetricsModel newInstanceModel = new InstanceLevelMetricsModel(totalCountInQueue, lifeTimeInQueueMax, lifeTimeInQueueMin,\n-        totalLifeTimeInQueue / totalProviderCallCount,\n-        executionTimeMax, executionTimeMin,\n-        totalExecutionTimeAverage / totalProviderCallCount);\n+    InstanceLevelMetricsModel newInstanceModel =\n+        new InstanceLevelMetricsModel(totalCountInQueue, lifeTimeInQueueMax, lifeTimeInQueueMin,\n+            totalLifeTimeInQueue / totalProviderCallCount,\n+            executionTimeMax, executionTimeMin,\n+            totalExecutionTimeAverage / totalProviderCallCount);\n \n     RegistryMetricsModel newRegistryModel = new RegistryMetricsModel(newInstanceModel, newInvocationModels);\n \n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/192/DefaultStatisticsRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/192/DefaultStatisticsRunner.java\nindex f97ea922850..2233fac98b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/192/DefaultStatisticsRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/192/DefaultStatisticsRunner.java\n@@ -59,7 +59,7 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n     for (InvocationThreadLocalCache localModel : allLocalModels) {\n       InvocationThreadLocalCache operationLocalModel = mergedLocalModels.computeIfAbsent(localModel.getOperationName(),\n           m -> new InvocationThreadLocalCache(localModel.getOperationName()));\n-      //merge all local model into one per operation\n+//merge all local model into one per operation\n       operationLocalModel.merge(localModel);\n     }\n \n@@ -81,10 +81,10 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n       InvocationThreadLocalCache lastModel = lastRunInvocationModels\n           .getOrDefault(mergedLocalModel.getOperationName(),\n               new InvocationThreadLocalCache(mergedLocalModel.getOperationName()));\n-      long providerCallCount = mergedLocalModel.getProviderCallCount() - lastModel.getProviderCallCount();\n+long providerCallCount = mergedLocalModel.getProviderCallCount() - lastModel.getProviderCallCount();\n       double averageExecuteTime =\n           (mergedLocalModel.getExecutionTime() - lastModel.getExecutionTime()) / providerCallCount;\n-      double averageLifeTimeInQueue =\n+double averageLifeTimeInQueue =\n           (mergedLocalModel.getLifeTimeInQueue() - lastModel.getLifeTimeInQueue()) / providerCallCount;\n \n       newInvocationModels.put(mergedLocalModel.getOperationName(),\n@@ -92,8 +92,7 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n               mergedLocalModel.getLifeTimeInQueueMax(), mergedLocalModel.getLifeTimeInQueueMin(),\n               averageLifeTimeInQueue,\n               mergedLocalModel.getExecutionTimeMax(), mergedLocalModel.getExecutionTimeMin(), averageExecuteTime));\n-\n-      if (isValidMax(lifeTimeInQueueMax, mergedLocalModel.getLifeTimeInQueueMax())) {\n+if (isValidMax(lifeTimeInQueueMax, mergedLocalModel.getLifeTimeInQueueMax())) {\n         lifeTimeInQueueMax = mergedLocalModel.getLifeTimeInQueueMax();\n       }\n       if (isValidMin(lifeTimeInQueueMin, mergedLocalModel.getLifeTimeInQueueMin())) {\n@@ -136,4 +135,4 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n   private boolean isValidMin(double source, double value) {\n     return source == 0 || (source > value && value != 0);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 381).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 273).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/192/DefaultStatisticsRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/192/DefaultStatisticsRunner.java\nindex f97ea922850..f0b8f1111db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/192/DefaultStatisticsRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/192/DefaultStatisticsRunner.java\n@@ -22,9 +22,7 @@ import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n-\n import io.servicecomb.metrics.core.model.InstanceLevelMetricsModel;\n import io.servicecomb.metrics.core.model.InvocationLevelMetricsModel;\n import io.servicecomb.metrics.core.model.RegistryMetricsModel;\n@@ -32,7 +30,6 @@ import io.servicecomb.metrics.core.registry.InvocationThreadLocalCache;\n import io.servicecomb.metrics.core.registry.ThreadLocalMonitorManager;\n \n public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n-\n   private final AtomicReference<RegistryMetricsModel> registryModel = new AtomicReference<>(new RegistryMetricsModel());\n \n   private final Map<String, InvocationThreadLocalCache> lastRunInvocationModels;\n@@ -58,12 +55,13 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n     Map<String, InvocationThreadLocalCache> mergedLocalModels = new HashMap<>();\n     for (InvocationThreadLocalCache localModel : allLocalModels) {\n       InvocationThreadLocalCache operationLocalModel = mergedLocalModels.computeIfAbsent(localModel.getOperationName(),\n-          m -> new InvocationThreadLocalCache(localModel.getOperationName()));\n+m -> new InvocationThreadLocalCache(localModel.getOperationName()));\n       //merge all local model into one per operation\n       operationLocalModel.merge(localModel);\n     }\n \n     //for instance level\n+\n     double lifeTimeInQueueMax = 0;\n     double lifeTimeInQueueMin = 0;\n     double totalLifeTimeInQueue = 0;\n@@ -75,33 +73,26 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n \n     // unused before compute tps and latency\n     //double escapedSecondTime = (double)(currentTime - lastRunNanoTime.get()) / 1000000000;\n-\n     Map<String, InvocationLevelMetricsModel> newInvocationModels = new ConcurrentHashMap<>();\n     for (InvocationThreadLocalCache mergedLocalModel : mergedLocalModels.values()) {\n-      InvocationThreadLocalCache lastModel = lastRunInvocationModels\n-          .getOrDefault(mergedLocalModel.getOperationName(),\n-              new InvocationThreadLocalCache(mergedLocalModel.getOperationName()));\n+      InvocationThreadLocalCache lastModel = lastRunInvocationModels.getOrDefault(mergedLocalModel.getOperationName(),\n+new InvocationThreadLocalCache(mergedLocalModel.getOperationName()));\n       long providerCallCount = mergedLocalModel.getProviderCallCount() - lastModel.getProviderCallCount();\n-      double averageExecuteTime =\n-          (mergedLocalModel.getExecutionTime() - lastModel.getExecutionTime()) / providerCallCount;\n-      double averageLifeTimeInQueue =\n-          (mergedLocalModel.getLifeTimeInQueue() - lastModel.getLifeTimeInQueue()) / providerCallCount;\n-\n-      newInvocationModels.put(mergedLocalModel.getOperationName(),\n-          new InvocationLevelMetricsModel(mergedLocalModel.getOperationName(), mergedLocalModel.getCountInQueue(),\n-              mergedLocalModel.getLifeTimeInQueueMax(), mergedLocalModel.getLifeTimeInQueueMin(),\n-              averageLifeTimeInQueue,\n-              mergedLocalModel.getExecutionTimeMax(), mergedLocalModel.getExecutionTimeMin(), averageExecuteTime));\n-\n+      double averageExecuteTime = (mergedLocalModel.getExecutionTime() - lastModel.getExecutionTime()) / providerCallCount;\n+      double averageLifeTimeInQueue = (mergedLocalModel.getLifeTimeInQueue() - lastModel.getLifeTimeInQueue()) / providerCallCount;\n+      newInvocationModels.put(mergedLocalModel.getOperationName(), new InvocationLevelMetricsModel(mergedLocalModel.getOperationName(), mergedLocalModel.getCountInQueue(), mergedLocalModel.getLifeTimeInQueueMax(), mergedLocalModel.getLifeTimeInQueueMin(), averageLifeTimeInQueue, mergedLocalModel.getExecutionTimeMax(), mergedLocalModel.getExecutionTimeMin(), averageExecuteTime));\n       if (isValidMax(lifeTimeInQueueMax, mergedLocalModel.getLifeTimeInQueueMax())) {\n         lifeTimeInQueueMax = mergedLocalModel.getLifeTimeInQueueMax();\n       }\n+\n       if (isValidMin(lifeTimeInQueueMin, mergedLocalModel.getLifeTimeInQueueMin())) {\n         lifeTimeInQueueMin = mergedLocalModel.getLifeTimeInQueueMin();\n       }\n+\n       if (isValidMax(executionTimeMax, mergedLocalModel.getExecutionTimeMax())) {\n         executionTimeMax = mergedLocalModel.getExecutionTimeMax();\n       }\n+\n       if (isValidMin(executionTimeMin, mergedLocalModel.getExecutionTimeMin())) {\n         executionTimeMin = mergedLocalModel.getExecutionTimeMin();\n       }\n@@ -115,11 +106,7 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n       lastRunInvocationModels.put(mergedLocalModel.getOperationName(), mergedLocalModel);\n     }\n \n-    InstanceLevelMetricsModel newInstanceModel = new InstanceLevelMetricsModel(totalCountInQueue, lifeTimeInQueueMax, lifeTimeInQueueMin,\n-        totalLifeTimeInQueue / totalProviderCallCount,\n-        executionTimeMax, executionTimeMin,\n-        totalExecutionTimeAverage / totalProviderCallCount);\n-\n+    InstanceLevelMetricsModel newInstanceModel = new InstanceLevelMetricsModel(totalCountInQueue, lifeTimeInQueueMax, lifeTimeInQueueMin, totalLifeTimeInQueue / totalProviderCallCount, executionTimeMax, executionTimeMin, totalExecutionTimeAverage / totalProviderCallCount);\n     RegistryMetricsModel newRegistryModel = new RegistryMetricsModel(newInstanceModel, newInvocationModels);\n \n     //update registry model once\n@@ -136,4 +123,4 @@ public class DefaultStatisticsRunner extends AbstractStatisticsRunner {\n   private boolean isValidMin(double source, double value) {\n     return source == 0 || (source > value && value != 0);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}