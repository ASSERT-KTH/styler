{
    "project_name": "wso2-attic-commons",
    "error_id": "506",
    "information": {
        "errors": [
            {
                "line": "42",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n                            boolean processInStreamDefinition) {\n        ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/506/BooleanCondition.java\nindex 300d7ec83d4..8bb02a65326 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/506/BooleanCondition.java\n@@ -40,7 +40,7 @@ public class BooleanCondition extends Condition {\n \n     @Override\n     protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n-                            boolean processInStreamDefinition) {\n+            boolean processInStreamDefinition) {\n         ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/506/BooleanCondition.java\nindex 300d7ec83d4..0d982857e3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/506/BooleanCondition.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.query.api.condition;\n \n import org.wso2.siddhi.query.api.definition.AbstractDefinition;\n@@ -28,53 +29,54 @@ import java.util.concurrent.ConcurrentMap;\n \n public class BooleanCondition extends Condition {\n \n-    private Expression expression;\n-\n-    public BooleanCondition(Expression expression) {\n-        this.expression = expression;\n-    }\n+  private Expression expression;\n \n-    public Expression getExpression() {\n-        return expression;\n-    }\n+  public BooleanCondition(Expression expression) {\n+    this.expression = expression;\n+  }\n \n-    @Override\n-    protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n-                            boolean processInStreamDefinition) {\n-        ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n-    }\n+  public Expression getExpression() {\n+    return expression;\n+  }\n \n-    @Override\n-    public String toString() {\n-        return \"BooleanCondition{\" +\n-               \"expression=\" + expression +\n-               '}';\n-    }\n+  @Override\n+  protected void validate(List<QueryEventSource> queryEventSourceList,\n+                          ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n+                          boolean processInStreamDefinition) {\n+    ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n+  }\n \n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n+  @Override\n+  public String toString() {\n+    return \"BooleanCondition{\" +\n+      \"expression=\" + expression +\n+      '}';\n+  }\n \n-        BooleanCondition that = (BooleanCondition) o;\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n \n-        if (expression != null ? !expression.equals(that.expression) : that.expression != null) {\n-            return false;\n-        }\n+    BooleanCondition that = (BooleanCondition) o;\n \n-        return true;\n+    if (expression != null ? !expression.equals(that.expression) : that.expression != null) {\n+      return false;\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return expression != null ? expression.hashCode() : 0;\n-    }\n+    return true;\n+  }\n \n-    public Set<String> getDependencySet() {\n-        return ExpressionValidator.getDependencySet(expression);\n-    }\n+  @Override\n+  public int hashCode() {\n+    return expression != null ? expression.hashCode() : 0;\n+  }\n+\n+  public Set<String> getDependencySet() {\n+    return ExpressionValidator.getDependencySet(expression);\n+  }\n }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/506/BooleanCondition.java\nindex 300d7ec83d4..ba48163eb7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/506/BooleanCondition.java\n@@ -39,9 +39,8 @@ public class BooleanCondition extends Condition {\n     }\n \n     @Override\n-    protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n-                            boolean processInStreamDefinition) {\n-        ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n+    protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n+    ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n     }\n \n     @Override\n@@ -77,4 +76,4 @@ public class BooleanCondition extends Condition {\n     public Set<String> getDependencySet() {\n         return ExpressionValidator.getDependencySet(expression);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/506/BooleanCondition.java\nindex 300d7ec83d4..8bb02a65326 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/506/BooleanCondition.java\n@@ -40,7 +40,7 @@ public class BooleanCondition extends Condition {\n \n     @Override\n     protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n-                            boolean processInStreamDefinition) {\n+            boolean processInStreamDefinition) {\n         ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/506/BooleanCondition.java\nindex 300d7ec83d4..4a2d7ae4c71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/506/BooleanCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/506/BooleanCondition.java\n@@ -40,7 +40,7 @@ public class BooleanCondition extends Condition {\n \n     @Override\n     protected void validate(List<QueryEventSource> queryEventSourceList, ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId,\n-                            boolean processInStreamDefinition) {\n+boolean processInStreamDefinition) {\n         ExpressionValidator.validate(expression, queryEventSourceList, streamReferenceId, processInStreamDefinition);\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}