{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1854",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "100",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "480",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "490",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1854/TransactionRecordState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1854/TransactionRecordState.java\nindex ce673c9fb8b..f8e04b54bcb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1854/TransactionRecordState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1854/TransactionRecordState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import java.util.Arrays;\n@@ -64,10 +65,10 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n /**\n  * Transaction containing {@link org.neo4j.kernel.impl.transaction.command.Command commands} reflecting the operations\n  * performed in the transaction.\n- *\n+ * <p>\n  * This class currently has a symbiotic relationship with {@link KernelTransaction}, with which it always has a 1-1\n  * relationship.\n- *\n+ * <p>\n  * The idea here is that KernelTransaction will eventually take on the responsibilities of WriteTransaction, such as\n  * keeping track of transaction state, serialization and deserialization to and from logical log, and applying things\n  * to store. It would most likely do this by keeping a component derived from the current WriteTransaction\n@@ -75,558 +76,561 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n  */\n public class TransactionRecordState implements RecordState\n {\n-    private static final Command[] EMPTY_COMMANDS = new Command[0];\n-\n-    private final NeoStores neoStores;\n-    private final IntegrityValidator integrityValidator;\n-    private final NodeStore nodeStore;\n-    private final RelationshipStore relationshipStore;\n-    private final PropertyStore propertyStore;\n-    private final RecordStore<RelationshipGroupRecord> relationshipGroupStore;\n-    private final MetaDataStore metaDataStore;\n-    private final SchemaStore schemaStore;\n-    private final RecordAccessSet recordChangeSet;\n-    private final long lastCommittedTxWhenTransactionStarted;\n-    private final ResourceLocker locks;\n-    private final RelationshipCreator relationshipCreator;\n-    private final RelationshipDeleter relationshipDeleter;\n-    private final PropertyCreator propertyCreator;\n-    private final PropertyDeleter propertyDeleter;\n-\n-    private RecordChanges<NeoStoreRecord, Void> neoStoreRecord;\n-    private boolean prepared;\n-\n-    public TransactionRecordState( NeoStores neoStores, IntegrityValidator integrityValidator,\n-            RecordChangeSet recordChangeSet, long lastCommittedTxWhenTransactionStarted,\n-            ResourceLocker locks,\n-            RelationshipCreator relationshipCreator,\n-            RelationshipDeleter relationshipDeleter,\n-            PropertyCreator propertyCreator,\n-            PropertyDeleter propertyDeleter )\n-    {\n-        this.neoStores = neoStores;\n-        this.nodeStore = neoStores.getNodeStore();\n-        this.relationshipStore = neoStores.getRelationshipStore();\n-        this.propertyStore = neoStores.getPropertyStore();\n-        this.relationshipGroupStore = neoStores.getRelationshipGroupStore();\n-        this.metaDataStore = neoStores.getMetaDataStore();\n-        this.schemaStore = neoStores.getSchemaStore();\n-        this.integrityValidator = integrityValidator;\n-        this.recordChangeSet = recordChangeSet;\n-        this.lastCommittedTxWhenTransactionStarted = lastCommittedTxWhenTransactionStarted;\n-        this.locks = locks;\n-        this.relationshipCreator = relationshipCreator;\n-        this.relationshipDeleter = relationshipDeleter;\n-        this.propertyCreator = propertyCreator;\n-        this.propertyDeleter = propertyDeleter;\n-    }\n-\n-    @Override\n-    public boolean hasChanges()\n-    {\n-        return recordChangeSet.hasChanges() ||\n-                (neoStoreRecord != null && neoStoreRecord.changeSize() > 0);\n-    }\n-\n-    @Override\n-    public void extractCommands( Collection<StorageCommand> commands ) throws TransactionFailureException\n-    {\n-        assert !prepared : \"Transaction has already been prepared\";\n-\n-        integrityValidator.validateTransactionStartKnowledge( lastCommittedTxWhenTransactionStarted );\n-\n-        int noOfCommands = recordChangeSet.changeSize() +\n-                           (neoStoreRecord != null ? neoStoreRecord.changeSize() : 0);\n-\n-        for ( RecordProxy<LabelTokenRecord, Void> record : recordChangeSet.getLabelTokenChanges().changes() )\n-        {\n-            commands.add( new Command.LabelTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n-        }\n-        for ( RecordProxy<RelationshipTypeTokenRecord, Void> record :\n-            recordChangeSet.getRelationshipTypeTokenChanges().changes() )\n-        {\n-            commands.add( new Command.RelationshipTypeTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n-        }\n-        for ( RecordProxy<PropertyKeyTokenRecord, Void> record :\n-            recordChangeSet.getPropertyKeyTokenChanges().changes() )\n-        {\n-            commands.add( new Command.PropertyKeyTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n-        }\n-\n-        // Collect nodes, relationships, properties\n-        Command[] nodeCommands = EMPTY_COMMANDS;\n-        int skippedCommands = 0;\n-        if ( recordChangeSet.getNodeRecords().changeSize() > 0 )\n-        {\n-            nodeCommands = new Command[recordChangeSet.getNodeRecords().changeSize()];\n-            int i = 0;\n-            for ( RecordProxy<NodeRecord, Void> change : recordChangeSet.getNodeRecords().changes() )\n-            {\n-                NodeRecord record = prepared( change, nodeStore );\n-                integrityValidator.validateNodeRecord( record );\n-                nodeCommands[i++] = new Command.NodeCommand( change.getBefore(), record );\n-            }\n-            Arrays.sort( nodeCommands, COMMAND_SORTER );\n-        }\n-\n-        Command[] relCommands = EMPTY_COMMANDS;\n-        if ( recordChangeSet.getRelRecords().changeSize() > 0 )\n-        {\n-            relCommands = new Command[recordChangeSet.getRelRecords().changeSize()];\n-            int i = 0;\n-            for ( RecordProxy<RelationshipRecord, Void> change : recordChangeSet.getRelRecords().changes() )\n-            {\n-                relCommands[i++] = new Command.RelationshipCommand( change.getBefore(),\n-                        prepared( change, relationshipStore ) );\n-            }\n-            Arrays.sort( relCommands, COMMAND_SORTER );\n-        }\n-\n-        Command[] propCommands = EMPTY_COMMANDS;\n-        if ( recordChangeSet.getPropertyRecords().changeSize() > 0 )\n-        {\n-            propCommands = new Command[recordChangeSet.getPropertyRecords().changeSize()];\n-            int i = 0;\n-            for ( RecordProxy<PropertyRecord, PrimitiveRecord> change :\n-                recordChangeSet.getPropertyRecords().changes() )\n-            {\n-                propCommands[i++] = new Command.PropertyCommand( change.getBefore(),\n-                        prepared( change, propertyStore ) );\n-            }\n-            Arrays.sort( propCommands, COMMAND_SORTER );\n-        }\n-\n-        Command[] relGroupCommands = EMPTY_COMMANDS;\n-        if ( recordChangeSet.getRelGroupRecords().changeSize() > 0 )\n-        {\n-            relGroupCommands = new Command[recordChangeSet.getRelGroupRecords().changeSize()];\n-            int i = 0;\n-            for ( RecordProxy<RelationshipGroupRecord, Integer> change :\n-                recordChangeSet.getRelGroupRecords().changes() )\n-            {\n-                if ( change.isCreated() && !change.forReadingLinkage().inUse() )\n-                {\n-                    /*\n-                     * This is an edge case that may come up and which we must handle properly. Relationship groups are\n-                     * not managed by the tx state, since they are created as side effects rather than through\n-                     * direct calls. However, they differ from say, dynamic records, in that their management can happen\n-                     * through separate code paths. What we are interested in here is the following scenario.\n-                     * 0. A node has one less relationship that is required to transition to dense node. The relationships\n-                     *    it has belong to at least two different types\n-                     * 1. In the same tx, a relationship is added making the node dense and all the relationships of a type\n-                     *    are removed from that node. Regardless of the order these operations happen, the creation of the\n-                     *    relationship (and the transition of the node to dense) will happen first.\n-                     * 2. A relationship group will be created because of the transition to dense and then deleted because\n-                     *    all the relationships it would hold are no longer there. This results in a relationship group\n-                     *    command that appears in the tx as not in use. Depending on the final order of operations, this\n-                     *    can end up using an id that is higher than the highest id seen so far. This may not be a problem\n-                     *    for a single instance, but it can result in errors in cases where transactions are applied\n-                     *    externally, such as backup or HA.\n-                     *\n-                     * The way we deal with this issue here is by not issuing a command for that offending record. This is\n-                     * safe, since the record is not in use and never was, so the high id is not necessary to change and\n-                     * the store remains consistent.\n-                     */\n-                    skippedCommands++;\n-                    continue;\n-                }\n-                relGroupCommands[i++] = new Command.RelationshipGroupCommand( change.getBefore(),\n-                        prepared( change, relationshipGroupStore ) );\n-            }\n-            relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf( relGroupCommands, i ) : relGroupCommands;\n-            Arrays.sort( relGroupCommands, COMMAND_SORTER );\n-        }\n-\n-        addFiltered( commands, Mode.CREATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-        addFiltered( commands, Mode.UPDATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-        addFiltered( commands, Mode.DELETE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-\n-        if ( neoStoreRecord != null )\n-        {\n-            for ( RecordProxy<NeoStoreRecord, Void> change : neoStoreRecord.changes() )\n-            {\n-                commands.add( new Command.NeoStoreCommand( change.getBefore(), change.forReadingData() ) );\n-            }\n-        }\n-        for ( RecordProxy<SchemaRecord, SchemaRule> change : recordChangeSet.getSchemaRuleChanges().changes() )\n-        {\n-            if ( change.forReadingLinkage().inUse() )\n-            {\n-                integrityValidator.validateSchemaRule( change.getAdditionalData() );\n-            }\n-            commands.add( new Command.SchemaRuleCommand(\n-                    change.getBefore(), change.forChangingData(), change.getAdditionalData() ) );\n-        }\n-        assert commands.size() == noOfCommands - skippedCommands : format( \"Expected %d final commands, got %d \" +\n-                \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands );\n-\n-        prepared = true;\n-    }\n-\n-    private <RECORD extends AbstractBaseRecord> RECORD prepared(\n-            RecordProxy<RECORD,?> proxy, RecordStore<RECORD> store )\n-    {\n-        RECORD after = proxy.forReadingLinkage();\n-        store.prepareForCommit( after );\n-        return after;\n-    }\n-\n-    public void relCreate( long id, int typeId, long startNodeId, long endNodeId )\n-    {\n-        relationshipCreator.relationshipCreate( id, typeId, startNodeId, endNodeId, recordChangeSet, locks );\n-    }\n-\n-    public void relDelete( long relId )\n-    {\n-        relationshipDeleter.relDelete( relId, recordChangeSet, locks );\n-    }\n-\n-    @SafeVarargs\n-    private final void addFiltered( Collection<StorageCommand> target, Mode mode,\n-                                    Command[]... commands )\n-    {\n-        for ( Command[] c : commands )\n-        {\n-            for ( Command command : c )\n-            {\n-                if ( command.getMode() == mode )\n-                {\n-                    target.add( command );\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Deletes a node by its id, returning its properties which are now removed.\n-     *\n-     * @param nodeId The id of the node to delete.\n-     */\n-    public void nodeDelete( long nodeId )\n-    {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null ).forChangingData();\n-        if ( !nodeRecord.inUse() )\n+  private static final Command[] EMPTY_COMMANDS = new Command[0];\n+\n+  private final NeoStores neoStores;\n+  private final IntegrityValidator integrityValidator;\n+  private final NodeStore nodeStore;\n+  private final RelationshipStore relationshipStore;\n+  private final PropertyStore propertyStore;\n+  private final RecordStore<RelationshipGroupRecord> relationshipGroupStore;\n+  private final MetaDataStore metaDataStore;\n+  private final SchemaStore schemaStore;\n+  private final RecordAccessSet recordChangeSet;\n+  private final long lastCommittedTxWhenTransactionStarted;\n+  private final ResourceLocker locks;\n+  private final RelationshipCreator relationshipCreator;\n+  private final RelationshipDeleter relationshipDeleter;\n+  private final PropertyCreator propertyCreator;\n+  private final PropertyDeleter propertyDeleter;\n+\n+  private RecordChanges<NeoStoreRecord, Void> neoStoreRecord;\n+  private boolean prepared;\n+\n+  public TransactionRecordState(NeoStores neoStores, IntegrityValidator integrityValidator,\n+                                RecordChangeSet recordChangeSet, long lastCommittedTxWhenTransactionStarted,\n+                                ResourceLocker locks,\n+                                RelationshipCreator relationshipCreator,\n+                                RelationshipDeleter relationshipDeleter,\n+                                PropertyCreator propertyCreator,\n+                                PropertyDeleter propertyDeleter)\n+  {\n+    this.neoStores = neoStores;\n+    this.nodeStore = neoStores.getNodeStore();\n+    this.relationshipStore = neoStores.getRelationshipStore();\n+    this.propertyStore = neoStores.getPropertyStore();\n+    this.relationshipGroupStore = neoStores.getRelationshipGroupStore();\n+    this.metaDataStore = neoStores.getMetaDataStore();\n+    this.schemaStore = neoStores.getSchemaStore();\n+    this.integrityValidator = integrityValidator;\n+    this.recordChangeSet = recordChangeSet;\n+    this.lastCommittedTxWhenTransactionStarted = lastCommittedTxWhenTransactionStarted;\n+    this.locks = locks;\n+    this.relationshipCreator = relationshipCreator;\n+    this.relationshipDeleter = relationshipDeleter;\n+    this.propertyCreator = propertyCreator;\n+    this.propertyDeleter = propertyDeleter;\n+  }\n+\n+  @Override\n+  public boolean hasChanges()\n+  {\n+    return recordChangeSet.hasChanges() ||\n+        (neoStoreRecord != null && neoStoreRecord.changeSize() > 0);\n+  }\n+\n+  @Override\n+  public void extractCommands(Collection<StorageCommand> commands) throws TransactionFailureException\n+  {\n+    assert !prepared : \"Transaction has already been prepared\";\n+\n+    integrityValidator.validateTransactionStartKnowledge(lastCommittedTxWhenTransactionStarted);\n+\n+    int noOfCommands = recordChangeSet.changeSize() +\n+        (neoStoreRecord != null ? neoStoreRecord.changeSize() : 0);\n+\n+    for (RecordProxy<LabelTokenRecord, Void> record : recordChangeSet.getLabelTokenChanges().changes())\n+    {\n+      commands.add(new Command.LabelTokenCommand(record.getBefore(), record.forReadingLinkage()));\n+    }\n+    for (RecordProxy<RelationshipTypeTokenRecord, Void> record :\n+        recordChangeSet.getRelationshipTypeTokenChanges().changes())\n+    {\n+      commands.add(new Command.RelationshipTypeTokenCommand(record.getBefore(), record.forReadingLinkage()));\n+    }\n+    for (RecordProxy<PropertyKeyTokenRecord, Void> record :\n+        recordChangeSet.getPropertyKeyTokenChanges().changes())\n+    {\n+      commands.add(new Command.PropertyKeyTokenCommand(record.getBefore(), record.forReadingLinkage()));\n+    }\n+\n+    // Collect nodes, relationships, properties\n+    Command[] nodeCommands = EMPTY_COMMANDS;\n+    int skippedCommands = 0;\n+    if (recordChangeSet.getNodeRecords().changeSize() > 0)\n+    {\n+      nodeCommands = new Command[recordChangeSet.getNodeRecords().changeSize()];\n+      int i = 0;\n+      for (RecordProxy<NodeRecord, Void> change : recordChangeSet.getNodeRecords().changes())\n+      {\n+        NodeRecord record = prepared(change, nodeStore);\n+        integrityValidator.validateNodeRecord(record);\n+        nodeCommands[i++] = new Command.NodeCommand(change.getBefore(), record);\n+      }\n+      Arrays.sort(nodeCommands, COMMAND_SORTER);\n+    }\n+\n+    Command[] relCommands = EMPTY_COMMANDS;\n+    if (recordChangeSet.getRelRecords().changeSize() > 0)\n+    {\n+      relCommands = new Command[recordChangeSet.getRelRecords().changeSize()];\n+      int i = 0;\n+      for (RecordProxy<RelationshipRecord, Void> change : recordChangeSet.getRelRecords().changes())\n+      {\n+        relCommands[i++] = new Command.RelationshipCommand(change.getBefore(),\n+            prepared(change, relationshipStore));\n+      }\n+      Arrays.sort(relCommands, COMMAND_SORTER);\n+    }\n+\n+    Command[] propCommands = EMPTY_COMMANDS;\n+    if (recordChangeSet.getPropertyRecords().changeSize() > 0)\n+    {\n+      propCommands = new Command[recordChangeSet.getPropertyRecords().changeSize()];\n+      int i = 0;\n+      for (RecordProxy<PropertyRecord, PrimitiveRecord> change :\n+          recordChangeSet.getPropertyRecords().changes())\n+      {\n+        propCommands[i++] = new Command.PropertyCommand(change.getBefore(),\n+            prepared(change, propertyStore));\n+      }\n+      Arrays.sort(propCommands, COMMAND_SORTER);\n+    }\n+\n+    Command[] relGroupCommands = EMPTY_COMMANDS;\n+    if (recordChangeSet.getRelGroupRecords().changeSize() > 0)\n+    {\n+      relGroupCommands = new Command[recordChangeSet.getRelGroupRecords().changeSize()];\n+      int i = 0;\n+      for (RecordProxy<RelationshipGroupRecord, Integer> change :\n+          recordChangeSet.getRelGroupRecords().changes())\n+      {\n+        if (change.isCreated() && !change.forReadingLinkage().inUse())\n         {\n-            throw new IllegalStateException( \"Unable to delete Node[\" + nodeId +\n-                                             \"] since it has already been deleted.\" );\n+          /*\n+           * This is an edge case that may come up and which we must handle properly. Relationship groups are\n+           * not managed by the tx state, since they are created as side effects rather than through\n+           * direct calls. However, they differ from say, dynamic records, in that their management can happen\n+           * through separate code paths. What we are interested in here is the following scenario.\n+           * 0. A node has one less relationship that is required to transition to dense node. The relationships\n+           *    it has belong to at least two different types\n+           * 1. In the same tx, a relationship is added making the node dense and all the relationships of a type\n+           *    are removed from that node. Regardless of the order these operations happen, the creation of the\n+           *    relationship (and the transition of the node to dense) will happen first.\n+           * 2. A relationship group will be created because of the transition to dense and then deleted because\n+           *    all the relationships it would hold are no longer there. This results in a relationship group\n+           *    command that appears in the tx as not in use. Depending on the final order of operations, this\n+           *    can end up using an id that is higher than the highest id seen so far. This may not be a problem\n+           *    for a single instance, but it can result in errors in cases where transactions are applied\n+           *    externally, such as backup or HA.\n+           *\n+           * The way we deal with this issue here is by not issuing a command for that offending record. This is\n+           * safe, since the record is not in use and never was, so the high id is not necessary to change and\n+           * the store remains consistent.\n+           */\n+          skippedCommands++;\n+          continue;\n         }\n-        nodeRecord.setInUse( false );\n-        nodeRecord.setLabelField( Record.NO_LABELS_FIELD.intValue(),\n-                markNotInUse( nodeRecord.getDynamicLabelRecords() ) );\n-        getAndDeletePropertyChain( nodeRecord );\n-    }\n-\n-    private Collection<DynamicRecord> markNotInUse( Collection<DynamicRecord> dynamicLabelRecords )\n-    {\n-        for ( DynamicRecord record : dynamicLabelRecords )\n+        relGroupCommands[i++] = new Command.RelationshipGroupCommand(change.getBefore(),\n+            prepared(change, relationshipGroupStore));\n+      }\n+      relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf(relGroupCommands, i) : relGroupCommands;\n+      Arrays.sort(relGroupCommands, COMMAND_SORTER);\n+    }\n+\n+    addFiltered(commands, Mode.CREATE, propCommands, relCommands, relGroupCommands, nodeCommands);\n+    addFiltered(commands, Mode.UPDATE, propCommands, relCommands, relGroupCommands, nodeCommands);\n+    addFiltered(commands, Mode.DELETE, propCommands, relCommands, relGroupCommands, nodeCommands);\n+\n+    if (neoStoreRecord != null)\n+    {\n+      for (RecordProxy<NeoStoreRecord, Void> change : neoStoreRecord.changes())\n+      {\n+        commands.add(new Command.NeoStoreCommand(change.getBefore(), change.forReadingData()));\n+      }\n+    }\n+    for (RecordProxy<SchemaRecord, SchemaRule> change : recordChangeSet.getSchemaRuleChanges().changes())\n+    {\n+      if (change.forReadingLinkage().inUse())\n+      {\n+        integrityValidator.validateSchemaRule(change.getAdditionalData());\n+      }\n+      commands.add(new Command.SchemaRuleCommand(\n+          change.getBefore(), change.forChangingData(), change.getAdditionalData()));\n+    }\n+    assert commands.size() == noOfCommands - skippedCommands : format(\"Expected %d final commands, got %d \" +\n+        \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands);\n+\n+    prepared = true;\n+  }\n+\n+  private <RECORD extends AbstractBaseRecord> RECORD prepared(\n+      RecordProxy<RECORD, ?> proxy, RecordStore<RECORD> store)\n+  {\n+    RECORD after = proxy.forReadingLinkage();\n+    store.prepareForCommit(after);\n+    return after;\n+  }\n+\n+  public void relCreate(long id, int typeId, long startNodeId, long endNodeId)\n+  {\n+    relationshipCreator.relationshipCreate(id, typeId, startNodeId, endNodeId, recordChangeSet, locks);\n+  }\n+\n+  public void relDelete(long relId)\n+  {\n+    relationshipDeleter.relDelete(relId, recordChangeSet, locks);\n+  }\n+\n+  @SafeVarargs\n+  private final void addFiltered(Collection<StorageCommand> target, Mode mode,\n+                                 Command[]... commands)\n+  {\n+    for (Command[] c : commands)\n+    {\n+      for (Command command : c)\n+      {\n+        if (command.getMode() == mode)\n         {\n-            record.setInUse( false );\n+          target.add(command);\n         }\n-        return dynamicLabelRecords;\n-    }\n-\n-    private void getAndDeletePropertyChain( NodeRecord nodeRecord )\n-    {\n-        propertyDeleter.deletePropertyChain( nodeRecord, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Removes the given property identified by its index from the relationship\n-     * with the given id.\n-     *\n-     * @param relId The id of the relationship that is to have the property\n-     *            removed.\n-     * @param propertyKey The index key of the property.\n-     */\n-    public void relRemoveProperty( long relId, int propertyKey )\n-    {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n-        propertyDeleter.removeProperty( rel, propertyKey, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Removes the given property identified by indexKeyId of the node with the\n-     * given id.\n-     *\n-     * @param nodeId The id of the node that is to have the property removed.\n-     * @param propertyKey The index key of the property.\n-     */\n-    public void nodeRemoveProperty( long nodeId, int propertyKey )\n-    {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n-        propertyDeleter.removeProperty( node, propertyKey, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Changes an existing property's value of the given relationship, with the\n-     * given index to the passed value\n-     *  @param relId The id of the relationship which holds the property to\n-     *            change.\n-     * @param propertyKey The index of the key of the property to change.\n-     * @param value The new value of the property.\n-     */\n-    public void relChangeProperty( long relId, int propertyKey, Value value )\n-    {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n-        propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Changes an existing property of the given node, with the given index to\n-     * the passed value\n-     *  @param nodeId The id of the node which holds the property to change.\n-     * @param propertyKey The index of the key of the property to change.\n-     * @param value The new value of the property.\n-     */\n-    public void nodeChangeProperty( long nodeId, int propertyKey, Value value )\n-    {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n-        propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Adds a property to the given relationship, with the given index and\n-     * value.\n-     *  @param relId The id of the relationship to which to add the property.\n-     * @param propertyKey The index of the key of the property to add.\n-     * @param value The value of the property.\n-     */\n-    public void relAddProperty( long relId, int propertyKey, Value value )\n-    {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n-        propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Adds a property to the given node, with the given index and value.\n-     *  @param nodeId The id of the node to which to add the property.\n-     * @param propertyKey The index of the key of the property to add.\n-     * @param value The value of the property.\n-     */\n-    public void nodeAddProperty( long nodeId, int propertyKey, Value value )\n-    {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n-        propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Creates a node for the given id\n-     *\n-     * @param nodeId The id of the node to create.\n-     */\n-    public void nodeCreate( long nodeId )\n-    {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().create( nodeId, null ).forChangingData();\n-        nodeRecord.setInUse( true );\n-        nodeRecord.setCreated();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Deletes a node by its id, returning its properties which are now removed.\n+   *\n+   * @param nodeId The id of the node to delete.\n+   */\n+  public void nodeDelete(long nodeId)\n+  {\n+    NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null).forChangingData();\n+    if (!nodeRecord.inUse())\n+    {\n+      throw new IllegalStateException(\"Unable to delete Node[\" + nodeId +\n+          \"] since it has already been deleted.\");\n+    }\n+    nodeRecord.setInUse(false);\n+    nodeRecord.setLabelField(Record.NO_LABELS_FIELD.intValue(),\n+        markNotInUse(nodeRecord.getDynamicLabelRecords()));\n+    getAndDeletePropertyChain(nodeRecord);\n+  }\n+\n+  private Collection<DynamicRecord> markNotInUse(Collection<DynamicRecord> dynamicLabelRecords)\n+  {\n+    for (DynamicRecord record : dynamicLabelRecords)\n+    {\n+      record.setInUse(false);\n+    }\n+    return dynamicLabelRecords;\n+  }\n+\n+  private void getAndDeletePropertyChain(NodeRecord nodeRecord)\n+  {\n+    propertyDeleter.deletePropertyChain(nodeRecord, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Removes the given property identified by its index from the relationship\n+   * with the given id.\n+   *\n+   * @param relId       The id of the relationship that is to have the property\n+   *                    removed.\n+   * @param propertyKey The index key of the property.\n+   */\n+  public void relRemoveProperty(long relId, int propertyKey)\n+  {\n+    RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad(relId, null);\n+    propertyDeleter.removeProperty(rel, propertyKey, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Removes the given property identified by indexKeyId of the node with the\n+   * given id.\n+   *\n+   * @param nodeId      The id of the node that is to have the property removed.\n+   * @param propertyKey The index key of the property.\n+   */\n+  public void nodeRemoveProperty(long nodeId, int propertyKey)\n+  {\n+    RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null);\n+    propertyDeleter.removeProperty(node, propertyKey, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Changes an existing property's value of the given relationship, with the\n+   * given index to the passed value\n+   *\n+   * @param relId       The id of the relationship which holds the property to\n+   *                    change.\n+   * @param propertyKey The index of the key of the property to change.\n+   * @param value       The new value of the property.\n+   */\n+  public void relChangeProperty(long relId, int propertyKey, Value value)\n+  {\n+    RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad(relId, null);\n+    propertyCreator.primitiveSetProperty(rel, propertyKey, value, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Changes an existing property of the given node, with the given index to\n+   * the passed value\n+   *\n+   * @param nodeId      The id of the node which holds the property to change.\n+   * @param propertyKey The index of the key of the property to change.\n+   * @param value       The new value of the property.\n+   */\n+  public void nodeChangeProperty(long nodeId, int propertyKey, Value value)\n+  {\n+    RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null);\n+    propertyCreator.primitiveSetProperty(node, propertyKey, value, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Adds a property to the given relationship, with the given index and\n+   * value.\n+   *\n+   * @param relId       The id of the relationship to which to add the property.\n+   * @param propertyKey The index of the key of the property to add.\n+   * @param value       The value of the property.\n+   */\n+  public void relAddProperty(long relId, int propertyKey, Value value)\n+  {\n+    RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad(relId, null);\n+    propertyCreator.primitiveSetProperty(rel, propertyKey, value, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Adds a property to the given node, with the given index and value.\n+   *\n+   * @param nodeId      The id of the node to which to add the property.\n+   * @param propertyKey The index of the key of the property to add.\n+   * @param value       The value of the property.\n+   */\n+  public void nodeAddProperty(long nodeId, int propertyKey, Value value)\n+  {\n+    RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null);\n+    propertyCreator.primitiveSetProperty(node, propertyKey, value, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Creates a node for the given id\n+   *\n+   * @param nodeId The id of the node to create.\n+   */\n+  public void nodeCreate(long nodeId)\n+  {\n+    NodeRecord nodeRecord = recordChangeSet.getNodeRecords().create(nodeId, null).forChangingData();\n+    nodeRecord.setInUse(true);\n+    nodeRecord.setCreated();\n+  }\n+\n+  /**\n+   * Creates a property index entry out of the given id and string.\n+   *\n+   * @param key The key of the property index, as a string.\n+   * @param id  The property index record id.\n+   */\n+  public void createPropertyKeyToken(String key, int id)\n+  {\n+    TokenCreator<PropertyKeyTokenRecord, Token> creator =\n+        new TokenCreator<>(neoStores.getPropertyKeyTokenStore());\n+    creator.createToken(key, id, recordChangeSet.getPropertyKeyTokenChanges());\n+  }\n+\n+  /**\n+   * Creates a property index entry out of the given id and string.\n+   *\n+   * @param name The key of the property index, as a string.\n+   * @param id   The property index record id.\n+   */\n+  public void createLabelToken(String name, int id)\n+  {\n+    TokenCreator<LabelTokenRecord, Token> creator =\n+        new TokenCreator<>(neoStores.getLabelTokenStore());\n+    creator.createToken(name, id, recordChangeSet.getLabelTokenChanges());\n+  }\n+\n+  /**\n+   * Creates a new RelationshipType record with the given id that has the\n+   * given name.\n+   *\n+   * @param name The name of the relationship type.\n+   * @param id   The id of the new relationship type record.\n+   */\n+  public void createRelationshipTypeToken(String name, int id)\n+  {\n+    TokenCreator<RelationshipTypeTokenRecord, RelationshipTypeToken> creator =\n+        new TokenCreator<>(neoStores.getRelationshipTypeTokenStore());\n+    creator.createToken(name, id, recordChangeSet.getRelationshipTypeTokenChanges());\n+  }\n+\n+  private static class CommandSorter implements Comparator<Command>\n+  {\n+    @Override\n+    public int compare(Command o1, Command o2)\n+    {\n+      long id1 = o1.getKey();\n+      long id2 = o2.getKey();\n+      long diff = id1 - id2;\n+      if (diff > Integer.MAX_VALUE)\n+      {\n+        return Integer.MAX_VALUE;\n+      } else if (diff < Integer.MIN_VALUE)\n+      {\n+        return Integer.MIN_VALUE;\n+      } else\n+      {\n+        return (int) diff;\n+      }\n     }\n \n-    /**\n-     * Creates a property index entry out of the given id and string.\n-     *\n-     * @param key The key of the property index, as a string.\n-     * @param id The property index record id.\n-     */\n-    public void createPropertyKeyToken( String key, int id )\n+    @Override\n+    public boolean equals(Object o)\n     {\n-        TokenCreator<PropertyKeyTokenRecord, Token> creator =\n-                new TokenCreator<>( neoStores.getPropertyKeyTokenStore() );\n-        creator.createToken( key, id, recordChangeSet.getPropertyKeyTokenChanges() );\n+      return o instanceof CommandSorter;\n     }\n \n-    /**\n-     * Creates a property index entry out of the given id and string.\n-     *\n-     * @param name The key of the property index, as a string.\n-     * @param id The property index record id.\n-     */\n-    public void createLabelToken( String name, int id )\n+    @Override\n+    public int hashCode()\n     {\n-        TokenCreator<LabelTokenRecord, Token> creator =\n-                new TokenCreator<>( neoStores.getLabelTokenStore() );\n-        creator.createToken( name, id, recordChangeSet.getLabelTokenChanges() );\n+      return 3217;\n     }\n+  }\n \n-    /**\n-     * Creates a new RelationshipType record with the given id that has the\n-     * given name.\n-     *\n-     * @param name The name of the relationship type.\n-     * @param id The id of the new relationship type record.\n-     */\n-    public void createRelationshipTypeToken( String name, int id )\n-    {\n-        TokenCreator<RelationshipTypeTokenRecord, RelationshipTypeToken> creator =\n-                new TokenCreator<>( neoStores.getRelationshipTypeTokenStore() );\n-        creator.createToken( name, id, recordChangeSet.getRelationshipTypeTokenChanges() );\n-    }\n+  private static final CommandSorter COMMAND_SORTER = new CommandSorter();\n \n-    private static class CommandSorter implements Comparator<Command>\n+  private RecordProxy<NeoStoreRecord, Void> getOrLoadNeoStoreRecord()\n+  {\n+    // TODO Move this neo store record thingie into RecordAccessSet\n+    if (neoStoreRecord == null)\n     {\n+      neoStoreRecord = new RecordChanges<>(new RecordChanges.Loader<NeoStoreRecord, Void>()\n+      {\n         @Override\n-        public int compare( Command o1, Command o2 )\n+        public NeoStoreRecord newUnused(long key, Void additionalData)\n         {\n-            long id1 = o1.getKey();\n-            long id2 = o2.getKey();\n-            long diff = id1 - id2;\n-            if ( diff > Integer.MAX_VALUE )\n-            {\n-                return Integer.MAX_VALUE;\n-            }\n-            else if ( diff < Integer.MIN_VALUE )\n-            {\n-                return Integer.MIN_VALUE;\n-            }\n-            else\n-            {\n-                return (int) diff;\n-            }\n+          throw new UnsupportedOperationException();\n         }\n \n         @Override\n-        public boolean equals( Object o )\n+        public NeoStoreRecord load(long key, Void additionalData)\n         {\n-            return o instanceof CommandSorter;\n+          return metaDataStore.graphPropertyRecord();\n         }\n \n         @Override\n-        public int hashCode()\n-        {\n-            return 3217;\n-        }\n-    }\n-\n-    private static final CommandSorter COMMAND_SORTER = new CommandSorter();\n-\n-    private RecordProxy<NeoStoreRecord, Void> getOrLoadNeoStoreRecord()\n-    {\n-        // TODO Move this neo store record thingie into RecordAccessSet\n-        if ( neoStoreRecord == null )\n-        {\n-            neoStoreRecord = new RecordChanges<>( new RecordChanges.Loader<NeoStoreRecord, Void>()\n-            {\n-                @Override\n-                public NeoStoreRecord newUnused( long key, Void additionalData )\n-                {\n-                    throw new UnsupportedOperationException();\n-                }\n-\n-                @Override\n-                public NeoStoreRecord load( long key, Void additionalData )\n-                {\n-                    return metaDataStore.graphPropertyRecord();\n-                }\n-\n-                @Override\n-                public void ensureHeavy( NeoStoreRecord record )\n-                {\n-                }\n-\n-                @Override\n-                public NeoStoreRecord clone( NeoStoreRecord neoStoreRecord )\n-                {\n-                    return neoStoreRecord.clone();\n-                }\n-            }, new IntCounter() );\n-        }\n-        return neoStoreRecord.getOrLoad( 0L, null );\n-    }\n-\n-    /**\n-     * Adds a property to the graph, with the given index and value.\n-     *  @param propertyKey The index of the key of the property to add.\n-     * @param value The value of the property.\n-     */\n-    public void graphAddProperty( int propertyKey, Value value )\n-    {\n-        propertyCreator.primitiveSetProperty( getOrLoadNeoStoreRecord(), propertyKey, value,\n-                recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Changes an existing property of the graph, with the given index to\n-     * the passed value\n-     *\n-     * @param propertyKey The index of the key of the property to change.\n-     * @param value The new value of the property.\n-     */\n-    public void graphChangeProperty( int propertyKey, Value value )\n-    {\n-        propertyCreator.primitiveSetProperty( getOrLoadNeoStoreRecord(), propertyKey, value,\n-                recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    /**\n-     * Removes the given property identified by indexKeyId of the graph with the\n-     * given id.\n-     *\n-     * @param propertyKey The index key of the property.\n-     */\n-    public void graphRemoveProperty( int propertyKey )\n-    {\n-        RecordProxy<NeoStoreRecord, Void> recordChange = getOrLoadNeoStoreRecord();\n-        propertyDeleter.removeProperty( recordChange, propertyKey, recordChangeSet.getPropertyRecords() );\n-    }\n-\n-    public void createSchemaRule( SchemaRule schemaRule )\n-    {\n-        for ( DynamicRecord change : recordChangeSet.getSchemaRuleChanges()\n-                .create( schemaRule.getId(), schemaRule )\n-                .forChangingData() )\n+        public void ensureHeavy(NeoStoreRecord record)\n         {\n-            change.setInUse( true );\n-            change.setCreated();\n         }\n-    }\n \n-    public void dropSchemaRule( SchemaRule rule )\n-    {\n-        RecordProxy<SchemaRecord, SchemaRule> change =\n-                recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n-        SchemaRecord records = change.forChangingData();\n-        for ( DynamicRecord record : records )\n+        @Override\n+        public NeoStoreRecord clone(NeoStoreRecord neoStoreRecord)\n         {\n-            record.setInUse( false );\n+          return neoStoreRecord.clone();\n         }\n-        records.setInUse( false );\n-    }\n-\n-    public void changeSchemaRule( SchemaRule rule, SchemaRule updatedRule )\n-    {\n-        //Read the current record\n-        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges()\n-                .getOrLoad( rule.getId(), rule );\n-        SchemaRecord records = change.forReadingData();\n-\n-        //Register the change of the record\n-        RecordProxy<SchemaRecord,SchemaRule> recordChange = recordChangeSet.getSchemaRuleChanges()\n-                .setRecord( rule.getId(), records, updatedRule );\n-        SchemaRecord dynamicRecords = recordChange.forChangingData();\n-\n-        //Update the record\n-        dynamicRecords.setDynamicRecords( schemaStore.allocateFrom( updatedRule ) );\n-    }\n-\n-    public void addLabelToNode( int labelId, long nodeId )\n-    {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null ).forChangingData();\n-        parseLabelsField( nodeRecord ).add( labelId, nodeStore, nodeStore.getDynamicLabelStore() );\n-    }\n-\n-    public void removeLabelFromNode( int labelId, long nodeId )\n-    {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null ).forChangingData();\n-        parseLabelsField( nodeRecord ).remove( labelId, nodeStore );\n-    }\n-\n-    public void setConstraintIndexOwner( IndexRule indexRule, long constraintId )\n-    {\n-        IndexRule updatedIndexRule = indexRule.withOwningConstraint( constraintId );\n-        changeSchemaRule( indexRule, updatedIndexRule );\n-    }\n-\n-    public interface PropertyReceiver<P extends StorageProperty>\n-    {\n-        void receive( P property, long propertyRecordId );\n-    }\n+      }, new IntCounter());\n+    }\n+    return neoStoreRecord.getOrLoad(0L, null);\n+  }\n+\n+  /**\n+   * Adds a property to the graph, with the given index and value.\n+   *\n+   * @param propertyKey The index of the key of the property to add.\n+   * @param value       The value of the property.\n+   */\n+  public void graphAddProperty(int propertyKey, Value value)\n+  {\n+    propertyCreator.primitiveSetProperty(getOrLoadNeoStoreRecord(), propertyKey, value,\n+        recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Changes an existing property of the graph, with the given index to\n+   * the passed value\n+   *\n+   * @param propertyKey The index of the key of the property to change.\n+   * @param value       The new value of the property.\n+   */\n+  public void graphChangeProperty(int propertyKey, Value value)\n+  {\n+    propertyCreator.primitiveSetProperty(getOrLoadNeoStoreRecord(), propertyKey, value,\n+        recordChangeSet.getPropertyRecords());\n+  }\n+\n+  /**\n+   * Removes the given property identified by indexKeyId of the graph with the\n+   * given id.\n+   *\n+   * @param propertyKey The index key of the property.\n+   */\n+  public void graphRemoveProperty(int propertyKey)\n+  {\n+    RecordProxy<NeoStoreRecord, Void> recordChange = getOrLoadNeoStoreRecord();\n+    propertyDeleter.removeProperty(recordChange, propertyKey, recordChangeSet.getPropertyRecords());\n+  }\n+\n+  public void createSchemaRule(SchemaRule schemaRule)\n+  {\n+    for (DynamicRecord change : recordChangeSet.getSchemaRuleChanges()\n+        .create(schemaRule.getId(), schemaRule)\n+        .forChangingData())\n+    {\n+      change.setInUse(true);\n+      change.setCreated();\n+    }\n+  }\n+\n+  public void dropSchemaRule(SchemaRule rule)\n+  {\n+    RecordProxy<SchemaRecord, SchemaRule> change =\n+        recordChangeSet.getSchemaRuleChanges().getOrLoad(rule.getId(), rule);\n+    SchemaRecord records = change.forChangingData();\n+    for (DynamicRecord record : records)\n+    {\n+      record.setInUse(false);\n+    }\n+    records.setInUse(false);\n+  }\n+\n+  public void changeSchemaRule(SchemaRule rule, SchemaRule updatedRule)\n+  {\n+    //Read the current record\n+    RecordProxy<SchemaRecord, SchemaRule> change = recordChangeSet.getSchemaRuleChanges()\n+        .getOrLoad(rule.getId(), rule);\n+    SchemaRecord records = change.forReadingData();\n+\n+    //Register the change of the record\n+    RecordProxy<SchemaRecord, SchemaRule> recordChange = recordChangeSet.getSchemaRuleChanges()\n+        .setRecord(rule.getId(), records, updatedRule);\n+    SchemaRecord dynamicRecords = recordChange.forChangingData();\n+\n+    //Update the record\n+    dynamicRecords.setDynamicRecords(schemaStore.allocateFrom(updatedRule));\n+  }\n+\n+  public void addLabelToNode(int labelId, long nodeId)\n+  {\n+    NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null).forChangingData();\n+    parseLabelsField(nodeRecord).add(labelId, nodeStore, nodeStore.getDynamicLabelStore());\n+  }\n+\n+  public void removeLabelFromNode(int labelId, long nodeId)\n+  {\n+    NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null).forChangingData();\n+    parseLabelsField(nodeRecord).remove(labelId, nodeStore);\n+  }\n+\n+  public void setConstraintIndexOwner(IndexRule indexRule, long constraintId)\n+  {\n+    IndexRule updatedIndexRule = indexRule.withOwningConstraint(constraintId);\n+    changeSchemaRule(indexRule, updatedIndexRule);\n+  }\n+\n+  public interface PropertyReceiver<P extends StorageProperty>\n+  {\n+    void receive(P property, long propertyRecordId);\n+  }\n }\n",
            "diff_size": 762
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "463",
                    "column": "22",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "473",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1854/TransactionRecordState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1854/TransactionRecordState.java\nindex ce673c9fb8b..c903b230090 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1854/TransactionRecordState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1854/TransactionRecordState.java\n@@ -93,7 +93,7 @@ public class TransactionRecordState implements RecordState\n     private final PropertyCreator propertyCreator;\n     private final PropertyDeleter propertyDeleter;\n \n-    private RecordChanges<NeoStoreRecord, Void> neoStoreRecord;\n+    private RecordChanges<NeoStoreRecord,Void> neoStoreRecord;\n     private boolean prepared;\n \n     public TransactionRecordState( NeoStores neoStores, IntegrityValidator integrityValidator,\n@@ -124,8 +124,7 @@ public class TransactionRecordState implements RecordState\n     @Override\n     public boolean hasChanges()\n     {\n-        return recordChangeSet.hasChanges() ||\n-                (neoStoreRecord != null && neoStoreRecord.changeSize() > 0);\n+        return recordChangeSet.hasChanges() || ( neoStoreRecord != null && neoStoreRecord.changeSize() > 0 );\n     }\n \n     @Override\n@@ -135,21 +134,19 @@ public class TransactionRecordState implements RecordState\n \n         integrityValidator.validateTransactionStartKnowledge( lastCommittedTxWhenTransactionStarted );\n \n-        int noOfCommands = recordChangeSet.changeSize() +\n-                           (neoStoreRecord != null ? neoStoreRecord.changeSize() : 0);\n-\n-        for ( RecordProxy<LabelTokenRecord, Void> record : recordChangeSet.getLabelTokenChanges().changes() )\n+        int noOfCommands = recordChangeSet.changeSize() + ( neoStoreRecord != null ? neoStoreRecord.changeSize() : 0 );\n+for ( RecordProxy<LabelTokenRecord,Void> record : recordChangeSet.getLabelTokenChanges().changes() )\n         {\n             commands.add( new Command.LabelTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n         }\n-        for ( RecordProxy<RelationshipTypeTokenRecord, Void> record :\n+        for ( RecordProxy<RelationshipTypeTokenRecord,Void> record:\n             recordChangeSet.getRelationshipTypeTokenChanges().changes() )\n-        {\n+{\n             commands.add( new Command.RelationshipTypeTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n         }\n-        for ( RecordProxy<PropertyKeyTokenRecord, Void> record :\n+        for ( RecordProxy<PropertyKeyTokenRecord,Void> record:\n             recordChangeSet.getPropertyKeyTokenChanges().changes() )\n-        {\n+{\n             commands.add( new Command.PropertyKeyTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n         }\n \n@@ -160,7 +157,7 @@ public class TransactionRecordState implements RecordState\n         {\n             nodeCommands = new Command[recordChangeSet.getNodeRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<NodeRecord, Void> change : recordChangeSet.getNodeRecords().changes() )\n+            for ( RecordProxy<NodeRecord,Void> change : recordChangeSet.getNodeRecords().changes() )\n             {\n                 NodeRecord record = prepared( change, nodeStore );\n                 integrityValidator.validateNodeRecord( record );\n@@ -174,7 +171,7 @@ public class TransactionRecordState implements RecordState\n         {\n             relCommands = new Command[recordChangeSet.getRelRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<RelationshipRecord, Void> change : recordChangeSet.getRelRecords().changes() )\n+            for ( RecordProxy<RelationshipRecord,Void> change : recordChangeSet.getRelRecords().changes() )\n             {\n                 relCommands[i++] = new Command.RelationshipCommand( change.getBefore(),\n                         prepared( change, relationshipStore ) );\n@@ -187,9 +184,9 @@ public class TransactionRecordState implements RecordState\n         {\n             propCommands = new Command[recordChangeSet.getPropertyRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<PropertyRecord, PrimitiveRecord> change :\n+            for ( RecordProxy<PropertyRecord,PrimitiveRecord> change:\n                 recordChangeSet.getPropertyRecords().changes() )\n-            {\n+{\n                 propCommands[i++] = new Command.PropertyCommand( change.getBefore(),\n                         prepared( change, propertyStore ) );\n             }\n@@ -201,9 +198,9 @@ public class TransactionRecordState implements RecordState\n         {\n             relGroupCommands = new Command[recordChangeSet.getRelGroupRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<RelationshipGroupRecord, Integer> change :\n+            for ( RecordProxy<RelationshipGroupRecord,Integer> change:\n                 recordChangeSet.getRelGroupRecords().changes() )\n-            {\n+{\n                 if ( change.isCreated() && !change.forReadingLinkage().inUse() )\n                 {\n                     /*\n@@ -230,41 +227,39 @@ public class TransactionRecordState implements RecordState\n                     skippedCommands++;\n                     continue;\n                 }\n-                relGroupCommands[i++] = new Command.RelationshipGroupCommand( change.getBefore(),\n+\n+relGroupCommands[i++] = new Command.RelationshipGroupCommand( change.getBefore(),\n                         prepared( change, relationshipGroupStore ) );\n             }\n-            relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf( relGroupCommands, i ) : relGroupCommands;\n+\n+relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf( relGroupCommands, i ) : relGroupCommands;\n             Arrays.sort( relGroupCommands, COMMAND_SORTER );\n         }\n \n         addFiltered( commands, Mode.CREATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n         addFiltered( commands, Mode.UPDATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n         addFiltered( commands, Mode.DELETE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-\n-        if ( neoStoreRecord != null )\n+if ( neoStoreRecord != null )\n         {\n-            for ( RecordProxy<NeoStoreRecord, Void> change : neoStoreRecord.changes() )\n+            for ( RecordProxy<NeoStoreRecord,Void> change : neoStoreRecord.changes() )\n             {\n                 commands.add( new Command.NeoStoreCommand( change.getBefore(), change.forReadingData() ) );\n             }\n         }\n-        for ( RecordProxy<SchemaRecord, SchemaRule> change : recordChangeSet.getSchemaRuleChanges().changes() )\n+        for ( RecordProxy<SchemaRecord,SchemaRule> change : recordChangeSet.getSchemaRuleChanges().changes() )\n         {\n             if ( change.forReadingLinkage().inUse() )\n             {\n                 integrityValidator.validateSchemaRule( change.getAdditionalData() );\n             }\n-            commands.add( new Command.SchemaRuleCommand(\n-                    change.getBefore(), change.forChangingData(), change.getAdditionalData() ) );\n+            commands.add( new Command.SchemaRuleCommand( change.getBefore(), change.forChangingData(), change.getAdditionalData() ) );\n         }\n-        assert commands.size() == noOfCommands - skippedCommands : format( \"Expected %d final commands, got %d \" +\n-                \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands );\n \n-        prepared = true;\n+assert commands.size() == noOfCommands - skippedCommands : format( \"Expected %d final commands, got %d \" + \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands );\n+prepared = true;\n     }\n \n-    private <RECORD extends AbstractBaseRecord> RECORD prepared(\n-            RecordProxy<RECORD,?> proxy, RecordStore<RECORD> store )\n+    private <RECORD extends AbstractBaseRecord> RECORD prepared( RecordProxy<RECORD,?> proxy, RecordStore<RECORD> store )\n     {\n         RECORD after = proxy.forReadingLinkage();\n         store.prepareForCommit( after );\n@@ -282,9 +277,8 @@ public class TransactionRecordState implements RecordState\n     }\n \n     @SafeVarargs\n-    private final void addFiltered( Collection<StorageCommand> target, Mode mode,\n-                                    Command[]... commands )\n-    {\n+    private final void addFiltered( Collection<StorageCommand> target, Mode mode, Command[]... commands )\n+{\n         for ( Command[] c : commands )\n         {\n             for ( Command command : c )\n@@ -307,13 +301,12 @@ public class TransactionRecordState implements RecordState\n         NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null ).forChangingData();\n         if ( !nodeRecord.inUse() )\n         {\n-            throw new IllegalStateException( \"Unable to delete Node[\" + nodeId +\n-                                             \"] since it has already been deleted.\" );\n-        }\n+            throw new IllegalStateException( \"Unable to delete Node[\" + nodeId + \"] since it has already been deleted.\" );\n+    }\n         nodeRecord.setInUse( false );\n         nodeRecord.setLabelField( Record.NO_LABELS_FIELD.intValue(),\n                 markNotInUse( nodeRecord.getDynamicLabelRecords() ) );\n-        getAndDeletePropertyChain( nodeRecord );\n+getAndDeletePropertyChain( nodeRecord );\n     }\n \n     private Collection<DynamicRecord> markNotInUse( Collection<DynamicRecord> dynamicLabelRecords )\n@@ -322,7 +315,8 @@ public class TransactionRecordState implements RecordState\n         {\n             record.setInUse( false );\n         }\n-        return dynamicLabelRecords;\n+\n+return dynamicLabelRecords;\n     }\n \n     private void getAndDeletePropertyChain( NodeRecord nodeRecord )\n@@ -340,7 +334,7 @@ public class TransactionRecordState implements RecordState\n      */\n     public void relRemoveProperty( long relId, int propertyKey )\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n+        RecordProxy<RelationshipRecord,Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n         propertyDeleter.removeProperty( rel, propertyKey, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -353,7 +347,7 @@ public class TransactionRecordState implements RecordState\n      */\n     public void nodeRemoveProperty( long nodeId, int propertyKey )\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n+        RecordProxy<NodeRecord,Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n         propertyDeleter.removeProperty( node, propertyKey, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -367,7 +361,7 @@ public class TransactionRecordState implements RecordState\n      */\n     public void relChangeProperty( long relId, int propertyKey, Value value )\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n+        RecordProxy<RelationshipRecord,Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n         propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -380,7 +374,7 @@ public class TransactionRecordState implements RecordState\n      */\n     public void nodeChangeProperty( long nodeId, int propertyKey, Value value )\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n+        RecordProxy<NodeRecord,Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n         propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -393,7 +387,7 @@ public class TransactionRecordState implements RecordState\n      */\n     public void relAddProperty( long relId, int propertyKey, Value value )\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n+        RecordProxy<RelationshipRecord,Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n         propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -405,7 +399,7 @@ public class TransactionRecordState implements RecordState\n      */\n     public void nodeAddProperty( long nodeId, int propertyKey, Value value )\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n+        RecordProxy<NodeRecord,Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n         propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -429,9 +423,8 @@ public class TransactionRecordState implements RecordState\n      */\n     public void createPropertyKeyToken( String key, int id )\n     {\n-        TokenCreator<PropertyKeyTokenRecord, Token> creator =\n-                new TokenCreator<>( neoStores.getPropertyKeyTokenStore() );\n-        creator.createToken( key, id, recordChangeSet.getPropertyKeyTokenChanges() );\n+        TokenCreator<PropertyKeyTokenRecord,Token> creator = new TokenCreator<>( neoStores.getPropertyKeyTokenStore() );\n+creator.createToken( key, id, recordChangeSet.getPropertyKeyTokenChanges() );\n     }\n \n     /**\n@@ -442,9 +435,8 @@ public class TransactionRecordState implements RecordState\n      */\n     public void createLabelToken( String name, int id )\n     {\n-        TokenCreator<LabelTokenRecord, Token> creator =\n-                new TokenCreator<>( neoStores.getLabelTokenStore() );\n-        creator.createToken( name, id, recordChangeSet.getLabelTokenChanges() );\n+        TokenCreator<LabelTokenRecord,Token> creator = new TokenCreator<>( neoStores.getLabelTokenStore() );\n+creator.createToken( name, id, recordChangeSet.getLabelTokenChanges() );\n     }\n \n     /**\n@@ -456,9 +448,8 @@ public class TransactionRecordState implements RecordState\n      */\n     public void createRelationshipTypeToken( String name, int id )\n     {\n-        TokenCreator<RelationshipTypeTokenRecord, RelationshipTypeToken> creator =\n-                new TokenCreator<>( neoStores.getRelationshipTypeTokenStore() );\n-        creator.createToken( name, id, recordChangeSet.getRelationshipTypeTokenChanges() );\n+        TokenCreator<RelationshipTypeTokenRecord,RelationshipTypeToken> creator = new TokenCreator<>( neoStores.getRelationshipTypeTokenStore() );\n+creator.createToken( name, id, recordChangeSet.getRelationshipTypeTokenChanges() );\n     }\n \n     private static class CommandSorter implements Comparator<Command>\n@@ -469,7 +460,7 @@ public class TransactionRecordState implements RecordState\n             long id1 = o1.getKey();\n             long id2 = o2.getKey();\n             long diff = id1 - id2;\n-            if ( diff > Integer.MAX_VALUE )\n+            if ( diff> Integer.MAX_VALUE )\n             {\n                 return Integer.MAX_VALUE;\n             }\n@@ -479,7 +470,7 @@ public class TransactionRecordState implements RecordState\n             }\n             else\n             {\n-                return (int) diff;\n+                return ( int) diff;\n             }\n         }\n \n@@ -498,7 +489,7 @@ public class TransactionRecordState implements RecordState\n \n     private static final CommandSorter COMMAND_SORTER = new CommandSorter();\n \n-    private RecordProxy<NeoStoreRecord, Void> getOrLoadNeoStoreRecord()\n+    private RecordProxy<NeoStoreRecord,Void> getOrLoadNeoStoreRecord()\n     {\n         // TODO Move this neo store record thingie into RecordAccessSet\n         if ( neoStoreRecord == null )\n@@ -529,7 +520,8 @@ public class TransactionRecordState implements RecordState\n                 }\n             }, new IntCounter() );\n         }\n-        return neoStoreRecord.getOrLoad( 0L, null );\n+\n+return neoStoreRecord.getOrLoad( 0L, null );\n     }\n \n     /**\n@@ -564,14 +556,13 @@ public class TransactionRecordState implements RecordState\n      */\n     public void graphRemoveProperty( int propertyKey )\n     {\n-        RecordProxy<NeoStoreRecord, Void> recordChange = getOrLoadNeoStoreRecord();\n+        RecordProxy<NeoStoreRecord,Void> recordChange = getOrLoadNeoStoreRecord();\n         propertyDeleter.removeProperty( recordChange, propertyKey, recordChangeSet.getPropertyRecords() );\n     }\n \n     public void createSchemaRule( SchemaRule schemaRule )\n     {\n-        for ( DynamicRecord change : recordChangeSet.getSchemaRuleChanges()\n-                .create( schemaRule.getId(), schemaRule )\n+        for ( DynamicRecord change : recordChangeSet.getSchemaRuleChanges().create( schemaRule.getId(), schemaRule )\n                 .forChangingData() )\n         {\n             change.setInUse( true );\n@@ -581,9 +572,8 @@ public class TransactionRecordState implements RecordState\n \n     public void dropSchemaRule( SchemaRule rule )\n     {\n-        RecordProxy<SchemaRecord, SchemaRule> change =\n-                recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n-        SchemaRecord records = change.forChangingData();\n+        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n+SchemaRecord records = change.forChangingData();\n         for ( DynamicRecord record : records )\n         {\n             record.setInUse( false );\n@@ -594,14 +584,12 @@ public class TransactionRecordState implements RecordState\n     public void changeSchemaRule( SchemaRule rule, SchemaRule updatedRule )\n     {\n         //Read the current record\n-        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges()\n-                .getOrLoad( rule.getId(), rule );\n-        SchemaRecord records = change.forReadingData();\n+        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n+SchemaRecord records = change.forReadingData();\n \n         //Register the change of the record\n-        RecordProxy<SchemaRecord,SchemaRule> recordChange = recordChangeSet.getSchemaRuleChanges()\n-                .setRecord( rule.getId(), records, updatedRule );\n-        SchemaRecord dynamicRecords = recordChange.forChangingData();\n+        RecordProxy<SchemaRecord,SchemaRule> recordChange = recordChangeSet.getSchemaRuleChanges().setRecord( rule.getId(), records, updatedRule );\n+SchemaRecord dynamicRecords = recordChange.forChangingData();\n \n         //Update the record\n         dynamicRecords.setDynamicRecords( schemaStore.allocateFrom( updatedRule ) );\n@@ -629,4 +617,4 @@ public class TransactionRecordState implements RecordState\n     {\n         void receive( P property, long propertyRecordId );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 342).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "column": "44",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "column": "71",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "134",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "170",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "184",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "198",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "240",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "247",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "258",
                    "column": "65",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "282",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "282",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "284",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "315",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "77",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "577",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "589",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "589",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1854/TransactionRecordState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1854/TransactionRecordState.java\nindex ce673c9fb8b..a89455f7978 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1854/TransactionRecordState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1854/TransactionRecordState.java\n@@ -22,7 +22,6 @@ package org.neo4j.kernel.impl.transaction.state;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Comparator;\n-\n import org.neo4j.kernel.api.KernelTransaction;\n import org.neo4j.internal.kernel.api.exceptions.TransactionFailureException;\n import org.neo4j.kernel.impl.core.RelationshipTypeToken;\n@@ -57,8 +56,8 @@ import org.neo4j.storageengine.api.Token;\n import org.neo4j.storageengine.api.lock.ResourceLocker;\n import org.neo4j.storageengine.api.schema.SchemaRule;\n import org.neo4j.values.storable.Value;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n \n /**\n@@ -73,10 +72,10 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n  * to store. It would most likely do this by keeping a component derived from the current WriteTransaction\n  * implementation as a sub-component, responsible for handling logical log commands.\n  */\n+\n public class TransactionRecordState implements RecordState\n {\n     private static final Command[] EMPTY_COMMANDS = new Command[0];\n-\n     private final NeoStores neoStores;\n     private final IntegrityValidator integrityValidator;\n     private final NodeStore nodeStore;\n@@ -92,17 +91,10 @@ public class TransactionRecordState implements RecordState\n     private final RelationshipDeleter relationshipDeleter;\n     private final PropertyCreator propertyCreator;\n     private final PropertyDeleter propertyDeleter;\n-\n-    private RecordChanges<NeoStoreRecord, Void> neoStoreRecord;\n+    private RecordChanges<NeoStoreRecord,Void> neoStoreRecord;\n     private boolean prepared;\n \n-    public TransactionRecordState( NeoStores neoStores, IntegrityValidator integrityValidator,\n-            RecordChangeSet recordChangeSet, long lastCommittedTxWhenTransactionStarted,\n-            ResourceLocker locks,\n-            RelationshipCreator relationshipCreator,\n-            RelationshipDeleter relationshipDeleter,\n-            PropertyCreator propertyCreator,\n-            PropertyDeleter propertyDeleter )\n+    public TransactionRecordState( NeoStores neoStores, IntegrityValidator integrityValidator, RecordChangeSet recordChangeSet, long lastCommittedTxWhenTransactionStarted, ResourceLocker locks, RelationshipCreator relationshipCreator, RelationshipDeleter relationshipDeleter, PropertyCreator propertyCreator, PropertyDeleter propertyDeleter )\n     {\n         this.neoStores = neoStores;\n         this.nodeStore = neoStores.getNodeStore();\n@@ -124,48 +116,49 @@ public class TransactionRecordState implements RecordState\n     @Override\n     public boolean hasChanges()\n     {\n-        return recordChangeSet.hasChanges() ||\n-                (neoStoreRecord != null && neoStoreRecord.changeSize() > 0);\n+        return recordChangeSet.hasChanges()|| ( neoStoreRecord != null&& neoStoreRecord.changeSize() > 0);\n     }\n \n     @Override\n     public void extractCommands( Collection<StorageCommand> commands ) throws TransactionFailureException\n     {\n-        assert !prepared : \"Transaction has already been prepared\";\n-\n+        assert ! prepared: \"Transaction has already been prepared\";\n         integrityValidator.validateTransactionStartKnowledge( lastCommittedTxWhenTransactionStarted );\n-\n-        int noOfCommands = recordChangeSet.changeSize() +\n-                           (neoStoreRecord != null ? neoStoreRecord.changeSize() : 0);\n-\n-        for ( RecordProxy<LabelTokenRecord, Void> record : recordChangeSet.getLabelTokenChanges().changes() )\n+        int noOfCommands = recordChangeSet.changeSize() + ( neoStoreRecord != null ? neoStoreRecord.changeSize() : 0);\n+        for( RecordProxy<LabelTokenRecord,Void> record : recordChangeSet.getLabelTokenChanges().changes()\n+        )\n         {\n-            commands.add( new Command.LabelTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n+            commands.add( new Command. LabelTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n         }\n-        for ( RecordProxy<RelationshipTypeTokenRecord, Void> record :\n-            recordChangeSet.getRelationshipTypeTokenChanges().changes() )\n+\n+        for( RecordProxy<RelationshipTypeTokenRecord,Void> record : recordChangeSet.getRelationshipTypeTokenChanges().changes()\n+        )\n         {\n-            commands.add( new Command.RelationshipTypeTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n+            commands.add( new Command. RelationshipTypeTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n         }\n-        for ( RecordProxy<PropertyKeyTokenRecord, Void> record :\n-            recordChangeSet.getPropertyKeyTokenChanges().changes() )\n+\n+        for( RecordProxy<PropertyKeyTokenRecord,Void> record : recordChangeSet.getPropertyKeyTokenChanges().changes()\n+        )\n         {\n-            commands.add( new Command.PropertyKeyTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n+            commands.add( new Command. PropertyKeyTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n         }\n \n         // Collect nodes, relationships, properties\n+\n         Command[] nodeCommands = EMPTY_COMMANDS;\n         int skippedCommands = 0;\n         if ( recordChangeSet.getNodeRecords().changeSize() > 0 )\n         {\n             nodeCommands = new Command[recordChangeSet.getNodeRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<NodeRecord, Void> change : recordChangeSet.getNodeRecords().changes() )\n+            for( RecordProxy<NodeRecord,Void> change : recordChangeSet.getNodeRecords().changes()\n+            )\n             {\n                 NodeRecord record = prepared( change, nodeStore );\n                 integrityValidator.validateNodeRecord( record );\n-                nodeCommands[i++] = new Command.NodeCommand( change.getBefore(), record );\n+                nodeCommands[i ++] = new Command. NodeCommand( change.getBefore(), record );\n             }\n+\n             Arrays.sort( nodeCommands, COMMAND_SORTER );\n         }\n \n@@ -174,11 +167,12 @@ public class TransactionRecordState implements RecordState\n         {\n             relCommands = new Command[recordChangeSet.getRelRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<RelationshipRecord, Void> change : recordChangeSet.getRelRecords().changes() )\n+            for( RecordProxy<RelationshipRecord,Void> change : recordChangeSet.getRelRecords().changes()\n+            )\n             {\n-                relCommands[i++] = new Command.RelationshipCommand( change.getBefore(),\n-                        prepared( change, relationshipStore ) );\n+                relCommands[i ++] = new Command. RelationshipCommand( change.getBefore(), prepared( change, relationshipStore ) );\n             }\n+\n             Arrays.sort( relCommands, COMMAND_SORTER );\n         }\n \n@@ -187,12 +181,12 @@ public class TransactionRecordState implements RecordState\n         {\n             propCommands = new Command[recordChangeSet.getPropertyRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<PropertyRecord, PrimitiveRecord> change :\n-                recordChangeSet.getPropertyRecords().changes() )\n+            for( RecordProxy<PropertyRecord,PrimitiveRecord> change : recordChangeSet.getPropertyRecords().changes()\n+            )\n             {\n-                propCommands[i++] = new Command.PropertyCommand( change.getBefore(),\n-                        prepared( change, propertyStore ) );\n+                propCommands[i ++] = new Command. PropertyCommand( change.getBefore(), prepared( change, propertyStore ) );\n             }\n+\n             Arrays.sort( propCommands, COMMAND_SORTER );\n         }\n \n@@ -201,10 +195,10 @@ public class TransactionRecordState implements RecordState\n         {\n             relGroupCommands = new Command[recordChangeSet.getRelGroupRecords().changeSize()];\n             int i = 0;\n-            for ( RecordProxy<RelationshipGroupRecord, Integer> change :\n-                recordChangeSet.getRelGroupRecords().changes() )\n+            for( RecordProxy<RelationshipGroupRecord,Integer> change : recordChangeSet.getRelGroupRecords().changes()\n+            )\n             {\n-                if ( change.isCreated() && !change.forReadingLinkage().inUse() )\n+                if ( change.isCreated()&& ! change.forReadingLinkage().inUse() )\n                 {\n                     /*\n                      * This is an edge case that may come up and which we must handle properly. Relationship groups are\n@@ -230,9 +224,10 @@ public class TransactionRecordState implements RecordState\n                     skippedCommands++;\n                     continue;\n                 }\n-                relGroupCommands[i++] = new Command.RelationshipGroupCommand( change.getBefore(),\n-                        prepared( change, relationshipGroupStore ) );\n+\n+                relGroupCommands[i ++] = new Command. RelationshipGroupCommand( change.getBefore(), prepared( change, relationshipGroupStore ) );\n             }\n+\n             relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf( relGroupCommands, i ) : relGroupCommands;\n             Arrays.sort( relGroupCommands, COMMAND_SORTER );\n         }\n@@ -240,31 +235,31 @@ public class TransactionRecordState implements RecordState\n         addFiltered( commands, Mode.CREATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n         addFiltered( commands, Mode.UPDATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n         addFiltered( commands, Mode.DELETE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-\n         if ( neoStoreRecord != null )\n         {\n-            for ( RecordProxy<NeoStoreRecord, Void> change : neoStoreRecord.changes() )\n+            for( RecordProxy<NeoStoreRecord,Void> change : neoStoreRecord.changes()\n+            )\n             {\n-                commands.add( new Command.NeoStoreCommand( change.getBefore(), change.forReadingData() ) );\n+                commands.add( new Command. NeoStoreCommand( change.getBefore(), change.forReadingData() ) );\n             }\n         }\n-        for ( RecordProxy<SchemaRecord, SchemaRule> change : recordChangeSet.getSchemaRuleChanges().changes() )\n+\n+        for( RecordProxy<SchemaRecord,SchemaRule> change : recordChangeSet.getSchemaRuleChanges().changes()\n+        )\n         {\n             if ( change.forReadingLinkage().inUse() )\n             {\n                 integrityValidator.validateSchemaRule( change.getAdditionalData() );\n             }\n-            commands.add( new Command.SchemaRuleCommand(\n-                    change.getBefore(), change.forChangingData(), change.getAdditionalData() ) );\n+\n+            commands.add( new Command. SchemaRuleCommand( change.getBefore(), change.forChangingData(), change.getAdditionalData() ) );\n         }\n-        assert commands.size() == noOfCommands - skippedCommands : format( \"Expected %d final commands, got %d \" +\n-                \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands );\n \n+        assert commands.size() == noOfCommands - skippedCommands: format( \"Expected %d final commands, got %d \" + \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands );\n         prepared = true;\n     }\n \n-    private <RECORD extends AbstractBaseRecord> RECORD prepared(\n-            RecordProxy<RECORD,?> proxy, RecordStore<RECORD> store )\n+    private <RECORD extends AbstractBaseRecord> RECORD prepared( RecordProxy<RECORD, ?> proxy, RecordStore<RECORD> store )\n     {\n         RECORD after = proxy.forReadingLinkage();\n         store.prepareForCommit( after );\n@@ -282,12 +277,11 @@ public class TransactionRecordState implements RecordState\n     }\n \n     @SafeVarargs\n-    private final void addFiltered( Collection<StorageCommand> target, Mode mode,\n-                                    Command[]... commands )\n+    private final void addFiltered( Collection<StorageCommand> target, Mode mode, Command[] ... commands )\n     {\n-        for ( Command[] c : commands )\n+        for( Command[] c : commands)\n         {\n-            for ( Command command : c )\n+            for( Command command : c)\n             {\n                 if ( command.getMode() == mode )\n                 {\n@@ -302,26 +296,27 @@ public class TransactionRecordState implements RecordState\n      *\n      * @param nodeId The id of the node to delete.\n      */\n+\n     public void nodeDelete( long nodeId )\n     {\n         NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null ).forChangingData();\n-        if ( !nodeRecord.inUse() )\n+        if ( ! nodeRecord.inUse() )\n         {\n-            throw new IllegalStateException( \"Unable to delete Node[\" + nodeId +\n-                                             \"] since it has already been deleted.\" );\n+            throw new IllegalStateException( \"Unable to delete Node[\" + nodeId + \"] since it has already been deleted.\" );\n         }\n+\n         nodeRecord.setInUse( false );\n-        nodeRecord.setLabelField( Record.NO_LABELS_FIELD.intValue(),\n-                markNotInUse( nodeRecord.getDynamicLabelRecords() ) );\n+        nodeRecord.setLabelField( Record.NO_LABELS_FIELD.intValue(), markNotInUse( nodeRecord.getDynamicLabelRecords() ) );\n         getAndDeletePropertyChain( nodeRecord );\n     }\n \n     private Collection<DynamicRecord> markNotInUse( Collection<DynamicRecord> dynamicLabelRecords )\n     {\n-        for ( DynamicRecord record : dynamicLabelRecords )\n+        for( DynamicRecord record : dynamicLabelRecords)\n         {\n             record.setInUse( false );\n         }\n+\n         return dynamicLabelRecords;\n     }\n \n@@ -338,9 +333,10 @@ public class TransactionRecordState implements RecordState\n      *            removed.\n      * @param propertyKey The index key of the property.\n      */\n+\n     public void relRemoveProperty( long relId, int propertyKey )\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n+        RecordProxy<RelationshipRecord,Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n         propertyDeleter.removeProperty( rel, propertyKey, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -351,9 +347,10 @@ public class TransactionRecordState implements RecordState\n      * @param nodeId The id of the node that is to have the property removed.\n      * @param propertyKey The index key of the property.\n      */\n+\n     public void nodeRemoveProperty( long nodeId, int propertyKey )\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n+        RecordProxy<NodeRecord,Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n         propertyDeleter.removeProperty( node, propertyKey, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -365,9 +362,10 @@ public class TransactionRecordState implements RecordState\n      * @param propertyKey The index of the key of the property to change.\n      * @param value The new value of the property.\n      */\n+\n     public void relChangeProperty( long relId, int propertyKey, Value value )\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n+        RecordProxy<RelationshipRecord,Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n         propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -378,9 +376,10 @@ public class TransactionRecordState implements RecordState\n      * @param propertyKey The index of the key of the property to change.\n      * @param value The new value of the property.\n      */\n+\n     public void nodeChangeProperty( long nodeId, int propertyKey, Value value )\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n+        RecordProxy<NodeRecord,Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n         propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -391,9 +390,10 @@ public class TransactionRecordState implements RecordState\n      * @param propertyKey The index of the key of the property to add.\n      * @param value The value of the property.\n      */\n+\n     public void relAddProperty( long relId, int propertyKey, Value value )\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n+        RecordProxy<RelationshipRecord,Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null );\n         propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -403,9 +403,10 @@ public class TransactionRecordState implements RecordState\n      * @param propertyKey The index of the key of the property to add.\n      * @param value The value of the property.\n      */\n+\n     public void nodeAddProperty( long nodeId, int propertyKey, Value value )\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n+        RecordProxy<NodeRecord,Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null );\n         propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n@@ -414,6 +415,7 @@ public class TransactionRecordState implements RecordState\n      *\n      * @param nodeId The id of the node to create.\n      */\n+\n     public void nodeCreate( long nodeId )\n     {\n         NodeRecord nodeRecord = recordChangeSet.getNodeRecords().create( nodeId, null ).forChangingData();\n@@ -427,10 +429,10 @@ public class TransactionRecordState implements RecordState\n      * @param key The key of the property index, as a string.\n      * @param id The property index record id.\n      */\n+\n     public void createPropertyKeyToken( String key, int id )\n     {\n-        TokenCreator<PropertyKeyTokenRecord, Token> creator =\n-                new TokenCreator<>( neoStores.getPropertyKeyTokenStore() );\n+        TokenCreator<PropertyKeyTokenRecord,Token> creator = new TokenCreator<>( neoStores.getPropertyKeyTokenStore() );\n         creator.createToken( key, id, recordChangeSet.getPropertyKeyTokenChanges() );\n     }\n \n@@ -440,10 +442,10 @@ public class TransactionRecordState implements RecordState\n      * @param name The key of the property index, as a string.\n      * @param id The property index record id.\n      */\n+\n     public void createLabelToken( String name, int id )\n     {\n-        TokenCreator<LabelTokenRecord, Token> creator =\n-                new TokenCreator<>( neoStores.getLabelTokenStore() );\n+        TokenCreator<LabelTokenRecord,Token> creator = new TokenCreator<>( neoStores.getLabelTokenStore() );\n         creator.createToken( name, id, recordChangeSet.getLabelTokenChanges() );\n     }\n \n@@ -454,10 +456,10 @@ public class TransactionRecordState implements RecordState\n      * @param name The name of the relationship type.\n      * @param id The id of the new relationship type record.\n      */\n+\n     public void createRelationshipTypeToken( String name, int id )\n     {\n-        TokenCreator<RelationshipTypeTokenRecord, RelationshipTypeToken> creator =\n-                new TokenCreator<>( neoStores.getRelationshipTypeTokenStore() );\n+        TokenCreator<RelationshipTypeTokenRecord,RelationshipTypeToken> creator = new TokenCreator<>( neoStores.getRelationshipTypeTokenStore() );\n         creator.createToken( name, id, recordChangeSet.getRelationshipTypeTokenChanges() );\n     }\n \n@@ -473,14 +475,15 @@ public class TransactionRecordState implements RecordState\n             {\n                 return Integer.MAX_VALUE;\n             }\n-            else if ( diff < Integer.MIN_VALUE )\n+            else\n+            if ( diff < Integer.MIN_VALUE )\n             {\n                 return Integer.MIN_VALUE;\n             }\n             else\n-            {\n-                return (int) diff;\n-            }\n+                {\n+                    return (int) diff;\n+                }\n         }\n \n         @Override\n@@ -497,38 +500,38 @@ public class TransactionRecordState implements RecordState\n     }\n \n     private static final CommandSorter COMMAND_SORTER = new CommandSorter();\n-\n-    private RecordProxy<NeoStoreRecord, Void> getOrLoadNeoStoreRecord()\n+    private RecordProxy<NeoStoreRecord,Void> getOrLoadNeoStoreRecord()\n     {\n         // TODO Move this neo store record thingie into RecordAccessSet\n         if ( neoStoreRecord == null )\n         {\n-            neoStoreRecord = new RecordChanges<>( new RecordChanges.Loader<NeoStoreRecord, Void>()\n-            {\n-                @Override\n-                public NeoStoreRecord newUnused( long key, Void additionalData )\n-                {\n-                    throw new UnsupportedOperationException();\n-                }\n+            neoStoreRecord = new RecordChanges<>( new RecordChanges. Loader <NeoStoreRecord,Void>()\n+{\n+    @Override\n+    public NeoStoreRecord newUnused( long key, Void additionalData )\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n \n-                @Override\n-                public NeoStoreRecord load( long key, Void additionalData )\n-                {\n-                    return metaDataStore.graphPropertyRecord();\n-                }\n+    @Override\n+    public NeoStoreRecord load( long key, Void additionalData )\n+    {\n+        return metaDataStore.graphPropertyRecord();\n+    }\n \n-                @Override\n-                public void ensureHeavy( NeoStoreRecord record )\n-                {\n-                }\n+    @Override\n+    public void ensureHeavy( NeoStoreRecord record )\n+    {\n+    }\n \n-                @Override\n-                public NeoStoreRecord clone( NeoStoreRecord neoStoreRecord )\n-                {\n-                    return neoStoreRecord.clone();\n-                }\n-            }, new IntCounter() );\n+    @Override\n+    public NeoStoreRecord clone( NeoStoreRecord neoStoreRecord )\n+    {\n+        return neoStoreRecord.clone();\n+    }\n+}, new IntCounter() );\n         }\n+\n         return neoStoreRecord.getOrLoad( 0L, null );\n     }\n \n@@ -537,10 +540,10 @@ public class TransactionRecordState implements RecordState\n      *  @param propertyKey The index of the key of the property to add.\n      * @param value The value of the property.\n      */\n+\n     public void graphAddProperty( int propertyKey, Value value )\n     {\n-        propertyCreator.primitiveSetProperty( getOrLoadNeoStoreRecord(), propertyKey, value,\n-                recordChangeSet.getPropertyRecords() );\n+        propertyCreator.primitiveSetProperty( getOrLoadNeoStoreRecord(), propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n     /**\n@@ -550,10 +553,10 @@ public class TransactionRecordState implements RecordState\n      * @param propertyKey The index of the key of the property to change.\n      * @param value The new value of the property.\n      */\n+\n     public void graphChangeProperty( int propertyKey, Value value )\n     {\n-        propertyCreator.primitiveSetProperty( getOrLoadNeoStoreRecord(), propertyKey, value,\n-                recordChangeSet.getPropertyRecords() );\n+        propertyCreator.primitiveSetProperty( getOrLoadNeoStoreRecord(), propertyKey, value, recordChangeSet.getPropertyRecords() );\n     }\n \n     /**\n@@ -562,17 +565,17 @@ public class TransactionRecordState implements RecordState\n      *\n      * @param propertyKey The index key of the property.\n      */\n+\n     public void graphRemoveProperty( int propertyKey )\n     {\n-        RecordProxy<NeoStoreRecord, Void> recordChange = getOrLoadNeoStoreRecord();\n+        RecordProxy<NeoStoreRecord,Void> recordChange = getOrLoadNeoStoreRecord();\n         propertyDeleter.removeProperty( recordChange, propertyKey, recordChangeSet.getPropertyRecords() );\n     }\n \n     public void createSchemaRule( SchemaRule schemaRule )\n     {\n-        for ( DynamicRecord change : recordChangeSet.getSchemaRuleChanges()\n-                .create( schemaRule.getId(), schemaRule )\n-                .forChangingData() )\n+        for( DynamicRecord change : recordChangeSet.getSchemaRuleChanges().create( schemaRule.getId(), schemaRule ).forChangingData()\n+        )\n         {\n             change.setInUse( true );\n             change.setCreated();\n@@ -581,26 +584,24 @@ public class TransactionRecordState implements RecordState\n \n     public void dropSchemaRule( SchemaRule rule )\n     {\n-        RecordProxy<SchemaRecord, SchemaRule> change =\n-                recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n+        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n         SchemaRecord records = change.forChangingData();\n-        for ( DynamicRecord record : records )\n+        for( DynamicRecord record : records)\n         {\n             record.setInUse( false );\n         }\n+\n         records.setInUse( false );\n     }\n \n     public void changeSchemaRule( SchemaRule rule, SchemaRule updatedRule )\n     {\n         //Read the current record\n-        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges()\n-                .getOrLoad( rule.getId(), rule );\n+        RecordProxy<SchemaRecord,SchemaRule> change = recordChangeSet.getSchemaRuleChanges().getOrLoad( rule.getId(), rule );\n         SchemaRecord records = change.forReadingData();\n \n         //Register the change of the record\n-        RecordProxy<SchemaRecord,SchemaRule> recordChange = recordChangeSet.getSchemaRuleChanges()\n-                .setRecord( rule.getId(), records, updatedRule );\n+        RecordProxy<SchemaRecord,SchemaRule> recordChange = recordChangeSet.getSchemaRuleChanges().setRecord( rule.getId(), records, updatedRule );\n         SchemaRecord dynamicRecords = recordChange.forChangingData();\n \n         //Update the record\n@@ -626,7 +627,7 @@ public class TransactionRecordState implements RecordState\n     }\n \n     public interface PropertyReceiver<P extends StorageProperty>\n-    {\n-        void receive( P property, long propertyRecordId );\n-    }\n-}\n+{\n+   void receive( P property, long propertyRecordId )\n+   ;}\n+}\n\\ No newline at end of file\n",
            "diff_size": 155
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}