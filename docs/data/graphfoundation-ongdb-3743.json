{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3743",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3743/IndexPopulationJob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3743/IndexPopulationJob.java\nindex abeac406b90..584001237e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3743/IndexPopulationJob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3743/IndexPopulationJob.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.util.concurrent.CountDownLatch;\n@@ -40,142 +41,141 @@ import static org.neo4j.helpers.FutureAdapter.latchGuardedValue;\n  */\n public class IndexPopulationJob implements Runnable\n {\n-    private final IndexingService.Monitor monitor;\n-    private final MultipleIndexPopulator multiPopulator;\n-    private final CountDownLatch doneSignal = new CountDownLatch( 1 );\n-\n-    private volatile StoreScan<IndexPopulationFailedKernelException> storeScan;\n-    private volatile boolean cancelled;\n-\n-    public IndexPopulationJob( MultipleIndexPopulator multiPopulator, IndexingService.Monitor monitor )\n-    {\n-        this.multiPopulator = multiPopulator;\n-        this.monitor = monitor;\n-    }\n-\n-    /**\n-     * Adds an {@link IndexPopulator} to be populated in this store scan. All participating populators must\n-     * be added before calling {@link #run()}.\n-     *  @param populator {@link IndexPopulator} to participate.\n-     * @param indexId id of index.\n-     * @param indexMeta {@link IndexMeta} meta information about index.\n-     * @param indexUserDescription user description of this index.\n-     * @param flipper {@link FlippableIndexProxy} to call after a successful population.\n-     * @param failedIndexProxyFactory {@link FailedIndexProxyFactory} to use after an unsuccessful population.\n-     */\n-    MultipleIndexPopulator.IndexPopulation addPopulator( IndexPopulator populator,\n-            long indexId,\n-            IndexMeta indexMeta,\n-            String indexUserDescription,\n-            FlippableIndexProxy flipper,\n-            FailedIndexProxyFactory failedIndexProxyFactory )\n-    {\n-        assert storeScan == null : \"Population have already started, too late to add populators at this point\";\n-        return this.multiPopulator.addPopulator( populator, indexId, indexMeta, flipper, failedIndexProxyFactory,\n-                indexUserDescription );\n-    }\n-\n-    /**\n-     * Scans the store using store view and populates all participating {@link IndexPopulator} with data relevant to\n-     * each index.\n-     * The scan continues as long as there's at least one non-failed populator.\n-     */\n-    @Override\n-    public void run()\n-    {\n-        String oldThreadName = currentThread().getName();\n-        try\n-        {\n-            if ( !multiPopulator.hasPopulators() )\n-            {\n-                return;\n-            }\n-            if ( storeScan != null )\n-            {\n-                throw new IllegalStateException( \"Population already started.\" );\n-            }\n-\n-            currentThread().setName( \"Index populator\" );\n-            try\n-            {\n-                multiPopulator.create();\n-                multiPopulator.resetIndexCounts();\n-\n-                monitor.indexPopulationScanStarting();\n-                indexAllNodes();\n-                monitor.indexPopulationScanComplete();\n-                if ( cancelled )\n-                {\n-                    multiPopulator.cancel();\n-                    // We remain in POPULATING state\n-                    return;\n-                }\n-                multiPopulator.flipAfterPopulation();\n-            }\n-            catch ( Throwable t )\n-            {\n-                multiPopulator.fail( t );\n-            }\n-        }\n-        finally\n-        {\n-            doneSignal.countDown();\n-            currentThread().setName( oldThreadName );\n-        }\n-    }\n-\n-    private void indexAllNodes() throws IndexPopulationFailedKernelException\n+  private final IndexingService.Monitor monitor;\n+  private final MultipleIndexPopulator multiPopulator;\n+  private final CountDownLatch doneSignal = new CountDownLatch(1);\n+\n+  private volatile StoreScan<IndexPopulationFailedKernelException> storeScan;\n+  private volatile boolean cancelled;\n+\n+  public IndexPopulationJob(MultipleIndexPopulator multiPopulator, IndexingService.Monitor monitor)\n+  {\n+    this.multiPopulator = multiPopulator;\n+    this.monitor = monitor;\n+  }\n+\n+  /**\n+   * Adds an {@link IndexPopulator} to be populated in this store scan. All participating populators must\n+   * be added before calling {@link #run()}.\n+   *\n+   * @param populator               {@link IndexPopulator} to participate.\n+   * @param indexId                 id of index.\n+   * @param indexMeta               {@link IndexMeta} meta information about index.\n+   * @param indexUserDescription    user description of this index.\n+   * @param flipper                 {@link FlippableIndexProxy} to call after a successful population.\n+   * @param failedIndexProxyFactory {@link FailedIndexProxyFactory} to use after an unsuccessful population.\n+   */\n+  MultipleIndexPopulator.IndexPopulation addPopulator(IndexPopulator populator,\n+                                                      long indexId,\n+                                                      IndexMeta indexMeta,\n+                                                      String indexUserDescription,\n+                                                      FlippableIndexProxy flipper,\n+                                                      FailedIndexProxyFactory failedIndexProxyFactory)\n+  {\n+    assert storeScan == null : \"Population have already started, too late to add populators at this point\";\n+    return this.multiPopulator.addPopulator(populator, indexId, indexMeta, flipper, failedIndexProxyFactory,\n+        indexUserDescription);\n+  }\n+\n+  /**\n+   * Scans the store using store view and populates all participating {@link IndexPopulator} with data relevant to\n+   * each index.\n+   * The scan continues as long as there's at least one non-failed populator.\n+   */\n+  @Override\n+  public void run()\n+  {\n+    String oldThreadName = currentThread().getName();\n+    try\n     {\n-        storeScan = multiPopulator.indexAllNodes();\n-        storeScan.run();\n-    }\n-\n-    PopulationProgress getPopulationProgress()\n-    {\n-        if ( storeScan == null )\n+      if (!multiPopulator.hasPopulators())\n+      {\n+        return;\n+      }\n+      if (storeScan != null)\n+      {\n+        throw new IllegalStateException(\"Population already started.\");\n+      }\n+\n+      currentThread().setName(\"Index populator\");\n+      try\n+      {\n+        multiPopulator.create();\n+        multiPopulator.resetIndexCounts();\n+\n+        monitor.indexPopulationScanStarting();\n+        indexAllNodes();\n+        monitor.indexPopulationScanComplete();\n+        if (cancelled)\n         {\n-            // indexing hasn't begun yet\n-            return PopulationProgress.NONE;\n+          multiPopulator.cancel();\n+          // We remain in POPULATING state\n+          return;\n         }\n-        return storeScan.getProgress();\n-    }\n-\n-    public Future<Void> cancel()\n+        multiPopulator.flipAfterPopulation();\n+      } catch (Throwable t)\n+      {\n+        multiPopulator.fail(t);\n+      }\n+    } finally\n     {\n-        // Stop the population\n-        if ( storeScan != null )\n-        {\n-            cancelled = true;\n-            storeScan.stop();\n-        }\n-\n-        return latchGuardedValue( Suppliers.singleton( null ), doneSignal, \"Index population job cancel\" );\n+      doneSignal.countDown();\n+      currentThread().setName(oldThreadName);\n     }\n+  }\n \n-    void cancelPopulation( MultipleIndexPopulator.IndexPopulation population )\n-    {\n-        multiPopulator.cancelIndexPopulation( population );\n-    }\n+  private void indexAllNodes() throws IndexPopulationFailedKernelException\n+  {\n+    storeScan = multiPopulator.indexAllNodes();\n+    storeScan.run();\n+  }\n \n-    /**\n-     * A transaction happened that produced the given updates. Let this job incorporate its data,\n-     * feeding it to the {@link IndexPopulator}.\n-     *\n-     * @param update {@link IndexEntryUpdate} to queue.\n-     */\n-    public void update( IndexEntryUpdate<?> update )\n+  PopulationProgress getPopulationProgress()\n+  {\n+    if (storeScan == null)\n     {\n-        multiPopulator.queue( update );\n+      // indexing hasn't begun yet\n+      return PopulationProgress.NONE;\n     }\n+    return storeScan.getProgress();\n+  }\n \n-    @Override\n-    public String toString()\n+  public Future<Void> cancel()\n+  {\n+    // Stop the population\n+    if (storeScan != null)\n     {\n-        return getClass().getSimpleName() + \"[populator:\" + multiPopulator + \"]\";\n+      cancelled = true;\n+      storeScan.stop();\n     }\n \n-    public void awaitCompletion() throws InterruptedException\n-    {\n-        doneSignal.await();\n-    }\n+    return latchGuardedValue(Suppliers.singleton(null), doneSignal, \"Index population job cancel\");\n+  }\n+\n+  void cancelPopulation(MultipleIndexPopulator.IndexPopulation population)\n+  {\n+    multiPopulator.cancelIndexPopulation(population);\n+  }\n+\n+  /**\n+   * A transaction happened that produced the given updates. Let this job incorporate its data,\n+   * feeding it to the {@link IndexPopulator}.\n+   *\n+   * @param update {@link IndexEntryUpdate} to queue.\n+   */\n+  public void update(IndexEntryUpdate<?> update)\n+  {\n+    multiPopulator.queue(update);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[populator:\" + multiPopulator + \"]\";\n+  }\n+\n+  public void awaitCompletion() throws InterruptedException\n+  {\n+    doneSignal.await();\n+  }\n }\n",
            "diff_size": 174
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3743/IndexPopulationJob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3743/IndexPopulationJob.java\nindex abeac406b90..69d4a4f21a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3743/IndexPopulationJob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3743/IndexPopulationJob.java\n@@ -90,7 +90,8 @@ public class IndexPopulationJob implements Runnable\n             {\n                 return;\n             }\n-            if ( storeScan != null )\n+\n+if ( storeScan != null )\n             {\n                 throw new IllegalStateException( \"Population already started.\" );\n             }\n@@ -100,8 +101,7 @@ public class IndexPopulationJob implements Runnable\n             {\n                 multiPopulator.create();\n                 multiPopulator.resetIndexCounts();\n-\n-                monitor.indexPopulationScanStarting();\n+monitor.indexPopulationScanStarting();\n                 indexAllNodes();\n                 monitor.indexPopulationScanComplete();\n                 if ( cancelled )\n@@ -137,7 +137,8 @@ public class IndexPopulationJob implements Runnable\n             // indexing hasn't begun yet\n             return PopulationProgress.NONE;\n         }\n-        return storeScan.getProgress();\n+\n+return storeScan.getProgress();\n     }\n \n     public Future<Void> cancel()\n@@ -178,4 +179,4 @@ public class IndexPopulationJob implements Runnable\n     {\n         doneSignal.await();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}