{
    "project_name": "neo4j-neo4j",
    "error_id": "604",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/604/PropertyRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/604/PropertyRecordFormat.java\nindex 49a647179b1..9a21f9799d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/604/PropertyRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/604/PropertyRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.standard;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -35,29 +36,29 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n     public static final int DEFAULT_PAYLOAD_SIZE = 32;\n \n     public static final int RECORD_SIZE = 1/*next and prev high bits*/\n-            + 4/*next*/\n-            + 4/*prev*/\n-            + DEFAULT_PAYLOAD_SIZE /*property blocks*/;\n+      + 4/*next*/\n+      + 4/*prev*/\n+      + DEFAULT_PAYLOAD_SIZE /*property blocks*/;\n     // = 41\n \n     public PropertyRecordFormat()\n     {\n-        this( false );\n+        this(false);\n     }\n \n-    public PropertyRecordFormat( boolean pageAligned )\n+    public PropertyRecordFormat(boolean pageAligned)\n     {\n-        super( fixedRecordSize( RECORD_SIZE ), 0, StandardFormatSettings.PROPERTY_MAXIMUM_ID_BITS, pageAligned );\n+        super(fixedRecordSize(RECORD_SIZE), 0, StandardFormatSettings.PROPERTY_MAXIMUM_ID_BITS, pageAligned);\n     }\n \n     @Override\n     public PropertyRecord newRecord()\n     {\n-        return new PropertyRecord( -1 );\n+        return new PropertyRecord(-1);\n     }\n \n     @Override\n-    public void read( PropertyRecord record, PageCursor cursor, RecordLoad mode, int recordSize, int recordsPerPage )\n+    public void read(PropertyRecord record, PageCursor cursor, RecordLoad mode, int recordSize, int recordsPerPage)\n     {\n         int offsetAtBeginning = cursor.getOffset();\n \n@@ -69,87 +70,86 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n         long nextMod = (modifiers & 0x0FL) << 32;\n         long prevProp = cursor.getInt() & 0xFFFFFFFFL;\n         long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-        record.initialize( false,\n-                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod ),\n-                BaseRecordFormat.longFromIntAndMod( nextProp, nextMod ) );\n-        while ( cursor.getOffset() - offsetAtBeginning < RECORD_SIZE )\n+        record.initialize(false,\n+          BaseRecordFormat.longFromIntAndMod(prevProp, prevMod),\n+          BaseRecordFormat.longFromIntAndMod(nextProp, nextMod));\n+        while (cursor.getOffset() - offsetAtBeginning < RECORD_SIZE)\n         {\n             long block = cursor.getLong();\n-            PropertyType type = PropertyType.getPropertyTypeOrNull( block );\n-            if ( type == null )\n+            PropertyType type = PropertyType.getPropertyTypeOrNull(block);\n+            if (type == null)\n             {\n                 // We assume that storage is defragged\n                 break;\n             }\n \n-            record.setInUse( true );\n-            record.addLoadedBlock( block );\n-            int numberOfBlocksUsed = type.calculateNumberOfBlocksUsed( block );\n-            if ( numberOfBlocksUsed == PropertyType.BLOCKS_USED_FOR_BAD_TYPE_OR_ENCODING )\n+            record.setInUse(true);\n+            record.addLoadedBlock(block);\n+            int numberOfBlocksUsed = type.calculateNumberOfBlocksUsed(block);\n+            if (numberOfBlocksUsed == PropertyType.BLOCKS_USED_FOR_BAD_TYPE_OR_ENCODING)\n             {\n-                cursor.setCursorException( \"Invalid type or encoding of property block: \" + block + \" (type = \" + type + \")\" );\n+                cursor.setCursorException(\"Invalid type or encoding of property block: \" + block + \" (type = \" + type + \")\");\n                 return;\n             }\n             int additionalBlocks = numberOfBlocksUsed - 1;\n-            if ( additionalBlocks * Long.BYTES > RECORD_SIZE - (cursor.getOffset() - offsetAtBeginning) )\n+            if (additionalBlocks * Long.BYTES > RECORD_SIZE - (cursor.getOffset() - offsetAtBeginning))\n             {\n-                cursor.setCursorException( format( \"PropertyRecord[%d] claims to have more property blocks than can fit in a record. \" +\n-                                \"additionalBlocks:%d, recordSize:%d, cursorOffset:%d, offsetAtBeginning:%d\", record.getId(), additionalBlocks, RECORD_SIZE,\n-                        cursor.getOffset(), offsetAtBeginning ) );\n+                cursor.setCursorException(format(\"PropertyRecord[%d] claims to have more property blocks than can fit in a record. \" +\n+                    \"additionalBlocks:%d, recordSize:%d, cursorOffset:%d, offsetAtBeginning:%d\", record.getId(), additionalBlocks, RECORD_SIZE,\n+                  cursor.getOffset(), offsetAtBeginning));\n                 return;\n             }\n-            while ( additionalBlocks-- > 0 )\n+            while (additionalBlocks-- > 0)\n             {\n-                record.addLoadedBlock( cursor.getLong() );\n+                record.addLoadedBlock(cursor.getLong());\n             }\n         }\n     }\n \n     @Override\n-    public void write( PropertyRecord record, PageCursor cursor, int recordSize, int recordsPerPage )\n+    public void write(PropertyRecord record, PageCursor cursor, int recordSize, int recordsPerPage)\n     {\n-        if ( record.inUse() )\n+        if (record.inUse())\n         {\n             // Set up the record header\n             short prevModifier = record.getPrevProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n-                    : (short) ((record.getPrevProp() & 0xF00000000L) >> 28);\n+              : (short) ((record.getPrevProp() & 0xF00000000L) >> 28);\n             short nextModifier = record.getNextProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n-                    : (short) ((record.getNextProp() & 0xF00000000L) >> 32);\n+              : (short) ((record.getNextProp() & 0xF00000000L) >> 32);\n             byte modifiers = (byte) (prevModifier | nextModifier);\n             /*\n              * [pppp,nnnn] previous, next high bits\n              */\n-            cursor.putByte( modifiers );\n-            cursor.putInt( (int) record.getPrevProp() );\n-            cursor.putInt( (int) record.getNextProp() );\n+            cursor.putByte(modifiers);\n+            cursor.putInt((int) record.getPrevProp());\n+            cursor.putInt((int) record.getNextProp());\n \n             // Then go through the blocks\n             int longsAppended = 0; // For marking the end of blocks\n-            for ( PropertyBlock block : record )\n+            for (PropertyBlock block : record)\n             {\n                 long[] propBlockValues = block.getValueBlocks();\n-                for ( long propBlockValue : propBlockValues )\n+                for (long propBlockValue : propBlockValues)\n                 {\n-                    cursor.putLong( propBlockValue );\n+                    cursor.putLong(propBlockValue);\n                 }\n \n                 longsAppended += propBlockValues.length;\n             }\n-            if ( longsAppended < PropertyType.getPayloadSizeLongs() )\n+            if (longsAppended < PropertyType.getPayloadSizeLongs())\n             {\n-                cursor.putLong( 0 );\n+                cursor.putLong(0);\n             }\n-        }\n-        else\n+        } else\n         {\n             // skip over the record header, nothing useful there\n-            cursor.setOffset( cursor.getOffset() + 9 );\n-            cursor.putLong( 0 );\n+            cursor.setOffset(cursor.getOffset() + 9);\n+            cursor.putLong(0);\n         }\n     }\n \n     @Override\n-    public long getNextRecordReference( PropertyRecord record )\n+    public long getNextRecordReference(PropertyRecord record)\n     {\n         return record.getNextProp();\n     }\n@@ -159,19 +159,19 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n      * see if there are any PropertyBlocks in use in it.\n      */\n     @Override\n-    public boolean isInUse( PageCursor cursor )\n+    public boolean isInUse(PageCursor cursor)\n     {\n-        cursor.setOffset( cursor.getOffset() /*skip...*/ + 1/*mod*/ + 4/*prev*/ + 4/*next*/ );\n+        cursor.setOffset(cursor.getOffset() /*skip...*/ + 1/*mod*/ + 4/*prev*/ + 4/*next*/);\n         int blocks = PropertyType.getPayloadSizeLongs();\n-        for ( int i = 0; i < blocks; i++ )\n+        for (int i = 0; i < blocks; i++)\n         {\n             long block = cursor.getLong();\n             // Since there's no inUse byte we have to check the special case of first block == 0, which will mean that it's deleted\n-            if ( i == 0 && block == 0 )\n+            if (i == 0 && block == 0)\n             {\n                 return false;\n             }\n-            if ( PropertyType.getPropertyTypeOrNull( block ) != null )\n+            if (PropertyType.getPropertyTypeOrNull(block) != null)\n             {\n                 return true;\n             }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}