{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2223",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "95",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2223/ReversedSingleFileTransactionCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2223/ReversedSingleFileTransactionCursor.java\nindex cfcc7aa3d11..d2b56d8255d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2223/ReversedSingleFileTransactionCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2223/ReversedSingleFileTransactionCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.reverse;\n \n import java.io.IOException;\n@@ -42,7 +43,7 @@ import org.neo4j.kernel.impl.transaction.log.entry.UnsupportedLogVersionExceptio\n  * the size of the read-ahead window. Coming across large transactions means moving further back to at least read one transaction\n  * per chunk \"move\". This is all internal, so from the outside it simply reverses a transaction log.\n  * The memory overhead compared to reading a log in the natural order is almost negligible.\n- *\n+ * <p>\n  * This cursor currently only works for a single log file, such that the given {@link ReadAheadLogChannel} should not be\n  * instantiated with a {@link LogVersionBridge} moving it over to other versions when exhausted. For reversing a whole\n  * log stream consisting of multiple log files have a look at {@link ReversedMultiFileTransactionCursor}.\n@@ -63,150 +64,149 @@ import org.neo4j.kernel.impl.transaction.log.entry.UnsupportedLogVersionExceptio\n  */\n public class ReversedSingleFileTransactionCursor implements TransactionCursor\n {\n-    // Should this be passed in or extracted from the read-ahead channel instead?\n-    private static final int CHUNK_SIZE = ReadAheadChannel.DEFAULT_READ_AHEAD_SIZE;\n-\n-    private final ReadAheadLogChannel channel;\n-    private final boolean failOnCorruptedLogFiles;\n-    private final ReversedTransactionCursorMonitor monitor;\n-    private final TransactionCursor transactionCursor;\n-    // Should be generally large enough to hold transactions in a chunk, where one chunk is the read-ahead size of ReadAheadLogChannel\n-    private final Deque<CommittedTransactionRepresentation> chunkTransactions = new ArrayDeque<>( 20 );\n-    private CommittedTransactionRepresentation currentChunkTransaction;\n-    // May be longer than required, offsetLength holds the actual length.\n-    private final long[] offsets;\n-    private int offsetsLength;\n-    private int chunkStartOffsetIndex;\n-    private long totalSize;\n-\n-    ReversedSingleFileTransactionCursor( ReadAheadLogChannel channel,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader, boolean failOnCorruptedLogFiles,\n-            ReversedTransactionCursorMonitor monitor ) throws IOException\n-    {\n-        this.channel = channel;\n-        this.failOnCorruptedLogFiles = failOnCorruptedLogFiles;\n-        this.monitor = monitor;\n-        // There's an assumption here: that the underlying channel can move in between calls and that the\n-        // transaction cursor will just happily read from the new position.\n-        this.transactionCursor = new PhysicalTransactionCursor<>( channel, logEntryReader );\n-        this.offsets = sketchOutTransactionStartOffsets();\n-    }\n-\n-    // Also initializes offset indexes\n-    private long[] sketchOutTransactionStartOffsets() throws IOException\n+  // Should this be passed in or extracted from the read-ahead channel instead?\n+  private static final int CHUNK_SIZE = ReadAheadChannel.DEFAULT_READ_AHEAD_SIZE;\n+\n+  private final ReadAheadLogChannel channel;\n+  private final boolean failOnCorruptedLogFiles;\n+  private final ReversedTransactionCursorMonitor monitor;\n+  private final TransactionCursor transactionCursor;\n+  // Should be generally large enough to hold transactions in a chunk, where one chunk is the read-ahead size of ReadAheadLogChannel\n+  private final Deque<CommittedTransactionRepresentation> chunkTransactions = new ArrayDeque<>(20);\n+  private CommittedTransactionRepresentation currentChunkTransaction;\n+  // May be longer than required, offsetLength holds the actual length.\n+  private final long[] offsets;\n+  private int offsetsLength;\n+  private int chunkStartOffsetIndex;\n+  private long totalSize;\n+\n+  ReversedSingleFileTransactionCursor(ReadAheadLogChannel channel,\n+                                      LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader, boolean failOnCorruptedLogFiles,\n+                                      ReversedTransactionCursorMonitor monitor) throws IOException\n+  {\n+    this.channel = channel;\n+    this.failOnCorruptedLogFiles = failOnCorruptedLogFiles;\n+    this.monitor = monitor;\n+    // There's an assumption here: that the underlying channel can move in between calls and that the\n+    // transaction cursor will just happily read from the new position.\n+    this.transactionCursor = new PhysicalTransactionCursor<>(channel, logEntryReader);\n+    this.offsets = sketchOutTransactionStartOffsets();\n+  }\n+\n+  // Also initializes offset indexes\n+  private long[] sketchOutTransactionStartOffsets() throws IOException\n+  {\n+    // Grows on demand. Initially sized to be able to hold all transaction start offsets for a single log file\n+    long[] offsets = new long[10_000];\n+    int offsetCursor = 0;\n+\n+    long logVersion = channel.getVersion();\n+    long startOffset = channel.position();\n+    try\n     {\n-        // Grows on demand. Initially sized to be able to hold all transaction start offsets for a single log file\n-        long[] offsets = new long[10_000];\n-        int offsetCursor = 0;\n-\n-        long logVersion = channel.getVersion();\n-        long startOffset = channel.position();\n-        try\n-        {\n-            while ( transactionCursor.next() )\n-            {\n-                if ( offsetCursor == offsets.length )\n-                {   // Grow\n-                    offsets = Arrays.copyOf( offsets, offsetCursor * 2 );\n-                }\n-                offsets[offsetCursor++] = startOffset;\n-                startOffset = channel.position();\n-            }\n-        }\n-        catch ( IOException | UnsupportedLogVersionException e )\n-        {\n-            monitor.transactionalLogRecordReadFailure( offsets, offsetCursor, logVersion );\n-            if ( failOnCorruptedLogFiles )\n-            {\n-                throw e;\n-            }\n+      while (transactionCursor.next())\n+      {\n+        if (offsetCursor == offsets.length)\n+        {   // Grow\n+          offsets = Arrays.copyOf(offsets, offsetCursor * 2);\n         }\n-\n-        if ( channel.getVersion() != logVersion )\n-        {\n-            throw new IllegalArgumentException( \"The channel which was passed in bridged multiple log versions, it started at version \" +\n-                    logVersion + \", but continued through to version \" + channel.getVersion() + \". This isn't supported\" );\n-        }\n-\n-        offsetsLength = offsetCursor;\n-        chunkStartOffsetIndex = offsetCursor;\n-        totalSize = channel.position();\n-\n-        return offsets;\n-    }\n-\n-    @Override\n-    public boolean next() throws IOException\n+        offsets[offsetCursor++] = startOffset;\n+        startOffset = channel.position();\n+      }\n+    } catch (IOException | UnsupportedLogVersionException e)\n     {\n-        if ( !exhausted() )\n-        {\n-            if ( currentChunkExhausted() )\n-            {\n-                readNextChunk();\n-            }\n-            currentChunkTransaction = chunkTransactions.pop();\n-            return true;\n-        }\n-        return false;\n+      monitor.transactionalLogRecordReadFailure(offsets, offsetCursor, logVersion);\n+      if (failOnCorruptedLogFiles)\n+      {\n+        throw e;\n+      }\n     }\n \n-    private void readNextChunk() throws IOException\n+    if (channel.getVersion() != logVersion)\n     {\n-        assert chunkStartOffsetIndex > 0;\n-\n-        // Start at lowOffsetIndex - 1 and count backwards until almost reaching the chunk size\n-        long highOffset = chunkStartOffsetIndex == offsetsLength ? totalSize : offsets[chunkStartOffsetIndex];\n-        int newLowOffsetIndex = chunkStartOffsetIndex;\n-        while ( newLowOffsetIndex > 0 )\n-        {\n-            long deltaOffset = highOffset - offsets[--newLowOffsetIndex];\n-            if ( deltaOffset > CHUNK_SIZE )\n-            {   // We've now read more than the read-ahead size, let's call this the end of this chunk\n-                break;\n-            }\n-        }\n-        assert chunkStartOffsetIndex - newLowOffsetIndex > 0;\n-\n-        // We've established the chunk boundaries. Initialize all offsets and read the transactions in this\n-        // chunk into actual transaction objects\n-        int chunkLength = chunkStartOffsetIndex - newLowOffsetIndex;\n-        chunkStartOffsetIndex = newLowOffsetIndex;\n-        channel.setCurrentPosition( offsets[chunkStartOffsetIndex] );\n-        assert chunkTransactions.isEmpty();\n-        for ( int i = 0; i < chunkLength; i++ )\n-        {\n-            boolean success = transactionCursor.next();\n-            assert success;\n-\n-            chunkTransactions.push( transactionCursor.get() );\n-        }\n+      throw new IllegalArgumentException(\"The channel which was passed in bridged multiple log versions, it started at version \" +\n+          logVersion + \", but continued through to version \" + channel.getVersion() + \". This isn't supported\");\n     }\n \n-    private boolean currentChunkExhausted()\n-    {\n-        return chunkTransactions.isEmpty();\n-    }\n+    offsetsLength = offsetCursor;\n+    chunkStartOffsetIndex = offsetCursor;\n+    totalSize = channel.position();\n \n-    private boolean exhausted()\n-    {\n-        return chunkStartOffsetIndex == 0 && currentChunkExhausted();\n-    }\n+    return offsets;\n+  }\n \n-    @Override\n-    public void close() throws IOException\n+  @Override\n+  public boolean next() throws IOException\n+  {\n+    if (!exhausted())\n     {\n-        transactionCursor.close(); // closes the channel too\n+      if (currentChunkExhausted())\n+      {\n+        readNextChunk();\n+      }\n+      currentChunkTransaction = chunkTransactions.pop();\n+      return true;\n     }\n+    return false;\n+  }\n+\n+  private void readNextChunk() throws IOException\n+  {\n+    assert chunkStartOffsetIndex > 0;\n \n-    @Override\n-    public CommittedTransactionRepresentation get()\n+    // Start at lowOffsetIndex - 1 and count backwards until almost reaching the chunk size\n+    long highOffset = chunkStartOffsetIndex == offsetsLength ? totalSize : offsets[chunkStartOffsetIndex];\n+    int newLowOffsetIndex = chunkStartOffsetIndex;\n+    while (newLowOffsetIndex > 0)\n     {\n-        return currentChunkTransaction;\n+      long deltaOffset = highOffset - offsets[--newLowOffsetIndex];\n+      if (deltaOffset > CHUNK_SIZE)\n+      {   // We've now read more than the read-ahead size, let's call this the end of this chunk\n+        break;\n+      }\n     }\n-\n-    @Override\n-    public LogPosition position()\n+    assert chunkStartOffsetIndex - newLowOffsetIndex > 0;\n+\n+    // We've established the chunk boundaries. Initialize all offsets and read the transactions in this\n+    // chunk into actual transaction objects\n+    int chunkLength = chunkStartOffsetIndex - newLowOffsetIndex;\n+    chunkStartOffsetIndex = newLowOffsetIndex;\n+    channel.setCurrentPosition(offsets[chunkStartOffsetIndex]);\n+    assert chunkTransactions.isEmpty();\n+    for (int i = 0; i < chunkLength; i++)\n     {\n-        throw new UnsupportedOperationException( \"Should not be called\" );\n+      boolean success = transactionCursor.next();\n+      assert success;\n+\n+      chunkTransactions.push(transactionCursor.get());\n     }\n+  }\n+\n+  private boolean currentChunkExhausted()\n+  {\n+    return chunkTransactions.isEmpty();\n+  }\n+\n+  private boolean exhausted()\n+  {\n+    return chunkStartOffsetIndex == 0 && currentChunkExhausted();\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    transactionCursor.close(); // closes the channel too\n+  }\n+\n+  @Override\n+  public CommittedTransactionRepresentation get()\n+  {\n+    return currentChunkTransaction;\n+  }\n+\n+  @Override\n+  public LogPosition position()\n+  {\n+    throw new UnsupportedOperationException(\"Should not be called\");\n+  }\n }\n",
            "diff_size": 196
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2223/ReversedSingleFileTransactionCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2223/ReversedSingleFileTransactionCursor.java\nindex cfcc7aa3d11..96fcebfef73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2223/ReversedSingleFileTransactionCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2223/ReversedSingleFileTransactionCursor.java\n@@ -79,10 +79,9 @@ public class ReversedSingleFileTransactionCursor implements TransactionCursor\n     private int chunkStartOffsetIndex;\n     private long totalSize;\n \n-    ReversedSingleFileTransactionCursor( ReadAheadLogChannel channel,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader, boolean failOnCorruptedLogFiles,\n+    ReversedSingleFileTransactionCursor( ReadAheadLogChannel channel, LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader, boolean failOnCorruptedLogFiles,\n             ReversedTransactionCursorMonitor monitor ) throws IOException\n-    {\n+{\n         this.channel = channel;\n         this.failOnCorruptedLogFiles = failOnCorruptedLogFiles;\n         this.monitor = monitor;\n@@ -106,10 +105,12 @@ public class ReversedSingleFileTransactionCursor implements TransactionCursor\n             while ( transactionCursor.next() )\n             {\n                 if ( offsetCursor == offsets.length )\n-                {   // Grow\n+                {\n+    // Grow\n                     offsets = Arrays.copyOf( offsets, offsetCursor * 2 );\n                 }\n-                offsets[offsetCursor++] = startOffset;\n+\n+offsets[offsetCursor++] = startOffset;\n                 startOffset = channel.position();\n             }\n         }\n@@ -124,15 +125,13 @@ public class ReversedSingleFileTransactionCursor implements TransactionCursor\n \n         if ( channel.getVersion() != logVersion )\n         {\n-            throw new IllegalArgumentException( \"The channel which was passed in bridged multiple log versions, it started at version \" +\n-                    logVersion + \", but continued through to version \" + channel.getVersion() + \". This isn't supported\" );\n+            throw new IllegalArgumentException( \"The channel which was passed in bridged multiple log versions, it started at version \" + logVersion + \", but continued through to version \" + channel.getVersion() + \". This isn't supported\" );\n         }\n \n         offsetsLength = offsetCursor;\n         chunkStartOffsetIndex = offsetCursor;\n         totalSize = channel.position();\n-\n-        return offsets;\n+return offsets;\n     }\n \n     @Override\n@@ -144,7 +143,8 @@ public class ReversedSingleFileTransactionCursor implements TransactionCursor\n             {\n                 readNextChunk();\n             }\n-            currentChunkTransaction = chunkTransactions.pop();\n+\n+currentChunkTransaction = chunkTransactions.pop();\n             return true;\n         }\n         return false;\n@@ -160,8 +160,9 @@ public class ReversedSingleFileTransactionCursor implements TransactionCursor\n         while ( newLowOffsetIndex > 0 )\n         {\n             long deltaOffset = highOffset - offsets[--newLowOffsetIndex];\n-            if ( deltaOffset > CHUNK_SIZE )\n-            {   // We've now read more than the read-ahead size, let's call this the end of this chunk\n+            if ( deltaOffset> CHUNK_SIZE )\n+            {\n+    // We've now read more than the read-ahead size, let's call this the end of this chunk\n                 break;\n             }\n         }\n@@ -209,4 +210,4 @@ public class ReversedSingleFileTransactionCursor implements TransactionCursor\n     {\n         throw new UnsupportedOperationException( \"Should not be called\" );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}