{
    "project_name": "Gurux-gurux.dlms.java",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "559",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 100).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    throw new RuntimeException(\"Invalid tag.\");\n                }\n                //Get only value because client app is sending system title with LOW authentication.\n                buff.getUInt8();\n                break;\n            // BerType.CONTEXT | PduType.MECHANISMNAME or",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "559",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "554",
                    "column": "41",
                    "severity": "warning",
                    "message": "'!=' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "558",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "572",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/1/GXAPDU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/1/GXAPDU.java\nindex fb883e2fd11..98500386f90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/1/GXAPDU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/1/GXAPDU.java\n@@ -44,7 +44,7 @@ import gurux.dlms.internal.GXCommon;\n  * The services to access the attributes and methods of COSEM objects are\n  * determined on DLMS/COSEM Application layer. The services are carried by\n  * Application Protocol Data Units (APDUs).\n- * <p />\n+ * <p/>\n  * In DLMS/COSEM the meter is primarily a server, and the controlling system is\n  * a client. Also unsolicited (received without a request) messages are\n  * available.\n@@ -62,7 +62,7 @@ final class GXAPDU {\n      * Retrieves the string that indicates the level of authentication, if any.\n      */\n     private static void getAuthenticationString(final GXDLMSSettings settings,\n-            final GXByteBuffer data) {\n+                                                final GXByteBuffer data) {\n         // If authentication is used.\n         if (settings.getAuthentication() != Authentication.NONE) {\n             // Add sender ACSE-requirements field component.\n@@ -78,8 +78,8 @@ final class GXAPDU {\n             // Len\n             data.setUInt8(7);\n             // OBJECT IDENTIFIER\n-            byte[] p = { (byte) 0x60, (byte) 0x85, (byte) 0x74, 0x05, 0x08,\n-                    0x02, (byte) settings.getAuthentication().getValue() };\n+            byte[] p = {(byte) 0x60, (byte) 0x85, (byte) 0x74, 0x05, 0x08,\n+                    0x02, (byte) settings.getAuthentication().getValue()};\n             data.set(p);\n             // Add Calling authentication information.\n             int len = 0;\n@@ -111,13 +111,10 @@ final class GXAPDU {\n \n     /**\n      * Code application context name.\n-     * \n-     * @param settings\n-     *            DLMS settings.\n-     * @param data\n-     *            Byte buffer where data is saved.\n-     * @param cipher\n-     *            Is ciphering settings.\n+     *\n+     * @param settings DLMS settings.\n+     * @param data     Byte buffer where data is saved.\n+     * @param cipher   Is ciphering settings.\n      */\n     private static void generateApplicationContextName(\n             final GXDLMSSettings settings, final GXByteBuffer data,\n@@ -166,14 +163,14 @@ final class GXAPDU {\n \n     /**\n      * Generate User information initiate request.\n-     * \n-     * @param settings\n-     *            DLMS settings.\n+     *\n+     * @param settings DLMS settings.\n      * @param cipher\n      * @param data\n      */\n     private static void getInitiateRequest(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer data) {\n+                                           final GXICipher cipher,\n+                                           final GXByteBuffer data) {\n         // Tag for xDLMS-Initiate request\n         data.setUInt8(GXCommon.INITIAL_REQUEST);\n         // Usage field for the response allowed component.\n@@ -205,15 +202,14 @@ final class GXAPDU {\n \n     /**\n      * Generate user information.\n-     * \n-     * @param settings\n-     *            DLMS settings.\n+     *\n+     * @param settings DLMS settings.\n      * @param cipher\n-     * @param data\n-     *            Generated user information.\n+     * @param data     Generated user information.\n      */\n     private static void generateUserInformation(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer data) {\n+                                                final GXICipher cipher,\n+                                                final GXByteBuffer data) {\n         data.setUInt8(\n                 BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n                         | PduType.UserInformation.getValue());\n@@ -243,7 +239,8 @@ final class GXAPDU {\n      * Generates Aarq.\n      */\n     public static void generateAarq(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer data) {\n+                                    final GXICipher cipher,\n+                                    final GXByteBuffer data) {\n         // AARQ APDU Tag\n         data.setUInt8(BerType.APPLICATION.getValue()\n                 | BerType.CONSTRUCTED.getValue());\n@@ -262,7 +259,8 @@ final class GXAPDU {\n      * Parse User Information from PDU.\n      */\n     private static void parseUserInformation(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer data) {\n+                                             final GXICipher cipher,\n+                                             final GXByteBuffer data) {\n         int len = data.getUInt8();\n         if (data.size() - data.position() < len) {\n             throw new RuntimeException(\"Not enough data.\");\n@@ -392,11 +390,9 @@ final class GXAPDU {\n \n     /**\n      * Parse application context name.\n-     * \n-     * @param settings\n-     *            DLMS settings.\n-     * @param buff\n-     *            Received data.\n+     *\n+     * @param settings DLMS settings.\n+     * @param buff     Received data.\n      */\n     private static boolean parseApplicationContextName(\n             final GXDLMSSettings settings, final GXByteBuffer buff) {\n@@ -428,7 +424,7 @@ final class GXAPDU {\n     }\n \n     private static void validateAare(final GXDLMSSettings settings,\n-            final GXByteBuffer buff) {\n+                                     final GXByteBuffer buff) {\n         int tag = buff.getUInt8();\n         if (settings.isServer()) {\n             if (tag != (BerType.APPLICATION.getValue()\n@@ -449,7 +445,8 @@ final class GXAPDU {\n      * Parse APDU.\n      */\n     public static SourceDiagnostic parsePDU(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer buff) {\n+                                            final GXICipher cipher,\n+                                            final GXByteBuffer buff) {\n         // Get AARE tag and length\n         validateAare(settings, buff);\n         byte[] tmp;\n@@ -464,134 +461,136 @@ final class GXAPDU {\n         while (buff.position() < buff.size()) {\n             tag = buff.getUInt8();\n             switch (tag) {\n-            // BerType.CONTEXT | BerType.CONSTRUCTED |\n-            // PduType.APPLICATIONCONTEXTNAME\n-            case 0xA1:\n-                if (!parseApplicationContextName(settings, buff)) {\n-                    throw new GXDLMSException(\n-                            AssociationResult.PERMANENT_REJECTED,\n-                            SourceDiagnostic.NOT_SUPPORTED);\n-                }\n-                break;\n-            // Result BerType.CONTEXT | BerType.CONSTRUCTED |\n-            // PduType.CALLEDAPTITLE\n-            case 0xA2:\n-                // Get len.\n-                if (buff.getUInt8() != 3) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                // Choice for result (INTEGER, universal)\n-                if (buff.getUInt8() != BerType.INTEGER.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                // Get len.\n-                if (buff.getUInt8() != 1) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                resultComponent = AssociationResult.forValue(buff.getUInt8());\n-                break;\n-            // SourceDiagnostic BerType.CONTEXT | BerType.CONSTRUCTED |\n-            // PduType.CALLEDAEQUALIFIER\n-            case 0xA3:\n-                len = buff.getUInt8();\n-                // ACSE service user tag.\n-                tag = buff.getUInt8();\n-                len = buff.getUInt8();\n-                // Result source diagnostic component.\n-                if (buff.getUInt8() != BerType.INTEGER.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                if (buff.getUInt8() != 1) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                resultDiagnosticValue =\n-                        SourceDiagnostic.forValue(buff.getUInt8());\n-                break;\n-            // Result BerType.CONTEXT | BerType.CONSTRUCTED |\n-            // PduType.CalledApInvocationId\n-            case 0xA4:\n-                // Get len.\n-                if (buff.getUInt8() != 0xA) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                // Choice for result (Universal, Octet string type)\n-                if (buff.getUInt8() != BerType.OCTET_STRING.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                // responding-AP-title-field\n-                // Get len.\n-                len = buff.getUInt8();\n-                tmp = new byte[len];\n-                buff.get(tmp);\n-                settings.setSourceSystemTitle(tmp);\n-                break;\n-            // Client system title. BerType.CONTEXT | BerType.CONSTRUCTED |\n-            // PduType.CALLINGAPTITLE\n-            case 0xA6:\n-                len = buff.getUInt8();\n-                tag = buff.getUInt8();\n-                len = buff.getUInt8();\n-                tmp = new byte[len];\n-                buff.get(tmp);\n-                settings.setSourceSystemTitle(tmp);\n-                break;\n-            // Server system title. BerType.CONTEXT| BerType.CONSTRUCTED |\n-            // PduType.SENDERACSEREQUIREMENTS\n-            case 0xAA:\n-                len = buff.getUInt8();\n-                tag = buff.getUInt8();\n-                len = buff.getUInt8();\n-                tmp = new byte[len];\n-                buff.get(tmp);\n-                settings.setStoCChallenge(tmp);\n-                break;\n-            // BerType.CONTEXT | PduType.SENDERACSEREQUIREMENTS or\n-            // BerType.CONTEXT | PduType.CALLINGAPINVOCATIONID\n-            case 0x8A:\n-            case 0x88:\n-                // Get sender ACSE-requirements field component.\n-                if (buff.getUInt8() != 2) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                if (buff.getUInt8() != BerType.OBJECT_DESCRIPTOR.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n-                }\n-                //Get only value because client app is sending system title with LOW authentication.\n-                buff.getUInt8();\n-                break;\n-            // BerType.CONTEXT | PduType.MECHANISMNAME or\n-            case 0x8B:\n-                // BerType.CONTEXT | PduType.CALLINGAEINVOCATIONID\n-            case 0x89:\n-                updateAuthentication(settings, buff);\n-                break;\n-            // BerType.CONTEXT | BerType.CONSTRUCTED |\n-            // PduType.CALLINGAUTHENTICATIONVALUE\n-            case 0xAC:\n-                updatePassword(settings, buff);\n-                break;\n-            // BerType.CONTEXT | BerType.CONSTRUCTED | PduType.USERINFORMATION\n-            case 0xBE:\n-                if (resultComponent != AssociationResult.ACCEPTED\n-                        && resultDiagnosticValue != SourceDiagnostic.NONE) {\n-                    throw new GXDLMSException(resultComponent,\n-                            resultDiagnosticValue);\n-                }\n-                parseUserInformation(settings, cipher, buff);\n-                break;\n-            default:\n-                // Unknown tags.\n-                System.out.println(\"Unknown tag: \" + tag + \".\");\n-                len = buff.getUInt8();\n-                buff.position(buff.position() + len);\n-                break;\n+                // BerType.CONTEXT | BerType.CONSTRUCTED |\n+                // PduType.APPLICATIONCONTEXTNAME\n+                case 0xA1:\n+                    if (!parseApplicationContextName(settings, buff)) {\n+                        throw new GXDLMSException(\n+                                AssociationResult.PERMANENT_REJECTED,\n+                                SourceDiagnostic.NOT_SUPPORTED);\n+                    }\n+                    break;\n+                // Result BerType.CONTEXT | BerType.CONSTRUCTED |\n+                // PduType.CALLEDAPTITLE\n+                case 0xA2:\n+                    // Get len.\n+                    if (buff.getUInt8() != 3) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    // Choice for result (INTEGER, universal)\n+                    if (buff.getUInt8() != BerType.INTEGER.getValue()) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    // Get len.\n+                    if (buff.getUInt8() != 1) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    resultComponent =\n+                            AssociationResult.forValue(buff.getUInt8());\n+                    break;\n+                // SourceDiagnostic BerType.CONTEXT | BerType.CONSTRUCTED |\n+                // PduType.CALLEDAEQUALIFIER\n+                case 0xA3:\n+                    len = buff.getUInt8();\n+                    // ACSE service user tag.\n+                    tag = buff.getUInt8();\n+                    len = buff.getUInt8();\n+                    // Result source diagnostic component.\n+                    if (buff.getUInt8() != BerType.INTEGER.getValue()) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    if (buff.getUInt8() != 1) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    resultDiagnosticValue =\n+                            SourceDiagnostic.forValue(buff.getUInt8());\n+                    break;\n+                // Result BerType.CONTEXT | BerType.CONSTRUCTED |\n+                // PduType.CalledApInvocationId\n+                case 0xA4:\n+                    // Get len.\n+                    if (buff.getUInt8() != 0xA) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    // Choice for result (Universal, Octet string type)\n+                    if (buff.getUInt8() != BerType.OCTET_STRING.getValue()) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    // responding-AP-title-field\n+                    // Get len.\n+                    len = buff.getUInt8();\n+                    tmp = new byte[len];\n+                    buff.get(tmp);\n+                    settings.setSourceSystemTitle(tmp);\n+                    break;\n+                // Client system title. BerType.CONTEXT | BerType.CONSTRUCTED |\n+                // PduType.CALLINGAPTITLE\n+                case 0xA6:\n+                    len = buff.getUInt8();\n+                    tag = buff.getUInt8();\n+                    len = buff.getUInt8();\n+                    tmp = new byte[len];\n+                    buff.get(tmp);\n+                    settings.setSourceSystemTitle(tmp);\n+                    break;\n+                // Server system title. BerType.CONTEXT| BerType.CONSTRUCTED |\n+                // PduType.SENDERACSEREQUIREMENTS\n+                case 0xAA:\n+                    len = buff.getUInt8();\n+                    tag = buff.getUInt8();\n+                    len = buff.getUInt8();\n+                    tmp = new byte[len];\n+                    buff.get(tmp);\n+                    settings.setStoCChallenge(tmp);\n+                    break;\n+                // BerType.CONTEXT | PduType.SENDERACSEREQUIREMENTS or\n+                // BerType.CONTEXT | PduType.CALLINGAPINVOCATIONID\n+                case 0x8A:\n+                case 0x88:\n+                    // Get sender ACSE-requirements field component.\n+                    if (buff.getUInt8() != 2) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    if (buff.getUInt8() !=\n+                            BerType.OBJECT_DESCRIPTOR.getValue()) {\n+                        throw new RuntimeException(\"Invalid tag.\");\n+                    }\n+                    //Get only value because client app is sending system title with LOW authentication.\n+                    buff.getUInt8();\n+                    break;\n+                // BerType.CONTEXT | PduType.MECHANISMNAME or\n+                case 0x8B:\n+                    // BerType.CONTEXT | PduType.CALLINGAEINVOCATIONID\n+                case 0x89:\n+                    updateAuthentication(settings, buff);\n+                    break;\n+                // BerType.CONTEXT | BerType.CONSTRUCTED |\n+                // PduType.CALLINGAUTHENTICATIONVALUE\n+                case 0xAC:\n+                    updatePassword(settings, buff);\n+                    break;\n+                // BerType.CONTEXT | BerType.CONSTRUCTED | PduType.USERINFORMATION\n+                case 0xBE:\n+                    if (resultComponent != AssociationResult.ACCEPTED\n+                            && resultDiagnosticValue != SourceDiagnostic.NONE) {\n+                        throw new GXDLMSException(resultComponent,\n+                                resultDiagnosticValue);\n+                    }\n+                    parseUserInformation(settings, cipher, buff);\n+                    break;\n+                default:\n+                    // Unknown tags.\n+                    System.out.println(\"Unknown tag: \" + tag + \".\");\n+                    len = buff.getUInt8();\n+                    buff.position(buff.position() + len);\n+                    break;\n             }\n         }\n         return resultDiagnosticValue;\n     }\n \n     private static void updatePassword(final GXDLMSSettings settings,\n-            final GXByteBuffer buff) {\n+                                       final GXByteBuffer buff) {\n         byte[] tmp;\n         int len;\n         len = buff.getUInt8();\n@@ -610,7 +609,7 @@ final class GXAPDU {\n     }\n \n     private static void updateAuthentication(final GXDLMSSettings settings,\n-            final GXByteBuffer buff) {\n+                                             final GXByteBuffer buff) {\n         int ch = buff.getUInt8();\n         if (buff.getUInt8() != 0x60) {\n             throw new RuntimeException(\"Invalid tag.\");\n@@ -638,20 +637,20 @@ final class GXAPDU {\n     }\n \n     private static byte[] getUserInformation(final GXDLMSSettings settings,\n-            final GXICipher cipher) {\n+                                             final GXICipher cipher) {\n         GXByteBuffer data = new GXByteBuffer();\n         data.setUInt8(GXCommon.INITIAL_RESPONSE); // Tag for xDLMS-Initiate\n-                                                  // response\n+        // response\n         data.setUInt8(0x01);\n         data.setUInt8(0x00); // Usage field for the response allowed component\n-                             // (not used)\n+        // (not used)\n         // DLMS Version Number\n         data.setUInt8(06);\n         data.setUInt8(0x5F);\n         data.setUInt8(0x1F);\n         data.setUInt8(0x04); // length of the conformance block\n         data.setUInt8(0x00); // encoding the number of unused bits in the bit\n-                             // string\n+        // string\n         if (settings.getUseLogicalNameReferencing()) {\n             data.set(settings.getLnSettings().getConformanceBlock());\n         } else {\n@@ -675,8 +674,10 @@ final class GXAPDU {\n      * Server generates AARE message.\n      */\n     public static void generateAARE(final GXDLMSSettings settings,\n-            final GXByteBuffer data, final AssociationResult result,\n-            final SourceDiagnostic diagnostic, final GXICipher cipher) {\n+                                    final GXByteBuffer data,\n+                                    final AssociationResult result,\n+                                    final SourceDiagnostic diagnostic,\n+                                    final GXICipher cipher) {\n         int offset = data.position();\n         // Set AARE tag and length 0x61\n         data.setUInt8(\n@@ -706,7 +707,7 @@ final class GXAPDU {\n         // SystemTitle\n         if (cipher != null\n                 && (settings.getAuthentication() == Authentication.HIGH_GMAC\n-                        || cipher.isCiphered())) {\n+                || cipher.isCiphered())) {\n             data.setUInt8(\n                     BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n                             | PduType.CalledApInvocationId.getValue());\n",
            "diff_size": 169
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "296",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "336",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "418",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "450",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "453",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "459",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "493",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "532",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "587",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "603",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "604",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "620",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "640",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "675",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "714",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "717",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "723",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "741",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "742",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "749",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "773",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/1/GXAPDU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/1/GXAPDU.java\nindex fb883e2fd11..700d80c3cd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/1/GXAPDU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/1/GXAPDU.java\n@@ -49,11 +49,14 @@ import gurux.dlms.internal.GXCommon;\n  * a client. Also unsolicited (received without a request) messages are\n  * available.\n  */\n+\n final class GXAPDU {\n \n     /**\n      * Constructor.\n      */\n+\n+\n     private GXAPDU() {\n \n     }\n@@ -61,8 +64,9 @@ final class GXAPDU {\n     /**\n      * Retrieves the string that indicates the level of authentication, if any.\n      */\n-    private static void getAuthenticationString(final GXDLMSSettings settings,\n-            final GXByteBuffer data) {\n+\n+\n+    private static void getAuthenticationString(final GXDLMSSettings settings, final GXByteBuffer data) {\n         // If authentication is used.\n         if (settings.getAuthentication() != Authentication.NONE) {\n             // Add sender ACSE-requirements field component.\n@@ -72,14 +76,12 @@ final class GXAPDU {\n             data.setUInt8(BerType.BIT_STRING.getValue()\n                     | BerType.OCTET_STRING.getValue());\n             data.setUInt8(0x80);\n-\n             data.setUInt8(BerType.CONTEXT.getValue()\n                     | PduType.MECHANISMNAME.getValue());\n             // Len\n             data.setUInt8(7);\n             // OBJECT IDENTIFIER\n-            byte[] p = { (byte) 0x60, (byte) 0x85, (byte) 0x74, 0x05, 0x08,\n-                    0x02, (byte) settings.getAuthentication().getValue() };\n+            byte[] p = { (byte) 0x60, (byte) 0x85, (byte) 0x74, 0x05, 0x08, 0x02, (byte) settings.getAuthentication().getValue() };\n             data.set(p);\n             // Add Calling authentication information.\n             int len = 0;\n@@ -94,9 +96,8 @@ final class GXAPDU {\n                 len = callingAuthenticationValue.length;\n             }\n             // 0xAC\n-            data.setUInt8(\n-                    BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n-                            | PduType.CallingAuthenticationValue.getValue());\n+            data.setUInt8(BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+                | PduType.CallingAuthenticationValue.getValue());\n             // Len\n             data.setUInt8((2 + len));\n             // Add authentication information.\n@@ -119,13 +120,13 @@ final class GXAPDU {\n      * @param cipher\n      *            Is ciphering settings.\n      */\n-    private static void generateApplicationContextName(\n-            final GXDLMSSettings settings, final GXByteBuffer data,\n-            final GXICipher cipher) {\n+\n+\n+    private static void generateApplicationContextName(final GXDLMSSettings settings,\n+            final GXByteBuffer data, final GXICipher cipher) {\n         // Application context name tag\n-        data.setUInt8(\n-                (BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n-                        | PduType.ApplicationContextName.getValue()));\n+        data.setUInt8((BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+            | PduType.ApplicationContextName.getValue()));\n         // Len\n         data.setUInt8(0x09);\n         data.setUInt8(BerType.OBJECT_IDENTIFIER.getValue());\n@@ -146,15 +147,15 @@ final class GXAPDU {\n             }\n         }\n         // Add system title.\n-        if (!settings.isServer() && (ciphered\n-                || settings.getAuthentication() == Authentication.HIGH_GMAC)) {\n-            if (cipher.getSystemTitle() == null\n-                    || cipher.getSystemTitle().length == 0) {\n-                throw new IllegalArgumentException(\"SystemTitle\");\n+        if (!settings.isServer()\n+                && (ciphered || settings.getAuthentication() == Authentication.HIGH_GMAC)) {\n+            if (cipher.getSystemTitle() == null || cipher.getSystemTitle().length == 0) {\n+                throw new IllegalArgumentException(\n+                    \"SystemTitle\");\n             }\n             // Add calling-AP-title\n-            data.setUInt8((BerType.CONTEXT.getValue()\n-                    | BerType.CONSTRUCTED.getValue() | 6));\n+            data.setUInt8((BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+                | 6));\n             // LEN\n             data.setUInt8((2 + cipher.getSystemTitle().length));\n             data.setUInt8(BerType.OCTET_STRING.getValue());\n@@ -172,6 +173,8 @@ final class GXAPDU {\n      * @param cipher\n      * @param data\n      */\n+\n+\n     private static void getInitiateRequest(final GXDLMSSettings settings,\n             final GXICipher cipher, final GXByteBuffer data) {\n         // Tag for xDLMS-Initiate request\n@@ -212,11 +215,12 @@ final class GXAPDU {\n      * @param data\n      *            Generated user information.\n      */\n+\n+\n     private static void generateUserInformation(final GXDLMSSettings settings,\n             final GXICipher cipher, final GXByteBuffer data) {\n-        data.setUInt8(\n-                BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n-                        | PduType.UserInformation.getValue());\n+        data.setUInt8(BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+            | PduType.UserInformation.getValue());\n         if (cipher == null || !cipher.isCiphered()) {\n             // Length for AARQ user field\n             data.setUInt8(0x10);\n@@ -229,7 +233,8 @@ final class GXAPDU {\n             GXByteBuffer tmp = new GXByteBuffer();\n             getInitiateRequest(settings, cipher, tmp);\n             byte[] crypted = cipher.encrypt((byte) 0x21,\n-                    cipher.getSystemTitle(), tmp.array());\n+cipher.getSystemTitle(),\n+tmp.array());\n             // Length for AARQ user field\n             data.setUInt8((2 + crypted.length));\n             // Coding the choice for user-information (Octet string, universal)\n@@ -242,8 +247,10 @@ final class GXAPDU {\n     /**\n      * Generates Aarq.\n      */\n+\n+\n     public static void generateAarq(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer data) {\n+           final GXICipher cipher, final GXByteBuffer data) {\n         // AARQ APDU Tag\n         data.setUInt8(BerType.APPLICATION.getValue()\n                 | BerType.CONSTRUCTED.getValue());\n@@ -261,30 +268,32 @@ final class GXAPDU {\n     /**\n      * Parse User Information from PDU.\n      */\n+\n+\n     private static void parseUserInformation(final GXDLMSSettings settings,\n             final GXICipher cipher, final GXByteBuffer data) {\n         int len = data.getUInt8();\n         if (data.size() - data.position() < len) {\n-            throw new RuntimeException(\"Not enough data.\");\n+            throw new RuntimeException(\n+                \"Not enough data.\");\n         }\n         // Encoding the choice for user information\n         int tag = data.getUInt8();\n         if (tag != 0x4) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         len = data.getUInt8();\n         // Tag for xDLMS-Initate.response\n         tag = data.getUInt8();\n         if (tag == GXCommon.INITIAL_RESPONSE_GLO) {\n             data.position(data.position() - 1);\n-            cipher.setSecurity(\n-                    cipher.decrypt(settings.getSourceSystemTitle(), data));\n+            cipher.setSecurity(cipher.decrypt(settings.getSourceSystemTitle(), data));\n             tag = data.getUInt8();\n         } else if (tag == GXCommon.INITIAL_REQUEST_GLO) {\n             data.position(data.position() - 1);\n             // InitiateRequest\n-            cipher.setSecurity(\n-                    cipher.decrypt(settings.getSourceSystemTitle(), data));\n+            cipher.setSecurity(cipher.decrypt(settings.getSourceSystemTitle(), data));\n             tag = data.getUInt8();\n         }\n         boolean response = tag == GXCommon.INITIAL_RESPONSE;\n@@ -323,21 +332,24 @@ final class GXAPDU {\n                 data.position(data.position() + len);\n             }\n         } else {\n-            throw new RuntimeException(\"Invalid tag.\");\n-        }\n+                                                                 throw new RuntimeException(\n+                                                                     \"Invalid tag.\");\n+    }\n         // Get DLMS version number.\n         if (settings.isServer()) {\n             settings.setDLMSVersion((byte) data.getUInt8());\n         } else {\n             if (data.getUInt8() != 6) {\n-                throw new RuntimeException(\"Invalid DLMS version number.\");\n+                throw new RuntimeException(\n+                    \"Invalid DLMS version number.\");\n             }\n         }\n \n         // Tag for conformance block\n         tag = data.getUInt8();\n         if (tag != 0x5F) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         // Old Way...\n         if (data.getUInt8(data.position()) == 0x1F) {\n@@ -376,17 +388,20 @@ final class GXAPDU {\n             if (tag == 0x0007) {\n                 // If LN\n                 if (!settings.getUseLogicalNameReferencing()) {\n-                    throw new IllegalArgumentException(\"Invalid VAA.\");\n+                    throw new IllegalArgumentException(\n+                        \"Invalid VAA.\");\n                 }\n             } else if (tag == 0xFA00) {\n                 // If SN\n-                if (settings.getUseLogicalNameReferencing()) {\n-                    throw new IllegalArgumentException(\"Invalid VAA.\");\n-                }\n+            if (settings.getUseLogicalNameReferencing()) {\n+                throw new IllegalArgumentException(\n+                    \"Invalid VAA.\");\n+            }\n             } else {\n                 // Unknown VAA.\n-                throw new IllegalArgumentException(\"Invalid VAA.\");\n-            }\n+                          throw new IllegalArgumentException(\n+                              \"Invalid VAA.\");\n+        }\n         }\n     }\n \n@@ -398,17 +413,21 @@ final class GXAPDU {\n      * @param buff\n      *            Received data.\n      */\n-    private static boolean parseApplicationContextName(\n-            final GXDLMSSettings settings, final GXByteBuffer buff) {\n+\n+\n+    private static boolean parseApplicationContextName(final GXDLMSSettings settings, final GXByteBuffer buff) {\n         // Get length.\n         int len = buff.getUInt8();\n         if (buff.size() - buff.position() < len) {\n-            throw new RuntimeException(\"Encoding failed. Not enough data.\");\n+            throw new RuntimeException(\n+                \"Encoding failed. Not enough data.\");\n         }\n         if (buff.getUInt8() != 0x6) {\n-            throw new RuntimeException(\"Encoding failed. Not an Object ID.\");\n+            throw new RuntimeException(\n+                \"Encoding failed. Not an Object ID.\");\n         }\n-        if (settings.isServer() && settings.getCipher() != null) {\n+        if (settings.isServer()\n+                && settings.getCipher() != null) {\n             settings.getCipher().setSecurity(Security.NONE);\n         }\n         // Object ID length.\n@@ -427,20 +446,20 @@ final class GXAPDU {\n         return buff.compare(GXCommon.SHORT_NAME_OBJECT_ID_WITH_CIPHERING);\n     }\n \n-    private static void validateAare(final GXDLMSSettings settings,\n-            final GXByteBuffer buff) {\n+\n+    private static void validateAare(final GXDLMSSettings settings, final GXByteBuffer buff) {\n         int tag = buff.getUInt8();\n         if (settings.isServer()) {\n-            if (tag != (BerType.APPLICATION.getValue()\n-                    | BerType.CONSTRUCTED.getValue()\n-                    | PduType.ProtocolVersion.getValue())) {\n-                throw new RuntimeException(\"Invalid tag.\");\n+            if (tag != (BerType.APPLICATION.getValue() | BerType.CONSTRUCTED.getValue()\n+                | PduType.ProtocolVersion.getValue())) {\n+                throw new RuntimeException(\n+                    \"Invalid tag.\");\n             }\n         } else {\n-            if (tag != (BerType.APPLICATION.getValue()\n-                    | BerType.CONSTRUCTED.getValue()\n-                    | PduType.ApplicationContextName.getValue())) {\n-                throw new RuntimeException(\"Invalid tag.\");\n+            if (tag != (BerType.APPLICATION.getValue() | BerType.CONSTRUCTED.getValue()\n+                | PduType.ApplicationContextName.getValue())) {\n+                throw new RuntimeException(\n+                    \"Invalid tag.\");\n             }\n         }\n     }\n@@ -448,8 +467,10 @@ final class GXAPDU {\n     /**\n      * Parse APDU.\n      */\n+\n+\n     public static SourceDiagnostic parsePDU(final GXDLMSSettings settings,\n-            final GXICipher cipher, final GXByteBuffer buff) {\n+           final GXICipher cipher, final GXByteBuffer buff) {\n         // Get AARE tag and length\n         validateAare(settings, buff);\n         byte[] tmp;\n@@ -457,7 +478,8 @@ final class GXAPDU {\n         int len = buff.getUInt8();\n         int size = buff.size() - buff.position();\n         if (len > size) {\n-            throw new RuntimeException(\"Not enough data.\");\n+            throw new RuntimeException(\n+                \"Not enough data.\");\n         }\n         AssociationResult resultComponent = AssociationResult.ACCEPTED;\n         SourceDiagnostic resultDiagnosticValue = SourceDiagnostic.NONE;\n@@ -468,9 +490,7 @@ final class GXAPDU {\n             // PduType.APPLICATIONCONTEXTNAME\n             case 0xA1:\n                 if (!parseApplicationContextName(settings, buff)) {\n-                    throw new GXDLMSException(\n-                            AssociationResult.PERMANENT_REJECTED,\n-                            SourceDiagnostic.NOT_SUPPORTED);\n+                    throw new GXDLMSException(AssociationResult.PERMANENT_REJECTED, SourceDiagnostic.NOT_SUPPORTED);\n                 }\n                 break;\n             // Result BerType.CONTEXT | BerType.CONSTRUCTED |\n@@ -478,15 +498,18 @@ final class GXAPDU {\n             case 0xA2:\n                 // Get len.\n                 if (buff.getUInt8() != 3) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 // Choice for result (INTEGER, universal)\n                 if (buff.getUInt8() != BerType.INTEGER.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 // Get len.\n                 if (buff.getUInt8() != 1) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 resultComponent = AssociationResult.forValue(buff.getUInt8());\n                 break;\n@@ -499,24 +522,27 @@ final class GXAPDU {\n                 len = buff.getUInt8();\n                 // Result source diagnostic component.\n                 if (buff.getUInt8() != BerType.INTEGER.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 if (buff.getUInt8() != 1) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n-                resultDiagnosticValue =\n-                        SourceDiagnostic.forValue(buff.getUInt8());\n+                resultDiagnosticValue = SourceDiagnostic.forValue(buff.getUInt8());\n                 break;\n             // Result BerType.CONTEXT | BerType.CONSTRUCTED |\n             // PduType.CalledApInvocationId\n             case 0xA4:\n                 // Get len.\n                 if (buff.getUInt8() != 0xA) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 // Choice for result (Universal, Octet string type)\n                 if (buff.getUInt8() != BerType.OCTET_STRING.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 // responding-AP-title-field\n                 // Get len.\n@@ -551,10 +577,12 @@ final class GXAPDU {\n             case 0x88:\n                 // Get sender ACSE-requirements field component.\n                 if (buff.getUInt8() != 2) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 if (buff.getUInt8() != BerType.OBJECT_DESCRIPTOR.getValue()) {\n-                    throw new RuntimeException(\"Invalid tag.\");\n+                    throw new RuntimeException(\n+                        \"Invalid tag.\");\n                 }\n                 //Get only value because client app is sending system title with LOW authentication.\n                 buff.getUInt8();\n@@ -572,10 +600,8 @@ final class GXAPDU {\n                 break;\n             // BerType.CONTEXT | BerType.CONSTRUCTED | PduType.USERINFORMATION\n             case 0xBE:\n-                if (resultComponent != AssociationResult.ACCEPTED\n-                        && resultDiagnosticValue != SourceDiagnostic.NONE) {\n-                    throw new GXDLMSException(resultComponent,\n-                            resultDiagnosticValue);\n+                if (resultComponent != AssociationResult.ACCEPTED && resultDiagnosticValue != SourceDiagnostic.NONE) {\n+                    throw new GXDLMSException(resultComponent, resultDiagnosticValue);\n                 }\n                 parseUserInformation(settings, cipher, buff);\n                 break;\n@@ -590,14 +616,15 @@ final class GXAPDU {\n         return resultDiagnosticValue;\n     }\n \n-    private static void updatePassword(final GXDLMSSettings settings,\n-            final GXByteBuffer buff) {\n+\n+    private static void updatePassword(final GXDLMSSettings settings, final GXByteBuffer buff) {\n         byte[] tmp;\n         int len;\n         len = buff.getUInt8();\n         // Get authentication information.\n         if (buff.getUInt8() != 0x80) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         len = buff.getUInt8();\n         tmp = new byte[len];\n@@ -609,36 +636,43 @@ final class GXAPDU {\n         }\n     }\n \n-    private static void updateAuthentication(final GXDLMSSettings settings,\n-            final GXByteBuffer buff) {\n+\n+    private static void updateAuthentication(final GXDLMSSettings settings, final GXByteBuffer buff) {\n         int ch = buff.getUInt8();\n         if (buff.getUInt8() != 0x60) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         if (buff.getUInt8() != 0x85) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         if (buff.getUInt8() != 0x74) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         if (buff.getUInt8() != 0x05) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         if (buff.getUInt8() != 0x08) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         if (buff.getUInt8() != 0x02) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         ch = buff.getUInt8();\n         if (ch < 0 || ch > 5) {\n-            throw new RuntimeException(\"Invalid tag.\");\n+            throw new RuntimeException(\n+                \"Invalid tag.\");\n         }\n         settings.setAuthentication(Authentication.forValue(ch));\n     }\n \n-    private static byte[] getUserInformation(final GXDLMSSettings settings,\n-            final GXICipher cipher) {\n+\n+    private static byte[] getUserInformation(final GXDLMSSettings settings, final GXICipher cipher) {\n         GXByteBuffer data = new GXByteBuffer();\n         data.setUInt8(GXCommon.INITIAL_RESPONSE); // Tag for xDLMS-Initiate\n                                                   // response\n@@ -656,7 +690,6 @@ final class GXAPDU {\n             data.set(settings.getLnSettings().getConformanceBlock());\n         } else {\n             data.set(settings.getSnSettings().getConformanceBlock());\n-\n         }\n         data.setUInt16(settings.getMaxReceivePDUSize());\n         // VAA Name VAA name (0x0007 for LN referencing and 0xFA00 for SN)\n@@ -666,7 +699,9 @@ final class GXAPDU {\n             data.setUInt16(0xFA00);\n         }\n         if (cipher != null && cipher.isCiphered()) {\n-            return cipher.encrypt(0x28, cipher.getSystemTitle(), data.array());\n+            return cipher.encrypt(0x28,\n+cipher.getSystemTitle(),\n+data.array());\n         }\n         return data.array();\n     }\n@@ -674,20 +709,19 @@ final class GXAPDU {\n     /**\n      * Server generates AARE message.\n      */\n-    public static void generateAARE(final GXDLMSSettings settings,\n-            final GXByteBuffer data, final AssociationResult result,\n-            final SourceDiagnostic diagnostic, final GXICipher cipher) {\n+\n+\n+    public static void generateAARE(final GXDLMSSettings settings, final GXByteBuffer data, final AssociationResult result, final SourceDiagnostic diagnostic, final GXICipher cipher) {\n         int offset = data.position();\n         // Set AARE tag and length 0x61\n-        data.setUInt8(\n-                BerType.APPLICATION.getValue() | BerType.CONSTRUCTED.getValue()\n-                        | PduType.ApplicationContextName.getValue());\n+        data.setUInt8(BerType.APPLICATION.getValue() | BerType.CONSTRUCTED.getValue()\n+            | PduType.ApplicationContextName.getValue());\n         // Length is updated later.\n         data.setUInt8(0);\n         generateApplicationContextName(settings, data, cipher);\n         // Result 0xA2\n-        data.setUInt8(BerType.CONTEXT.getValue()\n-                | BerType.CONSTRUCTED.getValue() | BerType.INTEGER.getValue());\n+        data.setUInt8(BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+            | BerType.INTEGER.getValue());\n         data.setUInt8(3); // len\n         data.setUInt8(BerType.INTEGER.getValue()); // Tag\n         // Choice for result (INTEGER, universal)\n@@ -704,20 +738,15 @@ final class GXAPDU {\n         // diagnostic\n         data.setUInt8(diagnostic.getValue());\n         // SystemTitle\n-        if (cipher != null\n-                && (settings.getAuthentication() == Authentication.HIGH_GMAC\n-                        || cipher.isCiphered())) {\n-            data.setUInt8(\n-                    BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n-                            | PduType.CalledApInvocationId.getValue());\n+        if (cipher != null && (settings.getAuthentication() == Authentication.HIGH_GMAC || cipher.isCiphered())) {\n+            data.setUInt8(BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+                | PduType.CalledApInvocationId.getValue());\n             data.setUInt8((2 + cipher.getSystemTitle().length));\n             data.setUInt8(BerType.OCTET_STRING.getValue());\n             data.setUInt8(cipher.getSystemTitle().length);\n             data.set(cipher.getSystemTitle());\n         }\n-\n-        if (result != AssociationResult.PERMANENT_REJECTED\n-                && diagnostic == SourceDiagnostic.AUTHENTICATION_REQUIRED) {\n+        if (result != AssociationResult.PERMANENT_REJECTED && diagnostic == SourceDiagnostic.AUTHENTICATION_REQUIRED) {\n             // Add server ACSE-requirenents field component.\n             data.setUInt8(0x88);\n             data.setUInt8(0x02); // Len.\n@@ -741,9 +770,8 @@ final class GXAPDU {\n         }\n         // Add User Information\n         // Tag 0xBE\n-        data.setUInt8(\n-                BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n-                        | PduType.UserInformation.getValue());\n+        data.setUInt8(BerType.CONTEXT.getValue() | BerType.CONSTRUCTED.getValue()\n+            | PduType.UserInformation.getValue());\n         byte[] tmp = getUserInformation(settings, cipher);\n         data.setUInt8((2 + tmp.length));\n         // Coding the choice for user-information (Octet STRING, universal)\n@@ -751,6 +779,7 @@ final class GXAPDU {\n         // Length\n         data.setUInt8(tmp.length);\n         data.set(tmp);\n-        data.setUInt8((short) (offset + 1), (data.size() - offset - 2));\n+        data.setUInt8((short) (offset + 1),\n+            (data.size() - offset - 2));\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 163
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "559",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "559",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}