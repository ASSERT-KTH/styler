{
    "project_name": "Angel-ML-angel",
    "error_id": "617",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/617/IntLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/617/IntLongVectorStorage.java\nindex 81cd887457c..7e9dde9b293 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/617/IntLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/617/IntLongVectorStorage.java\n@@ -312,7 +312,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n \n   @Override\n   public IntLongVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n+    if (isSparse()) {\n       return new IntLongVectorStorage(VFactory\n           .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "308",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/617/IntLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/617/IntLongVectorStorage.java\nindex 81cd887457c..6a6e847bfe9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/617/IntLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/617/IntLongVectorStorage.java\n@@ -60,22 +60,17 @@ public class IntLongVectorStorage extends IntLongStorage {\n       case T_LONG_SPARSE:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n-      case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n-      case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n \n@@ -142,8 +137,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public long get(int index) {\n     return vector.get(index - (int) indexOffset);\n   }\n@@ -202,8 +196,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getLongValue());\n         }\n-\n-        break;\n+break;\n       }\n \n       case SORTED: {\n@@ -212,8 +205,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n-        break;\n+break;\n       }\n \n       default:\n@@ -313,10 +305,9 @@ public class IntLongVectorStorage extends IntLongStorage {\n   @Override\n   public IntLongVectorStorage adaptiveClone() {\n     if(isSparse()) {\n-      return new IntLongVectorStorage(VFactory\n-          .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n+      return new IntLongVectorStorage(VFactory.sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n@@ -343,7 +334,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n     if (keyType != KeyType.INT) {\n       throw new UnsupportedOperationException(\n           this.getClass().getName() + \" only support int type index now\");\n-    }\n+  }\n \n     if (func != null) {\n       for (int i = 0; i < indexSize; i++) {\n@@ -355,4 +346,4 @@ public class IntLongVectorStorage extends IntLongStorage {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "307",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "334",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/617/IntLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/617/IntLongVectorStorage.java\nindex 81cd887457c..6652d1b39a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/617/IntLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/617/IntLongVectorStorage.java\n@@ -17,7 +17,6 @@\n \n package com.tencent.angel.ps.storage.vector.storage;\n \n-\n import com.tencent.angel.common.ByteBufSerdeUtils;\n import com.tencent.angel.ml.math2.VFactory;\n import com.tencent.angel.ml.math2.vector.IntLongVector;\n@@ -33,6 +32,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A int key long value storage: use a IntFloatVector as storage\n  */\n+\n public class IntLongVectorStorage extends IntLongStorage {\n \n   private IntLongVector vector;\n@@ -55,30 +55,25 @@ public class IntLongVectorStorage extends IntLongStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_LONG_SPARSE:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n       case T_INT_SPARSE:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n       case T_LONG_DENSE:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n       case T_INT_DENSE:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n-\n   }\n \n   private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n@@ -126,7 +121,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n     }\n   }\n \n-\n   private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n     int size = ByteBufSerdeUtils.deserializeInt(buf);\n     if (op == UpdateOp.PLUS) {\n@@ -142,7 +136,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n     }\n   }\n \n-\n   @Override\n   public long get(int index) {\n     return vector.get(index - (int) indexOffset);\n@@ -202,7 +195,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getLongValue());\n         }\n-\n         break;\n       }\n \n@@ -212,7 +204,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n         break;\n       }\n \n@@ -312,10 +303,8 @@ public class IntLongVectorStorage extends IntLongStorage {\n \n   @Override\n   public IntLongVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n-      return new IntLongVectorStorage(VFactory\n-          .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n-              vector.getStorage().getValues()), indexOffset);\n+    if (isSparse()) {\n+      return new IntLongVectorStorage(VFactory.sortedLongVector(vector.getDim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n@@ -339,10 +328,10 @@ public class IntLongVectorStorage extends IntLongStorage {\n   }\n \n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (keyType != KeyType.INT) {\n-      throw new UnsupportedOperationException(\n-          this.getClass().getName() + \" only support int type index now\");\n+      throw new UnsupportedOperationException(this.getClass().getName() + \" only support int type index now\");\n     }\n \n     if (func != null) {\n@@ -355,4 +344,5 @@ public class IntLongVectorStorage extends IntLongStorage {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}