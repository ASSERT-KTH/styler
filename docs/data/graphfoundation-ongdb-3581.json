{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3581",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "204",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "236",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "19",
                    "severity": "error",
                    "message": "'}' at column 19 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "19",
                    "severity": "error",
                    "message": "'}' at column 19 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "348",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "373",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "404",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "496",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "507",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "562",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3581/ClusterState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3581/ClusterState.java\nindex 79dcf2696c1..74be49286c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3581/ClusterState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3581/ClusterState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.cluster;\n \n import java.net.URI;\n@@ -51,562 +52,550 @@ import static org.neo4j.helpers.collection.Iterables.count;\n  */\n public enum ClusterState implements State<ClusterContext, ClusterMessage>\n {\n-    start\n+  start\n+      {\n+        @Override\n+        public ClusterState handle(ClusterContext context, Message<ClusterMessage> message,\n+                                   MessageHolder outgoing)\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case addClusterListener:\n+            {\n+              context.addClusterListener(message.getPayload());\n+\n+              break;\n+            }\n+\n+            case removeClusterListener:\n+            {\n+              context.removeClusterListener(message.getPayload());\n+\n+              break;\n+            }\n+\n+            case create:\n+            {\n+              String name = message.getPayload();\n+              context.getLog(ClusterState.class).info(\"Creating cluster: \" + name);\n+              context.created(name);\n+              return entered;\n+            }\n+\n+            case join:\n+            {\n+              // Send configuration request to all instances\n+              Object[] args = message.getPayload();\n+              String name = (String) args[0];\n+              URI[] clusterInstanceUris = (URI[]) args[1];\n+              context.joining(name, Iterables.iterable(clusterInstanceUris));\n+              context.getLog(getClass())\n+                  .info(\"Trying to join with DISCOVERY header \" + context.generateDiscoveryHeader());\n+\n+              for (URI potentialClusterInstanceUri : clusterInstanceUris)\n+              {\n+                /*\n+                 * The DISCOVERY header is empty, since we haven't processed configurationRequests\n+                 * at all yet. However, we still send it out for consistency.\n+                 */\n+                outgoing.offer(to(ClusterMessage.configurationRequest,\n+                    potentialClusterInstanceUri,\n+                    new ClusterMessage.ConfigurationRequestState(context.getMyId(), context.boundAt()))\n+                    .setHeader(DISCOVERED, context.generateDiscoveryHeader()));\n+              }\n+              context.setTimeout(\"discovery\",\n+                  timeout(ClusterMessage.configurationTimeout, message,\n+                      new ClusterMessage.ConfigurationTimeoutState(\n+                          /*\n+                           * The time when this becomes relevant is if indeed there are\n+                           * other instances present in the configuration. If there aren't\n+                           * we won't wait for them anyway and only this delay prevents us\n+                           * from going ahead and creating the cluster. We still wait a bit\n+                           * though because even if we don't have them configured they still\n+                           * might contact us.\n+                           * If, on the other hand, we have some configured, then we won't\n+                           * startup anyway until half are available. So this delay doesn't\n+                           * enter into it anyway.\n+                           * In summary, this offers no upside if there are configured\n+                           * instances\n+                           * and causes unnecessary delay if we are supposed to go ahead and\n+                           * create the cluster.\n+                           */\n+                          1)));\n+              return discovery;\n+            }\n+\n+            default:\n+              break;\n+          }\n+          return this;\n+        }\n+      },\n+\n+  discovery\n+      {\n+        @Override\n+        public ClusterState handle(ClusterContext context, Message<ClusterMessage> message,\n+                                   MessageHolder outgoing) throws URISyntaxException\n+        {\n+          List<ClusterMessage.ConfigurationRequestState> discoveredInstances = context.getDiscoveredInstances();\n+          context.getLog(getClass()).info(format(\"Discovered instances are %s\", discoveredInstances));\n+          switch (message.getMessageType())\n+          {\n+            case configurationResponse:\n             {\n-                @Override\n-                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n-                                           MessageHolder outgoing )\n+              context.cancelTimeout(\"discovery\");\n+\n+              ClusterMessage.ConfigurationResponseState state = message.getPayload();\n+\n+              context.getLog(ClusterState.class).info(\"Joining cluster \" + state.getClusterName());\n+              if (!context.getConfiguration().getName().equals(state.getClusterName()))\n+              {\n+                context.getLog(ClusterState.class).warn(\"Joined cluster name is different than \" +\n+                    \"the one configured. Expected \" + context.getConfiguration().getName() +\n+                    \", got \" + state.getClusterName() + \".\");\n+              }\n+\n+              HashMap<InstanceId, URI> memberList = new HashMap<>(state.getMembers());\n+              context.discoveredLastReceivedInstanceId(state.getLatestReceivedInstanceId().getId());\n+\n+              context.acquiredConfiguration(memberList, state.getRoles(), state.getFailedMembers());\n+\n+              if (!memberList.containsKey(context.getMyId()) ||\n+                  !memberList.get(context.getMyId()).equals(context.boundAt()))\n+              {\n+                context.getLog(ClusterState.class).info(format(\"%s joining:%s, last delivered:%d\",\n+                    context.getMyId().toString(), context.getConfiguration().toString(),\n+                    state.getLatestReceivedInstanceId().getId()));\n+\n+                ClusterMessage.ConfigurationChangeState newState = new ClusterMessage.ConfigurationChangeState();\n+                newState.join(context.getMyId(), context.boundAt());\n+\n+                // Let the coordinator propose this if possible\n+                InstanceId coordinator = state.getRoles().get(ClusterConfiguration.COORDINATOR);\n+                if (coordinator != null)\n                 {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case addClusterListener:\n-                        {\n-                            context.addClusterListener( message.getPayload() );\n-\n-                            break;\n-                        }\n-\n-                        case removeClusterListener:\n-                        {\n-                            context.removeClusterListener( message.getPayload() );\n-\n-                            break;\n-                        }\n-\n-                        case create:\n-                        {\n-                            String name = message.getPayload();\n-                            context.getLog( ClusterState.class ).info( \"Creating cluster: \" + name );\n-                            context.created( name );\n-                            return entered;\n-                        }\n-\n-                        case join:\n-                        {\n-                            // Send configuration request to all instances\n-                            Object[] args = message.getPayload();\n-                            String name = (String) args[0];\n-                            URI[] clusterInstanceUris = (URI[]) args[1];\n-                            context.joining( name, Iterables.iterable( clusterInstanceUris ) );\n-                            context.getLog( getClass() )\n-                                    .info( \"Trying to join with DISCOVERY header \" + context.generateDiscoveryHeader() );\n-\n-                            for ( URI potentialClusterInstanceUri : clusterInstanceUris )\n-                            {\n-                                /*\n-                                 * The DISCOVERY header is empty, since we haven't processed configurationRequests\n-                                 * at all yet. However, we still send it out for consistency.\n-                                 */\n-                                outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                        potentialClusterInstanceUri,\n-                                        new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) )\n-                                        .setHeader( DISCOVERED, context.generateDiscoveryHeader() ) );\n-                            }\n-                            context.setTimeout( \"discovery\",\n-                                    timeout( ClusterMessage.configurationTimeout, message,\n-                                            new ClusterMessage.ConfigurationTimeoutState(\n-                                                    /*\n-                                                     * The time when this becomes relevant is if indeed there are\n-                                                     * other instances present in the configuration. If there aren't\n-                                                     * we won't wait for them anyway and only this delay prevents us\n-                                                     * from going ahead and creating the cluster. We still wait a bit\n-                                                     * though because even if we don't have them configured they still\n-                                                     * might contact us.\n-                                                     * If, on the other hand, we have some configured, then we won't\n-                                                     * startup anyway until half are available. So this delay doesn't\n-                                                     * enter into it anyway.\n-                                                     * In summary, this offers no upside if there are configured\n-                                                     * instances\n-                                                     * and causes unnecessary delay if we are supposed to go ahead and\n-                                                     * create the cluster.\n-                                                     */\n-                                                    1 ) ) );\n-                            return discovery;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n-                    return this;\n+                  URI coordinatorUri = context.getConfiguration().getUriForId(coordinator);\n+                  outgoing.offer(to(ProposerMessage.propose, coordinatorUri, newState));\n+                } else\n+                {\n+                  outgoing.offer(to(ProposerMessage.propose, new URI(message.getHeader(\n+                      Message.HEADER_FROM)), newState));\n                 }\n-            },\n \n-    discovery\n+                context.getLog(ClusterState.class).debug(\"Setup join timeout for \" + message\n+                    .getHeader(Message.HEADER_CONVERSATION_ID));\n+                context.setTimeout(\"join\", timeout(ClusterMessage.joiningTimeout, message,\n+                    new URI(message.getHeader(Message.HEADER_FROM))));\n+\n+                return joining;\n+              } else\n+              {\n+                // Already in (probably due to crash of this server previously), go to entered state\n+                context.joined();\n+                outgoing.offer(internal(ClusterMessage.joinResponse, context.getConfiguration()));\n+\n+                return entered;\n+              }\n+            }\n+\n+            case configurationTimeout:\n             {\n-                @Override\n-                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n-                                           MessageHolder outgoing ) throws URISyntaxException\n+              if (context.hasJoinBeenDenied())\n+              {\n+                outgoing.offer(internal(ClusterMessage.joinFailure,\n+                    new ClusterEntryDeniedException(context.getMyId(),\n+                        context.getJoinDeniedConfigurationResponseState())));\n+                return start;\n+              }\n+              ClusterMessage.ConfigurationTimeoutState state = message.getPayload();\n+              if (state.getRemainingPings() > 0)\n+              {\n+                context.getLog(getClass()).info(format(\"Trying to join with DISCOVERY header %s\",\n+                    context.generateDiscoveryHeader()));\n+                // Send out requests again\n+                for (URI potentialClusterInstanceUri : context.getJoiningInstances())\n+                {\n+                  outgoing.offer(to(ClusterMessage.configurationRequest,\n+                      potentialClusterInstanceUri,\n+                      new ClusterMessage.ConfigurationRequestState(\n+                          context.getMyId(), context.boundAt()))\n+                      .setHeader(DISCOVERED, context.generateDiscoveryHeader()));\n+                }\n+                context.setTimeout(\"join\",\n+                    timeout(ClusterMessage.configurationTimeout, message,\n+                        new ClusterMessage.ConfigurationTimeoutState(\n+                            state.getRemainingPings() - 1)));\n+              } else\n+              {\n+                /*\n+                 * No configuration responses. Check if we picked up any other instances' requests during this phase.\n+                 * If we did, or we are the only instance in the configuration we can go ahead and try to start the\n+                 * cluster.\n+                 */\n+                if (!discoveredInstances.isEmpty() || count(context.getJoiningInstances()) == 1)\n                 {\n-                    List<ClusterMessage.ConfigurationRequestState> discoveredInstances = context.getDiscoveredInstances();\n-                    context.getLog( getClass() ).info( format( \"Discovered instances are %s\", discoveredInstances ) );\n-                    switch ( message.getMessageType() )\n+                  Collections.sort(discoveredInstances);\n+                  /*\n+                   * The assumption here is that the lowest in the list of discovered instances\n+                   * will create the cluster. Keep in mind that this is run on all instances so\n+                   * everyone will pick the same one.\n+                   * If the one picked up is configured to not init a cluster then the timeout\n+                   * set in else{} will take care of that.\n+                   * We also start the cluster if we are the only configured instance. joiningInstances\n+                   * does not contain us, ever.\n+                   */\n+                  ClusterMessage.ConfigurationRequestState ourRequestState =\n+                      new ClusterMessage.ConfigurationRequestState(context.getMyId(), context.boundAt());\n+                  // No one to join with\n+                  boolean imAlone =\n+                      count(context.getJoiningInstances()) == 1\n+                          && discoveredInstances.contains(ourRequestState)\n+                          && discoveredInstances.size() == 1;\n+                  // Enough instances discovered (half or more - i don't count myself here)\n+                  boolean haveDiscoveredMajority =\n+                      discoveredInstances.size() >= Iterables.count(context.getJoiningInstances());\n+                  // I am supposed to create the cluster (i am before the first in the list of the discovered instances)\n+                  boolean wantToStartCluster =\n+                      !discoveredInstances.isEmpty()\n+                          && discoveredInstances.get(0).getJoiningId().compareTo(context.getMyId()) >= 0;\n+                  if (imAlone || haveDiscoveredMajority && wantToStartCluster)\n+                  {\n+                    discoveredInstances.clear();\n+\n+                    // I'm supposed to create the cluster - fail the join\n+                    outgoing.offer(internal(ClusterMessage.joinFailure,\n+                        new TimeoutException(\n+                            \"Join failed, timeout waiting for configuration\")));\n+                    return start;\n+                  } else\n+                  {\n+                    discoveredInstances.clear();\n+                    context.getLog(getClass()).info(format(\n+                        \"Trying to join with DISCOVERY header %s\",\n+                        context.generateDiscoveryHeader()));\n+                    // Someone else is supposed to create the cluster - restart the join discovery\n+                    for (URI potentialClusterInstanceUri : context.getJoiningInstances())\n                     {\n-                        case configurationResponse:\n-                        {\n-                            context.cancelTimeout( \"discovery\" );\n-\n-                            ClusterMessage.ConfigurationResponseState state = message.getPayload();\n-\n-                            context.getLog( ClusterState.class ).info( \"Joining cluster \" + state.getClusterName() );\n-                            if ( !context.getConfiguration().getName().equals( state.getClusterName() ) )\n-                            {\n-                                context.getLog( ClusterState.class ).warn( \"Joined cluster name is different than \" +\n-                                        \"the one configured. Expected \" + context.getConfiguration().getName() +\n-                                        \", got \" + state.getClusterName() + \".\" );\n-                            }\n-\n-                            HashMap<InstanceId, URI> memberList = new HashMap<>( state.getMembers() );\n-                            context.discoveredLastReceivedInstanceId( state.getLatestReceivedInstanceId().getId() );\n-\n-                            context.acquiredConfiguration( memberList, state.getRoles(), state.getFailedMembers() );\n-\n-                            if ( !memberList.containsKey( context.getMyId() ) ||\n-                                    !memberList.get( context.getMyId() ).equals( context.boundAt() ) )\n-                            {\n-                                context.getLog( ClusterState.class ).info( format( \"%s joining:%s, last delivered:%d\",\n-                                        context.getMyId().toString(), context.getConfiguration().toString(),\n-                                        state.getLatestReceivedInstanceId().getId() ) );\n-\n-                                ClusterMessage.ConfigurationChangeState newState = new ClusterMessage.ConfigurationChangeState();\n-                                newState.join(context.getMyId(), context.boundAt());\n-\n-                                // Let the coordinator propose this if possible\n-                                InstanceId coordinator = state.getRoles().get( ClusterConfiguration.COORDINATOR );\n-                                if ( coordinator != null )\n-                                {\n-                                    URI coordinatorUri = context.getConfiguration().getUriForId( coordinator );\n-                                    outgoing.offer( to( ProposerMessage.propose, coordinatorUri, newState ) );\n-                                }\n-                                else\n-                                {\n-                                    outgoing.offer( to( ProposerMessage.propose, new URI( message.getHeader(\n-                                            Message.HEADER_FROM ) ), newState ) );\n-                                }\n-\n-                                context.getLog( ClusterState.class ).debug( \"Setup join timeout for \" + message\n-                                        .getHeader( Message.HEADER_CONVERSATION_ID ) );\n-                                context.setTimeout( \"join\", timeout( ClusterMessage.joiningTimeout, message,\n-                                        new URI( message.getHeader( Message.HEADER_FROM ) ) ) );\n-\n-                                return joining;\n-                            }\n-                            else\n-                            {\n-                                // Already in (probably due to crash of this server previously), go to entered state\n-                                context.joined();\n-                                outgoing.offer( internal( ClusterMessage.joinResponse, context.getConfiguration() ) );\n-\n-                                return entered;\n-                            }\n-                        }\n-\n-                        case configurationTimeout:\n-                        {\n-                            if ( context.hasJoinBeenDenied() )\n-                            {\n-                                outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                        new ClusterEntryDeniedException( context.getMyId(),\n-                                                context.getJoinDeniedConfigurationResponseState() ) ) );\n-                                return start;\n-                            }\n-                            ClusterMessage.ConfigurationTimeoutState state = message.getPayload();\n-                            if ( state.getRemainingPings() > 0 )\n-                            {\n-                                context.getLog( getClass() ).info( format( \"Trying to join with DISCOVERY header %s\",\n-                                        context.generateDiscoveryHeader() ) );\n-                                // Send out requests again\n-                                for ( URI potentialClusterInstanceUri : context.getJoiningInstances() )\n-                                {\n-                                    outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                            potentialClusterInstanceUri,\n-                                            new ClusterMessage.ConfigurationRequestState(\n-                                                    context.getMyId(), context.boundAt() ) )\n-                                            .setHeader( DISCOVERED, context.generateDiscoveryHeader() ) );\n-                                }\n-                                context.setTimeout( \"join\",\n-                                        timeout( ClusterMessage.configurationTimeout, message,\n-                                                new ClusterMessage.ConfigurationTimeoutState(\n-                                                        state.getRemainingPings() - 1 ) ) );\n-                            }\n-                            else\n-                            {\n-                                /*\n-                                 * No configuration responses. Check if we picked up any other instances' requests during this phase.\n-                                 * If we did, or we are the only instance in the configuration we can go ahead and try to start the\n-                                 * cluster.\n-                                 */\n-                                if ( !discoveredInstances.isEmpty() || count( context.getJoiningInstances() ) == 1 )\n-                                {\n-                                    Collections.sort( discoveredInstances );\n-                                    /*\n-                                     * The assumption here is that the lowest in the list of discovered instances\n-                                     * will create the cluster. Keep in mind that this is run on all instances so\n-                                     * everyone will pick the same one.\n-                                     * If the one picked up is configured to not init a cluster then the timeout\n-                                     * set in else{} will take care of that.\n-                                     * We also start the cluster if we are the only configured instance. joiningInstances\n-                                     * does not contain us, ever.\n-                                     */\n-                                    ClusterMessage.ConfigurationRequestState ourRequestState =\n-                                            new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() );\n-                                    // No one to join with\n-                                    boolean imAlone =\n-                                            count(context.getJoiningInstances()) == 1\n-                                            && discoveredInstances.contains( ourRequestState )\n-                                            && discoveredInstances.size() == 1;\n-                                    // Enough instances discovered (half or more - i don't count myself here)\n-                                    boolean haveDiscoveredMajority =\n-                                            discoveredInstances.size() >= Iterables.count( context.getJoiningInstances() );\n-                                    // I am supposed to create the cluster (i am before the first in the list of the discovered instances)\n-                                    boolean wantToStartCluster =\n-                                            !discoveredInstances.isEmpty()\n-                                            && discoveredInstances.get( 0 ).getJoiningId().compareTo(context.getMyId() ) >= 0;\n-                                    if ( imAlone || haveDiscoveredMajority && wantToStartCluster )\n-                                    {\n-                                        discoveredInstances.clear();\n-\n-                                        // I'm supposed to create the cluster - fail the join\n-                                        outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                                new TimeoutException(\n-                                                        \"Join failed, timeout waiting for configuration\" ) ) );\n-                                        return start;\n-                                    }\n-                                    else\n-                                    {\n-                                        discoveredInstances.clear();\n-                                        context.getLog( getClass() ).info( format(\n-                                                \"Trying to join with DISCOVERY header %s\",\n-                                                context.generateDiscoveryHeader() ) );\n-                                        // Someone else is supposed to create the cluster - restart the join discovery\n-                                        for ( URI potentialClusterInstanceUri : context.getJoiningInstances() )\n-                                        {\n-                                            outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                                    potentialClusterInstanceUri,\n-                                                    new ClusterMessage.ConfigurationRequestState( context.getMyId(),\n-                                                            context.boundAt() ) )\n-                                                    .setHeader( DISCOVERED, context.generateDiscoveryHeader() ));\n-                                        }\n-                                        context.setTimeout( \"discovery\",\n-                                                timeout( ClusterMessage.configurationTimeout, message,\n-                                                        new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n-                                    }\n-                                }\n-                                else\n-                                {\n-                                     context.setTimeout( \"join\",\n-                                             timeout( ClusterMessage.configurationTimeout, message,\n-                                                     new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n-                                }\n-                            }\n-\n-                            return this;\n-                        }\n-\n-                        case configurationRequest:\n-                        {\n-                            // We're listening for existing clusters, but if all instances start up at the same time\n-                            // and look for each other, this allows us to pick that up\n-                            ClusterMessage.ConfigurationRequestState configurationRequested = message.getPayload();\n-                            configurationRequested = new ClusterMessage.ConfigurationRequestState(\n-                                    configurationRequested.getJoiningId(),\n-                                    URI.create( message.getHeader( Message.HEADER_FROM ) ) );\n-                            // Make a note that this instance contacted us.\n-                            context.addContactingInstance( configurationRequested, message.getHeader( DISCOVERED, \"\" ) );\n-                            context.getLog( getClass() ).info( format( \"Received configuration request %s and \" +\n-                                    \"the header was %s\", configurationRequested, message.getHeader( DISCOVERED, \"\" ) ) );\n-\n-                            if ( !discoveredInstances.contains( configurationRequested ) )\n-                            {\n-                                for ( ClusterMessage.ConfigurationRequestState discoveredInstance :\n-                                        discoveredInstances )\n-                                {\n-                                    if ( discoveredInstance.getJoiningId().equals( configurationRequested.getJoiningId() ) )\n-                                    {\n-                                        // we are done\n-                                        outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                                new IllegalStateException( format(\n-                                                        \"Failed to join cluster because I saw two instances with the \" +\n-                                                                \"same ServerId. One is %s. The other is %s\",\n-                                                        discoveredInstance, configurationRequested ) ) ) );\n-                                        return start;\n-                                    }\n-                                }\n-                                if ( context.shouldFilterContactingInstances() )\n-                                {\n-                                    if ( context.haveWeContactedInstance( configurationRequested ) )\n-                                    {\n-                                        context.getLog( getClass() ).info( format( \"%s had header %s which \" +\n-                                                \"contains us. This means we've contacted them and they are in our \" +\n-                                                \"initial hosts.\", configurationRequested, message.getHeader( DISCOVERED, \"\" ) ) );\n-\n-                                        discoveredInstances.add( configurationRequested );\n-                                    }\n-                                    else\n-                                    {\n-                                        context.getLog( getClass() ).warn(\n-                                                format( \"joining instance %s was not in %s, i will not consider it \" +\n-                                                                \"for \" +\n-                                                                \"purposes of cluster creation\",\n-                                                        configurationRequested.getJoiningUri(),\n-                                                        context.getJoiningInstances() ) );\n-                                    }\n-                                }\n-                                else\n-                                {\n-                                    discoveredInstances.add( configurationRequested );\n-                                }\n-                            }\n-                            break;\n-                        }\n-\n-                        case joinDenied:\n-                        {\n-                            context.joinDenied( message.getPayload() );\n-                            return this;\n-                        }\n-\n-                        default:\n-                            break;\n+                      outgoing.offer(to(ClusterMessage.configurationRequest,\n+                          potentialClusterInstanceUri,\n+                          new ClusterMessage.ConfigurationRequestState(context.getMyId(),\n+                              context.boundAt()))\n+                          .setHeader(DISCOVERED, context.generateDiscoveryHeader()));\n                     }\n-\n-                    return this;\n+                    context.setTimeout(\"discovery\",\n+                        timeout(ClusterMessage.configurationTimeout, message,\n+                            new ClusterMessage.ConfigurationTimeoutState(4)));\n+                  }\n+                } else\n+                {\n+                  context.setTimeout(\"join\",\n+                      timeout(ClusterMessage.configurationTimeout, message,\n+                          new ClusterMessage.ConfigurationTimeoutState(4)));\n                 }\n-            },\n+              }\n \n-    joining\n+              return this;\n+            }\n+\n+            case configurationRequest:\n             {\n-                @Override\n-                public ClusterState handle( ClusterContext context,\n-                                           Message<ClusterMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+              // We're listening for existing clusters, but if all instances start up at the same time\n+              // and look for each other, this allows us to pick that up\n+              ClusterMessage.ConfigurationRequestState configurationRequested = message.getPayload();\n+              configurationRequested = new ClusterMessage.ConfigurationRequestState(\n+                  configurationRequested.getJoiningId(),\n+                  URI.create(message.getHeader(Message.HEADER_FROM)));\n+              // Make a note that this instance contacted us.\n+              context.addContactingInstance(configurationRequested, message.getHeader(DISCOVERED, \"\"));\n+              context.getLog(getClass()).info(format(\"Received configuration request %s and \" +\n+                  \"the header was %s\", configurationRequested, message.getHeader(DISCOVERED, \"\")));\n+\n+              if (!discoveredInstances.contains(configurationRequested))\n+              {\n+                for (ClusterMessage.ConfigurationRequestState discoveredInstance :\n+                    discoveredInstances)\n                 {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case configurationChanged:\n-                        {\n-                            ClusterMessage.ConfigurationChangeState state = message.getPayload();\n-\n-                            if ( context.getMyId().equals( state.getJoin() ) )\n-                            {\n-                                context.cancelTimeout( \"join\" );\n-\n-                                context.joined();\n-                                outgoing.offer( message.copyHeadersTo(\n-                                        internal( ClusterMessage.joinResponse, context.getConfiguration() ) ) );\n-                                return entered;\n-                            }\n-                            else\n-                            {\n-                                state.apply( context );\n-                                return this;\n-                            }\n-                        }\n-\n-                        case joiningTimeout:\n-                        {\n-                            context.getLog( ClusterState.class ).info( \"Join timeout for \" + message.getHeader(\n-                                    Message.HEADER_CONVERSATION_ID ) );\n-\n-                            if ( context.hasJoinBeenDenied() )\n-                            {\n-                                outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                    new ClusterEntryDeniedException( context.getMyId(),\n-                                            context.getJoinDeniedConfigurationResponseState() ) ) );\n-                                return start;\n-                            }\n-\n-                            // Go back to requesting configurations from potential members\n-                            for ( URI potentialClusterInstanceUri : context.getJoiningInstances() )\n-                            {\n-                                outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                        potentialClusterInstanceUri,\n-                                        new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) )\n-                                        .setHeader( DISCOVERED, context.generateDiscoveryHeader() ));\n-                            }\n-                            context.setTimeout( \"discovery\",\n-                                    timeout( ClusterMessage.configurationTimeout, message,\n-                                            new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n-\n-                            return discovery;\n-                        }\n-\n-                        case joinFailure:\n-                        {\n-                            // This causes an exception from the join() method\n-                            return start;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n-\n-                    return this;\n+                  if (discoveredInstance.getJoiningId().equals(configurationRequested.getJoiningId()))\n+                  {\n+                    // we are done\n+                    outgoing.offer(internal(ClusterMessage.joinFailure,\n+                        new IllegalStateException(format(\n+                            \"Failed to join cluster because I saw two instances with the \" +\n+                                \"same ServerId. One is %s. The other is %s\",\n+                            discoveredInstance, configurationRequested))));\n+                    return start;\n+                  }\n                 }\n-            },\n+                if (context.shouldFilterContactingInstances())\n+                {\n+                  if (context.haveWeContactedInstance(configurationRequested))\n+                  {\n+                    context.getLog(getClass()).info(format(\"%s had header %s which \" +\n+                        \"contains us. This means we've contacted them and they are in our \" +\n+                        \"initial hosts.\", configurationRequested, message.getHeader(DISCOVERED, \"\")));\n+\n+                    discoveredInstances.add(configurationRequested);\n+                  } else\n+                  {\n+                    context.getLog(getClass()).warn(\n+                        format(\"joining instance %s was not in %s, i will not consider it \" +\n+                                \"for \" +\n+                                \"purposes of cluster creation\",\n+                            configurationRequested.getJoiningUri(),\n+                            context.getJoiningInstances()));\n+                  }\n+                } else\n+                {\n+                  discoveredInstances.add(configurationRequested);\n+                }\n+              }\n+              break;\n+            }\n \n-    entered\n+            case joinDenied:\n             {\n-                @Override\n-                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n-                                           MessageHolder outgoing )\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case addClusterListener:\n-                        {\n-                            context.addClusterListener( message.getPayload() );\n-\n-                            break;\n-                        }\n-\n-                        case removeClusterListener:\n-                        {\n-                            context.removeClusterListener( message.getPayload() );\n-\n-                            break;\n-                        }\n-\n-                        case configurationRequest:\n-                        {\n-                            ClusterMessage.ConfigurationRequestState request = message.getPayload();\n-                            request = new ClusterMessage.ConfigurationRequestState( request.getJoiningId(),\n-                                    URI.create( message.getHeader( Message.HEADER_FROM ) ) );\n-\n-                            InstanceId joiningId = request.getJoiningId();\n-                            URI joiningUri = request.getJoiningUri();\n-                            boolean isInCluster = context.getMembers().containsKey( joiningId );\n-                            boolean isCurrentlyAlive = context.isCurrentlyAlive(joiningId);\n-                            boolean messageComesFromSameHost = request.getJoiningId().equals( context.getMyId() );\n-                            boolean otherInstanceJoiningWithSameId = context.isInstanceJoiningFromDifferentUri(\n-                                    joiningId, joiningUri );\n-                            boolean isFromSameURIAsTheOneWeAlreadyKnow = context.getUriForId( joiningId ) != null &&\n-                                    context.getUriForId( joiningId ).equals( joiningUri );\n-\n-                            boolean somethingIsWrong =\n-                                    ( isInCluster && !messageComesFromSameHost && isCurrentlyAlive && !isFromSameURIAsTheOneWeAlreadyKnow )\n-                                            || otherInstanceJoiningWithSameId ;\n-\n-                            if ( somethingIsWrong )\n-                            {\n-                                if ( otherInstanceJoiningWithSameId )\n-                                {\n-                                    context.getLog( ClusterState.class ).info( format( \"Denying entry to instance %s\" +\n-                                            \" because another instance is currently joining with the same id.\",\n-                                            joiningId ) );\n-                                }\n-                                else\n-                                {\n-                                    context.getLog( ClusterState.class ).info( format( \"Denying entry to \" +\n-                                            \"instance %s because that instance is already in the cluster.\", joiningId ) );\n-                                }\n-                                outgoing.offer( message.copyHeadersTo( respond( ClusterMessage.joinDenied, message,\n-                                        new ClusterMessage.ConfigurationResponseState( context.getConfiguration()\n-                                                .getRoles(), context.getConfiguration().getMembers(),\n-                                                new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(\n-                                                        context.getLastDeliveredInstanceId() ),\n-                                                context.getFailedInstances(),\n-                                                context.getConfiguration().getName() ) ) ) );\n-                            }\n-                            else\n-                            {\n-                                context.instanceIsJoining(joiningId, joiningUri );\n-\n-                                outgoing.offer( message.copyHeadersTo( respond( ClusterMessage.configurationResponse, message,\n-                                        new ClusterMessage.ConfigurationResponseState( context.getConfiguration()\n-                                                .getRoles(), context.getConfiguration().getMembers(),\n-                                                new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(\n-                                                        context.getLastDeliveredInstanceId() ),\n-                                                context.getFailedInstances(),\n-                                                context.getConfiguration().getName() ) ) ) );\n-                            }\n-                            break;\n-                        }\n-\n-                        case configurationChanged:\n-                        {\n-                            ClusterMessage.ConfigurationChangeState state = message.getPayload();\n-                            state.apply( context );\n-                            break;\n-                        }\n-\n-                        case leave:\n-                        {\n-                            List<URI> nodeList = new ArrayList<>( context.getConfiguration().getMemberURIs() );\n-                            if ( nodeList.size() == 1 )\n-                            {\n-                                context.getLog( ClusterState.class ).info( format( \"Shutting down cluster: %s\",\n-                                        context.getConfiguration().getName() ) );\n-                                context.left();\n-\n-                                return start;\n-\n-                            }\n-                            else\n-                            {\n-                                context.getLog( ClusterState.class ).info( format( \"Leaving:%s\", nodeList ) );\n-\n-                                ClusterMessage.ConfigurationChangeState newState = new ClusterMessage\n-                                        .ConfigurationChangeState();\n-                                newState.leave( context.getMyId() );\n-\n-                                outgoing.offer( internal( AtomicBroadcastMessage.broadcast, newState ) );\n-                                context.setTimeout( \"leave\", timeout( ClusterMessage.leaveTimedout,\n-                                        message ) );\n-\n-                                return leaving;\n-                            }\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n+              context.joinDenied(message.getPayload());\n+              return this;\n+            }\n \n-                    return this;\n-                }\n-            },\n+            default:\n+              break;\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  joining\n+      {\n+        @Override\n+        public ClusterState handle(ClusterContext context,\n+                                   Message<ClusterMessage> message,\n+                                   MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case configurationChanged:\n+            {\n+              ClusterMessage.ConfigurationChangeState state = message.getPayload();\n+\n+              if (context.getMyId().equals(state.getJoin()))\n+              {\n+                context.cancelTimeout(\"join\");\n+\n+                context.joined();\n+                outgoing.offer(message.copyHeadersTo(\n+                    internal(ClusterMessage.joinResponse, context.getConfiguration())));\n+                return entered;\n+              } else\n+              {\n+                state.apply(context);\n+                return this;\n+              }\n+            }\n \n-    leaving\n+            case joiningTimeout:\n             {\n-                @Override\n-                public ClusterState handle( ClusterContext context,\n-                                           Message<ClusterMessage> message,\n-                                           MessageHolder outgoing\n-                )\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case configurationChanged:\n-                        {\n-                            ClusterMessage.ConfigurationChangeState state = message.getPayload();\n-                            if ( state.isLeaving( context.getMyId() ) )\n-                            {\n-                                context.cancelTimeout( \"leave\" );\n-\n-                                context.left();\n-\n-                                return start;\n-                            }\n-                            else\n-                            {\n-                                state.apply( context );\n-                                return leaving;\n-                            }\n-                        }\n-\n-                        case leaveTimedout:\n-                        {\n-                            context.getLog( ClusterState.class ).warn( \"Failed to leave. Cluster may consider this\" +\n-                                    \" instance still a member\" );\n-                            context.left();\n-                            return start;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n+              context.getLog(ClusterState.class).info(\"Join timeout for \" + message.getHeader(\n+                  Message.HEADER_CONVERSATION_ID));\n+\n+              if (context.hasJoinBeenDenied())\n+              {\n+                outgoing.offer(internal(ClusterMessage.joinFailure,\n+                    new ClusterEntryDeniedException(context.getMyId(),\n+                        context.getJoinDeniedConfigurationResponseState())));\n+                return start;\n+              }\n+\n+              // Go back to requesting configurations from potential members\n+              for (URI potentialClusterInstanceUri : context.getJoiningInstances())\n+              {\n+                outgoing.offer(to(ClusterMessage.configurationRequest,\n+                    potentialClusterInstanceUri,\n+                    new ClusterMessage.ConfigurationRequestState(context.getMyId(), context.boundAt()))\n+                    .setHeader(DISCOVERED, context.generateDiscoveryHeader()));\n+              }\n+              context.setTimeout(\"discovery\",\n+                  timeout(ClusterMessage.configurationTimeout, message,\n+                      new ClusterMessage.ConfigurationTimeoutState(4)));\n+\n+              return discovery;\n+            }\n+\n+            case joinFailure:\n+            {\n+              // This causes an exception from the join() method\n+              return start;\n+            }\n+\n+            default:\n+              break;\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  entered\n+      {\n+        @Override\n+        public ClusterState handle(ClusterContext context, Message<ClusterMessage> message,\n+                                   MessageHolder outgoing)\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case addClusterListener:\n+            {\n+              context.addClusterListener(message.getPayload());\n+\n+              break;\n+            }\n \n-                    return this;\n+            case removeClusterListener:\n+            {\n+              context.removeClusterListener(message.getPayload());\n+\n+              break;\n+            }\n+\n+            case configurationRequest:\n+            {\n+              ClusterMessage.ConfigurationRequestState request = message.getPayload();\n+              request = new ClusterMessage.ConfigurationRequestState(request.getJoiningId(),\n+                  URI.create(message.getHeader(Message.HEADER_FROM)));\n+\n+              InstanceId joiningId = request.getJoiningId();\n+              URI joiningUri = request.getJoiningUri();\n+              boolean isInCluster = context.getMembers().containsKey(joiningId);\n+              boolean isCurrentlyAlive = context.isCurrentlyAlive(joiningId);\n+              boolean messageComesFromSameHost = request.getJoiningId().equals(context.getMyId());\n+              boolean otherInstanceJoiningWithSameId = context.isInstanceJoiningFromDifferentUri(\n+                  joiningId, joiningUri);\n+              boolean isFromSameURIAsTheOneWeAlreadyKnow = context.getUriForId(joiningId) != null &&\n+                  context.getUriForId(joiningId).equals(joiningUri);\n+\n+              boolean somethingIsWrong =\n+                  (isInCluster && !messageComesFromSameHost && isCurrentlyAlive && !isFromSameURIAsTheOneWeAlreadyKnow)\n+                      || otherInstanceJoiningWithSameId;\n+\n+              if (somethingIsWrong)\n+              {\n+                if (otherInstanceJoiningWithSameId)\n+                {\n+                  context.getLog(ClusterState.class).info(format(\"Denying entry to instance %s\" +\n+                          \" because another instance is currently joining with the same id.\",\n+                      joiningId));\n+                } else\n+                {\n+                  context.getLog(ClusterState.class).info(format(\"Denying entry to \" +\n+                      \"instance %s because that instance is already in the cluster.\", joiningId));\n                 }\n+                outgoing.offer(message.copyHeadersTo(respond(ClusterMessage.joinDenied, message,\n+                    new ClusterMessage.ConfigurationResponseState(context.getConfiguration()\n+                        .getRoles(), context.getConfiguration().getMembers(),\n+                        new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(\n+                            context.getLastDeliveredInstanceId()),\n+                        context.getFailedInstances(),\n+                        context.getConfiguration().getName()))));\n+              } else\n+              {\n+                context.instanceIsJoining(joiningId, joiningUri);\n+\n+                outgoing.offer(message.copyHeadersTo(respond(ClusterMessage.configurationResponse, message,\n+                    new ClusterMessage.ConfigurationResponseState(context.getConfiguration()\n+                        .getRoles(), context.getConfiguration().getMembers(),\n+                        new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(\n+                            context.getLastDeliveredInstanceId()),\n+                        context.getFailedInstances(),\n+                        context.getConfiguration().getName()))));\n+              }\n+              break;\n+            }\n+\n+            case configurationChanged:\n+            {\n+              ClusterMessage.ConfigurationChangeState state = message.getPayload();\n+              state.apply(context);\n+              break;\n             }\n+\n+            case leave:\n+            {\n+              List<URI> nodeList = new ArrayList<>(context.getConfiguration().getMemberURIs());\n+              if (nodeList.size() == 1)\n+              {\n+                context.getLog(ClusterState.class).info(format(\"Shutting down cluster: %s\",\n+                    context.getConfiguration().getName()));\n+                context.left();\n+\n+                return start;\n+\n+              } else\n+              {\n+                context.getLog(ClusterState.class).info(format(\"Leaving:%s\", nodeList));\n+\n+                ClusterMessage.ConfigurationChangeState newState = new ClusterMessage\n+                    .ConfigurationChangeState();\n+                newState.leave(context.getMyId());\n+\n+                outgoing.offer(internal(AtomicBroadcastMessage.broadcast, newState));\n+                context.setTimeout(\"leave\", timeout(ClusterMessage.leaveTimedout,\n+                    message));\n+\n+                return leaving;\n+              }\n+            }\n+\n+            default:\n+              break;\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  leaving\n+      {\n+        @Override\n+        public ClusterState handle(ClusterContext context,\n+                                   Message<ClusterMessage> message,\n+                                   MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case configurationChanged:\n+            {\n+              ClusterMessage.ConfigurationChangeState state = message.getPayload();\n+              if (state.isLeaving(context.getMyId()))\n+              {\n+                context.cancelTimeout(\"leave\");\n+\n+                context.left();\n+\n+                return start;\n+              } else\n+              {\n+                state.apply(context);\n+                return leaving;\n+              }\n+            }\n+\n+            case leaveTimedout:\n+            {\n+              context.getLog(ClusterState.class).warn(\"Failed to leave. Cluster may consider this\" +\n+                  \" instance still a member\");\n+              context.left();\n+              return start;\n+            }\n+\n+            default:\n+              break;\n+          }\n+\n+          return this;\n+        }\n+      }\n }\n",
            "diff_size": 975
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "column": "136",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "265",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "273",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 290).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "281",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 263).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 261).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "337",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "345",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "389",
                    "column": "91",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "390",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "390",
                    "column": "135",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "395",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "399",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "401",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 428).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "406",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 407).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3581/ClusterState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3581/ClusterState.java\nindex 79dcf2696c1..6cb7c2df7a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3581/ClusterState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3581/ClusterState.java\n@@ -52,60 +52,48 @@ import static org.neo4j.helpers.collection.Iterables.count;\n public enum ClusterState implements State<ClusterContext, ClusterMessage>\n {\n     start\n-            {\n+{\n                 @Override\n-                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n-                                           MessageHolder outgoing )\n-                {\n+                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message, MessageHolder outgoing )\n+{\n                     switch ( message.getMessageType() )\n                     {\n-                        case addClusterListener:\n+case addClusterListener:\n                         {\n                             context.addClusterListener( message.getPayload() );\n-\n-                            break;\n+break;\n                         }\n-\n-                        case removeClusterListener:\n+    case removeClusterListener:\n                         {\n                             context.removeClusterListener( message.getPayload() );\n-\n-                            break;\n+break;\n                         }\n-\n-                        case create:\n+    case create:\n                         {\n                             String name = message.getPayload();\n                             context.getLog( ClusterState.class ).info( \"Creating cluster: \" + name );\n                             context.created( name );\n                             return entered;\n                         }\n-\n-                        case join:\n+    case join:\n                         {\n                             // Send configuration request to all instances\n                             Object[] args = message.getPayload();\n                             String name = (String) args[0];\n                             URI[] clusterInstanceUris = (URI[]) args[1];\n                             context.joining( name, Iterables.iterable( clusterInstanceUris ) );\n-                            context.getLog( getClass() )\n-                                    .info( \"Trying to join with DISCOVERY header \" + context.generateDiscoveryHeader() );\n-\n-                            for ( URI potentialClusterInstanceUri : clusterInstanceUris )\n+                            context.getLog( getClass() ).info( \"Trying to join with DISCOVERY header \" + context.generateDiscoveryHeader() );\n+for ( URI potentialClusterInstanceUri : clusterInstanceUris )\n                             {\n                                 /*\n                                  * The DISCOVERY header is empty, since we haven't processed configurationRequests\n                                  * at all yet. However, we still send it out for consistency.\n                                  */\n                                 outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                        potentialClusterInstanceUri,\n-                                        new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) )\n-                                        .setHeader( DISCOVERED, context.generateDiscoveryHeader() ) );\n+                                        potentialClusterInstanceUri, new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) ).setHeader( DISCOVERED, context.generateDiscoveryHeader() ) );\n                             }\n                             context.setTimeout( \"discovery\",\n-                                    timeout( ClusterMessage.configurationTimeout, message,\n-                                            new ClusterMessage.ConfigurationTimeoutState(\n-                                                    /*\n+                                    timeout( ClusterMessage.configurationTimeout, message, new ClusterMessage.ConfigurationTimeoutState(/*\n                                                      * The time when this becomes relevant is if indeed there are\n                                                      * other instances present in the configuration. If there aren't\n                                                      * we won't wait for them anyway and only this delay prevents us\n@@ -121,53 +109,41 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n                                                      * create the cluster.\n                                                      */\n                                                     1 ) ) );\n-                            return discovery;\n+return discovery;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n                     return this;\n                 }\n-            },\n-\n-    discovery\n-            {\n+            }, discovery\n+{\n                 @Override\n-                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n-                                           MessageHolder outgoing ) throws URISyntaxException\n-                {\n+                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message, MessageHolder outgoing ) throws URISyntaxException\n+{\n                     List<ClusterMessage.ConfigurationRequestState> discoveredInstances = context.getDiscoveredInstances();\n                     context.getLog( getClass() ).info( format( \"Discovered instances are %s\", discoveredInstances ) );\n                     switch ( message.getMessageType() )\n                     {\n-                        case configurationResponse:\n+case configurationResponse:\n                         {\n                             context.cancelTimeout( \"discovery\" );\n-\n-                            ClusterMessage.ConfigurationResponseState state = message.getPayload();\n-\n-                            context.getLog( ClusterState.class ).info( \"Joining cluster \" + state.getClusterName() );\n+ClusterMessage.ConfigurationResponseState state = message.getPayload();\n+context.getLog( ClusterState.class ).info( \"Joining cluster \" + state.getClusterName() );\n                             if ( !context.getConfiguration().getName().equals( state.getClusterName() ) )\n                             {\n-                                context.getLog( ClusterState.class ).warn( \"Joined cluster name is different than \" +\n-                                        \"the one configured. Expected \" + context.getConfiguration().getName() +\n-                                        \", got \" + state.getClusterName() + \".\" );\n+                                context.getLog( ClusterState.class ).warn( \"Joined cluster name is different than \" + \"the one configured. Expected \" + context.getConfiguration().getName() + \", got \" + state.getClusterName() + \".\" );\n                             }\n \n-                            HashMap<InstanceId, URI> memberList = new HashMap<>( state.getMembers() );\n+                            HashMap<InstanceId,URI> memberList = new HashMap<>( state.getMembers() );\n                             context.discoveredLastReceivedInstanceId( state.getLatestReceivedInstanceId().getId() );\n-\n-                            context.acquiredConfiguration( memberList, state.getRoles(), state.getFailedMembers() );\n-\n-                            if ( !memberList.containsKey( context.getMyId() ) ||\n+context.acquiredConfiguration( memberList, state.getRoles(), state.getFailedMembers() );\n+if ( !memberList.containsKey( context.getMyId() ) ||\n                                     !memberList.get( context.getMyId() ).equals( context.boundAt() ) )\n                             {\n                                 context.getLog( ClusterState.class ).info( format( \"%s joining:%s, last delivered:%d\",\n-                                        context.getMyId().toString(), context.getConfiguration().toString(),\n-                                        state.getLatestReceivedInstanceId().getId() ) );\n-\n-                                ClusterMessage.ConfigurationChangeState newState = new ClusterMessage.ConfigurationChangeState();\n+                                        context.getMyId().toString(), context.getConfiguration().toString(), state.getLatestReceivedInstanceId().getId() ) );\n+ClusterMessage.ConfigurationChangeState newState = new ClusterMessage.ConfigurationChangeState();\n                                 newState.join(context.getMyId(), context.boundAt());\n \n                                 // Let the coordinator propose this if possible\n@@ -179,24 +155,19 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n                                 }\n                                 else\n                                 {\n-                                    outgoing.offer( to( ProposerMessage.propose, new URI( message.getHeader(\n-                                            Message.HEADER_FROM ) ), newState ) );\n+                                    outgoing.offer( to( ProposerMessage.propose, new URI( message.getHeader( Message.HEADER_FROM ) ), newState ) );\n                                 }\n \n-                                context.getLog( ClusterState.class ).debug( \"Setup join timeout for \" + message\n-                                        .getHeader( Message.HEADER_CONVERSATION_ID ) );\n-                                context.setTimeout( \"join\", timeout( ClusterMessage.joiningTimeout, message,\n-                                        new URI( message.getHeader( Message.HEADER_FROM ) ) ) );\n-\n-                                return joining;\n+                                context.getLog( ClusterState.class ).debug( \"Setup join timeout for \" + message.getHeader( Message.HEADER_CONVERSATION_ID ) );\n+context.setTimeout( \"join\", timeout( ClusterMessage.joiningTimeout, message, new URI( message.getHeader( Message.HEADER_FROM ) ) ) );\n+return joining;\n                             }\n                             else\n                             {\n                                 // Already in (probably due to crash of this server previously), go to entered state\n                                 context.joined();\n                                 outgoing.offer( internal( ClusterMessage.joinResponse, context.getConfiguration() ) );\n-\n-                                return entered;\n+return entered;\n                             }\n                         }\n \n@@ -204,30 +175,23 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n                         {\n                             if ( context.hasJoinBeenDenied() )\n                             {\n-                                outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                        new ClusterEntryDeniedException( context.getMyId(),\n-                                                context.getJoinDeniedConfigurationResponseState() ) ) );\n-                                return start;\n+                                outgoing.offer( internal( ClusterMessage.joinFailure, new ClusterEntryDeniedException( context.getMyId(), context.getJoinDeniedConfigurationResponseState() ) ) );\n+return start;\n                             }\n                             ClusterMessage.ConfigurationTimeoutState state = message.getPayload();\n                             if ( state.getRemainingPings() > 0 )\n                             {\n                                 context.getLog( getClass() ).info( format( \"Trying to join with DISCOVERY header %s\",\n                                         context.generateDiscoveryHeader() ) );\n-                                // Send out requests again\n+    // Send out requests again\n                                 for ( URI potentialClusterInstanceUri : context.getJoiningInstances() )\n                                 {\n                                     outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                            potentialClusterInstanceUri,\n-                                            new ClusterMessage.ConfigurationRequestState(\n-                                                    context.getMyId(), context.boundAt() ) )\n-                                            .setHeader( DISCOVERED, context.generateDiscoveryHeader() ) );\n+                                            potentialClusterInstanceUri, new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) ).setHeader( DISCOVERED, context.generateDiscoveryHeader() ) );\n                                 }\n                                 context.setTimeout( \"join\",\n-                                        timeout( ClusterMessage.configurationTimeout, message,\n-                                                new ClusterMessage.ConfigurationTimeoutState(\n-                                                        state.getRemainingPings() - 1 ) ) );\n-                            }\n+                                        timeout( ClusterMessage.configurationTimeout, message, new ClusterMessage.ConfigurationTimeoutState( state.getRemainingPings() - 1 ) ) );\n+    }\n                             else\n                             {\n                                 /*\n@@ -247,109 +211,80 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n                                      * We also start the cluster if we are the only configured instance. joiningInstances\n                                      * does not contain us, ever.\n                                      */\n-                                    ClusterMessage.ConfigurationRequestState ourRequestState =\n-                                            new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() );\n-                                    // No one to join with\n-                                    boolean imAlone =\n-                                            count(context.getJoiningInstances()) == 1\n+                                    ClusterMessage.ConfigurationRequestState ourRequestState = new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() );\n+    // No one to join with\n+                                    boolean imAlone = count(context.getJoiningInstances()) == 1\n                                             && discoveredInstances.contains( ourRequestState )\n                                             && discoveredInstances.size() == 1;\n-                                    // Enough instances discovered (half or more - i don't count myself here)\n-                                    boolean haveDiscoveredMajority =\n-                                            discoveredInstances.size() >= Iterables.count( context.getJoiningInstances() );\n-                                    // I am supposed to create the cluster (i am before the first in the list of the discovered instances)\n+    // Enough instances discovered (half or more - i don't count myself here)\n+                                    boolean haveDiscoveredMajority = discoveredInstances.size() >= Iterables.count( context.getJoiningInstances() );\n+    // I am supposed to create the cluster (i am before the first in the list of the discovered instances)\n                                     boolean wantToStartCluster =\n                                             !discoveredInstances.isEmpty()\n                                             && discoveredInstances.get( 0 ).getJoiningId().compareTo(context.getMyId() ) >= 0;\n-                                    if ( imAlone || haveDiscoveredMajority && wantToStartCluster )\n+if ( imAlone || haveDiscoveredMajority && wantToStartCluster )\n                                     {\n                                         discoveredInstances.clear();\n \n                                         // I'm supposed to create the cluster - fail the join\n-                                        outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                                new TimeoutException(\n-                                                        \"Join failed, timeout waiting for configuration\" ) ) );\n-                                        return start;\n+                                        outgoing.offer( internal( ClusterMessage.joinFailure, new TimeoutException( \"Join failed, timeout waiting for configuration\" ) ) );\n+return start;\n                                     }\n                                     else\n                                     {\n                                         discoveredInstances.clear();\n-                                        context.getLog( getClass() ).info( format(\n-                                                \"Trying to join with DISCOVERY header %s\",\n+                                        context.getLog( getClass() ).info( format( \"Trying to join with DISCOVERY header %s\",\n                                                 context.generateDiscoveryHeader() ) );\n-                                        // Someone else is supposed to create the cluster - restart the join discovery\n+    // Someone else is supposed to create the cluster - restart the join discovery\n                                         for ( URI potentialClusterInstanceUri : context.getJoiningInstances() )\n                                         {\n                                             outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                                    potentialClusterInstanceUri,\n-                                                    new ClusterMessage.ConfigurationRequestState( context.getMyId(),\n-                                                            context.boundAt() ) )\n-                                                    .setHeader( DISCOVERED, context.generateDiscoveryHeader() ));\n+                                                    potentialClusterInstanceUri, new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) ).setHeader( DISCOVERED, context.generateDiscoveryHeader() ));\n                                         }\n                                         context.setTimeout( \"discovery\",\n-                                                timeout( ClusterMessage.configurationTimeout, message,\n-                                                        new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n-                                    }\n+                                                timeout( ClusterMessage.configurationTimeout, message, new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n+    }\n                                 }\n                                 else\n                                 {\n-                                     context.setTimeout( \"join\",\n-                                             timeout( ClusterMessage.configurationTimeout, message,\n-                                                     new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n-                                }\n+    context.setTimeout( \"join\",\n+                                             timeout( ClusterMessage.configurationTimeout, message, new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n+    }\n                             }\n \n                             return this;\n                         }\n-\n-                        case configurationRequest:\n+    case configurationRequest:\n                         {\n                             // We're listening for existing clusters, but if all instances start up at the same time\n                             // and look for each other, this allows us to pick that up\n                             ClusterMessage.ConfigurationRequestState configurationRequested = message.getPayload();\n-                            configurationRequested = new ClusterMessage.ConfigurationRequestState(\n-                                    configurationRequested.getJoiningId(),\n-                                    URI.create( message.getHeader( Message.HEADER_FROM ) ) );\n-                            // Make a note that this instance contacted us.\n+                            configurationRequested = new ClusterMessage.ConfigurationRequestState( configurationRequested.getJoiningId(), URI.create( message.getHeader( Message.HEADER_FROM ) ) );\n+    // Make a note that this instance contacted us.\n                             context.addContactingInstance( configurationRequested, message.getHeader( DISCOVERED, \"\" ) );\n-                            context.getLog( getClass() ).info( format( \"Received configuration request %s and \" +\n-                                    \"the header was %s\", configurationRequested, message.getHeader( DISCOVERED, \"\" ) ) );\n-\n-                            if ( !discoveredInstances.contains( configurationRequested ) )\n+                            context.getLog( getClass() ).info( format( \"Received configuration request %s and \" + \"the header was %s\", configurationRequested, message.getHeader( DISCOVERED, \"\" ) ) );\n+if ( !discoveredInstances.contains( configurationRequested ) )\n                             {\n-                                for ( ClusterMessage.ConfigurationRequestState discoveredInstance :\n-                                        discoveredInstances )\n+                                for ( ClusterMessage.ConfigurationRequestState discoveredInstance : discoveredInstances )\n                                 {\n                                     if ( discoveredInstance.getJoiningId().equals( configurationRequested.getJoiningId() ) )\n                                     {\n                                         // we are done\n-                                        outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                                new IllegalStateException( format(\n-                                                        \"Failed to join cluster because I saw two instances with the \" +\n-                                                                \"same ServerId. One is %s. The other is %s\",\n-                                                        discoveredInstance, configurationRequested ) ) ) );\n-                                        return start;\n+                                        outgoing.offer( internal( ClusterMessage.joinFailure, new IllegalStateException( format( \"Failed to join cluster because I saw two instances with the \" + \"same ServerId. One is %s. The other is %s\", discoveredInstance, configurationRequested ) ) ) );\n+return start;\n                                     }\n                                 }\n                                 if ( context.shouldFilterContactingInstances() )\n                                 {\n                                     if ( context.haveWeContactedInstance( configurationRequested ) )\n                                     {\n-                                        context.getLog( getClass() ).info( format( \"%s had header %s which \" +\n-                                                \"contains us. This means we've contacted them and they are in our \" +\n-                                                \"initial hosts.\", configurationRequested, message.getHeader( DISCOVERED, \"\" ) ) );\n-\n-                                        discoveredInstances.add( configurationRequested );\n+                                        context.getLog( getClass() ).info( format( \"%s had header %s which \" + \"contains us. This means we've contacted them and they are in our \" + \"initial hosts.\", configurationRequested, message.getHeader( DISCOVERED, \"\" ) ) );\n+discoveredInstances.add( configurationRequested );\n                                     }\n                                     else\n                                     {\n-                                        context.getLog( getClass() ).warn(\n-                                                format( \"joining instance %s was not in %s, i will not consider it \" +\n-                                                                \"for \" +\n-                                                                \"purposes of cluster creation\",\n-                                                        configurationRequested.getJoiningUri(),\n-                                                        context.getJoiningInstances() ) );\n-                                    }\n+                                        context.getLog( getClass() ).warn( format( \"joining instance %s was not in %s, i will not consider it \" + \"for \" + \"purposes of cluster creation\", configurationRequested.getJoiningUri(), context.getJoiningInstances() ) );\n+    }\n                                 }\n                                 else\n                                 {\n@@ -358,43 +293,34 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n                             }\n                             break;\n                         }\n-\n-                        case joinDenied:\n+    case joinDenied:\n                         {\n                             context.joinDenied( message.getPayload() );\n                             return this;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n-            },\n-\n-    joining\n-            {\n+            }, joining\n+{\n                 @Override\n-                public ClusterState handle( ClusterContext context,\n-                                           Message<ClusterMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case configurationChanged:\n+case configurationChanged:\n                         {\n                             ClusterMessage.ConfigurationChangeState state = message.getPayload();\n-\n-                            if ( context.getMyId().equals( state.getJoin() ) )\n+if ( context.getMyId().equals( state.getJoin() ) )\n                             {\n                                 context.cancelTimeout( \"join\" );\n-\n-                                context.joined();\n-                                outgoing.offer( message.copyHeadersTo(\n-                                        internal( ClusterMessage.joinResponse, context.getConfiguration() ) ) );\n-                                return entered;\n+context.joined();\n+                                outgoing.offer( message.copyHeadersTo( internal( ClusterMessage.joinResponse, context.getConfiguration() ) ) );\n+return entered;\n                             }\n                             else\n                             {\n@@ -405,187 +331,132 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n \n                         case joiningTimeout:\n                         {\n-                            context.getLog( ClusterState.class ).info( \"Join timeout for \" + message.getHeader(\n-                                    Message.HEADER_CONVERSATION_ID ) );\n-\n-                            if ( context.hasJoinBeenDenied() )\n+                            context.getLog( ClusterState.class ).info( \"Join timeout for \" + message.getHeader( Message.HEADER_CONVERSATION_ID ) );\n+if ( context.hasJoinBeenDenied() )\n                             {\n-                                outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                    new ClusterEntryDeniedException( context.getMyId(),\n-                                            context.getJoinDeniedConfigurationResponseState() ) ) );\n-                                return start;\n+                                outgoing.offer( internal( ClusterMessage.joinFailure, new ClusterEntryDeniedException( context.getMyId(), context.getJoinDeniedConfigurationResponseState() ) ) );\n+return start;\n                             }\n \n                             // Go back to requesting configurations from potential members\n                             for ( URI potentialClusterInstanceUri : context.getJoiningInstances() )\n                             {\n                                 outgoing.offer( to( ClusterMessage.configurationRequest,\n-                                        potentialClusterInstanceUri,\n-                                        new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) )\n-                                        .setHeader( DISCOVERED, context.generateDiscoveryHeader() ));\n+                                        potentialClusterInstanceUri, new ClusterMessage.ConfigurationRequestState( context.getMyId(), context.boundAt() ) ).setHeader( DISCOVERED, context.generateDiscoveryHeader() ));\n                             }\n                             context.setTimeout( \"discovery\",\n-                                    timeout( ClusterMessage.configurationTimeout, message,\n-                                            new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n-\n-                            return discovery;\n+                                    timeout( ClusterMessage.configurationTimeout, message, new ClusterMessage.ConfigurationTimeoutState( 4 ) ) );\n+return discovery;\n                         }\n-\n-                        case joinFailure:\n+    case joinFailure:\n                         {\n                             // This causes an exception from the join() method\n                             return start;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n-            },\n-\n-    entered\n-            {\n+            }, entered\n+{\n                 @Override\n-                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n-                                           MessageHolder outgoing )\n-                {\n+                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message, MessageHolder outgoing )\n+{\n                     switch ( message.getMessageType() )\n                     {\n-                        case addClusterListener:\n+case addClusterListener:\n                         {\n                             context.addClusterListener( message.getPayload() );\n-\n-                            break;\n+break;\n                         }\n-\n-                        case removeClusterListener:\n+    case removeClusterListener:\n                         {\n                             context.removeClusterListener( message.getPayload() );\n-\n-                            break;\n+break;\n                         }\n-\n-                        case configurationRequest:\n+    case configurationRequest:\n                         {\n                             ClusterMessage.ConfigurationRequestState request = message.getPayload();\n-                            request = new ClusterMessage.ConfigurationRequestState( request.getJoiningId(),\n-                                    URI.create( message.getHeader( Message.HEADER_FROM ) ) );\n-\n-                            InstanceId joiningId = request.getJoiningId();\n+                            request = new ClusterMessage.ConfigurationRequestState( request.getJoiningId(), URI.create( message.getHeader( Message.HEADER_FROM ) ) );\n+InstanceId joiningId = request.getJoiningId();\n                             URI joiningUri = request.getJoiningUri();\n                             boolean isInCluster = context.getMembers().containsKey( joiningId );\n                             boolean isCurrentlyAlive = context.isCurrentlyAlive(joiningId);\n                             boolean messageComesFromSameHost = request.getJoiningId().equals( context.getMyId() );\n-                            boolean otherInstanceJoiningWithSameId = context.isInstanceJoiningFromDifferentUri(\n-                                    joiningId, joiningUri );\n-                            boolean isFromSameURIAsTheOneWeAlreadyKnow = context.getUriForId( joiningId ) != null &&\n-                                    context.getUriForId( joiningId ).equals( joiningUri );\n-\n-                            boolean somethingIsWrong =\n-                                    ( isInCluster && !messageComesFromSameHost && isCurrentlyAlive && !isFromSameURIAsTheOneWeAlreadyKnow )\n-                                            || otherInstanceJoiningWithSameId ;\n-\n-                            if ( somethingIsWrong )\n+                            boolean otherInstanceJoiningWithSameId = context.isInstanceJoiningFromDifferentUri( joiningId, joiningUri );\n+    boolean isFromSameURIAsTheOneWeAlreadyKnow = context.getUriForId( joiningId ) != null &&context.getUriForId( joiningId ).equals( joiningUri );\n+    boolean somethingIsWrong = ( isInCluster && !messageComesFromSameHost && isCurrentlyAlive && !isFromSameURIAsTheOneWeAlreadyKnow )|| otherInstanceJoiningWithSameId ;\n+if ( somethingIsWrong )\n                             {\n                                 if ( otherInstanceJoiningWithSameId )\n                                 {\n-                                    context.getLog( ClusterState.class ).info( format( \"Denying entry to instance %s\" +\n-                                            \" because another instance is currently joining with the same id.\",\n-                                            joiningId ) );\n+                                    context.getLog( ClusterState.class ).info( format( \"Denying entry to instance %s\" + \" because another instance is currently joining with the same id.\", joiningId ) );\n                                 }\n                                 else\n                                 {\n-                                    context.getLog( ClusterState.class ).info( format( \"Denying entry to \" +\n-                                            \"instance %s because that instance is already in the cluster.\", joiningId ) );\n+                                    context.getLog( ClusterState.class ).info( format( \"Denying entry to \" + \"instance %s because that instance is already in the cluster.\", joiningId ) );\n                                 }\n-                                outgoing.offer( message.copyHeadersTo( respond( ClusterMessage.joinDenied, message,\n-                                        new ClusterMessage.ConfigurationResponseState( context.getConfiguration()\n-                                                .getRoles(), context.getConfiguration().getMembers(),\n-                                                new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(\n-                                                        context.getLastDeliveredInstanceId() ),\n-                                                context.getFailedInstances(),\n-                                                context.getConfiguration().getName() ) ) ) );\n-                            }\n+                                outgoing.offer( message.copyHeadersTo( respond( ClusterMessage.joinDenied, message, new ClusterMessage.ConfigurationResponseState( context.getConfiguration().getRoles(), context.getConfiguration().getMembers(), new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId( context.getLastDeliveredInstanceId() ), context.getFailedInstances(), context.getConfiguration().getName() ) ) ) );\n+    }\n                             else\n                             {\n-                                context.instanceIsJoining(joiningId, joiningUri );\n-\n-                                outgoing.offer( message.copyHeadersTo( respond( ClusterMessage.configurationResponse, message,\n-                                        new ClusterMessage.ConfigurationResponseState( context.getConfiguration()\n-                                                .getRoles(), context.getConfiguration().getMembers(),\n-                                                new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(\n-                                                        context.getLastDeliveredInstanceId() ),\n-                                                context.getFailedInstances(),\n-                                                context.getConfiguration().getName() ) ) ) );\n-                            }\n+                                context.instanceIsJoining( joiningId, joiningUri );\n+outgoing.offer( message.copyHeadersTo( respond( ClusterMessage.configurationResponse, message, new ClusterMessage.ConfigurationResponseState( context.getConfiguration().getRoles(), context.getConfiguration().getMembers(), new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId( context.getLastDeliveredInstanceId() ), context.getFailedInstances(), context.getConfiguration().getName() ) ) ) );\n+    }\n                             break;\n                         }\n-\n-                        case configurationChanged:\n+    case configurationChanged:\n                         {\n                             ClusterMessage.ConfigurationChangeState state = message.getPayload();\n                             state.apply( context );\n                             break;\n                         }\n-\n-                        case leave:\n+    case leave:\n                         {\n                             List<URI> nodeList = new ArrayList<>( context.getConfiguration().getMemberURIs() );\n                             if ( nodeList.size() == 1 )\n                             {\n                                 context.getLog( ClusterState.class ).info( format( \"Shutting down cluster: %s\",\n                                         context.getConfiguration().getName() ) );\n-                                context.left();\n-\n-                                return start;\n-\n-                            }\n+context.left();\n+return start;\n+    }\n                             else\n                             {\n                                 context.getLog( ClusterState.class ).info( format( \"Leaving:%s\", nodeList ) );\n-\n-                                ClusterMessage.ConfigurationChangeState newState = new ClusterMessage\n-                                        .ConfigurationChangeState();\n-                                newState.leave( context.getMyId() );\n-\n-                                outgoing.offer( internal( AtomicBroadcastMessage.broadcast, newState ) );\n+ClusterMessage.ConfigurationChangeState newState = new ClusterMessage.ConfigurationChangeState();\n+newState.leave( context.getMyId() );\n+outgoing.offer( internal( AtomicBroadcastMessage.broadcast, newState ) );\n                                 context.setTimeout( \"leave\", timeout( ClusterMessage.leaveTimedout,\n                                         message ) );\n-\n-                                return leaving;\n+return leaving;\n                             }\n                         }\n \n                         default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n-            },\n-\n-    leaving\n-            {\n+            }, leaving\n+{\n                 @Override\n-                public ClusterState handle( ClusterContext context,\n-                                           Message<ClusterMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public ClusterState handle( ClusterContext context, Message<ClusterMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case configurationChanged:\n+case configurationChanged:\n                         {\n                             ClusterMessage.ConfigurationChangeState state = message.getPayload();\n                             if ( state.isLeaving( context.getMyId() ) )\n                             {\n                                 context.cancelTimeout( \"leave\" );\n-\n-                                context.left();\n-\n-                                return start;\n+context.left();\n+return start;\n                             }\n                             else\n                             {\n@@ -596,17 +467,15 @@ public enum ClusterState implements State<ClusterContext, ClusterMessage>\n \n                         case leaveTimedout:\n                         {\n-                            context.getLog( ClusterState.class ).warn( \"Failed to leave. Cluster may consider this\" +\n-                                    \" instance still a member\" );\n-                            context.left();\n+                            context.getLog( ClusterState.class ).warn( \"Failed to leave. Cluster may consider this\" + \" instance still a member\" );\n+context.left();\n                             return start;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n             }\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 266
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}