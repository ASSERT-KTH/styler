{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "401",
    "information": {
        "errors": [
            {
                "line": "1126",
                "column": "37",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    PageSetup pageSetup = (PageSetup)o;\n    return\n        Objects.equals(this.bidi, pageSetup.bidi) &&\n        Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/401/PageSetup.java\nindex cbbdf86ad09..7ef7fb5f449 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/401/PageSetup.java\n@@ -1123,7 +1123,7 @@ public class PageSetup extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PageSetup pageSetup = (PageSetup)o;\n+    PageSetup pageSetup = (PageSetup) o;\n     return\n         Objects.equals(this.bidi, pageSetup.bidi) &&\n         Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/401/PageSetup.java\nindex cbbdf86ad09..3fc6ea4b4a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/401/PageSetup.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -80,7 +83,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< BorderAppliesToEnum > {\n+        public static class Adapter extends TypeAdapter<BorderAppliesToEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final BorderAppliesToEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -127,7 +130,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< BorderDistanceFromEnum > {\n+        public static class Adapter extends TypeAdapter<BorderDistanceFromEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final BorderDistanceFromEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -175,7 +178,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< LineNumberRestartModeEnum > {\n+        public static class Adapter extends TypeAdapter<LineNumberRestartModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final LineNumberRestartModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -221,7 +224,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< OrientationEnum > {\n+        public static class Adapter extends TypeAdapter<OrientationEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -327,7 +330,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< PageNumberStyleEnum > {\n+        public static class Adapter extends TypeAdapter<PageNumberStyleEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final PageNumberStyleEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -388,7 +391,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< PaperSizeEnum > {\n+        public static class Adapter extends TypeAdapter<PaperSizeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final PaperSizeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -437,7 +440,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< SectionStartEnum > {\n+        public static class Adapter extends TypeAdapter<SectionStartEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final SectionStartEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -485,7 +488,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< VerticalAlignmentEnum > {\n+        public static class Adapter extends TypeAdapter<VerticalAlignmentEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final VerticalAlignmentEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -585,6 +588,7 @@ public class PageSetup extends LinkElement {\n \n     @SerializedName(\"VerticalAlignment\")\n     private VerticalAlignmentEnum verticalAlignment = null;\n+\n     public PageSetup bidi(Boolean bidi) {\n         this.bidi = bidi;\n         return this;\n@@ -592,8 +596,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets specifies that this section contains bidirectional (complex scripts) text.\n-    * @return bidi\n-    **/\n+     *\n+     * @return bidi\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies that this section contains bidirectional (complex scripts) text.\")\n     public Boolean getBidi() {\n         return bidi;\n@@ -610,8 +615,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets specifies where the page border is positioned relative to intersecting texts and objects.\n-    * @return borderAlwaysInFront\n-    **/\n+     *\n+     * @return borderAlwaysInFront\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies where the page border is positioned relative to intersecting texts and objects.\")\n     public Boolean getBorderAlwaysInFront() {\n         return borderAlwaysInFront;\n@@ -628,8 +634,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets specifies which pages the page border is printed on.\n-    * @return borderAppliesTo\n-    **/\n+     *\n+     * @return borderAppliesTo\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies which pages the page border is printed on.\")\n     public BorderAppliesToEnum getBorderAppliesTo() {\n         return borderAppliesTo;\n@@ -647,8 +654,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from\n      * the text it surrounds.\n-    * @return borderDistanceFrom\n-    **/\n+     *\n+     * @return borderDistanceFrom\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from the text it surrounds.\")\n     public BorderDistanceFromEnum getBorderDistanceFrom() {\n         return borderDistanceFrom;\n@@ -666,8 +674,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body\n      * text.\n-    * @return bottomMargin\n-    **/\n+     *\n+     * @return bottomMargin\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.\")\n     public Double getBottomMargin() {\n         return bottomMargin;\n@@ -684,8 +693,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets true if a different header or footer is used on the first page.\n-    * @return differentFirstPageHeaderFooter\n-    **/\n+     *\n+     * @return differentFirstPageHeaderFooter\n+     **/\n     @ApiModelProperty(value = \"Gets or sets true if a different header or footer is used on the first page.\")\n     public Boolean getDifferentFirstPageHeaderFooter() {\n         return differentFirstPageHeaderFooter;\n@@ -703,8 +713,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets the paper tray (bin) to use for the first page of a section.\n      * The value is implementation (printer) specific.\n-    * @return firstPageTray\n-    **/\n+     *\n+     * @return firstPageTray\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the paper tray (bin) to use for the first page of a section. The value is implementation (printer) specific.\")\n     public Integer getFirstPageTray() {\n         return firstPageTray;\n@@ -721,8 +732,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the footer and the bottom of the page.\n-    * @return footerDistance\n-    **/\n+     *\n+     * @return footerDistance\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the footer and the bottom of the page.\")\n     public Double getFooterDistance() {\n         return footerDistance;\n@@ -739,8 +751,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets the amount of extra space added to the margin for document binding.\n-    * @return gutter\n-    **/\n+     *\n+     * @return gutter\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the amount of extra space added to the margin for document binding.\")\n     public Double getGutter() {\n         return gutter;\n@@ -757,8 +770,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the header and the top of the page.\n-    * @return headerDistance\n-    **/\n+     *\n+     * @return headerDistance\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the header and the top of the page.\")\n     public Double getHeaderDistance() {\n         return headerDistance;\n@@ -775,8 +789,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.\n-    * @return leftMargin\n-    **/\n+     *\n+     * @return leftMargin\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.\")\n     public Double getLeftMargin() {\n         return leftMargin;\n@@ -793,8 +808,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the numeric increment for line numbers.\n-    * @return lineNumberCountBy\n-    **/\n+     *\n+     * @return lineNumberCountBy\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the numeric increment for line numbers.\")\n     public Integer getLineNumberCountBy() {\n         return lineNumberCountBy;\n@@ -811,8 +827,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets distance between the right edge of line numbers and the left edge of the document.\n-    * @return lineNumberDistanceFromText\n-    **/\n+     *\n+     * @return lineNumberDistanceFromText\n+     **/\n     @ApiModelProperty(value = \"Gets or sets distance between the right edge of line numbers and the left edge of the document.\")\n     public Double getLineNumberDistanceFromText() {\n         return lineNumberDistanceFromText;\n@@ -830,8 +847,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new\n      * page or section or runs continuously.\n-    * @return lineNumberRestartMode\n-    **/\n+     *\n+     * @return lineNumberRestartMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new page or section or runs continuously.\")\n     public LineNumberRestartModeEnum getLineNumberRestartMode() {\n         return lineNumberRestartMode;\n@@ -848,8 +866,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets the starting line number.\n-    * @return lineStartingNumber\n-    **/\n+     *\n+     * @return lineStartingNumber\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the starting line number.\")\n     public Integer getLineStartingNumber() {\n         return lineStartingNumber;\n@@ -866,8 +885,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the orientation of the page.\n-    * @return orientation\n-    **/\n+     *\n+     * @return orientation\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the orientation of the page.\")\n     public OrientationEnum getOrientation() {\n         return orientation;\n@@ -885,8 +905,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets the paper tray (bin) to be used for all but the first page of a section.\n      * The value is implementation (printer) specific.\n-    * @return otherPagesTray\n-    **/\n+     *\n+     * @return otherPagesTray\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the paper tray (bin) to be used for all but the first page of a section. The value is implementation (printer) specific.\")\n     public Integer getOtherPagesTray() {\n         return otherPagesTray;\n@@ -903,8 +924,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the height of the page in points.\n-    * @return pageHeight\n-    **/\n+     *\n+     * @return pageHeight\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the height of the page in points.\")\n     public Double getPageHeight() {\n         return pageHeight;\n@@ -921,8 +943,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets the page number format.\n-    * @return pageNumberStyle\n-    **/\n+     *\n+     * @return pageNumberStyle\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the page number format.\")\n     public PageNumberStyleEnum getPageNumberStyle() {\n         return pageNumberStyle;\n@@ -939,8 +962,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets the starting page number of the section.\n-    * @return pageStartingNumber\n-    **/\n+     *\n+     * @return pageStartingNumber\n+     **/\n     @ApiModelProperty(value = \"Gets or sets the starting page number of the section.\")\n     public Integer getPageStartingNumber() {\n         return pageStartingNumber;\n@@ -957,8 +981,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the width of the page in points.\n-    * @return pageWidth\n-    **/\n+     *\n+     * @return pageWidth\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the width of the page in points.\")\n     public Double getPageWidth() {\n         return pageWidth;\n@@ -975,8 +1000,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the paper size.\n-    * @return paperSize\n-    **/\n+     *\n+     * @return paperSize\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the paper size.\")\n     public PaperSizeEnum getPaperSize() {\n         return paperSize;\n@@ -993,8 +1019,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets true if page numbering restarts at the beginning of the section.\n-    * @return restartPageNumbering\n-    **/\n+     *\n+     * @return restartPageNumbering\n+     **/\n     @ApiModelProperty(value = \"Gets or sets true if page numbering restarts at the beginning of the section.\")\n     public Boolean getRestartPageNumbering() {\n         return restartPageNumbering;\n@@ -1012,8 +1039,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets returns or sets the distance (in points) between the right edge of the page and the right boundary of the body\n      * text.\n-    * @return rightMargin\n-    **/\n+     *\n+     * @return rightMargin\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the right edge of the page and the right boundary of the body text.\")\n     public Double getRightMargin() {\n         return rightMargin;\n@@ -1031,8 +1059,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a\n      * left-to-right language.\n-    * @return rtlGutter\n-    **/\n+     *\n+     * @return rtlGutter\n+     **/\n     @ApiModelProperty(value = \"Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a left-to-right language.\")\n     public Boolean getRtlGutter() {\n         return rtlGutter;\n@@ -1049,8 +1078,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the type of section break for the specified object.\n-    * @return sectionStart\n-    **/\n+     *\n+     * @return sectionStart\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the type of section break for the specified object.\")\n     public SectionStartEnum getSectionStart() {\n         return sectionStart;\n@@ -1068,8 +1098,9 @@ public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets true if endnotes are printed at the end of the next section that doesn't suppress endnotes.\n      * Suppressed endnotes are printed before the endnotes in that section.\n-    * @return suppressEndnotes\n-    **/\n+     *\n+     * @return suppressEndnotes\n+     **/\n     @ApiModelProperty(value = \"Gets or sets true if endnotes are printed at the end of the next section that doesn't suppress endnotes. Suppressed endnotes are printed before the endnotes in that section.\")\n     public Boolean getSuppressEndnotes() {\n         return suppressEndnotes;\n@@ -1086,8 +1117,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.\n-    * @return topMargin\n-    **/\n+     *\n+     * @return topMargin\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.\")\n     public Double getTopMargin() {\n         return topMargin;\n@@ -1104,8 +1136,9 @@ public class PageSetup extends LinkElement {\n \n     /**\n      * Gets or sets returns or sets the vertical alignment of text on each page in a document or section.\n-    * @return verticalAlignment\n-    **/\n+     *\n+     * @return verticalAlignment\n+     **/\n     @ApiModelProperty(value = \"Gets or sets returns or sets the vertical alignment of text on each page in a document or section.\")\n     public VerticalAlignmentEnum getVerticalAlignment() {\n         return verticalAlignment;\n@@ -1123,91 +1156,91 @@ public class PageSetup extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PageSetup pageSetup = (PageSetup)o;\n-    return\n-        Objects.equals(this.bidi, pageSetup.bidi) &&\n-        Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n-        Objects.equals(this.borderAppliesTo, pageSetup.borderAppliesTo) &&\n-        Objects.equals(this.borderDistanceFrom, pageSetup.borderDistanceFrom) &&\n-        Objects.equals(this.bottomMargin, pageSetup.bottomMargin) &&\n-        Objects.equals(this.differentFirstPageHeaderFooter, pageSetup.differentFirstPageHeaderFooter) &&\n-        Objects.equals(this.firstPageTray, pageSetup.firstPageTray) &&\n-        Objects.equals(this.footerDistance, pageSetup.footerDistance) &&\n-        Objects.equals(this.gutter, pageSetup.gutter) &&\n-        Objects.equals(this.headerDistance, pageSetup.headerDistance) &&\n-        Objects.equals(this.leftMargin, pageSetup.leftMargin) &&\n-        Objects.equals(this.lineNumberCountBy, pageSetup.lineNumberCountBy) &&\n-        Objects.equals(this.lineNumberDistanceFromText, pageSetup.lineNumberDistanceFromText) &&\n-        Objects.equals(this.lineNumberRestartMode, pageSetup.lineNumberRestartMode) &&\n-        Objects.equals(this.lineStartingNumber, pageSetup.lineStartingNumber) &&\n-        Objects.equals(this.orientation, pageSetup.orientation) &&\n-        Objects.equals(this.otherPagesTray, pageSetup.otherPagesTray) &&\n-        Objects.equals(this.pageHeight, pageSetup.pageHeight) &&\n-        Objects.equals(this.pageNumberStyle, pageSetup.pageNumberStyle) &&\n-        Objects.equals(this.pageStartingNumber, pageSetup.pageStartingNumber) &&\n-        Objects.equals(this.pageWidth, pageSetup.pageWidth) &&\n-        Objects.equals(this.paperSize, pageSetup.paperSize) &&\n-        Objects.equals(this.restartPageNumbering, pageSetup.restartPageNumbering) &&\n-        Objects.equals(this.rightMargin, pageSetup.rightMargin) &&\n-        Objects.equals(this.rtlGutter, pageSetup.rtlGutter) &&\n-        Objects.equals(this.sectionStart, pageSetup.sectionStart) &&\n-        Objects.equals(this.suppressEndnotes, pageSetup.suppressEndnotes) &&\n-        Objects.equals(this.topMargin, pageSetup.topMargin) &&\n-        Objects.equals(this.verticalAlignment, pageSetup.verticalAlignment) &&\n-        super.equals(o);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(bidi, borderAlwaysInFront, borderAppliesTo, borderDistanceFrom, bottomMargin, differentFirstPageHeaderFooter, firstPageTray, footerDistance, gutter, headerDistance, leftMargin, lineNumberCountBy, lineNumberDistanceFromText, lineNumberRestartMode, lineStartingNumber, orientation, otherPagesTray, pageHeight, pageNumberStyle, pageStartingNumber, pageWidth, paperSize, restartPageNumbering, rightMargin, rtlGutter, sectionStart, suppressEndnotes, topMargin, verticalAlignment, super.hashCode());\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class PageSetup {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    bidi: \").append(toIndentedString(bidi)).append(\"\\n\");\n-    sb.append(\"    borderAlwaysInFront: \").append(toIndentedString(borderAlwaysInFront)).append(\"\\n\");\n-    sb.append(\"    borderAppliesTo: \").append(toIndentedString(borderAppliesTo)).append(\"\\n\");\n-    sb.append(\"    borderDistanceFrom: \").append(toIndentedString(borderDistanceFrom)).append(\"\\n\");\n-    sb.append(\"    bottomMargin: \").append(toIndentedString(bottomMargin)).append(\"\\n\");\n-    sb.append(\"    differentFirstPageHeaderFooter: \").append(toIndentedString(differentFirstPageHeaderFooter)).append(\"\\n\");\n-    sb.append(\"    firstPageTray: \").append(toIndentedString(firstPageTray)).append(\"\\n\");\n-    sb.append(\"    footerDistance: \").append(toIndentedString(footerDistance)).append(\"\\n\");\n-    sb.append(\"    gutter: \").append(toIndentedString(gutter)).append(\"\\n\");\n-    sb.append(\"    headerDistance: \").append(toIndentedString(headerDistance)).append(\"\\n\");\n-    sb.append(\"    leftMargin: \").append(toIndentedString(leftMargin)).append(\"\\n\");\n-    sb.append(\"    lineNumberCountBy: \").append(toIndentedString(lineNumberCountBy)).append(\"\\n\");\n-    sb.append(\"    lineNumberDistanceFromText: \").append(toIndentedString(lineNumberDistanceFromText)).append(\"\\n\");\n-    sb.append(\"    lineNumberRestartMode: \").append(toIndentedString(lineNumberRestartMode)).append(\"\\n\");\n-    sb.append(\"    lineStartingNumber: \").append(toIndentedString(lineStartingNumber)).append(\"\\n\");\n-    sb.append(\"    orientation: \").append(toIndentedString(orientation)).append(\"\\n\");\n-    sb.append(\"    otherPagesTray: \").append(toIndentedString(otherPagesTray)).append(\"\\n\");\n-    sb.append(\"    pageHeight: \").append(toIndentedString(pageHeight)).append(\"\\n\");\n-    sb.append(\"    pageNumberStyle: \").append(toIndentedString(pageNumberStyle)).append(\"\\n\");\n-    sb.append(\"    pageStartingNumber: \").append(toIndentedString(pageStartingNumber)).append(\"\\n\");\n-    sb.append(\"    pageWidth: \").append(toIndentedString(pageWidth)).append(\"\\n\");\n-    sb.append(\"    paperSize: \").append(toIndentedString(paperSize)).append(\"\\n\");\n-    sb.append(\"    restartPageNumbering: \").append(toIndentedString(restartPageNumbering)).append(\"\\n\");\n-    sb.append(\"    rightMargin: \").append(toIndentedString(rightMargin)).append(\"\\n\");\n-    sb.append(\"    rtlGutter: \").append(toIndentedString(rtlGutter)).append(\"\\n\");\n-    sb.append(\"    sectionStart: \").append(toIndentedString(sectionStart)).append(\"\\n\");\n-    sb.append(\"    suppressEndnotes: \").append(toIndentedString(suppressEndnotes)).append(\"\\n\");\n-    sb.append(\"    topMargin: \").append(toIndentedString(topMargin)).append(\"\\n\");\n-    sb.append(\"    verticalAlignment: \").append(toIndentedString(verticalAlignment)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        PageSetup pageSetup = (PageSetup) o;\n+        return\n+            Objects.equals(this.bidi, pageSetup.bidi) &&\n+                Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n+                Objects.equals(this.borderAppliesTo, pageSetup.borderAppliesTo) &&\n+                Objects.equals(this.borderDistanceFrom, pageSetup.borderDistanceFrom) &&\n+                Objects.equals(this.bottomMargin, pageSetup.bottomMargin) &&\n+                Objects.equals(this.differentFirstPageHeaderFooter, pageSetup.differentFirstPageHeaderFooter) &&\n+                Objects.equals(this.firstPageTray, pageSetup.firstPageTray) &&\n+                Objects.equals(this.footerDistance, pageSetup.footerDistance) &&\n+                Objects.equals(this.gutter, pageSetup.gutter) &&\n+                Objects.equals(this.headerDistance, pageSetup.headerDistance) &&\n+                Objects.equals(this.leftMargin, pageSetup.leftMargin) &&\n+                Objects.equals(this.lineNumberCountBy, pageSetup.lineNumberCountBy) &&\n+                Objects.equals(this.lineNumberDistanceFromText, pageSetup.lineNumberDistanceFromText) &&\n+                Objects.equals(this.lineNumberRestartMode, pageSetup.lineNumberRestartMode) &&\n+                Objects.equals(this.lineStartingNumber, pageSetup.lineStartingNumber) &&\n+                Objects.equals(this.orientation, pageSetup.orientation) &&\n+                Objects.equals(this.otherPagesTray, pageSetup.otherPagesTray) &&\n+                Objects.equals(this.pageHeight, pageSetup.pageHeight) &&\n+                Objects.equals(this.pageNumberStyle, pageSetup.pageNumberStyle) &&\n+                Objects.equals(this.pageStartingNumber, pageSetup.pageStartingNumber) &&\n+                Objects.equals(this.pageWidth, pageSetup.pageWidth) &&\n+                Objects.equals(this.paperSize, pageSetup.paperSize) &&\n+                Objects.equals(this.restartPageNumbering, pageSetup.restartPageNumbering) &&\n+                Objects.equals(this.rightMargin, pageSetup.rightMargin) &&\n+                Objects.equals(this.rtlGutter, pageSetup.rtlGutter) &&\n+                Objects.equals(this.sectionStart, pageSetup.sectionStart) &&\n+                Objects.equals(this.suppressEndnotes, pageSetup.suppressEndnotes) &&\n+                Objects.equals(this.topMargin, pageSetup.topMargin) &&\n+                Objects.equals(this.verticalAlignment, pageSetup.verticalAlignment) &&\n+                super.equals(o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(bidi, borderAlwaysInFront, borderAppliesTo, borderDistanceFrom, bottomMargin, differentFirstPageHeaderFooter, firstPageTray, footerDistance, gutter, headerDistance, leftMargin, lineNumberCountBy, lineNumberDistanceFromText, lineNumberRestartMode, lineStartingNumber, orientation, otherPagesTray, pageHeight, pageNumberStyle, pageStartingNumber, pageWidth, paperSize, restartPageNumbering, rightMargin, rtlGutter, sectionStart, suppressEndnotes, topMargin, verticalAlignment, super.hashCode());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class PageSetup {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    bidi: \").append(toIndentedString(bidi)).append(\"\\n\");\n+        sb.append(\"    borderAlwaysInFront: \").append(toIndentedString(borderAlwaysInFront)).append(\"\\n\");\n+        sb.append(\"    borderAppliesTo: \").append(toIndentedString(borderAppliesTo)).append(\"\\n\");\n+        sb.append(\"    borderDistanceFrom: \").append(toIndentedString(borderDistanceFrom)).append(\"\\n\");\n+        sb.append(\"    bottomMargin: \").append(toIndentedString(bottomMargin)).append(\"\\n\");\n+        sb.append(\"    differentFirstPageHeaderFooter: \").append(toIndentedString(differentFirstPageHeaderFooter)).append(\"\\n\");\n+        sb.append(\"    firstPageTray: \").append(toIndentedString(firstPageTray)).append(\"\\n\");\n+        sb.append(\"    footerDistance: \").append(toIndentedString(footerDistance)).append(\"\\n\");\n+        sb.append(\"    gutter: \").append(toIndentedString(gutter)).append(\"\\n\");\n+        sb.append(\"    headerDistance: \").append(toIndentedString(headerDistance)).append(\"\\n\");\n+        sb.append(\"    leftMargin: \").append(toIndentedString(leftMargin)).append(\"\\n\");\n+        sb.append(\"    lineNumberCountBy: \").append(toIndentedString(lineNumberCountBy)).append(\"\\n\");\n+        sb.append(\"    lineNumberDistanceFromText: \").append(toIndentedString(lineNumberDistanceFromText)).append(\"\\n\");\n+        sb.append(\"    lineNumberRestartMode: \").append(toIndentedString(lineNumberRestartMode)).append(\"\\n\");\n+        sb.append(\"    lineStartingNumber: \").append(toIndentedString(lineStartingNumber)).append(\"\\n\");\n+        sb.append(\"    orientation: \").append(toIndentedString(orientation)).append(\"\\n\");\n+        sb.append(\"    otherPagesTray: \").append(toIndentedString(otherPagesTray)).append(\"\\n\");\n+        sb.append(\"    pageHeight: \").append(toIndentedString(pageHeight)).append(\"\\n\");\n+        sb.append(\"    pageNumberStyle: \").append(toIndentedString(pageNumberStyle)).append(\"\\n\");\n+        sb.append(\"    pageStartingNumber: \").append(toIndentedString(pageStartingNumber)).append(\"\\n\");\n+        sb.append(\"    pageWidth: \").append(toIndentedString(pageWidth)).append(\"\\n\");\n+        sb.append(\"    paperSize: \").append(toIndentedString(paperSize)).append(\"\\n\");\n+        sb.append(\"    restartPageNumbering: \").append(toIndentedString(restartPageNumbering)).append(\"\\n\");\n+        sb.append(\"    rightMargin: \").append(toIndentedString(rightMargin)).append(\"\\n\");\n+        sb.append(\"    rtlGutter: \").append(toIndentedString(rtlGutter)).append(\"\\n\");\n+        sb.append(\"    sectionStart: \").append(toIndentedString(sectionStart)).append(\"\\n\");\n+        sb.append(\"    suppressEndnotes: \").append(toIndentedString(suppressEndnotes)).append(\"\\n\");\n+        sb.append(\"    topMargin: \").append(toIndentedString(topMargin)).append(\"\\n\");\n+        sb.append(\"    verticalAlignment: \").append(toIndentedString(verticalAlignment)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 188
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1218",
                    "column": "33",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/401/PageSetup.java\nindex cbbdf86ad09..40582a9a39b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/401/PageSetup.java\n@@ -53,8 +53,10 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(BorderAppliesToEnum.Adapter.class)\n     public enum BorderAppliesToEnum {\n         ALLPAGES(\"AllPages\"),\n-        FIRSTPAGE(\"FirstPage\"),\n-        OTHERPAGES(\"OtherPages\");\n+\n+FIRSTPAGE(\"FirstPage\"),\n+\n+OTHERPAGES(\"OtherPages\");\n \n         private String value;\n \n@@ -80,7 +82,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< BorderAppliesToEnum > {\n+        public static class Adapter extends TypeAdapter<BorderAppliesToEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final BorderAppliesToEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -101,7 +103,8 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(BorderDistanceFromEnum.Adapter.class)\n     public enum BorderDistanceFromEnum {\n         TEXT(\"Text\"),\n-        PAGEEDGE(\"PageEdge\");\n+\n+PAGEEDGE(\"PageEdge\");\n \n         private String value;\n \n@@ -127,7 +130,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< BorderDistanceFromEnum > {\n+        public static class Adapter extends TypeAdapter<BorderDistanceFromEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final BorderDistanceFromEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -148,8 +151,10 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(LineNumberRestartModeEnum.Adapter.class)\n     public enum LineNumberRestartModeEnum {\n         RESTARTPAGE(\"RestartPage\"),\n-        RESTARTSECTION(\"RestartSection\"),\n-        CONTINUOUS(\"Continuous\");\n+\n+RESTARTSECTION(\"RestartSection\"),\n+\n+CONTINUOUS(\"Continuous\");\n \n         private String value;\n \n@@ -175,7 +180,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< LineNumberRestartModeEnum > {\n+        public static class Adapter extends TypeAdapter<LineNumberRestartModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final LineNumberRestartModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -195,7 +200,8 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(OrientationEnum.Adapter.class)\n     public enum OrientationEnum {\n         PORTRAIT(\"Portrait\"),\n-        LANDSCAPE(\"Landscape\");\n+\n+LANDSCAPE(\"Landscape\");\n \n         private String value;\n \n@@ -221,7 +227,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< OrientationEnum > {\n+        public static class Adapter extends TypeAdapter<OrientationEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -241,67 +247,128 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(PageNumberStyleEnum.Adapter.class)\n     public enum PageNumberStyleEnum {\n         ARABIC(\"Arabic\"),\n-        UPPERCASEROMAN(\"UppercaseRoman\"),\n-        LOWERCASEROMAN(\"LowercaseRoman\"),\n-        UPPERCASELETTER(\"UppercaseLetter\"),\n-        LOWERCASELETTER(\"LowercaseLetter\"),\n-        ORDINAL(\"Ordinal\"),\n-        NUMBER(\"Number\"),\n-        ORDINALTEXT(\"OrdinalText\"),\n-        HEX(\"Hex\"),\n-        CHICAGOMANUAL(\"ChicagoManual\"),\n-        KANJI(\"Kanji\"),\n-        KANJIDIGIT(\"KanjiDigit\"),\n-        AIUEOHALFWIDTH(\"AiueoHalfWidth\"),\n-        IROHAHALFWIDTH(\"IrohaHalfWidth\"),\n-        ARABICFULLWIDTH(\"ArabicFullWidth\"),\n-        ARABICHALFWIDTH(\"ArabicHalfWidth\"),\n-        KANJITRADITIONAL(\"KanjiTraditional\"),\n-        KANJITRADITIONAL2(\"KanjiTraditional2\"),\n-        NUMBERINCIRCLE(\"NumberInCircle\"),\n-        DECIMALFULLWIDTH(\"DecimalFullWidth\"),\n-        AIUEO(\"Aiueo\"),\n-        IROHA(\"Iroha\"),\n-        LEADINGZERO(\"LeadingZero\"),\n-        BULLET(\"Bullet\"),\n-        GANADA(\"Ganada\"),\n-        CHOSUNG(\"Chosung\"),\n-        GB1(\"GB1\"),\n-        GB2(\"GB2\"),\n-        GB3(\"GB3\"),\n-        GB4(\"GB4\"),\n-        ZODIAC1(\"Zodiac1\"),\n-        ZODIAC2(\"Zodiac2\"),\n-        ZODIAC3(\"Zodiac3\"),\n-        TRADCHINNUM1(\"TradChinNum1\"),\n-        TRADCHINNUM2(\"TradChinNum2\"),\n-        TRADCHINNUM3(\"TradChinNum3\"),\n-        TRADCHINNUM4(\"TradChinNum4\"),\n-        SIMPCHINNUM1(\"SimpChinNum1\"),\n-        SIMPCHINNUM2(\"SimpChinNum2\"),\n-        SIMPCHINNUM3(\"SimpChinNum3\"),\n-        SIMPCHINNUM4(\"SimpChinNum4\"),\n-        HANJAREAD(\"HanjaRead\"),\n-        HANJAREADDIGIT(\"HanjaReadDigit\"),\n-        HANGUL(\"Hangul\"),\n-        HANJA(\"Hanja\"),\n-        HEBREW1(\"Hebrew1\"),\n-        ARABIC1(\"Arabic1\"),\n-        HEBREW2(\"Hebrew2\"),\n-        ARABIC2(\"Arabic2\"),\n-        HINDILETTER1(\"HindiLetter1\"),\n-        HINDILETTER2(\"HindiLetter2\"),\n-        HINDIARABIC(\"HindiArabic\"),\n-        HINDICARDINALTEXT(\"HindiCardinalText\"),\n-        THAILETTER(\"ThaiLetter\"),\n-        THAIARABIC(\"ThaiArabic\"),\n-        THAICARDINALTEXT(\"ThaiCardinalText\"),\n-        VIETCARDINALTEXT(\"VietCardinalText\"),\n-        NUMBERINDASH(\"NumberInDash\"),\n-        LOWERCASERUSSIAN(\"LowercaseRussian\"),\n-        UPPERCASERUSSIAN(\"UppercaseRussian\"),\n-        NONE(\"None\"),\n-        CUSTOM(\"Custom\");\n+\n+UPPERCASEROMAN(\"UppercaseRoman\"),\n+\n+LOWERCASEROMAN(\"LowercaseRoman\"),\n+\n+UPPERCASELETTER(\"UppercaseLetter\"),\n+\n+LOWERCASELETTER(\"LowercaseLetter\"),\n+\n+ORDINAL(\"Ordinal\"),\n+\n+NUMBER(\"Number\"),\n+\n+ORDINALTEXT(\"OrdinalText\"),\n+\n+HEX(\"Hex\"),\n+\n+CHICAGOMANUAL(\"ChicagoManual\"),\n+\n+KANJI(\"Kanji\"),\n+\n+KANJIDIGIT(\"KanjiDigit\"),\n+\n+AIUEOHALFWIDTH(\"AiueoHalfWidth\"),\n+\n+IROHAHALFWIDTH(\"IrohaHalfWidth\"),\n+\n+ARABICFULLWIDTH(\"ArabicFullWidth\"),\n+\n+ARABICHALFWIDTH(\"ArabicHalfWidth\"),\n+\n+KANJITRADITIONAL(\"KanjiTraditional\"),\n+\n+KANJITRADITIONAL2(\"KanjiTraditional2\"),\n+\n+NUMBERINCIRCLE(\"NumberInCircle\"),\n+\n+DECIMALFULLWIDTH(\"DecimalFullWidth\"),\n+\n+AIUEO(\"Aiueo\"),\n+\n+IROHA(\"Iroha\"),\n+\n+LEADINGZERO(\"LeadingZero\"),\n+\n+BULLET(\"Bullet\"),\n+\n+GANADA(\"Ganada\"),\n+\n+CHOSUNG(\"Chosung\"),\n+\n+GB1(\"GB1\"),\n+\n+GB2(\"GB2\"),\n+\n+GB3(\"GB3\"),\n+\n+GB4(\"GB4\"),\n+\n+ZODIAC1(\"Zodiac1\"),\n+\n+ZODIAC2(\"Zodiac2\"),\n+\n+ZODIAC3(\"Zodiac3\"),\n+\n+TRADCHINNUM1(\"TradChinNum1\"),\n+\n+TRADCHINNUM2(\"TradChinNum2\"),\n+\n+TRADCHINNUM3(\"TradChinNum3\"),\n+\n+TRADCHINNUM4(\"TradChinNum4\"),\n+\n+SIMPCHINNUM1(\"SimpChinNum1\"),\n+\n+SIMPCHINNUM2(\"SimpChinNum2\"),\n+\n+SIMPCHINNUM3(\"SimpChinNum3\"),\n+\n+SIMPCHINNUM4(\"SimpChinNum4\"),\n+\n+HANJAREAD(\"HanjaRead\"),\n+\n+HANJAREADDIGIT(\"HanjaReadDigit\"),\n+\n+HANGUL(\"Hangul\"),\n+\n+HANJA(\"Hanja\"),\n+\n+HEBREW1(\"Hebrew1\"),\n+\n+ARABIC1(\"Arabic1\"),\n+\n+HEBREW2(\"Hebrew2\"),\n+\n+ARABIC2(\"Arabic2\"),\n+\n+HINDILETTER1(\"HindiLetter1\"),\n+\n+HINDILETTER2(\"HindiLetter2\"),\n+\n+HINDIARABIC(\"HindiArabic\"),\n+\n+HINDICARDINALTEXT(\"HindiCardinalText\"),\n+\n+THAILETTER(\"ThaiLetter\"),\n+\n+THAIARABIC(\"ThaiArabic\"),\n+\n+THAICARDINALTEXT(\"ThaiCardinalText\"),\n+\n+VIETCARDINALTEXT(\"VietCardinalText\"),\n+\n+NUMBERINDASH(\"NumberInDash\"),\n+\n+LOWERCASERUSSIAN(\"LowercaseRussian\"),\n+\n+UPPERCASERUSSIAN(\"UppercaseRussian\"),\n+\n+NONE(\"None\"),\n+\n+CUSTOM(\"Custom\");\n \n         private String value;\n \n@@ -327,7 +394,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< PageNumberStyleEnum > {\n+        public static class Adapter extends TypeAdapter<PageNumberStyleEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final PageNumberStyleEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -347,22 +414,38 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(PaperSizeEnum.Adapter.class)\n     public enum PaperSizeEnum {\n         A3(\"A3\"),\n-        A4(\"A4\"),\n-        A5(\"A5\"),\n-        B4(\"B4\"),\n-        B5(\"B5\"),\n-        EXECUTIVE(\"Executive\"),\n-        FOLIO(\"Folio\"),\n-        LEDGER(\"Ledger\"),\n-        LEGAL(\"Legal\"),\n-        LETTER(\"Letter\"),\n-        ENVELOPEDL(\"EnvelopeDL\"),\n-        QUARTO(\"Quarto\"),\n-        STATEMENT(\"Statement\"),\n-        TABLOID(\"Tabloid\"),\n-        PAPER10X14(\"Paper10x14\"),\n-        PAPER11X17(\"Paper11x17\"),\n-        CUSTOM(\"Custom\");\n+\n+A4(\"A4\"),\n+\n+A5(\"A5\"),\n+\n+B4(\"B4\"),\n+\n+B5(\"B5\"),\n+\n+EXECUTIVE(\"Executive\"),\n+\n+FOLIO(\"Folio\"),\n+\n+LEDGER(\"Ledger\"),\n+\n+LEGAL(\"Legal\"),\n+\n+LETTER(\"Letter\"),\n+\n+ENVELOPEDL(\"EnvelopeDL\"),\n+\n+QUARTO(\"Quarto\"),\n+\n+STATEMENT(\"Statement\"),\n+\n+TABLOID(\"Tabloid\"),\n+\n+PAPER10X14(\"Paper10x14\"),\n+\n+PAPER11X17(\"Paper11x17\"),\n+\n+CUSTOM(\"Custom\");\n \n         private String value;\n \n@@ -388,7 +471,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< PaperSizeEnum > {\n+        public static class Adapter extends TypeAdapter<PaperSizeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final PaperSizeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -408,10 +491,14 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(SectionStartEnum.Adapter.class)\n     public enum SectionStartEnum {\n         CONTINUOUS(\"Continuous\"),\n-        NEWCOLUMN(\"NewColumn\"),\n-        NEWPAGE(\"NewPage\"),\n-        EVENPAGE(\"EvenPage\"),\n-        ODDPAGE(\"OddPage\");\n+\n+NEWCOLUMN(\"NewColumn\"),\n+\n+NEWPAGE(\"NewPage\"),\n+\n+EVENPAGE(\"EvenPage\"),\n+\n+ODDPAGE(\"OddPage\");\n \n         private String value;\n \n@@ -437,7 +524,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< SectionStartEnum > {\n+        public static class Adapter extends TypeAdapter<SectionStartEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final SectionStartEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -457,9 +544,12 @@ public class PageSetup extends LinkElement {\n     @JsonAdapter(VerticalAlignmentEnum.Adapter.class)\n     public enum VerticalAlignmentEnum {\n         TOP(\"Top\"),\n-        CENTER(\"Center\"),\n-        JUSTIFY(\"Justify\"),\n-        BOTTOM(\"Bottom\");\n+\n+CENTER(\"Center\"),\n+\n+JUSTIFY(\"Justify\"),\n+\n+BOTTOM(\"Bottom\");\n \n         private String value;\n \n@@ -485,7 +575,7 @@ public class PageSetup extends LinkElement {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< VerticalAlignmentEnum > {\n+        public static class Adapter extends TypeAdapter<VerticalAlignmentEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final VerticalAlignmentEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -585,7 +675,8 @@ public class PageSetup extends LinkElement {\n \n     @SerializedName(\"VerticalAlignment\")\n     private VerticalAlignmentEnum verticalAlignment = null;\n-    public PageSetup bidi(Boolean bidi) {\n+\n+public PageSetup bidi(Boolean bidi) {\n         this.bidi = bidi;\n         return this;\n     }\n@@ -1119,13 +1210,13 @@ public class PageSetup extends LinkElement {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PageSetup pageSetup = (PageSetup)o;\n-    return\n-        Objects.equals(this.bidi, pageSetup.bidi) &&\n+\n+PageSetup pageSetup = (PageSetup)o;\n+    return Objects.equals(this.bidi, pageSetup.bidi) &&\n         Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n         Objects.equals(this.borderAppliesTo, pageSetup.borderAppliesTo) &&\n         Objects.equals(this.borderDistanceFrom, pageSetup.borderDistanceFrom) &&\n@@ -1210,4 +1301,4 @@ public class PageSetup extends LinkElement {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 195
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/401/PageSetup.java\nindex cbbdf86ad09..cf06949e0ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/401/PageSetup.java\n@@ -45,1123 +45,1301 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents the page setup properties of a section.\n  */\n+\n+\n @ApiModel(description = \"Represents the page setup properties of a section.\")\n+\n public class PageSetup extends LinkElement {\n     /**\n      * Gets or sets specifies which pages the page border is printed on.\n      */\n-    @JsonAdapter(BorderAppliesToEnum.Adapter.class)\n-    public enum BorderAppliesToEnum {\n-        ALLPAGES(\"AllPages\"),\n-        FIRSTPAGE(\"FirstPage\"),\n-        OTHERPAGES(\"OtherPages\");\n+  @JsonAdapter(BorderAppliesToEnum.Adapter.class)\n+  public enum BorderAppliesToEnum {\n+    ALLPAGES(\"AllPages\"),\n \n-        private String value;\n+    FIRSTPAGE(\"FirstPage\"),\n \n-        BorderAppliesToEnum(String value) {\n-            this.value = value;\n-        }\n+    OTHERPAGES(\"OtherPages\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    BorderAppliesToEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static BorderAppliesToEnum fromValue(String text) {\n-            for (BorderAppliesToEnum b : BorderAppliesToEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< BorderAppliesToEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final BorderAppliesToEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public BorderAppliesToEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return BorderAppliesToEnum.fromValue(String.valueOf(value));\n-            }\n+    public static BorderAppliesToEnum fromValue(String text) {\n+      for (BorderAppliesToEnum b : BorderAppliesToEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<BorderAppliesToEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final BorderAppliesToEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public BorderAppliesToEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return BorderAppliesToEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from\n      * the text it surrounds.\n      */\n-    @JsonAdapter(BorderDistanceFromEnum.Adapter.class)\n-    public enum BorderDistanceFromEnum {\n-        TEXT(\"Text\"),\n-        PAGEEDGE(\"PageEdge\");\n \n-        private String value;\n \n-        BorderDistanceFromEnum(String value) {\n-            this.value = value;\n-        }\n+  @JsonAdapter(BorderDistanceFromEnum.Adapter.class)\n+  public enum BorderDistanceFromEnum {\n+    TEXT(\"Text\"),\n \n-        public String getValue() {\n-            return value;\n-        }\n+    PAGEEDGE(\"PageEdge\");\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    private String value;\n \n-        public static BorderDistanceFromEnum fromValue(String text) {\n-            for (BorderDistanceFromEnum b : BorderDistanceFromEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    BorderDistanceFromEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< BorderDistanceFromEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final BorderDistanceFromEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public BorderDistanceFromEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return BorderDistanceFromEnum.fromValue(String.valueOf(value));\n-            }\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static BorderDistanceFromEnum fromValue(String text) {\n+      for (BorderDistanceFromEnum b : BorderDistanceFromEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<BorderDistanceFromEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final BorderDistanceFromEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public BorderDistanceFromEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return BorderDistanceFromEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new\n      * page or section or runs continuously.\n      */\n-    @JsonAdapter(LineNumberRestartModeEnum.Adapter.class)\n-    public enum LineNumberRestartModeEnum {\n-        RESTARTPAGE(\"RestartPage\"),\n-        RESTARTSECTION(\"RestartSection\"),\n-        CONTINUOUS(\"Continuous\");\n \n-        private String value;\n \n-        LineNumberRestartModeEnum(String value) {\n-            this.value = value;\n-        }\n+  @JsonAdapter(LineNumberRestartModeEnum.Adapter.class)\n+  public enum LineNumberRestartModeEnum {\n+    RESTARTPAGE(\"RestartPage\"),\n \n-        public String getValue() {\n-            return value;\n-        }\n+    RESTARTSECTION(\"RestartSection\"),\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    CONTINUOUS(\"Continuous\");\n \n-        public static LineNumberRestartModeEnum fromValue(String text) {\n-            for (LineNumberRestartModeEnum b : LineNumberRestartModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    private String value;\n+\n+    LineNumberRestartModeEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< LineNumberRestartModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final LineNumberRestartModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public LineNumberRestartModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return LineNumberRestartModeEnum.fromValue(String.valueOf(value));\n-            }\n+    public static LineNumberRestartModeEnum fromValue(String text) {\n+      for (LineNumberRestartModeEnum b : LineNumberRestartModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<LineNumberRestartModeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final LineNumberRestartModeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public LineNumberRestartModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return LineNumberRestartModeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets returns or sets the orientation of the page.\n      */\n-    @JsonAdapter(OrientationEnum.Adapter.class)\n-    public enum OrientationEnum {\n-        PORTRAIT(\"Portrait\"),\n-        LANDSCAPE(\"Landscape\");\n \n-        private String value;\n \n-        OrientationEnum(String value) {\n-            this.value = value;\n-        }\n+  @JsonAdapter(OrientationEnum.Adapter.class)\n+  public enum OrientationEnum {\n+    PORTRAIT(\"Portrait\"),\n \n-        public String getValue() {\n-            return value;\n-        }\n+    LANDSCAPE(\"Landscape\");\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    private String value;\n \n-        public static OrientationEnum fromValue(String text) {\n-            for (OrientationEnum b : OrientationEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    OrientationEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< OrientationEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public OrientationEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return OrientationEnum.fromValue(String.valueOf(value));\n-            }\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static OrientationEnum fromValue(String text) {\n+      for (OrientationEnum b : OrientationEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<OrientationEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public OrientationEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return OrientationEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets the page number format.\n      */\n-    @JsonAdapter(PageNumberStyleEnum.Adapter.class)\n-    public enum PageNumberStyleEnum {\n-        ARABIC(\"Arabic\"),\n-        UPPERCASEROMAN(\"UppercaseRoman\"),\n-        LOWERCASEROMAN(\"LowercaseRoman\"),\n-        UPPERCASELETTER(\"UppercaseLetter\"),\n-        LOWERCASELETTER(\"LowercaseLetter\"),\n-        ORDINAL(\"Ordinal\"),\n-        NUMBER(\"Number\"),\n-        ORDINALTEXT(\"OrdinalText\"),\n-        HEX(\"Hex\"),\n-        CHICAGOMANUAL(\"ChicagoManual\"),\n-        KANJI(\"Kanji\"),\n-        KANJIDIGIT(\"KanjiDigit\"),\n-        AIUEOHALFWIDTH(\"AiueoHalfWidth\"),\n-        IROHAHALFWIDTH(\"IrohaHalfWidth\"),\n-        ARABICFULLWIDTH(\"ArabicFullWidth\"),\n-        ARABICHALFWIDTH(\"ArabicHalfWidth\"),\n-        KANJITRADITIONAL(\"KanjiTraditional\"),\n-        KANJITRADITIONAL2(\"KanjiTraditional2\"),\n-        NUMBERINCIRCLE(\"NumberInCircle\"),\n-        DECIMALFULLWIDTH(\"DecimalFullWidth\"),\n-        AIUEO(\"Aiueo\"),\n-        IROHA(\"Iroha\"),\n-        LEADINGZERO(\"LeadingZero\"),\n-        BULLET(\"Bullet\"),\n-        GANADA(\"Ganada\"),\n-        CHOSUNG(\"Chosung\"),\n-        GB1(\"GB1\"),\n-        GB2(\"GB2\"),\n-        GB3(\"GB3\"),\n-        GB4(\"GB4\"),\n-        ZODIAC1(\"Zodiac1\"),\n-        ZODIAC2(\"Zodiac2\"),\n-        ZODIAC3(\"Zodiac3\"),\n-        TRADCHINNUM1(\"TradChinNum1\"),\n-        TRADCHINNUM2(\"TradChinNum2\"),\n-        TRADCHINNUM3(\"TradChinNum3\"),\n-        TRADCHINNUM4(\"TradChinNum4\"),\n-        SIMPCHINNUM1(\"SimpChinNum1\"),\n-        SIMPCHINNUM2(\"SimpChinNum2\"),\n-        SIMPCHINNUM3(\"SimpChinNum3\"),\n-        SIMPCHINNUM4(\"SimpChinNum4\"),\n-        HANJAREAD(\"HanjaRead\"),\n-        HANJAREADDIGIT(\"HanjaReadDigit\"),\n-        HANGUL(\"Hangul\"),\n-        HANJA(\"Hanja\"),\n-        HEBREW1(\"Hebrew1\"),\n-        ARABIC1(\"Arabic1\"),\n-        HEBREW2(\"Hebrew2\"),\n-        ARABIC2(\"Arabic2\"),\n-        HINDILETTER1(\"HindiLetter1\"),\n-        HINDILETTER2(\"HindiLetter2\"),\n-        HINDIARABIC(\"HindiArabic\"),\n-        HINDICARDINALTEXT(\"HindiCardinalText\"),\n-        THAILETTER(\"ThaiLetter\"),\n-        THAIARABIC(\"ThaiArabic\"),\n-        THAICARDINALTEXT(\"ThaiCardinalText\"),\n-        VIETCARDINALTEXT(\"VietCardinalText\"),\n-        NUMBERINDASH(\"NumberInDash\"),\n-        LOWERCASERUSSIAN(\"LowercaseRussian\"),\n-        UPPERCASERUSSIAN(\"UppercaseRussian\"),\n-        NONE(\"None\"),\n-        CUSTOM(\"Custom\");\n-\n-        private String value;\n-\n-        PageNumberStyleEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(PageNumberStyleEnum.Adapter.class)\n+  public enum PageNumberStyleEnum {\n+    ARABIC(\"Arabic\"),\n \n-        public static PageNumberStyleEnum fromValue(String text) {\n-            for (PageNumberStyleEnum b : PageNumberStyleEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    UPPERCASEROMAN(\"UppercaseRoman\"),\n+\n+    LOWERCASEROMAN(\"LowercaseRoman\"),\n+\n+    UPPERCASELETTER(\"UppercaseLetter\"),\n+\n+    LOWERCASELETTER(\"LowercaseLetter\"),\n+\n+    ORDINAL(\"Ordinal\"),\n+\n+    NUMBER(\"Number\"),\n+\n+    ORDINALTEXT(\"OrdinalText\"),\n+\n+    HEX(\"Hex\"),\n+\n+    CHICAGOMANUAL(\"ChicagoManual\"),\n+\n+    KANJI(\"Kanji\"),\n+\n+    KANJIDIGIT(\"KanjiDigit\"),\n+\n+    AIUEOHALFWIDTH(\"AiueoHalfWidth\"),\n+\n+    IROHAHALFWIDTH(\"IrohaHalfWidth\"),\n+\n+    ARABICFULLWIDTH(\"ArabicFullWidth\"),\n+\n+    ARABICHALFWIDTH(\"ArabicHalfWidth\"),\n+\n+    KANJITRADITIONAL(\"KanjiTraditional\"),\n+\n+    KANJITRADITIONAL2(\"KanjiTraditional2\"),\n+\n+    NUMBERINCIRCLE(\"NumberInCircle\"),\n+\n+    DECIMALFULLWIDTH(\"DecimalFullWidth\"),\n+\n+    AIUEO(\"Aiueo\"),\n+\n+    IROHA(\"Iroha\"),\n+\n+    LEADINGZERO(\"LeadingZero\"),\n+\n+    BULLET(\"Bullet\"),\n+\n+    GANADA(\"Ganada\"),\n+\n+    CHOSUNG(\"Chosung\"),\n+\n+    GB1(\"GB1\"),\n+\n+    GB2(\"GB2\"),\n+\n+    GB3(\"GB3\"),\n+\n+    GB4(\"GB4\"),\n+\n+    ZODIAC1(\"Zodiac1\"),\n+\n+    ZODIAC2(\"Zodiac2\"),\n+\n+    ZODIAC3(\"Zodiac3\"),\n+\n+    TRADCHINNUM1(\"TradChinNum1\"),\n+\n+    TRADCHINNUM2(\"TradChinNum2\"),\n+\n+    TRADCHINNUM3(\"TradChinNum3\"),\n+\n+    TRADCHINNUM4(\"TradChinNum4\"),\n+\n+    SIMPCHINNUM1(\"SimpChinNum1\"),\n+\n+    SIMPCHINNUM2(\"SimpChinNum2\"),\n+\n+    SIMPCHINNUM3(\"SimpChinNum3\"),\n+\n+    SIMPCHINNUM4(\"SimpChinNum4\"),\n+\n+    HANJAREAD(\"HanjaRead\"),\n+\n+    HANJAREADDIGIT(\"HanjaReadDigit\"),\n+\n+    HANGUL(\"Hangul\"),\n+\n+    HANJA(\"Hanja\"),\n+\n+    HEBREW1(\"Hebrew1\"),\n+\n+    ARABIC1(\"Arabic1\"),\n+\n+    HEBREW2(\"Hebrew2\"),\n \n-        public static class Adapter extends TypeAdapter< PageNumberStyleEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final PageNumberStyleEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public PageNumberStyleEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return PageNumberStyleEnum.fromValue(String.valueOf(value));\n-            }\n+    ARABIC2(\"Arabic2\"),\n+\n+    HINDILETTER1(\"HindiLetter1\"),\n+\n+    HINDILETTER2(\"HindiLetter2\"),\n+\n+    HINDIARABIC(\"HindiArabic\"),\n+\n+    HINDICARDINALTEXT(\"HindiCardinalText\"),\n+\n+    THAILETTER(\"ThaiLetter\"),\n+\n+    THAIARABIC(\"ThaiArabic\"),\n+\n+    THAICARDINALTEXT(\"ThaiCardinalText\"),\n+\n+    VIETCARDINALTEXT(\"VietCardinalText\"),\n+\n+    NUMBERINDASH(\"NumberInDash\"),\n+\n+    LOWERCASERUSSIAN(\"LowercaseRussian\"),\n+\n+    UPPERCASERUSSIAN(\"UppercaseRussian\"),\n+\n+    NONE(\"None\"),\n+\n+    CUSTOM(\"Custom\");\n+\n+    private String value;\n+\n+    PageNumberStyleEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static PageNumberStyleEnum fromValue(String text) {\n+      for (PageNumberStyleEnum b : PageNumberStyleEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<PageNumberStyleEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final PageNumberStyleEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public PageNumberStyleEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return PageNumberStyleEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets returns or sets the paper size.\n      */\n-    @JsonAdapter(PaperSizeEnum.Adapter.class)\n-    public enum PaperSizeEnum {\n-        A3(\"A3\"),\n-        A4(\"A4\"),\n-        A5(\"A5\"),\n-        B4(\"B4\"),\n-        B5(\"B5\"),\n-        EXECUTIVE(\"Executive\"),\n-        FOLIO(\"Folio\"),\n-        LEDGER(\"Ledger\"),\n-        LEGAL(\"Legal\"),\n-        LETTER(\"Letter\"),\n-        ENVELOPEDL(\"EnvelopeDL\"),\n-        QUARTO(\"Quarto\"),\n-        STATEMENT(\"Statement\"),\n-        TABLOID(\"Tabloid\"),\n-        PAPER10X14(\"Paper10x14\"),\n-        PAPER11X17(\"Paper11x17\"),\n-        CUSTOM(\"Custom\");\n-\n-        private String value;\n-\n-        PaperSizeEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(PaperSizeEnum.Adapter.class)\n+  public enum PaperSizeEnum {\n+    A3(\"A3\"),\n \n-        public static PaperSizeEnum fromValue(String text) {\n-            for (PaperSizeEnum b : PaperSizeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    A4(\"A4\"),\n+\n+    A5(\"A5\"),\n+\n+    B4(\"B4\"),\n+\n+    B5(\"B5\"),\n+\n+    EXECUTIVE(\"Executive\"),\n+\n+    FOLIO(\"Folio\"),\n+\n+    LEDGER(\"Ledger\"),\n+\n+    LEGAL(\"Legal\"),\n+\n+    LETTER(\"Letter\"),\n+\n+    ENVELOPEDL(\"EnvelopeDL\"),\n+\n+    QUARTO(\"Quarto\"),\n+\n+    STATEMENT(\"Statement\"),\n+\n+    TABLOID(\"Tabloid\"),\n \n-        public static class Adapter extends TypeAdapter< PaperSizeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final PaperSizeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public PaperSizeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return PaperSizeEnum.fromValue(String.valueOf(value));\n-            }\n+    PAPER10X14(\"Paper10x14\"),\n+\n+    PAPER11X17(\"Paper11x17\"),\n+\n+    CUSTOM(\"Custom\");\n+\n+    private String value;\n+\n+    PaperSizeEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static PaperSizeEnum fromValue(String text) {\n+      for (PaperSizeEnum b : PaperSizeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<PaperSizeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final PaperSizeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public PaperSizeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return PaperSizeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets returns or sets the type of section break for the specified object.\n      */\n-    @JsonAdapter(SectionStartEnum.Adapter.class)\n-    public enum SectionStartEnum {\n-        CONTINUOUS(\"Continuous\"),\n-        NEWCOLUMN(\"NewColumn\"),\n-        NEWPAGE(\"NewPage\"),\n-        EVENPAGE(\"EvenPage\"),\n-        ODDPAGE(\"OddPage\");\n-\n-        private String value;\n-\n-        SectionStartEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(SectionStartEnum.Adapter.class)\n+  public enum SectionStartEnum {\n+    CONTINUOUS(\"Continuous\"),\n \n-        public static SectionStartEnum fromValue(String text) {\n-            for (SectionStartEnum b : SectionStartEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    NEWCOLUMN(\"NewColumn\"),\n+\n+    NEWPAGE(\"NewPage\"),\n+\n+    EVENPAGE(\"EvenPage\"),\n+\n+    ODDPAGE(\"OddPage\");\n+\n+    private String value;\n+\n+    SectionStartEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< SectionStartEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final SectionStartEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public SectionStartEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return SectionStartEnum.fromValue(String.valueOf(value));\n-            }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static SectionStartEnum fromValue(String text) {\n+      for (SectionStartEnum b : SectionStartEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n+\n+    public static class Adapter extends TypeAdapter<SectionStartEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final SectionStartEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public SectionStartEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return SectionStartEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n     /**\n      * Gets or sets returns or sets the vertical alignment of text on each page in a document or section.\n      */\n-    @JsonAdapter(VerticalAlignmentEnum.Adapter.class)\n-    public enum VerticalAlignmentEnum {\n-        TOP(\"Top\"),\n-        CENTER(\"Center\"),\n-        JUSTIFY(\"Justify\"),\n-        BOTTOM(\"Bottom\");\n \n-        private String value;\n \n-        VerticalAlignmentEnum(String value) {\n-            this.value = value;\n-        }\n+  @JsonAdapter(VerticalAlignmentEnum.Adapter.class)\n+  public enum VerticalAlignmentEnum {\n+    TOP(\"Top\"),\n \n-        public String getValue() {\n-            return value;\n-        }\n+    CENTER(\"Center\"),\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    JUSTIFY(\"Justify\"),\n \n-        public static VerticalAlignmentEnum fromValue(String text) {\n-            for (VerticalAlignmentEnum b : VerticalAlignmentEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    BOTTOM(\"Bottom\");\n+\n+    private String value;\n+\n+    VerticalAlignmentEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< VerticalAlignmentEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final VerticalAlignmentEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public VerticalAlignmentEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return VerticalAlignmentEnum.fromValue(String.valueOf(value));\n-            }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static VerticalAlignmentEnum fromValue(String text) {\n+      for (VerticalAlignmentEnum b : VerticalAlignmentEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n+\n+    public static class Adapter extends TypeAdapter<VerticalAlignmentEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final VerticalAlignmentEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public VerticalAlignmentEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return VerticalAlignmentEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n-    @SerializedName(\"Bidi\")\n-    private Boolean bidi = null;\n \n-    @SerializedName(\"BorderAlwaysInFront\")\n-    private Boolean borderAlwaysInFront = null;\n+  @SerializedName(\"Bidi\")\n+  private Boolean bidi = null;\n \n-    @SerializedName(\"BorderAppliesTo\")\n-    private BorderAppliesToEnum borderAppliesTo = null;\n+  @SerializedName(\"BorderAlwaysInFront\")\n+  private Boolean borderAlwaysInFront = null;\n \n-    @SerializedName(\"BorderDistanceFrom\")\n-    private BorderDistanceFromEnum borderDistanceFrom = null;\n+  @SerializedName(\"BorderAppliesTo\")\n+  private BorderAppliesToEnum borderAppliesTo = null;\n \n-    @SerializedName(\"BottomMargin\")\n-    private Double bottomMargin = null;\n+  @SerializedName(\"BorderDistanceFrom\")\n+  private BorderDistanceFromEnum borderDistanceFrom = null;\n \n-    @SerializedName(\"DifferentFirstPageHeaderFooter\")\n-    private Boolean differentFirstPageHeaderFooter = null;\n+  @SerializedName(\"BottomMargin\")\n+  private Double bottomMargin = null;\n \n-    @SerializedName(\"FirstPageTray\")\n-    private Integer firstPageTray = null;\n+  @SerializedName(\"DifferentFirstPageHeaderFooter\")\n+  private Boolean differentFirstPageHeaderFooter = null;\n \n-    @SerializedName(\"FooterDistance\")\n-    private Double footerDistance = null;\n+  @SerializedName(\"FirstPageTray\")\n+  private Integer firstPageTray = null;\n \n-    @SerializedName(\"Gutter\")\n-    private Double gutter = null;\n+  @SerializedName(\"FooterDistance\")\n+  private Double footerDistance = null;\n \n-    @SerializedName(\"HeaderDistance\")\n-    private Double headerDistance = null;\n+  @SerializedName(\"Gutter\")\n+  private Double gutter = null;\n \n-    @SerializedName(\"LeftMargin\")\n-    private Double leftMargin = null;\n+  @SerializedName(\"HeaderDistance\")\n+  private Double headerDistance = null;\n \n-    @SerializedName(\"LineNumberCountBy\")\n-    private Integer lineNumberCountBy = null;\n+  @SerializedName(\"LeftMargin\")\n+  private Double leftMargin = null;\n \n-    @SerializedName(\"LineNumberDistanceFromText\")\n-    private Double lineNumberDistanceFromText = null;\n+  @SerializedName(\"LineNumberCountBy\")\n+  private Integer lineNumberCountBy = null;\n \n-    @SerializedName(\"LineNumberRestartMode\")\n-    private LineNumberRestartModeEnum lineNumberRestartMode = null;\n+  @SerializedName(\"LineNumberDistanceFromText\")\n+  private Double lineNumberDistanceFromText = null;\n \n-    @SerializedName(\"LineStartingNumber\")\n-    private Integer lineStartingNumber = null;\n+  @SerializedName(\"LineNumberRestartMode\")\n+  private LineNumberRestartModeEnum lineNumberRestartMode = null;\n \n-    @SerializedName(\"Orientation\")\n-    private OrientationEnum orientation = null;\n+  @SerializedName(\"LineStartingNumber\")\n+  private Integer lineStartingNumber = null;\n \n-    @SerializedName(\"OtherPagesTray\")\n-    private Integer otherPagesTray = null;\n+  @SerializedName(\"Orientation\")\n+  private OrientationEnum orientation = null;\n \n-    @SerializedName(\"PageHeight\")\n-    private Double pageHeight = null;\n+  @SerializedName(\"OtherPagesTray\")\n+  private Integer otherPagesTray = null;\n \n-    @SerializedName(\"PageNumberStyle\")\n-    private PageNumberStyleEnum pageNumberStyle = null;\n+  @SerializedName(\"PageHeight\")\n+  private Double pageHeight = null;\n \n-    @SerializedName(\"PageStartingNumber\")\n-    private Integer pageStartingNumber = null;\n+  @SerializedName(\"PageNumberStyle\")\n+  private PageNumberStyleEnum pageNumberStyle = null;\n \n-    @SerializedName(\"PageWidth\")\n-    private Double pageWidth = null;\n+  @SerializedName(\"PageStartingNumber\")\n+  private Integer pageStartingNumber = null;\n \n-    @SerializedName(\"PaperSize\")\n-    private PaperSizeEnum paperSize = null;\n+  @SerializedName(\"PageWidth\")\n+  private Double pageWidth = null;\n \n-    @SerializedName(\"RestartPageNumbering\")\n-    private Boolean restartPageNumbering = null;\n+  @SerializedName(\"PaperSize\")\n+  private PaperSizeEnum paperSize = null;\n \n-    @SerializedName(\"RightMargin\")\n-    private Double rightMargin = null;\n+  @SerializedName(\"RestartPageNumbering\")\n+  private Boolean restartPageNumbering = null;\n \n-    @SerializedName(\"RtlGutter\")\n-    private Boolean rtlGutter = null;\n+  @SerializedName(\"RightMargin\")\n+  private Double rightMargin = null;\n \n-    @SerializedName(\"SectionStart\")\n-    private SectionStartEnum sectionStart = null;\n+  @SerializedName(\"RtlGutter\")\n+  private Boolean rtlGutter = null;\n \n-    @SerializedName(\"SuppressEndnotes\")\n-    private Boolean suppressEndnotes = null;\n+  @SerializedName(\"SectionStart\")\n+  private SectionStartEnum sectionStart = null;\n \n-    @SerializedName(\"TopMargin\")\n-    private Double topMargin = null;\n+  @SerializedName(\"SuppressEndnotes\")\n+  private Boolean suppressEndnotes = null;\n \n-    @SerializedName(\"VerticalAlignment\")\n-    private VerticalAlignmentEnum verticalAlignment = null;\n-    public PageSetup bidi(Boolean bidi) {\n-        this.bidi = bidi;\n-        return this;\n-    }\n+  @SerializedName(\"TopMargin\")\n+  private Double topMargin = null;\n+\n+  @SerializedName(\"VerticalAlignment\")\n+  private VerticalAlignmentEnum verticalAlignment = null;\n+\n+  public PageSetup bidi(Boolean bidi) {\n+    this.bidi = bidi;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies that this section contains bidirectional (complex scripts) text.\n     * @return bidi\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies that this section contains bidirectional (complex scripts) text.\")\n-    public Boolean getBidi() {\n-        return bidi;\n-    }\n \n-    public void setBidi(Boolean bidi) {\n-        this.bidi = bidi;\n-    }\n \n-    public PageSetup borderAlwaysInFront(Boolean borderAlwaysInFront) {\n-        this.borderAlwaysInFront = borderAlwaysInFront;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies that this section contains bidirectional (complex scripts) text.\")\n+  public Boolean getBidi() {\n+    return bidi;\n+  }\n+\n+  public void setBidi(Boolean bidi) {\n+    this.bidi = bidi;\n+  }\n+\n+  public PageSetup borderAlwaysInFront(Boolean borderAlwaysInFront) {\n+    this.borderAlwaysInFront = borderAlwaysInFront;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies where the page border is positioned relative to intersecting texts and objects.\n     * @return borderAlwaysInFront\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies where the page border is positioned relative to intersecting texts and objects.\")\n-    public Boolean getBorderAlwaysInFront() {\n-        return borderAlwaysInFront;\n-    }\n \n-    public void setBorderAlwaysInFront(Boolean borderAlwaysInFront) {\n-        this.borderAlwaysInFront = borderAlwaysInFront;\n-    }\n \n-    public PageSetup borderAppliesTo(BorderAppliesToEnum borderAppliesTo) {\n-        this.borderAppliesTo = borderAppliesTo;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies where the page border is positioned relative to intersecting texts and objects.\")\n+  public Boolean getBorderAlwaysInFront() {\n+    return borderAlwaysInFront;\n+  }\n+\n+  public void setBorderAlwaysInFront(Boolean borderAlwaysInFront) {\n+    this.borderAlwaysInFront = borderAlwaysInFront;\n+  }\n+\n+  public PageSetup borderAppliesTo(BorderAppliesToEnum borderAppliesTo) {\n+    this.borderAppliesTo = borderAppliesTo;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies which pages the page border is printed on.\n     * @return borderAppliesTo\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies which pages the page border is printed on.\")\n-    public BorderAppliesToEnum getBorderAppliesTo() {\n-        return borderAppliesTo;\n-    }\n \n-    public void setBorderAppliesTo(BorderAppliesToEnum borderAppliesTo) {\n-        this.borderAppliesTo = borderAppliesTo;\n-    }\n \n-    public PageSetup borderDistanceFrom(BorderDistanceFromEnum borderDistanceFrom) {\n-        this.borderDistanceFrom = borderDistanceFrom;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies which pages the page border is printed on.\")\n+  public BorderAppliesToEnum getBorderAppliesTo() {\n+    return borderAppliesTo;\n+  }\n+\n+  public void setBorderAppliesTo(BorderAppliesToEnum borderAppliesTo) {\n+    this.borderAppliesTo = borderAppliesTo;\n+  }\n+\n+  public PageSetup borderDistanceFrom(BorderDistanceFromEnum borderDistanceFrom) {\n+    this.borderDistanceFrom = borderDistanceFrom;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from\n      * the text it surrounds.\n     * @return borderDistanceFrom\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from the text it surrounds.\")\n-    public BorderDistanceFromEnum getBorderDistanceFrom() {\n-        return borderDistanceFrom;\n-    }\n \n-    public void setBorderDistanceFrom(BorderDistanceFromEnum borderDistanceFrom) {\n-        this.borderDistanceFrom = borderDistanceFrom;\n-    }\n \n-    public PageSetup bottomMargin(Double bottomMargin) {\n-        this.bottomMargin = bottomMargin;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from the text it surrounds.\")\n+  public BorderDistanceFromEnum getBorderDistanceFrom() {\n+    return borderDistanceFrom;\n+  }\n+\n+  public void setBorderDistanceFrom(BorderDistanceFromEnum borderDistanceFrom) {\n+    this.borderDistanceFrom = borderDistanceFrom;\n+  }\n+\n+  public PageSetup bottomMargin(Double bottomMargin) {\n+    this.bottomMargin = bottomMargin;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body\n      * text.\n     * @return bottomMargin\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.\")\n-    public Double getBottomMargin() {\n-        return bottomMargin;\n-    }\n \n-    public void setBottomMargin(Double bottomMargin) {\n-        this.bottomMargin = bottomMargin;\n-    }\n \n-    public PageSetup differentFirstPageHeaderFooter(Boolean differentFirstPageHeaderFooter) {\n-        this.differentFirstPageHeaderFooter = differentFirstPageHeaderFooter;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.\")\n+  public Double getBottomMargin() {\n+    return bottomMargin;\n+  }\n+\n+  public void setBottomMargin(Double bottomMargin) {\n+    this.bottomMargin = bottomMargin;\n+  }\n+\n+  public PageSetup differentFirstPageHeaderFooter(Boolean differentFirstPageHeaderFooter) {\n+    this.differentFirstPageHeaderFooter = differentFirstPageHeaderFooter;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets true if a different header or footer is used on the first page.\n     * @return differentFirstPageHeaderFooter\n     **/\n-    @ApiModelProperty(value = \"Gets or sets true if a different header or footer is used on the first page.\")\n-    public Boolean getDifferentFirstPageHeaderFooter() {\n-        return differentFirstPageHeaderFooter;\n-    }\n \n-    public void setDifferentFirstPageHeaderFooter(Boolean differentFirstPageHeaderFooter) {\n-        this.differentFirstPageHeaderFooter = differentFirstPageHeaderFooter;\n-    }\n \n-    public PageSetup firstPageTray(Integer firstPageTray) {\n-        this.firstPageTray = firstPageTray;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets true if a different header or footer is used on the first page.\")\n+  public Boolean getDifferentFirstPageHeaderFooter() {\n+    return differentFirstPageHeaderFooter;\n+  }\n+\n+  public void setDifferentFirstPageHeaderFooter(Boolean differentFirstPageHeaderFooter) {\n+    this.differentFirstPageHeaderFooter = differentFirstPageHeaderFooter;\n+  }\n+\n+  public PageSetup firstPageTray(Integer firstPageTray) {\n+    this.firstPageTray = firstPageTray;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the paper tray (bin) to use for the first page of a section.\n      * The value is implementation (printer) specific.\n     * @return firstPageTray\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the paper tray (bin) to use for the first page of a section. The value is implementation (printer) specific.\")\n-    public Integer getFirstPageTray() {\n-        return firstPageTray;\n-    }\n \n-    public void setFirstPageTray(Integer firstPageTray) {\n-        this.firstPageTray = firstPageTray;\n-    }\n \n-    public PageSetup footerDistance(Double footerDistance) {\n-        this.footerDistance = footerDistance;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the paper tray (bin) to use for the first page of a section. The value is implementation (printer) specific.\")\n+  public Integer getFirstPageTray() {\n+    return firstPageTray;\n+  }\n+\n+  public void setFirstPageTray(Integer firstPageTray) {\n+    this.firstPageTray = firstPageTray;\n+  }\n+\n+  public PageSetup footerDistance(Double footerDistance) {\n+    this.footerDistance = footerDistance;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the footer and the bottom of the page.\n     * @return footerDistance\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the footer and the bottom of the page.\")\n-    public Double getFooterDistance() {\n-        return footerDistance;\n-    }\n \n-    public void setFooterDistance(Double footerDistance) {\n-        this.footerDistance = footerDistance;\n-    }\n \n-    public PageSetup gutter(Double gutter) {\n-        this.gutter = gutter;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the footer and the bottom of the page.\")\n+  public Double getFooterDistance() {\n+    return footerDistance;\n+  }\n+\n+  public void setFooterDistance(Double footerDistance) {\n+    this.footerDistance = footerDistance;\n+  }\n+\n+  public PageSetup gutter(Double gutter) {\n+    this.gutter = gutter;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the amount of extra space added to the margin for document binding.\n     * @return gutter\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the amount of extra space added to the margin for document binding.\")\n-    public Double getGutter() {\n-        return gutter;\n-    }\n \n-    public void setGutter(Double gutter) {\n-        this.gutter = gutter;\n-    }\n \n-    public PageSetup headerDistance(Double headerDistance) {\n-        this.headerDistance = headerDistance;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the amount of extra space added to the margin for document binding.\")\n+  public Double getGutter() {\n+    return gutter;\n+  }\n+\n+  public void setGutter(Double gutter) {\n+    this.gutter = gutter;\n+  }\n+\n+  public PageSetup headerDistance(Double headerDistance) {\n+    this.headerDistance = headerDistance;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the header and the top of the page.\n     * @return headerDistance\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the header and the top of the page.\")\n-    public Double getHeaderDistance() {\n-        return headerDistance;\n-    }\n \n-    public void setHeaderDistance(Double headerDistance) {\n-        this.headerDistance = headerDistance;\n-    }\n \n-    public PageSetup leftMargin(Double leftMargin) {\n-        this.leftMargin = leftMargin;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the header and the top of the page.\")\n+  public Double getHeaderDistance() {\n+    return headerDistance;\n+  }\n+\n+  public void setHeaderDistance(Double headerDistance) {\n+    this.headerDistance = headerDistance;\n+  }\n+\n+  public PageSetup leftMargin(Double leftMargin) {\n+    this.leftMargin = leftMargin;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.\n     * @return leftMargin\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.\")\n-    public Double getLeftMargin() {\n-        return leftMargin;\n-    }\n \n-    public void setLeftMargin(Double leftMargin) {\n-        this.leftMargin = leftMargin;\n-    }\n \n-    public PageSetup lineNumberCountBy(Integer lineNumberCountBy) {\n-        this.lineNumberCountBy = lineNumberCountBy;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.\")\n+  public Double getLeftMargin() {\n+    return leftMargin;\n+  }\n+\n+  public void setLeftMargin(Double leftMargin) {\n+    this.leftMargin = leftMargin;\n+  }\n+\n+  public PageSetup lineNumberCountBy(Integer lineNumberCountBy) {\n+    this.lineNumberCountBy = lineNumberCountBy;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the numeric increment for line numbers.\n     * @return lineNumberCountBy\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the numeric increment for line numbers.\")\n-    public Integer getLineNumberCountBy() {\n-        return lineNumberCountBy;\n-    }\n \n-    public void setLineNumberCountBy(Integer lineNumberCountBy) {\n-        this.lineNumberCountBy = lineNumberCountBy;\n-    }\n \n-    public PageSetup lineNumberDistanceFromText(Double lineNumberDistanceFromText) {\n-        this.lineNumberDistanceFromText = lineNumberDistanceFromText;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the numeric increment for line numbers.\")\n+  public Integer getLineNumberCountBy() {\n+    return lineNumberCountBy;\n+  }\n+\n+  public void setLineNumberCountBy(Integer lineNumberCountBy) {\n+    this.lineNumberCountBy = lineNumberCountBy;\n+  }\n+\n+  public PageSetup lineNumberDistanceFromText(Double lineNumberDistanceFromText) {\n+    this.lineNumberDistanceFromText = lineNumberDistanceFromText;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets distance between the right edge of line numbers and the left edge of the document.\n     * @return lineNumberDistanceFromText\n     **/\n-    @ApiModelProperty(value = \"Gets or sets distance between the right edge of line numbers and the left edge of the document.\")\n-    public Double getLineNumberDistanceFromText() {\n-        return lineNumberDistanceFromText;\n-    }\n \n-    public void setLineNumberDistanceFromText(Double lineNumberDistanceFromText) {\n-        this.lineNumberDistanceFromText = lineNumberDistanceFromText;\n-    }\n \n-    public PageSetup lineNumberRestartMode(LineNumberRestartModeEnum lineNumberRestartMode) {\n-        this.lineNumberRestartMode = lineNumberRestartMode;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets distance between the right edge of line numbers and the left edge of the document.\")\n+  public Double getLineNumberDistanceFromText() {\n+    return lineNumberDistanceFromText;\n+  }\n+\n+  public void setLineNumberDistanceFromText(Double lineNumberDistanceFromText) {\n+    this.lineNumberDistanceFromText = lineNumberDistanceFromText;\n+  }\n+\n+  public PageSetup lineNumberRestartMode(LineNumberRestartModeEnum lineNumberRestartMode) {\n+    this.lineNumberRestartMode = lineNumberRestartMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new\n      * page or section or runs continuously.\n     * @return lineNumberRestartMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new page or section or runs continuously.\")\n-    public LineNumberRestartModeEnum getLineNumberRestartMode() {\n-        return lineNumberRestartMode;\n-    }\n \n-    public void setLineNumberRestartMode(LineNumberRestartModeEnum lineNumberRestartMode) {\n-        this.lineNumberRestartMode = lineNumberRestartMode;\n-    }\n \n-    public PageSetup lineStartingNumber(Integer lineStartingNumber) {\n-        this.lineStartingNumber = lineStartingNumber;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new page or section or runs continuously.\")\n+  public LineNumberRestartModeEnum getLineNumberRestartMode() {\n+    return lineNumberRestartMode;\n+  }\n+\n+  public void setLineNumberRestartMode(LineNumberRestartModeEnum lineNumberRestartMode) {\n+    this.lineNumberRestartMode = lineNumberRestartMode;\n+  }\n+\n+  public PageSetup lineStartingNumber(Integer lineStartingNumber) {\n+    this.lineStartingNumber = lineStartingNumber;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the starting line number.\n     * @return lineStartingNumber\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the starting line number.\")\n-    public Integer getLineStartingNumber() {\n-        return lineStartingNumber;\n-    }\n \n-    public void setLineStartingNumber(Integer lineStartingNumber) {\n-        this.lineStartingNumber = lineStartingNumber;\n-    }\n \n-    public PageSetup orientation(OrientationEnum orientation) {\n-        this.orientation = orientation;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the starting line number.\")\n+  public Integer getLineStartingNumber() {\n+    return lineStartingNumber;\n+  }\n+\n+  public void setLineStartingNumber(Integer lineStartingNumber) {\n+    this.lineStartingNumber = lineStartingNumber;\n+  }\n+\n+  public PageSetup orientation(OrientationEnum orientation) {\n+    this.orientation = orientation;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the orientation of the page.\n     * @return orientation\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the orientation of the page.\")\n-    public OrientationEnum getOrientation() {\n-        return orientation;\n-    }\n \n-    public void setOrientation(OrientationEnum orientation) {\n-        this.orientation = orientation;\n-    }\n \n-    public PageSetup otherPagesTray(Integer otherPagesTray) {\n-        this.otherPagesTray = otherPagesTray;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the orientation of the page.\")\n+  public OrientationEnum getOrientation() {\n+    return orientation;\n+  }\n+\n+  public void setOrientation(OrientationEnum orientation) {\n+    this.orientation = orientation;\n+  }\n+\n+  public PageSetup otherPagesTray(Integer otherPagesTray) {\n+    this.otherPagesTray = otherPagesTray;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the paper tray (bin) to be used for all but the first page of a section.\n      * The value is implementation (printer) specific.\n     * @return otherPagesTray\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the paper tray (bin) to be used for all but the first page of a section. The value is implementation (printer) specific.\")\n-    public Integer getOtherPagesTray() {\n-        return otherPagesTray;\n-    }\n \n-    public void setOtherPagesTray(Integer otherPagesTray) {\n-        this.otherPagesTray = otherPagesTray;\n-    }\n \n-    public PageSetup pageHeight(Double pageHeight) {\n-        this.pageHeight = pageHeight;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the paper tray (bin) to be used for all but the first page of a section. The value is implementation (printer) specific.\")\n+  public Integer getOtherPagesTray() {\n+    return otherPagesTray;\n+  }\n+\n+  public void setOtherPagesTray(Integer otherPagesTray) {\n+    this.otherPagesTray = otherPagesTray;\n+  }\n+\n+  public PageSetup pageHeight(Double pageHeight) {\n+    this.pageHeight = pageHeight;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the height of the page in points.\n     * @return pageHeight\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the height of the page in points.\")\n-    public Double getPageHeight() {\n-        return pageHeight;\n-    }\n \n-    public void setPageHeight(Double pageHeight) {\n-        this.pageHeight = pageHeight;\n-    }\n \n-    public PageSetup pageNumberStyle(PageNumberStyleEnum pageNumberStyle) {\n-        this.pageNumberStyle = pageNumberStyle;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the height of the page in points.\")\n+  public Double getPageHeight() {\n+    return pageHeight;\n+  }\n+\n+  public void setPageHeight(Double pageHeight) {\n+    this.pageHeight = pageHeight;\n+  }\n+\n+  public PageSetup pageNumberStyle(PageNumberStyleEnum pageNumberStyle) {\n+    this.pageNumberStyle = pageNumberStyle;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the page number format.\n     * @return pageNumberStyle\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the page number format.\")\n-    public PageNumberStyleEnum getPageNumberStyle() {\n-        return pageNumberStyle;\n-    }\n \n-    public void setPageNumberStyle(PageNumberStyleEnum pageNumberStyle) {\n-        this.pageNumberStyle = pageNumberStyle;\n-    }\n \n-    public PageSetup pageStartingNumber(Integer pageStartingNumber) {\n-        this.pageStartingNumber = pageStartingNumber;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the page number format.\")\n+  public PageNumberStyleEnum getPageNumberStyle() {\n+    return pageNumberStyle;\n+  }\n+\n+  public void setPageNumberStyle(PageNumberStyleEnum pageNumberStyle) {\n+    this.pageNumberStyle = pageNumberStyle;\n+  }\n+\n+  public PageSetup pageStartingNumber(Integer pageStartingNumber) {\n+    this.pageStartingNumber = pageStartingNumber;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets the starting page number of the section.\n     * @return pageStartingNumber\n     **/\n-    @ApiModelProperty(value = \"Gets or sets the starting page number of the section.\")\n-    public Integer getPageStartingNumber() {\n-        return pageStartingNumber;\n-    }\n \n-    public void setPageStartingNumber(Integer pageStartingNumber) {\n-        this.pageStartingNumber = pageStartingNumber;\n-    }\n \n-    public PageSetup pageWidth(Double pageWidth) {\n-        this.pageWidth = pageWidth;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets the starting page number of the section.\")\n+  public Integer getPageStartingNumber() {\n+    return pageStartingNumber;\n+  }\n+\n+  public void setPageStartingNumber(Integer pageStartingNumber) {\n+    this.pageStartingNumber = pageStartingNumber;\n+  }\n+\n+  public PageSetup pageWidth(Double pageWidth) {\n+    this.pageWidth = pageWidth;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the width of the page in points.\n     * @return pageWidth\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the width of the page in points.\")\n-    public Double getPageWidth() {\n-        return pageWidth;\n-    }\n \n-    public void setPageWidth(Double pageWidth) {\n-        this.pageWidth = pageWidth;\n-    }\n \n-    public PageSetup paperSize(PaperSizeEnum paperSize) {\n-        this.paperSize = paperSize;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the width of the page in points.\")\n+  public Double getPageWidth() {\n+    return pageWidth;\n+  }\n+\n+  public void setPageWidth(Double pageWidth) {\n+    this.pageWidth = pageWidth;\n+  }\n+\n+  public PageSetup paperSize(PaperSizeEnum paperSize) {\n+    this.paperSize = paperSize;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the paper size.\n     * @return paperSize\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the paper size.\")\n-    public PaperSizeEnum getPaperSize() {\n-        return paperSize;\n-    }\n \n-    public void setPaperSize(PaperSizeEnum paperSize) {\n-        this.paperSize = paperSize;\n-    }\n \n-    public PageSetup restartPageNumbering(Boolean restartPageNumbering) {\n-        this.restartPageNumbering = restartPageNumbering;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the paper size.\")\n+  public PaperSizeEnum getPaperSize() {\n+    return paperSize;\n+  }\n+\n+  public void setPaperSize(PaperSizeEnum paperSize) {\n+    this.paperSize = paperSize;\n+  }\n+\n+  public PageSetup restartPageNumbering(Boolean restartPageNumbering) {\n+    this.restartPageNumbering = restartPageNumbering;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets true if page numbering restarts at the beginning of the section.\n     * @return restartPageNumbering\n     **/\n-    @ApiModelProperty(value = \"Gets or sets true if page numbering restarts at the beginning of the section.\")\n-    public Boolean getRestartPageNumbering() {\n-        return restartPageNumbering;\n-    }\n \n-    public void setRestartPageNumbering(Boolean restartPageNumbering) {\n-        this.restartPageNumbering = restartPageNumbering;\n-    }\n \n-    public PageSetup rightMargin(Double rightMargin) {\n-        this.rightMargin = rightMargin;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets true if page numbering restarts at the beginning of the section.\")\n+  public Boolean getRestartPageNumbering() {\n+    return restartPageNumbering;\n+  }\n+\n+  public void setRestartPageNumbering(Boolean restartPageNumbering) {\n+    this.restartPageNumbering = restartPageNumbering;\n+  }\n+\n+  public PageSetup rightMargin(Double rightMargin) {\n+    this.rightMargin = rightMargin;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the right edge of the page and the right boundary of the body\n      * text.\n     * @return rightMargin\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the right edge of the page and the right boundary of the body text.\")\n-    public Double getRightMargin() {\n-        return rightMargin;\n-    }\n \n-    public void setRightMargin(Double rightMargin) {\n-        this.rightMargin = rightMargin;\n-    }\n \n-    public PageSetup rtlGutter(Boolean rtlGutter) {\n-        this.rtlGutter = rtlGutter;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the right edge of the page and the right boundary of the body text.\")\n+  public Double getRightMargin() {\n+    return rightMargin;\n+  }\n+\n+  public void setRightMargin(Double rightMargin) {\n+    this.rightMargin = rightMargin;\n+  }\n+\n+  public PageSetup rtlGutter(Boolean rtlGutter) {\n+    this.rtlGutter = rtlGutter;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a\n      * left-to-right language.\n     * @return rtlGutter\n     **/\n-    @ApiModelProperty(value = \"Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a left-to-right language.\")\n-    public Boolean getRtlGutter() {\n-        return rtlGutter;\n-    }\n \n-    public void setRtlGutter(Boolean rtlGutter) {\n-        this.rtlGutter = rtlGutter;\n-    }\n \n-    public PageSetup sectionStart(SectionStartEnum sectionStart) {\n-        this.sectionStart = sectionStart;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a left-to-right language.\")\n+  public Boolean getRtlGutter() {\n+    return rtlGutter;\n+  }\n+\n+  public void setRtlGutter(Boolean rtlGutter) {\n+    this.rtlGutter = rtlGutter;\n+  }\n+\n+  public PageSetup sectionStart(SectionStartEnum sectionStart) {\n+    this.sectionStart = sectionStart;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the type of section break for the specified object.\n     * @return sectionStart\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the type of section break for the specified object.\")\n-    public SectionStartEnum getSectionStart() {\n-        return sectionStart;\n-    }\n \n-    public void setSectionStart(SectionStartEnum sectionStart) {\n-        this.sectionStart = sectionStart;\n-    }\n \n-    public PageSetup suppressEndnotes(Boolean suppressEndnotes) {\n-        this.suppressEndnotes = suppressEndnotes;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the type of section break for the specified object.\")\n+  public SectionStartEnum getSectionStart() {\n+    return sectionStart;\n+  }\n+\n+  public void setSectionStart(SectionStartEnum sectionStart) {\n+    this.sectionStart = sectionStart;\n+  }\n+\n+  public PageSetup suppressEndnotes(Boolean suppressEndnotes) {\n+    this.suppressEndnotes = suppressEndnotes;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets true if endnotes are printed at the end of the next section that doesn't suppress endnotes.\n      * Suppressed endnotes are printed before the endnotes in that section.\n     * @return suppressEndnotes\n     **/\n-    @ApiModelProperty(value = \"Gets or sets true if endnotes are printed at the end of the next section that doesn't suppress endnotes. Suppressed endnotes are printed before the endnotes in that section.\")\n-    public Boolean getSuppressEndnotes() {\n-        return suppressEndnotes;\n-    }\n \n-    public void setSuppressEndnotes(Boolean suppressEndnotes) {\n-        this.suppressEndnotes = suppressEndnotes;\n-    }\n \n-    public PageSetup topMargin(Double topMargin) {\n-        this.topMargin = topMargin;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets true if endnotes are printed at the end of the next section that doesn't suppress endnotes. Suppressed endnotes are printed before the endnotes in that section.\")\n+  public Boolean getSuppressEndnotes() {\n+    return suppressEndnotes;\n+  }\n+\n+  public void setSuppressEndnotes(Boolean suppressEndnotes) {\n+    this.suppressEndnotes = suppressEndnotes;\n+  }\n+\n+  public PageSetup topMargin(Double topMargin) {\n+    this.topMargin = topMargin;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.\n     * @return topMargin\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.\")\n-    public Double getTopMargin() {\n-        return topMargin;\n-    }\n \n-    public void setTopMargin(Double topMargin) {\n-        this.topMargin = topMargin;\n-    }\n \n-    public PageSetup verticalAlignment(VerticalAlignmentEnum verticalAlignment) {\n-        this.verticalAlignment = verticalAlignment;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.\")\n+  public Double getTopMargin() {\n+    return topMargin;\n+  }\n+\n+  public void setTopMargin(Double topMargin) {\n+    this.topMargin = topMargin;\n+  }\n+\n+  public PageSetup verticalAlignment(VerticalAlignmentEnum verticalAlignment) {\n+    this.verticalAlignment = verticalAlignment;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets returns or sets the vertical alignment of text on each page in a document or section.\n     * @return verticalAlignment\n     **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the vertical alignment of text on each page in a document or section.\")\n-    public VerticalAlignmentEnum getVerticalAlignment() {\n-        return verticalAlignment;\n-    }\n \n-    public void setVerticalAlignment(VerticalAlignmentEnum verticalAlignment) {\n-        this.verticalAlignment = verticalAlignment;\n-    }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    PageSetup pageSetup = (PageSetup)o;\n-    return\n-        Objects.equals(this.bidi, pageSetup.bidi) &&\n-        Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n-        Objects.equals(this.borderAppliesTo, pageSetup.borderAppliesTo) &&\n-        Objects.equals(this.borderDistanceFrom, pageSetup.borderDistanceFrom) &&\n-        Objects.equals(this.bottomMargin, pageSetup.bottomMargin) &&\n-        Objects.equals(this.differentFirstPageHeaderFooter, pageSetup.differentFirstPageHeaderFooter) &&\n-        Objects.equals(this.firstPageTray, pageSetup.firstPageTray) &&\n-        Objects.equals(this.footerDistance, pageSetup.footerDistance) &&\n-        Objects.equals(this.gutter, pageSetup.gutter) &&\n-        Objects.equals(this.headerDistance, pageSetup.headerDistance) &&\n-        Objects.equals(this.leftMargin, pageSetup.leftMargin) &&\n-        Objects.equals(this.lineNumberCountBy, pageSetup.lineNumberCountBy) &&\n-        Objects.equals(this.lineNumberDistanceFromText, pageSetup.lineNumberDistanceFromText) &&\n-        Objects.equals(this.lineNumberRestartMode, pageSetup.lineNumberRestartMode) &&\n-        Objects.equals(this.lineStartingNumber, pageSetup.lineStartingNumber) &&\n-        Objects.equals(this.orientation, pageSetup.orientation) &&\n-        Objects.equals(this.otherPagesTray, pageSetup.otherPagesTray) &&\n-        Objects.equals(this.pageHeight, pageSetup.pageHeight) &&\n-        Objects.equals(this.pageNumberStyle, pageSetup.pageNumberStyle) &&\n-        Objects.equals(this.pageStartingNumber, pageSetup.pageStartingNumber) &&\n-        Objects.equals(this.pageWidth, pageSetup.pageWidth) &&\n-        Objects.equals(this.paperSize, pageSetup.paperSize) &&\n-        Objects.equals(this.restartPageNumbering, pageSetup.restartPageNumbering) &&\n-        Objects.equals(this.rightMargin, pageSetup.rightMargin) &&\n-        Objects.equals(this.rtlGutter, pageSetup.rtlGutter) &&\n-        Objects.equals(this.sectionStart, pageSetup.sectionStart) &&\n-        Objects.equals(this.suppressEndnotes, pageSetup.suppressEndnotes) &&\n-        Objects.equals(this.topMargin, pageSetup.topMargin) &&\n-        Objects.equals(this.verticalAlignment, pageSetup.verticalAlignment) &&\n-        super.equals(o);\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the vertical alignment of text on each page in a document or section.\")\n+  public VerticalAlignmentEnum getVerticalAlignment() {\n+    return verticalAlignment;\n+  }\n+\n+  public void setVerticalAlignment(VerticalAlignmentEnum verticalAlignment) {\n+    this.verticalAlignment = verticalAlignment;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    PageSetup pageSetup = (PageSetup) o;\n+    return Objects.equals(this.bidi, pageSetup.bidi) &&\n+    Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n+    Objects.equals(this.borderAppliesTo, pageSetup.borderAppliesTo) &&\n+    Objects.equals(this.borderDistanceFrom, pageSetup.borderDistanceFrom) &&\n+    Objects.equals(this.bottomMargin, pageSetup.bottomMargin) &&\n+    Objects.equals(this.differentFirstPageHeaderFooter, pageSetup.differentFirstPageHeaderFooter) &&\n+    Objects.equals(this.firstPageTray, pageSetup.firstPageTray) &&\n+    Objects.equals(this.footerDistance, pageSetup.footerDistance) &&\n+    Objects.equals(this.gutter, pageSetup.gutter) &&\n+    Objects.equals(this.headerDistance, pageSetup.headerDistance) &&\n+    Objects.equals(this.leftMargin, pageSetup.leftMargin) &&\n+    Objects.equals(this.lineNumberCountBy, pageSetup.lineNumberCountBy) &&\n+    Objects.equals(this.lineNumberDistanceFromText, pageSetup.lineNumberDistanceFromText) &&\n+    Objects.equals(this.lineNumberRestartMode, pageSetup.lineNumberRestartMode) &&\n+    Objects.equals(this.lineStartingNumber, pageSetup.lineStartingNumber) &&\n+    Objects.equals(this.orientation, pageSetup.orientation) &&\n+    Objects.equals(this.otherPagesTray, pageSetup.otherPagesTray) &&\n+    Objects.equals(this.pageHeight, pageSetup.pageHeight) &&\n+    Objects.equals(this.pageNumberStyle, pageSetup.pageNumberStyle) &&\n+    Objects.equals(this.pageStartingNumber, pageSetup.pageStartingNumber) &&\n+    Objects.equals(this.pageWidth, pageSetup.pageWidth) &&\n+    Objects.equals(this.paperSize, pageSetup.paperSize) &&\n+    Objects.equals(this.restartPageNumbering, pageSetup.restartPageNumbering) &&\n+    Objects.equals(this.rightMargin, pageSetup.rightMargin) &&\n+    Objects.equals(this.rtlGutter, pageSetup.rtlGutter) &&\n+    Objects.equals(this.sectionStart, pageSetup.sectionStart) &&\n+    Objects.equals(this.suppressEndnotes, pageSetup.suppressEndnotes) &&\n+    Objects.equals(this.topMargin, pageSetup.topMargin) &&\n+    Objects.equals(this.verticalAlignment, pageSetup.verticalAlignment) &&\n+    super.equals(o);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(bidi, borderAlwaysInFront, borderAppliesTo, borderDistanceFrom, bottomMargin, differentFirstPageHeaderFooter, firstPageTray, footerDistance, gutter, headerDistance, leftMargin, lineNumberCountBy, lineNumberDistanceFromText, lineNumberRestartMode, lineStartingNumber, orientation, otherPagesTray, pageHeight, pageNumberStyle, pageStartingNumber, pageWidth, paperSize, restartPageNumbering, rightMargin, rtlGutter, sectionStart, suppressEndnotes, topMargin, verticalAlignment, super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -1204,10 +1382,12 @@ public class PageSetup extends LinkElement {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1361
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/401/PageSetup.java\nindex cbbdf86ad09..7ef7fb5f449 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/401/PageSetup.java\n@@ -1123,7 +1123,7 @@ public class PageSetup extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PageSetup pageSetup = (PageSetup)o;\n+    PageSetup pageSetup = (PageSetup) o;\n     return\n         Objects.equals(this.bidi, pageSetup.bidi) &&\n         Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/401/PageSetup.java\nindex cbbdf86ad09..7ef7fb5f449 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/401/PageSetup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/401/PageSetup.java\n@@ -1123,7 +1123,7 @@ public class PageSetup extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PageSetup pageSetup = (PageSetup)o;\n+    PageSetup pageSetup = (PageSetup) o;\n     return\n         Objects.equals(this.bidi, pageSetup.bidi) &&\n         Objects.equals(this.borderAlwaysInFront, pageSetup.borderAlwaysInFront) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}