{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3966",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "148",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "208",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3966/AtomicBroadcastState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3966/AtomicBroadcastState.java\nindex 08859e48bea..fdae31a8f1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3966/AtomicBroadcastState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3966/AtomicBroadcastState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.atomicbroadcast.multipaxos;\n \n import java.net.URI;\n@@ -36,195 +37,192 @@ import static org.neo4j.cluster.com.message.Message.to;\n  * State Machine for implementation of Atomic Broadcast client interface\n  */\n public enum AtomicBroadcastState\n-        implements State<AtomicBroadcastContext, AtomicBroadcastMessage>\n+    implements State<AtomicBroadcastContext, AtomicBroadcastMessage>\n {\n-    start\n+  start\n+      {\n+        @Override\n+        public AtomicBroadcastState handle(AtomicBroadcastContext context,\n+                                           Message<AtomicBroadcastMessage> message,\n+                                           MessageHolder outgoing\n+        )\n+        {\n+\n+          switch (message.getMessageType())\n+          {\n+            case entered:\n             {\n-                @Override\n-                public AtomicBroadcastState handle( AtomicBroadcastContext context,\n-                                                    Message<AtomicBroadcastMessage> message,\n-                                                    MessageHolder outgoing\n-                )\n-                {\n+              return broadcasting;\n+            }\n \n-                    switch ( message.getMessageType() )\n-                    {\n-                        case entered:\n-                        {\n-                            return broadcasting;\n-                        }\n-\n-                        case join:\n-                        {\n-                            return joining;\n-                        }\n-\n-                        default:\n-                        {\n-                            defaultHandling( context, message );\n-                        }\n-                    }\n-\n-                    return this;\n-                }\n-            },\n+            case join:\n+            {\n+              return joining;\n+            }\n \n-    joining\n+            default:\n             {\n-                @Override\n-                public AtomicBroadcastState handle( AtomicBroadcastContext context,\n+              defaultHandling(context, message);\n+            }\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  joining\n+      {\n+        @Override\n+        public AtomicBroadcastState handle(AtomicBroadcastContext context,\n                                            Message<AtomicBroadcastMessage> message,\n                                            MessageHolder outgoing\n-                )\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case failed:\n-                        {\n-                            // Joining failed\n-                            outgoing.offer( internal( ClusterMessage.joinFailure,\n-                                    new TimeoutException( \"Could not join cluster\" ) ) );\n-\n-                            return start;\n-                        }\n-\n-                        case broadcastResponse:\n-                        {\n-                            if ( message.getPayload() instanceof ClusterMessage.ConfigurationChangeState )\n-                            {\n-                                outgoing.offer( message.copyHeadersTo( internal( ClusterMessage.configurationChanged,\n-                                        message.getPayload() ) ) );\n-                            }\n-\n-                            break;\n-                        }\n-\n-                        case entered:\n-                        {\n-                            return broadcasting;\n-                        }\n-\n-                        default:\n-                        {\n-                            defaultHandling( context, message );\n-                        }\n-                    }\n-\n-                    return this;\n-                }\n-            },\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case failed:\n+            {\n+              // Joining failed\n+              outgoing.offer(internal(ClusterMessage.joinFailure,\n+                  new TimeoutException(\"Could not join cluster\")));\n+\n+              return start;\n+            }\n \n-    broadcasting\n+            case broadcastResponse:\n             {\n-                @Override\n-                public AtomicBroadcastState handle( AtomicBroadcastContext context,\n-                                                    Message<AtomicBroadcastMessage> message,\n-                                                    MessageHolder outgoing\n-                )\n+              if (message.getPayload() instanceof ClusterMessage.ConfigurationChangeState)\n+              {\n+                outgoing.offer(message.copyHeadersTo(internal(ClusterMessage.configurationChanged,\n+                    message.getPayload())));\n+              }\n+\n+              break;\n+            }\n+\n+            case entered:\n+            {\n+              return broadcasting;\n+            }\n+\n+            default:\n+            {\n+              defaultHandling(context, message);\n+            }\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  broadcasting\n+      {\n+        @Override\n+        public AtomicBroadcastState handle(AtomicBroadcastContext context,\n+                                           Message<AtomicBroadcastMessage> message,\n+                                           MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case broadcast:\n+            case failed:\n+            {\n+              if (context.hasQuorum())\n+              {\n+                org.neo4j.cluster.InstanceId coordinator = context.getCoordinator();\n+                if (coordinator != null)\n                 {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case broadcast:\n-                        case failed:\n-                        {\n-                            if ( context.hasQuorum() )\n-                            {\n-                                org.neo4j.cluster.InstanceId coordinator = context.getCoordinator();\n-                                if ( coordinator != null )\n-                                {\n-                                    URI coordinatorUri = context.getUriForId( coordinator );\n-                                    outgoing.offer( message.copyHeadersTo(\n-                                            to( ProposerMessage.propose, coordinatorUri, message.getPayload() ) ) );\n-                                    context.setTimeout( \"broadcast-\" + message.getHeader( Message.HEADER_CONVERSATION_ID ),\n-                                            timeout( AtomicBroadcastMessage.broadcastTimeout, message,\n-                                                    message.getPayload() ) );\n-                                }\n-                                else\n-                                {\n-                                    outgoing.offer( message.copyHeadersTo( internal( ProposerMessage.propose,\n-                                            message.getPayload() ), Message.HEADER_CONVERSATION_ID, org.neo4j.cluster.protocol\n-                                            .atomicbroadcast.multipaxos.InstanceId.INSTANCE ) );\n-                                }\n-                            }\n-                            else\n-                            {\n-                                context.getLog( AtomicBroadcastState.class )\n-                                       .warn( \"No quorum and therefor dropping broadcast msg: \" + message.getPayload() );\n-                            }\n-                            break;\n-                        }\n-\n-                        case broadcastResponse:\n-                        {\n-                            context.cancelTimeout( \"broadcast-\" + message.getHeader( Message.HEADER_CONVERSATION_ID ) );\n-\n-                            // TODO FILTER MESSAGES\n-\n-                            if ( message.getPayload() instanceof ClusterMessage.ConfigurationChangeState )\n-                            {\n-                                outgoing.offer( message.copyHeadersTo( internal( ClusterMessage.configurationChanged,\n-                                        message.getPayload() ) ) );\n-                                ClusterMessage.ConfigurationChangeState change = message.getPayload();\n-                                if ( change.getJoinUri() != null )\n-                                {\n-                                    outgoing.offer( message.copyHeadersTo(\n-                                            Message.internal( HeartbeatMessage.i_am_alive,\n-                                                    new HeartbeatMessage.IAmAliveState( change.getJoin() ) ),\n-                                            Message.HEADER_FROM ) );\n-                                }\n-                            }\n-                            else\n-                            {\n-                                context.receive( message.getPayload() );\n-                            }\n-\n-                            break;\n-                        }\n-\n-                        case broadcastTimeout:\n-                        {\n-                            /*\n-                             * There is never the need to rebroadcast on broadcast timeout. The propose message always\n-                             * circulates on the wire until it is accepted - it comes back here when it fails just to\n-                             * check if the coordinator changed (look at \"failed/broadcast\" handling above).\n-                             */\n-//                            outgoing.offer( internal( AtomicBroadcastMessage.broadcast, message.getPayload() ) );\n-                            break;\n-                        }\n+                  URI coordinatorUri = context.getUriForId(coordinator);\n+                  outgoing.offer(message.copyHeadersTo(\n+                      to(ProposerMessage.propose, coordinatorUri, message.getPayload())));\n+                  context.setTimeout(\"broadcast-\" + message.getHeader(Message.HEADER_CONVERSATION_ID),\n+                      timeout(AtomicBroadcastMessage.broadcastTimeout, message,\n+                          message.getPayload()));\n+                } else\n+                {\n+                  outgoing.offer(message.copyHeadersTo(internal(ProposerMessage.propose,\n+                      message.getPayload()), Message.HEADER_CONVERSATION_ID, org.neo4j.cluster.protocol\n+                      .atomicbroadcast.multipaxos.InstanceId.INSTANCE));\n+                }\n+              } else\n+              {\n+                context.getLog(AtomicBroadcastState.class)\n+                    .warn(\"No quorum and therefor dropping broadcast msg: \" + message.getPayload());\n+              }\n+              break;\n+            }\n \n-                        case leave:\n-                        {\n-                            return start;\n-                        }\n+            case broadcastResponse:\n+            {\n+              context.cancelTimeout(\"broadcast-\" + message.getHeader(Message.HEADER_CONVERSATION_ID));\n \n-                        default:\n-                        {\n-                            defaultHandling( context, message );\n-                        }\n-                    }\n+              // TODO FILTER MESSAGES\n \n-                    return this;\n+              if (message.getPayload() instanceof ClusterMessage.ConfigurationChangeState)\n+              {\n+                outgoing.offer(message.copyHeadersTo(internal(ClusterMessage.configurationChanged,\n+                    message.getPayload())));\n+                ClusterMessage.ConfigurationChangeState change = message.getPayload();\n+                if (change.getJoinUri() != null)\n+                {\n+                  outgoing.offer(message.copyHeadersTo(\n+                      Message.internal(HeartbeatMessage.i_am_alive,\n+                          new HeartbeatMessage.IAmAliveState(change.getJoin())),\n+                      Message.HEADER_FROM));\n                 }\n-            };\n+              } else\n+              {\n+                context.receive(message.getPayload());\n+              }\n \n-    private static void defaultHandling( AtomicBroadcastContext context, Message<AtomicBroadcastMessage> message )\n-    {\n-        switch ( message.getMessageType() )\n-        {\n-            case addAtomicBroadcastListener:\n+              break;\n+            }\n+\n+            case broadcastTimeout:\n             {\n-                context.addAtomicBroadcastListener( message.getPayload() );\n-                break;\n+              /*\n+               * There is never the need to rebroadcast on broadcast timeout. The propose message always\n+               * circulates on the wire until it is accepted - it comes back here when it fails just to\n+               * check if the coordinator changed (look at \"failed/broadcast\" handling above).\n+               */\n+//                            outgoing.offer( internal( AtomicBroadcastMessage.broadcast, message.getPayload() ) );\n+              break;\n             }\n \n-            case removeAtomicBroadcastListener:\n+            case leave:\n             {\n-                context.removeAtomicBroadcastListener( message.getPayload() );\n-                break;\n+              return start;\n             }\n \n             default:\n-                break;\n+            {\n+              defaultHandling(context, message);\n+            }\n+          }\n+\n+          return this;\n         }\n+      };\n+\n+  private static void defaultHandling(AtomicBroadcastContext context, Message<AtomicBroadcastMessage> message)\n+  {\n+    switch (message.getMessageType())\n+    {\n+      case addAtomicBroadcastListener:\n+      {\n+        context.addAtomicBroadcastListener(message.getPayload());\n+        break;\n+      }\n+\n+      case removeAtomicBroadcastListener:\n+      {\n+        context.removeAtomicBroadcastListener(message.getPayload());\n+        break;\n+      }\n+\n+      default:\n+        break;\n     }\n+  }\n }\n",
            "diff_size": 269
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}