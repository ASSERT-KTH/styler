{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1938",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1938/LabelScanValueIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1938/LabelScanValueIndexAccessor.java\nindex b77fbbb95ca..88f3a3deae3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1938/LabelScanValueIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1938/LabelScanValueIndexAccessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.labelscan;\n \n import java.io.IOException;\n@@ -31,72 +32,70 @@ import org.neo4j.index.internal.gbptree.Hit;\n  */\n abstract class LabelScanValueIndexAccessor\n {\n-    /**\n-     * {@link RawCursor} to lazily read new {@link LabelScanValue} from.\n-     */\n-    protected final RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor;\n-    /**\n-     * Remove provided cursor from this collection when iterator is exhausted.\n-     */\n-    private final Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed;\n-    /**\n-     * Current base nodeId, i.e. the {@link LabelScanKey#idRange} of the current {@link LabelScanKey}.\n-     */\n-    long baseNodeId;\n-    /**\n-     * Bit set of the current {@link LabelScanValue}.\n-     */\n-    protected long bits;\n-    /**\n-     * LabelId of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n-     */\n-    private int prevLabel = -1;\n-    /**\n-     * IdRange of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n-     */\n-    private long prevRange = -1;\n-    /**\n-     * Indicate provided cursor has been closed.\n-     */\n-    protected boolean closed;\n+  /**\n+   * {@link RawCursor} to lazily read new {@link LabelScanValue} from.\n+   */\n+  protected final RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException> cursor;\n+  /**\n+   * Remove provided cursor from this collection when iterator is exhausted.\n+   */\n+  private final Collection<RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException>> toRemoveFromWhenClosed;\n+  /**\n+   * Current base nodeId, i.e. the {@link LabelScanKey#idRange} of the current {@link LabelScanKey}.\n+   */\n+  long baseNodeId;\n+  /**\n+   * Bit set of the current {@link LabelScanValue}.\n+   */\n+  protected long bits;\n+  /**\n+   * LabelId of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n+   */\n+  private int prevLabel = -1;\n+  /**\n+   * IdRange of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n+   */\n+  private long prevRange = -1;\n+  /**\n+   * Indicate provided cursor has been closed.\n+   */\n+  protected boolean closed;\n \n-    LabelScanValueIndexAccessor(\n-            Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed,\n-            RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor )\n-    {\n-        this.toRemoveFromWhenClosed = toRemoveFromWhenClosed;\n-        this.cursor = cursor;\n-    }\n+  LabelScanValueIndexAccessor(\n+      Collection<RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException>> toRemoveFromWhenClosed,\n+      RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException> cursor)\n+  {\n+    this.toRemoveFromWhenClosed = toRemoveFromWhenClosed;\n+    this.cursor = cursor;\n+  }\n \n-    boolean keysInOrder( LabelScanKey key )\n-    {\n-        assert key.labelId >= prevLabel : \"Expected to get ordered results, got \" + key +\n-                \" where previous label was \" + prevLabel;\n-        assert key.idRange > prevRange : \"Expected to get ordered results, got \" + key +\n-                \" where previous range was \" + prevRange;\n-        prevLabel = key.labelId;\n-        prevRange = key.idRange;\n-        // Made as a method returning boolean so that it can participate in an assert call.\n-        return true;\n-    }\n+  boolean keysInOrder(LabelScanKey key)\n+  {\n+    assert key.labelId >= prevLabel : \"Expected to get ordered results, got \" + key +\n+        \" where previous label was \" + prevLabel;\n+    assert key.idRange > prevRange : \"Expected to get ordered results, got \" + key +\n+        \" where previous range was \" + prevRange;\n+    prevLabel = key.labelId;\n+    prevRange = key.idRange;\n+    // Made as a method returning boolean so that it can participate in an assert call.\n+    return true;\n+  }\n \n-    public void close()\n+  public void close()\n+  {\n+    if (!closed)\n     {\n-        if ( !closed )\n-        {\n-            try\n-            {\n-                cursor.close();\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new UncheckedIOException( e );\n-            }\n-            finally\n-            {\n-                toRemoveFromWhenClosed.remove( cursor );\n-                closed = true;\n-            }\n-        }\n+      try\n+      {\n+        cursor.close();\n+      } catch (IOException e)\n+      {\n+        throw new UncheckedIOException(e);\n+      } finally\n+      {\n+        toRemoveFromWhenClosed.remove(cursor);\n+        closed = true;\n+      }\n     }\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "146",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1938/LabelScanValueIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1938/LabelScanValueIndexAccessor.java\nindex b77fbbb95ca..a8f1da5ef9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1938/LabelScanValueIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1938/LabelScanValueIndexAccessor.java\n@@ -35,34 +35,38 @@ abstract class LabelScanValueIndexAccessor\n      * {@link RawCursor} to lazily read new {@link LabelScanValue} from.\n      */\n     protected final RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor;\n-    /**\n+\n+/**\n      * Remove provided cursor from this collection when iterator is exhausted.\n      */\n     private final Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed;\n-    /**\n+\n+/**\n      * Current base nodeId, i.e. the {@link LabelScanKey#idRange} of the current {@link LabelScanKey}.\n      */\n     long baseNodeId;\n-    /**\n+\n+/**\n      * Bit set of the current {@link LabelScanValue}.\n      */\n     protected long bits;\n-    /**\n+\n+/**\n      * LabelId of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n      */\n     private int prevLabel = -1;\n-    /**\n+\n+/**\n      * IdRange of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n      */\n     private long prevRange = -1;\n-    /**\n+\n+/**\n      * Indicate provided cursor has been closed.\n      */\n     protected boolean closed;\n \n-    LabelScanValueIndexAccessor(\n-            Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed,\n-            RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor )\n+    LabelScanValueIndexAccessor( Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed, RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor )\n     {\n         this.toRemoveFromWhenClosed = toRemoveFromWhenClosed;\n         this.cursor = cursor;\n@@ -70,11 +74,8 @@ abstract class LabelScanValueIndexAccessor\n \n     boolean keysInOrder( LabelScanKey key )\n     {\n-        assert key.labelId >= prevLabel : \"Expected to get ordered results, got \" + key +\n-                \" where previous label was \" + prevLabel;\n-        assert key.idRange > prevRange : \"Expected to get ordered results, got \" + key +\n-                \" where previous range was \" + prevRange;\n-        prevLabel = key.labelId;\n+        assert key.labelId >= prevLabel : \"Expected to get ordered results, got \" + key + \" where previous label was \" + prevLabel;\n+assert key.idRange> prevRange : \"Expected to get ordered results, got \" + key + \" where previous range was \" + prevRange; prevLabel = key.labelId;\n         prevRange = key.idRange;\n         // Made as a method returning boolean so that it can participate in an assert call.\n         return true;\n@@ -99,4 +100,4 @@ abstract class LabelScanValueIndexAccessor\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "column": "40",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "87",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "39",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "86",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1938/LabelScanValueIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1938/LabelScanValueIndexAccessor.java\nindex b77fbbb95ca..c6c7c2075fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1938/LabelScanValueIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1938/LabelScanValueIndexAccessor.java\n@@ -22,13 +22,13 @@ package org.neo4j.kernel.impl.index.labelscan;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Collection;\n-\n import org.neo4j.cursor.RawCursor;\n import org.neo4j.index.internal.gbptree.Hit;\n \n /**\n  * Base class for iterator and index-progressor of label scans.\n  */\n+\n abstract class LabelScanValueIndexAccessor\n {\n     /**\n@@ -50,19 +50,17 @@ abstract class LabelScanValueIndexAccessor\n     /**\n      * LabelId of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n      */\n-    private int prevLabel = -1;\n+    private int prevLabel = - 1;\n     /**\n      * IdRange of previously retrieved {@link LabelScanKey}, for debugging and asserting purposes.\n      */\n-    private long prevRange = -1;\n+    private long prevRange = - 1;\n     /**\n      * Indicate provided cursor has been closed.\n      */\n     protected boolean closed;\n \n-    LabelScanValueIndexAccessor(\n-            Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed,\n-            RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor )\n+    LabelScanValueIndexAccessor( Collection<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> toRemoveFromWhenClosed, RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor )\n     {\n         this.toRemoveFromWhenClosed = toRemoveFromWhenClosed;\n         this.cursor = cursor;\n@@ -70,10 +68,8 @@ abstract class LabelScanValueIndexAccessor\n \n     boolean keysInOrder( LabelScanKey key )\n     {\n-        assert key.labelId >= prevLabel : \"Expected to get ordered results, got \" + key +\n-                \" where previous label was \" + prevLabel;\n-        assert key.idRange > prevRange : \"Expected to get ordered results, got \" + key +\n-                \" where previous range was \" + prevRange;\n+        assert key.labelId >= prevLabel: \"Expected to get ordered results, got \" + key+ \" where previous label was \" + prevLabel;\n+        assert key.idRange > prevRange: \"Expected to get ordered results, got \" + key+ \" where previous range was \" + prevRange;\n         prevLabel = key.labelId;\n         prevRange = key.idRange;\n         // Made as a method returning boolean so that it can participate in an assert call.\n@@ -82,7 +78,7 @@ abstract class LabelScanValueIndexAccessor\n \n     public void close()\n     {\n-        if ( !closed )\n+        if ( ! closed )\n         {\n             try\n             {\n@@ -99,4 +95,4 @@ abstract class LabelScanValueIndexAccessor\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}