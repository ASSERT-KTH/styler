{
    "project_name": "neo4j-neo4j",
    "error_id": "862",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/862/GlobalTransactionEventListeners.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/862/GlobalTransactionEventListeners.java\nindex 3b30cbf42f4..40182babe71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/862/GlobalTransactionEventListeners.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/862/GlobalTransactionEventListeners.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal.event;\n \n import java.util.Collection;\n@@ -32,7 +33,7 @@ import static java.util.Objects.requireNonNull;\n \n public class GlobalTransactionEventListeners\n {\n-    private final ConcurrentHashMap<String,List<TransactionEventListener<?>>> globalTransactionEventListeners = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<String, List<TransactionEventListener<?>>> globalTransactionEventListeners = new ConcurrentHashMap<>();\n \n     /**\n      * Registers {@code listener} as a listener for transaction events which\n@@ -40,23 +41,23 @@ public class GlobalTransactionEventListeners\n      * transaction.\n      *\n      * @param databaseName name of the database to listener transactions\n-     * @param listener the listener to receive events about different states\n-     *                in transaction life cycles.\n+     * @param listener     the listener to receive events about different states\n+     *                     in transaction life cycles.\n      */\n-    public void registerTransactionEventListener( String databaseName, TransactionEventListener<?> listener )\n+    public void registerTransactionEventListener(String databaseName, TransactionEventListener<?> listener)\n     {\n-        requireNonNull( databaseName, \"Database name is required.\" );\n-        requireNonNull( listener, \"Transaction event listener is required.\" );\n-        globalTransactionEventListeners.compute( databaseName, ( s, transactionEventListeners ) ->\n+        requireNonNull(databaseName, \"Database name is required.\");\n+        requireNonNull(listener, \"Transaction event listener is required.\");\n+        globalTransactionEventListeners.compute(databaseName, (s, transactionEventListeners) ->\n         {\n             List<TransactionEventListener<?>> listeners = transactionEventListeners != null ? transactionEventListeners : new CopyOnWriteArrayList<>();\n-            if ( listeners.contains( listener ) )\n+            if (listeners.contains(listener))\n             {\n                 return listeners;\n             }\n-            listeners.add( listener );\n+            listeners.add(listener);\n             return listeners;\n-        } );\n+        });\n     }\n \n     /**\n@@ -66,32 +67,32 @@ public class GlobalTransactionEventListeners\n      * to calling this method an {@link IllegalStateException} will be thrown.\n      *\n      * @param databaseName name of the database to listener transactions\n-     * @param listener the listener to receive events about different states\n-     *                in transaction life cycles.\n+     * @param listener     the listener to receive events about different states\n+     *                     in transaction life cycles.\n      * @throws IllegalStateException if {@code listener} wasn't registered prior\n      *                               to calling this method.\n      */\n-    public void unregisterTransactionEventListener( String databaseName, TransactionEventListener<?> listener )\n+    public void unregisterTransactionEventListener(String databaseName, TransactionEventListener<?> listener)\n     {\n-        requireNonNull( databaseName );\n-        requireNonNull( listener );\n-        globalTransactionEventListeners.compute( databaseName, ( s, transactionEventListeners ) ->\n+        requireNonNull(databaseName);\n+        requireNonNull(listener);\n+        globalTransactionEventListeners.compute(databaseName, (s, transactionEventListeners) ->\n         {\n-            if ( transactionEventListeners == null || !transactionEventListeners.remove( listener ) )\n+            if (transactionEventListeners == null || !transactionEventListeners.remove(listener))\n             {\n                 throw new IllegalStateException(\n-                        format( \"Transaction event listener `%s` is not registered as listener for database `%s`.\", listener, databaseName ) );\n+                  format(\"Transaction event listener `%s` is not registered as listener for database `%s`.\", listener, databaseName));\n             }\n-            if ( transactionEventListeners.isEmpty() )\n+            if (transactionEventListeners.isEmpty())\n             {\n                 return null;\n             }\n             return transactionEventListeners;\n-        } );\n+        });\n     }\n \n-    public Collection<TransactionEventListener<?>> getDatabaseTransactionEventListeners( String databaseName )\n+    public Collection<TransactionEventListener<?>> getDatabaseTransactionEventListeners(String databaseName)\n     {\n-        return globalTransactionEventListeners.getOrDefault( databaseName, Collections.emptyList() );\n+        return globalTransactionEventListeners.getOrDefault(databaseName, Collections.emptyList());\n     }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}