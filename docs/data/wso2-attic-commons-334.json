{
    "project_name": "wso2-attic-commons",
    "error_id": "334",
    "information": {
        "errors": [
            {
                "line": "87",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        entering(\"XmlDataDaoImpl.set\");\n        _node = val;\n        if (val != null && val.getNamespaceURI() == null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n            _data.setSimpleType(true);\n            String value = _node.getTextContent();\n            if (value.length() <= 255) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/334/XmlDataDaoImpl.java\nindex 6753a65c7a2..25d65ad5b15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/334/XmlDataDaoImpl.java\n@@ -84,7 +84,7 @@ public class XmlDataDaoImpl extends HibernateDao implements XmlDataDAO {\n     public void set(Node val) {\n         entering(\"XmlDataDaoImpl.set\");\n         _node = val;\n-        if (val != null && val.getNamespaceURI() == null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n+        if (val != null && val.getNamespaceURI() ==null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n             _data.setSimpleType(true);\n             String value = _node.getTextContent();\n             if (value.length() <= 255) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/334/XmlDataDaoImpl.java\nindex 6753a65c7a2..36d9a1ab113 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/334/XmlDataDaoImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.daohib.bpel;\n \n import java.util.Iterator;\n@@ -38,155 +39,160 @@ import org.w3c.dom.Text;\n public class XmlDataDaoImpl extends HibernateDao implements XmlDataDAO {\n \n \n-    private static final String QUERY_PROPERTY =\n-            \"from \" + HVariableProperty.class.getName() +\n-                    \" as p where p.xmlData.id = ? and p.name = ?\";\n-\n-    private HXmlData _data;\n-    private Node _node;\n-\n-    /**\n-     * @param hobj\n-     */\n-    public XmlDataDaoImpl(SessionManager sm, HXmlData hobj) {\n-        super(sm, hobj);\n-        entering(\"XmlDataDaoImpl.XmlDataDaoImpl\");\n-        _data = hobj;\n-    }\n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#isNull()\n-     */\n-    public boolean isNull() {\n-        entering(\"XmlDataDaoImpl.isNull\");\n-        return (_data.getSimpleValue() == null && (_data.getData() == null || _data.getData().length == 0));\n-    }\n-\n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#get()\n-     */\n-    public Node get() {\n-        entering(\"XmlDataDaoImpl.get\");\n-        if(_node == null){\n-            _node = prepare();\n-        }\n-        return _node;\n-    }\n-\n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#remove()\n-     */\n-    public void remove() {\n-\n+  private static final String QUERY_PROPERTY =\n+    \"from \" + HVariableProperty.class.getName() +\n+      \" as p where p.xmlData.id = ? and p.name = ?\";\n+\n+  private HXmlData _data;\n+  private Node _node;\n+\n+  /**\n+   * @param hobj\n+   */\n+  public XmlDataDaoImpl(SessionManager sm, HXmlData hobj) {\n+    super(sm, hobj);\n+    entering(\"XmlDataDaoImpl.XmlDataDaoImpl\");\n+    _data = hobj;\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#isNull()\n+   */\n+  public boolean isNull() {\n+    entering(\"XmlDataDaoImpl.isNull\");\n+    return (_data.getSimpleValue() == null && (_data.getData() == null || _data.getData().length == 0));\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#get()\n+   */\n+  public Node get() {\n+    entering(\"XmlDataDaoImpl.get\");\n+    if (_node == null) {\n+      _node = prepare();\n     }\n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#set(org.w3c.dom.Node)\n-     */\n-    public void set(Node val) {\n-        entering(\"XmlDataDaoImpl.set\");\n-        _node = val;\n-        if (val != null && val.getNamespaceURI() == null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n-            _data.setSimpleType(true);\n-            String value = _node.getTextContent();\n-            if (value.length() <= 255) {\n-                _data.setSimpleValue(value);\n-                _data.setData(null);\n-            } else {\n-                _data.setData(value.getBytes());\n-                _data.setSimpleValue(null);\n-            }\n-        } else if (val instanceof Element) {\n-            _data.setSimpleType(false);\n-            _data.setData(DOMUtils.domToString(_node).getBytes());\n-            _data.setSimpleValue(null);\n-        } else {\n-            _data.setSimpleType(true);\n-            _data.setSimpleValue(_node.getNodeValue());\n-            _data.setData(null);\n-        }\n-\n-        getSession().saveOrUpdate(_data);\n-        leaving(\"XmlDataDaoImpl.set\");\n-    }\n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#getProperty(java.lang.String)\n-     */\n-    public String getProperty(String propertyName) {\n-        entering(\"XmlDataDaoImpl.getProperty\");\n-        HVariableProperty p = _getProperty(propertyName);\n-        return p == null\n-                ? null\n-                : p.getValue();\n+    return _node;\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#remove()\n+   */\n+  public void remove() {\n+\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#set(org.w3c.dom.Node)\n+   */\n+  public void set(Node val) {\n+    entering(\"XmlDataDaoImpl.set\");\n+    _node = val;\n+    if (val != null && val.getNamespaceURI() == null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n+      _data.setSimpleType(true);\n+      String value = _node.getTextContent();\n+      if (value.length() <= 255) {\n+        _data.setSimpleValue(value);\n+        _data.setData(null);\n+      } else {\n+        _data.setData(value.getBytes());\n+        _data.setSimpleValue(null);\n+      }\n+    } else if (val instanceof Element) {\n+      _data.setSimpleType(false);\n+      _data.setData(DOMUtils.domToString(_node).getBytes());\n+      _data.setSimpleValue(null);\n+    } else {\n+      _data.setSimpleType(true);\n+      _data.setSimpleValue(_node.getNodeValue());\n+      _data.setData(null);\n     }\n \n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#setProperty(java.lang.String, java.lang.String)\n-     */\n-    public void setProperty(String pname, String pvalue) {\n-        entering(\"XmlDataDaoImpl.setProperty\");\n-        HVariableProperty p = _getProperty(pname);\n-        if(p == null){\n-            p = new HVariableProperty(_data, pname, pvalue);\n-            getSession().save(p);\n+    getSession().saveOrUpdate(_data);\n+    leaving(\"XmlDataDaoImpl.set\");\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#getProperty(java.lang.String)\n+   */\n+  public String getProperty(String propertyName) {\n+    entering(\"XmlDataDaoImpl.getProperty\");\n+    HVariableProperty p = _getProperty(propertyName);\n+    return p == null\n+      ? null\n+      : p.getValue();\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#setProperty(java.lang.String, java.lang.String)\n+   */\n+  public void setProperty(String pname, String pvalue) {\n+    entering(\"XmlDataDaoImpl.setProperty\");\n+    HVariableProperty p = _getProperty(pname);\n+    if (p == null) {\n+      p = new HVariableProperty(_data, pname, pvalue);\n+      getSession().save(p);\n //            _data.addProperty(p);\n-        }else{\n-            p.setValue(pvalue);\n-            getSession().update(p);\n-        }\n-    }\n-\n-    /**\n-     * @see org.apache.ode.bpel.dao.XmlDataDAO#getScopeDAO()\n-     */\n-    public ScopeDAO getScopeDAO() {\n-        entering(\"XmlDataDaoImpl.getScopeDAO\");\n-        return new ScopeDaoImpl(_sm,_data.getScope());\n-    }\n-\n-    private HVariableProperty _getProperty(String propertyName){\n-        entering(\"XmlDataDaoImpl._getProperty\");\n-        Iterator iter;\n-        Query qry = getSession().createQuery(QUERY_PROPERTY);\n-        qry.setLong(0, _data.getId());\n-        qry.setString(1, propertyName);\n-        iter = qry.iterate();\n-        return iter.hasNext()\n-                ? (HVariableProperty)iter.next()\n-                : null;\n+    } else {\n+      p.setValue(pvalue);\n+      getSession().update(p);\n     }\n-\n-    private Node prepare(){\n-        if(_data.isSimpleType()) {\n-            String data;\n-            if (_data.getSimpleValue() != null) {\n-                data = _data.getSimpleValue();\n-            } else {\n-                if(_data.getData() == null || _data.getData().length == 0)\n-                    return null;\n-                data = new String(_data.getData());\n-            }\n-            Document d = DOMUtils.newDocument();\n-            // we create a dummy wrapper element\n-            // prevents some apps from complaining\n-            // when text node is not actual child of document\n-            Element e = d.createElement(\"temporary-simple-type-wrapper\");\n-            Text tnode = d.createTextNode(data);\n-            d.appendChild(e);\n-            e.appendChild(tnode);\n-            return tnode;\n-        } else {\n-            if(_data.getData() == null || _data.getData().length == 0)\n-                return null;\n-            String data = new String(_data.getData());\n-            try{\n-                return DOMUtils.stringToDOM(data);\n-            }catch(Exception e){\n-                throw new RuntimeException(e);\n-            }\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.XmlDataDAO#getScopeDAO()\n+   */\n+  public ScopeDAO getScopeDAO() {\n+    entering(\"XmlDataDaoImpl.getScopeDAO\");\n+    return new ScopeDaoImpl(_sm, _data.getScope());\n+  }\n+\n+  private HVariableProperty _getProperty(String propertyName) {\n+    entering(\"XmlDataDaoImpl._getProperty\");\n+    Iterator iter;\n+    Query qry = getSession().createQuery(QUERY_PROPERTY);\n+    qry.setLong(0, _data.getId());\n+    qry.setString(1, propertyName);\n+    iter = qry.iterate();\n+    return iter.hasNext()\n+      ? (HVariableProperty) iter.next()\n+      : null;\n+  }\n+\n+  private Node prepare() {\n+    if (_data.isSimpleType()) {\n+      String data;\n+      if (_data.getSimpleValue() != null) {\n+        data = _data.getSimpleValue();\n+      } else {\n+        if (_data.getData() == null || _data.getData().length == 0) {\n+          return null;\n         }\n+        data = new String(_data.getData());\n+      }\n+      Document d = DOMUtils.newDocument();\n+      // we create a dummy wrapper element\n+      // prevents some apps from complaining\n+      // when text node is not actual child of document\n+      Element e = d.createElement(\"temporary-simple-type-wrapper\");\n+      Text tnode = d.createTextNode(data);\n+      d.appendChild(e);\n+      e.appendChild(tnode);\n+      return tnode;\n+    } else {\n+      if (_data.getData() == null || _data.getData().length == 0) {\n+        return null;\n+      }\n+      String data = new String(_data.getData());\n+      try {\n+        return DOMUtils.stringToDOM(data);\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n     }\n+  }\n \n-    public String getName() {\n-        return _data.getName();\n-    }\n+  public String getName() {\n+    return _data.getName();\n+  }\n \n }\n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/334/XmlDataDaoImpl.java\nindex 6753a65c7a2..c9d23586b45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/334/XmlDataDaoImpl.java\n@@ -189,4 +189,4 @@ public class XmlDataDaoImpl extends HibernateDao implements XmlDataDAO {\n         return _data.getName();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/334/XmlDataDaoImpl.java\nindex 6753a65c7a2..25d65ad5b15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/334/XmlDataDaoImpl.java\n@@ -84,7 +84,7 @@ public class XmlDataDaoImpl extends HibernateDao implements XmlDataDAO {\n     public void set(Node val) {\n         entering(\"XmlDataDaoImpl.set\");\n         _node = val;\n-        if (val != null && val.getNamespaceURI() == null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n+        if (val != null && val.getNamespaceURI() ==null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n             _data.setSimpleType(true);\n             String value = _node.getTextContent();\n             if (value.length() <= 255) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/334/XmlDataDaoImpl.java\nindex 6753a65c7a2..dd4425b6309 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/334/XmlDataDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/334/XmlDataDaoImpl.java\n@@ -84,8 +84,9 @@ public class XmlDataDaoImpl extends HibernateDao implements XmlDataDAO {\n     public void set(Node val) {\n         entering(\"XmlDataDaoImpl.set\");\n         _node = val;\n-        if (val != null && val.getNamespaceURI() == null && \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n-            _data.setSimpleType(true);\n+        if (val != null && val.getNamespaceURI() == null &&\n+            \"temporary-simple-type-wrapper\".equals(val.getLocalName())) {\n+             _data.setSimpleType(true);\n             String value = _node.getTextContent();\n             if (value.length() <= 255) {\n                 _data.setSimpleValue(value);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}