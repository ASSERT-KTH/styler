{
    "project_name": "neo4j-neo4j",
    "error_id": "1700",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1700/FailedIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1700/FailedIndexProxy.java\nindex e92e8666166..aa8e6905021 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1700/FailedIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1700/FailedIndexProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.nio.file.Path;\n@@ -42,18 +43,18 @@ public class FailedIndexProxy extends AbstractSwallowingIndexProxy\n     private final IndexStatisticsStore indexStatisticsStore;\n     private final Log log;\n \n-    FailedIndexProxy( IndexDescriptor descriptor,\n-            String indexUserDescription,\n-            MinimalIndexAccessor minimalIndexAccessor,\n-            IndexPopulationFailure populationFailure,\n-            IndexStatisticsStore indexStatisticsStore,\n-            LogProvider logProvider )\n+    FailedIndexProxy(IndexDescriptor descriptor,\n+                     String indexUserDescription,\n+                     MinimalIndexAccessor minimalIndexAccessor,\n+                     IndexPopulationFailure populationFailure,\n+                     IndexStatisticsStore indexStatisticsStore,\n+                     LogProvider logProvider)\n     {\n-        super( descriptor, populationFailure );\n+        super(descriptor, populationFailure);\n         this.minimalIndexAccessor = minimalIndexAccessor;\n         this.indexUserDescription = indexUserDescription;\n         this.indexStatisticsStore = indexStatisticsStore;\n-        this.log = logProvider.getLog( getClass() );\n+        this.log = logProvider.getLog(getClass());\n     }\n \n     @Override\n@@ -65,10 +66,10 @@ public class FailedIndexProxy extends AbstractSwallowingIndexProxy\n     @Override\n     public void drop()\n     {\n-        indexStatisticsStore.removeIndex( getDescriptor().getId() );\n+        indexStatisticsStore.removeIndex(getDescriptor().getId());\n         String message = \"FailedIndexProxy#drop index on \" + indexUserDescription + \" dropped due to:\\n\" +\n-                     getPopulationFailure().asString();\n-        log.info( message );\n+          getPopulationFailure().asString();\n+        log.info(message);\n         minimalIndexAccessor.drop();\n     }\n \n@@ -79,20 +80,20 @@ public class FailedIndexProxy extends AbstractSwallowingIndexProxy\n     }\n \n     @Override\n-    public boolean awaitStoreScanCompleted( long time, TimeUnit unit ) throws IndexPopulationFailedKernelException\n+    public boolean awaitStoreScanCompleted(long time, TimeUnit unit) throws IndexPopulationFailedKernelException\n     {\n         throw failureCause();\n     }\n \n     private IndexPopulationFailedKernelException failureCause()\n     {\n-        return getPopulationFailure().asIndexPopulationFailure( getDescriptor().schema(), indexUserDescription );\n+        return getPopulationFailure().asIndexPopulationFailure(getDescriptor().schema(), indexUserDescription);\n     }\n \n     @Override\n     public void activate()\n     {\n-        throw new UnsupportedOperationException( \"Cannot activate a failed index.\" );\n+        throw new UnsupportedOperationException(\"Cannot activate a failed index.\");\n     }\n \n     @Override\n@@ -102,7 +103,7 @@ public class FailedIndexProxy extends AbstractSwallowingIndexProxy\n     }\n \n     @Override\n-    public void validateBeforeCommit( Value[] tuple, long entityId )\n+    public void validateBeforeCommit(Value[] tuple, long entityId)\n     {\n     }\n \n@@ -113,7 +114,7 @@ public class FailedIndexProxy extends AbstractSwallowingIndexProxy\n     }\n \n     @Override\n-    public Map<String,Value> indexConfig()\n+    public Map<String, Value> indexConfig()\n     {\n         return minimalIndexAccessor.indexConfig();\n     }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}