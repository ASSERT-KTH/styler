{
    "project_name": "twilio-twilio-java",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "247",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler/10/UsageRecordReader.java\nindex 8f24dda0106..a0badccea9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler/10/UsageRecordReader.java\n@@ -244,7 +244,7 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/intellij/10/UsageRecordReader.java\nindex 8f24dda0106..67c669f3bb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/intellij/10/UsageRecordReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.supersim.v1;\n@@ -244,7 +244,7 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/codebuff/10/UsageRecordReader.java\nindex 8f24dda0106..e858d78b645 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/codebuff/10/UsageRecordReader.java\n@@ -19,13 +19,13 @@ import com.twilio.http.Request;\n import com.twilio.http.Response;\n import com.twilio.http.TwilioRestClient;\n import com.twilio.rest.Domains;\n-\n import java.time.ZonedDateTime;\n \n /**\n  * PLEASE NOTE that this class contains beta products that are subject to\n  * change. Use them with caution.\n  */\n+\n public class UsageRecordReader extends Reader<UsageRecord> {\n     private String sim;\n     private String fleet;\n@@ -44,6 +44,7 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      *            representing usage incurred by this Super SIM.\n      * @return this\n      */\n+\n     public UsageRecordReader setSim(final String sim) {\n         this.sim = sim;\n         return this;\n@@ -59,6 +60,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      *              resource at the time the usage occurred.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setFleet(final String fleet) {\n         this.fleet = fleet;\n         return this;\n@@ -72,6 +75,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      *                representing usage on this network.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setNetwork(final String network) {\n         this.network = network;\n         return this;\n@@ -85,6 +90,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      *                   representing usage in this country.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setIsoCountry(final String isoCountry) {\n         this.isoCountry = isoCountry;\n         return this;\n@@ -99,6 +106,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param group Dimension over which to aggregate usage records.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setGroup(final UsageRecord.Group group) {\n         this.group = group;\n         return this;\n@@ -114,6 +123,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      *                    `all`.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setGranularity(final UsageRecord.Granularity granularity) {\n         this.granularity = granularity;\n         return this;\n@@ -127,6 +138,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param startTime Only include usage that occurred at or after this time.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setStartTime(final ZonedDateTime startTime) {\n         this.startTime = startTime;\n         return this;\n@@ -140,6 +153,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param endTime Only include usage that occurred before this time.\n      * @return this\n      */\n+\n+\n     public UsageRecordReader setEndTime(final ZonedDateTime endTime) {\n         this.endTime = endTime;\n         return this;\n@@ -151,6 +166,7 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param client TwilioRestClient with which to make the request\n      * @return UsageRecord ResourceSet\n      */\n+\n     @Override\n     public ResourceSet<UsageRecord> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -162,14 +178,11 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param client TwilioRestClient with which to make the request\n      * @return UsageRecord ResourceSet\n      */\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<UsageRecord> firstPage(final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            Domains.SUPERSIM.toString(),\n-            \"/v1/UsageRecords\"\n-        );\n+        Request request = new Request(HttpMethod.GET, Domains.SUPERSIM.toString(), \"/v1/UsageRecords\");\n \n         addQueryParams(request);\n         return pageForRequest(client, request);\n@@ -182,14 +195,12 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param client TwilioRestClient with which to make the request\n      * @return UsageRecord ResourceSet\n      */\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<UsageRecord> getPage(final String targetUrl, final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+    public Page<UsageRecord> getPage(final String targetUrl,\n+                                     final TwilioRestClient client) {\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -200,13 +211,11 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n     @Override\n     public Page<UsageRecord> nextPage(final Page<UsageRecord> page,\n                                       final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getNextPageUrl(Domains.SUPERSIM.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getNextPageUrl(Domains.SUPERSIM.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -217,13 +226,11 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n     @Override\n     public Page<UsageRecord> previousPage(final Page<UsageRecord> page,\n                                           final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getPreviousPageUrl(Domains.SUPERSIM.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getPreviousPageUrl(Domains.SUPERSIM.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -234,9 +241,11 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<UsageRecord> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<UsageRecord> pageForRequest(final TwilioRestClient client,\n+                                             final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"UsageRecord read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {\n@@ -244,7 +253,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n@@ -252,7 +262,7 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n             response.getContent(),\n             UsageRecord.class,\n             client.getObjectMapper()\n-        );\n+               );\n     }\n \n     /**\n@@ -260,6 +270,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (sim != null) {\n             request.addQueryParam(\"Sim\", sim.toString());\n@@ -286,11 +298,13 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n         }\n \n         if (startTime != null) {\n-            request.addQueryParam(\"StartTime\", startTime.toOffsetDateTime().toString());\n+            request.addQueryParam(\"StartTime\", startTime.toOffsetDateTime()\n+                .toString());\n         }\n \n         if (endTime != null) {\n-            request.addQueryParam(\"EndTime\", endTime.toOffsetDateTime().toString());\n+            request.addQueryParam(\"EndTime\", endTime.toOffsetDateTime()\n+                .toString());\n         }\n \n         if (getPageSize() != null) {\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_random/10/UsageRecordReader.java\nindex 8f24dda0106..a0badccea9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_random/10/UsageRecordReader.java\n@@ -244,7 +244,7 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_three_grams/10/UsageRecordReader.java\nindex 8f24dda0106..7da3762e549 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/10/UsageRecordReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_three_grams/10/UsageRecordReader.java\n@@ -244,7 +244,8 @@ public class UsageRecordReader extends Reader<UsageRecord> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}