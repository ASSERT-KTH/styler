{
    "project_name": "neo4j-neo4j",
    "error_id": "2937",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2937/NumberType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2937/NumberType.java\nindex 62ba2102740..07f0e6f6748 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2937/NumberType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2937/NumberType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.StringJoiner;\n@@ -41,131 +42,131 @@ class NumberType extends Type\n     // long0 (value)\n     // long1 (number type)\n \n-    NumberType( byte typeId )\n+    NumberType(byte typeId)\n     {\n-        super( ValueGroup.NUMBER, typeId, Values.of( Double.NEGATIVE_INFINITY ), Values.of( Double.NaN ) );\n+        super(ValueGroup.NUMBER, typeId, Values.of(Double.NEGATIVE_INFINITY), Values.of(Double.NaN));\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n-        return numberKeySize( state.long1 ) + SIZE_NUMBER_TYPE;\n+        return numberKeySize(state.long1) + SIZE_NUMBER_TYPE;\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from )\n+    void copyValue(GenericKey to, GenericKey from)\n     {\n         to.long0 = from.long0;\n         to.long1 = from.long1;\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n-        return asValue( state.long0, state.long1 );\n+        return asValue(state.long0, state.long1);\n     }\n \n     @Override\n-    int compareValue( GenericKey left, GenericKey right )\n+    int compareValue(GenericKey left, GenericKey right)\n     {\n         return compare(\n-                left.long0, left.long1,\n-                right.long0, right.long1 );\n+          left.long0, left.long1,\n+          right.long0, right.long1);\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        cursor.putByte( (byte) state.long1 );\n-        switch ( (int) state.long1 )\n+        cursor.putByte((byte) state.long1);\n+        switch ((int) state.long1)\n         {\n-        case RawBits.BYTE:\n-            cursor.putByte( (byte) state.long0 );\n-            break;\n-        case RawBits.SHORT:\n-            cursor.putShort( (short) state.long0 );\n-            break;\n-        case RawBits.INT:\n-        case RawBits.FLOAT:\n-            cursor.putInt( (int) state.long0 );\n-            break;\n-        case RawBits.LONG:\n-        case RawBits.DOUBLE:\n-            cursor.putLong( state.long0 );\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Unknown number type \" + state.long1 );\n+            case RawBits.BYTE:\n+                cursor.putByte((byte) state.long0);\n+                break;\n+            case RawBits.SHORT:\n+                cursor.putShort((short) state.long0);\n+                break;\n+            case RawBits.INT:\n+            case RawBits.FLOAT:\n+                cursor.putInt((int) state.long0);\n+                break;\n+            case RawBits.LONG:\n+            case RawBits.DOUBLE:\n+                cursor.putLong(state.long0);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown number type \" + state.long1);\n         }\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n         into.long1 = cursor.getByte();\n-        switch ( (int) into.long1 )\n+        switch ((int) into.long1)\n         {\n-        case RawBits.BYTE:\n-            into.long0 = cursor.getByte();\n-            return true;\n-        case RawBits.SHORT:\n-            into.long0 = cursor.getShort();\n-            return true;\n-        case RawBits.INT:\n-        case RawBits.FLOAT:\n-            into.long0 = cursor.getInt();\n-            return true;\n-        case RawBits.LONG:\n-        case RawBits.DOUBLE:\n-            into.long0 = cursor.getLong();\n-            return true;\n-        default:\n-            return false;\n+            case RawBits.BYTE:\n+                into.long0 = cursor.getByte();\n+                return true;\n+            case RawBits.SHORT:\n+                into.long0 = cursor.getShort();\n+                return true;\n+            case RawBits.INT:\n+            case RawBits.FLOAT:\n+                into.long0 = cursor.getInt();\n+                return true;\n+            case RawBits.LONG:\n+            case RawBits.DOUBLE:\n+                into.long0 = cursor.getLong();\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n-    static int numberKeySize( long long1 )\n+    static int numberKeySize(long long1)\n     {\n-        switch ( (int) long1 )\n+        switch ((int) long1)\n         {\n-        case RawBits.BYTE:\n-            return SIZE_NUMBER_BYTE;\n-        case RawBits.SHORT:\n-            return SIZE_NUMBER_SHORT;\n-        case RawBits.INT:\n-            return SIZE_NUMBER_INT;\n-        case RawBits.LONG:\n-            return SIZE_NUMBER_LONG;\n-        case RawBits.FLOAT:\n-            return SIZE_NUMBER_FLOAT;\n-        case RawBits.DOUBLE:\n-            return SIZE_NUMBER_DOUBLE;\n-        default:\n-            throw new IllegalArgumentException( \"Unknown number type \" + long1 );\n+            case RawBits.BYTE:\n+                return SIZE_NUMBER_BYTE;\n+            case RawBits.SHORT:\n+                return SIZE_NUMBER_SHORT;\n+            case RawBits.INT:\n+                return SIZE_NUMBER_INT;\n+            case RawBits.LONG:\n+                return SIZE_NUMBER_LONG;\n+            case RawBits.FLOAT:\n+                return SIZE_NUMBER_FLOAT;\n+            case RawBits.DOUBLE:\n+                return SIZE_NUMBER_DOUBLE;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown number type \" + long1);\n         }\n     }\n \n-    static NumberValue asValue( long long0, long long1 )\n+    static NumberValue asValue(long long0, long long1)\n     {\n-        return RawBits.asNumberValue( long0, (byte) long1 );\n+        return RawBits.asNumberValue(long0, (byte) long1);\n     }\n \n     static int compare(\n-            long this_long0, long this_long1,\n-            long that_long0, long that_long1 )\n+      long this_long0, long this_long1,\n+      long that_long0, long that_long1)\n     {\n-        return RawBits.compare( this_long0, (byte) this_long1, that_long0, (byte) that_long1 );\n+        return RawBits.compare(this_long0, (byte) this_long1, that_long0, (byte) that_long1);\n     }\n \n-    void write( GenericKey state, long value, byte numberType )\n+    void write(GenericKey state, long value, byte numberType)\n     {\n         state.long0 = value;\n         state.long1 = numberType;\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long0=\" + state.long0 );\n-        joiner.add( \"long1=\" + state.long1 );\n+        joiner.add(\"long0=\" + state.long0);\n+        joiner.add(\"long1=\" + state.long1);\n     }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}