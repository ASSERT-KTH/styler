{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "107",
    "information": {
        "errors": [
            {
                "line": "29",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.clientImpl.Tables;\nimport org.apache.accumulo.core.clientImpl.TabletLocator;\nimport org.apache.accumulo.core.conf.AccumuloConfiguration;\nimport org.apache.accumulo.core.data.Key;\nimport org.apache.accumulo.core.data.TableId;\nimport org.apache.accumulo.core.data.TabletId;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/107/PushdownScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/107/PushdownScheduler.java\nindex 3cab155fab5..a96d6e99fbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/107/PushdownScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/107/PushdownScheduler.java\n@@ -57,161 +57,167 @@ import datawave.webservice.query.configuration.QueryData;\n  * plan that corresponds with those queries\n  */\n public class PushdownScheduler extends Scheduler {\n-    \n-    private static final Logger log = ThreadConfigurableLogger.getLogger(PushdownScheduler.class);\n-    \n-    /**\n-     * Configuration reference.\n-     */\n-    protected final ShardQueryConfiguration config;\n-    /**\n-     * Scanner factory reference.\n-     */\n-    protected final ScannerFactory scannerFactory;\n-    /**\n-     * Count for the number of QueryPlans that we have\n-     */\n-    protected final AtomicInteger count = new AtomicInteger(0);\n-    /**\n-     * BatchScannerSession reference, so that we can close upon completion or error\n-     */\n-    protected BatchScannerSession session = null;\n-    \n-    protected Iterator<Entry<Key,Value>> currentIterator = null;\n-    \n-    protected List<Function<IteratorSetting,IteratorSetting>> customizedFunctionList;\n-    \n-    /**\n-     * Local instance of the table ID\n-     */\n-    protected TableId tableId;\n-    \n-    protected MetadataHelper metadataHelper;\n-    \n-    public PushdownScheduler(ShardQueryConfiguration config, ScannerFactory scannerFactory, MetadataHelperFactory metaFactory) {\n-        this(config, scannerFactory, metaFactory.createMetadataHelper(config.getClient(), config.getMetadataTableName(), config.getAuthorizations()));\n-    }\n-    \n-    protected PushdownScheduler(ShardQueryConfiguration config, ScannerFactory scannerFactory, MetadataHelper helper) {\n-        this.config = config;\n-        this.metadataHelper = helper;\n-        this.scannerFactory = scannerFactory;\n-        customizedFunctionList = Lists.newArrayList();\n-        Preconditions.checkNotNull(config.getClient());\n-    }\n-    \n-    public void addSetting(IteratorSetting customSetting) {\n-        settings.add(customSetting);\n+\n+  private static final Logger log = ThreadConfigurableLogger.getLogger(PushdownScheduler.class);\n+\n+  /**\n+   * Configuration reference.\n+   */\n+  protected final ShardQueryConfiguration config;\n+  /**\n+   * Scanner factory reference.\n+   */\n+  protected final ScannerFactory scannerFactory;\n+  /**\n+   * Count for the number of QueryPlans that we have\n+   */\n+  protected final AtomicInteger count = new AtomicInteger(0);\n+  /**\n+   * BatchScannerSession reference, so that we can close upon completion or error\n+   */\n+  protected BatchScannerSession session = null;\n+\n+  protected Iterator<Entry<Key, Value>> currentIterator = null;\n+\n+  protected List<Function<IteratorSetting, IteratorSetting>> customizedFunctionList;\n+\n+  /**\n+   * Local instance of the table ID\n+   */\n+  protected TableId tableId;\n+\n+  protected MetadataHelper metadataHelper;\n+\n+  public PushdownScheduler(ShardQueryConfiguration config, ScannerFactory scannerFactory,\n+                           MetadataHelperFactory metaFactory) {\n+    this(config, scannerFactory, metaFactory\n+        .createMetadataHelper(config.getClient(), config.getMetadataTableName(), config.getAuthorizations()));\n+  }\n+\n+  protected PushdownScheduler(ShardQueryConfiguration config, ScannerFactory scannerFactory, MetadataHelper helper) {\n+    this.config = config;\n+    this.metadataHelper = helper;\n+    this.scannerFactory = scannerFactory;\n+    customizedFunctionList = Lists.newArrayList();\n+    Preconditions.checkNotNull(config.getClient());\n+  }\n+\n+  public void addSetting(IteratorSetting customSetting) {\n+    settings.add(customSetting);\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see java.lang.Iterable#iterator()\n+   */\n+  @Override\n+  public Iterator<Entry<Key, Value>> iterator() {\n+    if (null == this.config) {\n+      throw new IllegalArgumentException(\"Null configuration provided\");\n     }\n-    \n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see java.lang.Iterable#iterator()\n-     */\n-    @Override\n-    public Iterator<Entry<Key,Value>> iterator() {\n-        if (null == this.config) {\n-            throw new IllegalArgumentException(\"Null configuration provided\");\n-        }\n-        \n-        try {\n-            \n-            return concatIterators();\n-        } catch (AccumuloException | ParseException | TableNotFoundException | AccumuloSecurityException e) {\n-            throw new RuntimeException(e);\n-        }\n-        \n+\n+    try {\n+\n+      return concatIterators();\n+    } catch (AccumuloException | ParseException | TableNotFoundException | AccumuloSecurityException e) {\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * @return\n-     * @throws ParseException\n-     * @throws TableNotFoundException\n-     * @throws AccumuloSecurityException\n-     * @throws AccumuloException\n-     */\n-    protected Iterator<Entry<Key,Value>> concatIterators() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, ParseException {\n-        \n-        String tableName = config.getShardTableName();\n-        \n-        Set<Authorizations> auths = config.getAuthorizations();\n-        \n-        TabletLocator tl;\n-        \n-        AccumuloClient client = config.getClient();\n-        if (client instanceof InMemoryAccumuloClient) {\n-            tl = new InMemoryTabletLocator();\n-            tableId = TableId.of(config.getTableName());\n-        } else {\n-            ClientContext ctx = AccumuloConnectionFactory.getClientContext(client);\n-            tableId = Tables.getTableId(ctx, tableName);\n-            tl = TabletLocator.getLocator(ctx, tableId);\n-        }\n-        Iterator<List<ScannerChunk>> chunkIter = Iterators.transform(getQueryDataIterator(), new PushdownFunction(tl, config, settings, tableId));\n-        \n-        try {\n-            session = scannerFactory.newQueryScanner(tableName, auths, config.getQuery());\n-            \n-            if (config.getSpeculativeScanning()) {\n-                session.setSpeculativeScanning(true);\n-            }\n-            \n-            session.addVisitor(new VisitorFunction(config, metadataHelper));\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-        \n-        session.setScanLimit(config.getMaxDocScanTimeout());\n-        \n-        if (config.getBackoffEnabled()) {\n-            session.setBackoffEnabled(true);\n-        }\n-        \n-        session.setChunkIter(chunkIter);\n-        \n-        session.setTabletLocator(tl);\n-        \n-        session.updateIdentifier(config.getQuery().getId().toString());\n-        \n-        return session;\n+\n+  }\n+\n+  /**\n+   * @return\n+   * @throws ParseException\n+   * @throws TableNotFoundException\n+   * @throws AccumuloSecurityException\n+   * @throws AccumuloException\n+   */\n+  protected Iterator<Entry<Key, Value>> concatIterators()\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException, ParseException {\n+\n+    String tableName = config.getShardTableName();\n+\n+    Set<Authorizations> auths = config.getAuthorizations();\n+\n+    TabletLocator tl;\n+\n+    AccumuloClient client = config.getClient();\n+    if (client instanceof InMemoryAccumuloClient) {\n+      tl = new InMemoryTabletLocator();\n+      tableId = TableId.of(config.getTableName());\n+    } else {\n+      ClientContext ctx = AccumuloConnectionFactory.getClientContext(client);\n+      tableId = Tables.getTableId(ctx, tableName);\n+      tl = TabletLocator.getLocator(ctx, tableId);\n     }\n-    \n-    protected Iterator<QueryData> getQueryDataIterator() {\n-        return config.getQueries();\n+    Iterator<List<ScannerChunk>> chunkIter =\n+        Iterators.transform(getQueryDataIterator(), new PushdownFunction(tl, config, settings, tableId));\n+\n+    try {\n+      session = scannerFactory.newQueryScanner(tableName, auths, config.getQuery());\n+\n+      if (config.getSpeculativeScanning()) {\n+        session.setSpeculativeScanning(true);\n+      }\n+\n+      session.addVisitor(new VisitorFunction(config, metadataHelper));\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n     }\n-    \n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see java.io.Closeable#close()\n-     */\n-    @Override\n-    public void close() throws IOException {\n-        if (session != null)\n-            scannerFactory.close(session);\n-        \n-        log.debug(\"Ran \" + count.get() + \" queries for a single user query\");\n+\n+    session.setScanLimit(config.getMaxDocScanTimeout());\n+\n+    if (config.getBackoffEnabled()) {\n+      session.setBackoffEnabled(true);\n     }\n-    \n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see Scheduler#createBatchScanner(ShardQueryConfiguration, datawave.query.tables.ScannerFactory, datawave.webservice.query.configuration.QueryData)\n-     */\n-    @Override\n-    public BatchScanner createBatchScanner(ShardQueryConfiguration config, ScannerFactory scannerFactory, QueryData qd) throws TableNotFoundException {\n-        return ShardQueryLogic.createBatchScanner(config, scannerFactory, qd);\n+\n+    session.setChunkIter(chunkIter);\n+\n+    session.setTabletLocator(tl);\n+\n+    session.updateIdentifier(config.getQuery().getId().toString());\n+\n+    return session;\n+  }\n+\n+  protected Iterator<QueryData> getQueryDataIterator() {\n+    return config.getQueries();\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see java.io.Closeable#close()\n+   */\n+  @Override\n+  public void close() throws IOException {\n+    if (session != null) {\n+      scannerFactory.close(session);\n     }\n-    \n-    @Override\n-    public ScanSessionStats getSchedulerStats() {\n-        \n-        ScanSessionStats stats = null;\n-        if (null != session) {\n-            stats = session.getStatistics();\n-        }\n-        return stats;\n+\n+    log.debug(\"Ran \" + count.get() + \" queries for a single user query\");\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see Scheduler#createBatchScanner(ShardQueryConfiguration, datawave.query.tables.ScannerFactory, datawave.webservice.query.configuration.QueryData)\n+   */\n+  @Override\n+  public BatchScanner createBatchScanner(ShardQueryConfiguration config, ScannerFactory scannerFactory, QueryData qd)\n+      throws TableNotFoundException {\n+    return ShardQueryLogic.createBatchScanner(config, scannerFactory, qd);\n+  }\n+\n+  @Override\n+  public ScanSessionStats getSchedulerStats() {\n+\n+    ScanSessionStats stats = null;\n+    if (null != session) {\n+      stats = session.getStatistics();\n     }\n-    \n+    return stats;\n+  }\n+\n }\n",
            "diff_size": 201
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/107/PushdownScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/107/PushdownScheduler.java\nindex 3cab155fab5..f351f183bfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/107/PushdownScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/107/PushdownScheduler.java\n@@ -214,4 +214,4 @@ public class PushdownScheduler extends Scheduler {\n         return stats;\n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/107/PushdownScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/107/PushdownScheduler.java\nindex 3cab155fab5..0012e9e6e67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/107/PushdownScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/107/PushdownScheduler.java\n@@ -6,7 +6,6 @@ import java.util.List;\n import java.util.Map.Entry;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import datawave.accumulo.inmemory.InMemoryAccumuloClient;\n import datawave.query.config.ShardQueryConfiguration;\n import datawave.query.tables.ShardQueryLogic;\n@@ -35,12 +34,10 @@ import org.apache.accumulo.core.dataImpl.TabletIdImpl;\n import org.apache.accumulo.core.security.Authorizations;\n import org.apache.commons.jexl2.parser.ParseException;\n import org.apache.log4j.Logger;\n-\n import com.google.common.base.Function;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Iterators;\n import com.google.common.collect.Lists;\n-\n import datawave.query.config.ShardQueryConfiguration;\n import datawave.query.tables.BatchScannerSession;\n import datawave.query.tables.ScannerFactory;\n@@ -56,8 +53,9 @@ import datawave.webservice.query.configuration.QueryData;\n  * Purpose: Pushes down individual queries to the Tservers. Is aware that each server may have a different query, thus bins ranges per tserver and keeps the\n  * plan that corresponds with those queries\n  */\n+\n+\n public class PushdownScheduler extends Scheduler {\n-    \n     private static final Logger log = ThreadConfigurableLogger.getLogger(PushdownScheduler.class);\n     \n     /**\n@@ -76,22 +74,22 @@ public class PushdownScheduler extends Scheduler {\n      * BatchScannerSession reference, so that we can close upon completion or error\n      */\n     protected BatchScannerSession session = null;\n-    \n     protected Iterator<Entry<Key,Value>> currentIterator = null;\n-    \n     protected List<Function<IteratorSetting,IteratorSetting>> customizedFunctionList;\n     \n     /**\n      * Local instance of the table ID\n      */\n     protected TableId tableId;\n-    \n     protected MetadataHelper metadataHelper;\n-    \n+\n     public PushdownScheduler(ShardQueryConfiguration config, ScannerFactory scannerFactory, MetadataHelperFactory metaFactory) {\n-        this(config, scannerFactory, metaFactory.createMetadataHelper(config.getClient(), config.getMetadataTableName(), config.getAuthorizations()));\n+        this(config,\n+            scannerFactory,\n+                metaFactory.createMetadataHelper(config.getClient(), config.getMetadataTableName(), config.getAuthorizations()));\n     }\n-    \n+\n+\n     protected PushdownScheduler(ShardQueryConfiguration config, ScannerFactory scannerFactory, MetadataHelper helper) {\n         this.config = config;\n         this.metadataHelper = helper;\n@@ -99,7 +97,7 @@ public class PushdownScheduler extends Scheduler {\n         customizedFunctionList = Lists.newArrayList();\n         Preconditions.checkNotNull(config.getClient());\n     }\n-    \n+\n     public void addSetting(IteratorSetting customSetting) {\n         settings.add(customSetting);\n     }\n@@ -109,19 +107,18 @@ public class PushdownScheduler extends Scheduler {\n      * \n      * @see java.lang.Iterable#iterator()\n      */\n+\n     @Override\n     public Iterator<Entry<Key,Value>> iterator() {\n         if (null == this.config) {\n             throw new IllegalArgumentException(\"Null configuration provided\");\n         }\n-        \n+\n         try {\n-            \n             return concatIterators();\n         } catch (AccumuloException | ParseException | TableNotFoundException | AccumuloSecurityException e) {\n             throw new RuntimeException(e);\n         }\n-        \n     }\n     \n     /**\n@@ -131,14 +128,11 @@ public class PushdownScheduler extends Scheduler {\n      * @throws AccumuloSecurityException\n      * @throws AccumuloException\n      */\n+\n     protected Iterator<Entry<Key,Value>> concatIterators() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, ParseException {\n-        \n         String tableName = config.getShardTableName();\n-        \n         Set<Authorizations> auths = config.getAuthorizations();\n-        \n         TabletLocator tl;\n-        \n         AccumuloClient client = config.getClient();\n         if (client instanceof InMemoryAccumuloClient) {\n             tl = new InMemoryTabletLocator();\n@@ -148,35 +142,27 @@ public class PushdownScheduler extends Scheduler {\n             tableId = Tables.getTableId(ctx, tableName);\n             tl = TabletLocator.getLocator(ctx, tableId);\n         }\n+\n         Iterator<List<ScannerChunk>> chunkIter = Iterators.transform(getQueryDataIterator(), new PushdownFunction(tl, config, settings, tableId));\n-        \n         try {\n             session = scannerFactory.newQueryScanner(tableName, auths, config.getQuery());\n-            \n             if (config.getSpeculativeScanning()) {\n                 session.setSpeculativeScanning(true);\n             }\n-            \n             session.addVisitor(new VisitorFunction(config, metadataHelper));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n-        \n         session.setScanLimit(config.getMaxDocScanTimeout());\n-        \n         if (config.getBackoffEnabled()) {\n             session.setBackoffEnabled(true);\n         }\n-        \n         session.setChunkIter(chunkIter);\n-        \n         session.setTabletLocator(tl);\n-        \n         session.updateIdentifier(config.getQuery().getId().toString());\n-        \n         return session;\n     }\n-    \n+\n     protected Iterator<QueryData> getQueryDataIterator() {\n         return config.getQueries();\n     }\n@@ -186,11 +172,11 @@ public class PushdownScheduler extends Scheduler {\n      * \n      * @see java.io.Closeable#close()\n      */\n+\n     @Override\n     public void close() throws IOException {\n         if (session != null)\n             scannerFactory.close(session);\n-        \n         log.debug(\"Ran \" + count.get() + \" queries for a single user query\");\n     }\n     \n@@ -199,19 +185,18 @@ public class PushdownScheduler extends Scheduler {\n      * \n      * @see Scheduler#createBatchScanner(ShardQueryConfiguration, datawave.query.tables.ScannerFactory, datawave.webservice.query.configuration.QueryData)\n      */\n+\n     @Override\n     public BatchScanner createBatchScanner(ShardQueryConfiguration config, ScannerFactory scannerFactory, QueryData qd) throws TableNotFoundException {\n         return ShardQueryLogic.createBatchScanner(config, scannerFactory, qd);\n     }\n-    \n+\n     @Override\n     public ScanSessionStats getSchedulerStats() {\n-        \n         ScanSessionStats stats = null;\n         if (null != session) {\n             stats = session.getStatistics();\n         }\n         return stats;\n     }\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}