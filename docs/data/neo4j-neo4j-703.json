{
    "project_name": "neo4j-neo4j",
    "error_id": "703",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/703/CharSeekers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/703/CharSeekers.java\nindex b1f7e032cf1..fd3a095b2ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/703/CharSeekers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/703/CharSeekers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.FileReader;\n@@ -35,42 +36,42 @@ public final class CharSeekers\n     /**\n      * Instantiates a {@link BufferedCharSeeker} with optional {@link ThreadAheadReadable read-ahead} capability.\n      *\n-     * @param reader the {@link CharReadable} which is the source of data, f.ex. a {@link FileReader}.\n-     * @param config {@link Configuration} for the resulting {@link CharSeeker}.\n+     * @param reader    the {@link CharReadable} which is the source of data, f.ex. a {@link FileReader}.\n+     * @param config    {@link Configuration} for the resulting {@link CharSeeker}.\n      * @param readAhead whether or not to start a {@link ThreadAheadReadable read-ahead thread}\n-     * which strives towards always keeping one buffer worth of data read and available from I/O when it's\n-     * time for the {@link BufferedCharSeeker} to read more data.\n+     *                  which strives towards always keeping one buffer worth of data read and available from I/O when it's\n+     *                  time for the {@link BufferedCharSeeker} to read more data.\n      * @return a {@link CharSeeker} with optional {@link ThreadAheadReadable read-ahead} capability.\n      */\n-    public static CharSeeker charSeeker( CharReadable reader, Configuration config, boolean readAhead )\n+    public static CharSeeker charSeeker(CharReadable reader, Configuration config, boolean readAhead)\n     {\n-        if ( readAhead )\n+        if (readAhead)\n         {   // Thread that always has one buffer read ahead\n-            reader = threadAhead( reader, config.bufferSize() );\n+            reader = threadAhead(reader, config.bufferSize());\n         }\n \n         // Give the reader to the char seeker\n-        return new BufferedCharSeeker( new AutoReadingSource( reader, config.bufferSize() ), config );\n+        return new BufferedCharSeeker(new AutoReadingSource(reader, config.bufferSize()), config);\n     }\n \n     /**\n      * Instantiates a {@link BufferedCharSeeker} with optional {@link ThreadAheadReadable read-ahead} capability.\n      *\n-     * @param reader the {@link CharReadable} which is the source of data, f.ex. a {@link FileReader}.\n-     * @param bufferSize buffer size of the seeker and, if enabled, the read-ahead thread.\n-     * @param readAhead whether or not to start a {@link ThreadAheadReadable read-ahead thread}\n-     * which strives towards always keeping one buffer worth of data read and available from I/O when it's\n-     * time for the {@link BufferedCharSeeker} to read more data.\n+     * @param reader             the {@link CharReadable} which is the source of data, f.ex. a {@link FileReader}.\n+     * @param bufferSize         buffer size of the seeker and, if enabled, the read-ahead thread.\n+     * @param readAhead          whether or not to start a {@link ThreadAheadReadable read-ahead thread}\n+     *                           which strives towards always keeping one buffer worth of data read and available from I/O when it's\n+     *                           time for the {@link BufferedCharSeeker} to read more data.\n      * @param quotationCharacter character to interpret quotation character.\n      * @return a {@link CharSeeker} with optional {@link ThreadAheadReadable read-ahead} capability.\n      */\n-    public static CharSeeker charSeeker( CharReadable reader, final int bufferSize, boolean readAhead,\n-            final char quotationCharacter )\n+    public static CharSeeker charSeeker(CharReadable reader, final int bufferSize, boolean readAhead,\n+                                        final char quotationCharacter)\n     {\n         final var config = Configuration.newBuilder()\n-                .withQuotationCharacter( quotationCharacter )\n-                .withBufferSize( bufferSize )\n-                .build();\n-        return charSeeker( reader, config, readAhead );\n+          .withQuotationCharacter(quotationCharacter)\n+          .withBufferSize(bufferSize)\n+          .build();\n+        return charSeeker(reader, config, readAhead);\n     }\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}