{
    "project_name": "neo4j-neo4j",
    "error_id": "741",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/741/DumpUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/741/DumpUtils.java\nindex 4ea4c12b39e..e0f98dd85e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/741/DumpUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/741/DumpUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.utils;\n \n import java.lang.management.ManagementFactory;\n@@ -41,61 +42,61 @@ public final class DumpUtils\n         ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();\n         Properties systemProperties = System.getProperties();\n \n-        return threadDump( threadMxBean, systemProperties );\n+        return threadDump(threadMxBean, systemProperties);\n     }\n \n     /**\n      * Creates threads dump and try to mimic JVM stack trace as much as possible to allow existing analytics tools to be used\n      *\n-     * @param threadMxBean bean to use for thread dump\n+     * @param threadMxBean     bean to use for thread dump\n      * @param systemProperties dumped vm system properties\n      * @return string that contains thread dump\n      */\n-    public static String threadDump( ThreadMXBean threadMxBean, Properties systemProperties )\n+    public static String threadDump(ThreadMXBean threadMxBean, Properties systemProperties)\n     {\n-        ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads( true, true );\n+        ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(true, true);\n \n         // Reproduce JVM stack trace as far as possible to allow existing analytics tools to be used\n-        String vmName = systemProperties.getProperty( \"java.vm.name\" );\n-        String vmVersion = systemProperties.getProperty( \"java.vm.version\" );\n-        String vmInfoString = systemProperties.getProperty( \"java.vm.info\" );\n+        String vmName = systemProperties.getProperty(\"java.vm.name\");\n+        String vmVersion = systemProperties.getProperty(\"java.vm.version\");\n+        String vmInfoString = systemProperties.getProperty(\"java.vm.info\");\n \n         StringBuilder sb = new StringBuilder();\n-        sb.append( String.format( \"Full thread dump %s (%s %s):\\n\\n\", vmName, vmVersion, vmInfoString ) );\n-        for ( ThreadInfo threadInfo : threadInfos )\n+        sb.append(String.format(\"Full thread dump %s (%s %s):\\n\\n\", vmName, vmVersion, vmInfoString));\n+        for (ThreadInfo threadInfo : threadInfos)\n         {\n-            sb.append( String.format( \"\\\"%s\\\" #%d\\n\", threadInfo.getThreadName(), threadInfo.getThreadId() ) );\n-            sb.append( \"   java.lang.Thread.State: \" ).append( threadInfo.getThreadState() ).append( \"\\n\" );\n+            sb.append(String.format(\"\\\"%s\\\" #%d\\n\", threadInfo.getThreadName(), threadInfo.getThreadId()));\n+            sb.append(\"   java.lang.Thread.State: \").append(threadInfo.getThreadState()).append(\"\\n\");\n \n             StackTraceElement[] stackTrace = threadInfo.getStackTrace();\n-            for ( int i = 0; i < stackTrace.length; i++ )\n+            for (int i = 0; i < stackTrace.length; i++)\n             {\n                 StackTraceElement e = stackTrace[i];\n-                sb.append( \"\\tat \" ).append( e ).append( '\\n' );\n+                sb.append(\"\\tat \").append(e).append('\\n');\n \n                 // First stack element info can be found in the thread state\n-                if ( i == 0 && threadInfo.getLockInfo() != null )\n+                if (i == 0 && threadInfo.getLockInfo() != null)\n                 {\n                     Thread.State ts = threadInfo.getThreadState();\n-                    switch ( ts )\n+                    switch (ts)\n                     {\n-                    case BLOCKED:\n-                        sb.append( \"\\t-  blocked on \" ).append( threadInfo.getLockInfo() ).append( '\\n' );\n-                        break;\n-                    case WAITING:\n-                        sb.append( \"\\t-  waiting on \" ).append( threadInfo.getLockInfo() ).append( '\\n' );\n-                        break;\n-                    case TIMED_WAITING:\n-                        sb.append( \"\\t-  waiting on \" ).append( threadInfo.getLockInfo() ).append( '\\n' );\n-                        break;\n-                    default:\n+                        case BLOCKED:\n+                            sb.append(\"\\t-  blocked on \").append(threadInfo.getLockInfo()).append('\\n');\n+                            break;\n+                        case WAITING:\n+                            sb.append(\"\\t-  waiting on \").append(threadInfo.getLockInfo()).append('\\n');\n+                            break;\n+                        case TIMED_WAITING:\n+                            sb.append(\"\\t-  waiting on \").append(threadInfo.getLockInfo()).append('\\n');\n+                            break;\n+                        default:\n                     }\n                 }\n-                for ( MonitorInfo mi : threadInfo.getLockedMonitors() )\n+                for (MonitorInfo mi : threadInfo.getLockedMonitors())\n                 {\n-                    if ( mi.getLockedStackDepth() == i )\n+                    if (mi.getLockedStackDepth() == i)\n                     {\n-                        sb.append( \"\\t-  locked \" ).append( mi ).append( '\\n' );\n+                        sb.append(\"\\t-  locked \").append(mi).append('\\n');\n                     }\n                 }\n             }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}