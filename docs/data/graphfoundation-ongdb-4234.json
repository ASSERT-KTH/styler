{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4234",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4234/ProcedureSignature.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4234/ProcedureSignature.java\nindex 86a222f84aa..78a10646269 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4234/ProcedureSignature.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4234/ProcedureSignature.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.procs;\n \n import java.util.ArrayList;\n@@ -35,235 +36,238 @@ import static java.util.Collections.unmodifiableList;\n  */\n public class ProcedureSignature\n {\n-    public static final List<FieldSignature> VOID = unmodifiableList( new ArrayList<>() );\n-\n-    private final QualifiedName name;\n-    private final List<FieldSignature> inputSignature;\n-    private final List<FieldSignature> outputSignature;\n-    private final Mode mode;\n-    private final String deprecated;\n-    private final String[] allowed;\n-    private final String description;\n-    private final String warning;\n-    private final boolean eager;\n-    private final boolean caseInsensitive;\n-\n-    public ProcedureSignature(\n-            QualifiedName name,\n-            List<FieldSignature> inputSignature,\n-            List<FieldSignature> outputSignature,\n-            Mode mode,\n-            String deprecated,\n-            String[] allowed,\n-            String description,\n-            String warning,\n-            boolean eager,\n-            boolean caseInsensitive )\n-    {\n-        this.name = name;\n-        this.inputSignature = unmodifiableList( inputSignature );\n-        this.outputSignature = outputSignature == VOID ? outputSignature : unmodifiableList( outputSignature );\n-        this.mode = mode;\n-        this.deprecated = deprecated;\n-        this.allowed = allowed;\n-        this.description = description;\n-        this.warning = warning;\n-        this.eager = eager;\n-        this.caseInsensitive = caseInsensitive;\n-    }\n-\n-    public QualifiedName name()\n-    {\n-        return name;\n-    }\n-\n-    public Mode mode()\n-    {\n-        return mode;\n-    }\n-\n-    public Optional<String> deprecated()\n+  public static final List<FieldSignature> VOID = unmodifiableList(new ArrayList<>());\n+\n+  private final QualifiedName name;\n+  private final List<FieldSignature> inputSignature;\n+  private final List<FieldSignature> outputSignature;\n+  private final Mode mode;\n+  private final String deprecated;\n+  private final String[] allowed;\n+  private final String description;\n+  private final String warning;\n+  private final boolean eager;\n+  private final boolean caseInsensitive;\n+\n+  public ProcedureSignature(\n+      QualifiedName name,\n+      List<FieldSignature> inputSignature,\n+      List<FieldSignature> outputSignature,\n+      Mode mode,\n+      String deprecated,\n+      String[] allowed,\n+      String description,\n+      String warning,\n+      boolean eager,\n+      boolean caseInsensitive)\n+  {\n+    this.name = name;\n+    this.inputSignature = unmodifiableList(inputSignature);\n+    this.outputSignature = outputSignature == VOID ? outputSignature : unmodifiableList(outputSignature);\n+    this.mode = mode;\n+    this.deprecated = deprecated;\n+    this.allowed = allowed;\n+    this.description = description;\n+    this.warning = warning;\n+    this.eager = eager;\n+    this.caseInsensitive = caseInsensitive;\n+  }\n+\n+  public QualifiedName name()\n+  {\n+    return name;\n+  }\n+\n+  public Mode mode()\n+  {\n+    return mode;\n+  }\n+\n+  public Optional<String> deprecated()\n+  {\n+    return Optional.ofNullable(deprecated);\n+  }\n+\n+  public String[] allowed()\n+  {\n+    return allowed;\n+  }\n+\n+  public boolean caseInsensitive()\n+  {\n+    return caseInsensitive;\n+  }\n+\n+  public List<FieldSignature> inputSignature()\n+  {\n+    return inputSignature;\n+  }\n+\n+  public List<FieldSignature> outputSignature()\n+  {\n+    return outputSignature;\n+  }\n+\n+  public boolean isVoid()\n+  {\n+    return outputSignature == VOID;\n+  }\n+\n+  public Optional<String> description()\n+  {\n+    return Optional.ofNullable(description);\n+  }\n+\n+  public Optional<String> warning()\n+  {\n+    return Optional.ofNullable(warning);\n+  }\n+\n+  public boolean eager()\n+  {\n+    return eager;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return Optional.ofNullable( deprecated );\n+      return true;\n     }\n-\n-    public String[] allowed()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return allowed;\n+      return false;\n     }\n \n-    public boolean caseInsensitive()\n+    ProcedureSignature that = (ProcedureSignature) o;\n+    return name.equals(that.name) && inputSignature.equals(that.inputSignature) &&\n+        outputSignature.equals(that.outputSignature) && isVoid() == that.isVoid();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return name.hashCode();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    String strInSig = inputSignature == null ? \"...\" : Iterables.toString(inputSignature, \", \");\n+    if (isVoid())\n     {\n-        return caseInsensitive;\n-    }\n-\n-    public List<FieldSignature> inputSignature()\n+      return String.format(\"%s(%s) :: VOID\", name, strInSig);\n+    } else\n     {\n-        return inputSignature;\n+      String strOutSig = outputSignature == null ? \"...\" : Iterables.toString(outputSignature, \", \");\n+      return String.format(\"%s(%s) :: (%s)\", name, strInSig, strOutSig);\n     }\n+  }\n \n-    public List<FieldSignature> outputSignature()\n-    {\n-        return outputSignature;\n-    }\n-\n-    public boolean isVoid()\n-    {\n-        return outputSignature == VOID;\n-    }\n-\n-    public Optional<String> description()\n+  public static class Builder\n+  {\n+    private final QualifiedName name;\n+    private final List<FieldSignature> inputSignature = new LinkedList<>();\n+    private List<FieldSignature> outputSignature = new LinkedList<>();\n+    private Mode mode = Mode.READ;\n+    private String deprecated;\n+    private String[] allowed = new String[0];\n+    private String description;\n+    private String warning;\n+    private boolean eager;\n+\n+    public Builder(String[] namespace, String name)\n     {\n-        return Optional.ofNullable( description );\n+      this.name = new QualifiedName(namespace, name);\n     }\n \n-    public Optional<String> warning()\n+    public Builder mode(Mode mode)\n     {\n-        return Optional.ofNullable( warning );\n+      this.mode = mode;\n+      return this;\n     }\n \n-    public boolean eager()\n+    public Builder description(String description)\n     {\n-        return eager;\n+      this.description = description;\n+      return this;\n     }\n \n-    @Override\n-    public boolean equals( Object o )\n+    public Builder deprecatedBy(String deprecated)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        ProcedureSignature that = (ProcedureSignature) o;\n-        return name.equals( that.name ) && inputSignature.equals( that.inputSignature ) &&\n-                outputSignature.equals( that.outputSignature ) && isVoid() == that.isVoid();\n+      this.deprecated = deprecated;\n+      return this;\n     }\n \n-    @Override\n-    public int hashCode()\n+    /**\n+     * Define an input field\n+     */\n+    public Builder in(String name, Neo4jTypes.AnyType type)\n     {\n-        return name.hashCode();\n+      inputSignature.add(FieldSignature.inputField(name, type));\n+      return this;\n     }\n \n-    @Override\n-    public String toString()\n+    /**\n+     * Define an output field\n+     */\n+    public Builder out(String name, Neo4jTypes.AnyType type)\n     {\n-        String strInSig = inputSignature == null ? \"...\" : Iterables.toString( inputSignature, \", \" );\n-        if ( isVoid() )\n-        {\n-            return String.format( \"%s(%s) :: VOID\", name, strInSig );\n-        }\n-        else\n-        {\n-            String strOutSig = outputSignature == null ? \"...\" : Iterables.toString( outputSignature, \", \" );\n-            return String.format( \"%s(%s) :: (%s)\", name, strInSig, strOutSig );\n-        }\n+      outputSignature.add(FieldSignature.outputField(name, type));\n+      return this;\n     }\n \n-    public static class Builder\n+    public Builder out(List<FieldSignature> fields)\n     {\n-        private final QualifiedName name;\n-        private final List<FieldSignature> inputSignature = new LinkedList<>();\n-        private List<FieldSignature> outputSignature = new LinkedList<>();\n-        private Mode mode = Mode.READ;\n-        private String deprecated;\n-        private String[] allowed = new String[0];\n-        private String description;\n-        private String warning;\n-        private boolean eager;\n-\n-        public Builder( String[] namespace, String name )\n-        {\n-            this.name = new QualifiedName( namespace, name );\n-        }\n-\n-        public Builder mode( Mode mode )\n-        {\n-            this.mode = mode;\n-            return this;\n-        }\n-\n-        public Builder description( String description )\n-        {\n-            this.description = description;\n-            return this;\n-        }\n-\n-        public Builder deprecatedBy( String deprecated )\n-        {\n-            this.deprecated = deprecated;\n-            return this;\n-        }\n-\n-        /** Define an input field */\n-        public Builder in( String name, Neo4jTypes.AnyType type )\n-        {\n-            inputSignature.add( FieldSignature.inputField( name, type ) );\n-            return this;\n-        }\n-\n-        /** Define an output field */\n-        public Builder out( String name, Neo4jTypes.AnyType type )\n-        {\n-            outputSignature.add( FieldSignature.outputField( name, type ) );\n-            return this;\n-        }\n-\n-        public Builder out( List<FieldSignature> fields )\n-        {\n-            outputSignature = fields;\n-            return this;\n-        }\n-\n-        public Builder allowed( String[] allowed )\n-        {\n-            this.allowed = allowed;\n-            return this;\n-        }\n-\n-        public Builder warning( String warning )\n-        {\n-            this.warning =  warning;\n-            return this;\n-        }\n-\n-        public Builder eager( boolean eager )\n-        {\n-            this.eager = eager;\n-            return this;\n-        }\n-\n-        public ProcedureSignature build()\n-        {\n-            return new ProcedureSignature( name, inputSignature, outputSignature, mode, deprecated, allowed, description, warning, eager, false );\n-        }\n+      outputSignature = fields;\n+      return this;\n     }\n \n-    public static Builder procedureSignature( String... namespaceAndName )\n+    public Builder allowed(String[] allowed)\n     {\n-        String[] namespace = namespaceAndName.length > 1 ?\n-                             Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) : new String[0];\n-        String name = namespaceAndName[namespaceAndName.length - 1];\n-        return procedureSignature( namespace, name );\n+      this.allowed = allowed;\n+      return this;\n     }\n \n-    public static Builder procedureSignature( QualifiedName name )\n+    public Builder warning(String warning)\n     {\n-        return new Builder( name.namespace(), name.name() );\n+      this.warning = warning;\n+      return this;\n     }\n \n-    public static Builder procedureSignature( String[] namespace, String name )\n+    public Builder eager(boolean eager)\n     {\n-        return new Builder( namespace, name );\n+      this.eager = eager;\n+      return this;\n     }\n \n-    public static QualifiedName procedureName( String... namespaceAndName )\n+    public ProcedureSignature build()\n     {\n-        return procedureSignature( namespaceAndName ).build().name();\n+      return new ProcedureSignature(name, inputSignature, outputSignature, mode, deprecated, allowed, description, warning, eager, false);\n     }\n+  }\n+\n+  public static Builder procedureSignature(String... namespaceAndName)\n+  {\n+    String[] namespace = namespaceAndName.length > 1 ?\n+        Arrays.copyOf(namespaceAndName, namespaceAndName.length - 1) : new String[0];\n+    String name = namespaceAndName[namespaceAndName.length - 1];\n+    return procedureSignature(namespace, name);\n+  }\n+\n+  public static Builder procedureSignature(QualifiedName name)\n+  {\n+    return new Builder(name.namespace(), name.name());\n+  }\n+\n+  public static Builder procedureSignature(String[] namespace, String name)\n+  {\n+    return new Builder(namespace, name);\n+  }\n+\n+  public static QualifiedName procedureName(String... namespaceAndName)\n+  {\n+    return procedureSignature(namespaceAndName).build().name();\n+  }\n }\n",
            "diff_size": 291
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "column": "89",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "246",
                    "column": "53",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4234/ProcedureSignature.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4234/ProcedureSignature.java\nindex 86a222f84aa..9184d4a4a7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4234/ProcedureSignature.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4234/ProcedureSignature.java\n@@ -48,10 +48,7 @@ public class ProcedureSignature\n     private final boolean eager;\n     private final boolean caseInsensitive;\n \n-    public ProcedureSignature(\n-            QualifiedName name,\n-            List<FieldSignature> inputSignature,\n-            List<FieldSignature> outputSignature,\n+    public ProcedureSignature( QualifiedName name, List<FieldSignature> inputSignature, List<FieldSignature> outputSignature,\n             Mode mode,\n             String deprecated,\n             String[] allowed,\n@@ -134,14 +131,14 @@ public class ProcedureSignature\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n \n         ProcedureSignature that = (ProcedureSignature) o;\n-        return name.equals( that.name ) && inputSignature.equals( that.inputSignature ) &&\n-                outputSignature.equals( that.outputSignature ) && isVoid() == that.isVoid();\n+        return name.equals( that.name ) && inputSignature.equals( that.inputSignature ) &&outputSignature.equals( that.outputSignature ) && isVoid() == that.isVoid();\n     }\n \n     @Override\n@@ -228,7 +225,7 @@ public class ProcedureSignature\n \n         public Builder warning( String warning )\n         {\n-            this.warning =  warning;\n+            this.warning = warning;\n             return this;\n         }\n \n@@ -246,9 +243,8 @@ public class ProcedureSignature\n \n     public static Builder procedureSignature( String... namespaceAndName )\n     {\n-        String[] namespace = namespaceAndName.length > 1 ?\n-                             Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) : new String[0];\n-        String name = namespaceAndName[namespaceAndName.length - 1];\n+        String[] namespace = namespaceAndName.length> 1 ? Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) : new String[0];\n+String name = namespaceAndName[namespaceAndName.length - 1];\n         return procedureSignature( namespace, name );\n     }\n \n@@ -266,4 +262,4 @@ public class ProcedureSignature\n     {\n         return procedureSignature( namespaceAndName ).build().name();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 250).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "column": "23",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "column": "40",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "87",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "136",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4234/ProcedureSignature.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4234/ProcedureSignature.java\nindex 86a222f84aa..f864187b5d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4234/ProcedureSignature.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4234/ProcedureSignature.java\n@@ -24,7 +24,6 @@ import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Optional;\n-\n import org.neo4j.helpers.collection.Iterables;\n import org.neo4j.procedure.Mode;\n import static java.util.Collections.unmodifiableList;\n@@ -33,10 +32,10 @@ import static java.util.Collections.unmodifiableList;\n  * This describes the signature of a procedure, made up of its namespace, name, and input/output description.\n  * Procedure uniqueness is currently *only* on the namespace/name level - no procedure overloading allowed (yet).\n  */\n+\n public class ProcedureSignature\n {\n     public static final List<FieldSignature> VOID = unmodifiableList( new ArrayList<>() );\n-\n     private final QualifiedName name;\n     private final List<FieldSignature> inputSignature;\n     private final List<FieldSignature> outputSignature;\n@@ -48,17 +47,7 @@ public class ProcedureSignature\n     private final boolean eager;\n     private final boolean caseInsensitive;\n \n-    public ProcedureSignature(\n-            QualifiedName name,\n-            List<FieldSignature> inputSignature,\n-            List<FieldSignature> outputSignature,\n-            Mode mode,\n-            String deprecated,\n-            String[] allowed,\n-            String description,\n-            String warning,\n-            boolean eager,\n-            boolean caseInsensitive )\n+    public ProcedureSignature( QualifiedName name, List<FieldSignature> inputSignature, List<FieldSignature> outputSignature, Mode mode, String deprecated, String[] allowed, String description, String warning, boolean eager, boolean caseInsensitive )\n     {\n         this.name = name;\n         this.inputSignature = unmodifiableList( inputSignature );\n@@ -134,14 +123,14 @@ public class ProcedureSignature\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+        if ( o == null|| getClass() != o.getClass() )\n         {\n             return false;\n         }\n \n         ProcedureSignature that = (ProcedureSignature) o;\n-        return name.equals( that.name ) && inputSignature.equals( that.inputSignature ) &&\n-                outputSignature.equals( that.outputSignature ) && isVoid() == that.isVoid();\n+        return name.equals( that.name )&& inputSignature.equals( that.inputSignature )&& outputSignature.equals( that.outputSignature )&& isVoid() == that.isVoid();\n     }\n \n     @Override\n@@ -201,6 +190,7 @@ public class ProcedureSignature\n         }\n \n         /** Define an input field */\n+\n         public Builder in( String name, Neo4jTypes.AnyType type )\n         {\n             inputSignature.add( FieldSignature.inputField( name, type ) );\n@@ -208,6 +198,7 @@ public class ProcedureSignature\n         }\n \n         /** Define an output field */\n+\n         public Builder out( String name, Neo4jTypes.AnyType type )\n         {\n             outputSignature.add( FieldSignature.outputField( name, type ) );\n@@ -228,7 +219,7 @@ public class ProcedureSignature\n \n         public Builder warning( String warning )\n         {\n-            this.warning =  warning;\n+            this.warning = warning;\n             return this;\n         }\n \n@@ -246,9 +237,8 @@ public class ProcedureSignature\n \n     public static Builder procedureSignature( String... namespaceAndName )\n     {\n-        String[] namespace = namespaceAndName.length > 1 ?\n-                             Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) : new String[0];\n-        String name = namespaceAndName[namespaceAndName.length - 1];\n+        String[] namespace = namespaceAndName.length > 1 ? Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) : new String[0];\n+        String name = namespaceAndName[ namespaceAndName.length - 1];\n         return procedureSignature( namespace, name );\n     }\n \n@@ -266,4 +256,4 @@ public class ProcedureSignature\n     {\n         return procedureSignature( namespaceAndName ).build().name();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}