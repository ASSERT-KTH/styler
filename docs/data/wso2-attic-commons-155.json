{
    "project_name": "wso2-attic-commons",
    "error_id": "155",
    "information": {
        "errors": [
            {
                "line": "127",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        List retVal = evaluate(cexp, ctx);\n        if (retVal.size() == 0 || retVal.size() > 1) {\n            StringBuffer msg = new StringBuffer((retVal.size() == 0) ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n            if (cexp instanceof OXPath10Expression) {\n                msg.append(((OXPath10Expression)cexp).xpath);\n            } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/155/XPath10ExpressionRuntime.java\nindex 49e327cc29d..b57e069c5a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/155/XPath10ExpressionRuntime.java\n@@ -124,8 +124,9 @@ public class XPath10ExpressionRuntime implements ExpressionLanguageRuntime {\n     public Node evaluateNode(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n         List retVal = evaluate(cexp, ctx);\n         if (retVal.size() == 0 || retVal.size() > 1) {\n-            StringBuffer msg = new StringBuffer((retVal.size() == 0) ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n-            if (cexp instanceof OXPath10Expression) {\n+            StringBuffer msg = new StringBuffer((retVal.size() == 0)\n+                ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n+             if (cexp instanceof OXPath10Expression) {\n                 msg.append(((OXPath10Expression)cexp).xpath);\n             } else {\n                 msg.append(cexp.toString());                \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/155/XPath10ExpressionRuntime.java\nindex 49e327cc29d..b690909ec76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/155/XPath10ExpressionRuntime.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.elang.xpath10.runtime;\n \n import org.apache.commons.logging.Log;\n@@ -53,152 +54,160 @@ import java.util.Map;\n  * XPath 1.0 Expression Language run-time subsytem.\n  */\n public class XPath10ExpressionRuntime implements ExpressionLanguageRuntime {\n-    /** Class-level logger. */\n-    private static final Log __log = LogFactory.getLog(XPath10ExpressionRuntime.class);\n-\n-    /** Compiled expression cache. */\n-    private final Map<String, XPath> _compiledExpressions = new HashMap<String, XPath>();\n-\n-    /** Registered extension functions. */\n-    private final Map _extensionFunctions = new HashMap();\n-\n-    public void initialize(Map properties) throws ConfigurationException {\n-        TransformerFactory trsf = new net.sf.saxon.TransformerFactoryImpl();\n-        XslTransformHandler.getInstance().setTransformerFactory(trsf);\n+  /**\n+   * Class-level logger.\n+   */\n+  private static final Log __log = LogFactory.getLog(XPath10ExpressionRuntime.class);\n+\n+  /**\n+   * Compiled expression cache.\n+   */\n+  private final Map<String, XPath> _compiledExpressions = new HashMap<String, XPath>();\n+\n+  /**\n+   * Registered extension functions.\n+   */\n+  private final Map _extensionFunctions = new HashMap();\n+\n+  public void initialize(Map properties) throws ConfigurationException {\n+    TransformerFactory trsf = new net.sf.saxon.TransformerFactoryImpl();\n+    XslTransformHandler.getInstance().setTransformerFactory(trsf);\n+  }\n+\n+  public String evaluateAsString(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n+    try {\n+      return compile((OXPath10Expression) cexp).stringValueOf(createContext((OXPath10Expression) cexp, ctx));\n+    } catch (JaxenException e) {\n+      handleJaxenException(e);\n     }\n-\n-    public String evaluateAsString(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n-        try {\n-            return compile((OXPath10Expression) cexp).stringValueOf(createContext((OXPath10Expression) cexp, ctx));\n-        } catch (JaxenException e) {\n-            handleJaxenException(e);\n-        }\n-        throw new AssertionError(\"UNREACHABLE\");\n+    throw new AssertionError(\"UNREACHABLE\");\n+  }\n+\n+  public boolean evaluateAsBoolean(OExpression cexp, EvaluationContext ctx) throws FaultException,\n+    EvaluationException {\n+    try {\n+      return compile((OXPath10Expression) cexp).booleanValueOf(createContext((OXPath10Expression) cexp, ctx));\n+    } catch (JaxenException e) {\n+      handleJaxenException(e);\n     }\n-\n-    public boolean evaluateAsBoolean(OExpression cexp, EvaluationContext ctx) throws FaultException,\n-            EvaluationException {\n-        try {\n-            return compile((OXPath10Expression) cexp).booleanValueOf(createContext((OXPath10Expression) cexp, ctx));\n-        } catch (JaxenException e) {\n-            handleJaxenException(e);\n-        }\n-        throw new AssertionError(\"UNREACHABLE\");\n+    throw new AssertionError(\"UNREACHABLE\");\n+  }\n+\n+  public Number evaluateAsNumber(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n+    try {\n+      return compile((OXPath10Expression) cexp).numberValueOf(createContext((OXPath10Expression) cexp, ctx));\n+    } catch (JaxenException e) {\n+      handleJaxenException(e);\n     }\n-\n-    public Number evaluateAsNumber(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n-        try {\n-            return compile((OXPath10Expression) cexp).numberValueOf(createContext((OXPath10Expression) cexp, ctx));\n-        } catch (JaxenException e) {\n-            handleJaxenException(e);\n-        }\n-        throw new AssertionError(\"UNREACHABLE\");\n+    throw new AssertionError(\"UNREACHABLE\");\n+  }\n+\n+  public List evaluate(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n+    try {\n+      XPath compiledXPath = compile((OXPath10Expression) cexp);\n+      Context context = createContext((OXPath10Expression) cexp, ctx);\n+\n+      List retVal = compiledXPath.selectNodes(context);\n+\n+      if ((retVal.size() == 1) && !(retVal.get(0) instanceof Node)) {\n+        Document d = DOMUtils.newDocument();\n+        // Giving our node a parent just in case it's an LValue\n+        // expression\n+        Element wrapper = d.createElement(\"wrapper\");\n+        Text text = d.createTextNode(retVal.get(0).toString());\n+        wrapper.appendChild(text);\n+        d.appendChild(wrapper);\n+        retVal = Collections.singletonList(text);\n+      }\n+\n+      return retVal;\n+\n+    } catch (JaxenException je) {\n+      handleJaxenException(je);\n     }\n-\n-    public List evaluate(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n-        try {\n-            XPath compiledXPath = compile((OXPath10Expression) cexp);\n-            Context context = createContext((OXPath10Expression) cexp, ctx);\n-\n-            List retVal = compiledXPath.selectNodes(context);\n-\n-            if ((retVal.size() == 1) && !(retVal.get(0) instanceof Node)) {\n-                Document d = DOMUtils.newDocument();\n-                // Giving our node a parent just in case it's an LValue\n-                // expression\n-                Element wrapper = d.createElement(\"wrapper\");\n-                Text text = d.createTextNode(retVal.get(0).toString());\n-                wrapper.appendChild(text);\n-                d.appendChild(wrapper);\n-                retVal = Collections.singletonList(text);\n-            }\n-\n-            return retVal;\n-\n-        } catch (JaxenException je) {\n-            handleJaxenException(je);\n-        }\n-        throw new AssertionError(\"UNREACHABLE\");\n+    throw new AssertionError(\"UNREACHABLE\");\n+  }\n+\n+  public Node evaluateNode(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n+    List retVal = evaluate(cexp, ctx);\n+    if (retVal.size() == 0 || retVal.size() > 1) {\n+      StringBuffer msg =\n+        new StringBuffer((retVal.size() == 0) ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n+      if (cexp instanceof OXPath10Expression) {\n+        msg.append(((OXPath10Expression) cexp).xpath);\n+      } else {\n+        msg.append(cexp.toString());\n+      }\n+      msg.append(\"'\");\n+      if (ctx.getRootNode() != null) {\n+        msg.append(\" against '\");\n+        msg.append(DOMUtils.domToString(ctx.getRootNode()));\n+        msg.append(\"'\");\n+      }\n+      throw new FaultException(cexp.getOwner().constants.qnSelectionFailure, msg.toString());\n     }\n \n-    public Node evaluateNode(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n-        List retVal = evaluate(cexp, ctx);\n-        if (retVal.size() == 0 || retVal.size() > 1) {\n-            StringBuffer msg = new StringBuffer((retVal.size() == 0) ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n-            if (cexp instanceof OXPath10Expression) {\n-                msg.append(((OXPath10Expression)cexp).xpath);\n-            } else {\n-                msg.append(cexp.toString());                \n-            }\n-            msg.append(\"'\");\n-            if (ctx.getRootNode() != null) {\n-                msg.append(\" against '\");\n-                msg.append(DOMUtils.domToString(ctx.getRootNode()));\n-                msg.append(\"'\");\n-            }\n-            throw new FaultException(cexp.getOwner().constants.qnSelectionFailure, msg.toString());\n-        }\n-            \n-        return (Node) retVal.get(0);\n-    }\n+    return (Node) retVal.get(0);\n+  }\n \n-    public Calendar evaluateAsDate(OExpression cexp, EvaluationContext context) throws FaultException,\n-            EvaluationException {\n-\n-        String literal = evaluateAsString(cexp, context);\n-        try {\n-            return ISO8601DateParser.parseCal(literal);\n-        } catch (Exception ex) {\n-            String errmsg = \"Invalid date: \" + literal;\n-            __log.error(errmsg, ex);\n-            throw new FaultException(cexp.getOwner().constants.qnInvalidExpressionValue, errmsg);\n-        }\n-    }\n+  public Calendar evaluateAsDate(OExpression cexp, EvaluationContext context) throws FaultException,\n+    EvaluationException {\n \n-    public Duration evaluateAsDuration(OExpression cexp, EvaluationContext context) throws FaultException,\n-            EvaluationException {\n-        String literal = this.evaluateAsString(cexp, context);\n-        try {\n-            Duration duration = new org.apache.ode.utils.xsd.Duration(literal);\n-            return duration;\n-        } catch (Exception ex) {\n-            String errmsg = \"Invalid duration: \" + literal;\n-            __log.error(errmsg, ex);\n-            throw new FaultException(cexp.getOwner().constants.qnInvalidExpressionValue, errmsg);\n-        }\n+    String literal = evaluateAsString(cexp, context);\n+    try {\n+      return ISO8601DateParser.parseCal(literal);\n+    } catch (Exception ex) {\n+      String errmsg = \"Invalid date: \" + literal;\n+      __log.error(errmsg, ex);\n+      throw new FaultException(cexp.getOwner().constants.qnInvalidExpressionValue, errmsg);\n     }\n-\n-    private Context createContext(OXPath10Expression oxpath, EvaluationContext ctx) {\n-        JaxenContexts bpelSupport = new JaxenContexts(oxpath, _extensionFunctions, ctx);\n-        ContextSupport support = new ContextSupport(new JaxenNamespaceContextAdapter(oxpath.namespaceCtx), bpelSupport,\n-                bpelSupport, new BpelDocumentNavigator(ctx.getRootNode()));\n-        Context jctx = new Context(support);\n-\n-        if (ctx.getRootNode() != null)\n-            jctx.setNodeSet(Collections.singletonList(ctx.getRootNode()));\n-\n-        return jctx;\n+  }\n+\n+  public Duration evaluateAsDuration(OExpression cexp, EvaluationContext context) throws FaultException,\n+    EvaluationException {\n+    String literal = this.evaluateAsString(cexp, context);\n+    try {\n+      Duration duration = new org.apache.ode.utils.xsd.Duration(literal);\n+      return duration;\n+    } catch (Exception ex) {\n+      String errmsg = \"Invalid duration: \" + literal;\n+      __log.error(errmsg, ex);\n+      throw new FaultException(cexp.getOwner().constants.qnInvalidExpressionValue, errmsg);\n     }\n+  }\n+\n+  private Context createContext(OXPath10Expression oxpath, EvaluationContext ctx) {\n+    JaxenContexts bpelSupport = new JaxenContexts(oxpath, _extensionFunctions, ctx);\n+    ContextSupport support = new ContextSupport(new JaxenNamespaceContextAdapter(oxpath.namespaceCtx), bpelSupport,\n+      bpelSupport, new BpelDocumentNavigator(ctx.getRootNode()));\n+    Context jctx = new Context(support);\n \n-    private XPath compile(OXPath10Expression exp) throws JaxenException {\n-        XPath xpath = _compiledExpressions.get(exp.xpath);\n-        if (xpath == null) {\n-            xpath = new DOMXPath(exp.xpath);\n-            synchronized (_compiledExpressions) {\n-                _compiledExpressions.put(exp.xpath, xpath);\n-            }\n-        }\n-        return xpath;\n+    if (ctx.getRootNode() != null) {\n+      jctx.setNodeSet(Collections.singletonList(ctx.getRootNode()));\n     }\n \n-    private void handleJaxenException(JaxenException je) throws EvaluationException, FaultException {\n-        if (je instanceof WrappedFaultException) {\n-            throw ((WrappedFaultException) je).getFaultException();\n-        } else if (je.getCause() instanceof WrappedFaultException) {\n-            throw ((WrappedFaultException) je.getCause()).getFaultException();\n-        } else {\n-            throw new EvaluationException(je.getMessage(), je);\n-        }\n+    return jctx;\n+  }\n \n+  private XPath compile(OXPath10Expression exp) throws JaxenException {\n+    XPath xpath = _compiledExpressions.get(exp.xpath);\n+    if (xpath == null) {\n+      xpath = new DOMXPath(exp.xpath);\n+      synchronized (_compiledExpressions) {\n+        _compiledExpressions.put(exp.xpath, xpath);\n+      }\n     }\n+    return xpath;\n+  }\n+\n+  private void handleJaxenException(JaxenException je) throws EvaluationException, FaultException {\n+    if (je instanceof WrappedFaultException) {\n+      throw ((WrappedFaultException) je).getFaultException();\n+    } else if (je.getCause() instanceof WrappedFaultException) {\n+      throw ((WrappedFaultException) je.getCause()).getFaultException();\n+    } else {\n+      throw new EvaluationException(je.getMessage(), je);\n+    }\n+\n+  }\n }\n",
            "diff_size": 193
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/155/XPath10ExpressionRuntime.java\nindex 49e327cc29d..767aaeab69c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/155/XPath10ExpressionRuntime.java\n@@ -201,4 +201,4 @@ public class XPath10ExpressionRuntime implements ExpressionLanguageRuntime {\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/155/XPath10ExpressionRuntime.java\nindex 49e327cc29d..b57e069c5a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/155/XPath10ExpressionRuntime.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/155/XPath10ExpressionRuntime.java\n@@ -124,8 +124,9 @@ public class XPath10ExpressionRuntime implements ExpressionLanguageRuntime {\n     public Node evaluateNode(OExpression cexp, EvaluationContext ctx) throws FaultException, EvaluationException {\n         List retVal = evaluate(cexp, ctx);\n         if (retVal.size() == 0 || retVal.size() > 1) {\n-            StringBuffer msg = new StringBuffer((retVal.size() == 0) ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n-            if (cexp instanceof OXPath10Expression) {\n+            StringBuffer msg = new StringBuffer((retVal.size() == 0)\n+                ? \"No results for expression: '\" : \"Multiple results for expression: '\");\n+             if (cexp instanceof OXPath10Expression) {\n                 msg.append(((OXPath10Expression)cexp).xpath);\n             } else {\n                 msg.append(cexp.toString());                \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}