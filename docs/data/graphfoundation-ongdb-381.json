{
    "project_name": "graphfoundation-ongdb",
    "error_id": "381",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "218",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "244",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/381/TimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/381/TimeValue.java\nindex 38f2a5d9d98..c6b03a33aeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/381/TimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/381/TimeValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.time.Clock;\n@@ -52,417 +53,414 @@ import static org.neo4j.values.storable.DateTimeValue.parseZoneName;\n import static org.neo4j.values.storable.LocalTimeValue.optInt;\n import static org.neo4j.values.storable.LocalTimeValue.parseTime;\n \n-public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n+public final class TimeValue extends TemporalValue<OffsetTime, TimeValue>\n {\n-    public static final TimeValue MIN_VALUE = new TimeValue( OffsetTime.MIN );\n-    public static final TimeValue MAX_VALUE = new TimeValue( OffsetTime.MAX );\n-\n-    public static TimeValue time( OffsetTime time )\n-    {\n-        return new TimeValue( requireNonNull( time, \"OffsetTime\" ) );\n-    }\n-\n-    public static TimeValue time( int hour, int minute, int second, int nanosOfSecond, String offset )\n-    {\n-        return time( hour, minute, second, nanosOfSecond, parseOffset( offset ) );\n-    }\n-\n-    public static TimeValue time( int hour, int minute, int second, int nanosOfSecond, ZoneOffset offset )\n-    {\n-        return new TimeValue(\n-                OffsetTime.of( assertValidArgument( () -> LocalTime.of( hour, minute, second, nanosOfSecond ) ), offset ) );\n-    }\n-\n-    public static TimeValue time( long nanosOfDayUTC, ZoneOffset offset )\n-    {\n-        return new TimeValue( OffsetTime.ofInstant( assertValidArgument( () -> Instant.ofEpochSecond( 0, nanosOfDayUTC ) ), offset ) );\n-    }\n-\n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"Time\";\n-    }\n-\n-    public static TimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone, CSVHeaderInformation fieldsFromHeader )\n-    {\n-        if ( fieldsFromHeader != null )\n+  public static final TimeValue MIN_VALUE = new TimeValue(OffsetTime.MIN);\n+  public static final TimeValue MAX_VALUE = new TimeValue(OffsetTime.MAX);\n+\n+  public static TimeValue time(OffsetTime time)\n+  {\n+    return new TimeValue(requireNonNull(time, \"OffsetTime\"));\n+  }\n+\n+  public static TimeValue time(int hour, int minute, int second, int nanosOfSecond, String offset)\n+  {\n+    return time(hour, minute, second, nanosOfSecond, parseOffset(offset));\n+  }\n+\n+  public static TimeValue time(int hour, int minute, int second, int nanosOfSecond, ZoneOffset offset)\n+  {\n+    return new TimeValue(\n+        OffsetTime.of(assertValidArgument(() -> LocalTime.of(hour, minute, second, nanosOfSecond)), offset));\n+  }\n+\n+  public static TimeValue time(long nanosOfDayUTC, ZoneOffset offset)\n+  {\n+    return new TimeValue(OffsetTime.ofInstant(assertValidArgument(() -> Instant.ofEpochSecond(0, nanosOfDayUTC)), offset));\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Time\";\n+  }\n+\n+  public static TimeValue parse(CharSequence text, Supplier<ZoneId> defaultZone, CSVHeaderInformation fieldsFromHeader)\n+  {\n+    if (fieldsFromHeader != null)\n+    {\n+      if (!(fieldsFromHeader instanceof TimeCSVHeaderInformation))\n+      {\n+        throw new IllegalStateException(\"Wrong header information type: \" + fieldsFromHeader);\n+      }\n+      // Override defaultZone\n+      defaultZone = ((TimeCSVHeaderInformation) fieldsFromHeader).zoneSupplier(defaultZone);\n+    }\n+    return parse(TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone);\n+  }\n+\n+  public static TimeValue parse(CharSequence text, Supplier<ZoneId> defaultZone)\n+  {\n+    return parse(TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone);\n+  }\n+\n+  public static TimeValue parse(TextValue text, Supplier<ZoneId> defaultZone)\n+  {\n+    return parse(TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone);\n+  }\n+\n+  public static TimeValue now(Clock clock)\n+  {\n+    return new TimeValue(OffsetTime.now(clock));\n+  }\n+\n+  public static TimeValue now(Clock clock, String timezone)\n+  {\n+    return now(clock.withZone(parseZoneName(timezone)));\n+  }\n+\n+  public static TimeValue now(Clock clock, Supplier<ZoneId> defaultZone)\n+  {\n+    return now(clock.withZone(defaultZone.get()));\n+  }\n+\n+  public static TimeValue build(MapValue map, Supplier<ZoneId> defaultZone)\n+  {\n+    return StructureBuilder.build(builder(defaultZone), map);\n+  }\n+\n+  public static TimeValue select(AnyValue from, Supplier<ZoneId> defaultZone)\n+  {\n+    return builder(defaultZone).selectTime(from);\n+  }\n+\n+  @Override\n+  boolean hasTime()\n+  {\n+    return true;\n+  }\n+\n+  public static TimeValue truncate(\n+      TemporalUnit unit,\n+      TemporalValue input,\n+      MapValue fields,\n+      Supplier<ZoneId> defaultZone)\n+  {\n+    OffsetTime time = input.getTimePart(defaultZone);\n+    OffsetTime truncatedOT = assertValidUnit(() -> time.truncatedTo(unit));\n+    if (fields.size() == 0)\n+    {\n+      return time(truncatedOT);\n+    } else\n+    {\n+      // Timezone needs some special handling, since the builder will shift keeping the instant instead of the local time\n+      Map<String, AnyValue> updatedFields = new HashMap<>(fields.size() + 1);\n+      for (Map.Entry<String, AnyValue> entry : fields.entrySet())\n+      {\n+        if (\"timezone\".equals(entry.getKey()))\n         {\n-            if ( !(fieldsFromHeader instanceof TimeCSVHeaderInformation) )\n-            {\n-                throw new IllegalStateException( \"Wrong header information type: \" + fieldsFromHeader );\n-            }\n-            // Override defaultZone\n-            defaultZone = ((TimeCSVHeaderInformation) fieldsFromHeader).zoneSupplier( defaultZone );\n+          ZonedDateTime currentDT = assertValidArgument(() -> ZonedDateTime.ofInstant(Instant.now(), timezoneOf(entry.getValue())));\n+          ZoneOffset currentOffset = currentDT.getOffset();\n+          truncatedOT = truncatedOT.withOffsetSameLocal(currentOffset);\n+        } else\n+        {\n+          updatedFields.put(entry.getKey(), entry.getValue());\n         }\n-        return parse( TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone );\n-    }\n-\n-    public static TimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone )\n-    {\n-        return parse( TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone );\n-    }\n+      }\n \n-    public static TimeValue parse( TextValue text, Supplier<ZoneId> defaultZone )\n-    {\n-        return parse( TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone );\n-    }\n+      truncatedOT = updateFieldMapWithConflictingSubseconds(updatedFields, unit, truncatedOT);\n \n-    public static TimeValue now( Clock clock )\n-    {\n-        return new TimeValue( OffsetTime.now( clock ) );\n+      if (updatedFields.size() == 0)\n+      {\n+        return time(truncatedOT);\n+      }\n+      updatedFields.put(\"time\", time(truncatedOT));\n+      return build(VirtualValues.map(updatedFields), defaultZone);\n     }\n+  }\n \n-    public static TimeValue now( Clock clock, String timezone )\n-    {\n-        return now( clock.withZone( parseZoneName( timezone ) ) );\n-    }\n+  static OffsetTime defaultTime(ZoneId zoneId)\n+  {\n+    return OffsetTime.of(TemporalFields.hour.defaultValue, TemporalFields.minute.defaultValue,\n+        TemporalFields.second.defaultValue, TemporalFields.nanosecond.defaultValue,\n+        assertValidZone(() -> ZoneOffset.of(zoneId.toString())));\n+  }\n \n-    public static TimeValue now( Clock clock, Supplier<ZoneId> defaultZone )\n-    {\n-        return now( clock.withZone( defaultZone.get() ) );\n-    }\n-\n-    public static TimeValue build( MapValue map, Supplier<ZoneId> defaultZone )\n-    {\n-        return StructureBuilder.build( builder( defaultZone ), map );\n-    }\n-\n-    public static TimeValue select( AnyValue from, Supplier<ZoneId> defaultZone )\n-    {\n-        return builder( defaultZone ).selectTime( from );\n-    }\n-\n-    @Override\n-    boolean hasTime()\n+  static TimeBuilder<TimeValue> builder(Supplier<ZoneId> defaultZone)\n+  {\n+    return new TimeBuilder<TimeValue>(defaultZone)\n     {\n+      @Override\n+      protected boolean supportsTimeZone()\n+      {\n         return true;\n-    }\n+      }\n+\n+      @Override\n+      public TimeValue buildInternal()\n+      {\n+        boolean selectingTime = fields.containsKey(TemporalFields.time);\n+        boolean selectingTimeZone;\n+        OffsetTime result;\n+        if (selectingTime)\n+        {\n+          AnyValue time = fields.get(TemporalFields.time);\n+          if (!(time instanceof TemporalValue))\n+          {\n+            throw new InvalidValuesArgumentException(String.format(\"Cannot construct time from: %s\", time));\n+          }\n+          TemporalValue t = (TemporalValue) time;\n+          result = t.getTimePart(defaultZone);\n+          selectingTimeZone = t.supportsTimeZone();\n+        } else\n+        {\n+          ZoneId timezone = timezone();\n+          if (!(timezone instanceof ZoneOffset))\n+          {\n+            timezone = assertValidArgument(() -> ZonedDateTime.ofInstant(Instant.now(), timezone())).getOffset();\n+          }\n+\n+          result = defaultTime(timezone);\n+          selectingTimeZone = false;\n+        }\n \n-    public static TimeValue truncate(\n-            TemporalUnit unit,\n-            TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n-    {\n-        OffsetTime time = input.getTimePart( defaultZone );\n-        OffsetTime truncatedOT = assertValidUnit( () -> time.truncatedTo( unit ) );\n-        if ( fields.size() == 0 )\n+        result = assignAllFields(result);\n+        if (timezone != null)\n         {\n-            return time( truncatedOT );\n+          ZoneOffset currentOffset = assertValidArgument(() -> ZonedDateTime.ofInstant(Instant.now(), timezone())).getOffset();\n+          if (selectingTime && selectingTimeZone)\n+          {\n+            result = result.withOffsetSameInstant(currentOffset);\n+          } else\n+          {\n+            result = result.withOffsetSameLocal(currentOffset);\n+          }\n         }\n-        else\n+        return time(result);\n+      }\n+\n+      @Override\n+      protected TimeValue selectTime(\n+          AnyValue temporal)\n+      {\n+        if (!(temporal instanceof TemporalValue))\n         {\n-            // Timezone needs some special handling, since the builder will shift keeping the instant instead of the local time\n-            Map<String,AnyValue> updatedFields = new HashMap<>( fields.size() + 1 );\n-            for ( Map.Entry<String,AnyValue> entry : fields.entrySet() )\n-            {\n-                if ( \"timezone\".equals( entry.getKey() ) )\n-                {\n-                    ZonedDateTime currentDT = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), timezoneOf( entry.getValue() ) ) );\n-                    ZoneOffset currentOffset = currentDT.getOffset();\n-                    truncatedOT = truncatedOT.withOffsetSameLocal( currentOffset );\n-                }\n-                else\n-                {\n-                    updatedFields.put( entry.getKey(), entry.getValue() );\n-                }\n-            }\n-\n-            truncatedOT = updateFieldMapWithConflictingSubseconds( updatedFields, unit, truncatedOT );\n-\n-            if ( updatedFields.size() == 0 )\n-            {\n-                return time( truncatedOT );\n-            }\n-            updatedFields.put( \"time\", time( truncatedOT ) );\n-            return build( VirtualValues.map( updatedFields ), defaultZone );\n+          throw new InvalidValuesArgumentException(String.format(\"Cannot construct time from: %s\", temporal));\n         }\n-    }\n-\n-    static OffsetTime defaultTime( ZoneId zoneId )\n-    {\n-        return OffsetTime.of( TemporalFields.hour.defaultValue, TemporalFields.minute.defaultValue,\n-                TemporalFields.second.defaultValue, TemporalFields.nanosecond.defaultValue,\n-                assertValidZone( () -> ZoneOffset.of( zoneId.toString() ) ) );\n-    }\n-\n-    static TimeBuilder<TimeValue> builder( Supplier<ZoneId> defaultZone )\n-    {\n-        return new TimeBuilder<TimeValue>( defaultZone )\n+        if (temporal instanceof TimeValue &&\n+            timezone == null)\n         {\n-            @Override\n-            protected boolean supportsTimeZone()\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public TimeValue buildInternal()\n-            {\n-                boolean selectingTime = fields.containsKey( TemporalFields.time );\n-                boolean selectingTimeZone;\n-                OffsetTime result;\n-                if ( selectingTime )\n-                {\n-                    AnyValue time = fields.get( TemporalFields.time );\n-                    if ( !(time instanceof TemporalValue) )\n-                    {\n-                        throw new InvalidValuesArgumentException( String.format( \"Cannot construct time from: %s\", time ) );\n-                    }\n-                    TemporalValue t = (TemporalValue) time;\n-                    result = t.getTimePart( defaultZone );\n-                    selectingTimeZone = t.supportsTimeZone();\n-                }\n-                else\n-                {\n-                    ZoneId timezone = timezone();\n-                    if ( !(timezone instanceof ZoneOffset) )\n-                    {\n-                        timezone = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), timezone() ) ).getOffset();\n-                    }\n-\n-                    result = defaultTime( timezone );\n-                    selectingTimeZone = false;\n-                }\n-\n-                result = assignAllFields( result );\n-                if ( timezone != null )\n-                {\n-                    ZoneOffset currentOffset = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), timezone() ) ).getOffset();\n-                    if ( selectingTime && selectingTimeZone )\n-                    {\n-                        result = result.withOffsetSameInstant( currentOffset );\n-                    }\n-                    else\n-                    {\n-                        result = result.withOffsetSameLocal( currentOffset );\n-                    }\n-                }\n-                return time( result );\n-            }\n-            @Override\n-            protected TimeValue selectTime(\n-                    AnyValue temporal )\n-            {\n-                if ( !(temporal instanceof TemporalValue) )\n-                {\n-                    throw new InvalidValuesArgumentException( String.format( \"Cannot construct time from: %s\", temporal ) );\n-                }\n-                if ( temporal instanceof TimeValue &&\n-                        timezone == null )\n-                {\n-                    return (TimeValue) temporal;\n-                }\n-\n-                TemporalValue v = (TemporalValue) temporal;\n-                OffsetTime time = v.getTimePart( defaultZone );\n-                if ( timezone != null )\n-                {\n-                    ZoneOffset currentOffset = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), timezone() ) ).getOffset();\n-                    time = time.withOffsetSameInstant( currentOffset );\n-                }\n-                return time( time );\n-            }\n-        };\n-    }\n-\n-    private final OffsetTime value;\n-    private final long nanosOfDayUTC;\n-\n-    private TimeValue( OffsetTime value )\n-    {\n-        this.value = value;\n-        this.nanosOfDayUTC = TemporalUtil.getNanosOfDayUTC( this.value );\n-    }\n+          return (TimeValue) temporal;\n+        }\n \n-    @Override\n-    int unsafeCompareTo( Value otherValue )\n-    {\n-        TimeValue other = (TimeValue) otherValue;\n-        int compare = Long.compare( nanosOfDayUTC, other.nanosOfDayUTC );\n-        if ( compare == 0 )\n+        TemporalValue v = (TemporalValue) temporal;\n+        OffsetTime time = v.getTimePart(defaultZone);\n+        if (timezone != null)\n         {\n-            compare = Integer.compare( value.getOffset().getTotalSeconds(), other.value.getOffset().getTotalSeconds() );\n+          ZoneOffset currentOffset = assertValidArgument(() -> ZonedDateTime.ofInstant(Instant.now(), timezone())).getOffset();\n+          time = time.withOffsetSameInstant(currentOffset);\n         }\n-        return compare;\n-    }\n-\n-    @Override\n-    OffsetTime temporal()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    LocalDate getDatePart()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the date of: %s\", this ) );\n-    }\n-\n-    @Override\n-    LocalTime getLocalTimePart()\n-    {\n-        return value.toLocalTime();\n-    }\n-\n-    @Override\n-    OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    ZoneId getZoneId( Supplier<ZoneId> defaultZone )\n-    {\n-        return value.getOffset();\n-    }\n-\n-    @Override\n-    ZoneId getZoneId()\n-    {\n-        throw new UnsupportedTemporalTypeException( \"Cannot get the timezone of\" + this );\n-    }\n-\n-    @Override\n-    ZoneOffset getZoneOffset()\n-    {\n-        return value.getOffset();\n-    }\n-\n-    @Override\n-    public boolean supportsTimeZone()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        return other instanceof TimeValue && value.equals( ((TimeValue) other).value );\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeTime( value );\n+        return time(time);\n+      }\n+    };\n+  }\n+\n+  private final OffsetTime value;\n+  private final long nanosOfDayUTC;\n+\n+  private TimeValue(OffsetTime value)\n+  {\n+    this.value = value;\n+    this.nanosOfDayUTC = TemporalUtil.getNanosOfDayUTC(this.value);\n+  }\n+\n+  @Override\n+  int unsafeCompareTo(Value otherValue)\n+  {\n+    TimeValue other = (TimeValue) otherValue;\n+    int compare = Long.compare(nanosOfDayUTC, other.nanosOfDayUTC);\n+    if (compare == 0)\n+    {\n+      compare = Integer.compare(value.getOffset().getTotalSeconds(), other.value.getOffset().getTotalSeconds());\n+    }\n+    return compare;\n+  }\n+\n+  @Override\n+  OffsetTime temporal()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  LocalDate getDatePart()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the date of: %s\", this));\n+  }\n+\n+  @Override\n+  LocalTime getLocalTimePart()\n+  {\n+    return value.toLocalTime();\n+  }\n+\n+  @Override\n+  OffsetTime getTimePart(Supplier<ZoneId> defaultZone)\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  ZoneId getZoneId(Supplier<ZoneId> defaultZone)\n+  {\n+    return value.getOffset();\n+  }\n+\n+  @Override\n+  ZoneId getZoneId()\n+  {\n+    throw new UnsupportedTemporalTypeException(\"Cannot get the timezone of\" + this);\n+  }\n+\n+  @Override\n+  ZoneOffset getZoneOffset()\n+  {\n+    return value.getOffset();\n+  }\n+\n+  @Override\n+  public boolean supportsTimeZone()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    return other instanceof TimeValue && value.equals(((TimeValue) other).value);\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeTime(value);\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return assertPrintable(() -> value.format(DateTimeFormatter.ISO_TIME));\n+  }\n+\n+  @Override\n+  public ValueGroup valueGroup()\n+  {\n+    return ValueGroup.ZONED_TIME;\n+  }\n+\n+  @Override\n+  protected int computeHash()\n+  {\n+    return Long.hashCode(value.toLocalTime().toNanoOfDay() - value.getOffset().getTotalSeconds() * 1000_000_000L);\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapTime(this);\n+  }\n+\n+  @Override\n+  public TimeValue add(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.plusNanos(duration.nanosOfDay())));\n+  }\n+\n+  @Override\n+  public TimeValue sub(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.minusNanos(duration.nanosOfDay())));\n+  }\n+\n+  @Override\n+  TimeValue replacement(OffsetTime time)\n+  {\n+    return time == value ? this : new TimeValue(time);\n+  }\n+\n+  private static final String OFFSET_PATTERN = \"(?<zone>Z|[+-](?<zoneHour>[0-9]{2})(?::?(?<zoneMinute>[0-9]{2}))?)\";\n+  static final String TIME_PATTERN = LocalTimeValue.TIME_PATTERN + \"(?:\" + OFFSET_PATTERN + \")?\";\n+  private static final Pattern PATTERN = Pattern.compile(\"(?:T)?\" + TIME_PATTERN);\n+  static final Pattern OFFSET = Pattern.compile(OFFSET_PATTERN);\n+\n+  static ZoneOffset parseOffset(String offset)\n+  {\n+    Matcher matcher = OFFSET.matcher(offset);\n+    if (matcher.matches())\n+    {\n+      return parseOffset(matcher);\n+    }\n+    throw new InvalidValuesArgumentException(\"Not a valid offset: \" + offset);\n+  }\n+\n+  static ZoneOffset parseOffset(Matcher matcher)\n+  {\n+    String zone = matcher.group(\"zone\");\n+    if (null == zone)\n+    {\n+      return null;\n+    }\n+    if (\"Z\".equalsIgnoreCase(zone))\n+    {\n+      return UTC;\n+    }\n+    int factor = zone.charAt(0) == '+' ? 1 : -1;\n+    int hours = parseInt(matcher.group(\"zoneHour\"));\n+    int minutes = optInt(matcher.group(\"zoneMinute\"));\n+    return assertValidZone(() -> ZoneOffset.ofHoursMinutes(factor * hours, factor * minutes));\n+  }\n+\n+  private static TimeValue parse(Matcher matcher, Supplier<ZoneId> defaultZone)\n+  {\n+    return new TimeValue(OffsetTime.of(parseTime(matcher), parseOffset(matcher, defaultZone)));\n+  }\n+\n+  private static ZoneOffset parseOffset(Matcher matcher, Supplier<ZoneId> defaultZone)\n+  {\n+    ZoneOffset offset = parseOffset(matcher);\n+    if (offset == null)\n+    {\n+      ZoneId zoneId = defaultZone.get();\n+      offset = zoneId instanceof ZoneOffset ? (ZoneOffset) zoneId : zoneId.getRules().getOffset(Instant.now());\n+    }\n+    return offset;\n+  }\n+\n+  abstract static class TimeBuilder<Result> extends Builder<Result>\n+  {\n+    TimeBuilder(Supplier<ZoneId> defaultZone)\n+    {\n+      super(defaultZone);\n     }\n \n     @Override\n-    public String prettyPrint()\n+    protected final boolean supportsDate()\n     {\n-        return assertPrintable( () -> value.format( DateTimeFormatter.ISO_TIME ) );\n+      return false;\n     }\n \n     @Override\n-    public ValueGroup valueGroup()\n+    protected final boolean supportsTime()\n     {\n-        return ValueGroup.ZONED_TIME;\n+      return true;\n     }\n \n     @Override\n-    protected int computeHash()\n+    protected boolean supportsEpoch()\n     {\n-        return Long.hashCode( value.toLocalTime().toNanoOfDay() - value.getOffset().getTotalSeconds() * 1000_000_000L );\n+      return false;\n     }\n \n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n-    {\n-        return mapper.mapTime( this );\n-    }\n-\n-    @Override\n-    public TimeValue add( DurationValue duration )\n-    {\n-        return replacement( assertValidArithmetic( () -> value.plusNanos( duration.nanosOfDay() ) ) );\n-    }\n-\n-    @Override\n-    public TimeValue sub( DurationValue duration )\n-    {\n-        return replacement( assertValidArithmetic( () -> value.minusNanos( duration.nanosOfDay() ) ) );\n-    }\n-\n-    @Override\n-    TimeValue replacement( OffsetTime time )\n-    {\n-        return time == value ? this : new TimeValue( time );\n-    }\n-\n-    private static final String OFFSET_PATTERN = \"(?<zone>Z|[+-](?<zoneHour>[0-9]{2})(?::?(?<zoneMinute>[0-9]{2}))?)\";\n-    static final String TIME_PATTERN = LocalTimeValue.TIME_PATTERN + \"(?:\" + OFFSET_PATTERN + \")?\";\n-    private static final Pattern PATTERN = Pattern.compile( \"(?:T)?\" + TIME_PATTERN );\n-    static final Pattern OFFSET = Pattern.compile( OFFSET_PATTERN );\n-\n-    static ZoneOffset parseOffset( String offset )\n-    {\n-        Matcher matcher = OFFSET.matcher( offset );\n-        if ( matcher.matches() )\n-        {\n-            return parseOffset( matcher );\n-        }\n-        throw new InvalidValuesArgumentException( \"Not a valid offset: \" + offset );\n-    }\n-\n-    static ZoneOffset parseOffset( Matcher matcher )\n-    {\n-        String zone = matcher.group( \"zone\" );\n-        if ( null == zone )\n-        {\n-            return null;\n-        }\n-        if ( \"Z\".equalsIgnoreCase( zone ) )\n-        {\n-            return UTC;\n-        }\n-        int factor = zone.charAt( 0 ) == '+' ? 1 : -1;\n-        int hours = parseInt( matcher.group( \"zoneHour\" ) );\n-        int minutes = optInt( matcher.group( \"zoneMinute\" ) );\n-        return assertValidZone( () -> ZoneOffset.ofHoursMinutes( factor * hours, factor * minutes ) );\n-    }\n-\n-    private static TimeValue parse( Matcher matcher, Supplier<ZoneId> defaultZone )\n-    {\n-        return new TimeValue( OffsetTime.of( parseTime( matcher ), parseOffset( matcher, defaultZone ) ) );\n-    }\n-\n-    private static ZoneOffset parseOffset( Matcher matcher, Supplier<ZoneId> defaultZone )\n-    {\n-        ZoneOffset offset = parseOffset( matcher );\n-        if ( offset == null )\n-        {\n-            ZoneId zoneId = defaultZone.get();\n-            offset = zoneId instanceof ZoneOffset ? (ZoneOffset) zoneId : zoneId.getRules().getOffset( Instant.now() );\n-        }\n-        return offset;\n-    }\n-\n-    abstract static class TimeBuilder<Result> extends Builder<Result>\n-    {\n-        TimeBuilder( Supplier<ZoneId> defaultZone )\n-        {\n-            super( defaultZone );\n-        }\n-\n-        @Override\n-        protected final boolean supportsDate()\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        protected final boolean supportsTime()\n-        {\n-            return true;\n-        }\n-\n-        @Override\n-        protected boolean supportsEpoch()\n-        {\n-            return false;\n-        }\n-\n-        protected abstract Result selectTime( AnyValue time );\n-    }\n+    protected abstract Result selectTime(AnyValue time);\n+  }\n }\n",
            "diff_size": 623
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/381/TimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/381/TimeValue.java\nindex 38f2a5d9d98..3bd389b07fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/381/TimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/381/TimeValue.java\n@@ -69,8 +69,7 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n \n     public static TimeValue time( int hour, int minute, int second, int nanosOfSecond, ZoneOffset offset )\n     {\n-        return new TimeValue(\n-                OffsetTime.of( assertValidArgument( () -> LocalTime.of( hour, minute, second, nanosOfSecond ) ), offset ) );\n+        return new TimeValue( OffsetTime.of( assertValidArgument( () -> LocalTime.of( hour, minute, second, nanosOfSecond ) ), offset ) );\n     }\n \n     public static TimeValue time( long nanosOfDayUTC, ZoneOffset offset )\n@@ -88,14 +87,15 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n     {\n         if ( fieldsFromHeader != null )\n         {\n-            if ( !(fieldsFromHeader instanceof TimeCSVHeaderInformation) )\n+            if ( !( fieldsFromHeader instanceof TimeCSVHeaderInformation) )\n             {\n                 throw new IllegalStateException( \"Wrong header information type: \" + fieldsFromHeader );\n             }\n             // Override defaultZone\n             defaultZone = ((TimeCSVHeaderInformation) fieldsFromHeader).zoneSupplier( defaultZone );\n         }\n-        return parse( TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone );\n+\n+return parse( TimeValue.class, PATTERN, TimeValue::parse, text, defaultZone );\n     }\n \n     public static TimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone )\n@@ -139,11 +139,9 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n         return true;\n     }\n \n-    public static TimeValue truncate(\n-            TemporalUnit unit,\n+    public static TimeValue truncate( TemporalUnit unit,\n             TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n+            MapValue fields, Supplier<ZoneId> defaultZone )\n     {\n         OffsetTime time = input.getTimePart( defaultZone );\n         OffsetTime truncatedOT = assertValidUnit( () -> time.truncatedTo( unit ) );\n@@ -170,8 +168,7 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n             }\n \n             truncatedOT = updateFieldMapWithConflictingSubseconds( updatedFields, unit, truncatedOT );\n-\n-            if ( updatedFields.size() == 0 )\n+if ( updatedFields.size() == 0 )\n             {\n                 return time( truncatedOT );\n             }\n@@ -183,8 +180,7 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n     static OffsetTime defaultTime( ZoneId zoneId )\n     {\n         return OffsetTime.of( TemporalFields.hour.defaultValue, TemporalFields.minute.defaultValue,\n-                TemporalFields.second.defaultValue, TemporalFields.nanosecond.defaultValue,\n-                assertValidZone( () -> ZoneOffset.of( zoneId.toString() ) ) );\n+                TemporalFields.second.defaultValue, TemporalFields.nanosecond.defaultValue,assertValidZone( () -> ZoneOffset.of( zoneId.toString() ) ) );\n     }\n \n     static TimeBuilder<TimeValue> builder( Supplier<ZoneId> defaultZone )\n@@ -206,18 +202,19 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n                 if ( selectingTime )\n                 {\n                     AnyValue time = fields.get( TemporalFields.time );\n-                    if ( !(time instanceof TemporalValue) )\n+                    if ( !( time instanceof TemporalValue) )\n                     {\n                         throw new InvalidValuesArgumentException( String.format( \"Cannot construct time from: %s\", time ) );\n                     }\n-                    TemporalValue t = (TemporalValue) time;\n+\n+TemporalValue t = (TemporalValue) time;\n                     result = t.getTimePart( defaultZone );\n                     selectingTimeZone = t.supportsTimeZone();\n                 }\n                 else\n                 {\n                     ZoneId timezone = timezone();\n-                    if ( !(timezone instanceof ZoneOffset) )\n+                    if ( !( timezone instanceof ZoneOffset) )\n                     {\n                         timezone = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), timezone() ) ).getOffset();\n                     }\n@@ -241,17 +238,18 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n                 }\n                 return time( result );\n             }\n-            @Override\n-            protected TimeValue selectTime(\n-                    AnyValue temporal )\n+\n+@Override\n+            protected TimeValue selectTime( AnyValue temporal )\n             {\n-                if ( !(temporal instanceof TemporalValue) )\n+                if ( !( temporal instanceof TemporalValue) )\n                 {\n                     throw new InvalidValuesArgumentException( String.format( \"Cannot construct time from: %s\", temporal ) );\n                 }\n-                if ( temporal instanceof TimeValue &&\n+\n+if ( temporal instanceof TimeValue &&\n                         timezone == null )\n-                {\n+{\n                     return (TimeValue) temporal;\n                 }\n \n@@ -262,7 +260,8 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n                     ZoneOffset currentOffset = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), timezone() ) ).getOffset();\n                     time = time.withOffsetSameInstant( currentOffset );\n                 }\n-                return time( time );\n+\n+return time( time );\n             }\n         };\n     }\n@@ -285,7 +284,8 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n         {\n             compare = Integer.compare( value.getOffset().getTotalSeconds(), other.value.getOffset().getTotalSeconds() );\n         }\n-        return compare;\n+\n+return compare;\n     }\n \n     @Override\n@@ -412,7 +412,8 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n         {\n             return null;\n         }\n-        if ( \"Z\".equalsIgnoreCase( zone ) )\n+\n+if ( \"Z\".equalsIgnoreCase( zone ) )\n         {\n             return UTC;\n         }\n@@ -435,7 +436,8 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n             ZoneId zoneId = defaultZone.get();\n             offset = zoneId instanceof ZoneOffset ? (ZoneOffset) zoneId : zoneId.getRules().getOffset( Instant.now() );\n         }\n-        return offset;\n+\n+return offset;\n     }\n \n     abstract static class TimeBuilder<Result> extends Builder<Result>\n@@ -465,4 +467,4 @@ public final class TimeValue extends TemporalValue<OffsetTime,TimeValue>\n \n         protected abstract Result selectTime( AnyValue time );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}