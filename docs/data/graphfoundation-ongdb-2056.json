{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2056",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2056/BaseProtocolResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2056/BaseProtocolResponse.java\nindex fa02af65e48..c380fc9c200 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2056/BaseProtocolResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2056/BaseProtocolResponse.java\n@@ -17,62 +17,63 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.protocol.handshake;\n \n import java.util.Objects;\n \n public abstract class BaseProtocolResponse<IMPL extends Comparable<IMPL>> implements ClientMessage\n {\n-    private final StatusCode statusCode;\n-    private final String protocolName;\n-    private final IMPL version;\n+  private final StatusCode statusCode;\n+  private final String protocolName;\n+  private final IMPL version;\n \n-    BaseProtocolResponse( StatusCode statusCode, String protocolName, IMPL version )\n-    {\n-        this.statusCode = statusCode;\n-        this.protocolName = protocolName;\n-        this.version = version;\n-    }\n+  BaseProtocolResponse(StatusCode statusCode, String protocolName, IMPL version)\n+  {\n+    this.statusCode = statusCode;\n+    this.protocolName = protocolName;\n+    this.version = version;\n+  }\n \n-    @Override\n-    public boolean equals( Object o )\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        BaseProtocolResponse that = (BaseProtocolResponse) o;\n-        return Objects.equals( version, that.version ) && Objects.equals( protocolName, that.protocolName );\n+      return true;\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return Objects.hash( protocolName, version );\n+      return false;\n     }\n+    BaseProtocolResponse that = (BaseProtocolResponse) o;\n+    return Objects.equals(version, that.version) && Objects.equals(protocolName, that.protocolName);\n+  }\n \n-    public StatusCode statusCode()\n-    {\n-        return statusCode;\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(protocolName, version);\n+  }\n \n-    public String protocolName()\n-    {\n-        return protocolName;\n-    }\n+  public StatusCode statusCode()\n+  {\n+    return statusCode;\n+  }\n \n-    public IMPL version()\n-    {\n-        return version;\n-    }\n+  public String protocolName()\n+  {\n+    return protocolName;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"BaseProtocolResponse{\" + \"statusCode=\" + statusCode + \", protocolName='\" + protocolName + '\\'' + \", version=\" + version + '}';\n-    }\n+  public IMPL version()\n+  {\n+    return version;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"BaseProtocolResponse{\" + \"statusCode=\" + statusCode + \", protocolName='\" + protocolName + '\\'' + \", version=\" + version + '}';\n+  }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2056/BaseProtocolResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2056/BaseProtocolResponse.java\nindex fa02af65e48..699cba72932 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2056/BaseProtocolResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2056/BaseProtocolResponse.java\n@@ -41,11 +41,13 @@ public abstract class BaseProtocolResponse<IMPL extends Comparable<IMPL>> implem\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        BaseProtocolResponse that = (BaseProtocolResponse) o;\n+\n+BaseProtocolResponse that = (BaseProtocolResponse) o;\n         return Objects.equals( version, that.version ) && Objects.equals( protocolName, that.protocolName );\n     }\n \n@@ -75,4 +77,4 @@ public abstract class BaseProtocolResponse<IMPL extends Comparable<IMPL>> implem\n     {\n         return \"BaseProtocolResponse{\" + \"statusCode=\" + statusCode + \", protocolName='\" + protocolName + '\\'' + \", version=\" + version + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}