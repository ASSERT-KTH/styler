{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4505",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "92",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4505/NumberSchemaIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4505/NumberSchemaIndexReader.java\nindex ad864b54ed1..38c819ad94c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4505/NumberSchemaIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4505/NumberSchemaIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.index.internal.gbptree.GBPTree;\n@@ -30,82 +31,80 @@ import org.neo4j.kernel.impl.api.index.sampling.IndexSamplingConfig;\n import org.neo4j.values.storable.Value;\n import org.neo4j.values.storable.Values;\n \n-class NumberSchemaIndexReader<VALUE extends NativeSchemaValue> extends NativeSchemaIndexReader<NumberSchemaKey,VALUE>\n+class NumberSchemaIndexReader<VALUE extends NativeSchemaValue> extends NativeSchemaIndexReader<NumberSchemaKey, VALUE>\n {\n-    NumberSchemaIndexReader( GBPTree<NumberSchemaKey,VALUE> tree, Layout<NumberSchemaKey,VALUE> layout,\n-            IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor )\n-    {\n-        super( tree, layout, samplingConfig, descriptor );\n-    }\n+  NumberSchemaIndexReader(GBPTree<NumberSchemaKey, VALUE> tree, Layout<NumberSchemaKey, VALUE> layout,\n+                          IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor)\n+  {\n+    super(tree, layout, samplingConfig, descriptor);\n+  }\n \n-    @Override\n-    void validateQuery( IndexOrder indexOrder, IndexQuery[] predicates )\n+  @Override\n+  void validateQuery(IndexOrder indexOrder, IndexQuery[] predicates)\n+  {\n+    if (predicates.length != 1)\n     {\n-        if ( predicates.length != 1 )\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        CapabilityValidator.validateQuery( NumberIndexProvider.CAPABILITY, indexOrder, predicates );\n+      throw new UnsupportedOperationException();\n     }\n \n-    @Override\n-    boolean initializeRangeForQuery( NumberSchemaKey treeKeyFrom, NumberSchemaKey treeKeyTo, IndexQuery[] predicates )\n-    {\n-        IndexQuery predicate = predicates[0];\n-        switch ( predicate.type() )\n-        {\n-        case exists:\n-            treeKeyFrom.initAsLowest();\n-            treeKeyTo.initAsHighest();\n-            break;\n-        case exact:\n-            ExactPredicate exactPredicate = (ExactPredicate) predicate;\n-            treeKeyFrom.from( Long.MIN_VALUE, exactPredicate.value() );\n-            treeKeyTo.from( Long.MAX_VALUE, exactPredicate.value() );\n-            break;\n-        case range:\n-            RangePredicate<?> rangePredicate = (RangePredicate<?>) predicate;\n-            initFromForRange( rangePredicate, treeKeyFrom );\n-            initToForRange( rangePredicate, treeKeyTo );\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"IndexQuery of type \" + predicate.type() + \" is not supported.\" );\n-        }\n-        return false;\n-    }\n+    CapabilityValidator.validateQuery(NumberIndexProvider.CAPABILITY, indexOrder, predicates);\n+  }\n \n-    private void initToForRange( RangePredicate<?> rangePredicate, NumberSchemaKey treeKeyTo )\n+  @Override\n+  boolean initializeRangeForQuery(NumberSchemaKey treeKeyFrom, NumberSchemaKey treeKeyTo, IndexQuery[] predicates)\n+  {\n+    IndexQuery predicate = predicates[0];\n+    switch (predicate.type())\n     {\n-        Value toValue = rangePredicate.toValue();\n-        if ( toValue == Values.NO_VALUE )\n-        {\n-            treeKeyTo.initAsHighest();\n-        }\n-        else\n-        {\n-            treeKeyTo.from( rangePredicate.toInclusive() ? Long.MAX_VALUE : Long.MIN_VALUE, toValue );\n-            treeKeyTo.setCompareId( true );\n-        }\n+      case exists:\n+        treeKeyFrom.initAsLowest();\n+        treeKeyTo.initAsHighest();\n+        break;\n+      case exact:\n+        ExactPredicate exactPredicate = (ExactPredicate) predicate;\n+        treeKeyFrom.from(Long.MIN_VALUE, exactPredicate.value());\n+        treeKeyTo.from(Long.MAX_VALUE, exactPredicate.value());\n+        break;\n+      case range:\n+        RangePredicate<?> rangePredicate = (RangePredicate<?>) predicate;\n+        initFromForRange(rangePredicate, treeKeyFrom);\n+        initToForRange(rangePredicate, treeKeyTo);\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"IndexQuery of type \" + predicate.type() + \" is not supported.\");\n     }\n+    return false;\n+  }\n \n-    private void initFromForRange( RangePredicate<?> rangePredicate, NumberSchemaKey treeKeyFrom )\n+  private void initToForRange(RangePredicate<?> rangePredicate, NumberSchemaKey treeKeyTo)\n+  {\n+    Value toValue = rangePredicate.toValue();\n+    if (toValue == Values.NO_VALUE)\n+    {\n+      treeKeyTo.initAsHighest();\n+    } else\n     {\n-        Value fromValue = rangePredicate.fromValue();\n-        if ( fromValue == Values.NO_VALUE )\n-        {\n-            treeKeyFrom.initAsLowest();\n-        }\n-        else\n-        {\n-            treeKeyFrom.from( rangePredicate.fromInclusive() ? Long.MIN_VALUE : Long.MAX_VALUE, fromValue );\n-            treeKeyFrom.setCompareId( true );\n-        }\n+      treeKeyTo.from(rangePredicate.toInclusive() ? Long.MAX_VALUE : Long.MIN_VALUE, toValue);\n+      treeKeyTo.setCompareId(true);\n     }\n+  }\n \n-    @Override\n-    public boolean hasFullValuePrecision( IndexQuery... predicates )\n+  private void initFromForRange(RangePredicate<?> rangePredicate, NumberSchemaKey treeKeyFrom)\n+  {\n+    Value fromValue = rangePredicate.fromValue();\n+    if (fromValue == Values.NO_VALUE)\n     {\n-        return true;\n+      treeKeyFrom.initAsLowest();\n+    } else\n+    {\n+      treeKeyFrom.from(rangePredicate.fromInclusive() ? Long.MIN_VALUE : Long.MAX_VALUE, fromValue);\n+      treeKeyFrom.setCompareId(true);\n     }\n+  }\n+\n+  @Override\n+  public boolean hasFullValuePrecision(IndexQuery... predicates)\n+  {\n+    return true;\n+  }\n }\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4505/NumberSchemaIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4505/NumberSchemaIndexReader.java\nindex ad864b54ed1..32c5203e119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4505/NumberSchemaIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4505/NumberSchemaIndexReader.java\n@@ -66,7 +66,8 @@ class NumberSchemaIndexReader<VALUE extends NativeSchemaValue> extends NativeSch\n             break;\n         case range:\n             RangePredicate<?> rangePredicate = (RangePredicate<?>) predicate;\n-            initFromForRange( rangePredicate, treeKeyFrom );\n+\n+initFromForRange( rangePredicate, treeKeyFrom );\n             initToForRange( rangePredicate, treeKeyTo );\n             break;\n         default:\n@@ -108,4 +109,4 @@ class NumberSchemaIndexReader<VALUE extends NativeSchemaValue> extends NativeSch\n     {\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}