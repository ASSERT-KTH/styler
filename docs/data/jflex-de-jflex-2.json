{
    "project_name": "jflex-de-jflex",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage jflex.testing.javac;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Preconditions;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/2/CompilerException.java\nindex 680a295dffd..63b980f2856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/2/CompilerException.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.javac;\n \n import com.google.common.base.Joiner;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/2/CompilerException.java\nindex 680a295dffd..63b980f2856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/2/CompilerException.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.javac;\n \n import com.google.common.base.Joiner;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/2/CompilerException.java\nindex 680a295dffd..48f638598fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/2/CompilerException.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.javac;\n \n import com.google.common.base.Joiner;\n@@ -61,14 +62,12 @@ public class CompilerException extends Exception {\n   @Override\n   public String toString() {\n     List<String> diagnosticMessages =\n-        diagnostics\n-            .stream()\n+        diagnostics.stream()\n             .map(\n                 d ->\n                     String.format(\n                         \"javac error: %s, line %d in file %s\",\n-                        d.getMessage(Locale.ENGLISH), d.getLineNumber(), d.getSource().getName()))\n-            .collect(Collectors.toList());\n+                        d.getMessage(Locale.ENGLISH), d.getLineNumber(), d.getSource().getName())).collect(Collectors.toList());\n     return super.toString() + \"\\n\" + Joiner.on('\\n').join(diagnosticMessages);\n   }\n \n@@ -77,4 +76,4 @@ public class CompilerException extends Exception {\n     Diagnostic<? extends JavaFileObject> firstDiagnostic = diagnostics.get(0);\n     return firstDiagnostic.getCode();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/2/CompilerException.java\nindex 680a295dffd..297ee844fde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/2/CompilerException.java\n@@ -39,6 +39,8 @@ import javax.tools.JavaFileObject;\n  *\n  * @author R\u00e9gis D\u00e9camps\n  */\n+\n+\n public class CompilerException extends Exception {\n \n   private final List<Diagnostic<? extends JavaFileObject>> diagnostics;\n@@ -48,11 +50,13 @@ public class CompilerException extends Exception {\n     this.diagnostics = diagnostics;\n   }\n \n+\n   public CompilerException(Throwable e) {\n     super(\"javac exception: \" + e.getMessage(), e);\n     this.diagnostics = ImmutableList.of();\n   }\n \n+\n   public CompilerException(String message) {\n     super(\"javac exception: \" + message);\n     this.diagnostics = ImmutableList.of();\n@@ -60,15 +64,8 @@ public class CompilerException extends Exception {\n \n   @Override\n   public String toString() {\n-    List<String> diagnosticMessages =\n-        diagnostics\n-            .stream()\n-            .map(\n-                d ->\n-                    String.format(\n-                        \"javac error: %s, line %d in file %s\",\n-                        d.getMessage(Locale.ENGLISH), d.getLineNumber(), d.getSource().getName()))\n-            .collect(Collectors.toList());\n+    List<String> diagnosticMessages = diagnostics.stream().map(d->String.format(\"javac error: %s, line %d in file %s\", d.getMessage(Locale.ENGLISH), d.getLineNumber(), d.getSource().getName()))\n+                                                          .collect(Collectors.toList());\n     return super.toString() + \"\\n\" + Joiner.on('\\n').join(diagnosticMessages);\n   }\n \n@@ -77,4 +74,4 @@ public class CompilerException extends Exception {\n     Diagnostic<? extends JavaFileObject> firstDiagnostic = diagnostics.get(0);\n     return firstDiagnostic.getCode();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/2/CompilerException.java\nindex 680a295dffd..63b980f2856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/2/CompilerException.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.javac;\n \n import com.google.common.base.Joiner;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/2/CompilerException.java\nindex 680a295dffd..63b980f2856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/2/CompilerException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/2/CompilerException.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.javac;\n \n import com.google.common.base.Joiner;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}