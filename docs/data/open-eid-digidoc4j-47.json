{
    "project_name": "open-eid-digidoc4j",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n        genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }\n\n    ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/47/ExternalConnectionType.java\nindex 31fcf040569..4427985feb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/47/ExternalConnectionType.java\n@@ -10,72 +10,73 @@ import static org.digidoc4j.ConfigurationParameter.*;\n \n public enum ExternalConnectionType {\n \n-    TSL(\n-            Pair.of(HttpProxyHost, TslHttpProxyHost),\n-            Pair.of(HttpProxyPort, TslHttpProxyPort),\n-            Pair.of(HttpsProxyHost, TslHttpsProxyHost),\n-            Pair.of(HttpsProxyPort, TslHttpsProxyPort),\n-            Pair.of(HttpProxyUser, TslHttpProxyUser),\n-            Pair.of(HttpProxyPassword, TslHttpProxyPassword),\n-            Pair.of(SslKeystoreType, TslSslKeystoreType),\n-            Pair.of(SslTruststoreType, TslSslTruststoreType),\n-            Pair.of(SslKeystorePath, TslSslKeystorePath),\n-            Pair.of(SslKeystorePassword, TslSslKeystorePassword),\n-            Pair.of(SslTruststorePath, TslSslTruststorePath),\n-            Pair.of(SslTruststorePassword, TslSslTruststorePassword),\n-            Pair.of(SslProtocol, TslSslProtocol),\n-            Pair.of(SupportedSslProtocols, TslSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, TslSupportedSslCipherSuites)\n-    ),\n+  TSL(\n+      Pair.of(HttpProxyHost, TslHttpProxyHost),\n+      Pair.of(HttpProxyPort, TslHttpProxyPort),\n+      Pair.of(HttpsProxyHost, TslHttpsProxyHost),\n+      Pair.of(HttpsProxyPort, TslHttpsProxyPort),\n+      Pair.of(HttpProxyUser, TslHttpProxyUser),\n+      Pair.of(HttpProxyPassword, TslHttpProxyPassword),\n+      Pair.of(SslKeystoreType, TslSslKeystoreType),\n+      Pair.of(SslTruststoreType, TslSslTruststoreType),\n+      Pair.of(SslKeystorePath, TslSslKeystorePath),\n+      Pair.of(SslKeystorePassword, TslSslKeystorePassword),\n+      Pair.of(SslTruststorePath, TslSslTruststorePath),\n+      Pair.of(SslTruststorePassword, TslSslTruststorePassword),\n+      Pair.of(SslProtocol, TslSslProtocol),\n+      Pair.of(SupportedSslProtocols, TslSupportedSslProtocols),\n+      Pair.of(SupportedSslCipherSuites, TslSupportedSslCipherSuites)\n+  ),\n \n-    OCSP(\n-            Pair.of(HttpProxyHost, OcspHttpProxyHost),\n-            Pair.of(HttpProxyPort, OcspHttpProxyPort),\n-            Pair.of(HttpsProxyHost, OcspHttpsProxyHost),\n-            Pair.of(HttpsProxyPort, OcspHttpsProxyPort),\n-            Pair.of(HttpProxyUser, OcspHttpProxyUser),\n-            Pair.of(HttpProxyPassword, OcspHttpProxyPassword),\n-            Pair.of(SslKeystoreType, OcspSslKeystoreType),\n-            Pair.of(SslTruststoreType, OcspSslTruststoreType),\n-            Pair.of(SslKeystorePath, OcspSslKeystorePath),\n-            Pair.of(SslKeystorePassword, OcspSslKeystorePassword),\n-            Pair.of(SslTruststorePath, OcspSslTruststorePath),\n-            Pair.of(SslTruststorePassword, OcspSslTruststorePassword),\n-            Pair.of(SslProtocol, OcspSslProtocol),\n-            Pair.of(SupportedSslProtocols, OcspSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, OcspSupportedSslCipherSuites)\n-    ),\n+  OCSP(\n+      Pair.of(HttpProxyHost, OcspHttpProxyHost),\n+      Pair.of(HttpProxyPort, OcspHttpProxyPort),\n+      Pair.of(HttpsProxyHost, OcspHttpsProxyHost),\n+      Pair.of(HttpsProxyPort, OcspHttpsProxyPort),\n+      Pair.of(HttpProxyUser, OcspHttpProxyUser),\n+      Pair.of(HttpProxyPassword, OcspHttpProxyPassword),\n+      Pair.of(SslKeystoreType, OcspSslKeystoreType),\n+      Pair.of(SslTruststoreType, OcspSslTruststoreType),\n+      Pair.of(SslKeystorePath, OcspSslKeystorePath),\n+      Pair.of(SslKeystorePassword, OcspSslKeystorePassword),\n+      Pair.of(SslTruststorePath, OcspSslTruststorePath),\n+      Pair.of(SslTruststorePassword, OcspSslTruststorePassword),\n+      Pair.of(SslProtocol, OcspSslProtocol),\n+      Pair.of(SupportedSslProtocols, OcspSupportedSslProtocols),\n+      Pair.of(SupportedSslCipherSuites, OcspSupportedSslCipherSuites)\n+  ),\n \n-    TSP(\n-            Pair.of(HttpProxyHost, TspHttpProxyHost),\n-            Pair.of(HttpProxyPort, TspHttpProxyPort),\n-            Pair.of(HttpsProxyHost, TspHttpsProxyHost),\n-            Pair.of(HttpsProxyPort, TspHttpsProxyPort),\n-            Pair.of(HttpProxyUser, TspHttpProxyUser),\n-            Pair.of(HttpProxyPassword, TspHttpProxyPassword),\n-            Pair.of(SslKeystoreType, TspSslKeystoreType),\n-            Pair.of(SslTruststoreType, TspSslTruststoreType),\n-            Pair.of(SslKeystorePath, TspSslKeystorePath),\n-            Pair.of(SslKeystorePassword, TspSslKeystorePassword),\n-            Pair.of(SslTruststorePath, TspSslTruststorePath),\n-            Pair.of(SslTruststorePassword, TspSslTruststorePassword),\n-            Pair.of(SslProtocol, TspSslProtocol),\n-            Pair.of(SupportedSslProtocols, TspSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, TspSupportedSslCipherSuites)\n-    );\n+  TSP(\n+      Pair.of(HttpProxyHost, TspHttpProxyHost),\n+      Pair.of(HttpProxyPort, TspHttpProxyPort),\n+      Pair.of(HttpsProxyHost, TspHttpsProxyHost),\n+      Pair.of(HttpsProxyPort, TspHttpsProxyPort),\n+      Pair.of(HttpProxyUser, TspHttpProxyUser),\n+      Pair.of(HttpProxyPassword, TspHttpProxyPassword),\n+      Pair.of(SslKeystoreType, TspSslKeystoreType),\n+      Pair.of(SslTruststoreType, TspSslTruststoreType),\n+      Pair.of(SslKeystorePath, TspSslKeystorePath),\n+      Pair.of(SslKeystorePassword, TspSslKeystorePassword),\n+      Pair.of(SslTruststorePath, TspSslTruststorePath),\n+      Pair.of(SslTruststorePassword, TspSslTruststorePassword),\n+      Pair.of(SslProtocol, TspSslProtocol),\n+      Pair.of(SupportedSslProtocols, TspSupportedSslProtocols),\n+      Pair.of(SupportedSslCipherSuites, TspSupportedSslCipherSuites)\n+  );\n \n-    private final Map<ConfigurationParameter, ConfigurationParameter> genericToSpecificParameterMap;\n+  private final Map<ConfigurationParameter, ConfigurationParameter> genericToSpecificParameterMap;\n \n-    ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n-        genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-    }\n+  ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n+    genericToSpecificParameterMap =\n+        Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+  }\n \n-    ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n-        ConfigurationParameter specificParameter = genericToSpecificParameterMap.get(genericParameter);\n-        if (specificParameter == null) {\n-            throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n-        }\n-        return specificParameter;\n+  ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n+    ConfigurationParameter specificParameter = genericToSpecificParameterMap.get(genericParameter);\n+    if (specificParameter == null) {\n+      throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n     }\n+    return specificParameter;\n+  }\n \n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/47/ExternalConnectionType.java\nindex 31fcf040569..c70dd5e0efd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/47/ExternalConnectionType.java\n@@ -10,8 +10,7 @@ import static org.digidoc4j.ConfigurationParameter.*;\n \n public enum ExternalConnectionType {\n \n-    TSL(\n-            Pair.of(HttpProxyHost, TslHttpProxyHost),\n+    TSL(Pair.of(HttpProxyHost, TslHttpProxyHost),\n             Pair.of(HttpProxyPort, TslHttpProxyPort),\n             Pair.of(HttpsProxyHost, TslHttpsProxyHost),\n             Pair.of(HttpsProxyPort, TslHttpsProxyPort),\n@@ -25,11 +24,10 @@ public enum ExternalConnectionType {\n             Pair.of(SslTruststorePassword, TslSslTruststorePassword),\n             Pair.of(SslProtocol, TslSslProtocol),\n             Pair.of(SupportedSslProtocols, TslSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, TslSupportedSslCipherSuites)\n-    ),\n+            Pair.of(SupportedSslCipherSuites, TslSupportedSslCipherSuites)),\n \n     OCSP(\n-            Pair.of(HttpProxyHost, OcspHttpProxyHost),\n+    Pair.of(HttpProxyHost, OcspHttpProxyHost),\n             Pair.of(HttpProxyPort, OcspHttpProxyPort),\n             Pair.of(HttpsProxyHost, OcspHttpsProxyHost),\n             Pair.of(HttpsProxyPort, OcspHttpsProxyPort),\n@@ -43,11 +41,10 @@ public enum ExternalConnectionType {\n             Pair.of(SslTruststorePassword, OcspSslTruststorePassword),\n             Pair.of(SslProtocol, OcspSslProtocol),\n             Pair.of(SupportedSslProtocols, OcspSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, OcspSupportedSslCipherSuites)\n-    ),\n+            Pair.of(SupportedSslCipherSuites, OcspSupportedSslCipherSuites)),\n \n     TSP(\n-            Pair.of(HttpProxyHost, TspHttpProxyHost),\n+    Pair.of(HttpProxyHost, TspHttpProxyHost),\n             Pair.of(HttpProxyPort, TspHttpProxyPort),\n             Pair.of(HttpsProxyHost, TspHttpsProxyHost),\n             Pair.of(HttpsProxyPort, TspHttpsProxyPort),\n@@ -61,21 +58,20 @@ public enum ExternalConnectionType {\n             Pair.of(SslTruststorePassword, TspSslTruststorePassword),\n             Pair.of(SslProtocol, TspSslProtocol),\n             Pair.of(SupportedSslProtocols, TspSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, TspSupportedSslCipherSuites)\n-    );\n+            Pair.of(SupportedSslCipherSuites, TspSupportedSslCipherSuites));\n \n     private final Map<ConfigurationParameter, ConfigurationParameter> genericToSpecificParameterMap;\n \n     ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n-        genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+  genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n     }\n \n     ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n         ConfigurationParameter specificParameter = genericToSpecificParameterMap.get(genericParameter);\n         if (specificParameter == null) {\n-            throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n+  throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n         }\n         return specificParameter;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 734).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 750).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 734).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/47/ExternalConnectionType.java\nindex 31fcf040569..c33fe0f4e9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/47/ExternalConnectionType.java\n@@ -1,81 +1,34 @@\n package org.digidoc4j;\n \n import org.apache.commons.lang3.tuple.Pair;\n-\n import java.util.Arrays;\n import java.util.Map;\n import java.util.stream.Collectors;\n-\n import static org.digidoc4j.ConfigurationParameter.*;\n \n+\n public enum ExternalConnectionType {\n+  TSL(Pair.of(HttpProxyHost, TslHttpProxyHost), Pair.of(HttpProxyPort, TslHttpProxyPort), Pair.of(HttpsProxyHost, TslHttpsProxyHost), Pair.of(HttpsProxyPort, TslHttpsProxyPort), Pair.of(HttpProxyUser, TslHttpProxyUser), Pair.of(HttpProxyPassword, TslHttpProxyPassword), Pair.of(SslKeystoreType, TslSslKeystoreType), Pair.of(SslTruststoreType, TslSslTruststoreType), Pair.of(SslKeystorePath, TslSslKeystorePath), Pair.of(SslKeystorePassword, TslSslKeystorePassword), Pair.of(SslTruststorePath, TslSslTruststorePath), Pair.of(SslTruststorePassword, TslSslTruststorePassword), Pair.of(SslProtocol, TslSslProtocol), Pair.of(SupportedSslProtocols, TslSupportedSslProtocols), Pair.of(SupportedSslCipherSuites, TslSupportedSslCipherSuites)),\n+  OCSP(Pair.of(HttpProxyHost, OcspHttpProxyHost), Pair.of(HttpProxyPort, OcspHttpProxyPort), Pair.of(HttpsProxyHost, OcspHttpsProxyHost), Pair.of(HttpsProxyPort, OcspHttpsProxyPort), Pair.of(HttpProxyUser, OcspHttpProxyUser), Pair.of(HttpProxyPassword, OcspHttpProxyPassword), Pair.of(SslKeystoreType, OcspSslKeystoreType), Pair.of(SslTruststoreType, OcspSslTruststoreType), Pair.of(SslKeystorePath, OcspSslKeystorePath), Pair.of(SslKeystorePassword, OcspSslKeystorePassword), Pair.of(SslTruststorePath, OcspSslTruststorePath), Pair.of(SslTruststorePassword, OcspSslTruststorePassword), Pair.of(SslProtocol, OcspSslProtocol), Pair.of(SupportedSslProtocols, OcspSupportedSslProtocols), Pair.of(SupportedSslCipherSuites, OcspSupportedSslCipherSuites)),\n+  TSP(Pair.of(HttpProxyHost, TspHttpProxyHost), Pair.of(HttpProxyPort, TspHttpProxyPort), Pair.of(HttpsProxyHost, TspHttpsProxyHost), Pair.of(HttpsProxyPort, TspHttpsProxyPort), Pair.of(HttpProxyUser, TspHttpProxyUser), Pair.of(HttpProxyPassword, TspHttpProxyPassword), Pair.of(SslKeystoreType, TspSslKeystoreType), Pair.of(SslTruststoreType, TspSslTruststoreType), Pair.of(SslKeystorePath, TspSslKeystorePath), Pair.of(SslKeystorePassword, TspSslKeystorePassword), Pair.of(SslTruststorePath, TspSslTruststorePath), Pair.of(SslTruststorePassword, TspSslTruststorePassword), Pair.of(SslProtocol, TspSslProtocol), Pair.of(SupportedSslProtocols, TspSupportedSslProtocols), Pair.of(SupportedSslCipherSuites, TspSupportedSslCipherSuites));\n \n-    TSL(\n-            Pair.of(HttpProxyHost, TslHttpProxyHost),\n-            Pair.of(HttpProxyPort, TslHttpProxyPort),\n-            Pair.of(HttpsProxyHost, TslHttpsProxyHost),\n-            Pair.of(HttpsProxyPort, TslHttpsProxyPort),\n-            Pair.of(HttpProxyUser, TslHttpProxyUser),\n-            Pair.of(HttpProxyPassword, TslHttpProxyPassword),\n-            Pair.of(SslKeystoreType, TslSslKeystoreType),\n-            Pair.of(SslTruststoreType, TslSslTruststoreType),\n-            Pair.of(SslKeystorePath, TslSslKeystorePath),\n-            Pair.of(SslKeystorePassword, TslSslKeystorePassword),\n-            Pair.of(SslTruststorePath, TslSslTruststorePath),\n-            Pair.of(SslTruststorePassword, TslSslTruststorePassword),\n-            Pair.of(SslProtocol, TslSslProtocol),\n-            Pair.of(SupportedSslProtocols, TslSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, TslSupportedSslCipherSuites)\n-    ),\n \n-    OCSP(\n-            Pair.of(HttpProxyHost, OcspHttpProxyHost),\n-            Pair.of(HttpProxyPort, OcspHttpProxyPort),\n-            Pair.of(HttpsProxyHost, OcspHttpsProxyHost),\n-            Pair.of(HttpsProxyPort, OcspHttpsProxyPort),\n-            Pair.of(HttpProxyUser, OcspHttpProxyUser),\n-            Pair.of(HttpProxyPassword, OcspHttpProxyPassword),\n-            Pair.of(SslKeystoreType, OcspSslKeystoreType),\n-            Pair.of(SslTruststoreType, OcspSslTruststoreType),\n-            Pair.of(SslKeystorePath, OcspSslKeystorePath),\n-            Pair.of(SslKeystorePassword, OcspSslKeystorePassword),\n-            Pair.of(SslTruststorePath, OcspSslTruststorePath),\n-            Pair.of(SslTruststorePassword, OcspSslTruststorePassword),\n-            Pair.of(SslProtocol, OcspSslProtocol),\n-            Pair.of(SupportedSslProtocols, OcspSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, OcspSupportedSslCipherSuites)\n-    ),\n \n-    TSP(\n-            Pair.of(HttpProxyHost, TspHttpProxyHost),\n-            Pair.of(HttpProxyPort, TspHttpProxyPort),\n-            Pair.of(HttpsProxyHost, TspHttpsProxyHost),\n-            Pair.of(HttpsProxyPort, TspHttpsProxyPort),\n-            Pair.of(HttpProxyUser, TspHttpProxyUser),\n-            Pair.of(HttpProxyPassword, TspHttpProxyPassword),\n-            Pair.of(SslKeystoreType, TspSslKeystoreType),\n-            Pair.of(SslTruststoreType, TspSslTruststoreType),\n-            Pair.of(SslKeystorePath, TspSslKeystorePath),\n-            Pair.of(SslKeystorePassword, TspSslKeystorePassword),\n-            Pair.of(SslTruststorePath, TspSslTruststorePath),\n-            Pair.of(SslTruststorePassword, TspSslTruststorePassword),\n-            Pair.of(SslProtocol, TspSslProtocol),\n-            Pair.of(SupportedSslProtocols, TspSupportedSslProtocols),\n-            Pair.of(SupportedSslCipherSuites, TspSupportedSslCipherSuites)\n-    );\n \n-    private final Map<ConfigurationParameter, ConfigurationParameter> genericToSpecificParameterMap;\n+  private final Map<ConfigurationParameter, ConfigurationParameter> genericToSpecificParameterMap;\n+\n+  ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n+    genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+  }\n+\n \n-    ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n-        genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-    }\n \n-    ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n-        ConfigurationParameter specificParameter = genericToSpecificParameterMap.get(genericParameter);\n-        if (specificParameter == null) {\n-            throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n-        }\n-        return specificParameter;\n+  ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n+    ConfigurationParameter specificParameter = genericToSpecificParameterMap.get(genericParameter);\n+    if (specificParameter == null) {\n+      throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n     }\n+    return specificParameter;\n+  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "72",
                    "column": "26",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "72",
                    "column": "27",
                    "severity": "error",
                    "message": "'}' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "27",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/47/ExternalConnectionType.java\nindex 31fcf040569..e497f0dee56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/47/ExternalConnectionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/47/ExternalConnectionType.java\n@@ -67,10 +67,9 @@ public enum ExternalConnectionType {\n     private final Map<ConfigurationParameter, ConfigurationParameter> genericToSpecificParameterMap;\n \n     ExternalConnectionType(Pair<ConfigurationParameter, ConfigurationParameter>... parameterMappings) {\n-        genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-    }\n-\n-    ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n+        genericToSpecificParameterMap = Arrays.stream(parameterMappings).collect(Collectors.toMap(Map.\n+    Entry::getKey,\n+    Map.Entry::getValue));}ConfigurationParameter mapToSpecificParameter(ConfigurationParameter genericParameter) {\n         ConfigurationParameter specificParameter = genericToSpecificParameterMap.get(genericParameter);\n         if (specificParameter == null) {\n             throw new IllegalArgumentException(\"No mappings found for \" + genericParameter + \" in \" + this);\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}