{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2140",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2140/SslPolicyConfigValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2140/SslPolicyConfigValidator.java\nindex 00c2e043eaf..ebe076f1cf6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2140/SslPolicyConfigValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2140/SslPolicyConfigValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.configuration.ssl;\n \n import java.lang.reflect.Field;\n@@ -42,148 +43,147 @@ import static java.util.Optional.empty;\n \n public class SslPolicyConfigValidator implements SettingGroup<Object>\n {\n-    @Override\n-    public Map<String,String> validate( Map<String,String> params, Consumer<String> warningConsumer ) throws InvalidSettingException\n-    {\n-        Map<String,String> validatedParams = new HashMap<>();\n-\n-        Set<String> validShortKeys = extractValidShortKeys();\n-        String groupSettingPrefix = groupPrefix();\n-\n-        Pattern groupSettingPattern = Pattern.compile(\n-                Pattern.quote( groupSettingPrefix ) + \"\\\\.([^.]+)\\\\.?(.+)?\" );\n-\n-        Set<String> policyNames = new HashSet<>();\n+  @Override\n+  public Map<String, String> validate(Map<String, String> params, Consumer<String> warningConsumer) throws InvalidSettingException\n+  {\n+    Map<String, String> validatedParams = new HashMap<>();\n \n-        for ( Map.Entry<String,String> paramsEntry : params.entrySet() )\n-        {\n-            String settingName = paramsEntry.getKey();\n-            Matcher matcher = groupSettingPattern.matcher( settingName );\n-            if ( !matcher.matches() )\n-            {\n-                continue;\n-            }\n-\n-            policyNames.add( matcher.group( 1 ) );\n-            String shortKey = matcher.group( 2 );\n-\n-            if ( !validShortKeys.contains( shortKey ) )\n-            {\n-                throw new InvalidSettingException( \"Invalid setting name: \" + settingName );\n-            }\n-\n-            validatedParams.put( settingName, paramsEntry.getValue() );\n-        }\n+    Set<String> validShortKeys = extractValidShortKeys();\n+    String groupSettingPrefix = groupPrefix();\n \n-        for ( String policyName : policyNames )\n-        {\n-            SslPolicyConfig policy = new SslPolicyConfig( policyName );\n-\n-            if ( !params.containsKey( policy.base_directory.name() ) )\n-            {\n-                throw new InvalidSettingException( \"Missing mandatory setting: \" + policy.base_directory.name() );\n-            }\n-        }\n+    Pattern groupSettingPattern = Pattern.compile(\n+        Pattern.quote(groupSettingPrefix) + \"\\\\.([^.]+)\\\\.?(.+)?\");\n \n-        return validatedParams;\n-    }\n+    Set<String> policyNames = new HashSet<>();\n \n-    private String groupPrefix()\n+    for (Map.Entry<String, String> paramsEntry : params.entrySet())\n     {\n-        return SslPolicyConfig.class.getDeclaredAnnotation( Group.class ).value();\n+      String settingName = paramsEntry.getKey();\n+      Matcher matcher = groupSettingPattern.matcher(settingName);\n+      if (!matcher.matches())\n+      {\n+        continue;\n+      }\n+\n+      policyNames.add(matcher.group(1));\n+      String shortKey = matcher.group(2);\n+\n+      if (!validShortKeys.contains(shortKey))\n+      {\n+        throw new InvalidSettingException(\"Invalid setting name: \" + settingName);\n+      }\n+\n+      validatedParams.put(settingName, paramsEntry.getValue());\n     }\n \n-    private Set<String> extractValidShortKeys()\n+    for (String policyName : policyNames)\n     {\n-        Set<String> validSettingNames = new HashSet<>();\n-\n-        String policyName = \"example\";\n-        int prefixLength = groupPrefix().length() + 1 + policyName.length() + 1; // dbms.ssl.policy.example.\n+      SslPolicyConfig policy = new SslPolicyConfig(policyName);\n \n-        SslPolicyConfig examplePolicy = new SslPolicyConfig( policyName );\n-        Field[] fields = examplePolicy.getClass().getDeclaredFields();\n-        for ( Field field : fields )\n-        {\n-            if ( Modifier.isStatic( field.getModifiers() ) )\n-            {\n-                continue;\n-            }\n-\n-            try\n-            {\n-                Object obj = field.get( examplePolicy );\n-                if ( obj instanceof Setting )\n-                {\n-                    String longKey = ((Setting) obj).name();\n-                    String shortKey = longKey.substring( prefixLength );\n-                    validSettingNames.add( shortKey );\n-                }\n-            }\n-            catch ( IllegalAccessException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n-        return validSettingNames;\n+      if (!params.containsKey(policy.base_directory.name()))\n+      {\n+        throw new InvalidSettingException(\"Missing mandatory setting: \" + policy.base_directory.name());\n+      }\n     }\n \n-    @Override\n-    public Map<String,Object> values( Map<String,String> validConfig )\n-    {\n-        return emptyMap();\n-    }\n+    return validatedParams;\n+  }\n \n-    @Override\n-    public List<Setting<Object>> settings( Map<String,String> params )\n-    {\n-        return emptyList();\n-    }\n+  private String groupPrefix()\n+  {\n+    return SslPolicyConfig.class.getDeclaredAnnotation(Group.class).value();\n+  }\n \n-    @Override\n-    public boolean deprecated()\n-    {\n-        return false;\n-    }\n+  private Set<String> extractValidShortKeys()\n+  {\n+    Set<String> validSettingNames = new HashSet<>();\n \n-    @Override\n-    public Optional<String> replacement()\n-    {\n-        return empty();\n-    }\n-\n-    @Override\n-    public boolean internal()\n-    {\n-        return false;\n-    }\n+    String policyName = \"example\";\n+    int prefixLength = groupPrefix().length() + 1 + policyName.length() + 1; // dbms.ssl.policy.example.\n \n-    @Override\n-    public boolean secret()\n+    SslPolicyConfig examplePolicy = new SslPolicyConfig(policyName);\n+    Field[] fields = examplePolicy.getClass().getDeclaredFields();\n+    for (Field field : fields)\n     {\n-        return false;\n-    }\n-\n-    @Override\n-    public Optional<String> documentedDefaultValue()\n-    {\n-        return empty();\n-    }\n-\n-    @Override\n-    public String valueDescription()\n-    {\n-        return \"SSL policy configuration\";\n-    }\n-\n-    @Override\n-    public Optional<String> description()\n-    {\n-        return empty();\n-    }\n-\n-    @Override\n-    public boolean dynamic()\n-    {\n-        return false;\n+      if (Modifier.isStatic(field.getModifiers()))\n+      {\n+        continue;\n+      }\n+\n+      try\n+      {\n+        Object obj = field.get(examplePolicy);\n+        if (obj instanceof Setting)\n+        {\n+          String longKey = ((Setting) obj).name();\n+          String shortKey = longKey.substring(prefixLength);\n+          validSettingNames.add(shortKey);\n+        }\n+      } catch (IllegalAccessException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n+    return validSettingNames;\n+  }\n+\n+  @Override\n+  public Map<String, Object> values(Map<String, String> validConfig)\n+  {\n+    return emptyMap();\n+  }\n+\n+  @Override\n+  public List<Setting<Object>> settings(Map<String, String> params)\n+  {\n+    return emptyList();\n+  }\n+\n+  @Override\n+  public boolean deprecated()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public Optional<String> replacement()\n+  {\n+    return empty();\n+  }\n+\n+  @Override\n+  public boolean internal()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean secret()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public Optional<String> documentedDefaultValue()\n+  {\n+    return empty();\n+  }\n+\n+  @Override\n+  public String valueDescription()\n+  {\n+    return \"SSL policy configuration\";\n+  }\n+\n+  @Override\n+  public Optional<String> description()\n+  {\n+    return empty();\n+  }\n+\n+  @Override\n+  public boolean dynamic()\n+  {\n+    return false;\n+  }\n }\n",
            "diff_size": 206
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2140/SslPolicyConfigValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2140/SslPolicyConfigValidator.java\nindex 00c2e043eaf..2bec27f24df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2140/SslPolicyConfigValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2140/SslPolicyConfigValidator.java\n@@ -49,13 +49,9 @@ public class SslPolicyConfigValidator implements SettingGroup<Object>\n \n         Set<String> validShortKeys = extractValidShortKeys();\n         String groupSettingPrefix = groupPrefix();\n-\n-        Pattern groupSettingPattern = Pattern.compile(\n-                Pattern.quote( groupSettingPrefix ) + \"\\\\.([^.]+)\\\\.?(.+)?\" );\n-\n-        Set<String> policyNames = new HashSet<>();\n-\n-        for ( Map.Entry<String,String> paramsEntry : params.entrySet() )\n+Pattern groupSettingPattern = Pattern.compile( Pattern.quote( groupSettingPrefix ) + \"\\\\.([^.]+)\\\\.?(.+)?\" );\n+Set<String> policyNames = new HashSet<>();\n+for ( Map.Entry<String,String> paramsEntry : params.entrySet() )\n         {\n             String settingName = paramsEntry.getKey();\n             Matcher matcher = groupSettingPattern.matcher( settingName );\n@@ -66,8 +62,7 @@ public class SslPolicyConfigValidator implements SettingGroup<Object>\n \n             policyNames.add( matcher.group( 1 ) );\n             String shortKey = matcher.group( 2 );\n-\n-            if ( !validShortKeys.contains( shortKey ) )\n+if ( !validShortKeys.contains( shortKey ) )\n             {\n                 throw new InvalidSettingException( \"Invalid setting name: \" + settingName );\n             }\n@@ -78,8 +73,7 @@ public class SslPolicyConfigValidator implements SettingGroup<Object>\n         for ( String policyName : policyNames )\n         {\n             SslPolicyConfig policy = new SslPolicyConfig( policyName );\n-\n-            if ( !params.containsKey( policy.base_directory.name() ) )\n+if ( !params.containsKey( policy.base_directory.name() ) )\n             {\n                 throw new InvalidSettingException( \"Missing mandatory setting: \" + policy.base_directory.name() );\n             }\n@@ -96,8 +90,7 @@ public class SslPolicyConfigValidator implements SettingGroup<Object>\n     private Set<String> extractValidShortKeys()\n     {\n         Set<String> validSettingNames = new HashSet<>();\n-\n-        String policyName = \"example\";\n+String policyName = \"example\";\n         int prefixLength = groupPrefix().length() + 1 + policyName.length() + 1; // dbms.ssl.policy.example.\n \n         SslPolicyConfig examplePolicy = new SslPolicyConfig( policyName );\n@@ -186,4 +179,4 @@ public class SslPolicyConfigValidator implements SettingGroup<Object>\n     {\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}