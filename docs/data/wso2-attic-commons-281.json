{
    "project_name": "wso2-attic-commons",
    "error_id": "281",
    "information": {
        "errors": [
            {
                "line": "164",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n                        public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n                    });\n                }\n                object(false,mlSet);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/281/FOREACH.java\nindex 1da24094c35..0c2ee47d504 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/281/FOREACH.java\n@@ -161,8 +161,9 @@ public class FOREACH extends ACTIVITY {\n                         }\n \n                         public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-                    });\n+                        public void failure(String reason, Element data) {\n+                            completed(null, CompensationHandler.emptySet()); }\n+                     });\n                 }\n                 object(false,mlSet);\n             } else {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/281/FOREACH.java\nindex 1da24094c35..031a7e91596 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/281/FOREACH.java\n@@ -48,197 +48,213 @@ import org.w3c.dom.Node;\n \n public class FOREACH extends ACTIVITY {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final Log __log = LogFactory.getLog(FOREACH.class);\n-\n-    private OForEach _oforEach;\n-    private Set<ChildInfo> _children = new HashSet<ChildInfo>();\n-    private Set<CompensationHandler> _compHandlers = new HashSet<CompensationHandler>();\n-    private int _startCounter = -1;\n-    private int _finalCounter = -1;\n-    private int _currentCounter = -1;\n-    private int _completedCounter = 0;\n-    private int _completionCounter = -1;\n-\n-    public FOREACH(ActivityInfo self, ScopeFrame frame, LinkFrame linkFrame) {\n-        super(self,frame, linkFrame);\n-        _oforEach = (OForEach) self.o;\n+  private static final long serialVersionUID = 1L;\n+  private static final Log __log = LogFactory.getLog(FOREACH.class);\n+\n+  private OForEach _oforEach;\n+  private Set<ChildInfo> _children = new HashSet<ChildInfo>();\n+  private Set<CompensationHandler> _compHandlers = new HashSet<CompensationHandler>();\n+  private int _startCounter = -1;\n+  private int _finalCounter = -1;\n+  private int _currentCounter = -1;\n+  private int _completedCounter = 0;\n+  private int _completionCounter = -1;\n+\n+  public FOREACH(ActivityInfo self, ScopeFrame frame, LinkFrame linkFrame) {\n+    super(self, frame, linkFrame);\n+    _oforEach = (OForEach) self.o;\n+  }\n+\n+  public void run() {\n+    try {\n+      _startCounter = evaluateCondition(_oforEach.startCounterValue);\n+      _finalCounter = evaluateCondition(_oforEach.finalCounterValue);\n+      if (_oforEach.completionCondition != null) {\n+        _completionCounter = evaluateCondition(_oforEach.completionCondition.branchCount);\n+      }\n+      _currentCounter = _startCounter;\n+    } catch (FaultException fe) {\n+      __log.error(fe);\n+      _self.parent.completed(createFault(fe.getQName(), _self.o), _compHandlers);\n+      return;\n+    }\n+\n+    // Checking for bpws:invalidBranchCondition when the counter limit is superior\n+    // to the maximum number of children\n+    if (_completionCounter > 0 && _completionCounter > _finalCounter - _startCounter) {\n+      _self.parent.completed(\n+        createFault(_oforEach.getOwner().constants.qnInvalidBranchCondition, _self.o), _compHandlers);\n+      return;\n     }\n \n+    // There's really nothing to do\n+    if (_finalCounter < _startCounter || _completionCounter == 0) {\n+      _self.parent.completed(null, _compHandlers);\n+    } else {\n+      // If we're parrallel, starting all our child copies, otherwise one will suffice.\n+      if (_oforEach.parallel) {\n+        for (int m = _startCounter; m <= _finalCounter; m++) {\n+          newChild();\n+        }\n+      } else {\n+        newChild();\n+      }\n+      instance(new ACTIVE());\n+    }\n+  }\n+\n+  private class ACTIVE extends BpelJacobRunnable {\n+    private static final long serialVersionUID = -5642862698981385732L;\n+\n+    private FaultData _fault;\n+    private boolean _terminateRequested = false;\n+\n     public void run() {\n-        try {\n-            _startCounter = evaluateCondition(_oforEach.startCounterValue);\n-            _finalCounter = evaluateCondition(_oforEach.finalCounterValue);\n-            if (_oforEach.completionCondition != null) {\n-                _completionCounter = evaluateCondition(_oforEach.completionCondition.branchCount);\n+      Iterator<ChildInfo> active = active();\n+      // Continuing as long as a child is active\n+      if (active().hasNext()) {\n+\n+        Set<ChannelListener> mlSet = new HashSet<ChannelListener>();\n+        mlSet.add(new TerminationChannelListener(_self.self) {\n+          private static final long serialVersionUID = 2554750257484084466L;\n+\n+          public void terminate() {\n+            // Terminating all children before sepuku\n+            for (Iterator<ChildInfo> i = active(); i.hasNext(); ) {\n+              replication(i.next().activity.self).terminate();\n             }\n-            _currentCounter = _startCounter;\n-        } catch (FaultException fe) {\n-            __log.error(fe);\n-            _self.parent.completed(createFault(fe.getQName(), _self.o), _compHandlers);\n-            return;\n-        }\n+            _terminateRequested = true;\n+            instance(ACTIVE.this);\n+          }\n+        });\n+        for (; active.hasNext(); ) {\n+          // Checking out our children\n+          final ChildInfo child = active.next();\n+          mlSet.add(new ParentScopeChannelListener(child.activity.parent) {\n+            private static final long serialVersionUID = -8027205709961438172L;\n \n-        // Checking for bpws:invalidBranchCondition when the counter limit is superior\n-        // to the maximum number of children\n-        if (_completionCounter > 0 && _completionCounter > _finalCounter - _startCounter) {\n-            _self.parent.completed(\n-                    createFault(_oforEach.getOwner().constants.qnInvalidBranchCondition, _self.o), _compHandlers);\n-            return;\n-        }\n+            public void compensate(OScope scope, SynchChannel ret) {\n+              // Forward compensation to parent\n+              _self.parent.compensate(scope, ret);\n+              instance(ACTIVE.this);\n+            }\n \n-        // There's really nothing to do\n-        if (_finalCounter < _startCounter || _completionCounter == 0) {\n-            _self.parent.completed(null, _compHandlers);\n-        } else {\n-            // If we're parrallel, starting all our child copies, otherwise one will suffice.\n-            if (_oforEach.parallel) {\n-                for (int m = _startCounter; m <= _finalCounter; m++) {\n-                    newChild();\n+            public void completed(FaultData faultData, Set<CompensationHandler> compensations) {\n+              child.completed = true;\n+              //\n+              if (_completionCounter > 0 && _oforEach.completionCondition.successfulBranchesOnly) {\n+                if (faultData != null) {\n+                  _completedCounter++;\n                 }\n-            } else newChild();\n-            instance(new ACTIVE());\n-        }\n-    }\n+              } else {\n+                _completedCounter++;\n+              }\n+\n+              _compHandlers.addAll(compensations);\n \n-    private class ACTIVE extends BpelJacobRunnable {\n-        private static final long serialVersionUID = -5642862698981385732L;\n-\n-        private FaultData _fault;\n-        private boolean _terminateRequested = false;\n-\n-        public void run() {\n-            Iterator<ChildInfo> active = active();\n-            // Continuing as long as a child is active\n-            if (active().hasNext()) {\n-\n-                Set<ChannelListener> mlSet = new HashSet<ChannelListener>();\n-                mlSet.add(new TerminationChannelListener(_self.self) {\n-                    private static final long serialVersionUID = 2554750257484084466L;\n-\n-                    public void terminate() {\n-                        // Terminating all children before sepuku\n-                        for (Iterator<ChildInfo> i = active(); i.hasNext(); )\n-                            replication(i.next().activity.self).terminate();\n-                        _terminateRequested = true;\n-                        instance(ACTIVE.this);\n-                    }\n-                });\n-                for (;active.hasNext();) {\n-                    // Checking out our children\n-                    final ChildInfo child = active.next();\n-                    mlSet.add(new ParentScopeChannelListener(child.activity.parent) {\n-                        private static final long serialVersionUID = -8027205709961438172L;\n-\n-                        public void compensate(OScope scope, SynchChannel ret) {\n-                            // Forward compensation to parent\n-                            _self.parent.compensate(scope, ret);\n-                            instance(ACTIVE.this);\n-                        }\n-\n-                        public void completed(FaultData faultData, Set<CompensationHandler> compensations) {\n-                            child.completed = true;\n-                            //\n-                            if (_completionCounter > 0 && _oforEach.completionCondition.successfulBranchesOnly) {\n-                                if (faultData != null) _completedCounter++;\n-                            } else _completedCounter++;\n-\n-                            _compHandlers.addAll(compensations);\n-\n-                            // Keeping the fault to let everybody know\n-                            if (faultData != null && _fault == null) {\n-                                _fault = faultData;\n-                            }\n-                            if (shouldContinue() && _fault == null && !_terminateRequested) {\n-                                // Everything fine. If parrallel, just let our children be, otherwise making a new child\n-                                if (!_oforEach.parallel) newChild();\n-                            } else {\n-                                // Work is done or something wrong happened, children shouldn't continue\n-                                for (Iterator<ChildInfo> i = active(); i.hasNext(); )\n-                                    replication(i.next().activity.self).terminate();\n-                            }\n-                            instance(ACTIVE.this);\n-                        }\n-\n-                        public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-                    });\n+              // Keeping the fault to let everybody know\n+              if (faultData != null && _fault == null) {\n+                _fault = faultData;\n+              }\n+              if (shouldContinue() && _fault == null && !_terminateRequested) {\n+                // Everything fine. If parrallel, just let our children be, otherwise making a new child\n+                if (!_oforEach.parallel) {\n+                  newChild();\n                 }\n-                object(false,mlSet);\n-            } else {\n-                // No children left, either because they've all been executed or because we\n-                // had to make them stop.\n-                _self.parent.completed(_fault, _compHandlers);\n+              } else {\n+                // Work is done or something wrong happened, children shouldn't continue\n+                for (Iterator<ChildInfo> i = active(); i.hasNext(); ) {\n+                  replication(i.next().activity.self).terminate();\n+                }\n+              }\n+              instance(ACTIVE.this);\n+            }\n+\n+            public void cancelled() {\n+              completed(null, CompensationHandler.emptySet());\n+            }\n+\n+            public void failure(String reason, Element data) {\n+              completed(null, CompensationHandler.emptySet());\n             }\n+          });\n         }\n+        object(false, mlSet);\n+      } else {\n+        // No children left, either because they've all been executed or because we\n+        // had to make them stop.\n+        _self.parent.completed(_fault, _compHandlers);\n+      }\n     }\n+  }\n \n-    private boolean shouldContinue() {\n-        boolean stop = false;\n-        if (_completionCounter > 0) {\n-            stop = (_completedCounter >= _completionCounter) || stop;\n-        }\n-        stop = (_startCounter + _completedCounter > _finalCounter) || stop;\n-        return !stop;\n+  private boolean shouldContinue() {\n+    boolean stop = false;\n+    if (_completionCounter > 0) {\n+      stop = (_completedCounter >= _completionCounter) || stop;\n     }\n+    stop = (_startCounter + _completedCounter > _finalCounter) || stop;\n+    return !stop;\n+  }\n \n-    private int evaluateCondition(OExpression condition)\n-            throws FaultException {\n-        try {\n-            return getBpelRuntimeContext().getExpLangRuntime().\n-                    evaluateAsNumber(condition, getEvaluationContext()).intValue();\n-        } catch (EvaluationException e) {\n-            String msg;\n-            msg = \"ForEach counter value couldn't be evaluated as xs:unsignedInt.\";\n-            __log.error(msg, e);\n-            throw new FaultException(_oforEach.getOwner().constants.qnForEachCounterError,msg);\n-        }\n+  private int evaluateCondition(OExpression condition)\n+    throws FaultException {\n+    try {\n+      return getBpelRuntimeContext().getExpLangRuntime().\n+        evaluateAsNumber(condition, getEvaluationContext()).intValue();\n+    } catch (EvaluationException e) {\n+      String msg;\n+      msg = \"ForEach counter value couldn't be evaluated as xs:unsignedInt.\";\n+      __log.error(msg, e);\n+      throw new FaultException(_oforEach.getOwner().constants.qnForEachCounterError, msg);\n     }\n+  }\n \n-    private void newChild() {\n-        ChildInfo child = new ChildInfo(new ActivityInfo(genMonotonic(), _oforEach.innerScope,\n-                newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class)));\n-        _children.add(child);\n-\n-        // Creating the current counter value node\n-        Document doc = DOMUtils.newDocument();\n-        Node counterNode = doc.createTextNode(\"\"+_currentCounter++);\n-\n-        // Instantiating the scope directly to keep control of its scope frame, allows\n-        // the introduction of the counter variable in there (monkey business that is).\n-        ScopeFrame newFrame = new ScopeFrame(\n-                _oforEach.innerScope, getBpelRuntimeContext().createScopeInstance(_scopeFrame.scopeInstanceId,\n-                _oforEach.innerScope), _scopeFrame, null);\n-        VariableInstance vinst = newFrame.resolve(_oforEach.counterVariable);\n-\n-        try {\n-        initializeVariable(vinst, counterNode);\n-        } catch (ExternalVariableModuleException e) {\n-            __log.error(\"Exception while initializing external variable\", e);\n-            _self.parent.failure(e.toString(), null);\n-            return;\n-        }\n+  private void newChild() {\n+    ChildInfo child = new ChildInfo(new ActivityInfo(genMonotonic(), _oforEach.innerScope,\n+      newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class)));\n+    _children.add(child);\n \n-        // Generating event\n-        VariableModificationEvent se = new VariableModificationEvent(vinst.declaration.name);\n-        se.setNewValue(counterNode);\n-        if (_oforEach.debugInfo != null)\n-            se.setLineNo(_oforEach.debugInfo.startLine);\n-        sendEvent(se);\n+    // Creating the current counter value node\n+    Document doc = DOMUtils.newDocument();\n+    Node counterNode = doc.createTextNode(\"\" + _currentCounter++);\n \n-        instance(new SCOPE(child.activity, newFrame, _linkFrame));\n-    }\n+    // Instantiating the scope directly to keep control of its scope frame, allows\n+    // the introduction of the counter variable in there (monkey business that is).\n+    ScopeFrame newFrame = new ScopeFrame(\n+      _oforEach.innerScope, getBpelRuntimeContext().createScopeInstance(_scopeFrame.scopeInstanceId,\n+      _oforEach.innerScope), _scopeFrame, null);\n+    VariableInstance vinst = newFrame.resolve(_oforEach.counterVariable);\n \n-    public String toString() {\n-        return \"<T:Act:Flow:\" + _oforEach.name + \">\";\n+    try {\n+      initializeVariable(vinst, counterNode);\n+    } catch (ExternalVariableModuleException e) {\n+      __log.error(\"Exception while initializing external variable\", e);\n+      _self.parent.failure(e.toString(), null);\n+      return;\n     }\n \n-    private Iterator<ChildInfo> active() {\n-        return new FilterIterator<ChildInfo>(_children.iterator(), new MemberOfFunction<ChildInfo>() {\n-            public boolean isMember(ChildInfo childInfo) {\n-                return !childInfo.completed;\n-            }\n-        });\n+    // Generating event\n+    VariableModificationEvent se = new VariableModificationEvent(vinst.declaration.name);\n+    se.setNewValue(counterNode);\n+    if (_oforEach.debugInfo != null) {\n+      se.setLineNo(_oforEach.debugInfo.startLine);\n     }\n+    sendEvent(se);\n+\n+    instance(new SCOPE(child.activity, newFrame, _linkFrame));\n+  }\n+\n+  public String toString() {\n+    return \"<T:Act:Flow:\" + _oforEach.name + \">\";\n+  }\n+\n+  private Iterator<ChildInfo> active() {\n+    return new FilterIterator<ChildInfo>(_children.iterator(), new MemberOfFunction<ChildInfo>() {\n+      public boolean isMember(ChildInfo childInfo) {\n+        return !childInfo.completed;\n+      }\n+    });\n+  }\n \n }\n",
            "diff_size": 270
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/281/FOREACH.java\nindex 1da24094c35..a39b45e8836 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/281/FOREACH.java\n@@ -160,8 +160,10 @@ public class FOREACH extends ACTIVITY {\n                             instance(ACTIVE.this);\n                         }\n \n-                        public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n+                        public void cancelled() {\n+    completed(null, CompensationHandler.emptySet()); }\n+                        public void failure(String reason, Element data) {\n+    completed(null, CompensationHandler.emptySet()); }\n                     });\n                 }\n                 object(false,mlSet);\n@@ -213,7 +215,7 @@ public class FOREACH extends ACTIVITY {\n \n         try {\n         initializeVariable(vinst, counterNode);\n-        } catch (ExternalVariableModuleException e) {\n+    } catch (ExternalVariableModuleException e) {\n             __log.error(\"Exception while initializing external variable\", e);\n             _self.parent.failure(e.toString(), null);\n             return;\n@@ -241,4 +243,4 @@ public class FOREACH extends ACTIVITY {\n         });\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/281/FOREACH.java\nindex 1da24094c35..0c2ee47d504 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/281/FOREACH.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/281/FOREACH.java\n@@ -161,8 +161,9 @@ public class FOREACH extends ACTIVITY {\n                         }\n \n                         public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-                    });\n+                        public void failure(String reason, Element data) {\n+                            completed(null, CompensationHandler.emptySet()); }\n+                     });\n                 }\n                 object(false,mlSet);\n             } else {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}