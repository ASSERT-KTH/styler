{
    "project_name": "intuit-Tank",
    "error_id": "111",
    "information": {
        "errors": [
            {
                "line": "66",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 137).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    static {\n        File file = new File(configName);\n        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"checking file \" + file.getAbsolutePath() + \": exists=\" + file.exists())));\n        if (!file.exists()) {\n            LOG.info(\"System.getenv('WATS_PROPERTIES') = '\" + System.getenv(\"WATS_PROPERTIES\") + \"'\");\n            LOG.info(\"System.getProperty('WATS_PROPERTIES') = '\" + System.getProperty(\"WATS_PROPERTIES\") + \"'\");",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/111/TankConfig.java\nindex 8b4b1a3037e..f8e20a33046 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/111/TankConfig.java\n@@ -26,237 +26,237 @@ import org.apache.logging.log4j.message.ObjectMessage;\n \n /**\n  * CnrComConfig configurator for the beans config file.\n- * \n+ *\n  * <br>\n  * Patterns: Singleton\n- * \n+ *\n  * @author dangleton\n  */\n @Named\n @ApplicationScoped\n public class TankConfig extends BaseCommonsXmlConfig {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final String KEY_VM_MANAGER_NODE = \"vm-manager\";\n-    private static final String KEY_AGENT_NODE = \"agent-config\";\n-    private static final String KEY_CONTROLLER_BASE = \"controller-base-url\";\n-    private static final String KEY_INSTANCE_NAME = \"instance-name\";\n-    private static final String KEY_DATA_FILE_STORAGE = \"data-file-storage\";\n-    private static final String KEY_REST_SECURITY_ENABLED = \"rest-security-enabled\";\n-    private static final String KEY_TMP_FILE_STORAGE = \"tmp-file-storage\";\n-    private static final String KEY_JAR_FILE_STORAGE = \"jar-file-storage\";\n-    private static final String KEY_TIMING_FILE_STORAGE = \"timing-file-storage\";\n-    private static final String KEY_MAIL_NODE = \"mail\";\n-    private static final String KEY_STANDALONE = \"standalone\";\n-    private static final String KEY_ENCRYPT_S3 = \"s3-encrypt\";\n-\n-    private static final Logger LOG = LogManager.getLogger(TankConfig.class);\n-\n-    private static final String CONFIG_NAME = \"settings.xml\";\n-    private static final String KEY_PRODUCTS_NODE = \"products\";\n-    private static final String KEY_SECURITY_NODE = \"security\";\n-    private static final String KEY_LOCATIONS_NODE = \"locations\";\n-    private static final String KEY_LOGIC_STEP_NODE = \"logic-step\";\n-    private static final String KEY_REPORTING_NODE = \"reporting\";\n-\n-    private static String configName = CONFIG_NAME;\n-\n-    static {\n-        File file = new File(configName);\n-        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"checking file \" + file.getAbsolutePath() + \": exists=\" + file.exists())));\n-        if (!file.exists()) {\n-            LOG.info(\"System.getenv('WATS_PROPERTIES') = '\" + System.getenv(\"WATS_PROPERTIES\") + \"'\");\n-            LOG.info(\"System.getProperty('WATS_PROPERTIES') = '\" + System.getProperty(\"WATS_PROPERTIES\") + \"'\");\n-            if (System.getenv(\"WATS_PROPERTIES\") != null) {\n-                configName = System.getenv(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n-            } else if (System.getProperty(\"WATS_PROPERTIES\") != null) {\n-                configName = System.getProperty(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n-            }\n-        }\n-        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Tank Configuration location = \" + configName)));\n-    }\n-\n-    private String configPath = configName;\n-    private AgentConfig agentConfig;\n-    private VmManagerConfig vmManagerConfig;\n-    private ProductConfig productConfig;\n-    private LocationsConfig locationsConfig;\n-    private MailConfig mailConfig;\n-    private SecurityConfig securityConfig;\n-    private LogicStepConfig logicStepConfig;\n-    private ReportingConfig reportingConfig;\n-\n-    /**\n-     * protected constructor to implement the singleton pattern\n-     * \n-     * @param configPath\n-     *            the configuration path\n-     */\n-    TankConfig(String configPath) {\n-        this.configPath = configPath;\n-        readConfig();\n-    }\n-\n-    /**\n-     * private constructor to implement the singleton pattern\n-     * \n-     */\n-    public TankConfig() {\n-        readConfig();\n-    }\n-\n-    /**\n-     * @return the Datafile storage root dir\n-     */\n-    public String getDataFileStorageDir() {\n-        return config.getString(KEY_DATA_FILE_STORAGE, \"/tmp/tank/datafiles\");\n-    }\n-\n-    /**\n-     * @return true if rest security is enabled\n-     */\n-    public boolean isRestSecurityEnabled() {\n-        return config.getBoolean(KEY_REST_SECURITY_ENABLED, false);\n-    }\n-    /**\n-     * @return true if rest security is enabled\n-     */\n-    public boolean isS3EncryptionEnabled() {\n-        return config.getBoolean(KEY_ENCRYPT_S3, false);\n-    }\n-\n-    /**\n-     * @return the Datafile storage root dir\n-     */\n-    public boolean getStandalone() {\n-        return config.getBoolean(KEY_STANDALONE, false);\n-    }\n-\n-    /**\n-     * @return the Datafile storage root dir\n-     */\n-    public String getTmpDir() {\n-        return config.getString(KEY_TMP_FILE_STORAGE, \"/tmp/tank/tmpfiles\");\n-    }\n-\n-    /**\n-     * @return the Datafile storage root dir\n-     */\n-    public String getJarDir() {\n-        return config.getString(KEY_JAR_FILE_STORAGE, \"/tmp/tank/jars\");\n-    }\n-\n-    /**\n-     * @return the Datafile storage root dir\n-     */\n-    public String getTimingDir() {\n-        return config.getString(KEY_TIMING_FILE_STORAGE, \"/tmp/tank/timing\");\n-    }\n-\n-    /**\n-     * @return the controller base url\n-     */\n-    public String getControllerBase() {\n-        return config.getString(KEY_CONTROLLER_BASE, \"http://tank.controller/\");\n-    }\n-\n-    /**\n-     * @return the controller base url\n-     */\n-    public String getInstanceName() {\n-        return config.getString(KEY_INSTANCE_NAME, \"prod\");\n-    }\n-\n-    /**\n-     * @return the vmManagerConfig\n-     */\n-    public VmManagerConfig getVmManagerConfig() {\n-        checkReload();\n-        return vmManagerConfig;\n-    }\n-\n-    /**\n-     * @return the vmManagerConfig\n-     */\n-    public AgentConfig getAgentConfig() {\n-        checkReload();\n-        return agentConfig;\n-    }\n-\n-    /**\n-     * @return the vmManagerConfig\n-     */\n-    public ProductConfig getProductConfig() {\n-        checkReload();\n-        return productConfig;\n-    }\n-\n-    /**\n-     * @return the vmManagerConfig\n-     */\n-    public LogicStepConfig getLogicStepConfig() {\n-        checkReload();\n-        return logicStepConfig;\n-    }\n-\n-    /**\n-     * @return the vmManagerConfig\n-     */\n-    public MailConfig getMailConfig() {\n-        checkReload();\n-        return mailConfig;\n-    }\n-\n-    /**\n-     * @return the locationsConfig\n-     */\n-    public LocationsConfig getLocationsConfig() {\n-        return locationsConfig;\n-    }\n-\n-    /**\n-     * @return the vmManagerConfig\n-     */\n-    public SecurityConfig getSecurityConfig() {\n-        checkReload();\n-        return securityConfig;\n-    }\n-\n-    /**\n-     * @return the reportingConfig\n-     */\n-    public ReportingConfig getReportingConfig() {\n-        checkReload();\n-        return reportingConfig;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    protected String getConfigName() {\n-        return configPath;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    protected void initConfig(XMLConfiguration configuration) {\n-        vmManagerConfig = new VmManagerConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_VM_MANAGER_NODE));\n-        agentConfig = new AgentConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_AGENT_NODE));\n-        productConfig = new ProductConfig(\n-                BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_PRODUCTS_NODE));\n-        locationsConfig = new LocationsConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_LOCATIONS_NODE));\n-        mailConfig = new MailConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_MAIL_NODE));\n-        securityConfig = new SecurityConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_SECURITY_NODE));\n-        logicStepConfig = new LogicStepConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_LOGIC_STEP_NODE));\n-        reportingConfig = new ReportingConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_REPORTING_NODE));\n+  private static final long serialVersionUID = 1L;\n+  private static final String KEY_VM_MANAGER_NODE = \"vm-manager\";\n+  private static final String KEY_AGENT_NODE = \"agent-config\";\n+  private static final String KEY_CONTROLLER_BASE = \"controller-base-url\";\n+  private static final String KEY_INSTANCE_NAME = \"instance-name\";\n+  private static final String KEY_DATA_FILE_STORAGE = \"data-file-storage\";\n+  private static final String KEY_REST_SECURITY_ENABLED = \"rest-security-enabled\";\n+  private static final String KEY_TMP_FILE_STORAGE = \"tmp-file-storage\";\n+  private static final String KEY_JAR_FILE_STORAGE = \"jar-file-storage\";\n+  private static final String KEY_TIMING_FILE_STORAGE = \"timing-file-storage\";\n+  private static final String KEY_MAIL_NODE = \"mail\";\n+  private static final String KEY_STANDALONE = \"standalone\";\n+  private static final String KEY_ENCRYPT_S3 = \"s3-encrypt\";\n+\n+  private static final Logger LOG = LogManager.getLogger(TankConfig.class);\n+\n+  private static final String CONFIG_NAME = \"settings.xml\";\n+  private static final String KEY_PRODUCTS_NODE = \"products\";\n+  private static final String KEY_SECURITY_NODE = \"security\";\n+  private static final String KEY_LOCATIONS_NODE = \"locations\";\n+  private static final String KEY_LOGIC_STEP_NODE = \"logic-step\";\n+  private static final String KEY_REPORTING_NODE = \"reporting\";\n+\n+  private static String configName = CONFIG_NAME;\n+\n+  static {\n+    File file = new File(configName);\n+    LOG.info(new ObjectMessage(\n+      ImmutableMap.of(\"Message\", \"checking file \" + file.getAbsolutePath() + \": exists=\" + file.exists())));\n+    if (!file.exists()) {\n+      LOG.info(\"System.getenv('WATS_PROPERTIES') = '\" + System.getenv(\"WATS_PROPERTIES\") + \"'\");\n+      LOG.info(\"System.getProperty('WATS_PROPERTIES') = '\" + System.getProperty(\"WATS_PROPERTIES\") + \"'\");\n+      if (System.getenv(\"WATS_PROPERTIES\") != null) {\n+        configName = System.getenv(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n+      } else if (System.getProperty(\"WATS_PROPERTIES\") != null) {\n+        configName = System.getProperty(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n+      }\n     }\n+    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Tank Configuration location = \" + configName)));\n+  }\n+\n+  private String configPath = configName;\n+  private AgentConfig agentConfig;\n+  private VmManagerConfig vmManagerConfig;\n+  private ProductConfig productConfig;\n+  private LocationsConfig locationsConfig;\n+  private MailConfig mailConfig;\n+  private SecurityConfig securityConfig;\n+  private LogicStepConfig logicStepConfig;\n+  private ReportingConfig reportingConfig;\n+\n+  /**\n+   * protected constructor to implement the singleton pattern\n+   *\n+   * @param configPath the configuration path\n+   */\n+  TankConfig(String configPath) {\n+    this.configPath = configPath;\n+    readConfig();\n+  }\n+\n+  /**\n+   * private constructor to implement the singleton pattern\n+   */\n+  public TankConfig() {\n+    readConfig();\n+  }\n+\n+  /**\n+   * @return the Datafile storage root dir\n+   */\n+  public String getDataFileStorageDir() {\n+    return config.getString(KEY_DATA_FILE_STORAGE, \"/tmp/tank/datafiles\");\n+  }\n+\n+  /**\n+   * @return true if rest security is enabled\n+   */\n+  public boolean isRestSecurityEnabled() {\n+    return config.getBoolean(KEY_REST_SECURITY_ENABLED, false);\n+  }\n+\n+  /**\n+   * @return true if rest security is enabled\n+   */\n+  public boolean isS3EncryptionEnabled() {\n+    return config.getBoolean(KEY_ENCRYPT_S3, false);\n+  }\n+\n+  /**\n+   * @return the Datafile storage root dir\n+   */\n+  public boolean getStandalone() {\n+    return config.getBoolean(KEY_STANDALONE, false);\n+  }\n+\n+  /**\n+   * @return the Datafile storage root dir\n+   */\n+  public String getTmpDir() {\n+    return config.getString(KEY_TMP_FILE_STORAGE, \"/tmp/tank/tmpfiles\");\n+  }\n+\n+  /**\n+   * @return the Datafile storage root dir\n+   */\n+  public String getJarDir() {\n+    return config.getString(KEY_JAR_FILE_STORAGE, \"/tmp/tank/jars\");\n+  }\n+\n+  /**\n+   * @return the Datafile storage root dir\n+   */\n+  public String getTimingDir() {\n+    return config.getString(KEY_TIMING_FILE_STORAGE, \"/tmp/tank/timing\");\n+  }\n+\n+  /**\n+   * @return the controller base url\n+   */\n+  public String getControllerBase() {\n+    return config.getString(KEY_CONTROLLER_BASE, \"http://tank.controller/\");\n+  }\n+\n+  /**\n+   * @return the controller base url\n+   */\n+  public String getInstanceName() {\n+    return config.getString(KEY_INSTANCE_NAME, \"prod\");\n+  }\n+\n+  /**\n+   * @return the vmManagerConfig\n+   */\n+  public VmManagerConfig getVmManagerConfig() {\n+    checkReload();\n+    return vmManagerConfig;\n+  }\n+\n+  /**\n+   * @return the vmManagerConfig\n+   */\n+  public AgentConfig getAgentConfig() {\n+    checkReload();\n+    return agentConfig;\n+  }\n+\n+  /**\n+   * @return the vmManagerConfig\n+   */\n+  public ProductConfig getProductConfig() {\n+    checkReload();\n+    return productConfig;\n+  }\n+\n+  /**\n+   * @return the vmManagerConfig\n+   */\n+  public LogicStepConfig getLogicStepConfig() {\n+    checkReload();\n+    return logicStepConfig;\n+  }\n+\n+  /**\n+   * @return the vmManagerConfig\n+   */\n+  public MailConfig getMailConfig() {\n+    checkReload();\n+    return mailConfig;\n+  }\n+\n+  /**\n+   * @return the locationsConfig\n+   */\n+  public LocationsConfig getLocationsConfig() {\n+    return locationsConfig;\n+  }\n+\n+  /**\n+   * @return the vmManagerConfig\n+   */\n+  public SecurityConfig getSecurityConfig() {\n+    checkReload();\n+    return securityConfig;\n+  }\n+\n+  /**\n+   * @return the reportingConfig\n+   */\n+  public ReportingConfig getReportingConfig() {\n+    checkReload();\n+    return reportingConfig;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected String getConfigName() {\n+    return configPath;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected void initConfig(XMLConfiguration configuration) {\n+    vmManagerConfig = new VmManagerConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n+      KEY_VM_MANAGER_NODE));\n+    agentConfig = new AgentConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_AGENT_NODE));\n+    productConfig = new ProductConfig(\n+      BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_PRODUCTS_NODE));\n+    locationsConfig = new LocationsConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n+      KEY_LOCATIONS_NODE));\n+    mailConfig = new MailConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_MAIL_NODE));\n+    securityConfig = new SecurityConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n+      KEY_SECURITY_NODE));\n+    logicStepConfig = new LogicStepConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n+      KEY_LOGIC_STEP_NODE));\n+    reportingConfig = new ReportingConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n+      KEY_REPORTING_NODE));\n+  }\n \n }\n",
            "diff_size": 407
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/111/TankConfig.java\nindex 8b4b1a3037e..e62e6187d29 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/111/TankConfig.java\n@@ -259,4 +259,4 @@ public class TankConfig extends BaseCommonsXmlConfig {\n                 KEY_REPORTING_NODE));\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "287",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/111/TankConfig.java\nindex 8b4b1a3037e..5ddfd05864e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/111/TankConfig.java\n@@ -13,11 +13,11 @@ package com.intuit.tank.vm.settings;\n  * #L%\n  */\n \n-import java.io.File;\n \n+\n+import java.io.File;\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Named;\n-\n import com.google.common.collect.ImmutableMap;\n import org.apache.commons.configuration.XMLConfiguration;\n import org.apache.logging.log4j.LogManager;\n@@ -32,6 +32,7 @@ import org.apache.logging.log4j.message.ObjectMessage;\n  * \n  * @author dangleton\n  */\n+\n @Named\n @ApplicationScoped\n public class TankConfig extends BaseCommonsXmlConfig {\n@@ -49,16 +50,13 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     private static final String KEY_MAIL_NODE = \"mail\";\n     private static final String KEY_STANDALONE = \"standalone\";\n     private static final String KEY_ENCRYPT_S3 = \"s3-encrypt\";\n-\n     private static final Logger LOG = LogManager.getLogger(TankConfig.class);\n-\n     private static final String CONFIG_NAME = \"settings.xml\";\n     private static final String KEY_PRODUCTS_NODE = \"products\";\n     private static final String KEY_SECURITY_NODE = \"security\";\n     private static final String KEY_LOCATIONS_NODE = \"locations\";\n     private static final String KEY_LOGIC_STEP_NODE = \"logic-step\";\n     private static final String KEY_REPORTING_NODE = \"reporting\";\n-\n     private static String configName = CONFIG_NAME;\n \n     static {\n@@ -73,7 +71,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n                 configName = System.getProperty(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n             }\n         }\n-        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Tank Configuration location = \" + configName)));\n+        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\",\n+            \"Tank Configuration location = \" + configName)));\n     }\n \n     private String configPath = configName;\n@@ -92,6 +91,7 @@ public class TankConfig extends BaseCommonsXmlConfig {\n      * @param configPath\n      *            the configuration path\n      */\n+\n     TankConfig(String configPath) {\n         this.configPath = configPath;\n         readConfig();\n@@ -101,6 +101,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n      * private constructor to implement the singleton pattern\n      * \n      */\n+\n+\n     public TankConfig() {\n         readConfig();\n     }\n@@ -108,6 +110,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the Datafile storage root dir\n      */\n+\n+\n     public String getDataFileStorageDir() {\n         return config.getString(KEY_DATA_FILE_STORAGE, \"/tmp/tank/datafiles\");\n     }\n@@ -115,12 +119,16 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return true if rest security is enabled\n      */\n+\n+\n     public boolean isRestSecurityEnabled() {\n         return config.getBoolean(KEY_REST_SECURITY_ENABLED, false);\n     }\n     /**\n      * @return true if rest security is enabled\n      */\n+\n+\n     public boolean isS3EncryptionEnabled() {\n         return config.getBoolean(KEY_ENCRYPT_S3, false);\n     }\n@@ -128,6 +136,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the Datafile storage root dir\n      */\n+\n+\n     public boolean getStandalone() {\n         return config.getBoolean(KEY_STANDALONE, false);\n     }\n@@ -135,6 +145,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the Datafile storage root dir\n      */\n+\n+\n     public String getTmpDir() {\n         return config.getString(KEY_TMP_FILE_STORAGE, \"/tmp/tank/tmpfiles\");\n     }\n@@ -142,6 +154,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the Datafile storage root dir\n      */\n+\n+\n     public String getJarDir() {\n         return config.getString(KEY_JAR_FILE_STORAGE, \"/tmp/tank/jars\");\n     }\n@@ -149,6 +163,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the Datafile storage root dir\n      */\n+\n+\n     public String getTimingDir() {\n         return config.getString(KEY_TIMING_FILE_STORAGE, \"/tmp/tank/timing\");\n     }\n@@ -156,6 +172,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the controller base url\n      */\n+\n+\n     public String getControllerBase() {\n         return config.getString(KEY_CONTROLLER_BASE, \"http://tank.controller/\");\n     }\n@@ -163,6 +181,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the controller base url\n      */\n+\n+\n     public String getInstanceName() {\n         return config.getString(KEY_INSTANCE_NAME, \"prod\");\n     }\n@@ -170,6 +190,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the vmManagerConfig\n      */\n+\n+\n     public VmManagerConfig getVmManagerConfig() {\n         checkReload();\n         return vmManagerConfig;\n@@ -178,6 +200,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the vmManagerConfig\n      */\n+\n+\n     public AgentConfig getAgentConfig() {\n         checkReload();\n         return agentConfig;\n@@ -186,6 +210,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the vmManagerConfig\n      */\n+\n+\n     public ProductConfig getProductConfig() {\n         checkReload();\n         return productConfig;\n@@ -194,6 +220,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the vmManagerConfig\n      */\n+\n+\n     public LogicStepConfig getLogicStepConfig() {\n         checkReload();\n         return logicStepConfig;\n@@ -202,6 +230,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the vmManagerConfig\n      */\n+\n+\n     public MailConfig getMailConfig() {\n         checkReload();\n         return mailConfig;\n@@ -210,6 +240,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the locationsConfig\n      */\n+\n+\n     public LocationsConfig getLocationsConfig() {\n         return locationsConfig;\n     }\n@@ -217,6 +249,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the vmManagerConfig\n      */\n+\n+\n     public SecurityConfig getSecurityConfig() {\n         checkReload();\n         return securityConfig;\n@@ -225,6 +259,8 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the reportingConfig\n      */\n+\n+\n     public ReportingConfig getReportingConfig() {\n         checkReload();\n         return reportingConfig;\n@@ -233,6 +269,7 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * {@inheritDoc}\n      */\n+\n     @Override\n     protected String getConfigName() {\n         return configPath;\n@@ -241,22 +278,17 @@ public class TankConfig extends BaseCommonsXmlConfig {\n     /**\n      * {@inheritDoc}\n      */\n+\n     @Override\n     protected void initConfig(XMLConfiguration configuration) {\n-        vmManagerConfig = new VmManagerConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_VM_MANAGER_NODE));\n+        vmManagerConfig = new VmManagerConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_VM_MANAGER_NODE));\n         agentConfig = new AgentConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_AGENT_NODE));\n-        productConfig = new ProductConfig(\n-                BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_PRODUCTS_NODE));\n-        locationsConfig = new LocationsConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_LOCATIONS_NODE));\n+        productConfig = new ProductConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_PRODUCTS_NODE));\n+        locationsConfig = new LocationsConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_LOCATIONS_NODE));\n         mailConfig = new MailConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_MAIL_NODE));\n-        securityConfig = new SecurityConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_SECURITY_NODE));\n-        logicStepConfig = new LogicStepConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_LOGIC_STEP_NODE));\n-        reportingConfig = new ReportingConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration,\n-                KEY_REPORTING_NODE));\n+        securityConfig = new SecurityConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_SECURITY_NODE));\n+        logicStepConfig = new LogicStepConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_LOGIC_STEP_NODE));\n+        reportingConfig = new ReportingConfig(BaseCommonsXmlConfig.getChildConfigurationAt(configuration, KEY_REPORTING_NODE));\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "column": "136",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/111/TankConfig.java\nindex 8b4b1a3037e..cb9c1231da7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/111/TankConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/111/TankConfig.java\n@@ -63,7 +63,7 @@ public class TankConfig extends BaseCommonsXmlConfig {\n \n     static {\n         File file = new File(configName);\n-        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"checking file \" + file.getAbsolutePath() + \": exists=\" + file.exists())));\n+        LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"checking file \" + file.getAbsolutePath() + \": exists=\" + file.exists()) ));\n         if (!file.exists()) {\n             LOG.info(\"System.getenv('WATS_PROPERTIES') = '\" + System.getenv(\"WATS_PROPERTIES\") + \"'\");\n             LOG.info(\"System.getProperty('WATS_PROPERTIES') = '\" + System.getProperty(\"WATS_PROPERTIES\") + \"'\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}