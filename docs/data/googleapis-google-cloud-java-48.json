{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "48",
    "information": {
        "errors": [
            {
                "line": "275",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 114).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   */\n  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n    InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n        .skipInvalidRows(skipInvalidRows)\n        .ignoreUnknownValues(ignoreUnknownValues)",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/48/Table.java\nindex 26f79be6f75..1a696a918e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/48/Table.java\n@@ -272,7 +272,8 @@ public class Table extends TableInfo {\n    * @throws BigQueryException upon failure\n    */\n   public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+      boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+\n     InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "267",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/48/Table.java\nindex 26f79be6f75..e29d1b4d51c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/48/Table.java\n@@ -263,16 +263,17 @@ public class Table extends TableInfo {\n    * // do something with response\n    * }</pre>\n    *\n-   * @param rows rows to be inserted\n-   * @param skipInvalidRows whether to insert all valid rows, even if invalid rows exist. If not set\n-   *     the entire insert operation will fail if rows to be inserted contain an invalid row\n+   * @param rows                rows to be inserted\n+   * @param skipInvalidRows     whether to insert all valid rows, even if invalid rows exist. If not set\n+   *                            the entire insert operation will fail if rows to be inserted contain an invalid row\n    * @param ignoreUnknownValues whether to accept rows that contain values that do not match the\n-   *     schema. The unknown values are ignored. If not set, rows with unknown values are considered\n-   *     to be invalid\n+   *                            schema. The unknown values are ignored. If not set, rows with unknown values are considered\n+   *                            to be invalid\n    * @throws BigQueryException upon failure\n    */\n   public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+                                  boolean skipInvalidRows, boolean ignoreUnknownValues)\n+      throws BigQueryException {\n     InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n@@ -325,8 +326,8 @@ public class Table extends TableInfo {\n    * }</pre>\n    *\n    * @param destinationDataset the user-defined id of the destination dataset\n-   * @param destinationTable the user-defined id of the destination table\n-   * @param options job options\n+   * @param destinationTable   the user-defined id of the destination table\n+   * @param options            job options\n    * @throws BigQueryException upon failure\n    */\n   public Job copy(String destinationDataset, String destinationTable, JobOption... options)\n@@ -360,7 +361,7 @@ public class Table extends TableInfo {\n    * }</pre>\n    *\n    * @param destinationTable the destination table of the copy job\n-   * @param options job options\n+   * @param options          job options\n    * @throws BigQueryException upon failure\n    */\n   public Job copy(TableId destinationTable, JobOption... options)\n@@ -392,10 +393,10 @@ public class Table extends TableInfo {\n    * }\n    * }</pre>\n    *\n-   * @param format the format of the extracted data\n+   * @param format         the format of the extracted data\n    * @param destinationUri the fully-qualified Google Cloud Storage URI (e.g. gs://bucket/path)\n-   *     where the extracted table should be written\n-   * @param options job options\n+   *                       where the extracted table should be written\n+   * @param options        job options\n    * @throws BigQueryException upon failure\n    */\n   public Job extract(String format, String destinationUri, JobOption... options)\n@@ -430,10 +431,10 @@ public class Table extends TableInfo {\n    * }\n    * }</pre>\n    *\n-   * @param format the format of the exported data\n+   * @param format          the format of the exported data\n    * @param destinationUris the fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path)\n-   *     where the extracted table should be written\n-   * @param options job options\n+   *                        where the extracted table should be written\n+   * @param options         job options\n    * @throws BigQueryException upon failure\n    */\n   public Job extract(String format, List<String> destinationUris, JobOption... options)\n@@ -465,10 +466,10 @@ public class Table extends TableInfo {\n    * }\n    * }</pre>\n    *\n-   * @param format the format of the data to load\n+   * @param format    the format of the data to load\n    * @param sourceUri the fully-qualified Google Cloud Storage URI (e.g. gs://bucket/path) from\n-   *     which to load the data\n-   * @param options job options\n+   *                  which to load the data\n+   * @param options   job options\n    * @throws BigQueryException upon failure\n    */\n   public Job load(FormatOptions format, String sourceUri, JobOption... options)\n@@ -502,10 +503,10 @@ public class Table extends TableInfo {\n    * }\n    * }</pre>\n    *\n-   * @param format the format of the exported data\n+   * @param format     the format of the exported data\n    * @param sourceUris the fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path) from\n-   *     which to load the data\n-   * @param options job options\n+   *                   which to load the data\n+   * @param options    job options\n    * @throws BigQueryException upon failure\n    */\n   public Job load(FormatOptions format, List<String> sourceUris, JobOption... options)\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "274",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "275",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/48/Table.java\nindex 26f79be6f75..32758640093 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/48/Table.java\n@@ -271,9 +271,8 @@ public class Table extends TableInfo {\n    *     to be invalid\n    * @throws BigQueryException upon failure\n    */\n-  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n-    InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n+  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+  InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n         .build();\n@@ -552,4 +551,4 @@ public class Table extends TableInfo {\n   static Table fromPb(BigQuery bigquery, com.google.api.services.bigquery.model.Table tablePb) {\n     return new Table(bigquery, new TableInfo.BuilderImpl(tablePb));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "247",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "280",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "281",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "404",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "442",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "443",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "476",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "513",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/48/Table.java\nindex 26f79be6f75..fb568ae63f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/48/Table.java\n@@ -23,7 +23,6 @@ import com.google.cloud.bigquery.BigQuery.JobOption;\n import com.google.cloud.bigquery.BigQuery.TableDataListOption;\n import com.google.cloud.bigquery.BigQuery.TableOption;\n import com.google.common.collect.ImmutableList;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.util.List;\n@@ -38,16 +37,18 @@ import java.util.Objects;\n  * {@link TableInfo}.\n  * </p>\n  */\n+\n+\n public class Table extends TableInfo {\n \n   private static final long serialVersionUID = 5744556727066570096L;\n-\n   private final BigQueryOptions options;\n   private transient BigQuery bigquery;\n \n   /**\n    * A builder for {@code Table} objects.\n    */\n+\n   public static class Builder extends TableInfo.Builder {\n \n     private final BigQuery bigquery;\n@@ -152,6 +153,7 @@ public class Table extends TableInfo {\n    * @return {@code true} if this table exists, {@code false} otherwise\n    * @throws BigQueryException upon failure\n    */\n+\n   public boolean exists() {\n     return bigquery.getTable(tableId(), TableOption.fields()) != null;\n   }\n@@ -174,6 +176,7 @@ public class Table extends TableInfo {\n    * @return a {@code Table} object with latest information or {@code null} if not found\n    * @throws BigQueryException upon failure\n    */\n+\n   public Table reload(TableOption... options) {\n     return bigquery.getTable(tableId(), options);\n   }\n@@ -191,6 +194,7 @@ public class Table extends TableInfo {\n    * @return a {@code Table} object with updated information\n    * @throws BigQueryException upon failure\n    */\n+\n   public Table update(TableOption... options) {\n     return bigquery.update(this, options);\n   }\n@@ -211,6 +215,7 @@ public class Table extends TableInfo {\n    * @return {@code true} if table was deleted, {@code false} if it was not found\n    * @throws BigQueryException upon failure\n    */\n+\n   public boolean delete() {\n     return bigquery.delete(tableId());\n   }\n@@ -238,8 +243,8 @@ public class Table extends TableInfo {\n    * @param rows rows to be inserted\n    * @throws BigQueryException upon failure\n    */\n-  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows)\n-      throws BigQueryException {\n+\n+  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows) throws BigQueryException {\n     return bigquery.insertAll(InsertAllRequest.of(tableId(), rows));\n   }\n \n@@ -271,12 +276,9 @@ public class Table extends TableInfo {\n    *     to be invalid\n    * @throws BigQueryException upon failure\n    */\n-  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n-    InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n-        .skipInvalidRows(skipInvalidRows)\n-        .ignoreUnknownValues(ignoreUnknownValues)\n-        .build();\n+\n+  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+    InsertAllRequest request = InsertAllRequest.builder(tableId(), rows).skipInvalidRows(skipInvalidRows).ignoreUnknownValues(ignoreUnknownValues).build();\n     return bigquery.insertAll(request);\n   }\n \n@@ -296,8 +298,8 @@ public class Table extends TableInfo {\n    * @param options table data list options\n    * @throws BigQueryException upon failure\n    */\n-  public Page<List<FieldValue>> list(TableDataListOption... options)\n-      throws BigQueryException {\n+\n+  public Page<List<FieldValue>> list(TableDataListOption... options) throws BigQueryException {\n     return bigquery.listTableData(tableId(), options);\n   }\n \n@@ -329,8 +331,8 @@ public class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job copy(String destinationDataset, String destinationTable, JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job copy(String destinationDataset, String destinationTable, JobOption... options) throws BigQueryException {\n     return copy(TableId.of(destinationDataset, destinationTable), options);\n   }\n \n@@ -363,8 +365,8 @@ public class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job copy(TableId destinationTable, JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job copy(TableId destinationTable, JobOption... options) throws BigQueryException {\n     CopyJobConfiguration configuration = CopyJobConfiguration.of(destinationTable, tableId());\n     return bigquery.create(JobInfo.of(configuration), options);\n   }\n@@ -398,8 +400,8 @@ public class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job extract(String format, String destinationUri, JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job extract(String format, String destinationUri, JobOption... options) throws BigQueryException {\n     return extract(format, ImmutableList.of(destinationUri), options);\n   }\n \n@@ -436,10 +438,9 @@ public class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job extract(String format, List<String> destinationUris, JobOption... options)\n-      throws BigQueryException {\n-    ExtractJobConfiguration extractConfiguration =\n-        ExtractJobConfiguration.of(tableId(), destinationUris, format);\n+\n+  public Job extract(String format, List<String> destinationUris, JobOption... options) throws BigQueryException {\n+    ExtractJobConfiguration extractConfiguration = ExtractJobConfiguration.of(tableId(), destinationUris, format);\n     return bigquery.create(JobInfo.of(extractConfiguration), options);\n   }\n \n@@ -471,8 +472,8 @@ public class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job load(FormatOptions format, String sourceUri, JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job load(FormatOptions format, String sourceUri, JobOption... options) throws BigQueryException {\n     return load(format, ImmutableList.of(sourceUri), options);\n   }\n \n@@ -508,8 +509,8 @@ public class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job load(FormatOptions format, List<String> sourceUris, JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job load(FormatOptions format, List<String> sourceUris, JobOption... options) throws BigQueryException {\n     LoadJobConfiguration loadConfig = LoadJobConfiguration.of(tableId(), sourceUris, format);\n     return bigquery.create(JobInfo.of(loadConfig), options);\n   }\n@@ -517,6 +518,7 @@ public class Table extends TableInfo {\n   /**\n    * Returns the table's {@code BigQuery} object used to issue requests.\n    */\n+\n   public BigQuery bigquery() {\n     return bigquery;\n   }\n@@ -536,7 +538,7 @@ public class Table extends TableInfo {\n     }\n     Table other = (Table) obj;\n     return Objects.equals(toPb(), other.toPb())\n-        && Objects.equals(options, other.options);\n+      && Objects.equals(options, other.options);\n   }\n \n   @Override\n@@ -552,4 +554,4 @@ public class Table extends TableInfo {\n   static Table fromPb(BigQuery bigquery, com.google.api.services.bigquery.model.Table tablePb) {\n     return new Table(bigquery, new TableInfo.BuilderImpl(tablePb));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/48/Table.java\nindex 26f79be6f75..1a696a918e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/48/Table.java\n@@ -272,7 +272,8 @@ public class Table extends TableInfo {\n    * @throws BigQueryException upon failure\n    */\n   public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+      boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+\n     InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/48/Table.java\nindex 26f79be6f75..1a696a918e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/48/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/48/Table.java\n@@ -272,7 +272,8 @@ public class Table extends TableInfo {\n    * @throws BigQueryException upon failure\n    */\n   public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-                                  boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+      boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+\n     InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}