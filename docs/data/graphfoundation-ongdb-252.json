{
    "project_name": "graphfoundation-ongdb",
    "error_id": "252",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/252/Trav.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/252/Trav.java\nindex 835fe986b75..dff3b8e9aa4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/252/Trav.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/252/Trav.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.rmi.RemoteException;\n@@ -50,22 +51,22 @@ import static org.neo4j.graphdb.traversal.Evaluators.toDepth;\n /**\n  * Traverses the graph.\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Trav extends TransactionProvidingApp\n {\n-    /**\n-     * Constructs a new command which can traverse the graph.\n-     */\n-    public Trav()\n-    {\n-        this.addOptionDefinition( \"o\", new OptionDefinition( OptionValueType.MUST,\n-            \"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]\" ) );\n-        this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST,\n-            \"The relationship type(s) expressed as a JSON string \" +\n+  /**\n+   * Constructs a new command which can traverse the graph.\n+   */\n+  public Trav()\n+  {\n+    this.addOptionDefinition(\"o\", new OptionDefinition(OptionValueType.MUST,\n+        \"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]\"));\n+    this.addOptionDefinition(\"r\", new OptionDefinition(OptionValueType.MUST,\n+        \"The relationship type(s) expressed as a JSON string \" +\n             \"(supports regex matching of the types) f.ex. \" +\n-            \"\\\"MY_REL_TYPE:out,.*_HAS_.*:both\\\". Matching is case-insensitive.\" ) );\n-        this.addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST,\n-            \"Filters node property keys/values. Supplied either as a single \" +\n+            \"\\\"MY_REL_TYPE:out,.*_HAS_.*:both\\\". Matching is case-insensitive.\"));\n+    this.addOptionDefinition(\"f\", new OptionDefinition(OptionValueType.MUST,\n+        \"Filters node property keys/values. Supplied either as a single \" +\n             \"value or as a JSON string where both keys and values can \" +\n             \"contain regex. Starting/ending {} brackets are optional. Examples:\\n\" +\n             \"\\\"username\\\"\\n\" +\n@@ -73,156 +74,154 @@ public class Trav extends TransactionProvidingApp\n             \"\\\".*name: ma.*, age: ''\\\"\\n\" +\n             \"   nodes which has any key matching '.*name' where the \" +\n             \"property value\\n\" +\n-            \"   for that key matches 'ma.*' AND has the 'age' property gets listed\" ) );\n-        this.addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters are case-insensitive (case-sensitive by default)\" ) );\n-        this.addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters matches more loosely, i.e. it's considered a match if \" +\n+            \"   for that key matches 'ma.*' AND has the 'age' property gets listed\"));\n+    this.addOptionDefinition(\"i\", new OptionDefinition(OptionValueType.NONE,\n+        \"Filters are case-insensitive (case-sensitive by default)\"));\n+    this.addOptionDefinition(\"l\", new OptionDefinition(OptionValueType.NONE,\n+        \"Filters matches more loosely, i.e. it's considered a match if \" +\n             \"just a part of a value matches the pattern, not necessarily \" +\n-            \"the whole value\" ) );\n-        this.addOptionDefinition( \"c\", OPTION_DEF_FOR_C );\n-        this.addOptionDefinition( \"d\", new OptionDefinition( OptionValueType.MUST,\n-                \"Depth limit\" ) );\n-        this.addOptionDefinition( \"u\", new OptionDefinition( OptionValueType.MUST,\n-                \"Uniqueness of the entities encountered during traversal \" +\n-                niceEnumAlternatives( Uniqueness.class ) ) );\n+            \"the whole value\"));\n+    this.addOptionDefinition(\"c\", OPTION_DEF_FOR_C);\n+    this.addOptionDefinition(\"d\", new OptionDefinition(OptionValueType.MUST,\n+        \"Depth limit\"));\n+    this.addOptionDefinition(\"u\", new OptionDefinition(OptionValueType.MUST,\n+        \"Uniqueness of the entities encountered during traversal \" +\n+            niceEnumAlternatives(Uniqueness.class)));\n+  }\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Traverses the graph from your current position (pwd). \" +\n+        \"It's a reflection of the neo4j traverser API with some options for filtering \" +\n+        \"which nodes will be returned.\";\n+  }\n+\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session,\n+                              Output out) throws ShellException, RemoteException\n+  {\n+    assertCurrentIsNode(session);\n+\n+    Node node = this.getCurrent(session).asNode();\n+    boolean caseInsensitiveFilters = parser.options().containsKey(\"i\");\n+    boolean looseFilters = parser.options().containsKey(\"l\");\n+    boolean quiet = parser.options().containsKey(\"q\");\n+\n+    // Order\n+    TraversalDescription description = getServer().getDb().traversalDescription();\n+    String order = parser.options().get(\"o\");\n+    if (order != null)\n+    {\n+      description = description.order(parseOrder(order));\n     }\n \n-    @Override\n-    public String getDescription()\n+    // Relationship types / expander\n+    String relationshipTypes = parser.options().get(\"r\");\n+    if (relationshipTypes != null)\n     {\n-        return \"Traverses the graph from your current position (pwd). \" +\n-            \"It's a reflection of the neo4j traverser API with some options for filtering \" +\n-            \"which nodes will be returned.\";\n+      Map<String, Object> types = parseFilter(relationshipTypes, out);\n+      description = description.expand(toExpander(getServer().getDb(), null, types,\n+          caseInsensitiveFilters, looseFilters));\n     }\n \n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException, RemoteException\n+    // Uniqueness\n+    String uniqueness = parser.options().get(\"u\");\n+    if (uniqueness != null)\n     {\n-        assertCurrentIsNode( session );\n-\n-        Node node = this.getCurrent( session ).asNode();\n-        boolean caseInsensitiveFilters = parser.options().containsKey( \"i\" );\n-        boolean looseFilters = parser.options().containsKey( \"l\" );\n-        boolean quiet = parser.options().containsKey( \"q\" );\n+      description = description.uniqueness(parseUniqueness(uniqueness));\n+    }\n \n-        // Order\n-        TraversalDescription description = getServer().getDb().traversalDescription();\n-        String order = parser.options().get( \"o\" );\n-        if ( order != null )\n-        {\n-            description = description.order( parseOrder( order ) );\n-        }\n+    // Depth limit\n+    String depthLimit = parser.options().get(\"d\");\n+    if (depthLimit != null)\n+    {\n+      description = description.evaluator(toDepth(parseInt(depthLimit)));\n+    }\n \n-        // Relationship types / expander\n-        String relationshipTypes = parser.options().get( \"r\" );\n-        if ( relationshipTypes != null )\n+    String filterString = parser.options().get(\"f\");\n+    Map<String, Object> filterMap = filterString != null ? parseFilter(filterString, out) : null;\n+    String commandToRun = parser.options().get(\"c\");\n+    Collection<String> commandsToRun = new ArrayList<>();\n+    if (commandToRun != null)\n+    {\n+      commandsToRun.addAll(Arrays.asList(commandToRun.split(Pattern.quote(\"&&\"))));\n+    }\n+    for (Path path : description.traverse(node))\n+    {\n+      boolean hit = false;\n+      if (filterMap == null)\n+      {\n+        hit = true;\n+      } else\n+      {\n+        Node endNode = path.endNode();\n+        Map<String, Boolean> matchPerFilterKey = new HashMap<>();\n+        for (String key : endNode.getPropertyKeys())\n         {\n-            Map<String, Object> types = parseFilter( relationshipTypes, out );\n-            description = description.expand( toExpander( getServer().getDb(), null, types,\n-                    caseInsensitiveFilters, looseFilters ) );\n-        }\n+          for (Map.Entry<String, Object> filterEntry :\n+              filterMap.entrySet())\n+          {\n+            String filterKey = filterEntry.getKey();\n+            if (matchPerFilterKey.containsKey(filterKey))\n+            {\n+              continue;\n+            }\n \n-        // Uniqueness\n-        String uniqueness = parser.options().get( \"u\" );\n-        if ( uniqueness != null )\n-        {\n-            description = description.uniqueness( parseUniqueness( uniqueness ) );\n+            if (matches(newPattern(filterKey,\n+                caseInsensitiveFilters), key,\n+                caseInsensitiveFilters, looseFilters))\n+            {\n+              Object value = endNode.getProperty(key);\n+              String filterPattern =\n+                  filterEntry.getValue() != null ?\n+                      filterEntry.getValue().toString() : null;\n+              if (matches(newPattern(filterPattern,\n+                  caseInsensitiveFilters), value.toString(),\n+                  caseInsensitiveFilters, looseFilters))\n+              {\n+                matchPerFilterKey.put(filterKey, Boolean.TRUE);\n+              }\n+            }\n+          }\n         }\n \n-        // Depth limit\n-        String depthLimit = parser.options().get( \"d\" );\n-        if ( depthLimit != null )\n+        if (matchPerFilterKey.size() == filterMap.size())\n         {\n-            description = description.evaluator( toDepth( parseInt( depthLimit ) ) );\n+          hit = true;\n         }\n-\n-        String filterString = parser.options().get( \"f\" );\n-        Map<String, Object> filterMap = filterString != null ? parseFilter( filterString, out ) : null;\n-        String commandToRun = parser.options().get( \"c\" );\n-        Collection<String> commandsToRun = new ArrayList<>();\n-        if ( commandToRun != null )\n+      }\n+      if (hit)\n+      {\n+        if (commandsToRun.isEmpty())\n         {\n-            commandsToRun.addAll( Arrays.asList( commandToRun.split( Pattern.quote( \"&&\" ) ) ) );\n-        }\n-        for ( Path path : description.traverse( node ) )\n+          printPath(path, quiet, session, out);\n+        } else\n         {\n-            boolean hit = false;\n-            if ( filterMap == null )\n-            {\n-                hit = true;\n-            }\n-            else\n-            {\n-                Node endNode = path.endNode();\n-                Map<String, Boolean> matchPerFilterKey = new HashMap<>();\n-                for ( String key : endNode.getPropertyKeys() )\n-                {\n-                    for ( Map.Entry<String, Object> filterEntry :\n-                        filterMap.entrySet() )\n-                    {\n-                        String filterKey = filterEntry.getKey();\n-                        if ( matchPerFilterKey.containsKey( filterKey ) )\n-                        {\n-                            continue;\n-                        }\n-\n-                        if ( matches( newPattern( filterKey,\n-                            caseInsensitiveFilters ), key,\n-                            caseInsensitiveFilters, looseFilters ) )\n-                        {\n-                            Object value = endNode.getProperty( key );\n-                            String filterPattern =\n-                                filterEntry.getValue() != null ?\n-                                filterEntry.getValue().toString() : null;\n-                            if ( matches( newPattern( filterPattern,\n-                                caseInsensitiveFilters ), value.toString(),\n-                                caseInsensitiveFilters, looseFilters ) )\n-                            {\n-                                matchPerFilterKey.put( filterKey, Boolean.TRUE );\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                if ( matchPerFilterKey.size() == filterMap.size() )\n-                {\n-                    hit = true;\n-                }\n-            }\n-            if ( hit )\n-            {\n-                if ( commandsToRun.isEmpty() )\n-                {\n-                    printPath( path, quiet, session, out );\n-                }\n-                else\n-                {\n-                    printAndInterpretTemplateLines( commandsToRun, true,\n-                            NodeOrRelationship.wrap( path.endNode() ), getServer(), session, out );\n-                }\n-            }\n+          printAndInterpretTemplateLines(commandsToRun, true,\n+              NodeOrRelationship.wrap(path.endNode()), getServer(), session, out);\n         }\n-        return Continuation.INPUT_COMPLETE;\n+      }\n     }\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-    private UniquenessFactory parseUniqueness( String uniqueness )\n+  private UniquenessFactory parseUniqueness(String uniqueness)\n+  {\n+    return parseEnum(Uniqueness.class, uniqueness, null);\n+  }\n+\n+  private BranchOrderingPolicy parseOrder(String order)\n+  {\n+    if (order.equals(\"depth first\") || \"depth first\".startsWith(order.toLowerCase()))\n     {\n-        return parseEnum( Uniqueness.class, uniqueness, null );\n+      return BranchOrderingPolicies.PREORDER_DEPTH_FIRST;\n     }\n-\n-    private BranchOrderingPolicy parseOrder( String order )\n+    if (order.equals(\"breadth first\") || \"breadth first\".startsWith(order.toLowerCase()))\n     {\n-        if ( order.equals( \"depth first\" ) || \"depth first\".startsWith( order.toLowerCase() ) )\n-        {\n-            return BranchOrderingPolicies.PREORDER_DEPTH_FIRST;\n-        }\n-        if ( order.equals( \"breadth first\" ) || \"breadth first\".startsWith( order.toLowerCase() ) )\n-        {\n-            return BranchOrderingPolicies.PREORDER_BREADTH_FIRST;\n-        }\n-\n-        return parseEnum( BranchOrderingPolicies.class, order, null );\n+      return BranchOrderingPolicies.PREORDER_BREADTH_FIRST;\n     }\n+\n+    return parseEnum(BranchOrderingPolicies.class, order, null);\n+  }\n }\n",
            "diff_size": 213
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 543).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/252/Trav.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/252/Trav.java\nindex 835fe986b75..ce6a8963eaa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/252/Trav.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/252/Trav.java\n@@ -58,51 +58,27 @@ public class Trav extends TransactionProvidingApp\n      */\n     public Trav()\n     {\n-        this.addOptionDefinition( \"o\", new OptionDefinition( OptionValueType.MUST,\n-            \"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]\" ) );\n-        this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST,\n-            \"The relationship type(s) expressed as a JSON string \" +\n-            \"(supports regex matching of the types) f.ex. \" +\n-            \"\\\"MY_REL_TYPE:out,.*_HAS_.*:both\\\". Matching is case-insensitive.\" ) );\n-        this.addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST,\n-            \"Filters node property keys/values. Supplied either as a single \" +\n-            \"value or as a JSON string where both keys and values can \" +\n-            \"contain regex. Starting/ending {} brackets are optional. Examples:\\n\" +\n-            \"\\\"username\\\"\\n\" +\n-            \"   nodes which has property 'username' gets listed\\n\" +\n-            \"\\\".*name: ma.*, age: ''\\\"\\n\" +\n-            \"   nodes which has any key matching '.*name' where the \" +\n-            \"property value\\n\" +\n-            \"   for that key matches 'ma.*' AND has the 'age' property gets listed\" ) );\n-        this.addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters are case-insensitive (case-sensitive by default)\" ) );\n-        this.addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters matches more loosely, i.e. it's considered a match if \" +\n-            \"just a part of a value matches the pattern, not necessarily \" +\n-            \"the whole value\" ) );\n-        this.addOptionDefinition( \"c\", OPTION_DEF_FOR_C );\n-        this.addOptionDefinition( \"d\", new OptionDefinition( OptionValueType.MUST,\n-                \"Depth limit\" ) );\n-        this.addOptionDefinition( \"u\", new OptionDefinition( OptionValueType.MUST,\n-                \"Uniqueness of the entities encountered during traversal \" +\n-                niceEnumAlternatives( Uniqueness.class ) ) );\n+        this.addOptionDefinition( \"o\", new OptionDefinition( OptionValueType.MUST, \"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]\" ) );\n+this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST, \"The relationship type(s) expressed as a JSON string \" + \"(supports regex matching of the types) f.ex. \" + \"\\\"MY_REL_TYPE:out,.*_HAS_.*:both\\\". Matching is case-insensitive.\" ) );\n+this.addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST, \"Filters node property keys/values. Supplied either as a single \" + \"value or as a JSON string where both keys and values can \" + \"contain regex. Starting/ending {} brackets are optional. Examples:\\n\" + \"\\\"username\\\"\\n\" + \"   nodes which has property 'username' gets listed\\n\" + \"\\\".*name: ma.*, age: ''\\\"\\n\" + \"   nodes which has any key matching '.*name' where the \" + \"property value\\n\" + \"   for that key matches 'ma.*' AND has the 'age' property gets listed\" ) );\n+this.addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE, \"Filters are case-insensitive (case-sensitive by default)\" ) );\n+this.addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE, \"Filters matches more loosely, i.e. it's considered a match if \" + \"just a part of a value matches the pattern, not necessarily \" + \"the whole value\" ) );\n+this.addOptionDefinition( \"c\", OPTION_DEF_FOR_C );\n+        this.addOptionDefinition( \"d\", new OptionDefinition( OptionValueType.MUST, \"Depth limit\" ) );\n+this.addOptionDefinition( \"u\", new OptionDefinition( OptionValueType.MUST, \"Uniqueness of the entities encountered during traversal \" + niceEnumAlternatives( Uniqueness.class ) ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Traverses the graph from your current position (pwd). \" +\n-            \"It's a reflection of the neo4j traverser API with some options for filtering \" +\n-            \"which nodes will be returned.\";\n+        return \"Traverses the graph from your current position (pwd). \" + \"It's a reflection of the neo4j traverser API with some options for filtering \" + \"which nodes will be returned.\";\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException, RemoteException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException, RemoteException\n+{\n         assertCurrentIsNode( session );\n-\n-        Node node = this.getCurrent( session ).asNode();\n+Node node = this.getCurrent( session ).asNode();\n         boolean caseInsensitiveFilters = parser.options().containsKey( \"i\" );\n         boolean looseFilters = parser.options().containsKey( \"l\" );\n         boolean quiet = parser.options().containsKey( \"q\" );\n@@ -119,7 +95,7 @@ public class Trav extends TransactionProvidingApp\n         String relationshipTypes = parser.options().get( \"r\" );\n         if ( relationshipTypes != null )\n         {\n-            Map<String, Object> types = parseFilter( relationshipTypes, out );\n+            Map<String,Object> types = parseFilter( relationshipTypes, out );\n             description = description.expand( toExpander( getServer().getDb(), null, types,\n                     caseInsensitiveFilters, looseFilters ) );\n         }\n@@ -139,7 +115,7 @@ public class Trav extends TransactionProvidingApp\n         }\n \n         String filterString = parser.options().get( \"f\" );\n-        Map<String, Object> filterMap = filterString != null ? parseFilter( filterString, out ) : null;\n+        Map<String,Object> filterMap = filterString != null ? parseFilter( filterString, out ) : null;\n         String commandToRun = parser.options().get( \"c\" );\n         Collection<String> commandsToRun = new ArrayList<>();\n         if ( commandToRun != null )\n@@ -156,30 +132,24 @@ public class Trav extends TransactionProvidingApp\n             else\n             {\n                 Node endNode = path.endNode();\n-                Map<String, Boolean> matchPerFilterKey = new HashMap<>();\n+                Map<String,Boolean> matchPerFilterKey = new HashMap<>();\n                 for ( String key : endNode.getPropertyKeys() )\n                 {\n-                    for ( Map.Entry<String, Object> filterEntry :\n+                    for ( Map.Entry<String,Object> filterEntry:\n                         filterMap.entrySet() )\n-                    {\n+{\n                         String filterKey = filterEntry.getKey();\n                         if ( matchPerFilterKey.containsKey( filterKey ) )\n                         {\n                             continue;\n                         }\n \n-                        if ( matches( newPattern( filterKey,\n-                            caseInsensitiveFilters ), key,\n-                            caseInsensitiveFilters, looseFilters ) )\n-                        {\n+                        if ( matches( newPattern( filterKey, caseInsensitiveFilters ), key, caseInsensitiveFilters, looseFilters ) )\n+{\n                             Object value = endNode.getProperty( key );\n-                            String filterPattern =\n-                                filterEntry.getValue() != null ?\n-                                filterEntry.getValue().toString() : null;\n-                            if ( matches( newPattern( filterPattern,\n-                                caseInsensitiveFilters ), value.toString(),\n-                                caseInsensitiveFilters, looseFilters ) )\n-                            {\n+                            String filterPattern = filterEntry.getValue() != null ? filterEntry.getValue().toString() : null;\n+if ( matches( newPattern( filterPattern, caseInsensitiveFilters ), value.toString(), caseInsensitiveFilters, looseFilters ) )\n+{\n                                 matchPerFilterKey.put( filterKey, Boolean.TRUE );\n                             }\n                         }\n@@ -201,7 +171,7 @@ public class Trav extends TransactionProvidingApp\n                 {\n                     printAndInterpretTemplateLines( commandsToRun, true,\n                             NodeOrRelationship.wrap( path.endNode() ), getServer(), session, out );\n-                }\n+    }\n             }\n         }\n         return Continuation.INPUT_COMPLETE;\n@@ -218,11 +188,12 @@ public class Trav extends TransactionProvidingApp\n         {\n             return BranchOrderingPolicies.PREORDER_DEPTH_FIRST;\n         }\n-        if ( order.equals( \"breadth first\" ) || \"breadth first\".startsWith( order.toLowerCase() ) )\n+\n+if ( order.equals( \"breadth first\" ) || \"breadth first\".startsWith( order.toLowerCase() ) )\n         {\n             return BranchOrderingPolicies.PREORDER_BREADTH_FIRST;\n         }\n \n         return parseEnum( BranchOrderingPolicies.class, order, null );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}