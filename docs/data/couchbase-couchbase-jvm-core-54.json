{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "103",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a {@link GenericAnalyticsRequest} for this full query.\n     */\n    public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password, InetAddress targetNode) {\n        return new GenericAnalyticsRequest(jsonQuery, true, bucket, password, targetNode);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/54/GenericAnalyticsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/54/GenericAnalyticsRequest.java\nindex c8a342af064..a544d50f0ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/54/GenericAnalyticsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/54/GenericAnalyticsRequest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.message.analytics;\n \n import com.couchbase.client.core.annotations.InterfaceAudience;\n@@ -38,7 +39,7 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n     private final InetAddress targetNode;\n \n     protected GenericAnalyticsRequest(String query, boolean jsonFormat, String bucket, String password,\n-        InetAddress targetNode) {\n+                                      InetAddress targetNode) {\n         super(bucket, password);\n         this.query = query;\n         this.jsonFormat = jsonFormat;\n@@ -63,8 +64,8 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n      * (e.g. \"SELECT * FROM default\").\n      *\n      * @param statement the Analytics query statement to perform.\n-     * @param bucket the bucket on which to search.\n-     * @param password the password for the target bucket.\n+     * @param bucket    the bucket on which to search.\n+     * @param password  the password for the target bucket.\n      * @return a {@link GenericAnalyticsRequest} for this simple statement.\n      */\n     public static GenericAnalyticsRequest simpleStatement(String statement, String bucket, String password) {\n@@ -74,13 +75,13 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n     /**\n      * Create a {@link GenericAnalyticsRequest} and mark it as containing a full Analytics query in Json form\n      * (including additional query parameters).\n-     *\n+     * <p>\n      * The simplest form of such a query is a single statement encapsulated in a json query object:\n      * <pre>{\"statement\":\"SELECT * FROM default\"}</pre>.\n      *\n      * @param jsonQuery the Analytics query in json form.\n-     * @param bucket the bucket on which to perform the query.\n-     * @param password the password for the target bucket.\n+     * @param bucket    the bucket on which to perform the query.\n+     * @param password  the password for the target bucket.\n      * @return a {@link GenericAnalyticsRequest} for this full query.\n      */\n     public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password) {\n@@ -90,17 +91,18 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n     /**\n      * Create a {@link GenericAnalyticsRequest} and mark it as containing a full Analytics query in Json form\n      * (including additional query parameters).\n-     *\n+     * <p>\n      * The simplest form of such a query is a single statement encapsulated in a json query object:\n      * <pre>{\"statement\":\"SELECT * FROM default\"}</pre>.\n      *\n-     * @param jsonQuery the Analytics query in json form.\n-     * @param bucket the bucket on which to perform the query.\n-     * @param password the password for the target bucket.\n+     * @param jsonQuery  the Analytics query in json form.\n+     * @param bucket     the bucket on which to perform the query.\n+     * @param password   the password for the target bucket.\n      * @param targetNode the node on which to execute this request (or null to let the core locate and choose one).\n      * @return a {@link GenericAnalyticsRequest} for this full query.\n      */\n-    public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password, InetAddress targetNode) {\n+    public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password,\n+                                                    InetAddress targetNode) {\n         return new GenericAnalyticsRequest(jsonQuery, true, bucket, password, targetNode);\n     }\n }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/54/GenericAnalyticsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/54/GenericAnalyticsRequest.java\nindex c8a342af064..5dfda8298bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/54/GenericAnalyticsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/54/GenericAnalyticsRequest.java\n@@ -103,4 +103,4 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n     public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password, InetAddress targetNode) {\n         return new GenericAnalyticsRequest(jsonQuery, true, bucket, password, targetNode);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/54/GenericAnalyticsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/54/GenericAnalyticsRequest.java\nindex c8a342af064..b7ca49f13b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/54/GenericAnalyticsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/54/GenericAnalyticsRequest.java\n@@ -20,7 +20,6 @@ import com.couchbase.client.core.annotations.InterfaceStability;\n import com.couchbase.client.core.message.AbstractCouchbaseRequest;\n import com.couchbase.client.core.message.PrelocatedRequest;\n import com.couchbase.client.core.message.query.QueryRequest;\n-\n import java.net.InetAddress;\n \n /**\n@@ -29,6 +28,8 @@ import java.net.InetAddress;\n  * @author Michael Nitschinger\n  * @since 1.4.3\n  */\n+\n+\n @InterfaceStability.Uncommitted\n @InterfaceAudience.Public\n public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements AnalyticsRequest, PrelocatedRequest {\n@@ -37,8 +38,8 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n     private final boolean jsonFormat;\n     private final InetAddress targetNode;\n \n-    protected GenericAnalyticsRequest(String query, boolean jsonFormat, String bucket, String password,\n-        InetAddress targetNode) {\n+\n+    protected GenericAnalyticsRequest(String query, boolean jsonFormat, String bucket, String password, InetAddress targetNode) {\n         super(bucket, password);\n         this.query = query;\n         this.jsonFormat = jsonFormat;\n@@ -53,6 +54,7 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n         return jsonFormat;\n     }\n \n+\n     @Override\n     public InetAddress sendTo() {\n         return targetNode;\n@@ -67,8 +69,13 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n      * @param password the password for the target bucket.\n      * @return a {@link GenericAnalyticsRequest} for this simple statement.\n      */\n+\n     public static GenericAnalyticsRequest simpleStatement(String statement, String bucket, String password) {\n-        return new GenericAnalyticsRequest(statement, false, bucket, password, null);\n+        return new GenericAnalyticsRequest(statement,\n+            false,\n+            bucket,\n+            password,\n+            null);\n     }\n \n     /**\n@@ -83,8 +90,13 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n      * @param password the password for the target bucket.\n      * @return a {@link GenericAnalyticsRequest} for this full query.\n      */\n+\n     public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password) {\n-        return new GenericAnalyticsRequest(jsonQuery, true, bucket, password, null);\n+        return new GenericAnalyticsRequest(jsonQuery,\n+            true,\n+            bucket,\n+            password,\n+            null);\n     }\n \n     /**\n@@ -100,7 +112,8 @@ public class GenericAnalyticsRequest extends AbstractCouchbaseRequest implements\n      * @param targetNode the node on which to execute this request (or null to let the core locate and choose one).\n      * @return a {@link GenericAnalyticsRequest} for this full query.\n      */\n+\n     public static GenericAnalyticsRequest jsonQuery(String jsonQuery, String bucket, String password, InetAddress targetNode) {\n         return new GenericAnalyticsRequest(jsonQuery, true, bucket, password, targetNode);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}