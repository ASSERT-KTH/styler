{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "503",
    "information": {
        "errors": [
            {
                "line": "73",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public void testToBuilder() {\n    compareStandardTableDefinition(TABLE_DEFINITION, TABLE_DEFINITION.toBuilder().build());\n    StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n    assertEquals(\"EU\", tableDefinition.getLocation());\n    tableDefinition = tableDefinition.toBuilder()\n        .setLocation(LOCATION)",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/503/StandardTableDefinitionTest.java\nindex 48e4d2e2ed0..98ce4778366 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/503/StandardTableDefinitionTest.java\n@@ -70,7 +70,8 @@ public class StandardTableDefinitionTest {\n   @Test\n   public void testToBuilder() {\n     compareStandardTableDefinition(TABLE_DEFINITION, TABLE_DEFINITION.toBuilder().build());\n-    StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n+    StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\"\n+        ).build();\n     assertEquals(\"EU\", tableDefinition.getLocation());\n     tableDefinition = tableDefinition.toBuilder()\n         .setLocation(LOCATION)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/503/StandardTableDefinitionTest.java\nindex 48e4d2e2ed0..0d630914a04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/503/StandardTableDefinitionTest.java\n@@ -70,7 +70,8 @@ public class StandardTableDefinitionTest {\n   @Test\n   public void testToBuilder() {\n     compareStandardTableDefinition(TABLE_DEFINITION, TABLE_DEFINITION.toBuilder().build());\n-    StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n+    StandardTableDefinition tableDefinition =\n+        TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n     assertEquals(\"EU\", tableDefinition.getLocation());\n     tableDefinition = tableDefinition.toBuilder()\n         .setLocation(LOCATION)\n@@ -130,7 +131,7 @@ public class StandardTableDefinitionTest {\n   }\n \n   private void compareStandardTableDefinition(StandardTableDefinition expected,\n-      StandardTableDefinition value) {\n+                                              StandardTableDefinition value) {\n     assertEquals(expected, value);\n     assertEquals(expected.getSchema(), value.getSchema());\n     assertEquals(expected.getType(), value.getType());\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'StandardTableDefinition' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/503/StandardTableDefinitionTest.java\nindex 48e4d2e2ed0..b1bc20cfdb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/503/StandardTableDefinitionTest.java\n@@ -31,17 +31,17 @@ public class StandardTableDefinitionTest {\n           .setMode(Field.Mode.NULLABLE)\n           .setDescription(\"FieldDescription1\")\n           .build();\n-  private static final Field FIELD_SCHEMA2 =\n+    private static final Field FIELD_SCHEMA2 =\n       Field.newBuilder(\"IntegerField\", Field.Type.integer())\n           .setMode(Field.Mode.REPEATED)\n           .setDescription(\"FieldDescription2\")\n           .build();\n-  private static final Field FIELD_SCHEMA3 =\n+    private static final Field FIELD_SCHEMA3 =\n       Field.newBuilder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n           .setMode(Field.Mode.REQUIRED)\n           .setDescription(\"FieldDescription3\")\n           .build();\n-  private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n+    private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final Long NUM_BYTES = 42L;\n   private static final Long NUM_ROWS = 43L;\n   private static final String LOCATION = \"US\";\n@@ -57,7 +57,7 @@ public class StandardTableDefinitionTest {\n           .setSchema(TABLE_SCHEMA)\n           .setTimePartitioning(TIME_PARTITIONING)\n           .build();\n-  private static final StandardTableDefinition DEPRECATED_TABLE_DEFINITION =\n+    private static final StandardTableDefinition DEPRECATED_TABLE_DEFINITION =\n       StandardTableDefinition.builder()\n           .setLocation(LOCATION)\n           .setNumBytes(NUM_BYTES)\n@@ -67,7 +67,7 @@ public class StandardTableDefinitionTest {\n           .timePartitioning(TIME_PARTITIONING)\n           .build();\n \n-  @Test\n+@Test\n   public void testToBuilder() {\n     compareStandardTableDefinition(TABLE_DEFINITION, TABLE_DEFINITION.toBuilder().build());\n     StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n@@ -142,4 +142,4 @@ public class StandardTableDefinitionTest {\n     assertEquals(expected.getTimePartitioning(), value.getTimePartitioning());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 277).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 279).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/503/StandardTableDefinitionTest.java\nindex 48e4d2e2ed0..e67bb99ef2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/503/StandardTableDefinitionTest.java\n@@ -21,60 +21,29 @@ import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import com.google.cloud.bigquery.StandardTableDefinition.StreamingBuffer;\n-\n import org.junit.Test;\n \n+\n public class StandardTableDefinitionTest {\n \n-  private static final Field FIELD_SCHEMA1 =\n-      Field.newBuilder(\"StringField\", Field.Type.string())\n-          .setMode(Field.Mode.NULLABLE)\n-          .setDescription(\"FieldDescription1\")\n-          .build();\n-  private static final Field FIELD_SCHEMA2 =\n-      Field.newBuilder(\"IntegerField\", Field.Type.integer())\n-          .setMode(Field.Mode.REPEATED)\n-          .setDescription(\"FieldDescription2\")\n-          .build();\n-  private static final Field FIELD_SCHEMA3 =\n-      Field.newBuilder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n-          .setMode(Field.Mode.REQUIRED)\n-          .setDescription(\"FieldDescription3\")\n-          .build();\n+  private static final Field FIELD_SCHEMA1 = Field.newBuilder(\"StringField\", Field.Type.string()).setMode(Field.Mode.NULLABLE).setDescription(\"FieldDescription1\").build();\n+  private static final Field FIELD_SCHEMA2 = Field.newBuilder(\"IntegerField\", Field.Type.integer()).setMode(Field.Mode.REPEATED).setDescription(\"FieldDescription2\").build();\n+  private static final Field FIELD_SCHEMA3 = Field.newBuilder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2)).setMode(Field.Mode.REQUIRED).setDescription(\"FieldDescription3\").build();\n   private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final Long NUM_BYTES = 42L;\n   private static final Long NUM_ROWS = 43L;\n   private static final String LOCATION = \"US\";\n   private static final StreamingBuffer STREAMING_BUFFER = new StreamingBuffer(1L, 2L, 3L);\n-  private static final TimePartitioning TIME_PARTITIONING =\n-      TimePartitioning.of(TimePartitioning.Type.DAY, 42);\n-  private static final StandardTableDefinition TABLE_DEFINITION =\n-      StandardTableDefinition.newBuilder()\n-          .setLocation(LOCATION)\n-          .setNumBytes(NUM_BYTES)\n-          .setNumRows(NUM_ROWS)\n-          .setStreamingBuffer(STREAMING_BUFFER)\n-          .setSchema(TABLE_SCHEMA)\n-          .setTimePartitioning(TIME_PARTITIONING)\n-          .build();\n-  private static final StandardTableDefinition DEPRECATED_TABLE_DEFINITION =\n-      StandardTableDefinition.builder()\n-          .setLocation(LOCATION)\n-          .setNumBytes(NUM_BYTES)\n-          .setNumRows(NUM_ROWS)\n-          .setStreamingBuffer(STREAMING_BUFFER)\n-          .schema(TABLE_SCHEMA)\n-          .timePartitioning(TIME_PARTITIONING)\n-          .build();\n+  private static final TimePartitioning TIME_PARTITIONING = TimePartitioning.of(TimePartitioning.Type.DAY, 42);\n+  private static final StandardTableDefinition TABLE_DEFINITION = StandardTableDefinition.newBuilder().setLocation(LOCATION).setNumBytes(NUM_BYTES).setNumRows(NUM_ROWS).setStreamingBuffer(STREAMING_BUFFER).setSchema(TABLE_SCHEMA).setTimePartitioning(TIME_PARTITIONING).build();\n+  private static final StandardTableDefinition DEPRECATED_TABLE_DEFINITION = StandardTableDefinition.builder().setLocation(LOCATION).setNumBytes(NUM_BYTES).setNumRows(NUM_ROWS).setStreamingBuffer(STREAMING_BUFFER).schema(TABLE_SCHEMA).timePartitioning(TIME_PARTITIONING).build();\n \n   @Test\n   public void testToBuilder() {\n     compareStandardTableDefinition(TABLE_DEFINITION, TABLE_DEFINITION.toBuilder().build());\n     StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n     assertEquals(\"EU\", tableDefinition.getLocation());\n-    tableDefinition = tableDefinition.toBuilder()\n-        .setLocation(LOCATION)\n-        .build();\n+    tableDefinition = tableDefinition.toBuilder().setLocation(LOCATION).build();\n     compareStandardTableDefinition(TABLE_DEFINITION, tableDefinition);\n   }\n \n@@ -121,16 +90,13 @@ public class StandardTableDefinitionTest {\n   @Test\n   public void testToAndFromPb() {\n     assertTrue(TableDefinition.fromPb(TABLE_DEFINITION.toPb()) instanceof StandardTableDefinition);\n-    compareStandardTableDefinition(TABLE_DEFINITION,\n-        TableDefinition.<StandardTableDefinition>fromPb(TABLE_DEFINITION.toPb()));\n+    compareStandardTableDefinition(TABLE_DEFINITION, TableDefinition.<StandardTableDefinition>fromPb(TABLE_DEFINITION.toPb()));\n     StandardTableDefinition definition = StandardTableDefinition.of(TABLE_SCHEMA);\n     assertTrue(TableDefinition.fromPb(definition.toPb()) instanceof StandardTableDefinition);\n-    compareStandardTableDefinition(definition,\n-        TableDefinition.<StandardTableDefinition>fromPb(definition.toPb()));\n+    compareStandardTableDefinition(definition, TableDefinition.<StandardTableDefinition>fromPb(definition.toPb()));\n   }\n \n-  private void compareStandardTableDefinition(StandardTableDefinition expected,\n-      StandardTableDefinition value) {\n+  private void compareStandardTableDefinition(StandardTableDefinition expected, StandardTableDefinition value) {\n     assertEquals(expected, value);\n     assertEquals(expected.getSchema(), value.getSchema());\n     assertEquals(expected.getType(), value.getType());\n@@ -142,4 +108,4 @@ public class StandardTableDefinitionTest {\n     assertEquals(expected.getTimePartitioning(), value.getTimePartitioning());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/503/StandardTableDefinitionTest.java\nindex 48e4d2e2ed0..98ce4778366 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/503/StandardTableDefinitionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/503/StandardTableDefinitionTest.java\n@@ -70,7 +70,8 @@ public class StandardTableDefinitionTest {\n   @Test\n   public void testToBuilder() {\n     compareStandardTableDefinition(TABLE_DEFINITION, TABLE_DEFINITION.toBuilder().build());\n-    StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\").build();\n+    StandardTableDefinition tableDefinition = TABLE_DEFINITION.toBuilder().setLocation(\"EU\"\n+        ).build();\n     assertEquals(\"EU\", tableDefinition.getLocation());\n     tableDefinition = tableDefinition.toBuilder()\n         .setLocation(LOCATION)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}