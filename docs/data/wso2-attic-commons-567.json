{
    "project_name": "wso2-attic-commons",
    "error_id": "567",
    "information": {
        "errors": [
            {
                "line": "131",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        int size = eventList.size();\n        if (size > 1) {\n            getNextPreStreamFlowProcessor().process(new RemoveListEvent((eventList.toArray(new Event[size])), System.currentTimeMillis()));\n        } else if (size == 1) {\n            Event aEvent = eventList.get(0);\n            getNextPreStreamFlowProcessor().process(new RemoveEvent(aEvent, System.currentTimeMillis()));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/567/TimeBatchWindowHandler.java\nindex c2e07386cca..1850c7b4b6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/567/TimeBatchWindowHandler.java\n@@ -128,7 +128,8 @@ public class TimeBatchWindowHandler extends WindowHandler implements Runnable {\n     private void sendRemoveEvents(List<Event> eventList) {\n         int size = eventList.size();\n         if (size > 1) {\n-            getNextPreStreamFlowProcessor().process(new RemoveListEvent((eventList.toArray(new Event[size])), System.currentTimeMillis()));\n+            getNextPreStreamFlowProcessor().process(new RemoveListEvent((eventList.toArray(new Event[size])),System\n+        . currentTimeMillis()));\n         } else if (size == 1) {\n             Event aEvent = eventList.get(0);\n             getNextPreStreamFlowProcessor().process(new RemoveEvent(aEvent, System.currentTimeMillis()));\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/567/TimeBatchWindowHandler.java\nindex c2e07386cca..a1a2937407b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/567/TimeBatchWindowHandler.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.stream.handler.window;\n \n import org.wso2.siddhi.core.event.ComplexEvent;\n@@ -35,105 +36,106 @@ import java.util.concurrent.TimeUnit;\n \n public class TimeBatchWindowHandler extends WindowHandler implements Runnable {\n \n-    long timeToKeep;\n-    List<Event> newEventList = new ArrayList<Event>();\n-    List<Event> oldEventList;\n+  long timeToKeep;\n+  List<Event> newEventList = new ArrayList<Event>();\n+  List<Event> oldEventList;\n \n-    @Override\n-    public void setParameters(Object[] parameters) {\n-        if (parameters[0] instanceof Integer) {\n-            timeToKeep = (Integer) parameters[0];\n-        } else {\n-            timeToKeep = (Long) parameters[0];\n-        }\n-        getEventRemoverScheduler().schedule(this, timeToKeep, TimeUnit.MILLISECONDS);\n+  @Override\n+  public void setParameters(Object[] parameters) {\n+    if (parameters[0] instanceof Integer) {\n+      timeToKeep = (Integer) parameters[0];\n+    } else {\n+      timeToKeep = (Long) parameters[0];\n     }\n-\n-    @Override\n-    public void process(ComplexEvent complexEvent) {\n-        if (complexEvent instanceof StreamEvent) {\n-            if (complexEvent instanceof InStream) {\n-                if (complexEvent instanceof Event) {\n-                    newEventList.add(((Event) complexEvent));\n-                } else {//ListEvent\n-                    Collections.addAll(newEventList, ((ListEvent) complexEvent).getEvents());\n-                }\n-            } else {\n-                if (complexEvent instanceof Event) {\n-                    newEventList.add(new InEvent((Event) complexEvent));\n-                } else {//ListEvent\n-                    for (Event aEvent : ((ListEvent) complexEvent).getEvents()) {\n-                        newEventList.add(new InEvent(aEvent));\n-                    }\n-                }\n-            }\n+    getEventRemoverScheduler().schedule(this, timeToKeep, TimeUnit.MILLISECONDS);\n+  }\n+\n+  @Override\n+  public void process(ComplexEvent complexEvent) {\n+    if (complexEvent instanceof StreamEvent) {\n+      if (complexEvent instanceof InStream) {\n+        if (complexEvent instanceof Event) {\n+          newEventList.add(((Event) complexEvent));\n+        } else {//ListEvent\n+          Collections.addAll(newEventList, ((ListEvent) complexEvent).getEvents());\n         }\n-    }\n-\n-    @Override\n-    public void run() {\n-        oldEventList = new ArrayList<Event>();\n-        while (true) {\n-            StreamEvent event = getWindow().poll();\n-            if (event == null) {\n-                getEventRemoverScheduler().schedule(this, timeToKeep, TimeUnit.MILLISECONDS);\n-\n-                sendRemoveEvents(oldEventList);\n-\n-                oldEventList = newEventList;\n-                newEventList = new ArrayList<Event>();\n-\n-                sendInEvents(oldEventList);\n-\n-                for (Event aEvent : oldEventList) {\n-                    try {\n-                        getWindow().put(aEvent);\n-                    } catch (InterruptedException e) {\n-                        e.printStackTrace();\n-                    }\n-                }\n-                oldEventList = null;\n-\n-                break;\n-            }\n-            if (event instanceof RemoveStream) {\n-                if (event instanceof Event) {\n-                    oldEventList.add(((Event) event));\n-                } else {//ListEvent\n-                    Collections.addAll(oldEventList, ((ListEvent) event).getEvents());\n-                }\n-            } else {\n-                if (event instanceof Event) {\n-                    oldEventList.add(new RemoveEvent((Event) event,System.currentTimeMillis()));\n-                } else {//ListEvent\n-                    for (Event aEvent : ((ListEvent) event).getEvents()) {\n-                        oldEventList.add(new RemoveEvent(aEvent,System.currentTimeMillis()));\n-                    }\n-                }\n-            }\n+      } else {\n+        if (complexEvent instanceof Event) {\n+          newEventList.add(new InEvent((Event) complexEvent));\n+        } else {//ListEvent\n+          for (Event aEvent : ((ListEvent) complexEvent).getEvents()) {\n+            newEventList.add(new InEvent(aEvent));\n+          }\n         }\n+      }\n     }\n+  }\n+\n+  @Override\n+  public void run() {\n+    oldEventList = new ArrayList<Event>();\n+    while (true) {\n+      StreamEvent event = getWindow().poll();\n+      if (event == null) {\n+        getEventRemoverScheduler().schedule(this, timeToKeep, TimeUnit.MILLISECONDS);\n \n-    private void sendInEvents(List<Event> eventList) {\n-        int size = eventList.size();\n-        if (size > 1) {\n-            getNextPreStreamFlowProcessor().process(new InListEvent((eventList.toArray(new Event[size]))));\n-        } else if (size == 1) {\n-            Event aEvent = eventList.get(0);\n-            getNextPreStreamFlowProcessor().process(new InEvent(aEvent));\n+        sendRemoveEvents(oldEventList);\n+\n+        oldEventList = newEventList;\n+        newEventList = new ArrayList<Event>();\n+\n+        sendInEvents(oldEventList);\n+\n+        for (Event aEvent : oldEventList) {\n+          try {\n+            getWindow().put(aEvent);\n+          } catch (InterruptedException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+        oldEventList = null;\n+\n+        break;\n+      }\n+      if (event instanceof RemoveStream) {\n+        if (event instanceof Event) {\n+          oldEventList.add(((Event) event));\n+        } else {//ListEvent\n+          Collections.addAll(oldEventList, ((ListEvent) event).getEvents());\n         }\n+      } else {\n+        if (event instanceof Event) {\n+          oldEventList.add(new RemoveEvent((Event) event, System.currentTimeMillis()));\n+        } else {//ListEvent\n+          for (Event aEvent : ((ListEvent) event).getEvents()) {\n+            oldEventList.add(new RemoveEvent(aEvent, System.currentTimeMillis()));\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private void sendInEvents(List<Event> eventList) {\n+    int size = eventList.size();\n+    if (size > 1) {\n+      getNextPreStreamFlowProcessor().process(new InListEvent((eventList.toArray(new Event[size]))));\n+    } else if (size == 1) {\n+      Event aEvent = eventList.get(0);\n+      getNextPreStreamFlowProcessor().process(new InEvent(aEvent));\n     }\n+  }\n \n \n-    private void sendRemoveEvents(List<Event> eventList) {\n-        int size = eventList.size();\n-        if (size > 1) {\n-            getNextPreStreamFlowProcessor().process(new RemoveListEvent((eventList.toArray(new Event[size])), System.currentTimeMillis()));\n-        } else if (size == 1) {\n-            Event aEvent = eventList.get(0);\n-            getNextPreStreamFlowProcessor().process(new RemoveEvent(aEvent, System.currentTimeMillis()));\n-        }\n+  private void sendRemoveEvents(List<Event> eventList) {\n+    int size = eventList.size();\n+    if (size > 1) {\n+      getNextPreStreamFlowProcessor()\n+        .process(new RemoveListEvent((eventList.toArray(new Event[size])), System.currentTimeMillis()));\n+    } else if (size == 1) {\n+      Event aEvent = eventList.get(0);\n+      getNextPreStreamFlowProcessor().process(new RemoveEvent(aEvent, System.currentTimeMillis()));\n     }\n+  }\n \n \n }\n",
            "diff_size": 152
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/567/TimeBatchWindowHandler.java\nindex c2e07386cca..09f66c79288 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/567/TimeBatchWindowHandler.java\n@@ -136,4 +136,4 @@ public class TimeBatchWindowHandler extends WindowHandler implements Runnable {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/567/TimeBatchWindowHandler.java\nindex c2e07386cca..1850c7b4b6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/567/TimeBatchWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/567/TimeBatchWindowHandler.java\n@@ -128,7 +128,8 @@ public class TimeBatchWindowHandler extends WindowHandler implements Runnable {\n     private void sendRemoveEvents(List<Event> eventList) {\n         int size = eventList.size();\n         if (size > 1) {\n-            getNextPreStreamFlowProcessor().process(new RemoveListEvent((eventList.toArray(new Event[size])), System.currentTimeMillis()));\n+            getNextPreStreamFlowProcessor().process(new RemoveListEvent((eventList.toArray(new Event[size])),System\n+        . currentTimeMillis()));\n         } else if (size == 1) {\n             Event aEvent = eventList.get(0);\n             getNextPreStreamFlowProcessor().process(new RemoveEvent(aEvent, System.currentTimeMillis()));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}