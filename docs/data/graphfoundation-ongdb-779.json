{
    "project_name": "graphfoundation-ongdb",
    "error_id": "779",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "12",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "12",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/779/StatusCode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/779/StatusCode.java\nindex 9102fffb3b3..5e0fb92159d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/779/StatusCode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/779/StatusCode.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.protocol.handshake;\n \n import java.util.Map;\n@@ -31,33 +32,33 @@ import java.util.stream.Stream;\n  */\n public enum StatusCode\n {\n-    SUCCESS( 0 ),\n-    ONGOING( 1 ),\n-    FAILURE( -1 );\n+  SUCCESS(0),\n+  ONGOING(1),\n+  FAILURE(-1);\n \n-    private final int codeValue;\n-    private static AtomicReference<Map<Integer, StatusCode>> codeMap = new AtomicReference<>();\n+  private final int codeValue;\n+  private static AtomicReference<Map<Integer, StatusCode>> codeMap = new AtomicReference<>();\n \n-    StatusCode( int codeValue )\n-    {\n-        this.codeValue = codeValue;\n-    }\n+  StatusCode(int codeValue)\n+  {\n+    this.codeValue = codeValue;\n+  }\n \n-    public int codeValue()\n-    {\n-        return codeValue;\n-    }\n+  public int codeValue()\n+  {\n+    return codeValue;\n+  }\n \n-    public static Optional<StatusCode> fromCodeValue( int codeValue )\n+  public static Optional<StatusCode> fromCodeValue(int codeValue)\n+  {\n+    Map<Integer, StatusCode> map = codeMap.get();\n+    if (map == null)\n     {\n-        Map<Integer,StatusCode> map = codeMap.get();\n-        if ( map == null )\n-        {\n-             map = Stream.of( StatusCode.values() )\n-                    .collect( Collectors.toMap( StatusCode::codeValue, Function.identity() ) );\n-\n-            codeMap.compareAndSet( null, map );\n-        }\n-        return Optional.ofNullable( map.get( codeValue ) );\n+      map = Stream.of(StatusCode.values())\n+          .collect(Collectors.toMap(StatusCode::codeValue, Function.identity()));\n+\n+      codeMap.compareAndSet(null, map);\n     }\n+    return Optional.ofNullable(map.get(codeValue));\n+  }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/779/StatusCode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/779/StatusCode.java\nindex 9102fffb3b3..f8ec204e81e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/779/StatusCode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/779/StatusCode.java\n@@ -31,9 +31,7 @@ import java.util.stream.Stream;\n  */\n public enum StatusCode\n {\n-    SUCCESS( 0 ),\n-    ONGOING( 1 ),\n-    FAILURE( -1 );\n+    SUCCESS( 0 ), ONGOING( 1 ), FAILURE( -1 );\n \n     private final int codeValue;\n     private static AtomicReference<Map<Integer, StatusCode>> codeMap = new AtomicReference<>();\n@@ -53,11 +51,10 @@ public enum StatusCode\n         Map<Integer,StatusCode> map = codeMap.get();\n         if ( map == null )\n         {\n-             map = Stream.of( StatusCode.values() )\n-                    .collect( Collectors.toMap( StatusCode::codeValue, Function.identity() ) );\n-\n-            codeMap.compareAndSet( null, map );\n+    map = Stream.of( StatusCode.values() ).collect( Collectors.toMap( StatusCode::codeValue, Function.identity() ) );\n+codeMap.compareAndSet( null, map );\n         }\n-        return Optional.ofNullable( map.get( codeValue ) );\n+\n+return Optional.ofNullable( map.get( codeValue ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}