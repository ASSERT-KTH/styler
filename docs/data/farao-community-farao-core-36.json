{
    "project_name": "farao-community-farao-core",
    "error_id": "36",
    "information": {
        "errors": [
            {
                "line": "17",
                "column": "1",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n/**\n * A computation engine dedicated to the systematic sensitivity analyses performed\n * in the scope of the LinearRao.\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/36/SystematicAnalysisEngine.java\nindex 60fec5c717e..8d0c7249925 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/36/SystematicAnalysisEngine.java\n@@ -13,7 +13,6 @@ import com.powsybl.sensitivity.SensitivityComputationParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n /**\n  * A computation engine dedicated to the systematic sensitivity analyses performed\n  * in the scope of the LinearRao.\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/36/SystematicAnalysisEngine.java\nindex 60fec5c717e..750b0a01b21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/36/SystematicAnalysisEngine.java\n@@ -59,7 +59,7 @@ class SystematicAnalysisEngine {\n     /**\n      * Run the systematic sensitivity analysis on one Situation, and evaluate the value of the\n      * objective function on this Situation.\n-     *\n+     * <p>\n      * Throw a SensitivityComputationException if the computation fails.\n      */\n     void run(LinearRaoData linearRaoData) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "column": "5",
                    "severity": "error",
                    "message": "'try' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "column": "1",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "column": "5",
                    "severity": "error",
                    "message": "'try rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "column": "5",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/36/SystematicAnalysisEngine.java\nindex 60fec5c717e..307b98a72ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/36/SystematicAnalysisEngine.java\n@@ -13,7 +13,6 @@ import com.powsybl.sensitivity.SensitivityComputationParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n /**\n  * A computation engine dedicated to the systematic sensitivity analyses performed\n  * in the scope of the LinearRao.\n@@ -63,8 +62,7 @@ class SystematicAnalysisEngine {\n      * Throw a SensitivityComputationException if the computation fails.\n      */\n     void run(LinearRaoData linearRaoData) {\n-\n-        SensitivityComputationParameters sensiConfig = fallbackMode ? linearRaoParameters.getFallbackSensiParameters() : linearRaoParameters.getSensitivityComputationParameters();\n+    SensitivityComputationParameters sensiConfig = fallbackMode ? linearRaoParameters.getFallbackSensiParameters() : linearRaoParameters.getSensitivityComputationParameters();\n \n         try {\n             runWithConfig(linearRaoData, sensiConfig);\n@@ -86,18 +84,14 @@ class SystematicAnalysisEngine {\n      * SensitivityComputationException is the computation fails.\n      */\n     private void runWithConfig(LinearRaoData linearRaoData, SensitivityComputationParameters sensitivityComputationParameters) {\n-\n-        try {\n-            SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult = SystematicSensitivityAnalysisService\n-                .runAnalysis(linearRaoData.getNetwork(), linearRaoData.getCrac(), computationManager, sensitivityComputationParameters);\n-\n-            if (systematicSensitivityAnalysisResult.anyStateDiverged()) {\n+    try {\n+            SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult = SystematicSensitivityAnalysisService.runAnalysis(linearRaoData.getNetwork(), linearRaoData.getCrac(), computationManager, sensitivityComputationParameters);\n+if (systematicSensitivityAnalysisResult.anyStateDiverged()) {\n                 throw new SensitivityComputationException(\"Some output data of the sensitivity computation are missing.\");\n             }\n \n             setResults(linearRaoData, systematicSensitivityAnalysisResult);\n-\n-        } catch (Exception e) {\n+    } catch (Exception e) {\n             throw new SensitivityComputationException(\"Sensitivity computation fails.\", e);\n         }\n     }\n@@ -116,8 +110,7 @@ class SystematicAnalysisEngine {\n      * Compute the objective function, the minimal margin.\n      */\n     private double getMinMargin(LinearRaoData linearRaoData, SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult) {\n-\n-        double minMargin = Double.POSITIVE_INFINITY;\n+    double minMargin = Double.POSITIVE_INFINITY;\n         for (Cnec cnec : linearRaoData.getCrac().getCnecs()) {\n             double flow = systematicSensitivityAnalysisResult.getFlow(cnec).orElse(Double.NaN);\n             double margin = cnec.computeMargin(flow, Unit.MEGAWATT);\n@@ -137,4 +130,4 @@ class SystematicAnalysisEngine {\n             cnecResult.setThresholds(cnec);\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "79",
                    "column": "24",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "column": "20",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "column": "24",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "column": "20",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/36/SystematicAnalysisEngine.java\nindex 60fec5c717e..a16e556190c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/36/SystematicAnalysisEngine.java\n@@ -22,8 +22,9 @@ import org.slf4j.LoggerFactory;\n  * @author Philippe Edwards {@literal <philippe.edwards at rte-france.com>}\n  * @author Baptiste Seguinot {@literal <baptiste.seguinot at rte-france.com>}\n  */\n-class SystematicAnalysisEngine {\n \n+\n+class SystematicAnalysisEngine {\n     private static final Logger LOGGER = LoggerFactory.getLogger(SystematicAnalysisEngine.class);\n \n     /**\n@@ -46,6 +47,7 @@ class SystematicAnalysisEngine {\n     /**\n      * Constructor\n      */\n+\n     SystematicAnalysisEngine(LinearRaoParameters linearRaoParameters, ComputationManager computationManager) {\n         this.linearRaoParameters = linearRaoParameters;\n         this.computationManager = computationManager;\n@@ -62,22 +64,28 @@ class SystematicAnalysisEngine {\n      *\n      * Throw a SensitivityComputationException if the computation fails.\n      */\n-    void run(LinearRaoData linearRaoData) {\n \n+    void run(LinearRaoData linearRaoData) {\n         SensitivityComputationParameters sensiConfig = fallbackMode ? linearRaoParameters.getFallbackSensiParameters() : linearRaoParameters.getSensitivityComputationParameters();\n-\n         try {\n             runWithConfig(linearRaoData, sensiConfig);\n         } catch (SensitivityComputationException e) {\n-            if (!fallbackMode && linearRaoParameters.getFallbackSensiParameters() != null) { // default mode fails, retry in fallback mode\n+            if (!fallbackMode &&\n+                linearRaoParameters.getFallbackSensiParameters() != null) { // default mode fails, retry in fallback mode\n                 LOGGER.warn(\"Error while running the sensitivity computation with default parameters, fallback sensitivity parameters are now used.\");\n                 fallbackMode = true;\n                 run(linearRaoData);\n             } else if (!fallbackMode) { // no fallback mode available, throw an exception\n-                throw new SensitivityComputationException(\"Sensitivity computation failed with default parameters. No fallback parameters available.\", e);\n-            } else { // fallback mode fails, throw an exception\n-                throw new SensitivityComputationException(\"Sensitivity computation failed with all available sensitivity parameters.\", e);\n-            }\n+                       throw new SensitivityComputationException(\n+                           \"Sensitivity computation failed with default parameters. No fallback parameters available.\",\n+                           e\n+                       );\n+                   } else { // fallback mode fails, throw an exception\n+                       throw new SensitivityComputationException(\n+                           \"Sensitivity computation failed with all available sensitivity parameters.\",\n+                           e\n+                       );\n+                   }\n         }\n     }\n \n@@ -85,18 +93,16 @@ class SystematicAnalysisEngine {\n      * Run the systematic sensitivity analysis with given SensitivityComputationParameters, throw a\n      * SensitivityComputationException is the computation fails.\n      */\n-    private void runWithConfig(LinearRaoData linearRaoData, SensitivityComputationParameters sensitivityComputationParameters) {\n \n+    private void runWithConfig(LinearRaoData linearRaoData, SensitivityComputationParameters sensitivityComputationParameters) {\n         try {\n-            SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult = SystematicSensitivityAnalysisService\n-                .runAnalysis(linearRaoData.getNetwork(), linearRaoData.getCrac(), computationManager, sensitivityComputationParameters);\n+            SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult = SystematicSensitivityAnalysisService.runAnalysis(linearRaoData.getNetwork(), linearRaoData.getCrac(), computationManager, sensitivityComputationParameters);\n \n             if (systematicSensitivityAnalysisResult.anyStateDiverged()) {\n                 throw new SensitivityComputationException(\"Some output data of the sensitivity computation are missing.\");\n             }\n \n             setResults(linearRaoData, systematicSensitivityAnalysisResult);\n-\n         } catch (Exception e) {\n             throw new SensitivityComputationException(\"Sensitivity computation fails.\", e);\n         }\n@@ -106,6 +112,7 @@ class SystematicAnalysisEngine {\n      * add results of the systematic analysis (flows and objective function value) in the\n      * Crac result variant of the situation.\n      */\n+\n     private void setResults(LinearRaoData linearRaoData, SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult) {\n         linearRaoData.setSystematicSensitivityAnalysisResult(systematicSensitivityAnalysisResult);\n         linearRaoData.getCracResult().setCost(-getMinMargin(linearRaoData, systematicSensitivityAnalysisResult));\n@@ -115,15 +122,19 @@ class SystematicAnalysisEngine {\n     /**\n      * Compute the objective function, the minimal margin.\n      */\n-    private double getMinMargin(LinearRaoData linearRaoData, SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult) {\n \n+    private double getMinMargin(LinearRaoData linearRaoData, SystematicSensitivityAnalysisResult systematicSensitivityAnalysisResult) {\n         double minMargin = Double.POSITIVE_INFINITY;\n         for (Cnec cnec : linearRaoData.getCrac().getCnecs()) {\n             double flow = systematicSensitivityAnalysisResult.getFlow(cnec).orElse(Double.NaN);\n             double margin = cnec.computeMargin(flow, Unit.MEGAWATT);\n+\n             if (Double.isNaN(margin)) {\n-                throw new SensitivityComputationException(String.format(\"Cnec %s is not present in the sensitivity analysis results. Bad behaviour.\", cnec.getId()));\n+                throw new SensitivityComputationException(String.format(\"Cnec %s is not present in the sensitivity analysis results. Bad behaviour.\",\n+cnec.getId()\n+                                                          ));\n             }\n+\n             minMargin = Math.min(minMargin, margin);\n         }\n         return minMargin;\n@@ -137,4 +148,4 @@ class SystematicAnalysisEngine {\n             cnecResult.setThresholds(cnec);\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/36/SystematicAnalysisEngine.java\nindex 60fec5c717e..8d0c7249925 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/36/SystematicAnalysisEngine.java\n@@ -13,7 +13,6 @@ import com.powsybl.sensitivity.SensitivityComputationParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n /**\n  * A computation engine dedicated to the systematic sensitivity analyses performed\n  * in the scope of the LinearRao.\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/36/SystematicAnalysisEngine.java\nindex 60fec5c717e..8d0c7249925 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/36/SystematicAnalysisEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/36/SystematicAnalysisEngine.java\n@@ -13,7 +13,6 @@ import com.powsybl.sensitivity.SensitivityComputationParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n /**\n  * A computation engine dedicated to the systematic sensitivity analyses performed\n  * in the scope of the LinearRao.\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}