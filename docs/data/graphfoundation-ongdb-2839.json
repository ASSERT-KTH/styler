{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2839",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2839/Jsh.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2839/Jsh.java\nindex 0c1b0047b42..fc3f3bd419d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2839/Jsh.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2839/Jsh.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.apps.extra;\n \n import org.neo4j.shell.AppCommandParser;\n@@ -30,26 +31,26 @@ import org.neo4j.shell.impl.AbstractApp;\n  */\n public class Jsh extends AbstractApp\n {\n-    @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-        Output out ) throws Exception\n-    {\n-        String line = parser.getLineWithoutApp();\n-        new JshExecutor().execute( line, session, out );\n-        return Continuation.INPUT_COMPLETE;\n-    }\n+  @Override\n+  public Continuation execute(AppCommandParser parser, Session session,\n+                              Output out) throws Exception\n+  {\n+    String line = parser.getLineWithoutApp();\n+    new JshExecutor().execute(line, session, out);\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-    @Override\n-    public String getDescription()\n-    {\n-        JshExecutor anExecutor = new JshExecutor();\n-        return\n-            \"Runs python (jython) scripts. Usage: jsh <python script line>\\n\" +\n+  @Override\n+  public String getDescription()\n+  {\n+    JshExecutor anExecutor = new JshExecutor();\n+    return\n+        \"Runs python (jython) scripts. Usage: jsh <python script line>\\n\" +\n             \"Example: jsh --doSomething arg1 \\\"arg 2\\\" \" +\n             \"--doSomethingElse arg1\\n\\n\" +\n             \"Python scripts doSomething.py and doSomethingElse.py \" +\n             \"must exist\\n\" +\n             \"in one of environment variable \" + anExecutor.getPathKey() +\n             \" paths (default is \" + anExecutor.getDefaultPaths() + \")\";\n-    }\n+  }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 357).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2839/Jsh.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2839/Jsh.java\nindex 0c1b0047b42..0c1a3c6ee56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2839/Jsh.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2839/Jsh.java\n@@ -31,9 +31,8 @@ import org.neo4j.shell.impl.AbstractApp;\n public class Jsh extends AbstractApp\n {\n     @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-        Output out ) throws Exception\n-    {\n+    public Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception\n+{\n         String line = parser.getLineWithoutApp();\n         new JshExecutor().execute( line, session, out );\n         return Continuation.INPUT_COMPLETE;\n@@ -43,13 +42,6 @@ public class Jsh extends AbstractApp\n     public String getDescription()\n     {\n         JshExecutor anExecutor = new JshExecutor();\n-        return\n-            \"Runs python (jython) scripts. Usage: jsh <python script line>\\n\" +\n-            \"Example: jsh --doSomething arg1 \\\"arg 2\\\" \" +\n-            \"--doSomethingElse arg1\\n\\n\" +\n-            \"Python scripts doSomething.py and doSomethingElse.py \" +\n-            \"must exist\\n\" +\n-            \"in one of environment variable \" + anExecutor.getPathKey() +\n-            \" paths (default is \" + anExecutor.getDefaultPaths() + \")\";\n+        return \"Runs python (jython) scripts. Usage: jsh <python script line>\\n\" + \"Example: jsh --doSomething arg1 \\\"arg 2\\\" \" + \"--doSomethingElse arg1\\n\\n\" + \"Python scripts doSomething.py and doSomethingElse.py \" + \"must exist\\n\" + \"in one of environment variable \" + anExecutor.getPathKey() + \" paths (default is \" + anExecutor.getDefaultPaths() + \")\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}