{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "281",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class SmMachineImpl implements SmContentFiniteStateMachine\n{\n\tprivate ElementDefinition m_element;\n\tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n\tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n\tprivate SchemaWildcard m_wildcard;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/281/SmMachineImpl.java\nindex 5ce742e0f6d..bf9f062d19a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/281/SmMachineImpl.java\n@@ -29,7 +29,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class SmMachineImpl implements SmContentFiniteStateMachine\n {\n-\tprivate ElementDefinition m_element;\n+private ElementDefinition m_element;\n \tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n \tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n \tprivate SchemaWildcard m_wildcard;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/281/SmMachineImpl.java\nindex 5ce742e0f6d..5006fab90e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/281/SmMachineImpl.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.LinkedList;\n@@ -26,97 +27,75 @@ import org.genxdm.xs.components.ParticleTerm;\n import org.genxdm.xs.components.SchemaWildcard;\n \n \n+final class SmMachineImpl implements SmContentFiniteStateMachine {\n+    private ElementDefinition m_element;\n+\n+    private final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n+\n+    private final RegExMachine<ValidationExpr, QName> m_regexm;\n+\n+    private SchemaWildcard m_wildcard;\n+\n+    public SmMachineImpl(final RegExMachine<ValidationExpr, QName> regexm) {\n+        m_regexm = PreCondition.assertArgumentNotNull(regexm, \"regexm\");\n+    }\n+\n+    public boolean end() {\n+        return m_regexm.step(null, null);\n+    }\n+\n+    public ElementDefinition getElement() {\n+        return m_element;\n+    }\n+\n+    private ParticleTerm getParticleTerm() {\n+        final int size = m_matchers.size();\n+        if (size > 0) {\n+            final ValidationExpr expr = m_matchers.get(0);\n+            return expr.getParticleTerm();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public SchemaWildcard getWildcard() {\n+        return m_wildcard;\n+    }\n+\n+    public boolean isElementMatch() {\n+        return (null != m_element);\n+    }\n+\n+    public boolean isWildcardMatch() {\n+        return (null != m_wildcard);\n+    }\n+\n+    public boolean step(final QName name) {\n+        m_matchers.clear();\n+        final boolean stepped = m_regexm.step(name, m_matchers);\n+        if (stepped) {\n+            final ParticleTerm term = getParticleTerm();\n+            if (term instanceof ElementDefinition) {\n+                m_element = (ElementDefinition) term;\n+                m_wildcard = null;\n+            } else if (term instanceof SchemaWildcard) {\n+                m_element = null;\n+                m_wildcard = (SchemaWildcard) term;\n+            } else {\n+                throw new AssertionError(term);\n+            }\n+        }\n+        return stepped;\n+    }\n \n-final class SmMachineImpl implements SmContentFiniteStateMachine\n-{\n-\tprivate ElementDefinition m_element;\n-\tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n-\tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n-\tprivate SchemaWildcard m_wildcard;\n-\n-\tpublic SmMachineImpl(final RegExMachine<ValidationExpr, QName> regexm)\n-\t{\n-\t\tm_regexm = PreCondition.assertArgumentNotNull(regexm, \"regexm\");\n-\t}\n-\n-\tpublic boolean end()\n-\t{\n-\t\treturn m_regexm.step(null, null);\n-\t}\n-\n-\tpublic ElementDefinition getElement()\n-\t{\n-\t\treturn m_element;\n-\t}\n-\n-\tprivate ParticleTerm getParticleTerm()\n-\t{\n-\t\tfinal int size = m_matchers.size();\n-\t\tif (size > 0)\n-\t\t{\n-\t\t\tfinal ValidationExpr expr = m_matchers.get(0);\n-\t\t\treturn expr.getParticleTerm();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tpublic SchemaWildcard getWildcard()\n-\t{\n-\t\treturn m_wildcard;\n-\t}\n-\n-\tpublic boolean isElementMatch()\n-\t{\n-\t\treturn (null != m_element);\n-\t}\n-\n-\tpublic boolean isWildcardMatch()\n-\t{\n-\t\treturn (null != m_wildcard);\n-\t}\n-\n-\tpublic boolean step(final QName name)\n-\t{\n-\t\tm_matchers.clear();\n-\t\tfinal boolean stepped = m_regexm.step(name, m_matchers);\n-\t\tif (stepped)\n-\t\t{\n-\t\t\tfinal ParticleTerm term = getParticleTerm();\n-\t\t\tif (term instanceof ElementDefinition)\n-\t\t\t{\n-\t\t\t\tm_element = (ElementDefinition)term;\n-\t\t\t\tm_wildcard = null;\n-\t\t\t}\n-\t\t\telse if (term instanceof SchemaWildcard)\n-\t\t\t{\n-\t\t\t\tm_element = null;\n-\t\t\t\tm_wildcard = (SchemaWildcard)term;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tthrow new AssertionError(term);\n-\t\t\t}\n-\t\t}\n-\t\treturn stepped;\n-\t}\n-\n-\t@Override\n-\tpublic final String toString()\n-\t{\n-\t\tif (isElementMatch())\n-\t\t{\n-\t\t\treturn m_element.getName().toString();\n-\t\t}\n-\t\telse if (isWildcardMatch())\n-\t\t{\n-\t\t\treturn m_wildcard.getProcessContents().name();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn \"\";\n-\t\t}\n-\t}\n+    @Override\n+    public final String toString() {\n+        if (isElementMatch()) {\n+            return m_element.getName().toString();\n+        } else if (isWildcardMatch()) {\n+            return m_wildcard.getProcessContents().name();\n+        } else {\n+            return \"\";\n+        }\n+    }\n }\n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/281/SmMachineImpl.java\nindex 5ce742e0f6d..a4b8a3e3d03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/281/SmMachineImpl.java\n@@ -29,94 +29,94 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class SmMachineImpl implements SmContentFiniteStateMachine\n {\n-\tprivate ElementDefinition m_element;\n+    private ElementDefinition m_element;\n \tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n \tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n \tprivate SchemaWildcard m_wildcard;\n \n \tpublic SmMachineImpl(final RegExMachine<ValidationExpr, QName> regexm)\n \t{\n-\t\tm_regexm = PreCondition.assertArgumentNotNull(regexm, \"regexm\");\n-\t}\n+    m_regexm = PreCondition.assertArgumentNotNull(regexm, \"regexm\");\n+    }\n \n \tpublic boolean end()\n \t{\n-\t\treturn m_regexm.step(null, null);\n-\t}\n+    return m_regexm.step(null, null);\n+    }\n \n \tpublic ElementDefinition getElement()\n \t{\n-\t\treturn m_element;\n-\t}\n+    return m_element;\n+    }\n \n \tprivate ParticleTerm getParticleTerm()\n \t{\n-\t\tfinal int size = m_matchers.size();\n+    final int size = m_matchers.size();\n \t\tif (size > 0)\n \t\t{\n-\t\t\tfinal ValidationExpr expr = m_matchers.get(0);\n+    final ValidationExpr expr = m_matchers.get(0);\n \t\t\treturn expr.getParticleTerm();\n-\t\t}\n+    }\n \t\telse\n \t\t{\n-\t\t\treturn null;\n-\t\t}\n-\t}\n+    return null;\n+    }\n+    }\n \n \tpublic SchemaWildcard getWildcard()\n \t{\n-\t\treturn m_wildcard;\n-\t}\n+    return m_wildcard;\n+    }\n \n \tpublic boolean isElementMatch()\n \t{\n-\t\treturn (null != m_element);\n-\t}\n+    return (null != m_element);\n+    }\n \n \tpublic boolean isWildcardMatch()\n \t{\n-\t\treturn (null != m_wildcard);\n-\t}\n+    return (null != m_wildcard);\n+    }\n \n \tpublic boolean step(final QName name)\n \t{\n-\t\tm_matchers.clear();\n+    m_matchers.clear();\n \t\tfinal boolean stepped = m_regexm.step(name, m_matchers);\n \t\tif (stepped)\n \t\t{\n-\t\t\tfinal ParticleTerm term = getParticleTerm();\n+    final ParticleTerm term = getParticleTerm();\n \t\t\tif (term instanceof ElementDefinition)\n \t\t\t{\n-\t\t\t\tm_element = (ElementDefinition)term;\n+    m_element = (ElementDefinition)term;\n \t\t\t\tm_wildcard = null;\n-\t\t\t}\n+    }\n \t\t\telse if (term instanceof SchemaWildcard)\n \t\t\t{\n-\t\t\t\tm_element = null;\n+    m_element = null;\n \t\t\t\tm_wildcard = (SchemaWildcard)term;\n-\t\t\t}\n+    }\n \t\t\telse\n \t\t\t{\n-\t\t\t\tthrow new AssertionError(term);\n-\t\t\t}\n-\t\t}\n+    throw new AssertionError(term);\n+    }\n+    }\n \t\treturn stepped;\n-\t}\n+    }\n \n \t@Override\n \tpublic final String toString()\n \t{\n-\t\tif (isElementMatch())\n+    if (isElementMatch())\n \t\t{\n-\t\t\treturn m_element.getName().toString();\n-\t\t}\n+    return m_element.getName().toString();\n+    }\n \t\telse if (isWildcardMatch())\n \t\t{\n-\t\t\treturn m_wildcard.getProcessContents().name();\n-\t\t}\n+    return m_wildcard.getProcessContents().name();\n+    }\n \t\telse\n \t\t{\n-\t\t\treturn \"\";\n-\t\t}\n-\t}\n-}\n+    return \"\";\n+    }\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/281/SmMachineImpl.java\nindex 5ce742e0f6d..f8060479680 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/281/SmMachineImpl.java\n@@ -16,107 +16,104 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.LinkedList;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.processor.w3c.xs.regex.api.RegExMachine;\n import org.genxdm.xs.components.ElementDefinition;\n import org.genxdm.xs.components.ParticleTerm;\n import org.genxdm.xs.components.SchemaWildcard;\n \n-\n-\n final class SmMachineImpl implements SmContentFiniteStateMachine\n {\n-\tprivate ElementDefinition m_element;\n-\tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n-\tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n-\tprivate SchemaWildcard m_wildcard;\n+    private ElementDefinition m_element;\n+    private final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n+    private final RegExMachine<ValidationExpr, QName> m_regexm;\n+    private SchemaWildcard m_wildcard;\n+\n+    public SmMachineImpl(final RegExMachine<ValidationExpr, QName> regexm)\n+    {\n+        m_regexm = PreCondition.assertArgumentNotNull(regexm, \"regexm\");\n+    }\n \n-\tpublic SmMachineImpl(final RegExMachine<ValidationExpr, QName> regexm)\n-\t{\n-\t\tm_regexm = PreCondition.assertArgumentNotNull(regexm, \"regexm\");\n-\t}\n+    public boolean end()\n+    {\n+        return m_regexm.step(null, null);\n+    }\n \n-\tpublic boolean end()\n-\t{\n-\t\treturn m_regexm.step(null, null);\n-\t}\n+    public ElementDefinition getElement()\n+    {\n+        return m_element;\n+    }\n \n-\tpublic ElementDefinition getElement()\n-\t{\n-\t\treturn m_element;\n-\t}\n+    private ParticleTerm getParticleTerm()\n+    {\n+        final int size = m_matchers.size();\n+        if (size > 0)\n+        {\n+            final ValidationExpr expr = m_matchers.get(0);\n+            return expr.getParticleTerm();\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n \n-\tprivate ParticleTerm getParticleTerm()\n-\t{\n-\t\tfinal int size = m_matchers.size();\n-\t\tif (size > 0)\n-\t\t{\n-\t\t\tfinal ValidationExpr expr = m_matchers.get(0);\n-\t\t\treturn expr.getParticleTerm();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\t}\n+    public SchemaWildcard getWildcard()\n+    {\n+        return m_wildcard;\n+    }\n \n-\tpublic SchemaWildcard getWildcard()\n-\t{\n-\t\treturn m_wildcard;\n-\t}\n+    public boolean isElementMatch()\n+    {\n+        return (null != m_element);\n+    }\n \n-\tpublic boolean isElementMatch()\n-\t{\n-\t\treturn (null != m_element);\n-\t}\n+    public boolean isWildcardMatch()\n+    {\n+        return (null != m_wildcard);\n+    }\n \n-\tpublic boolean isWildcardMatch()\n-\t{\n-\t\treturn (null != m_wildcard);\n-\t}\n+    public boolean step(final QName name)\n+    {\n+        m_matchers.clear();\n \n-\tpublic boolean step(final QName name)\n-\t{\n-\t\tm_matchers.clear();\n-\t\tfinal boolean stepped = m_regexm.step(name, m_matchers);\n-\t\tif (stepped)\n-\t\t{\n-\t\t\tfinal ParticleTerm term = getParticleTerm();\n-\t\t\tif (term instanceof ElementDefinition)\n-\t\t\t{\n-\t\t\t\tm_element = (ElementDefinition)term;\n-\t\t\t\tm_wildcard = null;\n-\t\t\t}\n-\t\t\telse if (term instanceof SchemaWildcard)\n-\t\t\t{\n-\t\t\t\tm_element = null;\n-\t\t\t\tm_wildcard = (SchemaWildcard)term;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tthrow new AssertionError(term);\n-\t\t\t}\n-\t\t}\n-\t\treturn stepped;\n-\t}\n+        final boolean stepped = m_regexm.step(name, m_matchers);\n+        if (stepped)\n+        {\n+            final ParticleTerm term = getParticleTerm();\n+            if (term instanceof ElementDefinition)\n+            {\n+                m_element = (ElementDefinition)term;\n+                m_wildcard = null;\n+            }\n+            else if (term instanceof SchemaWildcard)\n+            {\n+                m_element = null;\n+                m_wildcard = (SchemaWildcard)term;\n+            }\n+            else\n+            {\n+                throw new AssertionError(term);\n+            }\n+        }\n+        return stepped;\n+    }\n \n-\t@Override\n-\tpublic final String toString()\n-\t{\n-\t\tif (isElementMatch())\n-\t\t{\n-\t\t\treturn m_element.getName().toString();\n-\t\t}\n-\t\telse if (isWildcardMatch())\n-\t\t{\n-\t\t\treturn m_wildcard.getProcessContents().name();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn \"\";\n-\t\t}\n-\t}\n-}\n+    @Override\n+    public final String toString()\n+    {\n+        if (isElementMatch())\n+        {\n+            return m_element.getName().toString();\n+        }\n+        else if (isWildcardMatch())\n+        {\n+            return m_wildcard.getProcessContents().name();\n+        }\n+        else\n+        {\n+            return \"\";\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 100
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/281/SmMachineImpl.java\nindex 5ce742e0f6d..bf9f062d19a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/281/SmMachineImpl.java\n@@ -29,7 +29,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class SmMachineImpl implements SmContentFiniteStateMachine\n {\n-\tprivate ElementDefinition m_element;\n+private ElementDefinition m_element;\n \tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n \tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n \tprivate SchemaWildcard m_wildcard;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/281/SmMachineImpl.java\nindex 5ce742e0f6d..d9335df2426 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/281/SmMachineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/281/SmMachineImpl.java\n@@ -29,7 +29,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class SmMachineImpl implements SmContentFiniteStateMachine\n {\n-\tprivate ElementDefinition m_element;\n+    private ElementDefinition m_element;\n \tprivate final LinkedList<ValidationExpr> m_matchers = new LinkedList<ValidationExpr>();\n \tprivate final RegExMachine<ValidationExpr, QName> m_regexm;\n \tprivate SchemaWildcard m_wildcard;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}