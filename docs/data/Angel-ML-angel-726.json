{
    "project_name": "Angel-ML-angel",
    "error_id": "726",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/726/IntArrayElementStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/726/IntArrayElementStorage.java\nindex eaed829d1d1..ce4f6ac67c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/726/IntArrayElementStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/726/IntArrayElementStorage.java\n@@ -37,7 +37,7 @@ public class IntArrayElementStorage extends IntElementStorage {\n   }\n \n   public IntArrayElementStorage(Class<? extends IElement> objectClass, IElement[] data,\n-      long indexOffset) {\n+                                long indexOffset) {\n     super(objectClass, indexOffset);\n     this.data = data;\n   }\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/726/IntArrayElementStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/726/IntArrayElementStorage.java\nindex eaed829d1d1..6eab8d3507f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/726/IntArrayElementStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/726/IntArrayElementStorage.java\n@@ -37,7 +37,7 @@ public class IntArrayElementStorage extends IntElementStorage {\n   }\n \n   public IntArrayElementStorage(Class<? extends IElement> objectClass, IElement[] data,\n-      long indexOffset) {\n+long indexOffset) {\n     super(objectClass, indexOffset);\n     this.data = data;\n   }\n@@ -169,8 +169,7 @@ public class IntArrayElementStorage extends IntElementStorage {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int bufferLen() {\n     int dataLen = 0;\n     for (int i = 0; i < data.length; i++) {\n@@ -226,4 +225,4 @@ public class IntArrayElementStorage extends IntElementStorage {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/726/IntArrayElementStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/726/IntArrayElementStorage.java\nindex eaed829d1d1..8d064d3ae07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/726/IntArrayElementStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/726/IntArrayElementStorage.java\n@@ -26,18 +26,19 @@ import java.io.IOException;\n /**\n  * Complex object storage which use a array as storage structure\n  */\n+\n public class IntArrayElementStorage extends IntElementStorage {\n   /**\n    * Complex object storage\n    */\n+\n   private IElement[] data;\n \n   public IntArrayElementStorage(Class<? extends IElement> objectClass, int len, long indexOffset) {\n     this(objectClass, new IElement[len], indexOffset);\n   }\n \n-  public IntArrayElementStorage(Class<? extends IElement> objectClass, IElement[] data,\n-      long indexOffset) {\n+  public IntArrayElementStorage(Class<? extends IElement> objectClass, IElement[] data, long indexOffset) {\n     super(objectClass, indexOffset);\n     this.data = data;\n   }\n@@ -137,10 +138,12 @@ public class IntArrayElementStorage extends IntElementStorage {\n     buf.writeInt(data.length);\n \n     // Valid element number\n+\n     int writeIndex = buf.writerIndex();\n     buf.writeInt(0);\n \n     // Element data\n+\n     int writeNum = 0;\n     for (int i = 0; i < data.length; i++) {\n       if (data[i] != null) {\n@@ -156,12 +159,13 @@ public class IntArrayElementStorage extends IntElementStorage {\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n     // Array len\n+\n     int len = buf.readInt();\n     data = new IElement[len];\n \n     // Valid element number\n-    int elementNum = buf.readInt();\n \n+    int elementNum = buf.readInt();\n     for (int i = 0; i < elementNum; i++) {\n       IElement element = newElement();\n       data[buf.readInt()] = element;\n@@ -169,7 +173,6 @@ public class IntArrayElementStorage extends IntElementStorage {\n     }\n   }\n \n-\n   @Override\n   public int bufferLen() {\n     int dataLen = 0;\n@@ -188,6 +191,7 @@ public class IntArrayElementStorage extends IntElementStorage {\n \n     // Valid element number\n     // Element data\n+\n     int writeNum = 0;\n     for (int i = 0; i < data.length; i++) {\n       if (data[i] != null) {\n@@ -209,12 +213,13 @@ public class IntArrayElementStorage extends IntElementStorage {\n   public void deserialize(DataInputStream input) throws IOException {\n     super.deserialize(input);\n     // Array len\n+\n     int len = input.readInt();\n     data = new IElement[len];\n \n     // Valid element number\n-    int elementNum = input.readInt();\n \n+    int elementNum = input.readInt();\n     for (int i = 0; i < elementNum; i++) {\n       IElement element = newElement();\n       data[input.readInt()] = element;\n@@ -226,4 +231,5 @@ public class IntArrayElementStorage extends IntElementStorage {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}