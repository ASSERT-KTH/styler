{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3042",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "177",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "231",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "285",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "339",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "422",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "449",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "499",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "538",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "545",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "564",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "575",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "593",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "595",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3042/RelationshipRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3042/RelationshipRecordCheck.java\nindex 2b09d6f2a5b..8a9811d9600 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3042/RelationshipRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3042/RelationshipRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.checking.cache.CacheAccess;\n@@ -44,598 +45,585 @@ import static org.neo4j.consistency.checking.cache.CacheSlots.RelationshipLink.T\n import static org.neo4j.helpers.ArrayUtil.union;\n \n public class RelationshipRecordCheck extends\n-        PrimitiveRecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>\n+    PrimitiveRecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>\n {\n-    public RelationshipRecordCheck()\n-    {\n-        this( RelationshipTypeField.RELATIONSHIP_TYPE, NodeField.SOURCE, RelationshipField.SOURCE_PREV,\n-                RelationshipField.SOURCE_NEXT, NodeField.TARGET, RelationshipField.TARGET_PREV,\n-                RelationshipField.TARGET_NEXT );\n-    }\n-\n-    @SafeVarargs\n-    RelationshipRecordCheck(\n-            RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>... fields )\n+  public RelationshipRecordCheck()\n+  {\n+    this(RelationshipTypeField.RELATIONSHIP_TYPE, NodeField.SOURCE, RelationshipField.SOURCE_PREV,\n+        RelationshipField.SOURCE_NEXT, NodeField.TARGET, RelationshipField.TARGET_PREV,\n+        RelationshipField.TARGET_NEXT);\n+  }\n+\n+  @SafeVarargs\n+  RelationshipRecordCheck(\n+      RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>... fields)\n+  {\n+    super(fields);\n+  }\n+\n+  public static RelationshipRecordCheck relationshipRecordCheckForwardPass()\n+  {\n+    return new RelationshipRecordCheck(RelationshipTypeField.RELATIONSHIP_TYPE);\n+  }\n+\n+  @SafeVarargs\n+  public static RelationshipRecordCheck relationshipRecordCheckBackwardPass(\n+      RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>... additional)\n+  {\n+    return new RelationshipRecordCheck(union(\n+        ArrayUtil.<RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>>array(\n+            NodeField.SOURCE, NodeField.TARGET), additional));\n+  }\n+\n+  public static RelationshipRecordCheck relationshipRecordCheckSourceChain()\n+  {\n+    return new RelationshipRecordCheck(RelationshipField.SOURCE_NEXT,\n+        RelationshipField.SOURCE_PREV, RelationshipField.TARGET_NEXT, RelationshipField.TARGET_PREV,\n+        RelationshipField.CACHE_VALUES);\n+  }\n+\n+  enum RelationshipTypeField\n+      implements\n+      RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>,\n+      ComparativeRecordChecker<RelationshipRecord, RelationshipTypeTokenRecord, ConsistencyReport.RelationshipConsistencyReport>\n+  {\n+    RELATIONSHIP_TYPE;\n+\n+    @Override\n+    public void checkConsistency(RelationshipRecord record,\n+                                 CheckerEngine<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> engine,\n+                                 RecordAccess records)\n     {\n-        super( fields );\n+      if (record.getType() < 0)\n+      {\n+        engine.report().illegalRelationshipType();\n+      } else\n+      {\n+        engine.comparativeCheck(records.relationshipType(record.getType()), this);\n+      }\n     }\n \n-    public static RelationshipRecordCheck relationshipRecordCheckForwardPass()\n+    @Override\n+    public long valueFrom(RelationshipRecord record)\n     {\n-        return new RelationshipRecordCheck( RelationshipTypeField.RELATIONSHIP_TYPE );\n+      return record.getType();\n     }\n \n-    @SafeVarargs\n-    public static RelationshipRecordCheck relationshipRecordCheckBackwardPass(\n-            RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>... additional )\n+    @Override\n+    public void checkReference(RelationshipRecord record, RelationshipTypeTokenRecord referred,\n+                               CheckerEngine<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> engine,\n+                               RecordAccess records)\n     {\n-        return new RelationshipRecordCheck( union(\n-                ArrayUtil.<RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>>array(\n-                        NodeField.SOURCE, NodeField.TARGET ), additional ) );\n+      if (!referred.inUse())\n+      {\n+        engine.report().relationshipTypeNotInUse(referred);\n+      }\n     }\n+  }\n \n-    public static RelationshipRecordCheck relationshipRecordCheckSourceChain()\n-    {\n-        return new RelationshipRecordCheck( RelationshipField.SOURCE_NEXT,\n-                RelationshipField.SOURCE_PREV, RelationshipField.TARGET_NEXT, RelationshipField.TARGET_PREV,\n-                RelationshipField.CACHE_VALUES );\n-    }\n-\n-    enum RelationshipTypeField\n-            implements\n-            RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipRecord,RelationshipTypeTokenRecord,ConsistencyReport.RelationshipConsistencyReport>\n-    {\n-        RELATIONSHIP_TYPE;\n-        @Override\n-        public void checkConsistency( RelationshipRecord record,\n-                                      CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n-                                      RecordAccess records )\n-        {\n-            if ( record.getType() < 0 )\n-            {\n-                engine.report().illegalRelationshipType();\n-            }\n-            else\n-            {\n-                engine.comparativeCheck( records.relationshipType( record.getType() ), this );\n-            }\n-        }\n-\n-        @Override\n-        public long valueFrom( RelationshipRecord record )\n+  enum RelationshipField implements\n+      RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>,\n+      ComparativeRecordChecker<RelationshipRecord, RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>\n+  {\n+    SOURCE_PREV(NodeField.SOURCE)\n         {\n-            return record.getType();\n-        }\n-\n-        @Override\n-        public void checkReference( RelationshipRecord record, RelationshipTypeTokenRecord referred,\n-                                    CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n-                                    RecordAccess records )\n-        {\n-            if ( !referred.inUse() )\n-            {\n-                engine.report().relationshipTypeNotInUse( referred );\n-            }\n-        }\n-    }\n-\n-    enum RelationshipField implements\n-            RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipRecord, RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>\n-    {\n-        SOURCE_PREV( NodeField.SOURCE )\n-        {\n-            @Override\n-            public long valueFrom( RelationshipRecord relationship )\n-            {\n-                return relationship.getFirstPrevRel();\n-            }\n-\n-            @Override\n-            long other( NodeField field, RelationshipRecord relationship )\n-            {\n-                return field.next( relationship );\n-            }\n-\n-            @Override\n-            void otherNode( ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship )\n-            {\n-                report.sourcePrevReferencesOtherNodes( relationship );\n-            }\n-\n-            @Override\n-            void noBackReference( ConsistencyReport.RelationshipConsistencyReport report,\n-                    RelationshipRecord relationship )\n-            {\n-                report.sourcePrevDoesNotReferenceBack( relationship );\n-            }\n-\n-            @Override\n-            boolean endOfChain( RelationshipRecord record )\n-            {\n-                return NODE.isFirst( record );\n-            }\n-\n-            @Override\n-            RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n-                    CacheAccess.Client cacheAccess )\n-            {\n-                if ( cacheAccess.getFromCache( nodeId, SLOT_SOURCE_OR_TARGET ) == SOURCE )\n-                {\n-                    rel.setFirstNextRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                else\n-                {\n-                    rel.setSecondNextRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                rel.setInUse( cacheAccess.getBooleanFromCache( nodeId, SLOT_IN_USE ) );\n-                return rel;\n-            }\n-\n-            @Override\n-            void linkChecked( CacheAccess.Client cacheAccess )\n-            {\n-                cacheAccess.incAndGetCount( Counts.Type.relSourcePrevCheck );\n-            }\n+          @Override\n+          public long valueFrom(RelationshipRecord relationship)\n+          {\n+            return relationship.getFirstPrevRel();\n+          }\n+\n+          @Override\n+          long other(NodeField field, RelationshipRecord relationship)\n+          {\n+            return field.next(relationship);\n+          }\n+\n+          @Override\n+          void otherNode(ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship)\n+          {\n+            report.sourcePrevReferencesOtherNodes(relationship);\n+          }\n+\n+          @Override\n+          void noBackReference(ConsistencyReport.RelationshipConsistencyReport report,\n+                               RelationshipRecord relationship)\n+          {\n+            report.sourcePrevDoesNotReferenceBack(relationship);\n+          }\n+\n+          @Override\n+          boolean endOfChain(RelationshipRecord record)\n+          {\n+            return NODE.isFirst(record);\n+          }\n+\n+          @Override\n+          RelationshipRecord populateRelationshipFromCache(long nodeId, RelationshipRecord rel,\n+                                                           CacheAccess.Client cacheAccess)\n+          {\n+            if (cacheAccess.getFromCache(nodeId, SLOT_SOURCE_OR_TARGET) == SOURCE)\n+            {\n+              rel.setFirstNextRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            } else\n+            {\n+              rel.setSecondNextRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            }\n+            rel.setInUse(cacheAccess.getBooleanFromCache(nodeId, SLOT_IN_USE));\n+            return rel;\n+          }\n+\n+          @Override\n+          void linkChecked(CacheAccess.Client cacheAccess)\n+          {\n+            cacheAccess.incAndGetCount(Counts.Type.relSourcePrevCheck);\n+          }\n         },\n-        SOURCE_NEXT( NodeField.SOURCE )\n+    SOURCE_NEXT(NodeField.SOURCE)\n         {\n-            @Override\n-            public long valueFrom( RelationshipRecord relationship )\n-            {\n-                return relationship.getFirstNextRel();\n-            }\n-\n-            @Override\n-            long other( NodeField field, RelationshipRecord relationship )\n-            {\n-                return field.prev( relationship );\n-            }\n-\n-            @Override\n-            void otherNode( ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship )\n-            {\n-                report.sourceNextReferencesOtherNodes( relationship );\n-            }\n-\n-            @Override\n-            void noBackReference( ConsistencyReport.RelationshipConsistencyReport report,\n-                    RelationshipRecord relationship )\n-            {\n-                report.sourceNextDoesNotReferenceBack( relationship );\n-            }\n-\n-            @Override\n-            boolean endOfChain( RelationshipRecord record )\n-            {\n-                return NODE.next( record ) == Record.NO_NEXT_RELATIONSHIP.intValue();\n-            }\n-\n-            @Override\n-            RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n-                    CacheAccess.Client cacheAccess )\n-            {\n-                if ( cacheAccess.getFromCache( nodeId, SLOT_SOURCE_OR_TARGET ) == SOURCE )\n-                {\n-                    rel.setFirstPrevRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                else\n-                {\n-                    rel.setSecondPrevRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                rel.setInUse( cacheAccess.getBooleanFromCache( nodeId, SLOT_IN_USE ) );\n-                return rel;\n-            }\n-\n-            @Override\n-            void linkChecked( CacheAccess.Client cacheAccess )\n-            {\n-                cacheAccess.incAndGetCount( Counts.Type.relSourceNextCheck );\n-            }\n+          @Override\n+          public long valueFrom(RelationshipRecord relationship)\n+          {\n+            return relationship.getFirstNextRel();\n+          }\n+\n+          @Override\n+          long other(NodeField field, RelationshipRecord relationship)\n+          {\n+            return field.prev(relationship);\n+          }\n+\n+          @Override\n+          void otherNode(ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship)\n+          {\n+            report.sourceNextReferencesOtherNodes(relationship);\n+          }\n+\n+          @Override\n+          void noBackReference(ConsistencyReport.RelationshipConsistencyReport report,\n+                               RelationshipRecord relationship)\n+          {\n+            report.sourceNextDoesNotReferenceBack(relationship);\n+          }\n+\n+          @Override\n+          boolean endOfChain(RelationshipRecord record)\n+          {\n+            return NODE.next(record) == Record.NO_NEXT_RELATIONSHIP.intValue();\n+          }\n+\n+          @Override\n+          RelationshipRecord populateRelationshipFromCache(long nodeId, RelationshipRecord rel,\n+                                                           CacheAccess.Client cacheAccess)\n+          {\n+            if (cacheAccess.getFromCache(nodeId, SLOT_SOURCE_OR_TARGET) == SOURCE)\n+            {\n+              rel.setFirstPrevRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            } else\n+            {\n+              rel.setSecondPrevRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            }\n+            rel.setInUse(cacheAccess.getBooleanFromCache(nodeId, SLOT_IN_USE));\n+            return rel;\n+          }\n+\n+          @Override\n+          void linkChecked(CacheAccess.Client cacheAccess)\n+          {\n+            cacheAccess.incAndGetCount(Counts.Type.relSourceNextCheck);\n+          }\n         },\n-        TARGET_PREV( NodeField.TARGET )\n+    TARGET_PREV(NodeField.TARGET)\n         {\n-            @Override\n-            public long valueFrom( RelationshipRecord relationship )\n-            {\n-                return relationship.getSecondPrevRel();\n-            }\n-\n-            @Override\n-            long other( NodeField field, RelationshipRecord relationship )\n-            {\n-                return field.next( relationship );\n-            }\n-\n-            @Override\n-            void otherNode( ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship )\n-            {\n-                report.targetPrevReferencesOtherNodes( relationship );\n-            }\n-\n-            @Override\n-            void noBackReference( ConsistencyReport.RelationshipConsistencyReport report,\n-                    RelationshipRecord relationship )\n-            {\n-                report.targetPrevDoesNotReferenceBack( relationship );\n-            }\n-\n-            @Override\n-            boolean endOfChain( RelationshipRecord record )\n-            {\n-                return NODE.isFirst( record );\n-            }\n-\n-            @Override\n-            RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n-                    CacheAccess.Client cacheAccess )\n-            {\n-                if ( cacheAccess.getFromCache( nodeId, SLOT_SOURCE_OR_TARGET ) == SOURCE )\n-                {\n-                    rel.setFirstNextRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                else\n-                {\n-                    rel.setSecondNextRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                rel.setInUse( cacheAccess.getBooleanFromCache( nodeId, SLOT_IN_USE ) );\n-                return rel;\n-            }\n-\n-            @Override\n-            void linkChecked( CacheAccess.Client cacheAccess )\n-            {\n-                cacheAccess.incAndGetCount( Counts.Type.relTargetPrevCheck );\n-            }\n+          @Override\n+          public long valueFrom(RelationshipRecord relationship)\n+          {\n+            return relationship.getSecondPrevRel();\n+          }\n+\n+          @Override\n+          long other(NodeField field, RelationshipRecord relationship)\n+          {\n+            return field.next(relationship);\n+          }\n+\n+          @Override\n+          void otherNode(ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship)\n+          {\n+            report.targetPrevReferencesOtherNodes(relationship);\n+          }\n+\n+          @Override\n+          void noBackReference(ConsistencyReport.RelationshipConsistencyReport report,\n+                               RelationshipRecord relationship)\n+          {\n+            report.targetPrevDoesNotReferenceBack(relationship);\n+          }\n+\n+          @Override\n+          boolean endOfChain(RelationshipRecord record)\n+          {\n+            return NODE.isFirst(record);\n+          }\n+\n+          @Override\n+          RelationshipRecord populateRelationshipFromCache(long nodeId, RelationshipRecord rel,\n+                                                           CacheAccess.Client cacheAccess)\n+          {\n+            if (cacheAccess.getFromCache(nodeId, SLOT_SOURCE_OR_TARGET) == SOURCE)\n+            {\n+              rel.setFirstNextRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            } else\n+            {\n+              rel.setSecondNextRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            }\n+            rel.setInUse(cacheAccess.getBooleanFromCache(nodeId, SLOT_IN_USE));\n+            return rel;\n+          }\n+\n+          @Override\n+          void linkChecked(CacheAccess.Client cacheAccess)\n+          {\n+            cacheAccess.incAndGetCount(Counts.Type.relTargetPrevCheck);\n+          }\n         },\n-        TARGET_NEXT( NodeField.TARGET )\n+    TARGET_NEXT(NodeField.TARGET)\n         {\n-            @Override\n-            public long valueFrom( RelationshipRecord relationship )\n-            {\n-                return relationship.getSecondNextRel();\n-            }\n-\n-            @Override\n-            long other( NodeField field, RelationshipRecord relationship )\n-            {\n-                return field.prev( relationship );\n-            }\n-\n-            @Override\n-            void otherNode( ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship )\n-            {\n-                report.targetNextReferencesOtherNodes( relationship );\n-            }\n-\n-            @Override\n-            void noBackReference( ConsistencyReport.RelationshipConsistencyReport report,\n-                    RelationshipRecord relationship )\n-            {\n-                report.targetNextDoesNotReferenceBack( relationship );\n-            }\n-\n-            @Override\n-            boolean endOfChain( RelationshipRecord record )\n-            {\n-                return NODE.next( record ) == Record.NO_NEXT_RELATIONSHIP.intValue();\n-            }\n-\n-            @Override\n-            RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n-                    CacheAccess.Client cacheAccess )\n-            {\n-                if ( cacheAccess.getFromCache( nodeId, SLOT_SOURCE_OR_TARGET ) == SOURCE )\n-                {\n-                    rel.setFirstPrevRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                else\n-                {\n-                    rel.setSecondPrevRel( cacheAccess.getFromCache( nodeId, SLOT_REFERENCE ) );\n-                }\n-                rel.setInUse( cacheAccess.getBooleanFromCache( nodeId, SLOT_IN_USE ) );\n-                return rel;\n-            }\n-\n-            @Override\n-            void linkChecked( CacheAccess.Client cacheAccess )\n-            {\n-                cacheAccess.incAndGetCount( Counts.Type.relTargetNextCheck );\n-            }\n+          @Override\n+          public long valueFrom(RelationshipRecord relationship)\n+          {\n+            return relationship.getSecondNextRel();\n+          }\n+\n+          @Override\n+          long other(NodeField field, RelationshipRecord relationship)\n+          {\n+            return field.prev(relationship);\n+          }\n+\n+          @Override\n+          void otherNode(ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship)\n+          {\n+            report.targetNextReferencesOtherNodes(relationship);\n+          }\n+\n+          @Override\n+          void noBackReference(ConsistencyReport.RelationshipConsistencyReport report,\n+                               RelationshipRecord relationship)\n+          {\n+            report.targetNextDoesNotReferenceBack(relationship);\n+          }\n+\n+          @Override\n+          boolean endOfChain(RelationshipRecord record)\n+          {\n+            return NODE.next(record) == Record.NO_NEXT_RELATIONSHIP.intValue();\n+          }\n+\n+          @Override\n+          RelationshipRecord populateRelationshipFromCache(long nodeId, RelationshipRecord rel,\n+                                                           CacheAccess.Client cacheAccess)\n+          {\n+            if (cacheAccess.getFromCache(nodeId, SLOT_SOURCE_OR_TARGET) == SOURCE)\n+            {\n+              rel.setFirstPrevRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            } else\n+            {\n+              rel.setSecondPrevRel(cacheAccess.getFromCache(nodeId, SLOT_REFERENCE));\n+            }\n+            rel.setInUse(cacheAccess.getBooleanFromCache(nodeId, SLOT_IN_USE));\n+            return rel;\n+          }\n+\n+          @Override\n+          void linkChecked(CacheAccess.Client cacheAccess)\n+          {\n+            cacheAccess.incAndGetCount(Counts.Type.relTargetNextCheck);\n+          }\n         },\n-        CACHE_VALUES( null )\n+    CACHE_VALUES(null)\n         {\n-            @Override\n-            public long valueFrom( RelationshipRecord record )\n-            {\n-                return 0;\n+          @Override\n+          public long valueFrom(RelationshipRecord record)\n+          {\n+            return 0;\n+          }\n+\n+          @Override\n+          boolean endOfChain(RelationshipRecord record)\n+          {\n+            return false;\n+          }\n+\n+          @Override\n+          long other(NodeField field, RelationshipRecord relationship)\n+          {\n+            return 0;\n+          }\n+\n+          @Override\n+          void otherNode(RelationshipConsistencyReport report, RelationshipRecord relationship)\n+          {\n+          }\n+\n+          @Override\n+          void noBackReference(RelationshipConsistencyReport report, RelationshipRecord relationship)\n+          {\n+          }\n+\n+          @Override\n+          RelationshipRecord populateRelationshipFromCache(long nodeId, RelationshipRecord rel,\n+                                                           CacheAccess.Client cacheAccess)\n+          {\n+            return null;\n+          }\n+\n+          @Override\n+          public void checkConsistency(RelationshipRecord relationship,\n+                                       CheckerEngine<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> engine,\n+                                       RecordAccess records)\n+          {\n+            if (!relationship.inUse())\n+            {\n+              return;\n             }\n \n-            @Override\n-            boolean endOfChain( RelationshipRecord record )\n-            {\n-                return false;\n-            }\n-\n-            @Override\n-            long other( NodeField field, RelationshipRecord relationship )\n-            {\n-                return 0;\n-            }\n-\n-            @Override\n-            void otherNode( RelationshipConsistencyReport report, RelationshipRecord relationship )\n-            {\n-            }\n-\n-            @Override\n-            void noBackReference( RelationshipConsistencyReport report, RelationshipRecord relationship )\n-            {\n-            }\n-\n-            @Override\n-            RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n-                    CacheAccess.Client cacheAccess )\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public void checkConsistency( RelationshipRecord relationship,\n-                    CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n-                    RecordAccess records )\n-            {\n-                if ( !relationship.inUse() )\n-                {\n-                    return;\n-                }\n-\n-                CacheAccess.Client cacheAccess = records.cacheAccess().client();\n-                /*\n-                 * save to cache the information in this relationship that will be\n-                 * referred in future, i.e., in the forward scan, these are the link ids\n-                 * having value greater than current one and in the backward scan, these\n-                 * are the link ids having value lower than the current one. Choose the\n-                 * lower of two in case of forward scan, and greater of two in backward\n-                 * scan. Save ONLY when the cache slot is available. Otherwise, i.e., it\n-                 * contains cached information, check if the information from current\n-                 * relationship will be utilized sooner. If so, update the cached\n-                 * information.\n-                 */\n-                boolean cache1Free = cacheAccess.getFromCache( relationship.getFirstNode(), SLOT_RELATIONSHIP_ID ) == -1;\n-                boolean cache2Free = cacheAccess.getFromCache( relationship.getSecondNode(), SLOT_RELATIONSHIP_ID ) == -1;\n-\n-                if ( records.cacheAccess().isForward() )\n-                {\n-                    if ( cacheAccess.withinBounds( relationship.getFirstNode() ) )\n-                    {\n-                        cacheAccess.putToCache( relationship.getFirstNode(), SOURCE, PREV,\n-                                relationship.getId(), relationship.getFirstPrevRel(), 1 );\n-                        updateCacheCounts( cache1Free, cacheAccess );\n-                    }\n-                    if ( cacheAccess.withinBounds( relationship.getSecondNode() ) )\n-                    {\n-                        cacheAccess.putToCache( relationship.getSecondNode(), TARGET, PREV,\n-                                relationship.getId(), relationship.getSecondPrevRel(), 1 );\n-                        updateCacheCounts( cache2Free, cacheAccess );\n-                    }\n-                }\n-                else\n-                {\n-                    if ( cacheAccess.withinBounds( relationship.getFirstNode() ) )\n-                    {\n-                        cacheAccess.putToCache( relationship.getFirstNode(), SOURCE, NEXT,\n-                                relationship.getId(), relationship.getFirstNextRel() , 1 );\n-                        updateCacheCounts( cache1Free, cacheAccess );\n-                    }\n-                    if ( cacheAccess.withinBounds( relationship.getSecondNode() ) )\n-                    {\n-                        cacheAccess.putToCache( relationship.getSecondNode(), TARGET, NEXT,\n-                                relationship.getId(), relationship.getSecondNextRel() , 1 );\n-                        updateCacheCounts( cache2Free, cacheAccess );\n-                    }\n-                }\n-            }\n-\n-            private void updateCacheCounts( boolean free, Client cacheAccess )\n-            {\n-                if ( !free )\n-                {\n-                    cacheAccess.incAndGetCount( Counts.Type.overwrite );\n-                }\n-                else\n-                {\n-                    cacheAccess.incAndGetCount( Counts.Type.activeCache );\n-                }\n-            }\n-\n-            @Override\n-            void linkChecked( CacheAccess.Client cacheAccess )\n-            {\n-                cacheAccess.incAndGetCount( Counts.Type.relCacheCheck );\n-            }\n+            CacheAccess.Client cacheAccess = records.cacheAccess().client();\n+            /*\n+             * save to cache the information in this relationship that will be\n+             * referred in future, i.e., in the forward scan, these are the link ids\n+             * having value greater than current one and in the backward scan, these\n+             * are the link ids having value lower than the current one. Choose the\n+             * lower of two in case of forward scan, and greater of two in backward\n+             * scan. Save ONLY when the cache slot is available. Otherwise, i.e., it\n+             * contains cached information, check if the information from current\n+             * relationship will be utilized sooner. If so, update the cached\n+             * information.\n+             */\n+            boolean cache1Free = cacheAccess.getFromCache(relationship.getFirstNode(), SLOT_RELATIONSHIP_ID) == -1;\n+            boolean cache2Free = cacheAccess.getFromCache(relationship.getSecondNode(), SLOT_RELATIONSHIP_ID) == -1;\n+\n+            if (records.cacheAccess().isForward())\n+            {\n+              if (cacheAccess.withinBounds(relationship.getFirstNode()))\n+              {\n+                cacheAccess.putToCache(relationship.getFirstNode(), SOURCE, PREV,\n+                    relationship.getId(), relationship.getFirstPrevRel(), 1);\n+                updateCacheCounts(cache1Free, cacheAccess);\n+              }\n+              if (cacheAccess.withinBounds(relationship.getSecondNode()))\n+              {\n+                cacheAccess.putToCache(relationship.getSecondNode(), TARGET, PREV,\n+                    relationship.getId(), relationship.getSecondPrevRel(), 1);\n+                updateCacheCounts(cache2Free, cacheAccess);\n+              }\n+            } else\n+            {\n+              if (cacheAccess.withinBounds(relationship.getFirstNode()))\n+              {\n+                cacheAccess.putToCache(relationship.getFirstNode(), SOURCE, NEXT,\n+                    relationship.getId(), relationship.getFirstNextRel(), 1);\n+                updateCacheCounts(cache1Free, cacheAccess);\n+              }\n+              if (cacheAccess.withinBounds(relationship.getSecondNode()))\n+              {\n+                cacheAccess.putToCache(relationship.getSecondNode(), TARGET, NEXT,\n+                    relationship.getId(), relationship.getSecondNextRel(), 1);\n+                updateCacheCounts(cache2Free, cacheAccess);\n+              }\n+            }\n+          }\n+\n+          private void updateCacheCounts(boolean free, Client cacheAccess)\n+          {\n+            if (!free)\n+            {\n+              cacheAccess.incAndGetCount(Counts.Type.overwrite);\n+            } else\n+            {\n+              cacheAccess.incAndGetCount(Counts.Type.activeCache);\n+            }\n+          }\n+\n+          @Override\n+          void linkChecked(CacheAccess.Client cacheAccess)\n+          {\n+            cacheAccess.incAndGetCount(Counts.Type.relCacheCheck);\n+          }\n         };\n-        protected final NodeField NODE;\n+    protected final NodeField NODE;\n \n-        RelationshipField( NodeField node )\n-        {\n-            this.NODE = node;\n-        }\n+    RelationshipField(NodeField node)\n+    {\n+      this.NODE = node;\n+    }\n \n-        private RecordReference<RelationshipRecord> buildFromCache( RelationshipRecord relationship, long reference,\n-                long nodeId, RecordAccess records )\n+    private RecordReference<RelationshipRecord> buildFromCache(RelationshipRecord relationship, long reference,\n+                                                               long nodeId, RecordAccess records)\n+    {\n+      CacheAccess.Client cacheAccess = records.cacheAccess().client();\n+      if (!cacheAccess.withinBounds(nodeId))\n+      {\n+        // another thread will visit this record, so skip\n+        cacheAccess.incAndGetCount(Counts.Type.correctSkipCheck);\n+        return RecordReference.SkippingReference.skipReference();\n+      }\n+      if (reference != cacheAccess.getFromCache(nodeId, SLOT_RELATIONSHIP_ID))\n+      {\n+        if (referenceShouldBeSkipped(relationship, reference, records))\n         {\n-            CacheAccess.Client cacheAccess = records.cacheAccess().client();\n-            if ( !cacheAccess.withinBounds( nodeId ) )\n-            {\n-                // another thread will visit this record, so skip\n-                cacheAccess.incAndGetCount( Counts.Type.correctSkipCheck );\n-                return RecordReference.SkippingReference.skipReference();\n-            }\n-            if ( reference != cacheAccess.getFromCache( nodeId, SLOT_RELATIONSHIP_ID ) )\n-            {\n-                if ( referenceShouldBeSkipped( relationship, reference, records ) )\n-                {\n-                    // wrong direction, so skip\n-                    cacheAccess.incAndGetCount( Counts.Type.correctSkipCheck );\n-                    return RecordReference.SkippingReference.skipReference();\n-                }\n-                //these are \"bad links\", and hopefully few. So, get the real ones anyway.\n-                cacheAccess.incAndGetCount( Counts.Type.missCheck );\n-                return records.relationship( reference );\n-            }\n-            // now, use cached info to build a fake relationship, but with partial real values that had been cached before\n-            RelationshipRecord rel = new RelationshipRecord( reference );\n-\n-            // We use \"created\" flag here. Consistency checking code revolves around records and so\n-            // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n-            // this flag is used to signal that the real record needs to be read in order to be used as a general\n-            // purpose record.\n-            rel.setCreated();\n-            if ( cacheAccess.getFromCache( nodeId, SLOT_SOURCE_OR_TARGET ) == SOURCE )\n-            {\n-                rel.setFirstNode( nodeId );\n-            }\n-            else\n-            {\n-                rel.setSecondNode( nodeId );\n-            }\n-            rel = populateRelationshipFromCache( nodeId, rel, cacheAccess );\n-            return new DirectRecordReference<>( rel, records );\n+          // wrong direction, so skip\n+          cacheAccess.incAndGetCount(Counts.Type.correctSkipCheck);\n+          return RecordReference.SkippingReference.skipReference();\n         }\n+        //these are \"bad links\", and hopefully few. So, get the real ones anyway.\n+        cacheAccess.incAndGetCount(Counts.Type.missCheck);\n+        return records.relationship(reference);\n+      }\n+      // now, use cached info to build a fake relationship, but with partial real values that had been cached before\n+      RelationshipRecord rel = new RelationshipRecord(reference);\n+\n+      // We use \"created\" flag here. Consistency checking code revolves around records and so\n+      // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n+      // this flag is used to signal that the real record needs to be read in order to be used as a general\n+      // purpose record.\n+      rel.setCreated();\n+      if (cacheAccess.getFromCache(nodeId, SLOT_SOURCE_OR_TARGET) == SOURCE)\n+      {\n+        rel.setFirstNode(nodeId);\n+      } else\n+      {\n+        rel.setSecondNode(nodeId);\n+      }\n+      rel = populateRelationshipFromCache(nodeId, rel, cacheAccess);\n+      return new DirectRecordReference<>(rel, records);\n+    }\n+\n+    private boolean referenceShouldBeSkipped(RelationshipRecord relationship, long reference,\n+                                             RecordAccess records)\n+    {\n+      return (records.cacheAccess().isForward() && reference > relationship.getId())\n+          || (!records.cacheAccess().isForward() && reference < relationship.getId());\n+    }\n \n-        private boolean referenceShouldBeSkipped( RelationshipRecord relationship, long reference,\n-                RecordAccess records )\n+    @Override\n+    public void checkConsistency(RelationshipRecord relationship,\n+                                 CheckerEngine<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> engine,\n+                                 RecordAccess records)\n+    {\n+      /*\n+       * The algorithm for fast consistency check does 2 passes over the relationship store - one forward and one backward.\n+       * In both passes, typically the cached information is used build the referred relationship instead of going to disk.\n+       * This is what minimizes the random access to disk, but it is guaranteed that the cached information was always got\n+       * from disk at an appropriate opportunity and all links are correctly checked with right data.\n+       * In the forward pass, only the previous relationship information is cached and hence only the next information can\n+       * be checked, while in backward pass only the next information is cached allowing checking of previous\n+       */\n+      CacheAccess.Client cacheAccess = records.cacheAccess().client();\n+      if (!endOfChain(relationship))\n+      {\n+        RecordReference<RelationshipRecord> referred = null;\n+        long reference = valueFrom(relationship);\n+        long nodeId = -1;\n+        if (records.shouldCheck(reference, MultiPassStore.RELATIONSHIPS))\n+        {\n+          nodeId = NODE == NodeField.SOURCE ? relationship.getFirstNode() : relationship.getSecondNode();\n+          if (Record.NO_NEXT_RELATIONSHIP.is(cacheAccess.getFromCache(nodeId, SLOT_RELATIONSHIP_ID)))\n+          {\n+            referred = RecordReference.SkippingReference.skipReference();\n+            cacheAccess.incAndGetCount(Counts.Type.noCacheSkip);\n+          } else\n+          {\n+            referred = buildFromCache(relationship, reference, nodeId, records);\n+            if (referred == RecordReference.SkippingReference.<RelationshipRecord>skipReference())\n+            {\n+              cacheAccess.incAndGetCount(Counts.Type.skipCheck);\n+            }\n+          }\n+        } else\n         {\n-            return (records.cacheAccess().isForward() && reference > relationship.getId())\n-               || (!records.cacheAccess().isForward() && reference < relationship.getId());\n+          if (referenceShouldBeSkipped(relationship, reference, records))\n+          {\n+            referred = RecordReference.SkippingReference.skipReference();\n+          }\n         }\n-\n-        @Override\n-        public void checkConsistency( RelationshipRecord relationship,\n-                                      CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n-                                      RecordAccess records )\n+        engine.comparativeCheck(referred, this);\n+        if (referred != RecordReference.SkippingReference.<RelationshipRecord>skipReference())\n         {\n-            /*\n-             * The algorithm for fast consistency check does 2 passes over the relationship store - one forward and one backward.\n-             * In both passes, typically the cached information is used build the referred relationship instead of going to disk.\n-             * This is what minimizes the random access to disk, but it is guaranteed that the cached information was always got\n-             * from disk at an appropriate opportunity and all links are correctly checked with right data.\n-             * In the forward pass, only the previous relationship information is cached and hence only the next information can\n-             * be checked, while in backward pass only the next information is cached allowing checking of previous\n-             */\n-            CacheAccess.Client cacheAccess = records.cacheAccess().client();\n-            if ( !endOfChain( relationship ) )\n-            {\n-                RecordReference<RelationshipRecord> referred = null;\n-                long reference = valueFrom( relationship );\n-                long nodeId = -1;\n-                if ( records.shouldCheck( reference, MultiPassStore.RELATIONSHIPS ) )\n-                {\n-                    nodeId = NODE == NodeField.SOURCE ? relationship.getFirstNode() : relationship.getSecondNode();\n-                    if ( Record.NO_NEXT_RELATIONSHIP.is( cacheAccess.getFromCache( nodeId, SLOT_RELATIONSHIP_ID ) ) )\n-                    {\n-                        referred = RecordReference.SkippingReference.skipReference();\n-                        cacheAccess.incAndGetCount( Counts.Type.noCacheSkip );\n-                    }\n-                    else\n-                    {\n-                        referred = buildFromCache( relationship, reference, nodeId, records );\n-                        if ( referred == RecordReference.SkippingReference.<RelationshipRecord>skipReference() )\n-                        {\n-                            cacheAccess.incAndGetCount( Counts.Type.skipCheck );\n-                        }\n-                    }\n-                }\n-                else\n-                {\n-                    if ( referenceShouldBeSkipped( relationship, reference, records ) )\n-                    {\n-                        referred = RecordReference.SkippingReference.skipReference();\n-                    }\n-                }\n-                engine.comparativeCheck( referred, this );\n-                if ( referred != RecordReference.SkippingReference.<RelationshipRecord>skipReference() )\n-                {\n-                    cacheAccess.incAndGetCount( Counts.Type.checked );\n-                    linkChecked( cacheAccess );\n-                }\n-            }\n-            else\n-            {\n-                cacheAccess.incAndGetCount( Counts.Type.checked );\n-                linkChecked( cacheAccess );\n-            }\n+          cacheAccess.incAndGetCount(Counts.Type.checked);\n+          linkChecked(cacheAccess);\n         }\n+      } else\n+      {\n+        cacheAccess.incAndGetCount(Counts.Type.checked);\n+        linkChecked(cacheAccess);\n+      }\n+    }\n \n-        @Override\n-        public void checkReference( RelationshipRecord record, RelationshipRecord referred,\n-                                    CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n-                                    RecordAccess records )\n+    @Override\n+    public void checkReference(RelationshipRecord record, RelationshipRecord referred,\n+                               CheckerEngine<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      NodeField field = NodeField.select(referred, node(record));\n+      if (field == null)\n+      {\n+        otherNode(engine.report(), referred);\n+      } else\n+      {\n+        CacheAccess.Client cacheAccess = records.cacheAccess().client();\n+        if (other(field, referred) != record.getId())\n         {\n-            NodeField field = NodeField.select( referred, node( record ) );\n-            if ( field == null )\n-            {\n-                otherNode( engine.report(), referred );\n-            }\n-            else\n-            {\n-                CacheAccess.Client cacheAccess = records.cacheAccess().client();\n-                if ( other( field, referred ) != record.getId() )\n-                {\n-                    // We use \"created\" flag here. Consistency checking code revolves around records and so\n-                    // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n-                    // this flag is used to signal that the real record needs to be read in order to be used as a general\n-                    // purpose record.\n-                    if ( referred.isCreated() )\n-                    {\n-                        //get the actual record and check again\n-                        RecordReference<RelationshipRecord> refRel = records.relationship( referred.getId() );\n-                        referred = (RelationshipRecord) ((DirectRecordReference) refRel).record();\n-                        checkReference( record, referred, engine, records );\n-                        cacheAccess.incAndGetCount( Counts.Type.skipBackup );\n-                    }\n-                    else\n-                    {\n-                        cacheAccess.incAndGetCount( Counts.Type.checkErrors );\n-                        noBackReference( engine == null ? null : engine.report(), referred );\n-                    }\n-                }\n-                else\n-                {\n-                    if ( !referenceShouldBeSkipped( record, referred.getId(), records ) && !referred.inUse() )\n-                    {\n-                        engine.report().notUsedRelationshipReferencedInChain( referred );\n-                    }\n-                    // successfully checked\n-                    // clear cache only if cache is used - meaning referred was built using cache.\n-                    if ( referred.isCreated() )\n-                    {\n-                        cacheAccess.clearCache( node( record ) );\n-                    }\n-                }\n-            }\n+          // We use \"created\" flag here. Consistency checking code revolves around records and so\n+          // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n+          // this flag is used to signal that the real record needs to be read in order to be used as a general\n+          // purpose record.\n+          if (referred.isCreated())\n+          {\n+            //get the actual record and check again\n+            RecordReference<RelationshipRecord> refRel = records.relationship(referred.getId());\n+            referred = (RelationshipRecord) ((DirectRecordReference) refRel).record();\n+            checkReference(record, referred, engine, records);\n+            cacheAccess.incAndGetCount(Counts.Type.skipBackup);\n+          } else\n+          {\n+            cacheAccess.incAndGetCount(Counts.Type.checkErrors);\n+            noBackReference(engine == null ? null : engine.report(), referred);\n+          }\n+        } else\n+        {\n+          if (!referenceShouldBeSkipped(record, referred.getId(), records) && !referred.inUse())\n+          {\n+            engine.report().notUsedRelationshipReferencedInChain(referred);\n+          }\n+          // successfully checked\n+          // clear cache only if cache is used - meaning referred was built using cache.\n+          if (referred.isCreated())\n+          {\n+            cacheAccess.clearCache(node(record));\n+          }\n         }\n+      }\n+    }\n \n-        abstract boolean endOfChain( RelationshipRecord record );\n+    abstract boolean endOfChain(RelationshipRecord record);\n \n-        abstract long other( NodeField field, RelationshipRecord relationship );\n+    abstract long other(NodeField field, RelationshipRecord relationship);\n \n-        abstract void otherNode( ConsistencyReport.RelationshipConsistencyReport report,\n-                                 RelationshipRecord relationship );\n+    abstract void otherNode(ConsistencyReport.RelationshipConsistencyReport report,\n+                            RelationshipRecord relationship);\n \n-        abstract void noBackReference( ConsistencyReport.RelationshipConsistencyReport report,\n-                                       RelationshipRecord relationship );\n+    abstract void noBackReference(ConsistencyReport.RelationshipConsistencyReport report,\n+                                  RelationshipRecord relationship);\n \n-        abstract RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n-                CacheAccess.Client cacheAccess );\n+    abstract RelationshipRecord populateRelationshipFromCache(long nodeId, RelationshipRecord rel,\n+                                                              CacheAccess.Client cacheAccess);\n \n-        abstract void linkChecked( CacheAccess.Client cacheAccess );\n+    abstract void linkChecked(CacheAccess.Client cacheAccess);\n \n-        private long node( RelationshipRecord relationship )\n-        {\n-            return NODE.valueFrom( relationship );\n-        }\n+    private long node(RelationshipRecord relationship)\n+    {\n+      return NODE.valueFrom(relationship);\n     }\n+  }\n }\n",
            "diff_size": 731
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "503",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "503",
                    "column": "67",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "503",
                    "column": "90",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "535",
                    "column": "95",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "549",
                    "column": "87",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "563",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3042/RelationshipRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3042/RelationshipRecordCheck.java\nindex 2b09d6f2a5b..2a3b893f616 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3042/RelationshipRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3042/RelationshipRecordCheck.java\n@@ -43,8 +43,7 @@ import static org.neo4j.consistency.checking.cache.CacheSlots.RelationshipLink.S\n import static org.neo4j.consistency.checking.cache.CacheSlots.RelationshipLink.TARGET;\n import static org.neo4j.helpers.ArrayUtil.union;\n \n-public class RelationshipRecordCheck extends\n-        PrimitiveRecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>\n+public class RelationshipRecordCheck extends PrimitiveRecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>\n {\n     public RelationshipRecordCheck()\n     {\n@@ -54,8 +53,7 @@ public class RelationshipRecordCheck extends\n     }\n \n     @SafeVarargs\n-    RelationshipRecordCheck(\n-            RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>... fields )\n+    RelationshipRecordCheck( RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>... fields )\n     {\n         super( fields );\n     }\n@@ -66,12 +64,9 @@ public class RelationshipRecordCheck extends\n     }\n \n     @SafeVarargs\n-    public static RelationshipRecordCheck relationshipRecordCheckBackwardPass(\n-            RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>... additional )\n+    public static RelationshipRecordCheck relationshipRecordCheckBackwardPass( RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>... additional )\n     {\n-        return new RelationshipRecordCheck( union(\n-                ArrayUtil.<RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>>array(\n-                        NodeField.SOURCE, NodeField.TARGET ), additional ) );\n+        return new RelationshipRecordCheck( union( ArrayUtil.<RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>>array( NodeField.SOURCE, NodeField.TARGET ), additional ) );\n     }\n \n     public static RelationshipRecordCheck relationshipRecordCheckSourceChain()\n@@ -81,17 +76,14 @@ public class RelationshipRecordCheck extends\n                 RelationshipField.CACHE_VALUES );\n     }\n \n-    enum RelationshipTypeField\n-            implements\n-            RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipRecord,RelationshipTypeTokenRecord,ConsistencyReport.RelationshipConsistencyReport>\n+    enum RelationshipTypeField implements RecordField<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>, ComparativeRecordChecker<RelationshipRecord,RelationshipTypeTokenRecord,ConsistencyReport.RelationshipConsistencyReport>\n     {\n         RELATIONSHIP_TYPE;\n-        @Override\n-        public void checkConsistency( RelationshipRecord record,\n-                                      CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n+\n+@Override\n+        public void checkConsistency( RelationshipRecord record, CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n                                       RecordAccess records )\n-        {\n+{\n             if ( record.getType() < 0 )\n             {\n                 engine.report().illegalRelationshipType();\n@@ -109,10 +101,9 @@ public class RelationshipRecordCheck extends\n         }\n \n         @Override\n-        public void checkReference( RelationshipRecord record, RelationshipTypeTokenRecord referred,\n-                                    CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n+        public void checkReference( RelationshipRecord record, RelationshipTypeTokenRecord referred, CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n                                     RecordAccess records )\n-        {\n+{\n             if ( !referred.inUse() )\n             {\n                 engine.report().relationshipTypeNotInUse( referred );\n@@ -120,9 +111,7 @@ public class RelationshipRecordCheck extends\n         }\n     }\n \n-    enum RelationshipField implements\n-            RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>,\n-            ComparativeRecordChecker<RelationshipRecord, RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>\n+    enum RelationshipField implements RecordField<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>, ComparativeRecordChecker<RelationshipRecord, RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>\n     {\n         SOURCE_PREV( NodeField.SOURCE )\n         {\n@@ -382,8 +371,7 @@ public class RelationshipRecordCheck extends\n             }\n \n             @Override\n-            public void checkConsistency( RelationshipRecord relationship,\n-                    CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n+            public void checkConsistency( RelationshipRecord relationship, CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n                     RecordAccess records )\n             {\n                 if ( !relationship.inUse() )\n@@ -412,13 +400,14 @@ public class RelationshipRecordCheck extends\n                     {\n                         cacheAccess.putToCache( relationship.getFirstNode(), SOURCE, PREV,\n                                 relationship.getId(), relationship.getFirstPrevRel(), 1 );\n-                        updateCacheCounts( cache1Free, cacheAccess );\n+updateCacheCounts( cache1Free, cacheAccess );\n                     }\n-                    if ( cacheAccess.withinBounds( relationship.getSecondNode() ) )\n+\n+if ( cacheAccess.withinBounds( relationship.getSecondNode() ) )\n                     {\n                         cacheAccess.putToCache( relationship.getSecondNode(), TARGET, PREV,\n                                 relationship.getId(), relationship.getSecondPrevRel(), 1 );\n-                        updateCacheCounts( cache2Free, cacheAccess );\n+updateCacheCounts( cache2Free, cacheAccess );\n                     }\n                 }\n                 else\n@@ -426,14 +415,15 @@ public class RelationshipRecordCheck extends\n                     if ( cacheAccess.withinBounds( relationship.getFirstNode() ) )\n                     {\n                         cacheAccess.putToCache( relationship.getFirstNode(), SOURCE, NEXT,\n-                                relationship.getId(), relationship.getFirstNextRel() , 1 );\n-                        updateCacheCounts( cache1Free, cacheAccess );\n+                                relationship.getId(), relationship.getFirstNextRel(), 1 );\n+updateCacheCounts( cache1Free, cacheAccess );\n                     }\n-                    if ( cacheAccess.withinBounds( relationship.getSecondNode() ) )\n+\n+if ( cacheAccess.withinBounds( relationship.getSecondNode() ) )\n                     {\n                         cacheAccess.putToCache( relationship.getSecondNode(), TARGET, NEXT,\n-                                relationship.getId(), relationship.getSecondNextRel() , 1 );\n-                        updateCacheCounts( cache2Free, cacheAccess );\n+                                relationship.getId(), relationship.getSecondNextRel(), 1 );\n+updateCacheCounts( cache2Free, cacheAccess );\n                     }\n                 }\n             }\n@@ -473,7 +463,8 @@ public class RelationshipRecordCheck extends\n                 cacheAccess.incAndGetCount( Counts.Type.correctSkipCheck );\n                 return RecordReference.SkippingReference.skipReference();\n             }\n-            if ( reference != cacheAccess.getFromCache( nodeId, SLOT_RELATIONSHIP_ID ) )\n+\n+if ( reference != cacheAccess.getFromCache( nodeId, SLOT_RELATIONSHIP_ID ) )\n             {\n                 if ( referenceShouldBeSkipped( relationship, reference, records ) )\n                 {\n@@ -501,22 +492,21 @@ public class RelationshipRecordCheck extends\n             {\n                 rel.setSecondNode( nodeId );\n             }\n-            rel = populateRelationshipFromCache( nodeId, rel, cacheAccess );\n+\n+rel = populateRelationshipFromCache( nodeId, rel, cacheAccess );\n             return new DirectRecordReference<>( rel, records );\n         }\n \n         private boolean referenceShouldBeSkipped( RelationshipRecord relationship, long reference,\n                 RecordAccess records )\n         {\n-            return (records.cacheAccess().isForward() && reference > relationship.getId())\n-               || (!records.cacheAccess().isForward() && reference < relationship.getId());\n-        }\n+            return (records.cacheAccess().isForward() && reference> relationship.getId())|| (!records.cacheAccess().isForward() && reference < relationship.getId() );\n+    }\n \n         @Override\n-        public void checkConsistency( RelationshipRecord relationship,\n-                                      CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n+        public void checkConsistency( RelationshipRecord relationship, CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n                                       RecordAccess records )\n-        {\n+{\n             /*\n              * The algorithm for fast consistency check does 2 passes over the relationship store - one forward and one backward.\n              * In both passes, typically the cached information is used build the referred relationship instead of going to disk.\n@@ -542,7 +532,7 @@ public class RelationshipRecordCheck extends\n                     else\n                     {\n                         referred = buildFromCache( relationship, reference, nodeId, records );\n-                        if ( referred == RecordReference.SkippingReference.<RelationshipRecord>skipReference() )\n+                        if ( referred == RecordReference.SkippingReference.<RelationshipRecord> skipReference() )\n                         {\n                             cacheAccess.incAndGetCount( Counts.Type.skipCheck );\n                         }\n@@ -556,7 +546,7 @@ public class RelationshipRecordCheck extends\n                     }\n                 }\n                 engine.comparativeCheck( referred, this );\n-                if ( referred != RecordReference.SkippingReference.<RelationshipRecord>skipReference() )\n+                if ( referred != RecordReference.SkippingReference.<RelationshipRecord> skipReference() )\n                 {\n                     cacheAccess.incAndGetCount( Counts.Type.checked );\n                     linkChecked( cacheAccess );\n@@ -570,10 +560,9 @@ public class RelationshipRecordCheck extends\n         }\n \n         @Override\n-        public void checkReference( RelationshipRecord record, RelationshipRecord referred,\n-                                    CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n+        public void checkReference( RelationshipRecord record, RelationshipRecord referred, CheckerEngine<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> engine,\n                                     RecordAccess records )\n-        {\n+{\n             NodeField field = NodeField.select( referred, node( record ) );\n             if ( field == null )\n             {\n@@ -622,20 +611,15 @@ public class RelationshipRecordCheck extends\n \n         abstract long other( NodeField field, RelationshipRecord relationship );\n \n-        abstract void otherNode( ConsistencyReport.RelationshipConsistencyReport report,\n-                                 RelationshipRecord relationship );\n-\n-        abstract void noBackReference( ConsistencyReport.RelationshipConsistencyReport report,\n-                                       RelationshipRecord relationship );\n-\n-        abstract RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n+        abstract void otherNode( ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship );\n+    abstract void noBackReference( ConsistencyReport.RelationshipConsistencyReport report, RelationshipRecord relationship );\n+    abstract RelationshipRecord populateRelationshipFromCache( long nodeId, RelationshipRecord rel,\n                 CacheAccess.Client cacheAccess );\n-\n-        abstract void linkChecked( CacheAccess.Client cacheAccess );\n+    abstract void linkChecked( CacheAccess.Client cacheAccess );\n \n         private long node( RelationshipRecord relationship )\n         {\n             return NODE.valueFrom( relationship );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}