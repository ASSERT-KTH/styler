{
    "project_name": "wso2-attic-commons",
    "error_id": "566",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 133).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            if (otherStreamReceiverListSize > 0) {\n                StreamEvent resetEvent = new SequenceResetEvent(System.currentTimeMillis());\n                for (int i = 0, otherStreamReceiverListSize = otherStreamReceiverList.size(); i < otherStreamReceiverListSize; i++) {\n                    otherStreamReceiverList.get(i).receive(resetEvent);\n                }\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/566/SequenceStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/566/SequenceStreamReceiver.java\nindex 1025de8df9d..585ca4c034a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/566/SequenceStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/566/SequenceStreamReceiver.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.stream.recevier.sequence;\n \n import org.wso2.siddhi.core.event.StreamEvent;\n@@ -27,84 +28,85 @@ import java.util.concurrent.ThreadPoolExecutor;\n \n public class SequenceStreamReceiver implements StreamReceiver, StreamElement, Runnable {\n \n-    //  private List<SingleStream> inputStreamList;\n-    private String streamId;\n-    private ThreadPoolExecutor threadPoolExecutor;\n-    private SchedulerQueue<StreamEvent> inputQueue = new SchedulerQueue<StreamEvent>();\n-    private List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList;\n-    private int sequenceSingleStreamReceiverListSize;\n-    private List<SequenceSingleStreamReceiver> otherStreamReceiverList;\n-    private int otherStreamReceiverListSize;\n+  //  private List<SingleStream> inputStreamList;\n+  private String streamId;\n+  private ThreadPoolExecutor threadPoolExecutor;\n+  private SchedulerQueue<StreamEvent> inputQueue = new SchedulerQueue<StreamEvent>();\n+  private List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList;\n+  private int sequenceSingleStreamReceiverListSize;\n+  private List<SequenceSingleStreamReceiver> otherStreamReceiverList;\n+  private int otherStreamReceiverListSize;\n \n-    public SequenceStreamReceiver(String streamId,\n-                                  List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n-                                  ThreadPoolExecutor threadPoolExecutor) {\n-        this.streamId = streamId;\n-        this.sequenceSingleStreamReceiverList = sequenceSingleStreamReceiverList;\n-        this.threadPoolExecutor = threadPoolExecutor;\n-        this.sequenceSingleStreamReceiverListSize = sequenceSingleStreamReceiverList.size();\n-    }\n+  public SequenceStreamReceiver(String streamId,\n+                                List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n+                                ThreadPoolExecutor threadPoolExecutor) {\n+    this.streamId = streamId;\n+    this.sequenceSingleStreamReceiverList = sequenceSingleStreamReceiverList;\n+    this.threadPoolExecutor = threadPoolExecutor;\n+    this.sequenceSingleStreamReceiverListSize = sequenceSingleStreamReceiverList.size();\n+  }\n \n-    @Override\n-    public void receive(StreamEvent event) throws InterruptedException {\n+  @Override\n+  public void receive(StreamEvent event) throws InterruptedException {\n //        //System.out.println(event);\n-        if (!inputQueue.put(event)) {\n-            threadPoolExecutor.submit(this);\n-        }\n+    if (!inputQueue.put(event)) {\n+      threadPoolExecutor.submit(this);\n     }\n+  }\n \n-    @Override\n-    public void run() {\n-        int eventCounter = 0;\n-        while (true) {\n-\n-            StreamEvent streamEvent = inputQueue.poll();\n-            //System.out.println(\"thread \"+Thread.currentThread().getName()+\" \"+streamEvent);\n-            if (streamEvent == null) {\n-                break;\n-            } else if (eventCounter > 10) {\n-                threadPoolExecutor.submit(this);\n-                break;\n-            }\n-            eventCounter++;\n-            try{\n-            //in reverse order to execute the later states first to overcome to dependencies of count states\n-            for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n-                sequenceSingleStreamReceiverList.get(i).moveNextEventsToCurrentEvents();\n-            }\n-            if (otherStreamReceiverListSize > 0) {\n-                StreamEvent resetEvent = new SequenceResetEvent(System.currentTimeMillis());\n-                for (int i = 0, otherStreamReceiverListSize = otherStreamReceiverList.size(); i < otherStreamReceiverListSize; i++) {\n-                    otherStreamReceiverList.get(i).receive(resetEvent);\n-                }\n-            }\n-            for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n-                sequenceSingleStreamReceiverList.get(i).receive(streamEvent);\n-            }\n-            }catch (Throwable t){\n-                   t.printStackTrace();\n-            }\n+  @Override\n+  public void run() {\n+    int eventCounter = 0;\n+    while (true) {\n \n+      StreamEvent streamEvent = inputQueue.poll();\n+      //System.out.println(\"thread \"+Thread.currentThread().getName()+\" \"+streamEvent);\n+      if (streamEvent == null) {\n+        break;\n+      } else if (eventCounter > 10) {\n+        threadPoolExecutor.submit(this);\n+        break;\n+      }\n+      eventCounter++;\n+      try {\n+        //in reverse order to execute the later states first to overcome to dependencies of count states\n+        for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n+          sequenceSingleStreamReceiverList.get(i).moveNextEventsToCurrentEvents();\n         }\n-    }\n+        if (otherStreamReceiverListSize > 0) {\n+          StreamEvent resetEvent = new SequenceResetEvent(System.currentTimeMillis());\n+          for (int i = 0, otherStreamReceiverListSize = otherStreamReceiverList.size(); i < otherStreamReceiverListSize;\n+               i++) {\n+            otherStreamReceiverList.get(i).receive(resetEvent);\n+          }\n+        }\n+        for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n+          sequenceSingleStreamReceiverList.get(i).receive(streamEvent);\n+        }\n+      } catch (Throwable t) {\n+        t.printStackTrace();\n+      }\n \n-    public String getStreamId() {\n-        return streamId;\n     }\n+  }\n \n-    @Override\n-    public SchedulerQueue<StreamEvent> getWindow() {\n-        return null;\n-    }\n+  public String getStreamId() {\n+    return streamId;\n+  }\n \n+  @Override\n+  public SchedulerQueue<StreamEvent> getWindow() {\n+    return null;\n+  }\n \n-    public void setOtherStreamReceivers(\n-            List<SequenceSingleStreamReceiver> otherStreamReceiverList) {\n-        this.otherStreamReceiverList = otherStreamReceiverList;\n-        otherStreamReceiverListSize = otherStreamReceiverList.size();\n-    }\n \n-    public List<SequenceSingleStreamReceiver> getSequenceSingleStreamReceiverList() {\n-        return sequenceSingleStreamReceiverList;\n-    }\n+  public void setOtherStreamReceivers(\n+    List<SequenceSingleStreamReceiver> otherStreamReceiverList) {\n+    this.otherStreamReceiverList = otherStreamReceiverList;\n+    otherStreamReceiverListSize = otherStreamReceiverList.size();\n+  }\n+\n+  public List<SequenceSingleStreamReceiver> getSequenceSingleStreamReceiverList() {\n+    return sequenceSingleStreamReceiverList;\n+  }\n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/566/SequenceStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/566/SequenceStreamReceiver.java\nindex 1025de8df9d..9fc937eacb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/566/SequenceStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/566/SequenceStreamReceiver.java\n@@ -36,10 +36,9 @@ public class SequenceStreamReceiver implements StreamReceiver, StreamElement, Ru\n     private List<SequenceSingleStreamReceiver> otherStreamReceiverList;\n     private int otherStreamReceiverListSize;\n \n-    public SequenceStreamReceiver(String streamId,\n-                                  List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n+    public SequenceStreamReceiver(String streamId, List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n                                   ThreadPoolExecutor threadPoolExecutor) {\n-        this.streamId = streamId;\n+    this.streamId = streamId;\n         this.sequenceSingleStreamReceiverList = sequenceSingleStreamReceiverList;\n         this.threadPoolExecutor = threadPoolExecutor;\n         this.sequenceSingleStreamReceiverListSize = sequenceSingleStreamReceiverList.size();\n@@ -81,11 +80,11 @@ public class SequenceStreamReceiver implements StreamReceiver, StreamElement, Ru\n             for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n                 sequenceSingleStreamReceiverList.get(i).receive(streamEvent);\n             }\n-            }catch (Throwable t){\n-                   t.printStackTrace();\n-            }\n \n-        }\n+    }catch (Throwable t) {\n+    t.printStackTrace();\n+    }\n+    }\n     }\n \n     public String getStreamId() {\n@@ -107,4 +106,4 @@ public class SequenceStreamReceiver implements StreamReceiver, StreamElement, Ru\n     public List<SequenceSingleStreamReceiver> getSequenceSingleStreamReceiverList() {\n         return sequenceSingleStreamReceiverList;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}