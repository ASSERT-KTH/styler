{
    "project_name": "graphfoundation-ongdb",
    "error_id": "111",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/111/SocketAddressParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/111/SocketAddressParser.java\nindex 2cd741e5f47..33730f7ee8f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/111/SocketAddressParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/111/SocketAddressParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.util.function.BiFunction;\n@@ -28,91 +29,91 @@ import static java.lang.String.format;\n \n public class SocketAddressParser\n {\n-    private static final Pattern hostnamePortPatternExt = Pattern.compile( \"\\\\[(?<hostname>[^\\\\s]+)]:(?<port>\\\\d+)\" );\n-    private static final Pattern hostnamePortPattern = Pattern.compile( \"(?<hostname>[^\\\\s]+):(?<port>\\\\d+)\" );\n-    private static final Pattern portPattern = Pattern.compile( \":(?<port>\\\\d+)\" );\n+  private static final Pattern hostnamePortPatternExt = Pattern.compile(\"\\\\[(?<hostname>[^\\\\s]+)]:(?<port>\\\\d+)\");\n+  private static final Pattern hostnamePortPattern = Pattern.compile(\"(?<hostname>[^\\\\s]+):(?<port>\\\\d+)\");\n+  private static final Pattern portPattern = Pattern.compile(\":(?<port>\\\\d+)\");\n+\n+  public static <T extends SocketAddress> T deriveSocketAddress(\n+      String settingName, String settingValue, String defaultHostname, int defaultPort,\n+      BiFunction<String, Integer, T> constructor)\n+  {\n+    if (settingValue == null)\n+    {\n+      return constructor.apply(defaultHostname, defaultPort);\n+    }\n+\n+    settingValue = settingValue.trim();\n+\n+    T socketAddress;\n+    if ((socketAddress = matchHostnamePort(settingValue, constructor)) != null)\n+    {\n+      return socketAddress;\n+    }\n+\n+    if ((socketAddress = matchPort(settingValue, defaultHostname, constructor)) != null)\n+    {\n+      return socketAddress;\n+    }\n+\n+    throw new IllegalArgumentException(format(\n+        \"Setting \\\"%s\\\" must be in the format \" +\n+            \"\\\"hostname:port\\\" or \\\":port\\\". \\\"%s\\\" does not conform to these formats\",\n+        settingName, settingValue));\n+  }\n \n-    public static <T extends SocketAddress> T deriveSocketAddress(\n-            String settingName, String settingValue, String defaultHostname, int defaultPort,\n-            BiFunction<String,Integer,T> constructor )\n+  public static <T extends SocketAddress> T socketAddress(String settingValue,\n+                                                          BiFunction<String, Integer, T> constructor)\n+  {\n+    if (settingValue == null)\n     {\n-        if ( settingValue == null )\n-        {\n-            return constructor.apply( defaultHostname, defaultPort );\n-        }\n-\n-        settingValue = settingValue.trim();\n-\n-        T socketAddress;\n-        if ( (socketAddress = matchHostnamePort( settingValue, constructor )) != null )\n-        {\n-            return socketAddress;\n-        }\n-\n-        if ( (socketAddress = matchPort( settingValue, defaultHostname, constructor )) != null )\n-        {\n-            return socketAddress;\n-        }\n-\n-        throw new IllegalArgumentException( format(\n-                \"Setting \\\"%s\\\" must be in the format \" +\n-                \"\\\"hostname:port\\\" or \\\":port\\\". \\\"%s\\\" does not conform to these formats\",\n-                settingName, settingValue ) );\n+      throw new IllegalArgumentException(\"Cannot parse socket address from null\");\n     }\n \n-    public static <T extends SocketAddress> T socketAddress( String settingValue,\n-            BiFunction<String,Integer,T> constructor )\n+    settingValue = settingValue.trim();\n+\n+    T socketAddress;\n+    if ((socketAddress = matchHostnamePort(settingValue, constructor)) != null)\n     {\n-        if ( settingValue == null )\n-        {\n-            throw new IllegalArgumentException( \"Cannot parse socket address from null\" );\n-        }\n-\n-        settingValue = settingValue.trim();\n-\n-        T socketAddress;\n-        if ( (socketAddress = matchHostnamePort( settingValue, constructor )) != null )\n-        {\n-            return socketAddress;\n-        }\n-\n-        throw new IllegalArgumentException( format(\n-                \"Configured socket address must be in the format \" +\n-                \"\\\"hostname:port\\\". \\\"%s\\\" does not conform to this format\", settingValue ) );\n+      return socketAddress;\n     }\n \n-    private static <T extends SocketAddress> T matchHostnamePort( String settingValue,\n-            BiFunction<String,Integer,T> constructor )\n+    throw new IllegalArgumentException(format(\n+        \"Configured socket address must be in the format \" +\n+            \"\\\"hostname:port\\\". \\\"%s\\\" does not conform to this format\", settingValue));\n+  }\n+\n+  private static <T extends SocketAddress> T matchHostnamePort(String settingValue,\n+                                                               BiFunction<String, Integer, T> constructor)\n+  {\n+    Matcher hostnamePortWithBracketsMatcher = hostnamePortPatternExt.matcher(settingValue);\n+    if (hostnamePortWithBracketsMatcher.matches())\n     {\n-        Matcher hostnamePortWithBracketsMatcher = hostnamePortPatternExt.matcher( settingValue );\n-        if ( hostnamePortWithBracketsMatcher.matches() )\n-        {\n-            String hostname = hostnamePortWithBracketsMatcher.group( \"hostname\" );\n-            int port = parseInt( hostnamePortWithBracketsMatcher.group( \"port\" ) );\n-            return constructor.apply( hostname, port );\n-        }\n-\n-        Matcher hostnamePortMatcher = hostnamePortPattern.matcher( settingValue );\n-        if ( hostnamePortMatcher.matches() )\n-        {\n-            String hostname = hostnamePortMatcher.group( \"hostname\" );\n-            int port = parseInt( hostnamePortMatcher.group( \"port\" ) );\n-            return constructor.apply( hostname, port );\n-        }\n-\n-        return null;\n+      String hostname = hostnamePortWithBracketsMatcher.group(\"hostname\");\n+      int port = parseInt(hostnamePortWithBracketsMatcher.group(\"port\"));\n+      return constructor.apply(hostname, port);\n     }\n \n-    private static <T extends SocketAddress> T matchPort( String settingValue, String defaultHostname,\n-            BiFunction<String,Integer,T> constructor )\n+    Matcher hostnamePortMatcher = hostnamePortPattern.matcher(settingValue);\n+    if (hostnamePortMatcher.matches())\n     {\n-        Matcher portMatcher = portPattern.matcher( settingValue );\n-        if ( portMatcher.matches() )\n-        {\n-            int port = parseInt( portMatcher.group( \"port\" ) );\n-            return constructor.apply( defaultHostname, port );\n-        }\n-\n-        return null;\n+      String hostname = hostnamePortMatcher.group(\"hostname\");\n+      int port = parseInt(hostnamePortMatcher.group(\"port\"));\n+      return constructor.apply(hostname, port);\n     }\n+\n+    return null;\n+  }\n+\n+  private static <T extends SocketAddress> T matchPort(String settingValue, String defaultHostname,\n+                                                       BiFunction<String, Integer, T> constructor)\n+  {\n+    Matcher portMatcher = portPattern.matcher(settingValue);\n+    if (portMatcher.matches())\n+    {\n+      int port = parseInt(portMatcher.group(\"port\"));\n+      return constructor.apply(defaultHostname, port);\n+    }\n+\n+    return null;\n+  }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/111/SocketAddressParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/111/SocketAddressParser.java\nindex 2cd741e5f47..cc653d09a46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/111/SocketAddressParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/111/SocketAddressParser.java\n@@ -32,9 +32,7 @@ public class SocketAddressParser\n     private static final Pattern hostnamePortPattern = Pattern.compile( \"(?<hostname>[^\\\\s]+):(?<port>\\\\d+)\" );\n     private static final Pattern portPattern = Pattern.compile( \":(?<port>\\\\d+)\" );\n \n-    public static <T extends SocketAddress> T deriveSocketAddress(\n-            String settingName, String settingValue, String defaultHostname, int defaultPort,\n-            BiFunction<String,Integer,T> constructor )\n+    public static <T extends SocketAddress> T deriveSocketAddress( String settingName, String settingValue, String defaultHostname, int defaultPort, BiFunction<String,Integer,T> constructor )\n     {\n         if ( settingValue == null )\n         {\n@@ -54,14 +52,10 @@ public class SocketAddressParser\n             return socketAddress;\n         }\n \n-        throw new IllegalArgumentException( format(\n-                \"Setting \\\"%s\\\" must be in the format \" +\n-                \"\\\"hostname:port\\\" or \\\":port\\\". \\\"%s\\\" does not conform to these formats\",\n-                settingName, settingValue ) );\n+        throw new IllegalArgumentException( format( \"Setting \\\"%s\\\" must be in the format \" + \"\\\"hostname:port\\\" or \\\":port\\\". \\\"%s\\\" does not conform to these formats\", settingName, settingValue ) );\n     }\n \n-    public static <T extends SocketAddress> T socketAddress( String settingValue,\n-            BiFunction<String,Integer,T> constructor )\n+    public static <T extends SocketAddress> T socketAddress( String settingValue, BiFunction<String,Integer,T> constructor )\n     {\n         if ( settingValue == null )\n         {\n@@ -76,13 +70,10 @@ public class SocketAddressParser\n             return socketAddress;\n         }\n \n-        throw new IllegalArgumentException( format(\n-                \"Configured socket address must be in the format \" +\n-                \"\\\"hostname:port\\\". \\\"%s\\\" does not conform to this format\", settingValue ) );\n+        throw new IllegalArgumentException( format( \"Configured socket address must be in the format \" + \"\\\"hostname:port\\\". \\\"%s\\\" does not conform to this format\", settingValue ) );\n     }\n \n-    private static <T extends SocketAddress> T matchHostnamePort( String settingValue,\n-            BiFunction<String,Integer,T> constructor )\n+    private static <T extends SocketAddress> T matchHostnamePort( String settingValue, BiFunction<String,Integer,T> constructor )\n     {\n         Matcher hostnamePortWithBracketsMatcher = hostnamePortPatternExt.matcher( settingValue );\n         if ( hostnamePortWithBracketsMatcher.matches() )\n@@ -103,8 +94,7 @@ public class SocketAddressParser\n         return null;\n     }\n \n-    private static <T extends SocketAddress> T matchPort( String settingValue, String defaultHostname,\n-            BiFunction<String,Integer,T> constructor )\n+    private static <T extends SocketAddress> T matchPort( String settingValue, String defaultHostname, BiFunction<String,Integer,T> constructor )\n     {\n         Matcher portMatcher = portPattern.matcher( settingValue );\n         if ( portMatcher.matches() )\n@@ -115,4 +105,4 @@ public class SocketAddressParser\n \n         return null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}