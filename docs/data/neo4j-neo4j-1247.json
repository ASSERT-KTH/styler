{
    "project_name": "neo4j-neo4j",
    "error_id": "1247",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "199",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "267",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "23",
                    "severity": "error",
                    "message": "'}' at column 23 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "302",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "345",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "427",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "499",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "660",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1247/TemporalType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1247/TemporalType.java\nindex 4fc0631e734..a411f46ae8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1247/TemporalType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1247/TemporalType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.nio.ByteBuffer;\n@@ -56,303 +57,295 @@ import static java.time.ZoneOffset.UTC;\n  */\n public enum TemporalType\n {\n-    TEMPORAL_INVALID( 0, \"Invalid\" )\n-            {\n-                @Override\n-                public Value decodeForTemporal( long[] valueBlocks, int offset )\n-                {\n-                    throw new UnsupportedOperationException( \"Cannot decode invalid temporal\" );\n-                }\n-\n-                @Override\n-                public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-                {\n-                    return PropertyType.BLOCKS_USED_FOR_BAD_TYPE_OR_ENCODING;\n-                }\n-\n-                @Override\n-                public ArrayValue decodeArray( Value dataValue )\n-                {\n-                    throw new UnsupportedOperationException( \"Cannot decode invalid temporal array\" );\n-                }\n-            },\n-    TEMPORAL_DATE( 1, \"Date\" )\n-            {\n-                @Override\n-                public Value decodeForTemporal( long[] valueBlocks, int offset )\n-                {\n-                    long epochDay = valueIsInlined( valueBlocks[offset] ) ? valueBlocks[offset] >>> 33 : valueBlocks[1 + offset];\n-                    return DateValue.epochDate( epochDay );\n-                }\n-\n-                @Override\n-                public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-                {\n-                    return valueIsInlined( firstBlock ) ? BLOCKS_LONG_INLINED : BLOCKS_LONG_NOT_INLINED;\n-                }\n-\n-                @Override\n-                public ArrayValue decodeArray( Value dataValue )\n-                {\n-                    if ( dataValue instanceof LongArray )\n-                    {\n-                        LongArray numbers = (LongArray) dataValue;\n-                        LocalDate[] dates = new LocalDate[numbers.length()];\n-                        for ( int i = 0; i < dates.length; i++ )\n-                        {\n-                            dates[i] = LocalDate.ofEpochDay( numbers.longValue( i ) );\n-                        }\n-                        return Values.dateArray( dates );\n-                    }\n-                    else\n-                    {\n-                        throw new InvalidRecordException( \"Array with unexpected type. Actual:\"\n-                                + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\" );\n-                    }\n-                }\n-\n-                private boolean valueIsInlined( long firstBlock )\n-                {\n-                    // [][][][i][ssss,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-                    return (firstBlock & 0x100000000L) > 0;\n-                }\n-            },\n-    TEMPORAL_LOCAL_TIME( 2, \"LocalTime\" )\n-            {\n-                @Override\n-                public Value decodeForTemporal( long[] valueBlocks, int offset )\n-                {\n-                    long nanoOfDay = valueIsInlined( valueBlocks[offset] ) ? valueBlocks[offset] >>> 33 : valueBlocks[1 + offset];\n-                    checkValidNanoOfDay( nanoOfDay );\n-                    return LocalTimeValue.localTime( nanoOfDay );\n-                }\n-\n-                @Override\n-                public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-                {\n-                    return valueIsInlined( firstBlock ) ? BLOCKS_LONG_INLINED : BLOCKS_LONG_NOT_INLINED;\n-                }\n-\n-                @Override\n-                public ArrayValue decodeArray( Value dataValue )\n-                {\n-                    if ( dataValue instanceof LongArray )\n-                    {\n-                        LongArray numbers = (LongArray) dataValue;\n-                        LocalTime[] times = new LocalTime[numbers.length()];\n-                        for ( int i = 0; i < times.length; i++ )\n-                        {\n-                            long nanoOfDay = numbers.longValue( i );\n-                            checkValidNanoOfDay( nanoOfDay );\n-                            times[i] = LocalTime.ofNanoOfDay( nanoOfDay );\n-                        }\n-                        return Values.localTimeArray( times );\n-                    }\n-                    else\n-                    {\n-                        throw new InvalidRecordException( \"Array with unexpected type. Actual:\"\n-                                + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\" );\n-                    }\n-                }\n-\n-                private boolean valueIsInlined( long firstBlock )\n-                {\n-                    // [][][][i][ssss,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-                    return (firstBlock & 0x100000000L) > 0;\n-                }\n-            },\n-    TEMPORAL_LOCAL_DATE_TIME( 3, \"LocalDateTime\" )\n-            {\n-                @Override\n-                public Value decodeForTemporal( long[] valueBlocks, int offset )\n-                {\n-                    long nanoOfSecond = valueBlocks[offset] >>> 32;\n-                    checkValidNanoOfSecond( nanoOfSecond );\n-                    long epochSecond = valueBlocks[1 + offset];\n-                    return LocalDateTimeValue.localDateTime( epochSecond, nanoOfSecond );\n-                }\n-\n-                @Override\n-                public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-                {\n-                    return BLOCKS_LOCAL_DATETIME;\n-                }\n-\n-                @Override\n-                public ArrayValue decodeArray( Value dataValue )\n-                {\n-                    if ( dataValue instanceof LongArray )\n-                    {\n-                        LongArray numbers = (LongArray) dataValue;\n-                        LocalDateTime[] dateTimes = new LocalDateTime[numbers.length() / BLOCKS_LOCAL_DATETIME];\n-                        for ( int i = 0; i < dateTimes.length; i++ )\n-                        {\n-                            long epochSecond = numbers.longValue( i * BLOCKS_LOCAL_DATETIME );\n-                            long nanoOfSecond = numbers.longValue( i * BLOCKS_LOCAL_DATETIME + 1 );\n-                            checkValidNanoOfSecond( nanoOfSecond );\n-                            dateTimes[i] = LocalDateTime.ofInstant(\n-                                    Instant.ofEpochSecond( epochSecond, nanoOfSecond ),\n-                                    UTC );\n-                        }\n-                        return Values.localDateTimeArray( dateTimes );\n-                    }\n-                    else\n-                    {\n-                        throw new InvalidRecordException( \"Array with unexpected type. Actual:\"\n-                                + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\" );\n-                    }\n-                }\n-            },\n-    TEMPORAL_TIME( 4, \"Time\" )\n-            {\n-                @Override\n-                public Value decodeForTemporal( long[] valueBlocks, int offset )\n-                {\n-                    int secondOffset = (int) (valueBlocks[offset] >>> 32);\n-                    long nanoOfDay = valueBlocks[1 + offset];\n-                    checkValidNanoOfDayWithOffset( nanoOfDay, secondOffset );\n-                    return TimeValue.time( nanoOfDay, ZoneOffset.ofTotalSeconds( secondOffset ) );\n-                }\n-\n-                @Override\n-                public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-                {\n-                    return BLOCKS_TIME;\n-                }\n-\n-                @Override\n-                public ArrayValue decodeArray( Value dataValue )\n-                {\n-                    if ( dataValue instanceof LongArray )\n-                    {\n-                        LongArray numbers = (LongArray) dataValue;\n-                        OffsetTime[] times = new OffsetTime[numbers.length() / BLOCKS_TIME];\n-                        for ( int i = 0; i < times.length; i++ )\n-                        {\n-                            long nanoOfDay = numbers.longValue( i * BLOCKS_TIME );\n-                            int secondOffset = (int) numbers.longValue( i * BLOCKS_TIME + 1 );\n-                            checkValidNanoOfDay( nanoOfDay );\n-                            times[i] = OffsetTime.of( LocalTime.ofNanoOfDay( nanoOfDay ), ZoneOffset.ofTotalSeconds( secondOffset ) );\n-                        }\n-                        return Values.timeArray( times );\n-                    }\n-                    else\n-                    {\n-                        throw new InvalidRecordException( \"Array with unexpected type. Actual:\"\n-                                + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\" );\n-                    }\n-                }\n-            },\n-    TEMPORAL_DATE_TIME( 5, \"DateTime\" )\n-            {\n-                @Override\n-                public Value decodeForTemporal( long[] valueBlocks, int offset )\n-                {\n-                    if ( storingZoneOffset( valueBlocks[offset] ) )\n-                    {\n-                        int nanoOfSecond = (int) (valueBlocks[offset] >>> 33);\n-                        checkValidNanoOfSecond( nanoOfSecond );\n-                        long epochSecond = valueBlocks[1 + offset];\n-                        int secondOffset = (int) valueBlocks[2 + offset];\n-                        return DateTimeValue.datetime( epochSecond, nanoOfSecond, ZoneOffset.ofTotalSeconds( secondOffset ) );\n-                    }\n-                    else\n-                    {\n-                        int nanoOfSecond = (int) (valueBlocks[offset] >>> 33);\n-                        checkValidNanoOfSecond( nanoOfSecond );\n-                        long epochSecond = valueBlocks[1 + offset];\n-                        short zoneNumber = (short) valueBlocks[2 + offset];\n-                        return DateTimeValue.datetime( epochSecond, nanoOfSecond,\n-                                ZoneId.of( TimeZones.map( zoneNumber ) ) );\n-                    }\n-                }\n-\n-                @Override\n-                public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-                {\n-                    return BLOCKS_DATETIME;\n-                }\n-\n-                @Override\n-                public ArrayValue decodeArray( Value dataValue )\n-                {\n-                    if ( dataValue instanceof LongArray )\n-                    {\n-                        LongArray numbers = (LongArray) dataValue;\n-                        ZonedDateTime[] dateTimes = new ZonedDateTime[numbers.length() / BLOCKS_DATETIME];\n-                        for ( int i = 0; i < dateTimes.length; i++ )\n-                        {\n-                            long epochSecond = numbers.longValue( i * BLOCKS_DATETIME );\n-                            long nanoOfSecond = numbers.longValue( i * BLOCKS_DATETIME + 1 );\n-                            checkValidNanoOfSecond( nanoOfSecond );\n-                            long zoneValue = numbers.longValue( i * BLOCKS_DATETIME + 2 );\n-                            if ( (zoneValue & 1) == 1 )\n-                            {\n-                                int secondOffset = (int) (zoneValue >>> 1);\n-                                dateTimes[i] =\n-                                        ZonedDateTime.ofInstant( Instant.ofEpochSecond( epochSecond, nanoOfSecond ),\n-                                                ZoneOffset.ofTotalSeconds( secondOffset ) );\n-                            }\n-                            else\n-                            {\n-                                short zoneNumber = (short) (zoneValue >>> 1);\n-                                dateTimes[i] = ZonedDateTime.ofInstant( Instant.ofEpochSecond( epochSecond, nanoOfSecond ),\n-                                        ZoneId.of( TimeZones.map( zoneNumber ) ) );\n-                            }\n-                        }\n-                        return Values.dateTimeArray( dateTimes );\n-                    }\n-                    else\n-                    {\n-                        throw new InvalidRecordException(\n-                                \"LocalTime array with unexpected type. Actual:\" + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\" );\n-                    }\n-                }\n-\n-                private boolean storingZoneOffset( long firstBlock )\n-                {\n-                    // [][][][i][ssss,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-                    return (firstBlock & 0x100000000L) > 0;\n-                }\n-            },\n-    TEMPORAL_DURATION( 6, \"Duration\" )\n-        {\n-            @Override\n-            public Value decodeForTemporal( long[] valueBlocks, int offset )\n-            {\n-                int nanos = (int) (valueBlocks[offset] >>> 32);\n-                long months = valueBlocks[1 + offset];\n-                long days = valueBlocks[2 + offset];\n-                long seconds = valueBlocks[3 + offset];\n-                return DurationValue.duration( months, days, seconds, nanos );\n-            }\n-\n-            @Override\n-            public int calculateNumberOfBlocksUsedForTemporal( long firstBlock )\n-            {\n-                return BLOCKS_DURATION;\n-            }\n-\n-            @Override\n-            public ArrayValue decodeArray( Value dataValue )\n-            {\n-                if ( dataValue instanceof LongArray )\n-                {\n-                    LongArray numbers = (LongArray) dataValue;\n-                    DurationValue[] durations = new DurationValue[numbers.length() / BLOCKS_DURATION];\n-                    for ( int i = 0; i < durations.length; i++ )\n-                    {\n-                        durations[i] = DurationValue.duration( numbers.longValue( i * BLOCKS_DURATION ), numbers.longValue( i * BLOCKS_DURATION + 1 ),\n-                                numbers.longValue( i * BLOCKS_DURATION + 2 ), numbers.longValue( i * BLOCKS_DURATION + 3 ) );\n-                    }\n-                    return Values.durationArray( durations );\n-                }\n-                else\n-                {\n-                    throw new InvalidRecordException( \"Array with unexpected type. Actual:\" + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\" );\n-                }\n-            }\n-        };\n+    TEMPORAL_INVALID(0, \"Invalid\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              throw new UnsupportedOperationException(\"Cannot decode invalid temporal\");\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return PropertyType.BLOCKS_USED_FOR_BAD_TYPE_OR_ENCODING;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              throw new UnsupportedOperationException(\"Cannot decode invalid temporal array\");\n+          }\n+      },\n+    TEMPORAL_DATE(1, \"Date\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              long epochDay = valueIsInlined(valueBlocks[offset]) ? valueBlocks[offset] >>> 33 : valueBlocks[1 + offset];\n+              return DateValue.epochDate(epochDay);\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return valueIsInlined(firstBlock) ? BLOCKS_LONG_INLINED : BLOCKS_LONG_NOT_INLINED;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              if (dataValue instanceof LongArray)\n+              {\n+                  LongArray numbers = (LongArray) dataValue;\n+                  LocalDate[] dates = new LocalDate[numbers.length()];\n+                  for (int i = 0; i < dates.length; i++)\n+                  {\n+                      dates[i] = LocalDate.ofEpochDay(numbers.longValue(i));\n+                  }\n+                  return Values.dateArray(dates);\n+              } else\n+              {\n+                  throw new InvalidRecordException(\"Array with unexpected type. Actual:\"\n+                    + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\");\n+              }\n+          }\n+\n+          private boolean valueIsInlined(long firstBlock)\n+          {\n+              // [][][][i][ssss,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+              return (firstBlock & 0x100000000L) > 0;\n+          }\n+      },\n+    TEMPORAL_LOCAL_TIME(2, \"LocalTime\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              long nanoOfDay = valueIsInlined(valueBlocks[offset]) ? valueBlocks[offset] >>> 33 : valueBlocks[1 + offset];\n+              checkValidNanoOfDay(nanoOfDay);\n+              return LocalTimeValue.localTime(nanoOfDay);\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return valueIsInlined(firstBlock) ? BLOCKS_LONG_INLINED : BLOCKS_LONG_NOT_INLINED;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              if (dataValue instanceof LongArray)\n+              {\n+                  LongArray numbers = (LongArray) dataValue;\n+                  LocalTime[] times = new LocalTime[numbers.length()];\n+                  for (int i = 0; i < times.length; i++)\n+                  {\n+                      long nanoOfDay = numbers.longValue(i);\n+                      checkValidNanoOfDay(nanoOfDay);\n+                      times[i] = LocalTime.ofNanoOfDay(nanoOfDay);\n+                  }\n+                  return Values.localTimeArray(times);\n+              } else\n+              {\n+                  throw new InvalidRecordException(\"Array with unexpected type. Actual:\"\n+                    + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\");\n+              }\n+          }\n+\n+          private boolean valueIsInlined(long firstBlock)\n+          {\n+              // [][][][i][ssss,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+              return (firstBlock & 0x100000000L) > 0;\n+          }\n+      },\n+    TEMPORAL_LOCAL_DATE_TIME(3, \"LocalDateTime\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              long nanoOfSecond = valueBlocks[offset] >>> 32;\n+              checkValidNanoOfSecond(nanoOfSecond);\n+              long epochSecond = valueBlocks[1 + offset];\n+              return LocalDateTimeValue.localDateTime(epochSecond, nanoOfSecond);\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return BLOCKS_LOCAL_DATETIME;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              if (dataValue instanceof LongArray)\n+              {\n+                  LongArray numbers = (LongArray) dataValue;\n+                  LocalDateTime[] dateTimes = new LocalDateTime[numbers.length() / BLOCKS_LOCAL_DATETIME];\n+                  for (int i = 0; i < dateTimes.length; i++)\n+                  {\n+                      long epochSecond = numbers.longValue(i * BLOCKS_LOCAL_DATETIME);\n+                      long nanoOfSecond = numbers.longValue(i * BLOCKS_LOCAL_DATETIME + 1);\n+                      checkValidNanoOfSecond(nanoOfSecond);\n+                      dateTimes[i] = LocalDateTime.ofInstant(\n+                        Instant.ofEpochSecond(epochSecond, nanoOfSecond),\n+                        UTC);\n+                  }\n+                  return Values.localDateTimeArray(dateTimes);\n+              } else\n+              {\n+                  throw new InvalidRecordException(\"Array with unexpected type. Actual:\"\n+                    + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\");\n+              }\n+          }\n+      },\n+    TEMPORAL_TIME(4, \"Time\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              int secondOffset = (int) (valueBlocks[offset] >>> 32);\n+              long nanoOfDay = valueBlocks[1 + offset];\n+              checkValidNanoOfDayWithOffset(nanoOfDay, secondOffset);\n+              return TimeValue.time(nanoOfDay, ZoneOffset.ofTotalSeconds(secondOffset));\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return BLOCKS_TIME;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              if (dataValue instanceof LongArray)\n+              {\n+                  LongArray numbers = (LongArray) dataValue;\n+                  OffsetTime[] times = new OffsetTime[numbers.length() / BLOCKS_TIME];\n+                  for (int i = 0; i < times.length; i++)\n+                  {\n+                      long nanoOfDay = numbers.longValue(i * BLOCKS_TIME);\n+                      int secondOffset = (int) numbers.longValue(i * BLOCKS_TIME + 1);\n+                      checkValidNanoOfDay(nanoOfDay);\n+                      times[i] = OffsetTime.of(LocalTime.ofNanoOfDay(nanoOfDay), ZoneOffset.ofTotalSeconds(secondOffset));\n+                  }\n+                  return Values.timeArray(times);\n+              } else\n+              {\n+                  throw new InvalidRecordException(\"Array with unexpected type. Actual:\"\n+                    + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\");\n+              }\n+          }\n+      },\n+    TEMPORAL_DATE_TIME(5, \"DateTime\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              if (storingZoneOffset(valueBlocks[offset]))\n+              {\n+                  int nanoOfSecond = (int) (valueBlocks[offset] >>> 33);\n+                  checkValidNanoOfSecond(nanoOfSecond);\n+                  long epochSecond = valueBlocks[1 + offset];\n+                  int secondOffset = (int) valueBlocks[2 + offset];\n+                  return DateTimeValue.datetime(epochSecond, nanoOfSecond, ZoneOffset.ofTotalSeconds(secondOffset));\n+              } else\n+              {\n+                  int nanoOfSecond = (int) (valueBlocks[offset] >>> 33);\n+                  checkValidNanoOfSecond(nanoOfSecond);\n+                  long epochSecond = valueBlocks[1 + offset];\n+                  short zoneNumber = (short) valueBlocks[2 + offset];\n+                  return DateTimeValue.datetime(epochSecond, nanoOfSecond,\n+                    ZoneId.of(TimeZones.map(zoneNumber)));\n+              }\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return BLOCKS_DATETIME;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              if (dataValue instanceof LongArray)\n+              {\n+                  LongArray numbers = (LongArray) dataValue;\n+                  ZonedDateTime[] dateTimes = new ZonedDateTime[numbers.length() / BLOCKS_DATETIME];\n+                  for (int i = 0; i < dateTimes.length; i++)\n+                  {\n+                      long epochSecond = numbers.longValue(i * BLOCKS_DATETIME);\n+                      long nanoOfSecond = numbers.longValue(i * BLOCKS_DATETIME + 1);\n+                      checkValidNanoOfSecond(nanoOfSecond);\n+                      long zoneValue = numbers.longValue(i * BLOCKS_DATETIME + 2);\n+                      if ((zoneValue & 1) == 1)\n+                      {\n+                          int secondOffset = (int) (zoneValue >>> 1);\n+                          dateTimes[i] =\n+                            ZonedDateTime.ofInstant(Instant.ofEpochSecond(epochSecond, nanoOfSecond),\n+                              ZoneOffset.ofTotalSeconds(secondOffset));\n+                      } else\n+                      {\n+                          short zoneNumber = (short) (zoneValue >>> 1);\n+                          dateTimes[i] = ZonedDateTime.ofInstant(Instant.ofEpochSecond(epochSecond, nanoOfSecond),\n+                            ZoneId.of(TimeZones.map(zoneNumber)));\n+                      }\n+                  }\n+                  return Values.dateTimeArray(dateTimes);\n+              } else\n+              {\n+                  throw new InvalidRecordException(\n+                    \"LocalTime array with unexpected type. Actual:\" + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\");\n+              }\n+          }\n+\n+          private boolean storingZoneOffset(long firstBlock)\n+          {\n+              // [][][][i][ssss,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+              return (firstBlock & 0x100000000L) > 0;\n+          }\n+      },\n+    TEMPORAL_DURATION(6, \"Duration\")\n+      {\n+          @Override\n+          public Value decodeForTemporal(long[] valueBlocks, int offset)\n+          {\n+              int nanos = (int) (valueBlocks[offset] >>> 32);\n+              long months = valueBlocks[1 + offset];\n+              long days = valueBlocks[2 + offset];\n+              long seconds = valueBlocks[3 + offset];\n+              return DurationValue.duration(months, days, seconds, nanos);\n+          }\n+\n+          @Override\n+          public int calculateNumberOfBlocksUsedForTemporal(long firstBlock)\n+          {\n+              return BLOCKS_DURATION;\n+          }\n+\n+          @Override\n+          public ArrayValue decodeArray(Value dataValue)\n+          {\n+              if (dataValue instanceof LongArray)\n+              {\n+                  LongArray numbers = (LongArray) dataValue;\n+                  DurationValue[] durations = new DurationValue[numbers.length() / BLOCKS_DURATION];\n+                  for (int i = 0; i < durations.length; i++)\n+                  {\n+                      durations[i] = DurationValue.duration(numbers.longValue(i * BLOCKS_DURATION), numbers.longValue(i * BLOCKS_DURATION + 1),\n+                        numbers.longValue(i * BLOCKS_DURATION + 2), numbers.longValue(i * BLOCKS_DURATION + 3));\n+                  }\n+                  return Values.durationArray(durations);\n+              } else\n+              {\n+                  throw new InvalidRecordException(\"Array with unexpected type. Actual:\" + dataValue.getClass().getSimpleName() + \". Expected: LongArray.\");\n+              }\n+          }\n+      };\n \n     private static final int BLOCKS_LONG_INLINED = 1;\n     private static final int BLOCKS_LONG_NOT_INLINED = 2;\n@@ -368,61 +361,60 @@ public enum TemporalType\n     {\n         private final int temporalType;\n \n-        private TemporalHeader( int temporalType )\n+        private TemporalHeader(int temporalType)\n         {\n             this.temporalType = temporalType;\n         }\n \n-        private void writeArrayHeaderTo( byte[] bytes )\n+        private void writeArrayHeaderTo(byte[] bytes)\n         {\n             bytes[0] = (byte) PropertyType.TEMPORAL.intValue();\n             bytes[1] = (byte) temporalType;\n         }\n \n-        static TemporalHeader fromArrayHeaderBytes( byte[] header )\n+        static TemporalHeader fromArrayHeaderBytes(byte[] header)\n         {\n-            int temporalType = Byte.toUnsignedInt( header[1] );\n-            return new TemporalHeader( temporalType );\n+            int temporalType = Byte.toUnsignedInt(header[1]);\n+            return new TemporalHeader(temporalType);\n         }\n \n-        public static TemporalHeader fromArrayHeaderByteBuffer( ByteBuffer buffer )\n+        public static TemporalHeader fromArrayHeaderByteBuffer(ByteBuffer buffer)\n         {\n-            int temporalType = Byte.toUnsignedInt( buffer.get() );\n-            return new TemporalHeader( temporalType );\n+            int temporalType = Byte.toUnsignedInt(buffer.get());\n+            return new TemporalHeader(temporalType);\n         }\n     }\n \n     private static final TemporalType[] TYPES = TemporalType.values();\n-    private static final Map<String,TemporalType> all = new HashMap<>( TYPES.length );\n+    private static final Map<String, TemporalType> all = new HashMap<>(TYPES.length);\n \n     static\n     {\n-        for ( TemporalType temporalType : TYPES )\n+        for (TemporalType temporalType : TYPES)\n         {\n-            all.put( temporalType.name, temporalType );\n+            all.put(temporalType.name, temporalType);\n         }\n     }\n \n     private static final long TEMPORAL_TYPE_MASK = 0x00000000F0000000L;\n \n-    private static int getTemporalType( long firstBlock )\n+    private static int getTemporalType(long firstBlock)\n     {\n         return (int) ((firstBlock & TEMPORAL_TYPE_MASK) >> 28);\n     }\n \n-    public static int calculateNumberOfBlocksUsed( long firstBlock )\n+    public static int calculateNumberOfBlocksUsed(long firstBlock)\n     {\n-        TemporalType geometryType = find( getTemporalType( firstBlock ) );\n-        return geometryType.calculateNumberOfBlocksUsedForTemporal( firstBlock );\n+        TemporalType geometryType = find(getTemporalType(firstBlock));\n+        return geometryType.calculateNumberOfBlocksUsedForTemporal(firstBlock);\n     }\n \n-    private static TemporalType find( int temporalType )\n+    private static TemporalType find(int temporalType)\n     {\n-        if ( temporalType < TYPES.length && temporalType >= 0 )\n+        if (temporalType < TYPES.length && temporalType >= 0)\n         {\n             return TYPES[temporalType];\n-        }\n-        else\n+        } else\n         {\n             // Kernel code requires no exceptions in deeper PropertyChain processing of corrupt/invalid data\n             return TEMPORAL_INVALID;\n@@ -432,57 +424,57 @@ public enum TemporalType\n     /**\n      * Any out of range value means a store corruption\n      */\n-    private static void checkValidNanoOfDay( long nanoOfDay )\n+    private static void checkValidNanoOfDay(long nanoOfDay)\n     {\n-        if ( nanoOfDay > LocalTime.MAX.toNanoOfDay() || nanoOfDay < LocalTime.MIN.toNanoOfDay() )\n+        if (nanoOfDay > LocalTime.MAX.toNanoOfDay() || nanoOfDay < LocalTime.MIN.toNanoOfDay())\n         {\n-            throw new InvalidRecordException( \"Nanosecond of day out of range:\" + nanoOfDay );\n+            throw new InvalidRecordException(\"Nanosecond of day out of range:\" + nanoOfDay);\n         }\n     }\n \n     /**\n      * Any out of range value means a store corruption\n      */\n-    private static void checkValidNanoOfDayWithOffset( long nanoOfDayUTC, int secondOffset )\n+    private static void checkValidNanoOfDayWithOffset(long nanoOfDayUTC, int secondOffset)\n     {\n-        long nanoOfDay = TemporalUtil.nanosOfDayToLocal( nanoOfDayUTC, secondOffset );\n-        checkValidNanoOfDay( nanoOfDay );\n+        long nanoOfDay = TemporalUtil.nanosOfDayToLocal(nanoOfDayUTC, secondOffset);\n+        checkValidNanoOfDay(nanoOfDay);\n     }\n \n     /**\n      * Any out of range value means a store corruption\n      */\n-    private static void checkValidNanoOfSecond( long nanoOfSecond )\n+    private static void checkValidNanoOfSecond(long nanoOfSecond)\n     {\n-        if ( nanoOfSecond > 999_999_999 || nanoOfSecond < 0 )\n+        if (nanoOfSecond > 999_999_999 || nanoOfSecond < 0)\n         {\n-            throw new InvalidRecordException( \"Nanosecond of second out of range:\" + nanoOfSecond );\n+            throw new InvalidRecordException(\"Nanosecond of second out of range:\" + nanoOfSecond);\n         }\n     }\n \n-    public static Value decode( PropertyBlock block )\n+    public static Value decode(PropertyBlock block)\n     {\n-        return decode( block.getValueBlocks(), 0 );\n+        return decode(block.getValueBlocks(), 0);\n     }\n \n-    public static Value decode( long[] valueBlocks, int offset )\n+    public static Value decode(long[] valueBlocks, int offset)\n     {\n         long firstBlock = valueBlocks[offset];\n-        int temporalType = getTemporalType( firstBlock );\n-        return find( temporalType ).decodeForTemporal( valueBlocks, offset );\n+        int temporalType = getTemporalType(firstBlock);\n+        return find(temporalType).decodeForTemporal(valueBlocks, offset);\n     }\n \n-    public static long[] encodeDate( int keyId, long epochDay )\n+    public static long[] encodeDate(int keyId, long epochDay)\n     {\n-        return encodeLong( keyId, epochDay, TemporalType.TEMPORAL_DATE.temporalType );\n+        return encodeLong(keyId, epochDay, TemporalType.TEMPORAL_DATE.temporalType);\n     }\n \n-    public static long[] encodeLocalTime( int keyId, long nanoOfDay )\n+    public static long[] encodeLocalTime(int keyId, long nanoOfDay)\n     {\n-        return encodeLong( keyId, nanoOfDay, TemporalType.TEMPORAL_LOCAL_TIME.temporalType );\n+        return encodeLong(keyId, nanoOfDay, TemporalType.TEMPORAL_LOCAL_TIME.temporalType);\n     }\n \n-    private static long[] encodeLong( int keyId, long val, int temporalType )\n+    private static long[] encodeLong(int keyId, long val, int temporalType)\n     {\n         int idBits = StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS;\n \n@@ -490,12 +482,11 @@ public enum TemporalType\n         long temporalTypeBits = temporalType << (idBits + 4);\n \n         long[] data;\n-        if ( ShortArray.LONG.getRequiredBits( val ) <= 64 - 33 )\n+        if (ShortArray.LONG.getRequiredBits(val) <= 64 - 33)\n         {   // We only need one block for this value\n             data = new long[BLOCKS_LONG_INLINED];\n             data[0] = keyAndType | temporalTypeBits | (1L << 32) | (val << 33);\n-        }\n-        else\n+        } else\n         {   // We need two blocks for this value\n             data = new long[BLOCKS_LONG_NOT_INLINED];\n             data[0] = keyAndType | temporalTypeBits;\n@@ -505,7 +496,7 @@ public enum TemporalType\n         return data;\n     }\n \n-    public static long[] encodeLocalDateTime( int keyId, long epochSecond, long nanoOfSecond )\n+    public static long[] encodeLocalDateTime(int keyId, long epochSecond, long nanoOfSecond)\n     {\n         int idBits = StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS;\n \n@@ -520,10 +511,10 @@ public enum TemporalType\n         return data;\n     }\n \n-    public static long[] encodeDateTime( int keyId, long epochSecond, long nanoOfSecond, String zoneId )\n+    public static long[] encodeDateTime(int keyId, long epochSecond, long nanoOfSecond, String zoneId)\n     {\n         int idBits = StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS;\n-        short zoneNumber = TimeZones.map( zoneId );\n+        short zoneNumber = TimeZones.map(zoneId);\n \n         long keyAndType = keyId | (((long) (PropertyType.TEMPORAL.intValue()) << idBits));\n         long temporalTypeBits = TemporalType.TEMPORAL_DATE_TIME.temporalType << (idBits + 4);\n@@ -537,7 +528,7 @@ public enum TemporalType\n         return data;\n     }\n \n-    public static long[] encodeDateTime( int keyId, long epochSecond, long nanoOfSecond, int secondOffset )\n+    public static long[] encodeDateTime(int keyId, long epochSecond, long nanoOfSecond, int secondOffset)\n     {\n         int idBits = StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS;\n \n@@ -553,7 +544,7 @@ public enum TemporalType\n         return data;\n     }\n \n-    public static long[] encodeTime( int keyId, long nanoOfDayUTC, int secondOffset )\n+    public static long[] encodeTime(int keyId, long nanoOfDayUTC, int secondOffset)\n     {\n         int idBits = StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS;\n \n@@ -568,7 +559,7 @@ public enum TemporalType\n         return data;\n     }\n \n-    public static long[] encodeDuration( int keyId, long months, long days, long seconds, int nanos )\n+    public static long[] encodeDuration(int keyId, long months, long days, long seconds, int nanos)\n     {\n         int idBits = StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS;\n \n@@ -584,134 +575,133 @@ public enum TemporalType\n         return data;\n     }\n \n-    public static byte[] encodeDateArray( LocalDate[] dates )\n+    public static byte[] encodeDateArray(LocalDate[] dates)\n     {\n         long[] data = new long[dates.length];\n-        for ( int i = 0; i < data.length; i++ )\n+        for (int i = 0; i < data.length; i++)\n         {\n             data[i] = dates[i].toEpochDay();\n         }\n-        TemporalHeader header = new TemporalHeader( TemporalType.TEMPORAL_DATE.temporalType );\n-        byte[] bytes = DynamicArrayStore.encodeFromNumbers( data, DynamicArrayStore.TEMPORAL_HEADER_SIZE );\n-        header.writeArrayHeaderTo( bytes );\n+        TemporalHeader header = new TemporalHeader(TemporalType.TEMPORAL_DATE.temporalType);\n+        byte[] bytes = DynamicArrayStore.encodeFromNumbers(data, DynamicArrayStore.TEMPORAL_HEADER_SIZE);\n+        header.writeArrayHeaderTo(bytes);\n         return bytes;\n     }\n \n-    public static byte[] encodeLocalTimeArray( LocalTime[] times )\n+    public static byte[] encodeLocalTimeArray(LocalTime[] times)\n     {\n         long[] data = new long[times.length];\n-        for ( int i = 0; i < data.length; i++ )\n+        for (int i = 0; i < data.length; i++)\n         {\n             data[i] = times[i].toNanoOfDay();\n         }\n-        TemporalHeader header = new TemporalHeader( TemporalType.TEMPORAL_LOCAL_TIME.temporalType );\n-        byte[] bytes = DynamicArrayStore.encodeFromNumbers( data, DynamicArrayStore.TEMPORAL_HEADER_SIZE );\n-        header.writeArrayHeaderTo( bytes );\n+        TemporalHeader header = new TemporalHeader(TemporalType.TEMPORAL_LOCAL_TIME.temporalType);\n+        byte[] bytes = DynamicArrayStore.encodeFromNumbers(data, DynamicArrayStore.TEMPORAL_HEADER_SIZE);\n+        header.writeArrayHeaderTo(bytes);\n         return bytes;\n     }\n \n-    public static byte[] encodeLocalDateTimeArray( LocalDateTime[] dateTimes )\n+    public static byte[] encodeLocalDateTimeArray(LocalDateTime[] dateTimes)\n     {\n         long[] data = new long[dateTimes.length * BLOCKS_LOCAL_DATETIME];\n-        for ( int i = 0; i < dateTimes.length; i++ )\n+        for (int i = 0; i < dateTimes.length; i++)\n         {\n-            data[i * BLOCKS_LOCAL_DATETIME] = dateTimes[i].toEpochSecond( UTC );\n+            data[i * BLOCKS_LOCAL_DATETIME] = dateTimes[i].toEpochSecond(UTC);\n             data[i * BLOCKS_LOCAL_DATETIME + 1] = dateTimes[i].getNano();\n         }\n-        TemporalHeader header = new TemporalHeader( TemporalType.TEMPORAL_LOCAL_DATE_TIME.temporalType );\n-        byte[] bytes = DynamicArrayStore.encodeFromNumbers( data, DynamicArrayStore.TEMPORAL_HEADER_SIZE );\n-        header.writeArrayHeaderTo( bytes );\n+        TemporalHeader header = new TemporalHeader(TemporalType.TEMPORAL_LOCAL_DATE_TIME.temporalType);\n+        byte[] bytes = DynamicArrayStore.encodeFromNumbers(data, DynamicArrayStore.TEMPORAL_HEADER_SIZE);\n+        header.writeArrayHeaderTo(bytes);\n         return bytes;\n     }\n \n-    public static byte[] encodeTimeArray( OffsetTime[] times )\n+    public static byte[] encodeTimeArray(OffsetTime[] times)\n     {\n         // We could store this in dateTimes.length * 1.5 if we wanted\n-        long[] data = new long[(int) (Math.ceil( times.length * BLOCKS_TIME ))];\n+        long[] data = new long[(int) (Math.ceil(times.length * BLOCKS_TIME))];\n         int i;\n-        for ( i = 0; i < times.length; i++ )\n+        for (i = 0; i < times.length; i++)\n         {\n             data[i * BLOCKS_TIME] = times[i].toLocalTime().toNanoOfDay();\n             data[i * BLOCKS_TIME + 1] = times[i].getOffset().getTotalSeconds();\n         }\n \n-        TemporalHeader header = new TemporalHeader( TemporalType.TEMPORAL_TIME.temporalType );\n-        byte[] bytes = DynamicArrayStore.encodeFromNumbers( data, DynamicArrayStore.TEMPORAL_HEADER_SIZE );\n-        header.writeArrayHeaderTo( bytes );\n+        TemporalHeader header = new TemporalHeader(TemporalType.TEMPORAL_TIME.temporalType);\n+        byte[] bytes = DynamicArrayStore.encodeFromNumbers(data, DynamicArrayStore.TEMPORAL_HEADER_SIZE);\n+        header.writeArrayHeaderTo(bytes);\n         return bytes;\n     }\n \n-    public static byte[] encodeDateTimeArray( ZonedDateTime[] dateTimes )\n+    public static byte[] encodeDateTimeArray(ZonedDateTime[] dateTimes)\n     {\n         // We could store this in dateTimes.length * 2.5 if we wanted\n         long[] data = new long[dateTimes.length * BLOCKS_DATETIME];\n \n         int i;\n-        for ( i = 0; i < dateTimes.length; i++ )\n+        for (i = 0; i < dateTimes.length; i++)\n         {\n             data[i * BLOCKS_DATETIME] = dateTimes[i].toEpochSecond();\n             data[i * BLOCKS_DATETIME + 1] = dateTimes[i].getNano();\n-            if ( dateTimes[i].getZone() instanceof ZoneOffset )\n+            if (dateTimes[i].getZone() instanceof ZoneOffset)\n             {\n                 ZoneOffset offset = (ZoneOffset) dateTimes[i].getZone();\n                 int secondOffset = offset.getTotalSeconds();\n                 // Set lowest bit to 1 means offset\n                 data[i * BLOCKS_DATETIME + 2] = secondOffset << 1 | 1L;\n-            }\n-            else\n+            } else\n             {\n                 String timeZoneId = dateTimes[i].getZone().getId();\n-                short zoneNumber = TimeZones.map( timeZoneId );\n+                short zoneNumber = TimeZones.map(timeZoneId);\n                 // Set lowest bit to 0 means zone id\n                 data[i * BLOCKS_DATETIME + 2] = zoneNumber << 1;\n             }\n         }\n \n-        TemporalHeader header = new TemporalHeader( TemporalType.TEMPORAL_DATE_TIME.temporalType );\n-        byte[] bytes = DynamicArrayStore.encodeFromNumbers( data, DynamicArrayStore.TEMPORAL_HEADER_SIZE );\n-        header.writeArrayHeaderTo( bytes );\n+        TemporalHeader header = new TemporalHeader(TemporalType.TEMPORAL_DATE_TIME.temporalType);\n+        byte[] bytes = DynamicArrayStore.encodeFromNumbers(data, DynamicArrayStore.TEMPORAL_HEADER_SIZE);\n+        header.writeArrayHeaderTo(bytes);\n         return bytes;\n     }\n \n-    public static byte[] encodeDurationArray( DurationValue[] durations )\n+    public static byte[] encodeDurationArray(DurationValue[] durations)\n     {\n         long[] data = new long[durations.length * BLOCKS_DURATION];\n-        for ( int i = 0; i < durations.length; i++ )\n+        for (int i = 0; i < durations.length; i++)\n         {\n-            data[i * BLOCKS_DURATION] = durations[i].get( ChronoUnit.MONTHS );\n-            data[i * BLOCKS_DURATION + 1] = durations[i].get( ChronoUnit.DAYS );\n-            data[i * BLOCKS_DURATION + 2] = durations[i].get( ChronoUnit.SECONDS );\n-            data[i * BLOCKS_DURATION + 3] = durations[i].get( ChronoUnit.NANOS );\n+            data[i * BLOCKS_DURATION] = durations[i].get(ChronoUnit.MONTHS);\n+            data[i * BLOCKS_DURATION + 1] = durations[i].get(ChronoUnit.DAYS);\n+            data[i * BLOCKS_DURATION + 2] = durations[i].get(ChronoUnit.SECONDS);\n+            data[i * BLOCKS_DURATION + 3] = durations[i].get(ChronoUnit.NANOS);\n         }\n-        TemporalHeader header = new TemporalHeader( TemporalType.TEMPORAL_DURATION.temporalType );\n-        byte[] bytes = DynamicArrayStore.encodeFromNumbers( data, DynamicArrayStore.TEMPORAL_HEADER_SIZE );\n-        header.writeArrayHeaderTo( bytes );\n+        TemporalHeader header = new TemporalHeader(TemporalType.TEMPORAL_DURATION.temporalType);\n+        byte[] bytes = DynamicArrayStore.encodeFromNumbers(data, DynamicArrayStore.TEMPORAL_HEADER_SIZE);\n+        header.writeArrayHeaderTo(bytes);\n         return bytes;\n     }\n \n-    public static ArrayValue decodeTemporalArray( TemporalHeader header, byte[] data )\n+    public static ArrayValue decodeTemporalArray(TemporalHeader header, byte[] data)\n     {\n-        byte[] dataHeader = PropertyType.ARRAY.readDynamicRecordHeader( data );\n+        byte[] dataHeader = PropertyType.ARRAY.readDynamicRecordHeader(data);\n         byte[] dataBody = new byte[data.length - dataHeader.length];\n-        System.arraycopy( data, dataHeader.length, dataBody, 0, dataBody.length );\n-        Value dataValue = DynamicArrayStore.getRightArray( Pair.of( dataHeader, dataBody ) );\n-        return find( header.temporalType ).decodeArray( dataValue );\n+        System.arraycopy(data, dataHeader.length, dataBody, 0, dataBody.length);\n+        Value dataValue = DynamicArrayStore.getRightArray(Pair.of(dataHeader, dataBody));\n+        return find(header.temporalType).decodeArray(dataValue);\n     }\n \n     private final int temporalType;\n     private final String name;\n \n-    TemporalType( int temporalType, String name )\n+    TemporalType(int temporalType, String name)\n     {\n         this.temporalType = temporalType;\n         this.name = name;\n     }\n \n-    public abstract Value decodeForTemporal( long[] valueBlocks, int offset );\n+    public abstract Value decodeForTemporal(long[] valueBlocks, int offset);\n \n-    public abstract int calculateNumberOfBlocksUsedForTemporal( long firstBlock );\n+    public abstract int calculateNumberOfBlocksUsedForTemporal(long firstBlock);\n \n-    public abstract ArrayValue decodeArray( Value dataValue );\n+    public abstract ArrayValue decodeArray(Value dataValue);\n \n     public String getName()\n     {\n",
            "diff_size": 394
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}