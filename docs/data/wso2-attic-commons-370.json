{
    "project_name": "wso2-attic-commons",
    "error_id": "370",
    "information": {
        "errors": [
            {
                "line": "152",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "          if(node.getNodeType() == Node.DOCUMENT_NODE)\n              node = ((Document)node).getDocumentElement();\n          if(__log.isDebugEnabled()) __log.debug(\"Returned node: type=\"+node.getNodeType()+\", \"+ DOMUtils.domToString(node));\n          return node;\n      } else {\n          // text and html outputs are handled the same way",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/370/XslTransformHandler.java\nindex a1e0c66c399..b4aee8cfd1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/370/XslTransformHandler.java\n@@ -149,7 +149,8 @@ public class XslTransformHandler {\n           Node node = result.getNode();\n           if(node.getNodeType() == Node.DOCUMENT_NODE)\n               node = ((Document)node).getDocumentElement();\n-          if(__log.isDebugEnabled()) __log.debug(\"Returned node: type=\"+node.getNodeType()+\", \"+ DOMUtils.domToString(node));\n+              if(__log.isDebugEnabled()) __log.debug(\"Returned node: type=\"+node.getNodeType()+\", \"\n+              + DOMUtils.domToString(node));\n           return node;\n       } else {\n           // text and html outputs are handled the same way\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/370/XslTransformHandler.java\nindex a1e0c66c399..e8436a53090 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/370/XslTransformHandler.java\n@@ -55,7 +55,7 @@ import org.w3c.dom.Node;\n  */\n public class XslTransformHandler {\n \n-    private static final Log __log = LogFactory.getLog(XslTransformHandler.class);\n+  private static final Log __log = LogFactory.getLog(XslTransformHandler.class);\n \n   private static XslTransformHandler __singleton;\n \n@@ -64,6 +64,7 @@ public class XslTransformHandler {\n \n   /**\n    * Singleton access.\n+   *\n    * @return single XslTransformHandler instance.\n    */\n   public static synchronized XslTransformHandler getInstance() {\n@@ -73,10 +74,12 @@ public class XslTransformHandler {\n     return __singleton;\n   }\n \n-  private XslTransformHandler() { }\n+  private XslTransformHandler() {\n+  }\n \n   /**\n    * Sets the transformer factory for initialization.\n+   *\n    * @param transformerFactory\n    */\n   public void setTransformerFactory(TransformerFactory transformerFactory) {\n@@ -85,8 +88,9 @@ public class XslTransformHandler {\n \n   /**\n    * Always parses the provided stylesheet and stores it in cache from its URI.\n-   * @param uri referencing the stylesheet\n-   * @param body of the XSL document\n+   *\n+   * @param uri      referencing the stylesheet\n+   * @param body     of the XSL document\n    * @param resolver used to resolve includes and imports\n    */\n   public void parseXSLSheet(QName processQName, URI uri, String body, URIResolver resolver) {\n@@ -97,7 +101,7 @@ public class XslTransformHandler {\n     } catch (TransformerConfigurationException e) {\n       throw new XslTransformException(e);\n     }\n-    synchronized(_templateCache) {\n+    synchronized (_templateCache) {\n       _templateCache.put(processQName, uri, tm);\n     }\n   }\n@@ -105,8 +109,9 @@ public class XslTransformHandler {\n   /**\n    * Parses the provided stylesheet and stores it in cache only if it's not there\n    * already.\n-   * @param uri referencing the stylesheet\n-   * @param body of the XSL document\n+   *\n+   * @param uri      referencing the stylesheet\n+   * @param body     of the XSL document\n    * @param resolver used to resolve includes and imports\n    */\n   public void cacheXSLSheet(QName processQName, URI uri, String body, URIResolver resolver) {\n@@ -114,26 +119,30 @@ public class XslTransformHandler {\n     synchronized (_templateCache) {\n       tm = (Templates) _templateCache.get(processQName, uri);\n     }\n-    if (tm == null) parseXSLSheet(processQName, uri, body, resolver);\n+    if (tm == null) {\n+      parseXSLSheet(processQName, uri, body, resolver);\n+    }\n   }\n \n   /**\n    * Transforms a Source document to a result using the XSL stylesheet referenced\n    * by the provided URI. The stylesheet MUST have been parsed previously.\n-   * @param uri referencing the stylesheet\n-   * @param source XML document\n+   *\n+   * @param uri        referencing the stylesheet\n+   * @param source     XML document\n    * @param parameters passed to the stylesheet\n-   * @param resolver used to resolve includes and imports\n+   * @param resolver   used to resolve includes and imports\n    * @return result of the transformation (XSL, HTML or text depending of the output method specified in stylesheet.\n    */\n   public Object transform(QName processQName, URI uri, Source source,\n-                        Map<QName, Object> parameters, URIResolver resolver) {\n+                          Map<QName, Object> parameters, URIResolver resolver) {\n     Templates tm;\n     synchronized (_templateCache) {\n       tm = (Templates) _templateCache.get(processQName, uri);\n     }\n-    if (tm == null)\n+    if (tm == null) {\n       throw new XslTransformException(\"XSL sheet\" + uri + \" has not been parsed before transformation!\");\n+    }\n     try {\n       Transformer tf = tm.newTransformer();\n       tf.setURIResolver(resolver);\n@@ -144,22 +153,27 @@ public class XslTransformHandler {\n       }\n       String method = tf.getOutputProperties().getProperty(\"method\");\n       if (method == null || \"xml\".equals(method)) {\n-          DOMResult result = new DOMResult();\n-          tf.transform(source, result);\n-          Node node = result.getNode();\n-          if(node.getNodeType() == Node.DOCUMENT_NODE)\n-              node = ((Document)node).getDocumentElement();\n-          if(__log.isDebugEnabled()) __log.debug(\"Returned node: type=\"+node.getNodeType()+\", \"+ DOMUtils.domToString(node));\n-          return node;\n+        DOMResult result = new DOMResult();\n+        tf.transform(source, result);\n+        Node node = result.getNode();\n+        if (node.getNodeType() == Node.DOCUMENT_NODE) {\n+          node = ((Document) node).getDocumentElement();\n+        }\n+        if (__log.isDebugEnabled()) {\n+          __log.debug(\"Returned node: type=\" + node.getNodeType() + \", \" + DOMUtils.domToString(node));\n+        }\n+        return node;\n       } else {\n-          // text and html outputs are handled the same way\n-          StringWriter writerResult = new StringWriter();\n-          StreamResult result = new StreamResult(writerResult);\n-          tf.transform(source, result);\n-          writerResult.flush();\n-          String output = writerResult.toString();\n-          if(__log.isDebugEnabled()) __log.debug(\"Returned string: \"+output);\n-          return output;\n+        // text and html outputs are handled the same way\n+        StringWriter writerResult = new StringWriter();\n+        StreamResult result = new StreamResult(writerResult);\n+        tf.transform(source, result);\n+        writerResult.flush();\n+        String output = writerResult.toString();\n+        if (__log.isDebugEnabled()) {\n+          __log.debug(\"Returned string: \" + output);\n+        }\n+        return output;\n       }\n     } catch (TransformerConfigurationException e) {\n       throw new XslTransformException(e);\n@@ -174,7 +188,7 @@ public class XslTransformHandler {\n \n   public void clearXSLSheets(QName processQName) {\n     synchronized (_templateCache) {\n-          _templateCache.removeAll(processQName);\n+      _templateCache.removeAll(processQName);\n     }\n   }\n \n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/370/XslTransformHandler.java\nindex a1e0c66c399..44d476873d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/370/XslTransformHandler.java\n@@ -174,8 +174,8 @@ public class XslTransformHandler {\n \n   public void clearXSLSheets(QName processQName) {\n     synchronized (_templateCache) {\n-          _templateCache.removeAll(processQName);\n+    _templateCache.removeAll(processQName);\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/370/XslTransformHandler.java\nindex a1e0c66c399..b4aee8cfd1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/370/XslTransformHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/370/XslTransformHandler.java\n@@ -149,7 +149,8 @@ public class XslTransformHandler {\n           Node node = result.getNode();\n           if(node.getNodeType() == Node.DOCUMENT_NODE)\n               node = ((Document)node).getDocumentElement();\n-          if(__log.isDebugEnabled()) __log.debug(\"Returned node: type=\"+node.getNodeType()+\", \"+ DOMUtils.domToString(node));\n+              if(__log.isDebugEnabled()) __log.debug(\"Returned node: type=\"+node.getNodeType()+\", \"\n+              + DOMUtils.domToString(node));\n           return node;\n       } else {\n           // text and html outputs are handled the same way\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}