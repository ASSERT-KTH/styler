{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3781",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3781/AbstractDynamicStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3781/AbstractDynamicStore.java\nindex d941eddc207..a17707a77de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3781/AbstractDynamicStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3781/AbstractDynamicStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -62,169 +63,168 @@ import org.neo4j.logging.LogProvider;\n  * The record size is what's stored in the header (first record). {@link #getRecordDataSize()} returns\n  * the size which was configured at the store creation, {@link #getRecordSize()} returns what the store header says.\n  */\n-public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord,IntStoreHeader>\n-        implements DynamicRecordAllocator\n+public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord, IntStoreHeader>\n+    implements DynamicRecordAllocator\n {\n-    public AbstractDynamicStore(\n-            File fileName,\n-            Config conf,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            String typeDescriptor,\n-            int dataSizeFromConfiguration,\n-            RecordFormat<DynamicRecord> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n+  public AbstractDynamicStore(\n+      File fileName,\n+      Config conf,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      String typeDescriptor,\n+      int dataSizeFromConfiguration,\n+      RecordFormat<DynamicRecord> recordFormat,\n+      String storeVersion,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n+        recordFormat, new DynamicStoreHeaderFormat(dataSizeFromConfiguration, recordFormat),\n+        storeVersion, openOptions);\n+  }\n+\n+  public static void allocateRecordsFromBytes(Collection<DynamicRecord> recordList, byte[] src,\n+                                              DynamicRecordAllocator dynamicRecordAllocator)\n+  {\n+    assert src != null : \"Null src argument\";\n+    DynamicRecord nextRecord = dynamicRecordAllocator.nextRecord();\n+    int srcOffset = 0;\n+    int dataSize = dynamicRecordAllocator.getRecordDataSize();\n+    do\n     {\n-        super( fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, new DynamicStoreHeaderFormat( dataSizeFromConfiguration, recordFormat ),\n-                storeVersion, openOptions );\n+      DynamicRecord record = nextRecord;\n+      record.setStartRecord(srcOffset == 0);\n+      if (src.length - srcOffset > dataSize)\n+      {\n+        byte[] data = new byte[dataSize];\n+        System.arraycopy(src, srcOffset, data, 0, dataSize);\n+        record.setData(data);\n+        nextRecord = dynamicRecordAllocator.nextRecord();\n+        record.setNextBlock(nextRecord.getId());\n+        srcOffset += dataSize;\n+      } else\n+      {\n+        byte[] data = new byte[src.length - srcOffset];\n+        System.arraycopy(src, srcOffset, data, 0, data.length);\n+        record.setData(data);\n+        nextRecord = null;\n+        record.setNextBlock(Record.NO_NEXT_BLOCK.intValue());\n+      }\n+      recordList.add(record);\n+      assert record.getData() != null;\n     }\n-\n-    public static void allocateRecordsFromBytes( Collection<DynamicRecord> recordList, byte[] src,\n-            DynamicRecordAllocator dynamicRecordAllocator )\n+    while (nextRecord != null);\n+  }\n+\n+  /**\n+   * @return a {@link ByteBuffer#slice() sliced} {@link ByteBuffer} wrapping {@code target} or,\n+   * if necessary a new larger {@code byte[]} and containing exactly all concatenated data read from records\n+   */\n+  public static ByteBuffer concatData(Collection<DynamicRecord> records, byte[] target)\n+  {\n+    int totalLength = 0;\n+    for (DynamicRecord record : records)\n     {\n-        assert src != null : \"Null src argument\";\n-        DynamicRecord nextRecord = dynamicRecordAllocator.nextRecord();\n-        int srcOffset = 0;\n-        int dataSize = dynamicRecordAllocator.getRecordDataSize();\n-        do\n-        {\n-            DynamicRecord record = nextRecord;\n-            record.setStartRecord( srcOffset == 0 );\n-            if ( src.length - srcOffset > dataSize )\n-            {\n-                byte[] data = new byte[dataSize];\n-                System.arraycopy( src, srcOffset, data, 0, dataSize );\n-                record.setData( data );\n-                nextRecord = dynamicRecordAllocator.nextRecord();\n-                record.setNextBlock( nextRecord.getId() );\n-                srcOffset += dataSize;\n-            }\n-            else\n-            {\n-                byte[] data = new byte[src.length - srcOffset];\n-                System.arraycopy( src, srcOffset, data, 0, data.length );\n-                record.setData( data );\n-                nextRecord = null;\n-                record.setNextBlock( Record.NO_NEXT_BLOCK.intValue() );\n-            }\n-            recordList.add( record );\n-            assert record.getData() != null;\n-        }\n-        while ( nextRecord != null );\n+      totalLength += record.getLength();\n     }\n \n-    /**\n-     * @return a {@link ByteBuffer#slice() sliced} {@link ByteBuffer} wrapping {@code target} or,\n-     * if necessary a new larger {@code byte[]} and containing exactly all concatenated data read from records\n-     */\n-    public static ByteBuffer concatData( Collection<DynamicRecord> records, byte[] target )\n+    if (target.length < totalLength)\n     {\n-        int totalLength = 0;\n-        for ( DynamicRecord record : records )\n-        {\n-            totalLength += record.getLength();\n-        }\n-\n-        if ( target.length < totalLength )\n-        {\n-            target = new byte[totalLength];\n-        }\n-\n-        ByteBuffer buffer = ByteBuffer.wrap( target, 0, totalLength );\n-        for ( DynamicRecord record : records )\n-        {\n-            buffer.put( record.getData() );\n-        }\n-        buffer.position( 0 );\n-        return buffer;\n+      target = new byte[totalLength];\n     }\n \n-    /**\n-     * @return Pair&lt; header-in-first-record , all-other-bytes &gt;\n-     */\n-    public static Pair<byte[], byte[]> readFullByteArrayFromHeavyRecords(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n+    ByteBuffer buffer = ByteBuffer.wrap(target, 0, totalLength);\n+    for (DynamicRecord record : records)\n     {\n-        byte[] header = null;\n-        List<byte[]> byteList = new ArrayList<>();\n-        int totalSize = 0;\n-        int i = 0;\n-        for ( DynamicRecord record : records )\n-        {\n-            int offset = 0;\n-            if ( i++ == 0 )\n-            {   // This is the first one, read out the header separately\n-                header = propertyType.readDynamicRecordHeader( record.getData() );\n-                offset = header.length;\n-            }\n-\n-            byteList.add( record.getData() );\n-            totalSize += record.getData().length - offset;\n-        }\n-        byte[] bArray = new byte[totalSize];\n-        assert header != null :\n-                \"header should be non-null since records should not be empty: \" + Iterables.toString( records, \", \" );\n-        int sourceOffset = header.length;\n-        int offset = 0;\n-        for ( byte[] currentArray : byteList )\n-        {\n-            System.arraycopy( currentArray, sourceOffset, bArray, offset,\n-                    currentArray.length - sourceOffset );\n-            offset += currentArray.length - sourceOffset;\n-            sourceOffset = 0;\n-        }\n-        return Pair.of( header, bArray );\n+      buffer.put(record.getData());\n     }\n-\n-    @Override\n-    public DynamicRecord nextRecord()\n+    buffer.position(0);\n+    return buffer;\n+  }\n+\n+  /**\n+   * @return Pair&lt; header-in-first-record , all-other-bytes &gt;\n+   */\n+  public static Pair<byte[], byte[]> readFullByteArrayFromHeavyRecords(\n+      Iterable<DynamicRecord> records, PropertyType propertyType)\n+  {\n+    byte[] header = null;\n+    List<byte[]> byteList = new ArrayList<>();\n+    int totalSize = 0;\n+    int i = 0;\n+    for (DynamicRecord record : records)\n     {\n-        return StandardDynamicRecordAllocator.allocateRecord( nextId() );\n+      int offset = 0;\n+      if (i++ == 0)\n+      {   // This is the first one, read out the header separately\n+        header = propertyType.readDynamicRecordHeader(record.getData());\n+        offset = header.length;\n+      }\n+\n+      byteList.add(record.getData());\n+      totalSize += record.getData().length - offset;\n     }\n-\n-    public void allocateRecordsFromBytes( Collection<DynamicRecord> target, byte[] src )\n+    byte[] bArray = new byte[totalSize];\n+    assert header != null :\n+        \"header should be non-null since records should not be empty: \" + Iterables.toString(records, \", \");\n+    int sourceOffset = header.length;\n+    int offset = 0;\n+    for (byte[] currentArray : byteList)\n     {\n-        allocateRecordsFromBytes( target, src, this );\n+      System.arraycopy(currentArray, sourceOffset, bArray, offset,\n+          currentArray.length - sourceOffset);\n+      offset += currentArray.length - sourceOffset;\n+      sourceOffset = 0;\n     }\n-\n-    @Override\n-    public String toString()\n+    return Pair.of(header, bArray);\n+  }\n+\n+  @Override\n+  public DynamicRecord nextRecord()\n+  {\n+    return StandardDynamicRecordAllocator.allocateRecord(nextId());\n+  }\n+\n+  public void allocateRecordsFromBytes(Collection<DynamicRecord> target, byte[] src)\n+  {\n+    allocateRecordsFromBytes(target, src, this);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return super.toString() + \"[fileName:\" + storageFileName.getName() +\n+        \", blockSize:\" + getRecordDataSize() + \"]\";\n+  }\n+\n+  public Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray(\n+      Iterable<DynamicRecord> records, PropertyType propertyType)\n+  {\n+    for (DynamicRecord record : records)\n     {\n-        return super.toString() + \"[fileName:\" + storageFileName.getName() +\n-                \", blockSize:\" + getRecordDataSize() + \"]\";\n+      ensureHeavy(record);\n     }\n \n-    public Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n-    {\n-        for ( DynamicRecord record : records )\n-        {\n-            ensureHeavy( record );\n-        }\n+    return readFullByteArrayFromHeavyRecords(records, propertyType);\n+  }\n \n-        return readFullByteArrayFromHeavyRecords( records, propertyType );\n+  private static class DynamicStoreHeaderFormat extends IntStoreHeaderFormat\n+  {\n+    DynamicStoreHeaderFormat(int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat)\n+    {\n+      super(dataSizeFromConfiguration + recordFormat.getRecordHeaderSize());\n     }\n \n-    private static class DynamicStoreHeaderFormat extends IntStoreHeaderFormat\n+    @Override\n+    public void writeHeader(PageCursor cursor)\n     {\n-        DynamicStoreHeaderFormat( int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat )\n-        {\n-            super( dataSizeFromConfiguration + recordFormat.getRecordHeaderSize() );\n-        }\n-\n-        @Override\n-        public void writeHeader( PageCursor cursor )\n-        {\n-            if ( header < 1 || header > 0xFFFF )\n-            {\n-                throw new IllegalArgumentException(\n-                        \"Illegal block size[\" + header + \"], limit is 65535\" );\n-            }\n-            super.writeHeader( cursor );\n-        }\n+      if (header < 1 || header > 0xFFFF)\n+      {\n+        throw new IllegalArgumentException(\n+            \"Illegal block size[\" + header + \"], limit is 65535\");\n+      }\n+      super.writeHeader(cursor);\n     }\n+  }\n }\n",
            "diff_size": 237
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "92",
                    "column": "40",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3781/AbstractDynamicStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3781/AbstractDynamicStore.java\nindex d941eddc207..ccc95a212ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3781/AbstractDynamicStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3781/AbstractDynamicStore.java\n@@ -62,25 +62,20 @@ import org.neo4j.logging.LogProvider;\n  * The record size is what's stored in the header (first record). {@link #getRecordDataSize()} returns\n  * the size which was configured at the store creation, {@link #getRecordSize()} returns what the store header says.\n  */\n-public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord,IntStoreHeader>\n-        implements DynamicRecordAllocator\n+public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord,IntStoreHeader> implements DynamicRecordAllocator\n {\n-    public AbstractDynamicStore(\n-            File fileName,\n+    public AbstractDynamicStore( File fileName,\n             Config conf,\n             IdType idType,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n             LogProvider logProvider,\n-            String typeDescriptor,\n-            int dataSizeFromConfiguration,\n-            RecordFormat<DynamicRecord> recordFormat,\n+            String typeDescriptor, int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat,\n             String storeVersion,\n             OpenOption... openOptions )\n     {\n         super( fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, new DynamicStoreHeaderFormat( dataSizeFromConfiguration, recordFormat ),\n-                storeVersion, openOptions );\n+                recordFormat, new DynamicStoreHeaderFormat( dataSizeFromConfiguration, recordFormat ), storeVersion, openOptions );\n     }\n \n     public static void allocateRecordsFromBytes( Collection<DynamicRecord> recordList, byte[] src,\n@@ -94,7 +89,7 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n         {\n             DynamicRecord record = nextRecord;\n             record.setStartRecord( srcOffset == 0 );\n-            if ( src.length - srcOffset > dataSize )\n+            if ( src.length - srcOffset> dataSize )\n             {\n                 byte[] data = new byte[dataSize];\n                 System.arraycopy( src, srcOffset, data, 0, dataSize );\n@@ -146,8 +141,7 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n     /**\n      * @return Pair&lt; header-in-first-record , all-other-bytes &gt;\n      */\n-    public static Pair<byte[], byte[]> readFullByteArrayFromHeavyRecords(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n+    public static Pair<byte[], byte[]> readFullByteArrayFromHeavyRecords( Iterable<DynamicRecord> records, PropertyType propertyType )\n     {\n         byte[] header = null;\n         List<byte[]> byteList = new ArrayList<>();\n@@ -157,7 +151,8 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n         {\n             int offset = 0;\n             if ( i++ == 0 )\n-            {   // This is the first one, read out the header separately\n+            {\n+    // This is the first one, read out the header separately\n                 header = propertyType.readDynamicRecordHeader( record.getData() );\n                 offset = header.length;\n             }\n@@ -166,18 +161,18 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n             totalSize += record.getData().length - offset;\n         }\n         byte[] bArray = new byte[totalSize];\n-        assert header != null :\n-                \"header should be non-null since records should not be empty: \" + Iterables.toString( records, \", \" );\n-        int sourceOffset = header.length;\n+        assert header != null : \"header should be non-null since records should not be empty: \" + Iterables.toString( records, \", \" );\n+    int sourceOffset = header.length;\n         int offset = 0;\n         for ( byte[] currentArray : byteList )\n         {\n             System.arraycopy( currentArray, sourceOffset, bArray, offset,\n                     currentArray.length - sourceOffset );\n-            offset += currentArray.length - sourceOffset;\n+offset += currentArray.length - sourceOffset;\n             sourceOffset = 0;\n         }\n-        return Pair.of( header, bArray );\n+\n+return Pair.of( header, bArray );\n     }\n \n     @Override\n@@ -194,12 +189,10 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n     @Override\n     public String toString()\n     {\n-        return super.toString() + \"[fileName:\" + storageFileName.getName() +\n-                \", blockSize:\" + getRecordDataSize() + \"]\";\n+        return super.toString() + \"[fileName:\" + storageFileName.getName() + \", blockSize:\" + getRecordDataSize() + \"]\";\n     }\n \n-    public Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n+    public Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray( Iterable<DynamicRecord> records, PropertyType propertyType )\n     {\n         for ( DynamicRecord record : records )\n         {\n@@ -221,10 +214,9 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n         {\n             if ( header < 1 || header > 0xFFFF )\n             {\n-                throw new IllegalArgumentException(\n-                        \"Illegal block size[\" + header + \"], limit is 65535\" );\n+                throw new IllegalArgumentException( \"Illegal block size[\" + header + \"], limit is 65535\" );\n             }\n             super.writeHeader( cursor );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 305).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "116",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "146",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "30",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "28",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3781/AbstractDynamicStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3781/AbstractDynamicStore.java\nindex d941eddc207..4096e4a69d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3781/AbstractDynamicStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3781/AbstractDynamicStore.java\n@@ -25,7 +25,6 @@ import java.nio.file.OpenOption;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-\n import org.neo4j.helpers.collection.Iterables;\n import org.neo4j.helpers.collection.Pair;\n import org.neo4j.io.pagecache.PageCache;\n@@ -62,31 +61,18 @@ import org.neo4j.logging.LogProvider;\n  * The record size is what's stored in the header (first record). {@link #getRecordDataSize()} returns\n  * the size which was configured at the store creation, {@link #getRecordSize()} returns what the store header says.\n  */\n+\n public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord,IntStoreHeader>\n-        implements DynamicRecordAllocator\n+implements DynamicRecordAllocator\n {\n-    public AbstractDynamicStore(\n-            File fileName,\n-            Config conf,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            String typeDescriptor,\n-            int dataSizeFromConfiguration,\n-            RecordFormat<DynamicRecord> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n+    public AbstractDynamicStore( File fileName, Config conf, IdType idType, IdGeneratorFactory idGeneratorFactory, PageCache pageCache, LogProvider logProvider, String typeDescriptor, int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat, String storeVersion, OpenOption... openOptions )\n     {\n-        super( fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, new DynamicStoreHeaderFormat( dataSizeFromConfiguration, recordFormat ),\n-                storeVersion, openOptions );\n+        super( fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor, recordFormat, new DynamicStoreHeaderFormat( dataSizeFromConfiguration, recordFormat ), storeVersion, openOptions );\n     }\n \n-    public static void allocateRecordsFromBytes( Collection<DynamicRecord> recordList, byte[] src,\n-            DynamicRecordAllocator dynamicRecordAllocator )\n+    public static void allocateRecordsFromBytes( Collection<DynamicRecord> recordList, byte[] src, DynamicRecordAllocator dynamicRecordAllocator )\n     {\n-        assert src != null : \"Null src argument\";\n+        assert src != null: \"Null src argument\";\n         DynamicRecord nextRecord = dynamicRecordAllocator.nextRecord();\n         int srcOffset = 0;\n         int dataSize = dynamicRecordAllocator.getRecordDataSize();\n@@ -111,20 +97,23 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n                 nextRecord = null;\n                 record.setNextBlock( Record.NO_NEXT_BLOCK.intValue() );\n             }\n+\n             recordList.add( record );\n             assert record.getData() != null;\n         }\n-        while ( nextRecord != null );\n+\n+        while( nextRecord != null );\n     }\n \n     /**\n      * @return a {@link ByteBuffer#slice() sliced} {@link ByteBuffer} wrapping {@code target} or,\n      * if necessary a new larger {@code byte[]} and containing exactly all concatenated data read from records\n      */\n+\n     public static ByteBuffer concatData( Collection<DynamicRecord> records, byte[] target )\n     {\n         int totalLength = 0;\n-        for ( DynamicRecord record : records )\n+        for( DynamicRecord record : records)\n         {\n             totalLength += record.getLength();\n         }\n@@ -135,10 +124,11 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n         }\n \n         ByteBuffer buffer = ByteBuffer.wrap( target, 0, totalLength );\n-        for ( DynamicRecord record : records )\n+        for( DynamicRecord record : records)\n         {\n             buffer.put( record.getData() );\n         }\n+\n         buffer.position( 0 );\n         return buffer;\n     }\n@@ -146,17 +136,17 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n     /**\n      * @return Pair&lt; header-in-first-record , all-other-bytes &gt;\n      */\n-    public static Pair<byte[], byte[]> readFullByteArrayFromHeavyRecords(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n+\n+    public static Pair<byte[],byte[]> readFullByteArrayFromHeavyRecords( Iterable<DynamicRecord> records, PropertyType propertyType )\n     {\n         byte[] header = null;\n         List<byte[]> byteList = new ArrayList<>();\n         int totalSize = 0;\n         int i = 0;\n-        for ( DynamicRecord record : records )\n+        for( DynamicRecord record : records)\n         {\n             int offset = 0;\n-            if ( i++ == 0 )\n+            if ( i ++ == 0 )\n             {   // This is the first one, read out the header separately\n                 header = propertyType.readDynamicRecordHeader( record.getData() );\n                 offset = header.length;\n@@ -165,18 +155,18 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n             byteList.add( record.getData() );\n             totalSize += record.getData().length - offset;\n         }\n+\n         byte[] bArray = new byte[totalSize];\n-        assert header != null :\n-                \"header should be non-null since records should not be empty: \" + Iterables.toString( records, \", \" );\n+        assert header != null: \"header should be non-null since records should not be empty: \" + Iterables.toString( records, \", \" );\n         int sourceOffset = header.length;\n         int offset = 0;\n-        for ( byte[] currentArray : byteList )\n+        for( byte[] currentArray : byteList)\n         {\n-            System.arraycopy( currentArray, sourceOffset, bArray, offset,\n-                    currentArray.length - sourceOffset );\n+            System.arraycopy( currentArray, sourceOffset, bArray, offset, currentArray.length - sourceOffset );\n             offset += currentArray.length - sourceOffset;\n             sourceOffset = 0;\n         }\n+\n         return Pair.of( header, bArray );\n     }\n \n@@ -194,14 +184,12 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n     @Override\n     public String toString()\n     {\n-        return super.toString() + \"[fileName:\" + storageFileName.getName() +\n-                \", blockSize:\" + getRecordDataSize() + \"]\";\n+        return super.toString() + \"[fileName:\" + storageFileName.getName() + \", blockSize:\" + getRecordDataSize() + \"]\";\n     }\n \n-    public Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n+    public Pair<byte[]/*header in the first record*/,byte[]/*all other bytes*/> readFullByteArray( Iterable<DynamicRecord> records, PropertyType propertyType )\n     {\n-        for ( DynamicRecord record : records )\n+        for( DynamicRecord record : records)\n         {\n             ensureHeavy( record );\n         }\n@@ -219,12 +207,12 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n         @Override\n         public void writeHeader( PageCursor cursor )\n         {\n-            if ( header < 1 || header > 0xFFFF )\n+            if ( header < 1|| header > 0xFFFF )\n             {\n-                throw new IllegalArgumentException(\n-                        \"Illegal block size[\" + header + \"], limit is 65535\" );\n+                throw new IllegalArgumentException( \"Illegal block size[\" + header + \"], limit is 65535\" );\n             }\n+\n             super.writeHeader( cursor );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}