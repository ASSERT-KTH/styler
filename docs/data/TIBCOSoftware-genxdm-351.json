{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "351",
    "information": {
        "errors": [
            {
                "line": "39",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class ValidationCache\n{\n\tValidationCache()\n\t{\n\t\tm_regexb = new ValidationRegExBridge();\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/351/ValidationCache.java\nindex 346a456fdab..14dba9d5ac0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/351/ValidationCache.java\n@@ -36,7 +36,7 @@ import org.genxdm.xs.types.ContentType;\n \n final class ValidationCache\n {\n-\tValidationCache()\n+ValidationCache()\n \t{\n \t\tm_regexb = new ValidationRegExBridge();\n \t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/351/ValidationCache.java\nindex 346a456fdab..233b96c7c35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/351/ValidationCache.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.LinkedList;\n@@ -34,58 +35,53 @@ import org.genxdm.xs.types.ComplexType;\n import org.genxdm.xs.types.ContentType;\n \n \n-final class ValidationCache\n-{\n-\tValidationCache()\n-\t{\n-\t\tm_regexb = new ValidationRegExBridge();\n-\t}\n+final class ValidationCache {\n+    ValidationCache() {\n+        m_regexb = new ValidationRegExBridge();\n+    }\n+\n+    SmContentFiniteStateMachine getMachine(final ComplexType complexType) {\n+        final ComplexType itemType = (ComplexType) complexType;\n+        final RegExPattern<ValidationExpr, QName> pattern = ensurePattern(itemType);\n \n-\tSmContentFiniteStateMachine getMachine(final ComplexType complexType)\n-\t{\n-\t\tfinal ComplexType itemType = (ComplexType)complexType;\n-\t\tfinal RegExPattern<ValidationExpr, QName> pattern = ensurePattern(itemType);\n+        final List<ValidationExpr> expectedFollowers = new LinkedList<ValidationExpr>();\n+        final RegExMachine<ValidationExpr, QName> regexm = PreCondition\n+            .assertArgumentNotNull(pattern.createRegExMachine(expectedFollowers),\n+                \"createRegExMachine\");\n \n-\t\tfinal List<ValidationExpr> expectedFollowers = new LinkedList<ValidationExpr>();\n-\t\tfinal RegExMachine<ValidationExpr, QName> regexm = PreCondition.assertArgumentNotNull(pattern.createRegExMachine(expectedFollowers), \"createRegExMachine\");\n+        return new SmMachineImpl(regexm);\n+    }\n \n-\t\treturn new SmMachineImpl(regexm);\n-\t}\n+    private RegExPattern<ValidationExpr, QName> ensurePattern(final ComplexType complexType) {\n+        final RegExPattern<ValidationExpr, QName> cachedPattern = m_patterns.get(complexType);\n+        if (null != cachedPattern) {\n+            return cachedPattern;\n+        } else {\n+            final ContentType contentType = complexType.getContentType();\n \n-\tprivate RegExPattern<ValidationExpr, QName> ensurePattern(final ComplexType complexType)\n-\t{\n-\t\tfinal RegExPattern<ValidationExpr, QName> cachedPattern = m_patterns.get(complexType);\n-\t\tif (null != cachedPattern)\n-\t\t{\n-\t\t\treturn cachedPattern;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfinal ContentType contentType = complexType.getContentType();\n+            final SchemaParticle contentModel = contentType.getContentModel();\n+            final ValidationExpr expression = expression(contentModel);\n+            final RegExFactory<ValidationExpr, QName> factory =\n+                new NfaFactory<ValidationExpr, QName>();\n+            final RegExPattern<ValidationExpr, QName> pattern =\n+                factory.newPattern(expression, m_regexb);\n+            m_patterns.put(complexType, pattern);\n+            return pattern;\n+        }\n+    }\n \n-\t\t\tfinal SchemaParticle contentModel = contentType.getContentModel();\n-\t\t\tfinal ValidationExpr expression = expression(contentModel);\n-\t\t\tfinal RegExFactory<ValidationExpr, QName> factory = new NfaFactory<ValidationExpr, QName>();\n-\t\t\tfinal RegExPattern<ValidationExpr, QName> pattern = factory.newPattern(expression, m_regexb);\n-\t\t\tm_patterns.put(complexType, pattern);\n-\t\t\treturn pattern;\n-\t\t}\n-\t}\n+    private ValidationExpr expression(final SchemaParticle particle) {\n+        final ParticleTerm term = particle.getTerm();\n+        if (term instanceof ModelGroup) {\n+            final ModelGroup group = (ModelGroup) term;\n+            return new ModelGroupExpression(particle, group);\n+        } else {\n+            return new ContentModelExpression(particle);\n+        }\n+    }\n \n-\tprivate ValidationExpr expression(final SchemaParticle particle)\n-\t{\n-\t\tfinal ParticleTerm term = particle.getTerm();\n-\t\tif (term instanceof ModelGroup)\n-\t\t{\n-\t\t\tfinal ModelGroup group = (ModelGroup)term;\n-\t\t\treturn new ModelGroupExpression(particle, group);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn new ContentModelExpression(particle);\n-\t\t}\n-\t}\n-    private final ConcurrentHashMap<ComplexType, RegExPattern<ValidationExpr, QName>> m_patterns = new ConcurrentHashMap<ComplexType, RegExPattern<ValidationExpr, QName>>();\n+    private final ConcurrentHashMap<ComplexType, RegExPattern<ValidationExpr, QName>> m_patterns =\n+        new ConcurrentHashMap<ComplexType, RegExPattern<ValidationExpr, QName>>();\n \n     private final RegExBridge<ValidationExpr, QName> m_regexb;\n \n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/351/ValidationCache.java\nindex 346a456fdab..782b8e9a952 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/351/ValidationCache.java\n@@ -18,9 +18,7 @@ package org.genxdm.processor.w3c.xs.validation.impl;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.ConcurrentHashMap;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.processor.w3c.xs.regex.api.RegExBridge;\n import org.genxdm.processor.w3c.xs.regex.api.RegExFactory;\n@@ -33,60 +31,56 @@ import org.genxdm.xs.components.SchemaParticle;\n import org.genxdm.xs.types.ComplexType;\n import org.genxdm.xs.types.ContentType;\n \n-\n final class ValidationCache\n {\n-\tValidationCache()\n-\t{\n-\t\tm_regexb = new ValidationRegExBridge();\n-\t}\n \n-\tSmContentFiniteStateMachine getMachine(final ComplexType complexType)\n-\t{\n-\t\tfinal ComplexType itemType = (ComplexType)complexType;\n-\t\tfinal RegExPattern<ValidationExpr, QName> pattern = ensurePattern(itemType);\n+    ValidationCache()\n+    {\n+        m_regexb = new ValidationRegExBridge();\n+    }\n \n-\t\tfinal List<ValidationExpr> expectedFollowers = new LinkedList<ValidationExpr>();\n-\t\tfinal RegExMachine<ValidationExpr, QName> regexm = PreCondition.assertArgumentNotNull(pattern.createRegExMachine(expectedFollowers), \"createRegExMachine\");\n+    SmContentFiniteStateMachine getMachine(final ComplexType complexType)\n+    {\n+        final ComplexType itemType = (ComplexType)complexType;\n+        final RegExPattern<ValidationExpr, QName> pattern = ensurePattern(itemType);\n+        final List<ValidationExpr> expectedFollowers = new LinkedList<ValidationExpr>();\n+        final RegExMachine<ValidationExpr, QName> regexm = PreCondition.assertArgumentNotNull(pattern.createRegExMachine(expectedFollowers), \"createRegExMachine\");\n+        return new SmMachineImpl(regexm);\n+    }\n \n-\t\treturn new SmMachineImpl(regexm);\n-\t}\n+    private RegExPattern<ValidationExpr, QName> ensurePattern(final ComplexType complexType)\n+    {\n+        final RegExPattern<ValidationExpr, QName> cachedPattern = m_patterns.get(complexType);\n+        if (null != cachedPattern)\n+        {\n+            return cachedPattern;\n+        }\n+        else\n+        {\n+            final ContentType contentType = complexType.getContentType();\n+            final SchemaParticle contentModel = contentType.getContentModel();\n+            final ValidationExpr expression = expression(contentModel);\n+            final RegExFactory<ValidationExpr, QName> factory = new NfaFactory<ValidationExpr, QName>();\n+            final RegExPattern<ValidationExpr, QName> pattern = factory.newPattern(expression, m_regexb);\n+            m_patterns.put(complexType, pattern);\n+            return pattern;\n+        }\n+    }\n \n-\tprivate RegExPattern<ValidationExpr, QName> ensurePattern(final ComplexType complexType)\n-\t{\n-\t\tfinal RegExPattern<ValidationExpr, QName> cachedPattern = m_patterns.get(complexType);\n-\t\tif (null != cachedPattern)\n-\t\t{\n-\t\t\treturn cachedPattern;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfinal ContentType contentType = complexType.getContentType();\n+    private ValidationExpr expression(final SchemaParticle particle)\n+    {\n+        final ParticleTerm term = particle.getTerm();\n+        if (term instanceof ModelGroup)\n+        {\n+            final ModelGroup group = (ModelGroup)term;\n+            return new ModelGroupExpression(particle, group);\n+        }\n+        else\n+        {\n+            return new ContentModelExpression(particle);\n+        }\n+    }\n \n-\t\t\tfinal SchemaParticle contentModel = contentType.getContentModel();\n-\t\t\tfinal ValidationExpr expression = expression(contentModel);\n-\t\t\tfinal RegExFactory<ValidationExpr, QName> factory = new NfaFactory<ValidationExpr, QName>();\n-\t\t\tfinal RegExPattern<ValidationExpr, QName> pattern = factory.newPattern(expression, m_regexb);\n-\t\t\tm_patterns.put(complexType, pattern);\n-\t\t\treturn pattern;\n-\t\t}\n-\t}\n-\n-\tprivate ValidationExpr expression(final SchemaParticle particle)\n-\t{\n-\t\tfinal ParticleTerm term = particle.getTerm();\n-\t\tif (term instanceof ModelGroup)\n-\t\t{\n-\t\t\tfinal ModelGroup group = (ModelGroup)term;\n-\t\t\treturn new ModelGroupExpression(particle, group);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn new ContentModelExpression(particle);\n-\t\t}\n-\t}\n     private final ConcurrentHashMap<ComplexType, RegExPattern<ValidationExpr, QName>> m_patterns = new ConcurrentHashMap<ComplexType, RegExPattern<ValidationExpr, QName>>();\n-\n     private final RegExBridge<ValidationExpr, QName> m_regexb;\n-\n }\n\\ No newline at end of file\n",
            "diff_size": 74
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/351/ValidationCache.java\nindex 346a456fdab..14dba9d5ac0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/351/ValidationCache.java\n@@ -36,7 +36,7 @@ import org.genxdm.xs.types.ContentType;\n \n final class ValidationCache\n {\n-\tValidationCache()\n+ValidationCache()\n \t{\n \t\tm_regexb = new ValidationRegExBridge();\n \t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/351/ValidationCache.java\nindex 346a456fdab..6058fcb5d92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/351/ValidationCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/351/ValidationCache.java\n@@ -36,7 +36,7 @@ import org.genxdm.xs.types.ContentType;\n \n final class ValidationCache\n {\n-\tValidationCache()\n+    ValidationCache()\n \t{\n \t\tm_regexb = new ValidationRegExBridge();\n \t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}