{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3434",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3434/OsBeanUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3434/OsBeanUtil.java\nindex e83c9edf19d..7036b44862b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3434/OsBeanUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3434/OsBeanUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.os;\n \n import java.lang.management.ManagementFactory;\n@@ -31,144 +32,142 @@ import java.lang.reflect.Method;\n  */\n public final class OsBeanUtil\n {\n-    public static final long VALUE_UNAVAILABLE = -1;\n-\n-    private static final String SUN_OS_BEAN = \"com.sun.management.OperatingSystemMXBean\";\n-    private static final String SUN_UNIX_OS_BEAN = \"com.sun.management.UnixOperatingSystemMXBean\";\n-    private static final String IBM_OS_BEAN = \"com.ibm.lang.management.OperatingSystemMXBean\";\n-\n-    private static final OperatingSystemMXBean osBean = ManagementFactory.getOperatingSystemMXBean();\n-\n-    private static final Method getTotalPhysicalMemoryMethod;\n-    private static final Method getFreePhysicalMemoryMethod;\n-    private static final Method getCommittedVirtualMemoryMethod;\n-    private static final Method getTotalSwapSpaceMethod;\n-    private static final Method getFreeSwapSpaceMethod;\n-    private static final Method getMaxFileDescriptorsMethod;\n-    private static final Method getOpenFileDescriptorsMethod;\n-\n-    static\n-    {\n-        getTotalPhysicalMemoryMethod = findOsBeanMethod( \"getTotalPhysicalMemorySize\", \"getTotalPhysicalMemory\" );\n-        getFreePhysicalMemoryMethod = findOsBeanMethod( \"getFreePhysicalMemorySize\", \"getFreePhysicalMemorySize\" );\n-        getCommittedVirtualMemoryMethod = findOsBeanMethod( \"getCommittedVirtualMemorySize\", null );\n-        getTotalSwapSpaceMethod = findOsBeanMethod( \"getTotalSwapSpaceSize\", \"getTotalSwapSpaceSize\" );\n-        getFreeSwapSpaceMethod = findOsBeanMethod( \"getFreeSwapSpaceSize\", \"getFreeSwapSpaceSize\" );\n-        getMaxFileDescriptorsMethod = findUnixOsBeanMethod( \"getMaxFileDescriptorCount\" );\n-        getOpenFileDescriptorsMethod = findUnixOsBeanMethod( \"getOpenFileDescriptorCount\" );\n-    }\n-\n-    private OsBeanUtil()\n-    {\n-        throw new AssertionError( \"Not for instantiation!\" );\n-    }\n-\n-    /**\n-     * @return total amount of physical memory in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n-     * provide this functionality.\n-     */\n-    public static long getTotalPhysicalMemory()\n-    {\n-        return invoke( getTotalPhysicalMemoryMethod );\n-    }\n-\n-    /**\n-     * @return amount of free physical memory in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n-     * provide this functionality.\n-     */\n-    public static long getFreePhysicalMemory()\n-    {\n-        return invoke( getFreePhysicalMemoryMethod );\n-    }\n-\n-    /**\n-     * @return amount of virtual memory that is guaranteed to be available to the running process in bytes, or\n-     * {@link #VALUE_UNAVAILABLE} if underlying bean does not provide this functionality.\n-     */\n-    public static long getCommittedVirtualMemory()\n-    {\n-        return invoke( getCommittedVirtualMemoryMethod );\n-    }\n-\n-    /**\n-     * @return total amount of swap space in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n-     * provide this functionality.\n-     */\n-    public static long getTotalSwapSpace()\n-    {\n-        return invoke( getTotalSwapSpaceMethod );\n-    }\n-\n-    /**\n-     * @return total amount of free swap space in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n-     * provide this functionality.\n-     */\n-    public static long getFreeSwapSpace()\n+  public static final long VALUE_UNAVAILABLE = -1;\n+\n+  private static final String SUN_OS_BEAN = \"com.sun.management.OperatingSystemMXBean\";\n+  private static final String SUN_UNIX_OS_BEAN = \"com.sun.management.UnixOperatingSystemMXBean\";\n+  private static final String IBM_OS_BEAN = \"com.ibm.lang.management.OperatingSystemMXBean\";\n+\n+  private static final OperatingSystemMXBean osBean = ManagementFactory.getOperatingSystemMXBean();\n+\n+  private static final Method getTotalPhysicalMemoryMethod;\n+  private static final Method getFreePhysicalMemoryMethod;\n+  private static final Method getCommittedVirtualMemoryMethod;\n+  private static final Method getTotalSwapSpaceMethod;\n+  private static final Method getFreeSwapSpaceMethod;\n+  private static final Method getMaxFileDescriptorsMethod;\n+  private static final Method getOpenFileDescriptorsMethod;\n+\n+  static\n+  {\n+    getTotalPhysicalMemoryMethod = findOsBeanMethod(\"getTotalPhysicalMemorySize\", \"getTotalPhysicalMemory\");\n+    getFreePhysicalMemoryMethod = findOsBeanMethod(\"getFreePhysicalMemorySize\", \"getFreePhysicalMemorySize\");\n+    getCommittedVirtualMemoryMethod = findOsBeanMethod(\"getCommittedVirtualMemorySize\", null);\n+    getTotalSwapSpaceMethod = findOsBeanMethod(\"getTotalSwapSpaceSize\", \"getTotalSwapSpaceSize\");\n+    getFreeSwapSpaceMethod = findOsBeanMethod(\"getFreeSwapSpaceSize\", \"getFreeSwapSpaceSize\");\n+    getMaxFileDescriptorsMethod = findUnixOsBeanMethod(\"getMaxFileDescriptorCount\");\n+    getOpenFileDescriptorsMethod = findUnixOsBeanMethod(\"getOpenFileDescriptorCount\");\n+  }\n+\n+  private OsBeanUtil()\n+  {\n+    throw new AssertionError(\"Not for instantiation!\");\n+  }\n+\n+  /**\n+   * @return total amount of physical memory in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n+   * provide this functionality.\n+   */\n+  public static long getTotalPhysicalMemory()\n+  {\n+    return invoke(getTotalPhysicalMemoryMethod);\n+  }\n+\n+  /**\n+   * @return amount of free physical memory in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n+   * provide this functionality.\n+   */\n+  public static long getFreePhysicalMemory()\n+  {\n+    return invoke(getFreePhysicalMemoryMethod);\n+  }\n+\n+  /**\n+   * @return amount of virtual memory that is guaranteed to be available to the running process in bytes, or\n+   * {@link #VALUE_UNAVAILABLE} if underlying bean does not provide this functionality.\n+   */\n+  public static long getCommittedVirtualMemory()\n+  {\n+    return invoke(getCommittedVirtualMemoryMethod);\n+  }\n+\n+  /**\n+   * @return total amount of swap space in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n+   * provide this functionality.\n+   */\n+  public static long getTotalSwapSpace()\n+  {\n+    return invoke(getTotalSwapSpaceMethod);\n+  }\n+\n+  /**\n+   * @return total amount of free swap space in bytes, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n+   * provide this functionality.\n+   */\n+  public static long getFreeSwapSpace()\n+  {\n+    return invoke(getFreeSwapSpaceMethod);\n+  }\n+\n+  /**\n+   * @return maximum number of file descriptors, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n+   * provide this functionality.\n+   */\n+  public static long getMaxFileDescriptors()\n+  {\n+    return invoke(getMaxFileDescriptorsMethod);\n+  }\n+\n+  /**\n+   * @return number of open file descriptors, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n+   * provide this functionality.\n+   */\n+  public static long getOpenFileDescriptors()\n+  {\n+    return invoke(getOpenFileDescriptorsMethod);\n+  }\n+\n+  private static Method findOsBeanMethod(String sunMethodName, String ibmMethodName)\n+  {\n+    Method sunOsBeanMethod = findSunOsBeanMethod(sunMethodName);\n+    return sunOsBeanMethod == null ? findIbmOsBeanMethod(ibmMethodName) : sunOsBeanMethod;\n+  }\n+\n+  private static Method findUnixOsBeanMethod(String methodName)\n+  {\n+    return findMethod(SUN_UNIX_OS_BEAN, methodName);\n+  }\n+\n+  private static Method findSunOsBeanMethod(String methodName)\n+  {\n+    return findMethod(SUN_OS_BEAN, methodName);\n+  }\n+\n+  private static Method findIbmOsBeanMethod(String methodName)\n+  {\n+    return findMethod(IBM_OS_BEAN, methodName);\n+  }\n+\n+  private static Method findMethod(String className, String methodName)\n+  {\n+    try\n     {\n-        return invoke( getFreeSwapSpaceMethod );\n-    }\n-\n-    /**\n-     * @return maximum number of file descriptors, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n-     * provide this functionality.\n-     */\n-    public static long getMaxFileDescriptors()\n+      return (methodName == null) ? null : Class.forName(className).getMethod(methodName);\n+    } catch (Throwable t)\n     {\n-        return invoke( getMaxFileDescriptorsMethod );\n+      return null;\n     }\n+  }\n \n-    /**\n-     * @return number of open file descriptors, or {@link #VALUE_UNAVAILABLE} if underlying bean does not\n-     * provide this functionality.\n-     */\n-    public static long getOpenFileDescriptors()\n+  private static long invoke(Method method)\n+  {\n+    try\n     {\n-        return invoke( getOpenFileDescriptorsMethod );\n-    }\n-\n-    private static Method findOsBeanMethod( String sunMethodName, String ibmMethodName )\n-    {\n-        Method sunOsBeanMethod = findSunOsBeanMethod( sunMethodName );\n-        return sunOsBeanMethod == null ? findIbmOsBeanMethod( ibmMethodName ) : sunOsBeanMethod;\n-    }\n-\n-    private static Method findUnixOsBeanMethod( String methodName )\n-    {\n-        return findMethod( SUN_UNIX_OS_BEAN, methodName );\n-    }\n-\n-    private static Method findSunOsBeanMethod( String methodName )\n-    {\n-        return findMethod( SUN_OS_BEAN, methodName );\n-    }\n-\n-    private static Method findIbmOsBeanMethod( String methodName )\n-    {\n-        return findMethod( IBM_OS_BEAN, methodName );\n-    }\n-\n-    private static Method findMethod( String className, String methodName )\n-    {\n-        try\n-        {\n-            return (methodName == null) ? null : Class.forName( className ).getMethod( methodName );\n-        }\n-        catch ( Throwable t )\n-        {\n-            return null;\n-        }\n-    }\n-\n-    private static long invoke( Method method )\n+      Object value = (method == null) ? null : method.invoke(osBean);\n+      return (value == null) ? VALUE_UNAVAILABLE : ((Number) value).longValue();\n+    } catch (Throwable t)\n     {\n-        try\n-        {\n-            Object value = (method == null) ? null : method.invoke( osBean );\n-            return (value == null) ? VALUE_UNAVAILABLE : ((Number) value).longValue();\n-        }\n-        catch ( Throwable t )\n-        {\n-            return VALUE_UNAVAILABLE;\n-        }\n+      return VALUE_UNAVAILABLE;\n     }\n+  }\n }\n",
            "diff_size": 182
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3434/OsBeanUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3434/OsBeanUtil.java\nindex e83c9edf19d..f535c60de04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3434/OsBeanUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3434/OsBeanUtil.java\n@@ -151,7 +151,7 @@ public final class OsBeanUtil\n     {\n         try\n         {\n-            return (methodName == null) ? null : Class.forName( className ).getMethod( methodName );\n+            return ( methodName == null ) ? null : Class.forName( className ).getMethod( methodName );\n         }\n         catch ( Throwable t )\n         {\n@@ -163,12 +163,12 @@ public final class OsBeanUtil\n     {\n         try\n         {\n-            Object value = (method == null) ? null : method.invoke( osBean );\n-            return (value == null) ? VALUE_UNAVAILABLE : ((Number) value).longValue();\n+            Object value = (method == null ) ? null : method.invoke( osBean );\n+            return ( value == null ) ? VALUE_UNAVAILABLE : ((Number) value).longValue();\n         }\n         catch ( Throwable t )\n         {\n             return VALUE_UNAVAILABLE;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}