{
    "project_name": "eclipse-ee4j-glassfish",
    "error_id": "136",
    "information": {
        "errors": [
            {
                "line": "114",
                "column": "31",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        }\n\n        foundWithHK2.clear(); // No need to keep these references around\n    }\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "114",
                    "column": "31",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "114",
                    "column": "31",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/136/HK2IntegrationExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/136/HK2IntegrationExtension.java\nindex 3acb0120894..820a1df04e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/136/HK2IntegrationExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/136/HK2IntegrationExtension.java\n@@ -42,11 +42,10 @@ import jakarta.inject.Singleton;\n \n /**\n  * A portable CDI extension, which is the touch-point for hk2 integration with CDI\n- *\n+ * <p>\n  * This extension is registered via META-INF/services/jakarta.enterprise.inject.spi.Extension\n  *\n  * @author jwells\n- *\n  */\n public class HK2IntegrationExtension implements Extension {\n     private final HashMap<Long, ActiveDescriptor<?>> foundWithHK2 = new HashMap<>();\n@@ -84,7 +83,7 @@ public class HK2IntegrationExtension implements Extension {\n      *\n      * @param afterBeanDiscovery This is used just to mark the type of the event\n      */\n-    @SuppressWarnings({ \"unused\", \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({\"unused\", \"unchecked\", \"rawtypes\"})\n     private void afterDiscoveryObserver(@Observes AfterBeanDiscovery afterBeanDiscovery) {\n         if (locator == null) {\n             return;\n@@ -101,7 +100,8 @@ public class HK2IntegrationExtension implements Extension {\n         customScopes.remove(PerLookup.class);\n         customScopes.remove(Singleton.class);\n \n-        List<org.glassfish.hk2.api.Context> hk2Contexts = locator.getAllServices(org.glassfish.hk2.api.Context.class);\n+        List<org.glassfish.hk2.api.Context> hk2Contexts =\n+            locator.getAllServices(org.glassfish.hk2.api.Context.class);\n \n         for (org.glassfish.hk2.api.Context hk2Context : hk2Contexts) {\n             if (!customScopes.contains(hk2Context.getScope())) {\n@@ -117,7 +117,7 @@ public class HK2IntegrationExtension implements Extension {\n     /**\n      * Called by CDI after it has been completely validated. Will add the JIT resolver to HK2 with the BeanManager\n      *\n-     * @param event This is just to mark the type of the event\n+     * @param event   This is just to mark the type of the event\n      * @param manager The manager that will be used to get references\n      */\n     @SuppressWarnings(\"unused\")\n@@ -126,7 +126,8 @@ public class HK2IntegrationExtension implements Extension {\n             return;\n         }\n \n-        DynamicConfiguration config = locator.getService(DynamicConfigurationService.class).createDynamicConfiguration();\n+        DynamicConfiguration config =\n+            locator.getService(DynamicConfigurationService.class).createDynamicConfiguration();\n \n         config.addActiveDescriptor(CDISecondChanceResolver.class);\n         config.addActiveDescriptor(CDIContextBridge.class);\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/136/HK2IntegrationExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/136/HK2IntegrationExtension.java\nindex 3acb0120894..55c518eefd2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/136/HK2IntegrationExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/136/HK2IntegrationExtension.java\n@@ -111,7 +111,8 @@ public class HK2IntegrationExtension implements Extension {\n             afterBeanDiscovery.addContext(new HK2ContextBridge(hk2Context));\n         }\n \n-        foundWithHK2.clear(); // No need to keep these references around\n+        foundWithHK2.clear();\n+// No need to keep these references around\n     }\n \n     /**\n@@ -138,4 +139,4 @@ public class HK2IntegrationExtension implements Extension {\n     public String toString() {\n         return \"HK2IntegrationExtension(\" + locator + \",\" + System.identityHashCode(this) + \")\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "114",
                    "column": "31",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "114",
                    "column": "30",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/136/HK2IntegrationExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/136/HK2IntegrationExtension.java\nindex 3acb0120894..521e7471279 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/136/HK2IntegrationExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/136/HK2IntegrationExtension.java\n@@ -111,7 +111,7 @@ public class HK2IntegrationExtension implements Extension {\n             afterBeanDiscovery.addContext(new HK2ContextBridge(hk2Context));\n         }\n \n-        foundWithHK2.clear(); // No need to keep these references around\n+        foundWithHK2.clear();// No need to keep these references around\n     }\n \n     /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}