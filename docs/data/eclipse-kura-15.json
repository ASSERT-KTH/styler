{
    "project_name": "eclipse-kura",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "184",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 158).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     *\n     * @return the captured content of the memory area or block; or {@code null} if no memory area or block content was\n     *         captured. If the listener was registered using the MMIODevice#setMMIOEventListener(int, int, ByteBuffer, jdk.dio.mmio.MMIOEventListener) method\n     *         the {@code ByteBuffer} returned is the {@code ByteBuffer} that was passed as the {@code captureBuffer} parameter.\n     *\n     * @see MMIODevice#setMMIOEventListener(int, java.lang.String, jdk.dio.mmio.MMIOEventListener)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/15/MMIOEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/15/MMIOEvent.java\nindex 5f91b77f91d..2c25eaf0a53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/15/MMIOEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/15/MMIOEvent.java\n@@ -22,6 +22,7 @@\n  * or visit www.oracle.com if you need additional information or have any\n  * questions.\n  */\n+\n package jdk.dio.mmio;\n \n import jdk.dio.DeviceEvent;\n@@ -55,14 +56,10 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * Creates a new {@link MMIOEvent} with the specified event ID and time-stamped\n      * with the current time.\n      *\n-     * @param device\n-     *            the source device.\n-     * @param id\n-     *            the event ID.\n-     * @throws NullPointerException\n-     *             if {@code device} is {@code null}.\n-     * @throws IllegalArgumentException\n-     *             if {@code id} is negative.\n+     * @param device the source device.\n+     * @param id     the event ID.\n+     * @throws NullPointerException     if {@code device} is {@code null}.\n+     * @throws IllegalArgumentException if {@code id} is negative.\n      */\n     public MMIOEvent(MMIODevice device, int id) {\n         this(device, id, System.currentTimeMillis(), 0);\n@@ -72,20 +69,13 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * Creates a new {@link MMIOEvent} with the specified event ID and timestamp, and\n      * with the captured content of the memory area or memory block designated upon registration.\n      *\n-     * @param device\n-     *            the source device.\n-     * @param id\n-     *            the event ID.\n-     * @param capturedMemoryContent\n-     *            the captured content of the memory area or memory block designated upon registration.\n-     * @param timeStamp\n-     *            the timestamp (in milliseconds).\n-     * @param timeStampMicros\n-     *            the additional microseconds to the timestamp.\n-     * @throws NullPointerException\n-     *             if {@code device} or {@code capturedMemoryContent} is {@code null}.\n-     * @throws IllegalArgumentException\n-     *             if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n+     * @param device                the source device.\n+     * @param id                    the event ID.\n+     * @param capturedMemoryContent the captured content of the memory area or memory block designated upon registration.\n+     * @param timeStamp             the timestamp (in milliseconds).\n+     * @param timeStampMicros       the additional microseconds to the timestamp.\n+     * @throws NullPointerException     if {@code device} or {@code capturedMemoryContent} is {@code null}.\n+     * @throws IllegalArgumentException if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n      */\n     public MMIOEvent(MMIODevice device, int id, ByteBuffer capturedMemoryContent, long timeStamp, int timeStampMicros) {\n         this.device = device;\n@@ -100,18 +90,12 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n     /**\n      * Creates a new {@link MMIOEvent} with the specified event ID and timestamp.\n      *\n-     * @param device\n-     *            the source device.\n-     * @param id\n-     *            the event ID.\n-     * @param timeStamp\n-     *            the timestamp (in milliseconds).\n-     * @param timeStampMicros\n-     *            the additional microseconds to the timestamp.\n-     * @throws NullPointerException\n-     *             if {@code device} is {@code null}.\n-     * @throws IllegalArgumentException\n-     *             if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n+     * @param device          the source device.\n+     * @param id              the event ID.\n+     * @param timeStamp       the timestamp (in milliseconds).\n+     * @param timeStampMicros the additional microseconds to the timestamp.\n+     * @throws NullPointerException     if {@code device} is {@code null}.\n+     * @throws IllegalArgumentException if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n      */\n     public MMIOEvent(MMIODevice device, int id, long timeStamp, int timeStampMicros) {\n         this.device = device;\n@@ -127,25 +111,17 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * Creates a new {@link MMIOEvent} with the specified event ID and timestamp, and\n      * the captured value of the register designated upon registration.\n      *\n-     * @param <T> the type of the captured value.\n-     *\n-     * @param device\n-     *            the source device.\n-     * @param id\n-     *            the event ID.\n-     * @param capturedRegisterValue\n-     *            the captured value of the register designated upon registration.\n-     * @param timeStamp\n-     *            the timestamp (in milliseconds).\n-     * @param timeStampMicros\n-     *            the additional microseconds to the timestamp.\n-     * @throws NullPointerException\n-     *             if {@code device} or {@code capturedRegisterValue} is {@code null}.\n-     * @throws IllegalArgumentException\n-     *             if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n+     * @param <T>                   the type of the captured value.\n+     * @param device                the source device.\n+     * @param id                    the event ID.\n+     * @param capturedRegisterValue the captured value of the register designated upon registration.\n+     * @param timeStamp             the timestamp (in milliseconds).\n+     * @param timeStampMicros       the additional microseconds to the timestamp.\n+     * @throws NullPointerException     if {@code device} or {@code capturedRegisterValue} is {@code null}.\n+     * @throws IllegalArgumentException if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n      */\n     public <T extends Number> MMIOEvent(MMIODevice device, int id, T capturedRegisterValue, long timeStamp,\n-            int timeStampMicros) {\n+                                        int timeStampMicros) {\n         this.device = device;\n         this.id = id;\n         this.capturedRegisterValue = capturedRegisterValue;\n@@ -158,16 +134,11 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n     /**\n      * Coalesces events. Must only be called if the event has not yet been dispatched.\n      *\n-     * @param <T> the type of the captured value.\n-     *\n-     * @param registerValue\n-     *            the captured value of the register designated upon registration.\n-     * @param memoryContent\n-     *            the captured content of the memory area or memory block designated upon registration.\n-     * @param timeStamp\n-     *            the timestamp (in milliseconds).\n-     * @param timeStampMicro\n-     *            the additional microseconds to the timestamp.\n+     * @param <T>            the type of the captured value.\n+     * @param registerValue  the captured value of the register designated upon registration.\n+     * @param memoryContent  the captured content of the memory area or memory block designated upon registration.\n+     * @param timeStamp      the timestamp (in milliseconds).\n+     * @param timeStampMicro the additional microseconds to the timestamp.\n      */\n     <T extends Number> void addOccurence(T registerValue, ByteBuffer memoryContent, long timeStamp) {\n         this.count++;\n@@ -181,9 +152,8 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * Gets the captured content of the memory area or memory block designated upon registration.\n      *\n      * @return the captured content of the memory area or block; or {@code null} if no memory area or block content was\n-     *         captured. If the listener was registered using the MMIODevice#setMMIOEventListener(int, int, ByteBuffer, jdk.dio.mmio.MMIOEventListener) method\n-     *         the {@code ByteBuffer} returned is the {@code ByteBuffer} that was passed as the {@code captureBuffer} parameter.\n-     *\n+     * captured. If the listener was registered using the MMIODevice#setMMIOEventListener(int, int, ByteBuffer, jdk.dio.mmio.MMIOEventListener) method\n+     * the {@code ByteBuffer} returned is the {@code ByteBuffer} that was passed as the {@code captureBuffer} parameter.\n      * @see MMIODevice#setMMIOEventListener(int, java.lang.String, jdk.dio.mmio.MMIOEventListener)\n      * @see MMIODevice#setMMIOEventListener(int, int, ByteBuffer, jdk.dio.mmio.MMIOEventListener)\n      */\n@@ -194,10 +164,8 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n     /**\n      * Gets the captured value of the register designated upon registration.\n      *\n-     * @param <T>\n-     *            the type of the value held by the register.\n+     * @param <T> the type of the value held by the register.\n      * @return the captured value of the register designated upon registration or {@code null} if no register value was captured.\n-     *\n      * @see MMIODevice#setMMIOEventListener(int, java.lang.String, jdk.dio.mmio.MMIOEventListener)\n      */\n     @SuppressWarnings(\"unchecked\")\n",
            "diff_size": 68
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/15/MMIOEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/15/MMIOEvent.java\nindex 5f91b77f91d..d31303449fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/15/MMIOEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/15/MMIOEvent.java\n@@ -34,11 +34,13 @@ import java.nio.ByteBuffer;\n  * @see MMIOEventListener\n  * @since 1.0\n  */\n+\n public class MMIOEvent extends DeviceEvent<MMIODevice> {\n \n     /**\n      * The captured content of the memory area or memory block designated upon registration.\n      */\n+\n     private ByteBuffer capturedMemoryContent = null;\n \n     /**\n@@ -64,6 +66,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * @throws IllegalArgumentException\n      *             if {@code id} is negative.\n      */\n+\n     public MMIOEvent(MMIODevice device, int id) {\n         this(device, id, System.currentTimeMillis(), 0);\n     }\n@@ -87,6 +90,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * @throws IllegalArgumentException\n      *             if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n      */\n+\n     public MMIOEvent(MMIODevice device, int id, ByteBuffer capturedMemoryContent, long timeStamp, int timeStampMicros) {\n         this.device = device;\n         this.id = id;\n@@ -113,6 +117,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * @throws IllegalArgumentException\n      *             if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n      */\n+\n     public MMIOEvent(MMIODevice device, int id, long timeStamp, int timeStampMicros) {\n         this.device = device;\n         this.id = id;\n@@ -144,8 +149,8 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * @throws IllegalArgumentException\n      *             if {@code id}, {@code timeStamp} or {@code timeStampMicros} is negative.\n      */\n-    public <T extends Number> MMIOEvent(MMIODevice device, int id, T capturedRegisterValue, long timeStamp,\n-            int timeStampMicros) {\n+\n+    public <T extends Number> MMIOEvent(MMIODevice device, int id, T capturedRegisterValue, long timeStamp, int timeStampMicros) {\n         this.device = device;\n         this.id = id;\n         this.capturedRegisterValue = capturedRegisterValue;\n@@ -169,6 +174,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * @param timeStampMicro\n      *            the additional microseconds to the timestamp.\n      */\n+\n     <T extends Number> void addOccurence(T registerValue, ByteBuffer memoryContent, long timeStamp) {\n         this.count++;\n         this.capturedRegisterValue = registerValue;\n@@ -187,6 +193,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      * @see MMIODevice#setMMIOEventListener(int, java.lang.String, jdk.dio.mmio.MMIOEventListener)\n      * @see MMIODevice#setMMIOEventListener(int, int, ByteBuffer, jdk.dio.mmio.MMIOEventListener)\n      */\n+\n     public ByteBuffer getCapturedMemoryContent() {\n         return capturedMemoryContent;\n     }\n@@ -200,6 +207,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      *\n      * @see MMIODevice#setMMIOEventListener(int, java.lang.String, jdk.dio.mmio.MMIOEventListener)\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Number> T getCapturedRegisterValue() {\n         return (T) capturedRegisterValue;\n@@ -210,6 +218,7 @@ public class MMIOEvent extends DeviceEvent<MMIODevice> {\n      *\n      * @return this event ID.\n      */\n+\n     public int getID() {\n         return id;\n     }\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}