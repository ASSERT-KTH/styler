{
    "project_name": "graphfoundation-ongdb",
    "error_id": "385",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/385/RoleProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/385/RoleProcedure.java\nindex 5104687bd6d..7a3c4686d1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/385/RoleProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/385/RoleProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.discovery.procedures;\n \n import org.neo4j.causalclustering.discovery.RoleInfo;\n@@ -32,24 +33,24 @@ import static org.neo4j.internal.kernel.api.procs.ProcedureSignature.procedureSi\n \n abstract class RoleProcedure extends CallableProcedure.BasicProcedure\n {\n-    private static final String PROCEDURE_NAME = \"role\";\n-    private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n-    private static final String OUTPUT_NAME = \"role\";\n+  private static final String PROCEDURE_NAME = \"role\";\n+  private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n+  private static final String OUTPUT_NAME = \"role\";\n \n-    RoleProcedure()\n-    {\n-        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .out( OUTPUT_NAME, Neo4jTypes.NTString )\n-                .description( \"The role of a specific instance in the cluster.\" )\n-                .build() );\n-    }\n+  RoleProcedure()\n+  {\n+    super(procedureSignature(new QualifiedName(PROCEDURE_NAMESPACE, PROCEDURE_NAME))\n+        .out(OUTPUT_NAME, Neo4jTypes.NTString)\n+        .description(\"The role of a specific instance in the cluster.\")\n+        .build());\n+  }\n \n-    @Override\n-    public RawIterator<Object[],ProcedureException> apply(\n-            Context ctx, Object[] input, ResourceTracker resourceTracker )\n-    {\n-        return RawIterator.<Object[],ProcedureException>of( new Object[]{role().name()} );\n-    }\n+  @Override\n+  public RawIterator<Object[], ProcedureException> apply(\n+      Context ctx, Object[] input, ResourceTracker resourceTracker)\n+  {\n+    return RawIterator.<Object[], ProcedureException>of(new Object[] {role().name()});\n+  }\n \n-    abstract RoleInfo role();\n+  abstract RoleInfo role();\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "column": "56",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/385/RoleProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/385/RoleProcedure.java\nindex 5104687bd6d..d6cbf4d3957 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/385/RoleProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/385/RoleProcedure.java\n@@ -34,22 +34,19 @@ abstract class RoleProcedure extends CallableProcedure.BasicProcedure\n {\n     private static final String PROCEDURE_NAME = \"role\";\n     private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n-    private static final String OUTPUT_NAME = \"role\";\n+\n+private static final String OUTPUT_NAME = \"role\";\n \n     RoleProcedure()\n     {\n-        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .out( OUTPUT_NAME, Neo4jTypes.NTString )\n-                .description( \"The role of a specific instance in the cluster.\" )\n-                .build() );\n+        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) ).out( OUTPUT_NAME, Neo4jTypes.NTString ).description( \"The role of a specific instance in the cluster.\" ).build() );\n     }\n \n     @Override\n-    public RawIterator<Object[],ProcedureException> apply(\n-            Context ctx, Object[] input, ResourceTracker resourceTracker )\n+    public RawIterator<Object[],ProcedureException> apply( Context ctx, Object[] input, ResourceTracker resourceTracker )\n     {\n-        return RawIterator.<Object[],ProcedureException>of( new Object[]{role().name()} );\n+        return RawIterator.<Object[],ProcedureException> of( new Object[]{role().name()} );\n     }\n \n     abstract RoleInfo role();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}