{
    "project_name": "wso2-attic-commons",
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "161",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\t\tStringWriter sw = new StringWriter();\n\t\t\tt.printStackTrace(new PrintWriter(sw));\n\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n                    _activityInfo.o, sw.getBuffer().toString());\n\t        _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n\t\t\thasCompleted = true;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/104/ExtensionContextImpl.java\nindex 3978f962c2e..52b269b3712 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/104/ExtensionContextImpl.java\n@@ -158,8 +158,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tif (!hasCompleted) {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n+   FaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n+   _activityInfo.o, sw.getBuffer().toString());\n \t        _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n \t\t\thasCompleted = true;\n \t\t} else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/104/ExtensionContextImpl.java\nindex 3978f962c2e..2cfd6203b7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/104/ExtensionContextImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.rtrep.v2;\n \n import java.io.PrintWriter;\n@@ -43,179 +44,179 @@ import org.w3c.dom.Node;\n  * @author Tammo van Lessen (University of Stuttgart)\n  */\n public class ExtensionContextImpl implements ExtensionContext {\n-\tprivate static final Log __log = LogFactory.getLog(ExtensionContextImpl.class);\n-\t\n-\tprivate OdeInternalInstance _context;\n-\tprivate ScopeFrame _scopeFrame;\n-\tprivate ActivityInfo _activityInfo;\n-\t\n-\tprivate boolean hasCompleted = false;\n-\n-\tpublic ExtensionContextImpl(ActivityInfo activityInfo, ScopeFrame scopeFrame, OdeInternalInstance context) {\n-\t\t_activityInfo = activityInfo;\n-\t\t_context = context;\n-\t\t_scopeFrame = scopeFrame;\n-\t}\n-\t\n-\tpublic Long getProcessId() {\n-\t\treturn _context.getPid();\n-\t}\n-\n-\tpublic Map<String, OScope.Variable> getVisibleVariables() throws FaultException {\n-\t\tMap<String, OScope.Variable> visVars = new HashMap<String, OScope.Variable>();\n-\t\t\n-        OActivity current = _scopeFrame.oscope;\n-        while (current != null) {\n-            if (current instanceof OScope) {\n-                for (String varName : ((OScope)current).variables.keySet()) {\n-                \tif (!visVars.containsKey(varName)) {\n-                \t\tvisVars.put(varName, ((OScope)current).variables.get(varName));\n-                \t}\n-                }\n-            }\n-            current = current.getParent();\n+  private static final Log __log = LogFactory.getLog(ExtensionContextImpl.class);\n+\n+  private OdeInternalInstance _context;\n+  private ScopeFrame _scopeFrame;\n+  private ActivityInfo _activityInfo;\n+\n+  private boolean hasCompleted = false;\n+\n+  public ExtensionContextImpl(ActivityInfo activityInfo, ScopeFrame scopeFrame, OdeInternalInstance context) {\n+    _activityInfo = activityInfo;\n+    _context = context;\n+    _scopeFrame = scopeFrame;\n+  }\n+\n+  public Long getProcessId() {\n+    return _context.getPid();\n+  }\n+\n+  public Map<String, OScope.Variable> getVisibleVariables() throws FaultException {\n+    Map<String, OScope.Variable> visVars = new HashMap<String, OScope.Variable>();\n+\n+    OActivity current = _scopeFrame.oscope;\n+    while (current != null) {\n+      if (current instanceof OScope) {\n+        for (String varName : ((OScope) current).variables.keySet()) {\n+          if (!visVars.containsKey(varName)) {\n+            visVars.put(varName, ((OScope) current).variables.get(varName));\n+          }\n         }\n-\t\t\n-\t\treturn visVars;\n-\t}\n-\n-\tpublic String readMessageProperty(OScope.Variable variable, OProcess.OProperty property)\n-\t\t\tthrows FaultException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\n-\t\treturn _context.readProperty(vi, property);\n-\t}\n-\n-\tpublic Node readVariable(OScope.Variable variable)\n-\t\t\tthrows FaultException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\n-\t\treturn _context.fetchVariableData(vi, _scopeFrame, true);\n-\t}\n-\n-\tpublic void writeVariable(String variableName, Node value)\n-\t\t\tthrows FaultException, ExternalVariableModuleException {\n-\t\tOScope.Variable var = getVisibleVariable(variableName);\n-\t\tif (var == null) {\n-\t\t\tthrow new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n-\t\t}\n-\t\twriteVariable(var, value);\n-\t}\n-\n-\tpublic Node readVariable(String variableName) throws FaultException {\n-\t\tOScope.Variable var = getVisibleVariable(variableName);\n-\t\tif (var == null) {\n-\t\t\tthrow new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n-\t\t}\n-\n-\t\treturn readVariable(var);\n-\t}\n-\n-\tpublic void writeVariable(OScope.Variable variable, Node value)\n-\t\t\tthrows FaultException, ExternalVariableModuleException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\t\t\n-\t\t_context.initializeVariable(vi, _scopeFrame, value);\n-        _context.commitChanges(vi, _scopeFrame, value);\n-        VariableModificationEvent vme = new VariableModificationEvent(variable.name);\n-        vme.setNewValue(value);\n-        sendEvent(vme);\n-\t}\n-\n-\tpublic OScope.Variable getVisibleVariable(String varName) {\n-    \treturn _scopeFrame.oscope.getVisibleVariable(varName);\n+      }\n+      current = current.getParent();\n     }\n-\t\n-\tpublic boolean isVariableVisible(String varName) {\n-\t\treturn _scopeFrame.oscope.getVisibleVariable(varName) != null;\n-\t}\n-\n-\tpublic String getActivityName() {\n-\t\treturn _activityInfo.o.name;\n-\t}\n-\n-\tpublic OActivity getOActivity() {\n-\t\treturn _activityInfo.o;\n-\t}\n-\n-\tpublic void sendEvent(ScopeEvent event) {\n-        if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n-        \tevent.setLineNo(_activityInfo.o.debugInfo.startLine);\n-        }\n-        _scopeFrame.fillEventInfo(event);\n-        _context.sendEvent(event);\n-\t}\n-\t\n-\tpublic void complete() {\n-\t\tif (!hasCompleted) {\n-\t\t\t_activityInfo.parent.completed(null, CompensationHandler.emptySet());\n-\t\t\thasCompleted = true;\n-\t\t} else {\n-\t\t\tif (__log.isWarnEnabled()) {\n-\t\t\t\t__log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tpublic void completeWithFault(Throwable t) {\n-\t\tif (!hasCompleted) {\n-\t\t\tStringWriter sw = new StringWriter();\n-\t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n-\t        _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n-\t\t\thasCompleted = true;\n-\t\t} else {\n-\t\t\tif (__log.isWarnEnabled()) {\n-\t\t\t\t__log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tpublic void completeWithFault(FaultException ex) {\n-\t\tif (!hasCompleted) {\n-\t\t\tFaultData fault = new FaultData(ex.getQName(), _activityInfo.o, ex.getMessage());\n-\t\t\t_activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n-\t\t\thasCompleted = true;\n-\t\t} else {\n-\t\t\tif (__log.isWarnEnabled()) {\n-\t\t\t\t__log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\tpublic OdeInternalInstance getInternalInstance() {\n-\t\treturn _context;\n-\t}\n-\n-\tpublic URI getDUDir() {\n-\t\treturn _context.getBaseResourceURI();\n-\t}\n-\n-\tpublic void printToConsole(String msg) {\n-\t\tLogFactory.getLog(\"org.apache.ode.extension.Console\").info(msg);\t\t\n-\t}\n-    \n-    public PartnerLinkInstance getPartnerLinkInstance(String partnerLinkName) throws FaultException {\n-\t\tOPartnerLink plink = getVisiblePartnerLink(partnerLinkName);\n-\t\tif (plink == null) {\n-\t\t\tthrow new RuntimeException(\"PartnerLink '\" + partnerLinkName + \"' not visible.\");\n-\t\t}\n-\n-\t\treturn getPartnerLinkInstance(plink);\n-\t}\n-\n-    public OPartnerLink getVisiblePartnerLink(String partnerLinkName) {\n-    \treturn _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName);\n+\n+    return visVars;\n+  }\n+\n+  public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property)\n+    throws FaultException {\n+    VariableInstance vi = _scopeFrame.resolve(variable);\n+    return _context.readProperty(vi, property);\n+  }\n+\n+  public Node readVariable(OScope.Variable variable)\n+    throws FaultException {\n+    VariableInstance vi = _scopeFrame.resolve(variable);\n+    return _context.fetchVariableData(vi, _scopeFrame, true);\n+  }\n+\n+  public void writeVariable(String variableName, Node value)\n+    throws FaultException, ExternalVariableModuleException {\n+    OScope.Variable var = getVisibleVariable(variableName);\n+    if (var == null) {\n+      throw new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n+    }\n+    writeVariable(var, value);\n+  }\n+\n+  public Node readVariable(String variableName) throws FaultException {\n+    OScope.Variable var = getVisibleVariable(variableName);\n+    if (var == null) {\n+      throw new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n     }\n \n-\tpublic boolean isPartnerLinkVisible(String partnerLinkName) {\n-\t\treturn _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName) != null;\n-\t}\n+    return readVariable(var);\n+  }\n+\n+  public void writeVariable(OScope.Variable variable, Node value)\n+    throws FaultException, ExternalVariableModuleException {\n+    VariableInstance vi = _scopeFrame.resolve(variable);\n+    _context.initializeVariable(vi, _scopeFrame, value);\n+    _context.commitChanges(vi, _scopeFrame, value);\n+    VariableModificationEvent vme = new VariableModificationEvent(variable.name);\n+    vme.setNewValue(value);\n+    sendEvent(vme);\n+  }\n+\n+  public OScope.Variable getVisibleVariable(String varName) {\n+    return _scopeFrame.oscope.getVisibleVariable(varName);\n+  }\n+\n+  public boolean isVariableVisible(String varName) {\n+    return _scopeFrame.oscope.getVisibleVariable(varName) != null;\n+  }\n+\n+  public String getActivityName() {\n+    return _activityInfo.o.name;\n+  }\n+\n+  public OActivity getOActivity() {\n+    return _activityInfo.o;\n+  }\n+\n+  public void sendEvent(ScopeEvent event) {\n+    if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n+      event.setLineNo(_activityInfo.o.debugInfo.startLine);\n+    }\n+    _scopeFrame.fillEventInfo(event);\n+    _context.sendEvent(event);\n+  }\n+\n+  public void complete() {\n+    if (!hasCompleted) {\n+      _activityInfo.parent.completed(null, CompensationHandler.emptySet());\n+      hasCompleted = true;\n+    } else {\n+      if (__log.isWarnEnabled()) {\n+        __log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n+      }\n+    }\n+  }\n+\n+  public void completeWithFault(Throwable t) {\n+    if (!hasCompleted) {\n+      StringWriter sw = new StringWriter();\n+      t.printStackTrace(new PrintWriter(sw));\n+      FaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n+        _activityInfo.o, sw.getBuffer().toString());\n+      _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n+      hasCompleted = true;\n+    } else {\n+      if (__log.isWarnEnabled()) {\n+        __log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n+      }\n+    }\n+  }\n+\n+  public void completeWithFault(FaultException ex) {\n+    if (!hasCompleted) {\n+      FaultData fault = new FaultData(ex.getQName(), _activityInfo.o, ex.getMessage());\n+      _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n+      hasCompleted = true;\n+    } else {\n+      if (__log.isWarnEnabled()) {\n+        __log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n+      }\n+    }\n \n-    public PartnerLinkInstance getPartnerLinkInstance(OPartnerLink partnerLink) throws FaultException {\n-\t\treturn _scopeFrame.resolve(partnerLink);\n-\t}\n+  }\n \n-    public ProcessModel getProcessModel() {\n-        return _context.getProcessModel();\n+  public OdeInternalInstance getInternalInstance() {\n+    return _context;\n+  }\n+\n+  public URI getDUDir() {\n+    return _context.getBaseResourceURI();\n+  }\n+\n+  public void printToConsole(String msg) {\n+    LogFactory.getLog(\"org.apache.ode.extension.Console\").info(msg);\n+  }\n+\n+  public PartnerLinkInstance getPartnerLinkInstance(String partnerLinkName) throws FaultException {\n+    OPartnerLink plink = getVisiblePartnerLink(partnerLinkName);\n+    if (plink == null) {\n+      throw new RuntimeException(\"PartnerLink '\" + partnerLinkName + \"' not visible.\");\n     }\n+\n+    return getPartnerLinkInstance(plink);\n+  }\n+\n+  public OPartnerLink getVisiblePartnerLink(String partnerLinkName) {\n+    return _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName);\n+  }\n+\n+  public boolean isPartnerLinkVisible(String partnerLinkName) {\n+    return _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName) != null;\n+  }\n+\n+  public PartnerLinkInstance getPartnerLinkInstance(OPartnerLink partnerLink) throws FaultException {\n+    return _scopeFrame.resolve(partnerLink);\n+  }\n+\n+  public ProcessModel getProcessModel() {\n+    return _context.getProcessModel();\n+  }\n }\n",
            "diff_size": 272
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/104/ExtensionContextImpl.java\nindex 3978f962c2e..edcb0e5432e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/104/ExtensionContextImpl.java\n@@ -48,8 +48,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n \tprivate OdeInternalInstance _context;\n \tprivate ScopeFrame _scopeFrame;\n \tprivate ActivityInfo _activityInfo;\n-\t\n-\tprivate boolean hasCompleted = false;\n+private boolean hasCompleted = false;\n \n \tpublic ExtensionContextImpl(ActivityInfo activityInfo, ScopeFrame scopeFrame, OdeInternalInstance context) {\n \t\t_activityInfo = activityInfo;\n@@ -65,7 +64,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tMap<String, OScope.Variable> visVars = new HashMap<String, OScope.Variable>();\n \t\t\n         OActivity current = _scopeFrame.oscope;\n-        while (current != null) {\n+while (current != null) {\n             if (current instanceof OScope) {\n                 for (String varName : ((OScope)current).variables.keySet()) {\n                 \tif (!visVars.containsKey(varName)) {\n@@ -75,9 +74,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n             }\n             current = current.getParent();\n         }\n-\t\t\n-\t\treturn visVars;\n-\t}\n+return visVars;\n+    }\n \n \tpublic String readMessageProperty(OScope.Variable variable, OProcess.OProperty property)\n \t\t\tthrows FaultException {\n@@ -111,9 +109,9 @@ public class ExtensionContextImpl implements ExtensionContext {\n \n \tpublic void writeVariable(OScope.Variable variable, Node value)\n \t\t\tthrows FaultException, ExternalVariableModuleException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\t\t\n-\t\t_context.initializeVariable(vi, _scopeFrame, value);\n-        _context.commitChanges(vi, _scopeFrame, value);\n+\t\tVariableInstance vi = _scopeFrame.resolve(variable);\n+_context.initializeVariable(vi, _scopeFrame, value);\n+_context.commitChanges(vi, _scopeFrame, value);\n         VariableModificationEvent vme = new VariableModificationEvent(variable.name);\n         vme.setNewValue(value);\n         sendEvent(vme);\n@@ -121,9 +119,9 @@ public class ExtensionContextImpl implements ExtensionContext {\n \n \tpublic OScope.Variable getVisibleVariable(String varName) {\n     \treturn _scopeFrame.oscope.getVisibleVariable(varName);\n-    }\n-\t\n-\tpublic boolean isVariableVisible(String varName) {\n+     }\n+\n+public boolean isVariableVisible(String varName) {\n \t\treturn _scopeFrame.oscope.getVisibleVariable(varName) != null;\n \t}\n \n@@ -136,7 +134,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t}\n \n \tpublic void sendEvent(ScopeEvent event) {\n-        if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n+    if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n         \tevent.setLineNo(_activityInfo.o.debugInfo.startLine);\n         }\n         _scopeFrame.fillEventInfo(event);\n@@ -158,9 +156,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tif (!hasCompleted) {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n-\t        _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n+\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"), _activityInfo.o, sw.getBuffer().toString());\n+_activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n \t\t\thasCompleted = true;\n \t\t} else {\n \t\t\tif (__log.isWarnEnabled()) {\n@@ -191,11 +188,11 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t}\n \n \tpublic void printToConsole(String msg) {\n-\t\tLogFactory.getLog(\"org.apache.ode.extension.Console\").info(msg);\t\t\n-\t}\n-    \n-    public PartnerLinkInstance getPartnerLinkInstance(String partnerLinkName) throws FaultException {\n-\t\tOPartnerLink plink = getVisiblePartnerLink(partnerLinkName);\n+\t\tLogFactory.getLog(\"org.apache.ode.extension.Console\").info(msg);\n+    }\n+\n+\tpublic PartnerLinkInstance getPartnerLinkInstance(String partnerLinkName) throws FaultException {\n+OPartnerLink plink = getVisiblePartnerLink(partnerLinkName);\n \t\tif (plink == null) {\n \t\t\tthrow new RuntimeException(\"PartnerLink '\" + partnerLinkName + \"' not visible.\");\n \t\t}\n@@ -218,4 +215,4 @@ public class ExtensionContextImpl implements ExtensionContext {\n     public ProcessModel getProcessModel() {\n         return _context.getProcessModel();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/104/ExtensionContextImpl.java\nindex 3978f962c2e..47047e6f3dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/104/ExtensionContextImpl.java\n@@ -159,7 +159,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n \t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n+      _activityInfo.o, sw.getBuffer().toString());\n \t        _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n \t\t\thasCompleted = true;\n \t\t} else {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/104/ExtensionContextImpl.java\nindex 3978f962c2e..52b269b3712 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/104/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/104/ExtensionContextImpl.java\n@@ -158,8 +158,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tif (!hasCompleted) {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n+   FaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n+   _activityInfo.o, sw.getBuffer().toString());\n \t        _activityInfo.parent.completed(fault, CompensationHandler.emptySet());\n \t\t\thasCompleted = true;\n \t\t} else {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}