{
    "project_name": "intuit-Tank",
    "error_id": "94",
    "information": {
        "errors": [
            {
                "line": "51",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n            ServletException {\n        if (identity != null && identity.getAccount() != null && identityManager.lookupById(User.class, identity.getAccount().getId()) != null) {\n            ThreadLocalUsernameProvider.getUsernameProvider().setUserName(\n                    identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n        } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "50",
                    "column": "59",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/94/UserNameFilter.java\nindex 5eadeb5125a..83e6c1e05bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/94/UserNameFilter.java\n@@ -30,34 +30,35 @@ import org.picketlink.idm.model.basic.User;\n import com.intuit.tank.vm.common.ThreadLocalUsernameProvider;\n \n /**\n- * \n  * @author Kevin McGoldrick\n- * \n  */\n public class UserNameFilter implements Filter {\n \n-    @Inject\n-    private Identity identity;\n-    \n-    @Inject\n-    private IdentityManager identityManager;\n-\n-    @Override\n-    public void init(FilterConfig filterConfig) throws ServletException {}\n-\n-    @Override\n-    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n-            ServletException {\n-        if (identity != null && identity.getAccount() != null && identityManager.lookupById(User.class, identity.getAccount().getId()) != null) {\n-            ThreadLocalUsernameProvider.getUsernameProvider().setUserName(\n-                    identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n-        } else {\n-            ThreadLocalUsernameProvider.getUsernameProvider().setUserName(null);\n-        }\n-        chain.doFilter(request, response);\n+  @Inject\n+  private Identity identity;\n+\n+  @Inject\n+  private IdentityManager identityManager;\n+\n+  @Override\n+  public void init(FilterConfig filterConfig) throws ServletException {\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n+    ServletException {\n+    if (identity != null && identity.getAccount() != null &&\n+      identityManager.lookupById(User.class, identity.getAccount().getId()) != null) {\n+      ThreadLocalUsernameProvider.getUsernameProvider().setUserName(\n+        identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n+    } else {\n+      ThreadLocalUsernameProvider.getUsernameProvider().setUserName(null);\n     }\n+    chain.doFilter(request, response);\n+  }\n \n-    @Override\n-    public void destroy() {}\n+  @Override\n+  public void destroy() {\n+  }\n \n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/94/UserNameFilter.java\nindex 5eadeb5125a..51a47ad5cb1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/94/UserNameFilter.java\n@@ -40,10 +40,12 @@ public class UserNameFilter implements Filter {\n     private Identity identity;\n     \n     @Inject\n-    private IdentityManager identityManager;\n+private IdentityManager identityManager;\n \n     @Override\n-    public void init(FilterConfig filterConfig) throws ServletException {}\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+\n+}\n \n     @Override\n     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n@@ -58,6 +60,7 @@ public class UserNameFilter implements Filter {\n     }\n \n     @Override\n-    public void destroy() {}\n-\n+    public void destroy() {\n }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/94/UserNameFilter.java\nindex 5eadeb5125a..e7a6b60b51a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/94/UserNameFilter.java\n@@ -13,8 +13,9 @@ package com.intuit.tank.util;\n  * #L%\n  */\n \n-import java.io.IOException;\n \n+\n+import java.io.IOException;\n import javax.inject.Inject;\n import javax.servlet.Filter;\n import javax.servlet.FilterChain;\n@@ -22,11 +23,9 @@ import javax.servlet.FilterConfig;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n-\n import org.picketlink.Identity;\n import org.picketlink.idm.IdentityManager;\n import org.picketlink.idm.model.basic.User;\n-\n import com.intuit.tank.vm.common.ThreadLocalUsernameProvider;\n \n /**\n@@ -34,23 +33,25 @@ import com.intuit.tank.vm.common.ThreadLocalUsernameProvider;\n  * @author Kevin McGoldrick\n  * \n  */\n-public class UserNameFilter implements Filter {\n \n+\n+public class UserNameFilter implements Filter {\n     @Inject\n     private Identity identity;\n-    \n+\n     @Inject\n     private IdentityManager identityManager;\n \n     @Override\n-    public void init(FilterConfig filterConfig) throws ServletException {}\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+\n+    }\n \n     @Override\n-    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n-            ServletException {\n-        if (identity != null && identity.getAccount() != null && identityManager.lookupById(User.class, identity.getAccount().getId()) != null) {\n-            ThreadLocalUsernameProvider.getUsernameProvider().setUserName(\n-                    identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+        if (identity != null && identity.getAccount() != null\n+                && identityManager.lookupById(User.class, identity.getAccount().getId()) != null) {\n+            ThreadLocalUsernameProvider.getUsernameProvider().setUserName(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n         } else {\n             ThreadLocalUsernameProvider.getUsernameProvider().setUserName(null);\n         }\n@@ -58,6 +59,8 @@ public class UserNameFilter implements Filter {\n     }\n \n     @Override\n-    public void destroy() {}\n+    public void destroy() {\n+\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "20",
                    "severity": "warning",
                    "message": "'!=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "52",
                    "severity": "warning",
                    "message": "'!=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "52",
                    "severity": "warning",
                    "message": "'!=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "58",
                    "severity": "warning",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "58",
                    "severity": "warning",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "97",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "51",
                    "column": "128",
                    "severity": "warning",
                    "message": "'!=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "128",
                    "severity": "warning",
                    "message": "'!=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "135",
                    "severity": "warning",
                    "message": "'{' at column 135 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "51",
                    "column": "135",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "135",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/94/UserNameFilter.java\nindex 5eadeb5125a..f0777688597 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/94/UserNameFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/94/UserNameFilter.java\n@@ -48,8 +48,7 @@ public class UserNameFilter implements Filter {\n     @Override\n     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n             ServletException {\n-        if (identity != null && identity.getAccount() != null && identityManager.lookupById(User.class, identity.getAccount().getId()) != null) {\n-            ThreadLocalUsernameProvider.getUsernameProvider().setUserName(\n+        if(identity!= null && identity.getAccount()!=null&&identityManager.lookupById(User.class,identity.getAccount().getId())!=null){ThreadLocalUsernameProvider.getUsernameProvider().setUserName(\n                     identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n         } else {\n             ThreadLocalUsernameProvider.getUsernameProvider().setUserName(null);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}