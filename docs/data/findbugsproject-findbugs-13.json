{
    "project_name": "findbugsproject-findbugs",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "39",
                "column": "5",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n    public OpcodeStackDetector() {\n    \tsuper();\n        isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/13/OpcodeStackDetector.java\nindex bc8ace8985c..ee762c0a152 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/13/OpcodeStackDetector.java\n@@ -36,7 +36,7 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n     private final boolean isUsingCustomUserValue;\n \n     public OpcodeStackDetector() {\n-    \tsuper();\n+    super();\n         isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/13/OpcodeStackDetector.java\nindex bc8ace8985c..f31de46c7f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/13/OpcodeStackDetector.java\n@@ -36,7 +36,7 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n     private final boolean isUsingCustomUserValue;\n \n     public OpcodeStackDetector() {\n-    \tsuper();\n+        super();\n         isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n     }\n \n@@ -55,8 +55,9 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n \n     @Override\n     public final void visitCode(Code obj) {\n-        if (!shouldVisitCode(obj))\n+        if (!shouldVisitCode(obj)) {\n             return;\n+        }\n         stack = new OpcodeStack();\n         stack.resetForMethodEntry(this);\n         super.visitCode(obj);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/13/OpcodeStackDetector.java\nindex bc8ace8985c..b3dd05be319 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/13/OpcodeStackDetector.java\n@@ -36,8 +36,8 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n     private final boolean isUsingCustomUserValue;\n \n     public OpcodeStackDetector() {\n-    \tsuper();\n-        isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n+    super();\n+isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n     }\n \n     /**\n@@ -88,4 +88,4 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n     public final boolean isUsingCustomUserValue() {\n         return isUsingCustomUserValue;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/13/OpcodeStackDetector.java\nindex bc8ace8985c..c627625d839 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/13/OpcodeStackDetector.java\n@@ -20,7 +20,6 @@\n package edu.umd.cs.findbugs.bcel;\n \n import org.apache.bcel.classfile.Code;\n-\n import edu.umd.cs.findbugs.BytecodeScanningDetector;\n import edu.umd.cs.findbugs.OpcodeStack;\n import edu.umd.cs.findbugs.OpcodeStack.JumpInfo;\n@@ -31,18 +30,21 @@ import edu.umd.cs.findbugs.OpcodeStack.JumpInfo;\n  *\n  * @see BytecodeScanningDetector\n  */\n-abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n \n+abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n     private final boolean isUsingCustomUserValue;\n \n+\n     public OpcodeStackDetector() {\n-    \tsuper();\n+        super();\n         isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n     }\n \n     /**\n      * @author pwilliam\n      */\n+\n+\n     public abstract static class WithCustomJumpInfo extends OpcodeStackDetector {\n         public abstract JumpInfo customJumpInfo();\n     }\n@@ -85,7 +87,8 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n      * will not use iterative opcode stack evaluation.\n      * @see OpcodeStack#resetForMethodEntry(edu.umd.cs.findbugs.visitclass.DismantleBytecode)\n      */\n+\n     public final boolean isUsingCustomUserValue() {\n         return isUsingCustomUserValue;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/13/OpcodeStackDetector.java\nindex bc8ace8985c..ee762c0a152 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/13/OpcodeStackDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/13/OpcodeStackDetector.java\n@@ -36,7 +36,7 @@ abstract public class OpcodeStackDetector extends BytecodeScanningDetector {\n     private final boolean isUsingCustomUserValue;\n \n     public OpcodeStackDetector() {\n-    \tsuper();\n+    super();\n         isUsingCustomUserValue = getClass().isAnnotationPresent(OpcodeStack.CustomUserValue.class);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}