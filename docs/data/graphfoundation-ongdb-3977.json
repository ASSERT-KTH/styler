{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3977",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3977/MatrixUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3977/MatrixUtil.java\nindex faaa6c5b7c6..90d23e5c374 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3977/MatrixUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3977/MatrixUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.HashMap;\n@@ -26,293 +27,305 @@ import java.util.Set;\n /**\n  * Utility class that hold implementations of vectors and matrices of doubles,\n  * all indexed by integers, together with some essential operations on those.\n+ *\n  * @author Patrik Larsson\n  */\n public class MatrixUtil\n {\n+  /**\n+   * Vector of doubles\n+   */\n+  public static class DoubleVector\n+  {\n+    Map<Integer, Double> values = new HashMap<>();\n+\n     /**\n-     * Vector of doubles\n+     * Increment a value in the vector.\n+     *\n+     * @param index\n+     * @param increment\n      */\n-    public static class DoubleVector\n+    public void incrementValue(Integer index, double increment)\n     {\n-        Map<Integer,Double> values = new HashMap<>();\n-\n-        /**\n-         * Increment a value in the vector.\n-         * @param index\n-         * @param increment\n-         */\n-        public void incrementValue( Integer index, double increment )\n-        {\n-            Double currentValue = values.get( index );\n-            if ( currentValue == null )\n-            {\n-                currentValue = 0.0;\n-            }\n-            currentValue += increment;\n-            values.put( index, currentValue );\n-        }\n-\n-        /**\n-         * Set a value for a certain index.\n-         * @param index\n-         * @param value\n-         */\n-        public void set( Integer index, double value )\n-        {\n-            values.put( index, value );\n-        }\n-\n-        /**\n-         * Get a value for a certain index.\n-         * @param index\n-         * @return The value or null.\n-         */\n-        public Double get( Integer index )\n-        {\n-            return values.get( index );\n-        }\n-\n-        /**\n-         * Get all indices for which values are stored.\n-         * @return The indices as a set.\n-         */\n-        public Set<Integer> getIndices()\n-        {\n-            return values.keySet();\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            String res = \"\";\n-            int maxIndex = 0;\n-            for ( Integer i : values.keySet() )\n-            {\n-                if ( i > maxIndex )\n-                {\n-                    maxIndex = i;\n-                }\n-            }\n-            for ( int i = 0; i <= maxIndex; ++i )\n-            {\n-                Double value = values.get( i );\n-                if ( value == null )\n-                {\n-                    value = 0.0;\n-                }\n-                res += \" \" + value;\n-            }\n-            return res + \"\\n\";\n-        }\n+      Double currentValue = values.get(index);\n+      if (currentValue == null)\n+      {\n+        currentValue = 0.0;\n+      }\n+      currentValue += increment;\n+      values.put(index, currentValue);\n     }\n+\n     /**\n-     * 2-Dimensional matrix of doubles.\n+     * Set a value for a certain index.\n+     *\n+     * @param index\n+     * @param value\n      */\n-    public static class DoubleMatrix\n+    public void set(Integer index, double value)\n     {\n-        Map<Integer,DoubleVector> rows = new HashMap<>();\n+      values.put(index, value);\n+    }\n \n-        /**\n-         * Increment a value at a certain position.\n-         * @param rowIndex\n-         * @param columnIndex\n-         * @param increment\n-         */\n-        public void incrementValue( Integer rowIndex, Integer columnIndex,\n-            double increment )\n-        {\n-            DoubleVector row = rows.computeIfAbsent( rowIndex, k -> new DoubleVector() );\n-            row.incrementValue( columnIndex, increment );\n-        }\n+    /**\n+     * Get a value for a certain index.\n+     *\n+     * @param index\n+     * @return The value or null.\n+     */\n+    public Double get(Integer index)\n+    {\n+      return values.get(index);\n+    }\n \n-        /**\n-         * Set a value at a certain position.\n-         * @param rowIndex\n-         * @param columnIndex\n-         * @param value\n-         */\n-        public void set( Integer rowIndex, Integer columnIndex, double value )\n-        {\n-            DoubleVector row = rows.computeIfAbsent( rowIndex, k -> new DoubleVector() );\n-            row.set( columnIndex, value );\n-        }\n+    /**\n+     * Get all indices for which values are stored.\n+     *\n+     * @return The indices as a set.\n+     */\n+    public Set<Integer> getIndices()\n+    {\n+      return values.keySet();\n+    }\n \n-        /**\n-         * Get the value at a certain position.\n-         * @param rowIndex\n-         * @param columnIndex\n-         * @return The value or null.\n-         */\n-        public Double get( Integer rowIndex, Integer columnIndex )\n+    @Override\n+    public String toString()\n+    {\n+      String res = \"\";\n+      int maxIndex = 0;\n+      for (Integer i : values.keySet())\n+      {\n+        if (i > maxIndex)\n         {\n-            DoubleVector row = rows.get( rowIndex );\n-            if ( row == null )\n-            {\n-                return null;\n-            }\n-            return row.get( columnIndex );\n+          maxIndex = i;\n         }\n-\n-        /**\n-         * Gets an entire row as a vector.\n-         * @param rowIndex\n-         * @return The row vector or null.\n-         */\n-        public DoubleVector getRow( Integer rowIndex )\n+      }\n+      for (int i = 0; i <= maxIndex; ++i)\n+      {\n+        Double value = values.get(i);\n+        if (value == null)\n         {\n-            return rows.get( rowIndex );\n+          value = 0.0;\n         }\n+        res += \" \" + value;\n+      }\n+      return res + \"\\n\";\n+    }\n+  }\n \n-        /**\n-         * Inserts or replaces an entire row as a vector.\n-         * @param rowIndex\n-         * @param row\n-         */\n-        public void setRow( Integer rowIndex, DoubleVector row )\n-        {\n-            rows.put( rowIndex, row );\n-        }\n+  /**\n+   * 2-Dimensional matrix of doubles.\n+   */\n+  public static class DoubleMatrix\n+  {\n+    Map<Integer, DoubleVector> rows = new HashMap<>();\n \n-        @Override\n-        public String toString()\n-        {\n-            String res = \"\";\n-            for ( Integer i : rows.keySet() )\n-            {\n-                res += rows.get( i ).toString();\n-            }\n-            return res;\n-        }\n+    /**\n+     * Increment a value at a certain position.\n+     *\n+     * @param rowIndex\n+     * @param columnIndex\n+     * @param increment\n+     */\n+    public void incrementValue(Integer rowIndex, Integer columnIndex,\n+                               double increment)\n+    {\n+      DoubleVector row = rows.computeIfAbsent(rowIndex, k -> new DoubleVector());\n+      row.incrementValue(columnIndex, increment);\n+    }\n \n-        /**\n-         * @return The number of rows in the matrix.\n-         */\n-        public int size()\n-        {\n-            return rows.keySet().size();\n-        }\n+    /**\n+     * Set a value at a certain position.\n+     *\n+     * @param rowIndex\n+     * @param columnIndex\n+     * @param value\n+     */\n+    public void set(Integer rowIndex, Integer columnIndex, double value)\n+    {\n+      DoubleVector row = rows.computeIfAbsent(rowIndex, k -> new DoubleVector());\n+      row.set(columnIndex, value);\n     }\n \n-    private MatrixUtil()\n+    /**\n+     * Get the value at a certain position.\n+     *\n+     * @param rowIndex\n+     * @param columnIndex\n+     * @return The value or null.\n+     */\n+    public Double get(Integer rowIndex, Integer columnIndex)\n     {\n+      DoubleVector row = rows.get(rowIndex);\n+      if (row == null)\n+      {\n+        return null;\n+      }\n+      return row.get(columnIndex);\n     }\n \n     /**\n-     * Destructive (in-place) LU-decomposition\n-     * @param matrix\n-     *            input\n+     * Gets an entire row as a vector.\n+     *\n+     * @param rowIndex\n+     * @return The row vector or null.\n      */\n-    // TODO: extend to LUP?\n-    public static void LUDecomposition( DoubleMatrix matrix )\n+    public DoubleVector getRow(Integer rowIndex)\n     {\n-        int matrixSize = matrix.size();\n-        for ( int i = 0; i < matrixSize - 1; ++i )\n-        {\n-            double pivot = matrix.get( i, i );\n-            DoubleVector row = matrix.getRow( i );\n-            for ( int r = i + 1; r < matrixSize; ++r )\n-            {\n-                Double rowStartValue = matrix.get( r, i );\n-                if ( rowStartValue == null || rowStartValue == 0.0 )\n-                {\n-                    continue;\n-                }\n-                double factor = rowStartValue / pivot;\n-                matrix.set( r, i, factor );\n-                for ( Integer c : row.values.keySet() )\n-                {\n-                    if ( c <= i )\n-                    {\n-                        continue;\n-                    }\n-                    matrix.incrementValue( r, c, -row.get( c ) * factor );\n-                }\n-            }\n-        }\n+      return rows.get(rowIndex);\n     }\n \n     /**\n-     * Solves the linear equation system ax = b.\n-     * @param a\n-     *            Input matrix. Will be altered in-place.\n-     * @param b\n-     *            Input vector. Will be altered in-place.\n-     * @return the vector x solving the equations.\n+     * Inserts or replaces an entire row as a vector.\n+     *\n+     * @param rowIndex\n+     * @param row\n      */\n-    public static DoubleVector LinearSolve( DoubleMatrix a, DoubleVector b )\n+    public void setRow(Integer rowIndex, DoubleVector row)\n     {\n-        LUDecomposition( a );\n-        // first solve Ly = b ...\n-        for ( int r = 0; r < a.size(); ++r )\n-        {\n-            DoubleVector row = a.getRow( r );\n-            for ( Integer c : row.values.keySet() )\n-            {\n-                if ( c >= r )\n-                {\n-                    continue;\n-                }\n-                b.incrementValue( r, -row.get( c ) * b.get( c ) );\n-            }\n-        }\n-        // ... then Ux = y\n-        for ( int r = a.size() - 1; r >= 0; --r )\n-        {\n-            DoubleVector row = a.getRow( r );\n-            for ( Integer c : row.values.keySet() )\n-            {\n-                if ( c <= r )\n-                {\n-                    continue;\n-                }\n-                b.incrementValue( r, -row.get( c ) * b.get( c ) );\n-            }\n-            b.set( r, b.get( r ) / row.get( r ) );\n-        }\n-        return b;\n+      rows.put(rowIndex, row);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      String res = \"\";\n+      for (Integer i : rows.keySet())\n+      {\n+        res += rows.get(i).toString();\n+      }\n+      return res;\n     }\n \n     /**\n-     * Multiplies a matrix and a vector.\n-     * @param matrix\n-     * @param vector\n-     * @return The result as a new vector.\n+     * @return The number of rows in the matrix.\n      */\n-    public static DoubleVector multiply( DoubleMatrix matrix,\n-        DoubleVector vector )\n+    public int size()\n+    {\n+      return rows.keySet().size();\n+    }\n+  }\n+\n+  private MatrixUtil()\n+  {\n+  }\n+\n+  /**\n+   * Destructive (in-place) LU-decomposition\n+   *\n+   * @param matrix input\n+   */\n+  // TODO: extend to LUP?\n+  public static void LUDecomposition(DoubleMatrix matrix)\n+  {\n+    int matrixSize = matrix.size();\n+    for (int i = 0; i < matrixSize - 1; ++i)\n     {\n-        DoubleVector result = new DoubleVector();\n-        for ( int rowIndex = 0; rowIndex < matrix.size(); ++rowIndex )\n+      double pivot = matrix.get(i, i);\n+      DoubleVector row = matrix.getRow(i);\n+      for (int r = i + 1; r < matrixSize; ++r)\n+      {\n+        Double rowStartValue = matrix.get(r, i);\n+        if (rowStartValue == null || rowStartValue == 0.0)\n         {\n-            DoubleVector row = matrix.getRow( rowIndex );\n-            for ( Integer index : row.getIndices() )\n-            {\n-                result.incrementValue( rowIndex, row.get( index )\n-                    * vector.get( index ) );\n-            }\n+          continue;\n         }\n-        return result;\n+        double factor = rowStartValue / pivot;\n+        matrix.set(r, i, factor);\n+        for (Integer c : row.values.keySet())\n+        {\n+          if (c <= i)\n+          {\n+            continue;\n+          }\n+          matrix.incrementValue(r, c, -row.get(c) * factor);\n+        }\n+      }\n     }\n+  }\n \n-    /**\n-     * In-place normalization of a vector.\n-     * @param vector\n-     * @return The initial euclidean length of the vector.\n-     */\n-    public static double normalize( DoubleVector vector )\n+  /**\n+   * Solves the linear equation system ax = b.\n+   *\n+   * @param a Input matrix. Will be altered in-place.\n+   * @param b Input vector. Will be altered in-place.\n+   * @return the vector x solving the equations.\n+   */\n+  public static DoubleVector LinearSolve(DoubleMatrix a, DoubleVector b)\n+  {\n+    LUDecomposition(a);\n+    // first solve Ly = b ...\n+    for (int r = 0; r < a.size(); ++r)\n     {\n-        double len = 0;\n-        for ( Integer index : vector.getIndices() )\n+      DoubleVector row = a.getRow(r);\n+      for (Integer c : row.values.keySet())\n+      {\n+        if (c >= r)\n         {\n-            Double d = vector.get( index );\n-            len += d * d;\n+          continue;\n         }\n-        len = Math.sqrt( len );\n-        for ( Integer index : vector.getIndices() )\n+        b.incrementValue(r, -row.get(c) * b.get(c));\n+      }\n+    }\n+    // ... then Ux = y\n+    for (int r = a.size() - 1; r >= 0; --r)\n+    {\n+      DoubleVector row = a.getRow(r);\n+      for (Integer c : row.values.keySet())\n+      {\n+        if (c <= r)\n         {\n-            vector.set( index, vector.get( index ) / len );\n+          continue;\n         }\n-        return len;\n+        b.incrementValue(r, -row.get(c) * b.get(c));\n+      }\n+      b.set(r, b.get(r) / row.get(r));\n+    }\n+    return b;\n+  }\n+\n+  /**\n+   * Multiplies a matrix and a vector.\n+   *\n+   * @param matrix\n+   * @param vector\n+   * @return The result as a new vector.\n+   */\n+  public static DoubleVector multiply(DoubleMatrix matrix,\n+                                      DoubleVector vector)\n+  {\n+    DoubleVector result = new DoubleVector();\n+    for (int rowIndex = 0; rowIndex < matrix.size(); ++rowIndex)\n+    {\n+      DoubleVector row = matrix.getRow(rowIndex);\n+      for (Integer index : row.getIndices())\n+      {\n+        result.incrementValue(rowIndex, row.get(index)\n+            * vector.get(index));\n+      }\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * In-place normalization of a vector.\n+   *\n+   * @param vector\n+   * @return The initial euclidean length of the vector.\n+   */\n+  public static double normalize(DoubleVector vector)\n+  {\n+    double len = 0;\n+    for (Integer index : vector.getIndices())\n+    {\n+      Double d = vector.get(index);\n+      len += d * d;\n+    }\n+    len = Math.sqrt(len);\n+    for (Integer index : vector.getIndices())\n+    {\n+      vector.set(index, vector.get(index) / len);\n     }\n+    return len;\n+  }\n }\n",
            "diff_size": 382
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "column": "23",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "296",
                    "column": "66",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3977/MatrixUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3977/MatrixUtil.java\nindex faaa6c5b7c6..578bccd24dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3977/MatrixUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3977/MatrixUtil.java\n@@ -49,7 +49,8 @@ public class MatrixUtil\n             {\n                 currentValue = 0.0;\n             }\n-            currentValue += increment;\n+\n+currentValue += increment;\n             values.put( index, currentValue );\n         }\n \n@@ -89,7 +90,7 @@ public class MatrixUtil\n             int maxIndex = 0;\n             for ( Integer i : values.keySet() )\n             {\n-                if ( i > maxIndex )\n+                if ( i> maxIndex )\n                 {\n                     maxIndex = i;\n                 }\n@@ -101,12 +102,15 @@ public class MatrixUtil\n                 {\n                     value = 0.0;\n                 }\n-                res += \" \" + value;\n+\n+res += \" \" + value;\n             }\n-            return res + \"\\n\";\n+\n+return res + \"\\n\";\n         }\n     }\n-    /**\n+\n+/**\n      * 2-Dimensional matrix of doubles.\n      */\n     public static class DoubleMatrix\n@@ -119,9 +123,8 @@ public class MatrixUtil\n          * @param columnIndex\n          * @param increment\n          */\n-        public void incrementValue( Integer rowIndex, Integer columnIndex,\n-            double increment )\n-        {\n+        public void incrementValue( Integer rowIndex, Integer columnIndex, double increment )\n+{\n             DoubleVector row = rows.computeIfAbsent( rowIndex, k -> new DoubleVector() );\n             row.incrementValue( columnIndex, increment );\n         }\n@@ -151,7 +154,8 @@ public class MatrixUtil\n             {\n                 return null;\n             }\n-            return row.get( columnIndex );\n+\n+return row.get( columnIndex );\n         }\n \n         /**\n@@ -182,7 +186,8 @@ public class MatrixUtil\n             {\n                 res += rows.get( i ).toString();\n             }\n-            return res;\n+\n+return res;\n         }\n \n         /**\n@@ -270,7 +275,8 @@ public class MatrixUtil\n             }\n             b.set( r, b.get( r ) / row.get( r ) );\n         }\n-        return b;\n+\n+return b;\n     }\n \n     /**\n@@ -279,18 +285,16 @@ public class MatrixUtil\n      * @param vector\n      * @return The result as a new vector.\n      */\n-    public static DoubleVector multiply( DoubleMatrix matrix,\n-        DoubleVector vector )\n-    {\n+    public static DoubleVector multiply( DoubleMatrix matrix, DoubleVector vector )\n+{\n         DoubleVector result = new DoubleVector();\n         for ( int rowIndex = 0; rowIndex < matrix.size(); ++rowIndex )\n         {\n             DoubleVector row = matrix.getRow( rowIndex );\n             for ( Integer index : row.getIndices() )\n             {\n-                result.incrementValue( rowIndex, row.get( index )\n-                    * vector.get( index ) );\n-            }\n+                result.incrementValue( rowIndex, row.get( index )* vector.get( index ) );\n+    }\n         }\n         return result;\n     }\n@@ -308,11 +312,13 @@ public class MatrixUtil\n             Double d = vector.get( index );\n             len += d * d;\n         }\n-        len = Math.sqrt( len );\n+\n+len = Math.sqrt( len );\n         for ( Integer index : vector.getIndices() )\n         {\n             vector.set( index, vector.get( index ) / len );\n         }\n-        return len;\n+\n+return len;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}