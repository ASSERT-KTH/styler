{
    "project_name": "opencb-opencga",
    "error_id": "132",
    "information": {
        "errors": [
            {
                "line": "40",
                "column": "136",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n    public static final String ID = \"individual-qc\";\n    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n            \" and mendelian errors (UDP)\";\n\n    public  static final String INFERRED_SEX_STEP = \"inferred-sex\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "41",
                    "column": "14",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/132/IndividualQcAnalysis.java\nindex b3822d42561..82f067b399a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/132/IndividualQcAnalysis.java\n@@ -37,8 +37,8 @@ import java.util.stream.Collectors;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n-            \" and mendelian errors (UDP)\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \"\n+            +\" and mendelian errors (UDP)\";\n \n     public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String RELATEDNESS_STEP = \"relatedness\";\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "40",
                    "column": "134",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/132/IndividualQcAnalysis.java\nindex b3822d42561..d987e852de4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/132/IndividualQcAnalysis.java\n@@ -36,176 +36,177 @@ import java.util.stream.Collectors;\n @Tool(id = IndividualQcAnalysis.ID, resource = Enums.Resource.SAMPLE, description = IndividualQcAnalysis.DESCRIPTION)\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n-    public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n-            \" and mendelian errors (UDP)\";\n+  public static final String ID = \"individual-qc\";\n+  public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n+      \" and mendelian errors (UDP)\";\n \n-    public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n-    public  static final String RELATEDNESS_STEP = \"relatedness\";\n-    public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n+  public static final String INFERRED_SEX_STEP = \"inferred-sex\";\n+  public static final String RELATEDNESS_STEP = \"relatedness\";\n+  public static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n \n-    private String studyId;\n-    private String individualId;\n-    private String bamFilename;\n-    private String minorAlleleFreq;\n-    private String relatednessMethod;\n+  private String studyId;\n+  private String individualId;\n+  private String bamFilename;\n+  private String minorAlleleFreq;\n+  private String relatednessMethod;\n \n-    // Internal members\n-    private List<String> sampleIds;\n+  // Internal members\n+  private List<String> sampleIds;\n \n-    public IndividualQcAnalysis() {\n-    }\n+  public IndividualQcAnalysis() {\n+  }\n \n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        setUpStorageEngineExecutor(studyId);\n-\n-        if (StringUtils.isEmpty(studyId)) {\n-            throw new ToolException(\"Missing study ID.\");\n-        }\n-\n-        try {\n-            studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Sanity check\n-        if (StringUtils.isNotEmpty(individualId)) {\n-            throw new ToolException(\"Missing individual ID.\");\n-        }\n-\n-        // Get relatives, i.e., members of a family\n-        List<Sample> samples = IndividualQcUtils.getRelativeSamplesByIndividualId(studyId, individualId, catalogManager, token);\n-        if (CollectionUtils.isNotEmpty(samples)) {\n-            sampleIds = samples.stream().map(Sample::getId).collect(Collectors.toList());\n-        }\n-    }\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    setUpStorageEngineExecutor(studyId);\n \n-    @Override\n-    protected List<String> getSteps() {\n-        List<String> steps = new ArrayList<>();\n-        if (canRunInferredSex()) {\n-            steps.add(INFERRED_SEX_STEP);\n-        }\n-        if (canRunRelatedness()) {\n-            steps.add(RELATEDNESS_STEP);\n-        }\n-        if (canRunMendelianErrors()) {\n-            steps.add(MENDELIAN_ERRORS_STEP);\n-        }\n-        return steps;\n+    if (StringUtils.isEmpty(studyId)) {\n+      throw new ToolException(\"Missing study ID.\");\n     }\n \n-    @Override\n-    protected void run() throws ToolException {\n-\n-        IndividualQcAnalysisExecutor executor = getToolExecutor(IndividualQcAnalysisExecutor.class);\n-\n-        executor.setStudyId(studyId)\n-                .setIndividualId(individualId)\n-                .setSampleIds(sampleIds)\n-                .setMinorAlleleFreq(minorAlleleFreq)\n-                .setRelatednessMethod(relatednessMethod);\n-\n-        if (canRunInferredSex()) {\n-            step(INFERRED_SEX_STEP, () -> {\n-                executor.setQc(IndividualQcAnalysisExecutor.Qc.INFERRED_SEX).execute();\n-            });\n-        } else {\n-            getErm().addWarning(\"Skipping step \" + INFERRED_SEX_STEP + \": you need to provide a BAM file\");\n-        }\n-\n-        if (canRunRelatedness()) {\n-            step(RELATEDNESS_STEP, () -> {\n-                executor.setQc(IndividualQcAnalysisExecutor.Qc.RELATEDNESS).execute();\n-            });\n-        } else {\n-            getErm().addWarning(\"Skipping step \" + RELATEDNESS_STEP + \": no members found for the sample family\");\n-        }\n-\n-        if (canRunMendelianErrors()) {\n-            step(MENDELIAN_ERRORS_STEP, () -> {\n-                executor.setQc(IndividualQcAnalysisExecutor.Qc.MENDELIAN_ERRORS).execute();\n-            });\n-        } else {\n-            getErm().addWarning(\"Skipping step \" + MENDELIAN_ERRORS_STEP + \": father and mother must exist for individual \" + individualId);\n-        }\n-\n-        // Save results\n-        try {\n-            JacksonUtils.getDefaultObjectMapper().writer().writeValue(getOutDir().resolve(ID + \".report.json\").toFile(),\n-                    executor.getReport());\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n-        }\n+    try {\n+      studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n     }\n \n-    private boolean canRunMendelianErrors() {\n-        Individual individual;\n-        try {\n-            individual = IndividualQcUtils.getIndividualById(studyId, individualId, catalogManager, token);\n-        } catch (ToolException e) {\n-            return false;\n-        }\n-        if (individual.getMother() == null || individual.getFather() == null) {\n-            return false;\n-        }\n-        return true;\n+    // Sanity check\n+    if (StringUtils.isNotEmpty(individualId)) {\n+      throw new ToolException(\"Missing individual ID.\");\n     }\n \n-    private boolean canRunRelatedness() {\n-        return CollectionUtils.isEmpty(sampleIds) ? false : true;\n+    // Get relatives, i.e., members of a family\n+    List<Sample> samples = IndividualQcUtils.getRelativeSamplesByIndividualId(studyId, individualId, catalogManager, token);\n+    if (CollectionUtils.isNotEmpty(samples)) {\n+      sampleIds = samples.stream().map(Sample::getId).collect(Collectors.toList());\n     }\n+  }\n \n-    private boolean canRunInferredSex() {\n-        return StringUtils.isEmpty(bamFilename) ? false : true;\n+  @Override\n+  protected List<String> getSteps() {\n+    List<String> steps = new ArrayList<>();\n+    if (canRunInferredSex()) {\n+      steps.add(INFERRED_SEX_STEP);\n     }\n-\n-    /**\n-     * Study of the samples.\n-     * @param studyId Study id\n-     * @return this\n-     */\n-    public IndividualQcAnalysis setStudy(String studyId) {\n-        this.studyId = studyId;\n-        return this;\n+    if (canRunRelatedness()) {\n+      steps.add(RELATEDNESS_STEP);\n     }\n-\n-    public String getIndividualId() {\n-        return individualId;\n+    if (canRunMendelianErrors()) {\n+      steps.add(MENDELIAN_ERRORS_STEP);\n     }\n+    return steps;\n+  }\n \n-    public IndividualQcAnalysis setIndividualId(String individualId) {\n-        this.individualId = individualId;\n-        return this;\n-    }\n+  @Override\n+  protected void run() throws ToolException {\n \n-    public String getBamFilename() {\n-        return bamFilename;\n-    }\n+    IndividualQcAnalysisExecutor executor = getToolExecutor(IndividualQcAnalysisExecutor.class);\n \n-    public IndividualQcAnalysis setBamFilename(String bamFilename) {\n-        this.bamFilename = bamFilename;\n-        return this;\n+    executor.setStudyId(studyId)\n+        .setIndividualId(individualId)\n+        .setSampleIds(sampleIds)\n+        .setMinorAlleleFreq(minorAlleleFreq)\n+        .setRelatednessMethod(relatednessMethod);\n+\n+    if (canRunInferredSex()) {\n+      step(INFERRED_SEX_STEP, () -> {\n+        executor.setQc(IndividualQcAnalysisExecutor.Qc.INFERRED_SEX).execute();\n+      });\n+    } else {\n+      getErm().addWarning(\"Skipping step \" + INFERRED_SEX_STEP + \": you need to provide a BAM file\");\n+    }\n+\n+    if (canRunRelatedness()) {\n+      step(RELATEDNESS_STEP, () -> {\n+        executor.setQc(IndividualQcAnalysisExecutor.Qc.RELATEDNESS).execute();\n+      });\n+    } else {\n+      getErm().addWarning(\"Skipping step \" + RELATEDNESS_STEP + \": no members found for the sample family\");\n+    }\n+\n+    if (canRunMendelianErrors()) {\n+      step(MENDELIAN_ERRORS_STEP, () -> {\n+        executor.setQc(IndividualQcAnalysisExecutor.Qc.MENDELIAN_ERRORS).execute();\n+      });\n+    } else {\n+      getErm().addWarning(\"Skipping step \" + MENDELIAN_ERRORS_STEP + \": father and mother must exist for individual \" + individualId);\n+    }\n+\n+    // Save results\n+    try {\n+      JacksonUtils.getDefaultObjectMapper().writer().writeValue(getOutDir().resolve(ID + \".report.json\").toFile(),\n+          executor.getReport());\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n     }\n-\n-    public String getMinorAlleleFreq() {\n-        return minorAlleleFreq;\n+  }\n+\n+  private boolean canRunMendelianErrors() {\n+    Individual individual;\n+    try {\n+      individual = IndividualQcUtils.getIndividualById(studyId, individualId, catalogManager, token);\n+    } catch (ToolException e) {\n+      return false;\n     }\n-\n-    public IndividualQcAnalysis setMinorAlleleFreq(String minorAlleleFreq) {\n-        this.minorAlleleFreq = minorAlleleFreq;\n-        return this;\n+    if (individual.getMother() == null || individual.getFather() == null) {\n+      return false;\n     }\n+    return true;\n+  }\n \n-    public String getRelatednessMethod() {\n-        return relatednessMethod;\n-    }\n+  private boolean canRunRelatedness() {\n+    return CollectionUtils.isEmpty(sampleIds) ? false : true;\n+  }\n \n-    public IndividualQcAnalysis setRelatednessMethod(String relatednessMethod) {\n-        this.relatednessMethod = relatednessMethod;\n-        return this;\n-    }\n+  private boolean canRunInferredSex() {\n+    return StringUtils.isEmpty(bamFilename) ? false : true;\n+  }\n+\n+  /**\n+   * Study of the samples.\n+   *\n+   * @param studyId Study id\n+   * @return this\n+   */\n+  public IndividualQcAnalysis setStudy(String studyId) {\n+    this.studyId = studyId;\n+    return this;\n+  }\n+\n+  public String getIndividualId() {\n+    return individualId;\n+  }\n+\n+  public IndividualQcAnalysis setIndividualId(String individualId) {\n+    this.individualId = individualId;\n+    return this;\n+  }\n+\n+  public String getBamFilename() {\n+    return bamFilename;\n+  }\n+\n+  public IndividualQcAnalysis setBamFilename(String bamFilename) {\n+    this.bamFilename = bamFilename;\n+    return this;\n+  }\n+\n+  public String getMinorAlleleFreq() {\n+    return minorAlleleFreq;\n+  }\n+\n+  public IndividualQcAnalysis setMinorAlleleFreq(String minorAlleleFreq) {\n+    this.minorAlleleFreq = minorAlleleFreq;\n+    return this;\n+  }\n+\n+  public String getRelatednessMethod() {\n+    return relatednessMethod;\n+  }\n+\n+  public IndividualQcAnalysis setRelatednessMethod(String relatednessMethod) {\n+    this.relatednessMethod = relatednessMethod;\n+    return this;\n+  }\n }\n",
            "diff_size": 241
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/132/IndividualQcAnalysis.java\nindex b3822d42561..c0f3eb20a94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/132/IndividualQcAnalysis.java\n@@ -37,10 +37,8 @@ import java.util.stream.Collectors;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n-            \" and mendelian errors (UDP)\";\n-\n-    public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" + \" and mendelian errors (UDP)\";\n+public static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String RELATEDNESS_STEP = \"relatedness\";\n     public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n \n@@ -208,4 +206,4 @@ public class IndividualQcAnalysis extends OpenCgaTool {\n         this.relatednessMethod = relatednessMethod;\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "41",
                    "column": "14",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/132/IndividualQcAnalysis.java\nindex b3822d42561..82f067b399a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/132/IndividualQcAnalysis.java\n@@ -37,8 +37,8 @@ import java.util.stream.Collectors;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n-            \" and mendelian errors (UDP)\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \"\n+            +\" and mendelian errors (UDP)\";\n \n     public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String RELATEDNESS_STEP = \"relatedness\";\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/132/IndividualQcAnalysis.java\nindex b3822d42561..49dd206073a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/132/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/132/IndividualQcAnalysis.java\n@@ -37,8 +37,7 @@ import java.util.stream.Collectors;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" +\n-            \" and mendelian errors (UDP)\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex, relatedness \" + \" and mendelian errors (UDP)\";\n \n     public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String RELATEDNESS_STEP = \"relatedness\";\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}