{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2697",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "113",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "186",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "274",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "282",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "286",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "290",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "304",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "324",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "328",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "337",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "353",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2697/DynamicArrayStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2697/DynamicArrayStore.java\nindex e67bb9b0121..b66baaba519 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2697/DynamicArrayStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2697/DynamicArrayStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -52,7 +53,7 @@ import static java.lang.System.arraycopy;\n \n /**\n  * Dynamic store that stores arrays.\n- *\n+ * <p>\n  * Arrays are uniform collections of the same type. They can contain primitives, strings or Geometries.\n  * <ul>\n  *     <li>\n@@ -91,282 +92,266 @@ import static java.lang.System.arraycopy;\n  */\n public class DynamicArrayStore extends AbstractDynamicStore\n {\n-    public static final int NUMBER_HEADER_SIZE = 3;\n-    public static final int STRING_HEADER_SIZE = 5;\n-    public static final int GEOMETRY_HEADER_SIZE = 6;   // This should match contents of GeometryType.GeometryHeader\n-    public static final int TEMPORAL_HEADER_SIZE = 2;\n+  public static final int NUMBER_HEADER_SIZE = 3;\n+  public static final int STRING_HEADER_SIZE = 5;\n+  public static final int GEOMETRY_HEADER_SIZE = 6;   // This should match contents of GeometryType.GeometryHeader\n+  public static final int TEMPORAL_HEADER_SIZE = 2;\n \n-    // store version, each store ends with this string (byte encoded)\n-    public static final String TYPE_DESCRIPTOR = \"ArrayPropertyStore\";\n-    private final boolean allowStorePointsAndTemporal;\n+  // store version, each store ends with this string (byte encoded)\n+  public static final String TYPE_DESCRIPTOR = \"ArrayPropertyStore\";\n+  private final boolean allowStorePointsAndTemporal;\n \n-    public DynamicArrayStore(\n-            File fileName,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            int dataSizeFromConfiguration,\n-            RecordFormats recordFormats,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, configuration, idType, idGeneratorFactory, pageCache,\n-                logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormats.dynamic(), recordFormats.storeVersion(), openOptions );\n-        allowStorePointsAndTemporal = recordFormats.hasCapability( Capability.POINT_PROPERTIES )\n-                && recordFormats.hasCapability( Capability.TEMPORAL_PROPERTIES );\n-    }\n+  public DynamicArrayStore(\n+      File fileName,\n+      Config configuration,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      int dataSizeFromConfiguration,\n+      RecordFormats recordFormats,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, configuration, idType, idGeneratorFactory, pageCache,\n+        logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormats.dynamic(), recordFormats.storeVersion(), openOptions);\n+    allowStorePointsAndTemporal = recordFormats.hasCapability(Capability.POINT_PROPERTIES)\n+        && recordFormats.hasCapability(Capability.TEMPORAL_PROPERTIES);\n+  }\n \n-    @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, DynamicRecord record )\n-            throws FAILURE\n-    {\n-        processor.processArray( this, record );\n-    }\n+  @Override\n+  public <FAILURE extends Exception> void accept(RecordStore.Processor<FAILURE> processor, DynamicRecord record)\n+      throws FAILURE\n+  {\n+    processor.processArray(this, record);\n+  }\n \n-    public static byte[] encodeFromNumbers( Object array, int offsetBytes )\n+  public static byte[] encodeFromNumbers(Object array, int offsetBytes)\n+  {\n+    ShortArray type = ShortArray.typeOf(array);\n+    if (type == null)\n     {\n-        ShortArray type = ShortArray.typeOf( array );\n-        if ( type == null )\n-        {\n-            throw new IllegalArgumentException( array + \" not a valid array type.\" );\n-        }\n-\n-        if ( type == ShortArray.DOUBLE || type == ShortArray.FLOAT )\n-        {\n-            // Skip array compaction for floating point numbers where compaction makes very little difference\n-            return createUncompactedArray( type, array, offsetBytes );\n-        }\n-        else\n-        {\n-            return createBitCompactedArray( type, array, offsetBytes );\n-        }\n+      throw new IllegalArgumentException(array + \" not a valid array type.\");\n     }\n \n-    private static byte[] createBitCompactedArray( ShortArray type, Object array, int offsetBytes )\n+    if (type == ShortArray.DOUBLE || type == ShortArray.FLOAT)\n+    {\n+      // Skip array compaction for floating point numbers where compaction makes very little difference\n+      return createUncompactedArray(type, array, offsetBytes);\n+    } else\n     {\n-        Class<?> componentType = array.getClass().getComponentType();\n-        boolean isPrimitiveByteArray = componentType.equals( Byte.TYPE );\n-        boolean isByteArray = componentType.equals( Byte.class ) || isPrimitiveByteArray;\n-        int arrayLength = Array.getLength( array );\n-        int requiredBits = isByteArray ? Byte.SIZE : type.calculateRequiredBitsForArray( array, arrayLength );\n-        int totalBits = requiredBits * arrayLength;\n-        int bitsUsedInLastByte = totalBits % 8;\n-        bitsUsedInLastByte = bitsUsedInLastByte == 0 ? 8 : bitsUsedInLastByte;\n-        if ( isByteArray )\n-        {\n-            return createBitCompactedByteArray( type, isPrimitiveByteArray, array, bitsUsedInLastByte, requiredBits, offsetBytes );\n-        }\n-        else\n-        {\n-            int numberOfBytes = (totalBits - 1) / 8 + 1;\n-            numberOfBytes += NUMBER_HEADER_SIZE; // type + rest + requiredBits header. TODO no need to use full bytes\n-            Bits bits = Bits.bits( numberOfBytes );\n-            bits.put( (byte) type.intValue() );\n-            bits.put( (byte) bitsUsedInLastByte );\n-            bits.put( (byte) requiredBits );\n-            type.writeAll( array, arrayLength, requiredBits, bits );\n-            return bits.asBytes( offsetBytes );\n-        }\n+      return createBitCompactedArray(type, array, offsetBytes);\n     }\n+  }\n \n-    private static byte[] createBitCompactedByteArray( ShortArray type, boolean isPrimitiveByteArray, Object array,\n-            int bitsUsedInLastByte, int requiredBits, int offsetBytes )\n+  private static byte[] createBitCompactedArray(ShortArray type, Object array, int offsetBytes)\n+  {\n+    Class<?> componentType = array.getClass().getComponentType();\n+    boolean isPrimitiveByteArray = componentType.equals(Byte.TYPE);\n+    boolean isByteArray = componentType.equals(Byte.class) || isPrimitiveByteArray;\n+    int arrayLength = Array.getLength(array);\n+    int requiredBits = isByteArray ? Byte.SIZE : type.calculateRequiredBitsForArray(array, arrayLength);\n+    int totalBits = requiredBits * arrayLength;\n+    int bitsUsedInLastByte = totalBits % 8;\n+    bitsUsedInLastByte = bitsUsedInLastByte == 0 ? 8 : bitsUsedInLastByte;\n+    if (isByteArray)\n     {\n-        int arrayLength = Array.getLength( array );\n-        byte[] bytes = new byte[NUMBER_HEADER_SIZE + arrayLength + offsetBytes];\n-        bytes[offsetBytes + 0] = (byte) type.intValue();\n-        bytes[offsetBytes + 1] = (byte) bitsUsedInLastByte;\n-        bytes[offsetBytes + 2] = (byte) requiredBits;\n-        if ( isPrimitiveByteArray )\n-        {\n-            arraycopy( array, 0, bytes, NUMBER_HEADER_SIZE + offsetBytes, arrayLength );\n-        }\n-        else\n-        {\n-            Byte[] source = (Byte[]) array;\n-            for ( int i = 0; i < source.length; i++ )\n-            {\n-                bytes[NUMBER_HEADER_SIZE + offsetBytes + i] = source[i];\n-            }\n-        }\n-        return bytes;\n+      return createBitCompactedByteArray(type, isPrimitiveByteArray, array, bitsUsedInLastByte, requiredBits, offsetBytes);\n+    } else\n+    {\n+      int numberOfBytes = (totalBits - 1) / 8 + 1;\n+      numberOfBytes += NUMBER_HEADER_SIZE; // type + rest + requiredBits header. TODO no need to use full bytes\n+      Bits bits = Bits.bits(numberOfBytes);\n+      bits.put((byte) type.intValue());\n+      bits.put((byte) bitsUsedInLastByte);\n+      bits.put((byte) requiredBits);\n+      type.writeAll(array, arrayLength, requiredBits, bits);\n+      return bits.asBytes(offsetBytes);\n     }\n+  }\n \n-    private static byte[] createUncompactedArray( ShortArray type, Object array, int offsetBytes )\n+  private static byte[] createBitCompactedByteArray(ShortArray type, boolean isPrimitiveByteArray, Object array,\n+                                                    int bitsUsedInLastByte, int requiredBits, int offsetBytes)\n+  {\n+    int arrayLength = Array.getLength(array);\n+    byte[] bytes = new byte[NUMBER_HEADER_SIZE + arrayLength + offsetBytes];\n+    bytes[offsetBytes + 0] = (byte) type.intValue();\n+    bytes[offsetBytes + 1] = (byte) bitsUsedInLastByte;\n+    bytes[offsetBytes + 2] = (byte) requiredBits;\n+    if (isPrimitiveByteArray)\n+    {\n+      arraycopy(array, 0, bytes, NUMBER_HEADER_SIZE + offsetBytes, arrayLength);\n+    } else\n     {\n-        int arrayLength = Array.getLength( array );\n-        int bytesPerElement = type.maxBits / 8;\n-        byte[] bytes = new byte[NUMBER_HEADER_SIZE + bytesPerElement * arrayLength + offsetBytes];\n-        bytes[offsetBytes + 0] = (byte) type.intValue();\n-        bytes[offsetBytes + 1] = (byte) 8;\n-        bytes[offsetBytes + 2] = (byte) type.maxBits;\n-        type.writeAll( array, bytes, NUMBER_HEADER_SIZE + offsetBytes );\n-        return bytes;\n+      Byte[] source = (Byte[]) array;\n+      for (int i = 0; i < source.length; i++)\n+      {\n+        bytes[NUMBER_HEADER_SIZE + offsetBytes + i] = source[i];\n+      }\n     }\n+    return bytes;\n+  }\n+\n+  private static byte[] createUncompactedArray(ShortArray type, Object array, int offsetBytes)\n+  {\n+    int arrayLength = Array.getLength(array);\n+    int bytesPerElement = type.maxBits / 8;\n+    byte[] bytes = new byte[NUMBER_HEADER_SIZE + bytesPerElement * arrayLength + offsetBytes];\n+    bytes[offsetBytes + 0] = (byte) type.intValue();\n+    bytes[offsetBytes + 1] = (byte) 8;\n+    bytes[offsetBytes + 2] = (byte) type.maxBits;\n+    type.writeAll(array, bytes, NUMBER_HEADER_SIZE + offsetBytes);\n+    return bytes;\n+  }\n+\n+  public static void allocateFromNumbers(Collection<DynamicRecord> target, Object array,\n+                                         DynamicRecordAllocator recordAllocator)\n+  {\n+    byte[] bytes = encodeFromNumbers(array, 0);\n+    allocateRecordsFromBytes(target, bytes, recordAllocator);\n+  }\n \n-    public static void allocateFromNumbers( Collection<DynamicRecord> target, Object array,\n-            DynamicRecordAllocator recordAllocator )\n+  private static void allocateFromCompositeType(\n+      Collection<DynamicRecord> target,\n+      byte[] bytes,\n+      DynamicRecordAllocator recordAllocator,\n+      boolean allowsStorage,\n+      Capability storageCapability)\n+  {\n+    if (allowsStorage)\n     {\n-        byte[] bytes = encodeFromNumbers( array, 0 );\n-        allocateRecordsFromBytes( target, bytes, recordAllocator );\n+      allocateRecordsFromBytes(target, bytes, recordAllocator);\n+    } else\n+    {\n+      throw new UnsupportedFormatCapabilityException(storageCapability);\n     }\n+  }\n \n-    private static void allocateFromCompositeType(\n-            Collection<DynamicRecord> target,\n-            byte[] bytes,\n-            DynamicRecordAllocator recordAllocator,\n-            boolean allowsStorage,\n-            Capability storageCapability )\n+  private static void allocateFromString(Collection<DynamicRecord> target, String[] array,\n+                                         DynamicRecordAllocator recordAllocator)\n+  {\n+    byte[][] stringsAsBytes = new byte[array.length][];\n+    int totalBytesRequired = STRING_HEADER_SIZE; // 1b type + 4b array length\n+    for (int i = 0; i < array.length; i++)\n     {\n-        if ( allowsStorage )\n-        {\n-            allocateRecordsFromBytes( target, bytes, recordAllocator );\n-        }\n-        else\n-        {\n-            throw new UnsupportedFormatCapabilityException( storageCapability );\n-        }\n+      String string = array[i];\n+      byte[] bytes = PropertyStore.encodeString(string);\n+      stringsAsBytes[i] = bytes;\n+      totalBytesRequired += 4/*byte[].length*/ + bytes.length;\n     }\n \n-    private static void allocateFromString( Collection<DynamicRecord> target, String[] array,\n-            DynamicRecordAllocator recordAllocator )\n+    ByteBuffer buf = ByteBuffer.allocate(totalBytesRequired);\n+    buf.put(PropertyType.STRING.byteValue());\n+    buf.putInt(array.length);\n+    for (byte[] stringAsBytes : stringsAsBytes)\n     {\n-        byte[][] stringsAsBytes = new byte[array.length][];\n-        int totalBytesRequired = STRING_HEADER_SIZE; // 1b type + 4b array length\n-        for ( int i = 0; i < array.length; i++ )\n-        {\n-            String string = array[i];\n-            byte[] bytes = PropertyStore.encodeString( string );\n-            stringsAsBytes[i] = bytes;\n-            totalBytesRequired += 4/*byte[].length*/ + bytes.length;\n-        }\n-\n-        ByteBuffer buf = ByteBuffer.allocate( totalBytesRequired );\n-        buf.put( PropertyType.STRING.byteValue() );\n-        buf.putInt( array.length );\n-        for ( byte[] stringAsBytes : stringsAsBytes )\n-        {\n-            buf.putInt( stringAsBytes.length );\n-            buf.put( stringAsBytes );\n-        }\n-        allocateRecordsFromBytes( target, buf.array(), recordAllocator );\n+      buf.putInt(stringAsBytes.length);\n+      buf.put(stringAsBytes);\n     }\n+    allocateRecordsFromBytes(target, buf.array(), recordAllocator);\n+  }\n+\n+  public void allocateRecords(Collection<DynamicRecord> target, Object array)\n+  {\n+    allocateRecords(target, array, this, allowStorePointsAndTemporal);\n+  }\n \n-    public void allocateRecords( Collection<DynamicRecord> target, Object array )\n+  public static void allocateRecords(Collection<DynamicRecord> target, Object array,\n+                                     DynamicRecordAllocator recordAllocator, boolean allowStorePointsAndTemporal)\n+  {\n+    if (!array.getClass().isArray())\n     {\n-        allocateRecords( target, array, this, allowStorePointsAndTemporal );\n+      throw new IllegalArgumentException(array + \" not an array\");\n     }\n \n-    public static void allocateRecords( Collection<DynamicRecord> target, Object array,\n-            DynamicRecordAllocator recordAllocator, boolean allowStorePointsAndTemporal )\n+    Class<?> type = array.getClass().getComponentType();\n+    if (type.equals(String.class))\n     {\n-        if ( !array.getClass().isArray() )\n-        {\n-            throw new IllegalArgumentException( array + \" not an array\" );\n-        }\n-\n-        Class<?> type = array.getClass().getComponentType();\n-        if ( type.equals( String.class ) )\n-        {\n-            allocateFromString( target, (String[]) array, recordAllocator );\n-        }\n-        else if ( type.equals( PointValue.class ) )\n-        {\n-            allocateFromCompositeType( target,GeometryType.encodePointArray( (PointValue[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.POINT_PROPERTIES );\n-        }\n-        else if ( type.equals( LocalDate.class ) )\n-        {\n-            allocateFromCompositeType( target, TemporalType.encodeDateArray( (LocalDate[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES );\n-        }\n-        else if ( type.equals( LocalTime.class ) )\n-        {\n-            allocateFromCompositeType( target, TemporalType.encodeLocalTimeArray( (LocalTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES );\n-        }\n-        else if ( type.equals( LocalDateTime.class ) )\n-        {\n-            allocateFromCompositeType( target, TemporalType.encodeLocalDateTimeArray( (LocalDateTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES );\n-        }\n-        else if ( type.equals( OffsetTime.class ) )\n-        {\n-            allocateFromCompositeType( target, TemporalType.encodeTimeArray( (OffsetTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES );\n-        }\n-        else if ( type.equals( ZonedDateTime.class ) )\n-        {\n-            allocateFromCompositeType( target, TemporalType.encodeDateTimeArray( (ZonedDateTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES );\n-        }\n-        else if ( type.equals( DurationValue.class ) )\n-        {\n-            allocateFromCompositeType( target, TemporalType.encodeDurationArray( (DurationValue[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES );\n-        }\n-        else\n-        {\n-            allocateFromNumbers( target, array, recordAllocator );\n-        }\n+      allocateFromString(target, (String[]) array, recordAllocator);\n+    } else if (type.equals(PointValue.class))\n+    {\n+      allocateFromCompositeType(target, GeometryType.encodePointArray((PointValue[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.POINT_PROPERTIES);\n+    } else if (type.equals(LocalDate.class))\n+    {\n+      allocateFromCompositeType(target, TemporalType.encodeDateArray((LocalDate[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES);\n+    } else if (type.equals(LocalTime.class))\n+    {\n+      allocateFromCompositeType(target, TemporalType.encodeLocalTimeArray((LocalTime[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES);\n+    } else if (type.equals(LocalDateTime.class))\n+    {\n+      allocateFromCompositeType(target, TemporalType.encodeLocalDateTimeArray((LocalDateTime[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES);\n+    } else if (type.equals(OffsetTime.class))\n+    {\n+      allocateFromCompositeType(target, TemporalType.encodeTimeArray((OffsetTime[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES);\n+    } else if (type.equals(ZonedDateTime.class))\n+    {\n+      allocateFromCompositeType(target, TemporalType.encodeDateTimeArray((ZonedDateTime[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES);\n+    } else if (type.equals(DurationValue.class))\n+    {\n+      allocateFromCompositeType(target, TemporalType.encodeDurationArray((DurationValue[]) array),\n+          recordAllocator, allowStorePointsAndTemporal, Capability.TEMPORAL_PROPERTIES);\n+    } else\n+    {\n+      allocateFromNumbers(target, array, recordAllocator);\n     }\n+  }\n \n-    public static Value getRightArray( Pair<byte[],byte[]> data )\n+  public static Value getRightArray(Pair<byte[], byte[]> data)\n+  {\n+    byte[] header = data.first();\n+    byte[] bArray = data.other();\n+    byte typeId = header[0];\n+    if (typeId == PropertyType.STRING.intValue())\n     {\n-        byte[] header = data.first();\n-        byte[] bArray = data.other();\n-        byte typeId = header[0];\n-        if ( typeId == PropertyType.STRING.intValue() )\n-        {\n-            ByteBuffer headerBuffer = ByteBuffer.wrap( header, 1/*skip the type*/, header.length - 1 );\n-            int arrayLength = headerBuffer.getInt();\n-            String[] result = new String[arrayLength];\n-\n-            ByteBuffer dataBuffer = ByteBuffer.wrap( bArray );\n-            for ( int i = 0; i < arrayLength; i++ )\n-            {\n-                int byteLength = dataBuffer.getInt();\n-                byte[] stringByteArray = new byte[byteLength];\n-                dataBuffer.get( stringByteArray );\n-                result[i] = PropertyStore.decodeString( stringByteArray );\n-            }\n-            return Values.stringArray( result );\n-        }\n-        else if ( typeId == PropertyType.GEOMETRY.intValue() )\n-        {\n-            GeometryType.GeometryHeader geometryHeader = GeometryType.GeometryHeader.fromArrayHeaderBytes(header);\n-            return GeometryType.decodeGeometryArray( geometryHeader, bArray );\n-        }\n-        else if ( typeId == PropertyType.TEMPORAL.intValue() )\n-        {\n-            TemporalType.TemporalHeader temporalHeader = TemporalType.TemporalHeader.fromArrayHeaderBytes(header);\n-            return TemporalType.decodeTemporalArray( temporalHeader, bArray );\n-        }\n-        else\n-        {\n-            ShortArray type = ShortArray.typeOf( typeId );\n-            int bitsUsedInLastByte = header[1];\n-            int requiredBits = header[2];\n-            if ( requiredBits == 0 )\n-            {\n-                return type.createEmptyArray();\n-            }\n-            if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n-            {   // Optimization for byte arrays (probably large ones)\n-                return Values.byteArray( bArray );\n-            }\n-            else\n-            {   // Fallback to the generic approach, which is a slower\n-                Bits bits = Bits.bitsFromBytes( bArray );\n-                int length = (bArray.length * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n-                return type.createArray( length, bits, requiredBits );\n-            }\n-        }\n-    }\n+      ByteBuffer headerBuffer = ByteBuffer.wrap(header, 1/*skip the type*/, header.length - 1);\n+      int arrayLength = headerBuffer.getInt();\n+      String[] result = new String[arrayLength];\n \n-    public Object getArrayFor( Iterable<DynamicRecord> records )\n+      ByteBuffer dataBuffer = ByteBuffer.wrap(bArray);\n+      for (int i = 0; i < arrayLength; i++)\n+      {\n+        int byteLength = dataBuffer.getInt();\n+        byte[] stringByteArray = new byte[byteLength];\n+        dataBuffer.get(stringByteArray);\n+        result[i] = PropertyStore.decodeString(stringByteArray);\n+      }\n+      return Values.stringArray(result);\n+    } else if (typeId == PropertyType.GEOMETRY.intValue())\n     {\n-        return getRightArray( readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n+      GeometryType.GeometryHeader geometryHeader = GeometryType.GeometryHeader.fromArrayHeaderBytes(header);\n+      return GeometryType.decodeGeometryArray(geometryHeader, bArray);\n+    } else if (typeId == PropertyType.TEMPORAL.intValue())\n+    {\n+      TemporalType.TemporalHeader temporalHeader = TemporalType.TemporalHeader.fromArrayHeaderBytes(header);\n+      return TemporalType.decodeTemporalArray(temporalHeader, bArray);\n+    } else\n+    {\n+      ShortArray type = ShortArray.typeOf(typeId);\n+      int bitsUsedInLastByte = header[1];\n+      int requiredBits = header[2];\n+      if (requiredBits == 0)\n+      {\n+        return type.createEmptyArray();\n+      }\n+      if (type == ShortArray.BYTE && requiredBits == Byte.SIZE)\n+      {   // Optimization for byte arrays (probably large ones)\n+        return Values.byteArray(bArray);\n+      } else\n+      {   // Fallback to the generic approach, which is a slower\n+        Bits bits = Bits.bitsFromBytes(bArray);\n+        int length = (bArray.length * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n+        return type.createArray(length, bits, requiredBits);\n+      }\n     }\n+  }\n+\n+  public Object getArrayFor(Iterable<DynamicRecord> records)\n+  {\n+    return getRightArray(readFullByteArray(records, PropertyType.ARRAY)).asObject();\n+  }\n }\n",
            "diff_size": 360
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "117",
                    "column": "89",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2697/DynamicArrayStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2697/DynamicArrayStore.java\nindex e67bb9b0121..0a75d5fb2df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2697/DynamicArrayStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2697/DynamicArrayStore.java\n@@ -92,35 +92,34 @@ import static java.lang.System.arraycopy;\n public class DynamicArrayStore extends AbstractDynamicStore\n {\n     public static final int NUMBER_HEADER_SIZE = 3;\n-    public static final int STRING_HEADER_SIZE = 5;\n-    public static final int GEOMETRY_HEADER_SIZE = 6;   // This should match contents of GeometryType.GeometryHeader\n+\n+public static final int STRING_HEADER_SIZE = 5;\n+\n+public static final int GEOMETRY_HEADER_SIZE = 6;\n+    // This should match contents of GeometryType.GeometryHeader\n     public static final int TEMPORAL_HEADER_SIZE = 2;\n \n     // store version, each store ends with this string (byte encoded)\n     public static final String TYPE_DESCRIPTOR = \"ArrayPropertyStore\";\n     private final boolean allowStorePointsAndTemporal;\n \n-    public DynamicArrayStore(\n-            File fileName,\n+    public DynamicArrayStore( File fileName,\n             Config configuration,\n             IdType idType,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n-            LogProvider logProvider,\n-            int dataSizeFromConfiguration,\n+            LogProvider logProvider, int dataSizeFromConfiguration,\n             RecordFormats recordFormats,\n             OpenOption... openOptions )\n     {\n         super( fileName, configuration, idType, idGeneratorFactory, pageCache,\n                 logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormats.dynamic(), recordFormats.storeVersion(), openOptions );\n-        allowStorePointsAndTemporal = recordFormats.hasCapability( Capability.POINT_PROPERTIES )\n-                && recordFormats.hasCapability( Capability.TEMPORAL_PROPERTIES );\n+allowStorePointsAndTemporal = recordFormats.hasCapability( Capability.POINT_PROPERTIES )&& recordFormats.hasCapability( Capability.TEMPORAL_PROPERTIES );\n     }\n \n     @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, DynamicRecord record )\n-            throws FAILURE\n-    {\n+    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, DynamicRecord record ) throws FAILURE\n+{\n         processor.processArray( this, record );\n     }\n \n@@ -170,8 +169,7 @@ public class DynamicArrayStore extends AbstractDynamicStore\n         }\n     }\n \n-    private static byte[] createBitCompactedByteArray( ShortArray type, boolean isPrimitiveByteArray, Object array,\n-            int bitsUsedInLastByte, int requiredBits, int offsetBytes )\n+    private static byte[] createBitCompactedByteArray( ShortArray type, boolean isPrimitiveByteArray, Object array, int bitsUsedInLastByte, int requiredBits, int offsetBytes )\n     {\n         int arrayLength = Array.getLength( array );\n         byte[] bytes = new byte[NUMBER_HEADER_SIZE + arrayLength + offsetBytes];\n@@ -212,8 +210,7 @@ public class DynamicArrayStore extends AbstractDynamicStore\n         allocateRecordsFromBytes( target, bytes, recordAllocator );\n     }\n \n-    private static void allocateFromCompositeType(\n-            Collection<DynamicRecord> target,\n+    private static void allocateFromCompositeType( Collection<DynamicRecord> target,\n             byte[] bytes,\n             DynamicRecordAllocator recordAllocator,\n             boolean allowsStorage,\n@@ -250,7 +247,8 @@ public class DynamicArrayStore extends AbstractDynamicStore\n             buf.putInt( stringAsBytes.length );\n             buf.put( stringAsBytes );\n         }\n-        allocateRecordsFromBytes( target, buf.array(), recordAllocator );\n+\n+allocateRecordsFromBytes( target, buf.array(), recordAllocator );\n     }\n \n     public void allocateRecords( Collection<DynamicRecord> target, Object array )\n@@ -331,7 +329,8 @@ public class DynamicArrayStore extends AbstractDynamicStore\n                 dataBuffer.get( stringByteArray );\n                 result[i] = PropertyStore.decodeString( stringByteArray );\n             }\n-            return Values.stringArray( result );\n+\n+return Values.stringArray( result );\n         }\n         else if ( typeId == PropertyType.GEOMETRY.intValue() )\n         {\n@@ -352,14 +351,17 @@ public class DynamicArrayStore extends AbstractDynamicStore\n             {\n                 return type.createEmptyArray();\n             }\n-            if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n-            {   // Optimization for byte arrays (probably large ones)\n+\n+if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n+            {\n+    // Optimization for byte arrays (probably large ones)\n                 return Values.byteArray( bArray );\n             }\n             else\n-            {   // Fallback to the generic approach, which is a slower\n+            {\n+    // Fallback to the generic approach, which is a slower\n                 Bits bits = Bits.bitsFromBytes( bArray );\n-                int length = (bArray.length * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n+                int length = (bArray.length * 8 - ( 8 - bitsUsedInLastByte)) / requiredBits;\n                 return type.createArray( length, bits, requiredBits );\n             }\n         }\n@@ -369,4 +371,4 @@ public class DynamicArrayStore extends AbstractDynamicStore\n     {\n         return getRightArray( readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}