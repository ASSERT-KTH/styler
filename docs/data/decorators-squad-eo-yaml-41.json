{
    "project_name": "decorators-squad-eo-yaml",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "182",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    default int integer(final int index) {\n        final String value = this.string(index);\n        if(value != null && !value.isEmpty()) {\n            return Integer.parseInt(value);\n        }\n        return -1;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/41/YamlSequence.java\nindex c8adbbf153f..5c173b63cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/41/YamlSequence.java\n@@ -179,7 +179,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      */\n     default int integer(final int index) {\n         final String value = this.string(index);\n-        if(value != null && !value.isEmpty()) {\n+        if (value != null && !value.isEmpty()) {\n             return Integer.parseInt(value);\n         }\n         return -1;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/41/YamlSequence.java\nindex c8adbbf153f..fe3a38e22a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/41/YamlSequence.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2016-2020, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.eoyaml;\n \n import java.time.LocalDate;\n@@ -179,7 +180,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      */\n     default int integer(final int index) {\n         final String value = this.string(index);\n-        if(value != null && !value.isEmpty()) {\n+        if (value != null && !value.isEmpty()) {\n             return Integer.parseInt(value);\n         }\n         return -1;\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 114.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/41/YamlSequence.java\nindex c8adbbf153f..7bce748712a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/41/YamlSequence.java\n@@ -77,8 +77,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @param index Integer index.\n      * @return Yaml mapping.\n      */\n-\n-    default YamlMapping yamlMapping(final int index) {\n+default YamlMapping yamlMapping(final int index) {\n         YamlMapping mapping = null;\n         int count = 0;\n         for (final YamlNode node : this.values()) {\n@@ -107,8 +106,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n         return sequence;\n     }\n \n-\n-    /**\n+/**\n      * Get the String from the given index.\n      * @param index Integer index.\n      * @return String.\n@@ -179,7 +177,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      */\n     default int integer(final int index) {\n         final String value = this.string(index);\n-        if(value != null && !value.isEmpty()) {\n+        if (value != null && !value.isEmpty()) {\n             return Integer.parseInt(value);\n         }\n         return -1;\n@@ -287,4 +285,4 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n         }\n         return null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "192",
                    "column": "31",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "215",
                    "column": "31",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "238",
                    "column": "31",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "261",
                    "column": "31",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "283",
                    "column": "31",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "305",
                    "column": "31",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/41/YamlSequence.java\nindex c8adbbf153f..b8e3a969a0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/41/YamlSequence.java\n@@ -41,16 +41,20 @@ import java.util.Iterator;\n  * @version $Id: 9be605a1c7ce2b651046906e83ded1a3714b0149 $\n  * @since 1.0.0\n  */\n+\n+\n public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n \n     /**\n      * Fetch the values of this sequence.\n      * @return Collection of {@link YamlNode}\n      */\n+\n+\n     Collection<YamlNode> values();\n \n-    @Override\n-    default Node type() {\n+\n+    @Override default Node type() {\n         return Node.SEQUENCE;\n     }\n \n@@ -59,6 +63,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * It is equivalent to YamlSequence.values().iterator().\n      * @return Iterator of YamlNode.\n      */\n+\n     default Iterator<YamlNode> iterator() {\n         return this.values().iterator();\n     }\n@@ -68,6 +73,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * this sequence.\n      * @return Integer.\n      */\n+\n     default int size() {\n         return this.values().size();\n     }\n@@ -95,6 +101,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @param index Integer index.\n      * @return Yaml sequence.\n      */\n+\n     default YamlSequence yamlSequence(final int index) {\n         YamlSequence sequence = null;\n         int count = 0;\n@@ -113,6 +120,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @param index Integer index.\n      * @return String.\n      */\n+\n     default String string(final int index) {\n         String value = null;\n         int count = 0;\n@@ -131,6 +139,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @param index Integer index.\n      * @return The folded block scalar as String.\n      */\n+\n     default String foldedBlockScalar(final int index) {\n         String value = null;\n         int count = 0;\n@@ -149,14 +158,14 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @param index Integer index.\n      * @return The folded block scalar as String.\n      */\n+\n     default Collection<String> literalBlockScalar(final int index) {\n         Collection<String> value = null;\n         int count = 0;\n         for (final YamlNode node : this.values()) {\n             if (count == index && (node instanceof Scalar)) {\n                 value = Arrays.asList(\n-                    ((Scalar) node)\n-                        .value().split(System.lineSeparator())\n+                    ((Scalar) node).value().split(System.lineSeparator())\n                 );\n                 break;\n             }\n@@ -177,10 +186,12 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @throws NumberFormatException - if the Scalar value\n      *  is not a parsable integer.\n      */\n+\n     default int integer(final int index) {\n         final String value = this.string(index);\n-        if(value != null && !value.isEmpty()) {\n-            return Integer.parseInt(value);\n+        if (value != null && ! value.isEmpty()) {\n+            return Integer.parseInt(\n+                value);\n         }\n         return -1;\n     }\n@@ -198,10 +209,12 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @throws NumberFormatException - if the Scalar value\n      *                               is not a parsable float.\n      */\n+\n     default float floatNumber(final int index) {\n         final String value = this.string(index);\n-        if (value != null && !value.isEmpty()) {\n-            return Float.parseFloat(value);\n+        if (value != null && ! value.isEmpty()) {\n+            return Float.parseFloat(\n+                value);\n         }\n         return -1;\n     }\n@@ -219,10 +232,12 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @throws NumberFormatException - if the Scalar value\n      *                               is not a parsable double.\n      */\n+\n     default double doubleNumber(final int index) {\n         final String value = this.string(index);\n-        if (value != null && !value.isEmpty()) {\n-            return Double.parseDouble(value);\n+        if (value != null && ! value.isEmpty()) {\n+            return Double.parseDouble(\n+                value);\n         }\n         return -1.0;\n     }\n@@ -240,10 +255,12 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @throws NumberFormatException - if the Scalar value\n      *                               is not a parsable long.\n      */\n+\n     default long longNumber(final int index) {\n         final String value = this.string(index);\n-        if (value != null && !value.isEmpty()) {\n-            return Long.parseLong(value);\n+        if (value != null && ! value.isEmpty()) {\n+            return Long.parseLong(\n+                value);\n         }\n         return -1L;\n     }\n@@ -260,10 +277,12 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @return Found LocalDate.\n      * @throws DateTimeParseException - if the Scalar value cannot be parsed.\n      */\n+\n     default LocalDate date(final int index) {\n         final String value = this.string(index);\n-        if (value != null && !value.isEmpty()) {\n-            return LocalDate.parse(value);\n+        if (value != null && ! value.isEmpty()) {\n+            return LocalDate.parse(\n+                value);\n         }\n         return null;\n     }\n@@ -280,11 +299,15 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      * @return Found LocalDateTime.\n      * @throws DateTimeParseException - if the Scalar value cannot be parsed.\n      */\n+\n     default LocalDateTime dateTime(final int index) {\n         final String value = this.string(index);\n-        if (value != null && !value.isEmpty()) {\n-            return LocalDateTime.parse(value);\n+        if (value != null && ! value.isEmpty()) {\n+            return LocalDateTime.parse(\n+                value);\n         }\n         return null;\n     }\n-}\n+\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/41/YamlSequence.java\nindex c8adbbf153f..5c173b63cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/41/YamlSequence.java\n@@ -179,7 +179,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      */\n     default int integer(final int index) {\n         final String value = this.string(index);\n-        if(value != null && !value.isEmpty()) {\n+        if (value != null && !value.isEmpty()) {\n             return Integer.parseInt(value);\n         }\n         return -1;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/41/YamlSequence.java\nindex c8adbbf153f..5c173b63cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/41/YamlSequence.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/41/YamlSequence.java\n@@ -179,7 +179,7 @@ public interface YamlSequence extends YamlNode, Iterable<YamlNode> {\n      */\n     default int integer(final int index) {\n         final String value = this.string(index);\n-        if(value != null && !value.isEmpty()) {\n+        if (value != null && !value.isEmpty()) {\n             return Integer.parseInt(value);\n         }\n         return -1;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}