{
    "project_name": "opencb-opencga",
    "error_id": "216",
    "information": {
        "errors": [
            {
                "line": "6",
                "column": "139",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\npublic class AlignmentQcParams extends ToolParams {\n    public static final String DESCRIPTION = \"Alignment quality control (QC) parameters. The BAM file is mandatory ever but the BED file\" +\n            \" and the dictionary files are only mandatory for computing hybrid-selection (HS) metrics\";\n\n    private String bamFile;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "column": "139",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "column": "137",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/216/AlignmentQcParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/216/AlignmentQcParams.java\nindex 90d24a9b04b..ef97479907b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/216/AlignmentQcParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/216/AlignmentQcParams.java\n@@ -3,117 +3,117 @@ package org.opencb.opencga.core.models.alignment;\n import org.opencb.opencga.core.tools.ToolParams;\n \n public class AlignmentQcParams extends ToolParams {\n-    public static final String DESCRIPTION = \"Alignment quality control (QC) parameters. The BAM file is mandatory ever but the BED file\" +\n-            \" and the dictionary files are only mandatory for computing hybrid-selection (HS) metrics\";\n-\n-    private String bamFile;\n-    private String bedFile;\n-    private String dictFile;\n-    private boolean runSamtoolsStats;\n-    private boolean runSamtoolsFlagStats;\n-    private boolean runFastQc;\n-    private boolean runHsMetrics;\n-    private String outdir;\n-\n-    public AlignmentQcParams() {\n-    }\n-\n-    public AlignmentQcParams(String bamFile, String bedFile, String dictFile, boolean runSamtoolsStats, boolean runSamtoolsFlagStats,\n-                             boolean runFastQc, boolean runHsMetrics, String outdir) {\n-        this.bamFile = bamFile;\n-        this.bedFile = bedFile;\n-        this.dictFile = dictFile;\n-        this.runSamtoolsStats = runSamtoolsStats;\n-        this.runSamtoolsFlagStats = runSamtoolsFlagStats;\n-        this.runFastQc = runFastQc;\n-        this.runHsMetrics = runHsMetrics;\n-        this.outdir = outdir;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        final StringBuilder sb = new StringBuilder(\"AlignmentQcParams{\");\n-        sb.append(\"bamFile='\").append(bamFile).append('\\'');\n-        sb.append(\", bedFile='\").append(bedFile).append('\\'');\n-        sb.append(\", dictFile='\").append(dictFile).append('\\'');\n-        sb.append(\", runSamtoolsStats=\").append(runSamtoolsStats);\n-        sb.append(\", runSamtoolsFlagStats=\").append(runSamtoolsFlagStats);\n-        sb.append(\", runFastQc=\").append(runFastQc);\n-        sb.append(\", runHsMetrics=\").append(runHsMetrics);\n-        sb.append(\", outdir='\").append(outdir).append('\\'');\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-\n-    public String getBamFile() {\n-        return bamFile;\n-    }\n-\n-    public AlignmentQcParams setBamFile(String bamFile) {\n-        this.bamFile = bamFile;\n-        return this;\n-    }\n-\n-    public String getBedFile() {\n-        return bedFile;\n-    }\n-\n-    public AlignmentQcParams setBedFile(String bedFile) {\n-        this.bedFile = bedFile;\n-        return this;\n-    }\n-\n-    public String getDictFile() {\n-        return dictFile;\n-    }\n-\n-    public AlignmentQcParams setDictFile(String dictFile) {\n-        this.dictFile = dictFile;\n-        return this;\n-    }\n-\n-    public boolean isRunSamtoolsStats() {\n-        return runSamtoolsStats;\n-    }\n-\n-    public AlignmentQcParams setRunSamtoolsStats(boolean runSamtoolsStats) {\n-        this.runSamtoolsStats = runSamtoolsStats;\n-        return this;\n-    }\n-\n-    public boolean isRunSamtoolsFlagStats() {\n-        return runSamtoolsFlagStats;\n-    }\n-\n-    public AlignmentQcParams setRunSamtoolsFlagStats(boolean runSamtoolsFlagStats) {\n-        this.runSamtoolsFlagStats = runSamtoolsFlagStats;\n-        return this;\n-    }\n-\n-    public boolean isRunFastQc() {\n-        return runFastQc;\n-    }\n-\n-    public AlignmentQcParams setRunFastQc(boolean runFastQc) {\n-        this.runFastQc = runFastQc;\n-        return this;\n-    }\n-\n-    public boolean isRunHsMetrics() {\n-        return runHsMetrics;\n-    }\n-\n-    public AlignmentQcParams setRunHsMetrics(boolean runHsMetrics) {\n-        this.runHsMetrics = runHsMetrics;\n-        return this;\n-    }\n-\n-    public String getOutdir() {\n-        return outdir;\n-    }\n-\n-    public AlignmentQcParams setOutdir(String outdir) {\n-        this.outdir = outdir;\n-        return this;\n-    }\n+  public static final String DESCRIPTION = \"Alignment quality control (QC) parameters. The BAM file is mandatory ever but the BED file\" +\n+      \" and the dictionary files are only mandatory for computing hybrid-selection (HS) metrics\";\n+\n+  private String bamFile;\n+  private String bedFile;\n+  private String dictFile;\n+  private boolean runSamtoolsStats;\n+  private boolean runSamtoolsFlagStats;\n+  private boolean runFastQc;\n+  private boolean runHsMetrics;\n+  private String outdir;\n+\n+  public AlignmentQcParams() {\n+  }\n+\n+  public AlignmentQcParams(String bamFile, String bedFile, String dictFile, boolean runSamtoolsStats, boolean runSamtoolsFlagStats,\n+                           boolean runFastQc, boolean runHsMetrics, String outdir) {\n+    this.bamFile = bamFile;\n+    this.bedFile = bedFile;\n+    this.dictFile = dictFile;\n+    this.runSamtoolsStats = runSamtoolsStats;\n+    this.runSamtoolsFlagStats = runSamtoolsFlagStats;\n+    this.runFastQc = runFastQc;\n+    this.runHsMetrics = runHsMetrics;\n+    this.outdir = outdir;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"AlignmentQcParams{\");\n+    sb.append(\"bamFile='\").append(bamFile).append('\\'');\n+    sb.append(\", bedFile='\").append(bedFile).append('\\'');\n+    sb.append(\", dictFile='\").append(dictFile).append('\\'');\n+    sb.append(\", runSamtoolsStats=\").append(runSamtoolsStats);\n+    sb.append(\", runSamtoolsFlagStats=\").append(runSamtoolsFlagStats);\n+    sb.append(\", runFastQc=\").append(runFastQc);\n+    sb.append(\", runHsMetrics=\").append(runHsMetrics);\n+    sb.append(\", outdir='\").append(outdir).append('\\'');\n+    sb.append('}');\n+    return sb.toString();\n+  }\n+\n+  public String getBamFile() {\n+    return bamFile;\n+  }\n+\n+  public AlignmentQcParams setBamFile(String bamFile) {\n+    this.bamFile = bamFile;\n+    return this;\n+  }\n+\n+  public String getBedFile() {\n+    return bedFile;\n+  }\n+\n+  public AlignmentQcParams setBedFile(String bedFile) {\n+    this.bedFile = bedFile;\n+    return this;\n+  }\n+\n+  public String getDictFile() {\n+    return dictFile;\n+  }\n+\n+  public AlignmentQcParams setDictFile(String dictFile) {\n+    this.dictFile = dictFile;\n+    return this;\n+  }\n+\n+  public boolean isRunSamtoolsStats() {\n+    return runSamtoolsStats;\n+  }\n+\n+  public AlignmentQcParams setRunSamtoolsStats(boolean runSamtoolsStats) {\n+    this.runSamtoolsStats = runSamtoolsStats;\n+    return this;\n+  }\n+\n+  public boolean isRunSamtoolsFlagStats() {\n+    return runSamtoolsFlagStats;\n+  }\n+\n+  public AlignmentQcParams setRunSamtoolsFlagStats(boolean runSamtoolsFlagStats) {\n+    this.runSamtoolsFlagStats = runSamtoolsFlagStats;\n+    return this;\n+  }\n+\n+  public boolean isRunFastQc() {\n+    return runFastQc;\n+  }\n+\n+  public AlignmentQcParams setRunFastQc(boolean runFastQc) {\n+    this.runFastQc = runFastQc;\n+    return this;\n+  }\n+\n+  public boolean isRunHsMetrics() {\n+    return runHsMetrics;\n+  }\n+\n+  public AlignmentQcParams setRunHsMetrics(boolean runHsMetrics) {\n+    this.runHsMetrics = runHsMetrics;\n+    return this;\n+  }\n+\n+  public String getOutdir() {\n+    return outdir;\n+  }\n+\n+  public AlignmentQcParams setOutdir(String outdir) {\n+    this.outdir = outdir;\n+    return this;\n+  }\n }\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/216/AlignmentQcParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/216/AlignmentQcParams.java\nindex 90d24a9b04b..2bfa8577f79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/216/AlignmentQcParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/216/AlignmentQcParams.java\n@@ -3,8 +3,7 @@ package org.opencb.opencga.core.models.alignment;\n import org.opencb.opencga.core.tools.ToolParams;\n \n public class AlignmentQcParams extends ToolParams {\n-    public static final String DESCRIPTION = \"Alignment quality control (QC) parameters. The BAM file is mandatory ever but the BED file\" +\n-            \" and the dictionary files are only mandatory for computing hybrid-selection (HS) metrics\";\n+    public static final String DESCRIPTION = \"Alignment quality control (QC) parameters. The BAM file is mandatory ever but the BED file\" + \" and the dictionary files are only mandatory for computing hybrid-selection (HS) metrics\";\n \n     private String bamFile;\n     private String bedFile;\n@@ -18,8 +17,7 @@ public class AlignmentQcParams extends ToolParams {\n     public AlignmentQcParams() {\n     }\n \n-    public AlignmentQcParams(String bamFile, String bedFile, String dictFile, boolean runSamtoolsStats, boolean runSamtoolsFlagStats,\n-                             boolean runFastQc, boolean runHsMetrics, String outdir) {\n+    public AlignmentQcParams(String bamFile, String bedFile, String dictFile, boolean runSamtoolsStats, boolean runSamtoolsFlagStats, boolean runFastQc, boolean runHsMetrics, String outdir) {\n         this.bamFile = bamFile;\n         this.bedFile = bedFile;\n         this.dictFile = dictFile;\n@@ -116,4 +114,4 @@ public class AlignmentQcParams extends ToolParams {\n         this.outdir = outdir;\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "column": "139",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "column": "139",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}