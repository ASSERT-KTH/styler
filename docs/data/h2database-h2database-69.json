{
    "project_name": "h2database-h2database",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "2032",
                "column": "70",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n        debugCodeCall(\"supportsMixedCaseIdentifiers\");\n        Session.StaticSettings settings = conn.getStaticSettings();\n        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/69/JdbcDatabaseMetaData.java\nindex 468200fcebe..0530e109f84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/69/JdbcDatabaseMetaData.java\n@@ -2029,7 +2029,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/69/JdbcDatabaseMetaData.java\nindex 468200fcebe..40ac2a6d41a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/69/JdbcDatabaseMetaData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.sql.Connection;\n@@ -41,7 +42,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n         this.conn = conn;\n         Session session = conn.getSession();\n-        meta = session.isOldInformationSchema() ? new DatabaseMetaLegacy(session)\n+        meta = session.isOldInformationSchema() ?\n+                new DatabaseMetaLegacy(session)\n                 : conn.getSession().getDatabaseMeta();\n     }\n \n@@ -136,17 +138,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param types null or a list of table types\n+     *                         (uppercase for unquoted names)\n+     * @param types            null or a list of table types\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n+    public ResultSet getTables(String catalog, String schemaPattern,\n+                               String tableNamePattern, String[] types)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -154,7 +157,9 @@ public final class JdbcDatabaseMetaData extends TraceObject\n                         quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n                         \", \" + quoteArray(types) + \");\");\n             }\n-            return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n+            return getResultSet(\n+                    meta.getTables(catalog, schemaPattern, tableNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -192,27 +197,30 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern,\n+                                String tableNamePattern,\n+                                String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(\n+                    meta.getColumns(catalog, schemaPattern, tableNamePattern,\n+                            columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -243,17 +251,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>FILTER_CONDITION (String) filter condition (always empty)</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param unique only unique indexes\n+     * @param catalog     null or the catalog name\n+     * @param schema      null (to get all objects) or a schema name\n+     *                    (uppercase for unquoted names)\n+     * @param table       table name (must be specified)\n+     * @param unique      only unique indexes\n      * @param approximate if true, return fast, but approximate CARDINALITY\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n+    public ResultSet getIndexInfo(String catalog, String schema, String table,\n+                                  boolean unique, boolean approximate)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -261,7 +270,9 @@ public final class JdbcDatabaseMetaData extends TraceObject\n                         quote(schema) + \", \" + quote(table) + \", \" +\n                         unique + \", \" + approximate + \");\");\n             }\n-            return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n+            return getResultSet(\n+                    meta.getIndexInfo(catalog, schema, table, unique,\n+                            approximate));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -281,20 +292,21 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     *                (uppercase for unquoted names)\n+     * @param table   table name (must be specified)\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -465,24 +477,26 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+                                   String procedureNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n+            return getResultSet(meta.getProcedures(catalog, schemaPattern,\n+                    procedureNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -522,28 +536,31 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n-     * @param columnNamePattern the procedure name pattern\n+     * @param columnNamePattern    the procedure name pattern\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n+                                         String procedureNamePattern,\n+                                         String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+                    meta.getProcedureColumns(catalog, schemaPattern,\n+                            procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -629,27 +646,29 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table a table name (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schema            null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param table             a table name (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n+    public ResultSet getColumnPrivileges(String catalog, String schema,\n+                                         String table, String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n+            return getResultSet(meta.getColumnPrivileges(catalog, schema, table,\n+                    columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -671,26 +690,28 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n+                                        String tableNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -712,27 +733,31 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>PSEUDO_COLUMN (short) (always bestRowNotPseudo)</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param scope ignored\n+     * @param catalog  null (to get all objects) or the catalog name\n+     * @param schema   null (to get all objects) or a schema name\n+     *                 (uppercase for unquoted names)\n+     * @param table    table name (must be specified)\n+     * @param scope    ignored\n      * @param nullable ignored\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n+    public ResultSet getBestRowIdentifier(String catalog, String schema,\n+                                          String table, int scope,\n+                                          boolean nullable)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \", \"\n+                        + scope + \", \" + nullable + \");\");\n             }\n-            return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n+            return getResultSet(\n+                    meta.getBestRowIdentifier(catalog, schema, table, scope,\n+                            nullable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -755,19 +780,20 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     * @param table   table name (must be specified)\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getVersionColumns(String catalog, String schema,\n+                                       String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -801,19 +827,20 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema the schema name of the foreign table\n-     * @param table the name of the foreign table\n+     * @param schema  the schema name of the foreign table\n+     * @param table   the name of the foreign table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getImportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -847,19 +874,20 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema the schema name of the primary table\n-     * @param table the name of the primary table\n+     * @param schema  the schema name of the primary table\n+     * @param table   the name of the primary table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getExportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -894,31 +922,38 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param primaryCatalog null or the catalog name\n-     * @param primarySchema the schema name of the primary table\n-     *          (optional)\n-     * @param primaryTable the name of the primary table (must be specified)\n+     * @param primarySchema  the schema name of the primary table\n+     *                       (optional)\n+     * @param primaryTable   the name of the primary table (must be specified)\n      * @param foreignCatalog null or the catalog name\n-     * @param foreignSchema the schema name of the foreign table\n-     *          (optional)\n-     * @param foreignTable the name of the foreign table (must be specified)\n+     * @param foreignSchema  the schema name of the foreign table\n+     *                       (optional)\n+     * @param foreignTable   the name of the foreign table (must be specified)\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog,\n+                                       String primarySchema,\n+                                       String primaryTable,\n+                                       String foreignCatalog,\n+                                       String foreignSchema,\n+                                       String foreignTable)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                        + quote(primaryCatalog) + \", \"\n+                        + quote(primarySchema) + \", \"\n+                        + quote(primaryTable) + \", \"\n+                        + quote(foreignCatalog) + \", \"\n+                        + quote(foreignSchema) + \", \"\n+                        + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(\n+                    meta.getCrossReference(primaryCatalog, primarySchema,\n+                            primaryTable, foreignCatalog,\n+                            foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -938,25 +973,28 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n      * </ol>\n      *\n-     * @param catalog ignored\n-     * @param schemaPattern ignored\n+     * @param catalog         ignored\n+     * @param schemaPattern   ignored\n      * @param typeNamePattern ignored\n-     * @param types ignored\n+     * @param types           ignored\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+                             String typeNamePattern, int[] types)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quoteIntArray(types) + \");\");\n             }\n-            return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n+            return getResultSet(\n+                    meta.getUDTs(catalog, schemaPattern, typeNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1115,7 +1153,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * patterns.\n      *\n      * @return the default escape character (always '\\', independent on the\n-     *         mode)\n+     * mode)\n      */\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n@@ -1141,6 +1179,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n \n     /**\n      * Returns whether alter table with add column is supported.\n+     *\n      * @return true\n      */\n     @Override\n@@ -1197,13 +1236,13 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Returns whether CONVERT is supported for one datatype to another.\n      *\n      * @param fromType the source SQL type\n-     * @param toType the target SQL type\n+     * @param toType   the target SQL type\n      * @return true\n      */\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \" + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1793,17 +1832,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true\n      */\n     @Override\n-    public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n+    public boolean supportsTransactionIsolationLevel(int level)\n+            throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n         switch (level) {\n-        case Connection.TRANSACTION_READ_UNCOMMITTED:\n-        case Connection.TRANSACTION_READ_COMMITTED:\n-        case Connection.TRANSACTION_REPEATABLE_READ:\n-        case Constants.TRANSACTION_SNAPSHOT:\n-        case Connection.TRANSACTION_SERIALIZABLE:\n-            return true;\n-        default:\n-            return false;\n+            case Connection.TRANSACTION_READ_UNCOMMITTED:\n+            case Connection.TRANSACTION_READ_COMMITTED:\n+            case Connection.TRANSACTION_REPEATABLE_READ:\n+            case Constants.TRANSACTION_SNAPSHOT:\n+            case Connection.TRANSACTION_SERIALIZABLE:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -1869,14 +1909,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Returns whether a specific result set concurrency is supported.\n      * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n      *\n-     * @param type the result set type\n+     * @param type        the result set type\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \" +\n+                    concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -2029,10 +2070,11 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                !settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2069,7 +2111,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2389,15 +2432,17 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n+    public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+                                   String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n+            return getResultSet(meta.getSuperTypes(catalog, schemaPattern,\n+                    typeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2413,24 +2458,26 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name pattern\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return an empty result set\n      */\n     @Override\n     public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+                                    String tableNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getSuperTables(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2440,17 +2487,21 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern,\n+                                   String typeNamePattern,\n+                                   String attributeNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quote(attributeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n+            return getResultSet(\n+                    meta.getAttributes(catalog, schemaPattern, typeNamePattern,\n+                            attributeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2460,7 +2511,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Does this database supports a result set holdability.\n      *\n      * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n-     *            CLOSE_CURSORS_AT_COMMIT\n+     *                    CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n     @Override\n@@ -2592,8 +2643,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n@@ -2643,12 +2694,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()),\n+                    ValueInteger.get(Integer.MAX_VALUE),\n+                    ValueVarchar.EMPTY, ValueVarchar.EMPTY,\n+                    ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                    \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2688,18 +2742,20 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      */\n     @Override\n     public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n+                                        String functionNamePattern,\n+                                        String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+                    meta.getFunctionColumns(catalog, schemaPattern,\n+                            functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2710,15 +2766,17 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      */\n     @Override\n     public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+                                  String functionNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n+            return getResultSet(meta.getFunctions(catalog, schemaPattern,\n+                    functionNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2757,27 +2815,30 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>IS_NULLABLE (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of pseudo and invisible columns\n      */\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern,\n+                                      String tableNamePattern,\n+                                      String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern,\n+                    tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2792,7 +2853,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn, null, null, result,\n+                getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n }\n",
            "diff_size": 259
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/69/JdbcDatabaseMetaData.java\nindex 468200fcebe..b49bb12b76d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/69/JdbcDatabaseMetaData.java\n@@ -30,8 +30,7 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public final class JdbcDatabaseMetaData extends TraceObject\n-        implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+public final class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n     private final JdbcConnection conn;\n \n@@ -2029,7 +2028,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2795,4 +2794,4 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/69/JdbcDatabaseMetaData.java\nindex 468200fcebe..f673206e993 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/69/JdbcDatabaseMetaData.java\n@@ -12,7 +12,6 @@ import java.sql.RowIdLifetime;\n import java.sql.SQLException;\n import java.util.Map.Entry;\n import java.util.Properties;\n-\n import org.h2.engine.Constants;\n import org.h2.engine.Session;\n import org.h2.jdbc.meta.DatabaseMeta;\n@@ -30,19 +29,18 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public final class JdbcDatabaseMetaData extends TraceObject\n-        implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n-    private final JdbcConnection conn;\n \n+public final class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+\n+    private final JdbcConnection conn;\n     private final DatabaseMeta meta;\n \n     JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n         setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n         this.conn = conn;\n         Session session = conn.getSession();\n-        meta = session.isOldInformationSchema() ? new DatabaseMetaLegacy(session)\n-                : conn.getSession().getDatabaseMeta();\n+        meta = session.isOldInformationSchema() ? new DatabaseMetaLegacy(session) : conn.getSession().getDatabaseMeta();\n     }\n \n     /**\n@@ -50,6 +48,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the major version number\n      */\n+\n     @Override\n     public int getDriverMajorVersion() {\n         debugCodeCall(\"getDriverMajorVersion\");\n@@ -61,6 +60,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the minor version number\n      */\n+\n     @Override\n     public int getDriverMinorVersion() {\n         debugCodeCall(\"getDriverMinorVersion\");\n@@ -72,6 +72,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the product name (\"H2\")\n      */\n+\n     @Override\n     public String getDatabaseProductName() {\n         debugCodeCall(\"getDatabaseProductName\");\n@@ -85,6 +86,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the product version\n      */\n+\n     @Override\n     public String getDatabaseProductVersion() throws SQLException {\n         try {\n@@ -100,6 +102,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the driver name (\"H2 JDBC Driver\")\n      */\n+\n     @Override\n     public String getDriverName() {\n         debugCodeCall(\"getDriverName\");\n@@ -112,6 +115,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the version number\n      */\n+\n     @Override\n     public String getDriverVersion() {\n         debugCodeCall(\"getDriverVersion\");\n@@ -145,14 +149,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n-            throws SQLException {\n+    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalog) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n-                        \", \" + quoteArray(types) + \");\");\n+                debugCode(\"getTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quoteArray(types) + \");\");\n             }\n             return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n         } catch (Exception e) {\n@@ -202,15 +207,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -252,14 +257,16 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n-            throws SQLException {\n+    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n-                        quote(schema) + \", \" + quote(table) + \", \" +\n-                        unique + \", \" + approximate + \");\");\n+                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + unique + \", \"\n+                + approximate + \");\");\n             }\n             return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n         } catch (Exception e) {\n@@ -287,14 +294,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getPrimaryKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -307,6 +314,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allProceduresAreCallable() {\n         debugCodeCall(\"allProceduresAreCallable\");\n@@ -318,6 +326,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allTablesAreSelectable() {\n         debugCodeCall(\"allTablesAreSelectable\");\n@@ -329,6 +338,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the url\n      */\n+\n     @Override\n     public String getURL() throws SQLException {\n         try {\n@@ -345,6 +355,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the user name\n      */\n+\n     @Override\n     public String getUserName() throws SQLException {\n         try {\n@@ -360,6 +371,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return if read only optimization is switched on\n      */\n+\n     @Override\n     public boolean isReadOnly() throws SQLException {\n         try {\n@@ -376,6 +388,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return if NULL values are sorted high\n      */\n+\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n         try {\n@@ -392,6 +405,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return if NULL values are sorted low\n      */\n+\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n         try {\n@@ -408,6 +422,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return if NULL values are sorted at the beginning\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtStart() throws SQLException {\n         try {\n@@ -424,6 +439,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return if NULL values are sorted at the end\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtEnd() throws SQLException {\n         try {\n@@ -439,6 +455,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the connection\n      */\n+\n     @Override\n     public Connection getConnection() {\n         debugCodeCall(\"getConnection\");\n@@ -472,15 +489,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+    public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                debugCode(\"getProcedures(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \");\");\n             }\n             return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n         } catch (Exception e) {\n@@ -530,20 +546,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getProcedureColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+            return getResultSet(meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -561,6 +575,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getSchemas() throws SQLException {\n         try {\n@@ -582,6 +597,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the catalog list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getCatalogs() throws SQLException {\n         try {\n@@ -602,6 +618,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the table types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTableTypes() throws SQLException {\n         try {\n@@ -638,16 +655,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumnPrivileges(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n         } catch (Exception e) {\n@@ -679,15 +695,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n-            throws SQLException {\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getTablePrivileges(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n@@ -721,16 +736,16 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n-            throws SQLException {\n+    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                debugCode(\"getBestRowIdentifier(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + scope + \", \"\n+                + nullable + \");\");\n             }\n             return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n         } catch (Exception e) {\n@@ -760,14 +775,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -806,14 +821,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getImportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -852,14 +867,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getExportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -904,21 +919,19 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \"\n+                + quote(primarySchema) + \", \"\n+                + quote(primaryTable) + \", \"\n+                + quote(foreignCatalog) + \", \"\n+                + quote(foreignSchema) + \", \"\n+                + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog, foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -945,16 +958,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                debugCode(\"getUDTs(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quoteIntArray(types) + \");\");\n             }\n             return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n         } catch (Exception e) {\n@@ -991,6 +1003,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the list of data types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTypeInfo() throws SQLException {\n         try {\n@@ -1006,6 +1019,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean usesLocalFiles() {\n         debugCodeCall(\"usesLocalFiles\");\n@@ -1017,6 +1031,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean usesLocalFilePerTable() {\n         debugCodeCall(\"usesLocalFilePerTable\");\n@@ -1028,6 +1043,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return a double quote\n      */\n+\n     @Override\n     public String getIdentifierQuoteString() {\n         debugCodeCall(\"getIdentifierQuoteString\");\n@@ -1040,6 +1056,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return a list of additional the keywords\n      */\n+\n     @Override\n     public String getSQLKeywords() throws SQLException {\n         try {\n@@ -1055,6 +1072,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getNumericFunctions() throws SQLException {\n         try {\n@@ -1070,6 +1088,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getStringFunctions() throws SQLException {\n         try {\n@@ -1085,6 +1104,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getSystemFunctions() throws SQLException {\n         try {\n@@ -1100,6 +1120,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getTimeDateFunctions() throws SQLException {\n         try {\n@@ -1117,6 +1138,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the default escape character (always '\\', independent on the\n      *         mode)\n      */\n+\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n         try {\n@@ -1133,6 +1155,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return an empty String (\"\")\n      */\n+\n     @Override\n     public String getExtraNameCharacters() {\n         debugCodeCall(\"getExtraNameCharacters\");\n@@ -1143,6 +1166,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Returns whether alter table with add column is supported.\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithAddColumn() {\n         debugCodeCall(\"supportsAlterTableWithAddColumn\");\n@@ -1154,6 +1178,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithDropColumn() {\n         debugCodeCall(\"supportsAlterTableWithDropColumn\");\n@@ -1165,6 +1190,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsColumnAliasing() {\n         debugCodeCall(\"supportsColumnAliasing\");\n@@ -1176,6 +1202,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean nullPlusNonNullIsNull() {\n         debugCodeCall(\"nullPlusNonNullIsNull\");\n@@ -1187,6 +1214,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert() {\n         debugCodeCall(\"supportsConvert\");\n@@ -1200,10 +1228,12 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param toType the target SQL type\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \"\n+            + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1213,6 +1243,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTableCorrelationNames() {\n         debugCodeCall(\"supportsTableCorrelationNames\");\n@@ -1225,6 +1256,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDifferentTableCorrelationNames() {\n         debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n@@ -1236,6 +1268,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsExpressionsInOrderBy() {\n         debugCodeCall(\"supportsExpressionsInOrderBy\");\n@@ -1248,6 +1281,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOrderByUnrelated() {\n         debugCodeCall(\"supportsOrderByUnrelated\");\n@@ -1259,6 +1293,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupBy() {\n         debugCodeCall(\"supportsGroupBy\");\n@@ -1271,6 +1306,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByUnrelated() {\n         debugCodeCall(\"supportsGroupByUnrelated\");\n@@ -1284,6 +1320,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByBeyondSelect() {\n         debugCodeCall(\"supportsGroupByBeyondSelect\");\n@@ -1295,6 +1332,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLikeEscapeClause() {\n         debugCodeCall(\"supportsLikeEscapeClause\");\n@@ -1306,6 +1344,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsMultipleResultSets() {\n         debugCodeCall(\"supportsMultipleResultSets\");\n@@ -1318,6 +1357,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleTransactions() {\n         debugCodeCall(\"supportsMultipleTransactions\");\n@@ -1329,6 +1369,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsNonNullableColumns() {\n         debugCodeCall(\"supportsNonNullableColumns\");\n@@ -1340,6 +1381,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMinimumSQLGrammar() {\n         debugCodeCall(\"supportsMinimumSQLGrammar\");\n@@ -1351,6 +1393,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCoreSQLGrammar() {\n         debugCodeCall(\"supportsCoreSQLGrammar\");\n@@ -1362,6 +1405,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsExtendedSQLGrammar() {\n         debugCodeCall(\"supportsExtendedSQLGrammar\");\n@@ -1373,6 +1417,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsANSI92EntryLevelSQL() {\n         debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n@@ -1384,6 +1429,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92IntermediateSQL() {\n         debugCodeCall(\"supportsANSI92IntermediateSQL\");\n@@ -1395,6 +1441,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92FullSQL() {\n         debugCodeCall(\"supportsANSI92FullSQL\");\n@@ -1406,6 +1453,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsIntegrityEnhancementFacility() {\n         debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n@@ -1417,6 +1465,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOuterJoins() {\n         debugCodeCall(\"supportsOuterJoins\");\n@@ -1428,6 +1477,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsFullOuterJoins() {\n         debugCodeCall(\"supportsFullOuterJoins\");\n@@ -1439,6 +1489,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLimitedOuterJoins() {\n         debugCodeCall(\"supportsLimitedOuterJoins\");\n@@ -1450,6 +1501,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return \"schema\"\n      */\n+\n     @Override\n     public String getSchemaTerm() {\n         debugCodeCall(\"getSchemaTerm\");\n@@ -1461,6 +1513,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return \"procedure\"\n      */\n+\n     @Override\n     public String getProcedureTerm() {\n         debugCodeCall(\"getProcedureTerm\");\n@@ -1472,6 +1525,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return \"catalog\"\n      */\n+\n     @Override\n     public String getCatalogTerm() {\n         debugCodeCall(\"getCatalogTerm\");\n@@ -1483,6 +1537,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean isCatalogAtStart() {\n         debugCodeCall(\"isCatalogAtStart\");\n@@ -1494,6 +1549,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return \".\"\n      */\n+\n     @Override\n     public String getCatalogSeparator() {\n         debugCodeCall(\"getCatalogSeparator\");\n@@ -1505,6 +1561,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInDataManipulation() {\n         debugCodeCall(\"supportsSchemasInDataManipulation\");\n@@ -1516,6 +1573,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInProcedureCalls() {\n         debugCodeCall(\"supportsSchemasInProcedureCalls\");\n@@ -1527,6 +1585,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInTableDefinitions() {\n         debugCodeCall(\"supportsSchemasInTableDefinitions\");\n@@ -1538,6 +1597,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInIndexDefinitions() {\n         debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n@@ -1549,6 +1609,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n@@ -1560,6 +1621,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInDataManipulation() {\n         debugCodeCall(\"supportsCatalogsInDataManipulation\");\n@@ -1571,6 +1633,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsCatalogsInProcedureCalls() {\n         debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n@@ -1582,6 +1645,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInTableDefinitions() {\n         debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n@@ -1593,6 +1657,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInIndexDefinitions() {\n         debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n@@ -1604,6 +1669,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n@@ -1615,6 +1681,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsPositionedDelete() {\n         debugCodeCall(\"supportsPositionedDelete\");\n@@ -1626,6 +1693,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsPositionedUpdate() {\n         debugCodeCall(\"supportsPositionedUpdate\");\n@@ -1637,6 +1705,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSelectForUpdate() {\n         debugCodeCall(\"supportsSelectForUpdate\");\n@@ -1648,6 +1717,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStoredProcedures() {\n         debugCodeCall(\"supportsStoredProcedures\");\n@@ -1659,6 +1729,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInComparisons() {\n         debugCodeCall(\"supportsSubqueriesInComparisons\");\n@@ -1670,6 +1741,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInExists() {\n         debugCodeCall(\"supportsSubqueriesInExists\");\n@@ -1681,6 +1753,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInIns() {\n         debugCodeCall(\"supportsSubqueriesInIns\");\n@@ -1692,6 +1765,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInQuantifieds() {\n         debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n@@ -1703,6 +1777,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCorrelatedSubqueries() {\n         debugCodeCall(\"supportsCorrelatedSubqueries\");\n@@ -1714,6 +1789,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnion() {\n         debugCodeCall(\"supportsUnion\");\n@@ -1725,6 +1801,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnionAll() {\n         debugCodeCall(\"supportsUnionAll\");\n@@ -1736,6 +1813,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossCommit() {\n         debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n@@ -1747,6 +1825,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossRollback() {\n         debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n@@ -1758,6 +1837,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossCommit() {\n         debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n@@ -1769,6 +1849,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossRollback() {\n         debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n@@ -1780,6 +1861,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactions() {\n         debugCodeCall(\"supportsTransactions\");\n@@ -1792,6 +1874,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param level the transaction isolation level (Connection.TRANSACTION_*)\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n@@ -1813,6 +1896,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n         debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n@@ -1824,6 +1908,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsDataManipulationTransactionsOnly() {\n         debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n@@ -1835,6 +1920,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean dataDefinitionCausesTransactionCommit() {\n         debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n@@ -1846,6 +1932,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean dataDefinitionIgnoredInTransactions() {\n         debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n@@ -1859,6 +1946,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n      */\n+\n     @Override\n     public boolean supportsResultSetType(int type) {\n         debugCodeCall(\"supportsResultSetType\", type);\n@@ -1873,10 +1961,12 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n+\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \"\n+            + concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -1887,6 +1977,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return true\n      */\n+\n     @Override\n     public boolean ownUpdatesAreVisible(int type) {\n         debugCodeCall(\"ownUpdatesAreVisible\", type);\n@@ -1899,6 +1990,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownDeletesAreVisible(int type) {\n         debugCodeCall(\"ownDeletesAreVisible\", type);\n@@ -1911,6 +2003,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownInsertsAreVisible(int type) {\n         debugCodeCall(\"ownInsertsAreVisible\", type);\n@@ -1923,6 +2016,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersUpdatesAreVisible(int type) {\n         debugCodeCall(\"othersUpdatesAreVisible\", type);\n@@ -1935,6 +2029,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersDeletesAreVisible(int type) {\n         debugCodeCall(\"othersDeletesAreVisible\", type);\n@@ -1947,6 +2042,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersInsertsAreVisible(int type) {\n         debugCodeCall(\"othersInsertsAreVisible\", type);\n@@ -1959,6 +2055,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean updatesAreDetected(int type) {\n         debugCodeCall(\"updatesAreDetected\", type);\n@@ -1971,6 +2068,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean deletesAreDetected(int type) {\n         debugCodeCall(\"deletesAreDetected\", type);\n@@ -1983,6 +2081,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean insertsAreDetected(int type) {\n         debugCodeCall(\"insertsAreDetected\", type);\n@@ -1994,6 +2093,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsBatchUpdates() {\n         debugCodeCall(\"supportsBatchUpdates\");\n@@ -2005,6 +2105,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean doesMaxRowSizeIncludeBlobs() {\n         debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n@@ -2016,6 +2117,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return Connection.TRANSACTION_READ_COMMITTED\n      */\n+\n     @Override\n     public int getDefaultTransactionIsolation() {\n         debugCodeCall(\"getDefaultTransactionIsolation\");\n@@ -2028,8 +2130,9 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2041,6 +2144,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesUpperCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseIdentifiers\");\n@@ -2053,6 +2157,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesLowerCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseIdentifiers\");\n@@ -2065,6 +2170,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n@@ -2078,6 +2184,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n@@ -2090,6 +2197,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n@@ -2102,6 +2210,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n@@ -2114,6 +2223,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n@@ -2125,6 +2235,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxBinaryLiteralLength() {\n         debugCodeCall(\"getMaxBinaryLiteralLength\");\n@@ -2136,6 +2247,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCharLiteralLength() {\n         debugCodeCall(\"getMaxCharLiteralLength\");\n@@ -2147,6 +2259,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnNameLength() {\n         debugCodeCall(\"getMaxColumnNameLength\");\n@@ -2158,6 +2271,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInGroupBy() {\n         debugCodeCall(\"getMaxColumnsInGroupBy\");\n@@ -2169,6 +2283,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInIndex() {\n         debugCodeCall(\"getMaxColumnsInIndex\");\n@@ -2180,6 +2295,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInOrderBy() {\n         debugCodeCall(\"getMaxColumnsInOrderBy\");\n@@ -2191,6 +2307,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInSelect() {\n         debugCodeCall(\"getMaxColumnsInSelect\");\n@@ -2202,6 +2319,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInTable() {\n         debugCodeCall(\"getMaxColumnsInTable\");\n@@ -2213,6 +2331,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxConnections() {\n         debugCodeCall(\"getMaxConnections\");\n@@ -2224,6 +2343,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCursorNameLength() {\n         debugCodeCall(\"getMaxCursorNameLength\");\n@@ -2235,6 +2355,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxIndexLength() {\n         debugCodeCall(\"getMaxIndexLength\");\n@@ -2246,6 +2367,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxSchemaNameLength() {\n         debugCodeCall(\"getMaxSchemaNameLength\");\n@@ -2257,6 +2379,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxProcedureNameLength() {\n         debugCodeCall(\"getMaxProcedureNameLength\");\n@@ -2268,6 +2391,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCatalogNameLength() {\n         debugCodeCall(\"getMaxCatalogNameLength\");\n@@ -2279,6 +2403,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxRowSize() {\n         debugCodeCall(\"getMaxRowSize\");\n@@ -2290,6 +2415,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatementLength() {\n         debugCodeCall(\"getMaxStatementLength\");\n@@ -2301,6 +2427,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatements() {\n         debugCodeCall(\"getMaxStatements\");\n@@ -2312,6 +2439,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTableNameLength() {\n         debugCodeCall(\"getMaxTableNameLength\");\n@@ -2323,6 +2451,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTablesInSelect() {\n         debugCodeCall(\"getMaxTablesInSelect\");\n@@ -2334,6 +2463,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxUserNameLength() {\n         debugCodeCall(\"getMaxUserNameLength\");\n@@ -2345,6 +2475,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSavepoints() {\n         debugCodeCall(\"supportsSavepoints\");\n@@ -2356,6 +2487,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsNamedParameters() {\n         debugCodeCall(\"supportsNamedParameters\");\n@@ -2368,6 +2500,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsMultipleOpenResults() {\n         debugCodeCall(\"supportsMultipleOpenResults\");\n@@ -2379,6 +2512,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGetGeneratedKeys() {\n         debugCodeCall(\"supportsGetGeneratedKeys\");\n@@ -2388,14 +2522,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n     public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n         } catch (Exception e) {\n@@ -2420,15 +2554,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *            (uppercase for unquoted names)\n      * @return an empty result set\n      */\n+\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getSuperTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n         } catch (Exception e) {\n@@ -2439,16 +2572,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                debugCode(\"getAttributes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quote(attributeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n         } catch (Exception e) {\n@@ -2463,6 +2595,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *            CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public boolean supportsResultSetHoldability(int holdability) {\n         debugCodeCall(\"supportsResultSetHoldability\", holdability);\n@@ -2474,6 +2607,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public int getResultSetHoldability() {\n         debugCodeCall(\"getResultSetHoldability\");\n@@ -2485,6 +2619,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the major version\n      */\n+\n     @Override\n     public int getDatabaseMajorVersion() throws SQLException {\n         try {\n@@ -2500,6 +2635,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the minor version\n      */\n+\n     @Override\n     public int getDatabaseMinorVersion() throws SQLException {\n         try {\n@@ -2515,6 +2651,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the major version (4)\n      */\n+\n     @Override\n     public int getJDBCMajorVersion() {\n         debugCodeCall(\"getJDBCMajorVersion\");\n@@ -2526,6 +2663,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return the minor version (2)\n      */\n+\n     @Override\n     public int getJDBCMinorVersion() {\n         debugCodeCall(\"getJDBCMinorVersion\");\n@@ -2537,6 +2675,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return {@link DatabaseMetaData#sqlStateSQL}\n      */\n+\n     @Override\n     public int getSQLStateType() {\n         debugCodeCall(\"getSQLStateType\");\n@@ -2548,6 +2687,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean locatorsUpdateCopy() {\n         debugCodeCall(\"locatorsUpdateCopy\");\n@@ -2559,6 +2699,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStatementPooling() {\n         debugCodeCall(\"supportsStatementPooling\");\n@@ -2576,6 +2717,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return ROWID_UNSUPPORTED\n      */\n+\n     @Override\n     public RowIdLifetime getRowIdLifetime() {\n         debugCodeCall(\"getRowIdLifetime\");\n@@ -2597,9 +2739,9 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n-            throws SQLException {\n+    public ResultSet getSchemas(String catalogPattern, String schemaPattern) throws SQLException {\n         try {\n             debugCodeCall(\"getSchemas(String,String)\");\n             return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n@@ -2614,6 +2756,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsStoredFunctionsUsingCallSyntax() {\n         debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n@@ -2626,6 +2769,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean autoCommitFailureClosesAllResultSets() {\n         debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n@@ -2643,12 +2787,12 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE), ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                                         \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2659,6 +2803,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param iface the class\n      * @return this\n      */\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T unwrap(Class<T> iface) throws SQLException {\n@@ -2678,6 +2823,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @param iface the class\n      * @return whether or not the interface is assignable from this class\n      */\n+\n     @Override\n     public boolean isWrapperFor(Class<?> iface) throws SQLException {\n         return iface != null && iface.isAssignableFrom(getClass());\n@@ -2686,20 +2832,17 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     /**\n      * [Not supported] Gets the list of function columns.\n      */\n+\n     @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+            return getResultSet(meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2708,15 +2851,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     /**\n      * [Not supported] Gets the list of functions.\n      */\n+\n     @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+    public ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                debugCode(\"getFunctions(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \");\");\n             }\n             return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n         } catch (Exception e) {\n@@ -2730,6 +2872,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean generatedKeyAlwaysReturned() {\n         return true;\n@@ -2766,16 +2909,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      *            (uppercase for unquoted names)\n      * @return the list of pseudo and invisible columns\n      */\n+\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -2786,13 +2928,16 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n         return getTraceObjectName() + \": \" + conn;\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn,\n+               null,\n+               null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 328
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/69/JdbcDatabaseMetaData.java\nindex 468200fcebe..0530e109f84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/69/JdbcDatabaseMetaData.java\n@@ -2029,7 +2029,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/69/JdbcDatabaseMetaData.java\nindex 468200fcebe..0530e109f84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/69/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/69/JdbcDatabaseMetaData.java\n@@ -2029,7 +2029,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}