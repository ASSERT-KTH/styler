{
    "project_name": "Activiti-Activiti",
    "error_id": "680",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport org.activiti.bpmn.model.Activity;\nimport org.activiti.bpmn.model.SubProcess;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/680/SequentialMultiInstanceBehavior.java\nindex cdb37bd8be3..21e6dbc3917 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/680/SequentialMultiInstanceBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.bpmn.model.Activity;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/680/SequentialMultiInstanceBehavior.java\nindex cdb37bd8be3..83c06c54ea2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/680/SequentialMultiInstanceBehavior.java\n@@ -30,93 +30,93 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;\n \n public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  public SequentialMultiInstanceBehavior(Activity activity, AbstractBpmnActivityBehavior innerActivityBehavior) {\n-    super(activity, innerActivityBehavior);\n-  }\n-\n-  /**\n-   * Handles the sequential case of spawning the instances. Will only create one instance, since at most one instance can be active.\n-   */\n-  protected int createInstances(DelegateExecution multiInstanceExecution) {\n-\n-    int nrOfInstances = resolveNrOfInstances(multiInstanceExecution);\n-    if (nrOfInstances == 0) {\n-      return nrOfInstances;\n-    } else if (nrOfInstances < 0) {\n-      throw new ActivitiIllegalArgumentException(\"Invalid number of instances: must be a non-negative integer value\" + \", but was \" + nrOfInstances);\n+    private static final long serialVersionUID = 1L;\n+\n+    public SequentialMultiInstanceBehavior(Activity activity, AbstractBpmnActivityBehavior innerActivityBehavior) {\n+        super(activity, innerActivityBehavior);\n     }\n \n-    // Create child execution that will execute the inner behavior\n-    ExecutionEntity childExecution = Context.getCommandContext().getExecutionEntityManager()\n-        .createChildExecution((ExecutionEntity) multiInstanceExecution);\n-    childExecution.setCurrentFlowElement(multiInstanceExecution.getCurrentFlowElement());\n-    multiInstanceExecution.setMultiInstanceRoot(true);\n-    multiInstanceExecution.setActive(false);\n-\n-    // Set Multi-instance variables\n-    setLoopVariable(multiInstanceExecution, NUMBER_OF_INSTANCES, nrOfInstances);\n-    setLoopVariable(multiInstanceExecution, NUMBER_OF_COMPLETED_INSTANCES, 0);\n-    setLoopVariable(multiInstanceExecution, NUMBER_OF_ACTIVE_INSTANCES, 1);\n-    setLoopVariable(childExecution, getCollectionElementIndexVariable(), 0);\n-    logLoopDetails(multiInstanceExecution, \"initialized\", 0, 0, 1, nrOfInstances);\n-\n-    executeOriginalBehavior(childExecution, 0);\n-    return nrOfInstances;\n-  }\n-\n-  /**\n-   * Called when the wrapped {@link ActivityBehavior} calls the {@link AbstractBpmnActivityBehavior#leave(DelegateExecution)} method. Handles the completion of one instance, and executes the logic for\n-   * the sequential behavior.\n-   */\n-  public void leave(DelegateExecution childExecution) {\n-    DelegateExecution multiInstanceRootExecution = getMultiInstanceRootExecution(childExecution);\n-    int nrOfInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_INSTANCES);\n-    int loopCounter = getLoopVariable(childExecution, getCollectionElementIndexVariable()) + 1;\n-    int nrOfCompletedInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_COMPLETED_INSTANCES) + 1;\n-    int nrOfActiveInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_ACTIVE_INSTANCES);\n-\n-    setLoopVariable(multiInstanceRootExecution, NUMBER_OF_COMPLETED_INSTANCES, nrOfCompletedInstances);\n-    setLoopVariable(childExecution, getCollectionElementIndexVariable(), loopCounter);\n-    logLoopDetails(childExecution, \"instance completed\", loopCounter, nrOfCompletedInstances, nrOfActiveInstances, nrOfInstances);\n-\n-    updateResultCollection(childExecution, multiInstanceRootExecution);\n-\n-    Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) childExecution, null);\n-    callActivityEndListeners(childExecution);\n-\n-    if (loopCounter >= nrOfInstances || completionConditionSatisfied(multiInstanceRootExecution)) {\n-      propagateLoopDataOutputRefToProcessInstance((ExecutionEntity) multiInstanceRootExecution);\n-      removeLocalLoopVariable(childExecution, getCollectionElementIndexVariable());\n-      multiInstanceRootExecution.setMultiInstanceRoot(false);\n-      multiInstanceRootExecution.setScope(false);\n-      multiInstanceRootExecution.setCurrentFlowElement(childExecution.getCurrentFlowElement());\n-      Context.getCommandContext().getExecutionEntityManager().deleteChildExecutions((ExecutionEntity) multiInstanceRootExecution, \"MI_END\");\n-      dispatchActivityCompletedEvent(childExecution);\n-      super.leave(multiInstanceRootExecution);\n-\n-    } else {\n-      try {\n-\n-        if (childExecution.getCurrentFlowElement() instanceof SubProcess) {\n-          ExecutionEntityManager executionEntityManager = Context.getCommandContext().getExecutionEntityManager();\n-          ExecutionEntity executionToContinue = executionEntityManager.createChildExecution((ExecutionEntity) multiInstanceRootExecution);\n-          executionToContinue.setCurrentFlowElement(childExecution.getCurrentFlowElement());\n-          executionToContinue.setScope(true);\n-          setLoopVariable(executionToContinue, getCollectionElementIndexVariable(), loopCounter);\n-          executeOriginalBehavior(executionToContinue, loopCounter);\n+    /**\n+     * Handles the sequential case of spawning the instances. Will only create one instance, since at most one instance can be active.\n+     */\n+    protected int createInstances(DelegateExecution multiInstanceExecution) {\n+\n+        int nrOfInstances = resolveNrOfInstances(multiInstanceExecution);\n+        if (nrOfInstances == 0) {\n+            return nrOfInstances;\n+        } else if (nrOfInstances < 0) {\n+            throw new ActivitiIllegalArgumentException(\"Invalid number of instances: must be a non-negative integer value\" + \", but was \" + nrOfInstances);\n+        }\n+\n+        // Create child execution that will execute the inner behavior\n+        ExecutionEntity childExecution = Context.getCommandContext().getExecutionEntityManager()\n+                .createChildExecution((ExecutionEntity) multiInstanceExecution);\n+        childExecution.setCurrentFlowElement(multiInstanceExecution.getCurrentFlowElement());\n+        multiInstanceExecution.setMultiInstanceRoot(true);\n+        multiInstanceExecution.setActive(false);\n+\n+        // Set Multi-instance variables\n+        setLoopVariable(multiInstanceExecution, NUMBER_OF_INSTANCES, nrOfInstances);\n+        setLoopVariable(multiInstanceExecution, NUMBER_OF_COMPLETED_INSTANCES, 0);\n+        setLoopVariable(multiInstanceExecution, NUMBER_OF_ACTIVE_INSTANCES, 1);\n+        setLoopVariable(childExecution, getCollectionElementIndexVariable(), 0);\n+        logLoopDetails(multiInstanceExecution, \"initialized\", 0, 0, 1, nrOfInstances);\n+\n+        executeOriginalBehavior(childExecution, 0);\n+        return nrOfInstances;\n+    }\n+\n+    /**\n+     * Called when the wrapped {@link ActivityBehavior} calls the {@link AbstractBpmnActivityBehavior#leave(DelegateExecution)} method. Handles the completion of one instance, and executes the logic for\n+     * the sequential behavior.\n+     */\n+    public void leave(DelegateExecution childExecution) {\n+        DelegateExecution multiInstanceRootExecution = getMultiInstanceRootExecution(childExecution);\n+        int nrOfInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_INSTANCES);\n+        int loopCounter = getLoopVariable(childExecution, getCollectionElementIndexVariable()) + 1;\n+        int nrOfCompletedInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_COMPLETED_INSTANCES) + 1;\n+        int nrOfActiveInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_ACTIVE_INSTANCES);\n+\n+        setLoopVariable(multiInstanceRootExecution, NUMBER_OF_COMPLETED_INSTANCES, nrOfCompletedInstances);\n+        setLoopVariable(childExecution, getCollectionElementIndexVariable(), loopCounter);\n+        logLoopDetails(childExecution, \"instance completed\", loopCounter, nrOfCompletedInstances, nrOfActiveInstances, nrOfInstances);\n+\n+        updateResultCollection(childExecution, multiInstanceRootExecution);\n+\n+        Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) childExecution, null);\n+        callActivityEndListeners(childExecution);\n+\n+        if (loopCounter >= nrOfInstances || completionConditionSatisfied(multiInstanceRootExecution)) {\n+            propagateLoopDataOutputRefToProcessInstance((ExecutionEntity) multiInstanceRootExecution);\n+            removeLocalLoopVariable(childExecution, getCollectionElementIndexVariable());\n+            multiInstanceRootExecution.setMultiInstanceRoot(false);\n+            multiInstanceRootExecution.setScope(false);\n+            multiInstanceRootExecution.setCurrentFlowElement(childExecution.getCurrentFlowElement());\n+            Context.getCommandContext().getExecutionEntityManager().deleteChildExecutions((ExecutionEntity) multiInstanceRootExecution, \"MI_END\");\n+            dispatchActivityCompletedEvent(childExecution);\n+            super.leave(multiInstanceRootExecution);\n+\n         } else {\n-          executeOriginalBehavior(childExecution, loopCounter);\n+            try {\n+\n+                if (childExecution.getCurrentFlowElement() instanceof SubProcess) {\n+                    ExecutionEntityManager executionEntityManager = Context.getCommandContext().getExecutionEntityManager();\n+                    ExecutionEntity executionToContinue = executionEntityManager.createChildExecution((ExecutionEntity) multiInstanceRootExecution);\n+                    executionToContinue.setCurrentFlowElement(childExecution.getCurrentFlowElement());\n+                    executionToContinue.setScope(true);\n+                    setLoopVariable(executionToContinue, getCollectionElementIndexVariable(), loopCounter);\n+                    executeOriginalBehavior(executionToContinue, loopCounter);\n+                } else {\n+                    executeOriginalBehavior(childExecution, loopCounter);\n+                }\n+                dispatchActivityCompletedEvent(childExecution);\n+            } catch (BpmnError error) {\n+                // re-throw business fault so that it can be caught by an Error\n+                // Intermediate Event or Error Event Sub-Process in the process\n+                throw error;\n+            } catch (Exception e) {\n+                throw new ActivitiException(\"Could not execute inner activity behavior of multi instance behavior\", e);\n+            }\n         }\n-        dispatchActivityCompletedEvent(childExecution);\n-      } catch (BpmnError error) {\n-        // re-throw business fault so that it can be caught by an Error\n-        // Intermediate Event or Error Event Sub-Process in the process\n-        throw error;\n-      } catch (Exception e) {\n-        throw new ActivitiException(\"Could not execute inner activity behavior of multi instance behavior\", e);\n-      }\n     }\n-  }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/680/SequentialMultiInstanceBehavior.java\nindex cdb37bd8be3..b37baadc03c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/680/SequentialMultiInstanceBehavior.java\n@@ -28,6 +28,7 @@ import org.activiti.engine.impl.delegate.ActivityBehavior;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;\n \n+\n public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavior {\n \n   private static final long serialVersionUID = 1L;\n@@ -39,29 +40,41 @@ public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavi\n   /**\n    * Handles the sequential case of spawning the instances. Will only create one instance, since at most one instance can be active.\n    */\n-  protected int createInstances(DelegateExecution multiInstanceExecution) {\n \n+  protected int createInstances(DelegateExecution multiInstanceExecution) {\n     int nrOfInstances = resolveNrOfInstances(multiInstanceExecution);\n     if (nrOfInstances == 0) {\n       return nrOfInstances;\n     } else if (nrOfInstances < 0) {\n-      throw new ActivitiIllegalArgumentException(\"Invalid number of instances: must be a non-negative integer value\" + \", but was \" + nrOfInstances);\n+             throw new ActivitiIllegalArgumentException(\"Invalid number of instances: must be a non-negative integer value\" + \", but was \" + nrOfInstances);\n     }\n \n     // Create child execution that will execute the inner behavior\n-    ExecutionEntity childExecution = Context.getCommandContext().getExecutionEntityManager()\n-        .createChildExecution((ExecutionEntity) multiInstanceExecution);\n+\n+    ExecutionEntity childExecution = Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity) multiInstanceExecution);\n     childExecution.setCurrentFlowElement(multiInstanceExecution.getCurrentFlowElement());\n     multiInstanceExecution.setMultiInstanceRoot(true);\n     multiInstanceExecution.setActive(false);\n \n     // Set Multi-instance variables\n-    setLoopVariable(multiInstanceExecution, NUMBER_OF_INSTANCES, nrOfInstances);\n-    setLoopVariable(multiInstanceExecution, NUMBER_OF_COMPLETED_INSTANCES, 0);\n-    setLoopVariable(multiInstanceExecution, NUMBER_OF_ACTIVE_INSTANCES, 1);\n-    setLoopVariable(childExecution, getCollectionElementIndexVariable(), 0);\n-    logLoopDetails(multiInstanceExecution, \"initialized\", 0, 0, 1, nrOfInstances);\n-\n+    setLoopVariable(multiInstanceExecution,\n+                    NUMBER_OF_INSTANCES,\n+                    nrOfInstances);\n+    setLoopVariable(multiInstanceExecution,\n+                    NUMBER_OF_COMPLETED_INSTANCES,\n+                    0);\n+    setLoopVariable(multiInstanceExecution,\n+                    NUMBER_OF_ACTIVE_INSTANCES,\n+                    1);\n+    setLoopVariable(childExecution,\n+                    getCollectionElementIndexVariable(),\n+                    0);\n+    logLoopDetails(multiInstanceExecution,\n+                   \"initialized\",\n+                   0,\n+                   0,\n+                   1,\n+                   nrOfInstances);\n     executeOriginalBehavior(childExecution, 0);\n     return nrOfInstances;\n   }\n@@ -70,41 +83,46 @@ public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavi\n    * Called when the wrapped {@link ActivityBehavior} calls the {@link AbstractBpmnActivityBehavior#leave(DelegateExecution)} method. Handles the completion of one instance, and executes the logic for\n    * the sequential behavior.\n    */\n+\n   public void leave(DelegateExecution childExecution) {\n     DelegateExecution multiInstanceRootExecution = getMultiInstanceRootExecution(childExecution);\n-    int nrOfInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_INSTANCES);\n-    int loopCounter = getLoopVariable(childExecution, getCollectionElementIndexVariable()) + 1;\n-    int nrOfCompletedInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_COMPLETED_INSTANCES) + 1;\n-    int nrOfActiveInstances = getLoopVariable(multiInstanceRootExecution, NUMBER_OF_ACTIVE_INSTANCES);\n-\n+    int nrOfInstances = getLoopVariable(multiInstanceRootExecution,\n+                                        NUMBER_OF_INSTANCES);\n+    int loopCounter = getLoopVariable(childExecution,\n+                                      getCollectionElementIndexVariable()) + 1;\n+    int nrOfCompletedInstances = getLoopVariable(multiInstanceRootExecution,\n+                                                 NUMBER_OF_COMPLETED_INSTANCES) + 1;\n+    int nrOfActiveInstances = getLoopVariable(multiInstanceRootExecution,\n+                                              NUMBER_OF_ACTIVE_INSTANCES);\n     setLoopVariable(multiInstanceRootExecution, NUMBER_OF_COMPLETED_INSTANCES, nrOfCompletedInstances);\n-    setLoopVariable(childExecution, getCollectionElementIndexVariable(), loopCounter);\n+    setLoopVariable(childExecution,\n+                    getCollectionElementIndexVariable(),\n+                    loopCounter);\n     logLoopDetails(childExecution, \"instance completed\", loopCounter, nrOfCompletedInstances, nrOfActiveInstances, nrOfInstances);\n-\n     updateResultCollection(childExecution, multiInstanceRootExecution);\n-\n     Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) childExecution, null);\n     callActivityEndListeners(childExecution);\n-\n     if (loopCounter >= nrOfInstances || completionConditionSatisfied(multiInstanceRootExecution)) {\n       propagateLoopDataOutputRefToProcessInstance((ExecutionEntity) multiInstanceRootExecution);\n-      removeLocalLoopVariable(childExecution, getCollectionElementIndexVariable());\n+      removeLocalLoopVariable(childExecution,\n+                              getCollectionElementIndexVariable());\n       multiInstanceRootExecution.setMultiInstanceRoot(false);\n       multiInstanceRootExecution.setScope(false);\n       multiInstanceRootExecution.setCurrentFlowElement(childExecution.getCurrentFlowElement());\n-      Context.getCommandContext().getExecutionEntityManager().deleteChildExecutions((ExecutionEntity) multiInstanceRootExecution, \"MI_END\");\n+      Context.getCommandContext().getExecutionEntityManager().deleteChildExecutions((ExecutionEntity) multiInstanceRootExecution,\n+                                                                                    \"MI_END\");\n       dispatchActivityCompletedEvent(childExecution);\n       super.leave(multiInstanceRootExecution);\n-\n     } else {\n       try {\n-\n         if (childExecution.getCurrentFlowElement() instanceof SubProcess) {\n           ExecutionEntityManager executionEntityManager = Context.getCommandContext().getExecutionEntityManager();\n           ExecutionEntity executionToContinue = executionEntityManager.createChildExecution((ExecutionEntity) multiInstanceRootExecution);\n           executionToContinue.setCurrentFlowElement(childExecution.getCurrentFlowElement());\n           executionToContinue.setScope(true);\n-          setLoopVariable(executionToContinue, getCollectionElementIndexVariable(), loopCounter);\n+          setLoopVariable(executionToContinue,\n+                          getCollectionElementIndexVariable(),\n+                          loopCounter);\n           executeOriginalBehavior(executionToContinue, loopCounter);\n         } else {\n           executeOriginalBehavior(childExecution, loopCounter);\n@@ -115,8 +133,9 @@ public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavi\n         // Intermediate Event or Error Event Sub-Process in the process\n         throw error;\n       } catch (Exception e) {\n-        throw new ActivitiException(\"Could not execute inner activity behavior of multi instance behavior\", e);\n+        throw new ActivitiException(\"Could not execute inner activity behavior of multi instance behavior\",\n+                                    e);\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/680/SequentialMultiInstanceBehavior.java\nindex cdb37bd8be3..21e6dbc3917 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/680/SequentialMultiInstanceBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.bpmn.model.Activity;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/680/SequentialMultiInstanceBehavior.java\nindex cdb37bd8be3..21e6dbc3917 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/680/SequentialMultiInstanceBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/680/SequentialMultiInstanceBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.bpmn.model.Activity;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}