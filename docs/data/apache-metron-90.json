{
    "project_name": "apache-metron",
    "error_id": "90",
    "information": {
        "errors": [
            {
                "line": "99",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 115).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      return messages;\n    } catch (Exception e) {\n      String message = \"Unable to parse \" + new String(rawMessage, StandardCharsets.UTF_8) + \": \" + e.getMessage();\n      LOG.error(message, e);\n      throw new IllegalStateException(message, e);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "99",
                    "column": "99",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/90/BasicFireEyeParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/90/BasicFireEyeParser.java\nindex 4316836ffbb..b31ec13c2ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/90/BasicFireEyeParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/90/BasicFireEyeParser.java\n@@ -38,16 +38,15 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-\n public class BasicFireEyeParser extends BasicParser {\n \n   private static final long serialVersionUID = 6328907550159134550L;\n   protected static final Logger LOG = LoggerFactory\n-          .getLogger(MethodHandles.lookup().lookupClass());\n+      .getLogger(MethodHandles.lookup().lookupClass());\n \n \n   private static final String tsRegex = \"([a-zA-Z]{3})\\\\s+(\\\\d+)\\\\s+(\\\\d+\\\\:\\\\d+\\\\:\\\\d+)\"\n-          + \"\\\\s+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\";\n+      + \"\\\\s+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\";\n   private static final Pattern tsPattern = Pattern.compile(tsRegex);\n   private static final String syslogPriorityRegex = \"<[1-9][0-9]*>\";\n   private static final Pattern syslogPriorityPattern = Pattern.compile(syslogPriorityRegex);\n@@ -60,7 +59,8 @@ public class BasicFireEyeParser extends BasicParser {\n   }\n \n   @Override\n-  public void init() {}\n+  public void init() {\n+  }\n \n \n   @Override\n@@ -96,7 +96,8 @@ public class BasicFireEyeParser extends BasicParser {\n       messages.add(toReturn);\n       return messages;\n     } catch (Exception e) {\n-      String message = \"Unable to parse \" + new String(rawMessage, StandardCharsets.UTF_8) + \": \" + e.getMessage();\n+      String message = \"Unable to parse \" + new String(rawMessage, StandardCharsets.UTF_8) + \": \" +\n+          e.getMessage();\n       LOG.error(message, e);\n       throw new IllegalStateException(message, e);\n     }\n@@ -170,13 +171,13 @@ public class BasicFireEyeParser extends BasicParser {\n   private Multimap<String, String> formatMain(String in) {\n     Multimap<String, String> multiMap = ArrayListMultimap.create();\n     String input = in.replaceAll(\"cn3\", \"dst_port\")\n-            .replaceAll(\"cs5\", \"cncHost\").replaceAll(\"proto\", \"protocol\")\n-            .replaceAll(\"rt=\", \"timestamp=\").replaceAll(\"cs1\", \"malware\")\n-            .replaceAll(\"dst=\", \"dst_ip=\")\n-            .replaceAll(\"shost\", \"src_hostname\")\n-            .replaceAll(\"dmac\", \"dst_mac\").replaceAll(\"smac\", \"src_mac\")\n-            .replaceAll(\"spt\", \"src_port\")\n-            .replaceAll(\"\\\\bsrc\\\\b\", \"src_ip\");\n+        .replaceAll(\"cs5\", \"cncHost\").replaceAll(\"proto\", \"protocol\")\n+        .replaceAll(\"rt=\", \"timestamp=\").replaceAll(\"cs1\", \"malware\")\n+        .replaceAll(\"dst=\", \"dst_ip=\")\n+        .replaceAll(\"shost\", \"src_hostname\")\n+        .replaceAll(\"dmac\", \"dst_mac\").replaceAll(\"smac\", \"src_mac\")\n+        .replaceAll(\"spt\", \"src_port\")\n+        .replaceAll(\"\\\\bsrc\\\\b\", \"src_ip\");\n     String[] tokens = input.split(\"\\\\|\");\n \n     if (tokens.length > 0) {\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "column": "21",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "column": "21",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 353).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "column": "12",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/90/BasicFireEyeParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/90/BasicFireEyeParser.java\nindex 4316836ffbb..dfadb757768 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/90/BasicFireEyeParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/90/BasicFireEyeParser.java\n@@ -37,52 +37,41 @@ import org.json.simple.JSONObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n-\n public class BasicFireEyeParser extends BasicParser {\n \n   private static final long serialVersionUID = 6328907550159134550L;\n-  protected static final Logger LOG = LoggerFactory\n-          .getLogger(MethodHandles.lookup().lookupClass());\n-\n-\n-  private static final String tsRegex = \"([a-zA-Z]{3})\\\\s+(\\\\d+)\\\\s+(\\\\d+\\\\:\\\\d+\\\\:\\\\d+)\"\n-          + \"\\\\s+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\";\n+  protected static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private static final String tsRegex = \"([a-zA-Z]{3})\\\\s+(\\\\d+)\\\\s+(\\\\d+\\\\:\\\\d+\\\\:\\\\d+)\" + \"\\\\s+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\";\n   private static final Pattern tsPattern = Pattern.compile(tsRegex);\n   private static final String syslogPriorityRegex = \"<[1-9][0-9]*>\";\n   private static final Pattern syslogPriorityPattern = Pattern.compile(syslogPriorityRegex);\n   private static final String nvRegex = \"([\\\\w\\\\d]+)=([^=]*)(?=\\\\s*\\\\w+=|\\\\s*$) \";\n   private static final Pattern nvPattern = Pattern.compile(nvRegex);\n-\n   @Override\n   public void configure(Map<String, Object> parserConfig) {\n     setReadCharset(parserConfig);\n   }\n \n   @Override\n-  public void init() {}\n-\n+  public void init() {\n+  }\n \n   @Override\n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings( \"unchecked\")\n   public List<JSONObject> parse(byte[] rawMessage) {\n     String toParse;\n     List<JSONObject> messages = new ArrayList<>();\n     try {\n-\n       toParse = new String(rawMessage, getReadCharset());\n \n       // because we support what is basically a malformed syslog 3164 message having\n       // some form of text before the PRIORITY, we need to use the priority as\n       // a delimiter\n       Matcher m = syslogPriorityPattern.matcher(toParse);\n-\n       String delimiter = \"\";\n-\n-      while (m.find()) {\n+      while(m.find()) {\n         delimiter = m.group();\n       }\n-\n       if (!StringUtils.isBlank(delimiter)) {\n         String[] tokens = toParse.split(delimiter);\n         if (tokens.length > 1) {\n@@ -119,9 +108,8 @@ public class BasicFireEyeParser extends BasicParser {\n     return timestamp;\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings( \"unchecked\")\n   private JSONObject parseMessage(String toParse) {\n-\n     JSONObject toReturn = new JSONObject();\n     String[] messageTokens = toParse.split(\"\\\\s+\");\n     String id = messageTokens[4];\n@@ -130,28 +118,21 @@ public class BasicFireEyeParser extends BasicParser {\n     // determine how we can split the message and how many multi part\n     // messages can there be.\n     // The message itself will be stored in the response.\n-\n     String[] tokens = id.split(\"\\\\.\");\n     if (tokens.length == 2) {\n-\n       String[] array = Arrays.copyOfRange(messageTokens, 1, messageTokens.length - 1);\n       String syslog = Joiner.on(\" \").join(array);\n-\n       Multimap<String, String> multiMap = formatMain(syslog);\n-\n       for (String key : multiMap.keySet()) {\n         String value = Joiner.on(\",\").join(multiMap.get(key));\n         toReturn.put(key, value.trim());\n       }\n     }\n-\n     toReturn.put(\"original_string\", toParse);\n-\n     final String ipSrcAddr = (String) toReturn.get(\"dvc\");\n     final String ipSrcPort = (String) toReturn.get(\"src_port\");\n     final String ipDstDddr = (String) toReturn.get(\"dst_ip\");\n     final String ipDstPort = (String) toReturn.get(\"dst_port\");\n-\n     if (ipSrcAddr != null) {\n       toReturn.put(\"ip_src_addr\", ipSrcAddr);\n     }\n@@ -169,25 +150,16 @@ public class BasicFireEyeParser extends BasicParser {\n \n   private Multimap<String, String> formatMain(String in) {\n     Multimap<String, String> multiMap = ArrayListMultimap.create();\n-    String input = in.replaceAll(\"cn3\", \"dst_port\")\n-            .replaceAll(\"cs5\", \"cncHost\").replaceAll(\"proto\", \"protocol\")\n-            .replaceAll(\"rt=\", \"timestamp=\").replaceAll(\"cs1\", \"malware\")\n-            .replaceAll(\"dst=\", \"dst_ip=\")\n-            .replaceAll(\"shost\", \"src_hostname\")\n-            .replaceAll(\"dmac\", \"dst_mac\").replaceAll(\"smac\", \"src_mac\")\n-            .replaceAll(\"spt\", \"src_port\")\n-            .replaceAll(\"\\\\bsrc\\\\b\", \"src_ip\");\n+    String input = in.replaceAll(\"cn3\",\"dst_port\").replaceAll(\"cs5\",\"cncHost\").replaceAll(\"proto\",\"protocol\").replaceAll(\"rt=\",\"timestamp=\").replaceAll(\"cs1\",\"malware\").replaceAll(\"dst=\",\"dst_ip=\").replaceAll(\"shost\",\"src_hostname\").replaceAll(\"dmac\",\"dst_mac\").replaceAll(\"smac\",\"src_mac\").replaceAll(\"spt\",\"src_port\").replaceAll(\"\\\\bsrc\\\\b\",\"src_ip\");\n     String[] tokens = input.split(\"\\\\|\");\n-\n     if (tokens.length > 0) {\n       String message = tokens[tokens.length - 1];\n       Matcher m = nvPattern.matcher(message);\n-\n-      while (m.find()) {\n+      while(m.find()) {\n         String[] str = m.group().split(\"=\");\n         multiMap.put(str[0], str[1]);\n       }\n     }\n     return multiMap;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "column": "27",
                    "severity": "warning",
                    "message": "'{' at column 27 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "98",
                    "column": "28",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'message' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 5, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/90/BasicFireEyeParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/90/BasicFireEyeParser.java\nindex 4316836ffbb..cf8d65e389b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/90/BasicFireEyeParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/90/BasicFireEyeParser.java\n@@ -95,9 +95,9 @@ public class BasicFireEyeParser extends BasicParser {\n       toReturn.put(\"timestamp\", getTimeStamp(toParse));\n       messages.add(toReturn);\n       return messages;\n-    } catch (Exception e) {\n-      String message = \"Unable to parse \" + new String(rawMessage, StandardCharsets.UTF_8) + \": \" + e.getMessage();\n-      LOG.error(message, e);\n+    } catch (Exception e) {String\n+    message = \"Unable to parse \" + new String(rawMessage, StandardCharsets.UTF_8) + \": \" + e.getMessage();\n+     LOG.error(message, e);\n       throw new IllegalStateException(message, e);\n     }\n   }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}