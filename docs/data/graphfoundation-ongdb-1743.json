{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1743",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "52",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1743/SpatialVerifyDeferredConstraint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1743/SpatialVerifyDeferredConstraint.java\nindex 5ba5450dda5..b8088582d75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1743/SpatialVerifyDeferredConstraint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1743/SpatialVerifyDeferredConstraint.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.io.IOException;\n@@ -39,95 +40,94 @@ import org.neo4j.values.storable.Value;\n \n class SpatialVerifyDeferredConstraint\n {\n-    static void verify( PropertyAccessor nodePropertyAccessor, Layout<SpatialSchemaKey,NativeSchemaValue> layout,\n-            GBPTree<SpatialSchemaKey,NativeSchemaValue> tree, SchemaIndexDescriptor descriptor ) throws IndexEntryConflictException\n+  static void verify(PropertyAccessor nodePropertyAccessor, Layout<SpatialSchemaKey, NativeSchemaValue> layout,\n+                     GBPTree<SpatialSchemaKey, NativeSchemaValue> tree, SchemaIndexDescriptor descriptor) throws IndexEntryConflictException\n+  {\n+    SpatialSchemaKey from = layout.newKey();\n+    SpatialSchemaKey to = layout.newKey();\n+    initializeKeys(from, to);\n+    try (RawCursor<Hit<SpatialSchemaKey, NativeSchemaValue>, IOException> seek = tree.seek(from, to))\n     {\n-        SpatialSchemaKey from = layout.newKey();\n-        SpatialSchemaKey to = layout.newKey();\n-        initializeKeys( from, to );\n-        try ( RawCursor<Hit<SpatialSchemaKey,NativeSchemaValue>,IOException> seek = tree.seek( from, to ) )\n-        {\n-            scanAndVerifyDuplicates( nodePropertyAccessor, descriptor, seek );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n+      scanAndVerifyDuplicates(nodePropertyAccessor, descriptor, seek);\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    private static void scanAndVerifyDuplicates( PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor,\n-            RawCursor<Hit<SpatialSchemaKey,NativeSchemaValue>,IOException> seek ) throws IOException, IndexEntryConflictException\n-    {\n-        PrimitiveLongList nodesWithCollidingPoints = Primitive.longList();\n-        long prevRawBits = Long.MIN_VALUE;\n+  private static void scanAndVerifyDuplicates(PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor,\n+                                              RawCursor<Hit<SpatialSchemaKey, NativeSchemaValue>, IOException> seek)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    PrimitiveLongList nodesWithCollidingPoints = Primitive.longList();\n+    long prevRawBits = Long.MIN_VALUE;\n \n-        // Bootstrap starting state\n-        if ( seek.next() )\n-        {\n-            Hit<SpatialSchemaKey,NativeSchemaValue> hit = seek.get();\n-            prevRawBits = hit.key().rawValueBits;\n-            nodesWithCollidingPoints.add( hit.key().getEntityId() );\n-        }\n+    // Bootstrap starting state\n+    if (seek.next())\n+    {\n+      Hit<SpatialSchemaKey, NativeSchemaValue> hit = seek.get();\n+      prevRawBits = hit.key().rawValueBits;\n+      nodesWithCollidingPoints.add(hit.key().getEntityId());\n+    }\n \n-        while ( seek.next() )\n+    while (seek.next())\n+    {\n+      Hit<SpatialSchemaKey, NativeSchemaValue> hit = seek.get();\n+      SpatialSchemaKey key = hit.key();\n+      long currentRawBits = key.rawValueBits;\n+      long currentNodeId = key.getEntityId();\n+      if (prevRawBits != currentRawBits)\n+      {\n+        if (nodesWithCollidingPoints.size() > 1)\n         {\n-            Hit<SpatialSchemaKey,NativeSchemaValue> hit = seek.get();\n-            SpatialSchemaKey key = hit.key();\n-            long currentRawBits = key.rawValueBits;\n-            long currentNodeId = key.getEntityId();\n-            if ( prevRawBits != currentRawBits )\n-            {\n-                if ( nodesWithCollidingPoints.size() > 1 )\n-                {\n-                    verifyConstraintOn( nodesWithCollidingPoints, nodePropertyAccessor, descriptor );\n-                }\n-                nodesWithCollidingPoints.clear();\n-            }\n-            nodesWithCollidingPoints.add( currentNodeId );\n-            prevRawBits = currentRawBits;\n+          verifyConstraintOn(nodesWithCollidingPoints, nodePropertyAccessor, descriptor);\n         }\n+        nodesWithCollidingPoints.clear();\n+      }\n+      nodesWithCollidingPoints.add(currentNodeId);\n+      prevRawBits = currentRawBits;\n+    }\n \n-        // Verify the last batch if needed\n-        if ( nodesWithCollidingPoints.size() > 1 )\n-        {\n-            verifyConstraintOn( nodesWithCollidingPoints, nodePropertyAccessor, descriptor );\n-        }\n+    // Verify the last batch if needed\n+    if (nodesWithCollidingPoints.size() > 1)\n+    {\n+      verifyConstraintOn(nodesWithCollidingPoints, nodePropertyAccessor, descriptor);\n     }\n+  }\n \n-    private static void verifyConstraintOn( PrimitiveLongList nodeIds, PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor )\n-            throws IndexEntryConflictException\n+  private static void verifyConstraintOn(PrimitiveLongList nodeIds, PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor)\n+      throws IndexEntryConflictException\n+  {\n+    Map<Value, Long> points = new HashMap<>();\n+    PrimitiveLongIterator iter = nodeIds.iterator();\n+    try\n     {\n-        Map<Value,Long> points = new HashMap<>();\n-        PrimitiveLongIterator iter = nodeIds.iterator();\n-        try\n+      while (iter.hasNext())\n+      {\n+        long id = iter.next();\n+        Value value = nodePropertyAccessor.getPropertyValue(id, descriptor.schema().getPropertyId());\n+        Long other = points.get(value);\n+        if (other == null)\n         {\n-            while ( iter.hasNext() )\n-            {\n-                long id = iter.next();\n-                Value value = nodePropertyAccessor.getPropertyValue( id, descriptor.schema().getPropertyId() );\n-                Long other = points.get( value );\n-                if ( other == null )\n-                {\n-                    points.put( value, id );\n-                    other = id;\n-                }\n-                if ( other != id )\n-                {\n-                    throw new IndexEntryConflictException( other, id, value );\n-                }\n-            }\n+          points.put(value, id);\n+          other = id;\n         }\n-        catch ( EntityNotFoundException e )\n+        if (other != id)\n         {\n-            throw new RuntimeException( \"Failed to validate uniqueness constraint\", e );\n+          throw new IndexEntryConflictException(other, id, value);\n         }\n-    }\n-\n-    private static void initializeKeys( SpatialSchemaKey from, SpatialSchemaKey to )\n+      }\n+    } catch (EntityNotFoundException e)\n     {\n-        from.initialize( Long.MIN_VALUE );\n-        to.initialize( Long.MAX_VALUE );\n-        from.initValueAsLowest();\n-        to.initValueAsHighest();\n+      throw new RuntimeException(\"Failed to validate uniqueness constraint\", e);\n     }\n+  }\n+\n+  private static void initializeKeys(SpatialSchemaKey from, SpatialSchemaKey to)\n+  {\n+    from.initialize(Long.MIN_VALUE);\n+    to.initialize(Long.MAX_VALUE);\n+    from.initValueAsLowest();\n+    to.initValueAsHighest();\n+  }\n }\n",
            "diff_size": 112
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1743/SpatialVerifyDeferredConstraint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1743/SpatialVerifyDeferredConstraint.java\nindex 5ba5450dda5..d21219777cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1743/SpatialVerifyDeferredConstraint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1743/SpatialVerifyDeferredConstraint.java\n@@ -39,9 +39,8 @@ import org.neo4j.values.storable.Value;\n \n class SpatialVerifyDeferredConstraint\n {\n-    static void verify( PropertyAccessor nodePropertyAccessor, Layout<SpatialSchemaKey,NativeSchemaValue> layout,\n-            GBPTree<SpatialSchemaKey,NativeSchemaValue> tree, SchemaIndexDescriptor descriptor ) throws IndexEntryConflictException\n-    {\n+    static void verify( PropertyAccessor nodePropertyAccessor, Layout<SpatialSchemaKey,NativeSchemaValue> layout, GBPTree<SpatialSchemaKey,NativeSchemaValue> tree, SchemaIndexDescriptor descriptor ) throws IndexEntryConflictException\n+{\n         SpatialSchemaKey from = layout.newKey();\n         SpatialSchemaKey to = layout.newKey();\n         initializeKeys( from, to );\n@@ -55,9 +54,8 @@ class SpatialVerifyDeferredConstraint\n         }\n     }\n \n-    private static void scanAndVerifyDuplicates( PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor,\n-            RawCursor<Hit<SpatialSchemaKey,NativeSchemaValue>,IOException> seek ) throws IOException, IndexEntryConflictException\n-    {\n+    private static void scanAndVerifyDuplicates( PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor, RawCursor<Hit<SpatialSchemaKey,NativeSchemaValue>,IOException> seek ) throws IOException, IndexEntryConflictException\n+{\n         PrimitiveLongList nodesWithCollidingPoints = Primitive.longList();\n         long prevRawBits = Long.MIN_VALUE;\n \n@@ -94,9 +92,8 @@ class SpatialVerifyDeferredConstraint\n         }\n     }\n \n-    private static void verifyConstraintOn( PrimitiveLongList nodeIds, PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor )\n-            throws IndexEntryConflictException\n-    {\n+    private static void verifyConstraintOn( PrimitiveLongList nodeIds, PropertyAccessor nodePropertyAccessor, SchemaIndexDescriptor descriptor ) throws IndexEntryConflictException\n+{\n         Map<Value,Long> points = new HashMap<>();\n         PrimitiveLongIterator iter = nodeIds.iterator();\n         try\n@@ -111,7 +108,8 @@ class SpatialVerifyDeferredConstraint\n                     points.put( value, id );\n                     other = id;\n                 }\n-                if ( other != id )\n+\n+if ( other != id )\n                 {\n                     throw new IndexEntryConflictException( other, id, value );\n                 }\n@@ -130,4 +128,4 @@ class SpatialVerifyDeferredConstraint\n         from.initValueAsLowest();\n         to.initValueAsHighest();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}