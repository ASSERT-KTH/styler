{
    "project_name": "bakdata-conquery",
    "error_id": "318",
    "information": {
        "errors": [
            {
                "line": "63",
                "severity": "error",
                "message": "Indent must use tab characters",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\n\t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n\n\t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n\t\t\tfinal Column column = table.getColumns()[i];",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler/318/PreprocessedHeader.java\nindex 0f06fb0a1a9..31940837382 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler/318/PreprocessedHeader.java\n@@ -60,7 +60,8 @@ public class PreprocessedHeader {\n \t\t}\n \n \t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n-\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+\t\t\t.collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+\n \n \t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n \t\t\tfinal Column column = table.getColumns()[i];\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/intellij/318/PreprocessedHeader.java\nindex 0f06fb0a1a9..e029dafe5fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/intellij/318/PreprocessedHeader.java\n@@ -23,61 +23,60 @@ import lombok.extern.slf4j.Slf4j;\n @AllArgsConstructor\n @Slf4j\n public class PreprocessedHeader {\n-\t/**\n-\t * The name/tag of an import.\n-\t */\n-\tprivate String name;\n+    /**\n+     * The name/tag of an import.\n+     */\n+    private String name;\n \n-\t/**\n-\t * The specific table id to be loaded into.\n-\t */\n-\tprivate String table;\n+    /**\n+     * The specific table id to be loaded into.\n+     */\n+    private String table;\n \n-\t/**\n-\t * Number of rows in the Preprocessed file.\n-\t */\n-\tprivate long rows;\n+    /**\n+     * Number of rows in the Preprocessed file.\n+     */\n+    private long rows;\n \n-\t/**\n-\t * The specific columns and their associated MajorType for validation.\n-\t */\n-\tprivate PPColumn[] columns;\n+    /**\n+     * The specific columns and their associated MajorType for validation.\n+     */\n+    private PPColumn[] columns;\n \n-\t/**\n-\t * A hash to check if any of the underlying files for generating this CQPP has changed.\n-\t */\n-\tprivate int validityHash;\n+    /**\n+     * A hash to check if any of the underlying files for generating this CQPP has changed.\n+     */\n+    private int validityHash;\n \n \n-\t/**\n-\t * Verify that the supplied table matches the preprocessed' data in shape.\n-\t */\n-\tpublic void assertMatch(Table table) {\n-\t\tStringJoiner errors = new StringJoiner(\"\\n\");\n+    /**\n+     * Verify that the supplied table matches the preprocessed' data in shape.\n+     */\n+    public void assertMatch(Table table) {\n+        StringJoiner errors = new StringJoiner(\"\\n\");\n \n-\t\tif (table.getColumns().length != getColumns().length) {\n-\t\t\terrors.add(String.format(\"Length=`%d` does not match table Length=`%d`\", getColumns().length, table.getColumns().length));\n-\t\t}\n+        if (table.getColumns().length != getColumns().length) {\n+            errors.add(String.format(\"Length=`%d` does not match table Length=`%d`\", getColumns().length, table.getColumns().length));\n+        }\n \n-\t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n-\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+        final Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n+            .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n \n-\t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n-\t\t\tfinal Column column = table.getColumns()[i];\n+        for (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n+            final Column column = table.getColumns()[i];\n \n-\t\t\tif(!typesByName.containsKey(column.getName())){\n-\t\t\t\terrors.add(String.format(\"Column[%s] is missing in Import.\", column.getName()));\n-\t\t\t}\n-\t\t\telse if (!typesByName.get(column.getName()).equals(column.getType())) {\n-\t\t\t\terrors.add(String.format(\"Column[%s] Types do not match %s != %s\"\n-\t\t\t\t\t\t, column.getName(),  typesByName.get(column.getName()), column.getType())\n-\t\t\t\t);\n-\t\t\t}\n-\t\t}\n+            if (!typesByName.containsKey(column.getName())) {\n+                errors.add(String.format(\"Column[%s] is missing in Import.\", column.getName()));\n+            } else if (!typesByName.get(column.getName()).equals(column.getType())) {\n+                errors.add(String.format(\"Column[%s] Types do not match %s != %s\"\n+                    , column.getName(), typesByName.get(column.getName()), column.getType())\n+                );\n+            }\n+        }\n \n-\t\tif (errors.length() != 0) {\n-\t\t\tlog.error(errors.toString());\n-\t\t\tthrow new IllegalArgumentException(String.format(\"Headers[%s.%s] do not match Table[%s]. More Info in Logs.\", getTable(), getName(), table.getId()));\n-\t\t}\n-\t}\n+        if (errors.length() != 0) {\n+            log.error(errors.toString());\n+            throw new IllegalArgumentException(String.format(\"Headers[%s.%s] do not match Table[%s]. More Info in Logs.\", getTable(), getName(), table.getId()));\n+        }\n+    }\n }\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "column": "1",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "column": "1",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "column": "1",
                    "severity": "warning",
                    "message": "'typesByName' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/naturalize/318/PreprocessedHeader.java\nindex 0f06fb0a1a9..dc2fe1ee6ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/naturalize/318/PreprocessedHeader.java\n@@ -60,17 +60,16 @@ public class PreprocessedHeader {\n \t\t}\n \n \t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n-\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n-\n-\t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n+.collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+for (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n \t\t\tfinal Column column = table.getColumns()[i];\n-\n-\t\t\tif(!typesByName.containsKey(column.getName())){\n+if(!typesByName.containsKey(column.getName())){\n \t\t\t\terrors.add(String.format(\"Column[%s] is missing in Import.\", column.getName()));\n \t\t\t}\n \t\t\telse if (!typesByName.get(column.getName()).equals(column.getType())) {\n \t\t\t\terrors.add(String.format(\"Column[%s] Types do not match %s != %s\"\n-\t\t\t\t\t\t, column.getName(),  typesByName.get(column.getName()), column.getType())\n+\t\t\t\t\t\t, column.getName(),\n+typesByName.get(column.getName()), column.getType())\n \t\t\t\t);\n \t\t\t}\n \t\t}\n@@ -80,4 +79,4 @@ public class PreprocessedHeader {\n \t\t\tthrow new IllegalArgumentException(String.format(\"Headers[%s.%s] do not match Table[%s]. More Info in Logs.\", getTable(), getName(), table.getId()));\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "column": "2",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "column": "2",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "column": "2",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "column": "2",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "column": "2",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "column": "3",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "column": "3",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "column": "4",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "column": "5",
                    "severity": "warning",
                    "message": "'\"Length=`%d` does not match table Length=`%d`\"' has incorrect indentation level 4, expected level should be 7.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "warning",
                    "message": "'getColumns' has incorrect indentation level 4, expected level should be 7.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "column": "5",
                    "severity": "warning",
                    "message": "'table' has incorrect indentation level 4, expected level should be 7.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "column": "3",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "column": "3",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "column": "3",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "column": "4",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "column": "4",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "column": "4",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "column": "4",
                    "severity": "warning",
                    "message": "'else' has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 9, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "column": "11",
                    "severity": "warning",
                    "message": "'\"Column[%s] Types do not match %s != %s\"' has incorrect indentation level 10, expected level should be 13.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "column": "11",
                    "severity": "warning",
                    "message": "'column' has incorrect indentation level 10, expected level should be 13.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "column": "11",
                    "severity": "warning",
                    "message": "'typesByName' has incorrect indentation level 10, expected level should be 13.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "column": "11",
                    "severity": "warning",
                    "message": "'column' has incorrect indentation level 10, expected level should be 13.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "column": "3",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "column": "3",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "column": "4",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "column": "4",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 3, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "column": "3",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/codebuff/318/PreprocessedHeader.java\nindex 0f06fb0a1a9..9c47623d935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/codebuff/318/PreprocessedHeader.java\n@@ -4,7 +4,6 @@ import java.util.Arrays;\n import java.util.Map;\n import java.util.StringJoiner;\n import java.util.stream.Collectors;\n-\n import com.bakdata.conquery.models.datasets.Column;\n import com.bakdata.conquery.models.datasets.Table;\n import com.bakdata.conquery.models.events.parser.MajorTypeId;\n@@ -18,66 +17,73 @@ import lombok.extern.slf4j.Slf4j;\n  *\n  * @implSpec The Columns and their order must directly match the layout in the data.\n  */\n-@Data\n-@NoArgsConstructor\n-@AllArgsConstructor\n-@Slf4j\n-public class PreprocessedHeader {\n-\t/**\n-\t * The name/tag of an import.\n-\t */\n-\tprivate String name;\n \n-\t/**\n-\t * The specific table id to be loaded into.\n-\t */\n-\tprivate String table;\n-\n-\t/**\n-\t * Number of rows in the Preprocessed file.\n-\t */\n-\tprivate long rows;\n+@Data @NoArgsConstructor @AllArgsConstructor @Slf4j\n+public class PreprocessedHeader {\n+ /**\n+  * The name/tag of an import.\n+  */\n \n-\t/**\n-\t * The specific columns and their associated MajorType for validation.\n-\t */\n-\tprivate PPColumn[] columns;\n+ private String name;\n \n-\t/**\n-\t * A hash to check if any of the underlying files for generating this CQPP has changed.\n-\t */\n-\tprivate int validityHash;\n+ /**\n+  * The specific table id to be loaded into.\n+  */\n+ private String table;\n \n+ /**\n+  * Number of rows in the Preprocessed file.\n+  */\n+ private long rows;\n \n-\t/**\n-\t * Verify that the supplied table matches the preprocessed' data in shape.\n-\t */\n-\tpublic void assertMatch(Table table) {\n-\t\tStringJoiner errors = new StringJoiner(\"\\n\");\n+ /**\n+  * The specific columns and their associated MajorType for validation.\n+  */\n+ private PPColumn[] columns;\n \n-\t\tif (table.getColumns().length != getColumns().length) {\n-\t\t\terrors.add(String.format(\"Length=`%d` does not match table Length=`%d`\", getColumns().length, table.getColumns().length));\n-\t\t}\n+ /**\n+  * A hash to check if any of the underlying files for generating this CQPP has changed.\n+  */\n+ private int validityHash;\n \n-\t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n-\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n \n-\t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n-\t\t\tfinal Column column = table.getColumns()[i];\n+ /**\n+  * Verify that the supplied table matches the preprocessed' data in shape.\n+  */\n \n-\t\t\tif(!typesByName.containsKey(column.getName())){\n-\t\t\t\terrors.add(String.format(\"Column[%s] is missing in Import.\", column.getName()));\n-\t\t\t}\n-\t\t\telse if (!typesByName.get(column.getName()).equals(column.getType())) {\n-\t\t\t\terrors.add(String.format(\"Column[%s] Types do not match %s != %s\"\n-\t\t\t\t\t\t, column.getName(),  typesByName.get(column.getName()), column.getType())\n-\t\t\t\t);\n-\t\t\t}\n-\t\t}\n+ public void assertMatch(Table table) {\n+  StringJoiner errors = new StringJoiner(\"\\n\");\n+  if (table.getColumns().length != getColumns().length) {\n+   errors.add(String.format(\n+    \"Length=`%d` does not match table Length=`%d`\",\n+    getColumns().length,\n+    table.getColumns().length\n+   ));\n+  }\n \n-\t\tif (errors.length() != 0) {\n-\t\t\tlog.error(errors.toString());\n-\t\t\tthrow new IllegalArgumentException(String.format(\"Headers[%s.%s] do not match Table[%s]. More Info in Logs.\", getTable(), getName(), table.getId()));\n-\t\t}\n-\t}\n-}\n+  final Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns()).collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+  for(int i = 0;i<Math.min(table.getColumns().length, getColumns().length);i++) {\n+   final Column column = table.getColumns()[i];\n+   if(!typesByName.containsKey(column.getName())) {\n+    errors.add(String.format(\"Column[%s] is missing in Import.\", column.getName()));\n+   }\n+   else if(!typesByName.get(column.getName()).equals(column.getType())) {\n+         errors.add(String.format(\n+          \"Column[%s] Types do not match %s != %s\",\n+          column.getName(),\n+          typesByName.get(column.getName()),\n+          column.getType()\n+         ));\n+        }\n+  }\n+  if (errors.length() != 0) {\n+   log.error(errors.toString());\n+   throw new IllegalArgumentException(String.format(\n+          \"Headers[%s.%s] do not match Table[%s]. More Info in Logs.\",\n+          getTable(),\n+          getName(),\n+          table.getId()\n+         ));\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_random/318/PreprocessedHeader.java\nindex 0f06fb0a1a9..31940837382 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_random/318/PreprocessedHeader.java\n@@ -60,7 +60,8 @@ public class PreprocessedHeader {\n \t\t}\n \n \t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n-\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+\t\t\t.collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n+\n \n \t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n \t\t\tfinal Column column = table.getColumns()[i];\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_three_grams/318/PreprocessedHeader.java\nindex 0f06fb0a1a9..9f2c6ca08f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/errored/1/318/PreprocessedHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/bakdata-conquery/styler_three_grams/318/PreprocessedHeader.java\n@@ -59,10 +59,8 @@ public class PreprocessedHeader {\n \t\t\terrors.add(String.format(\"Length=`%d` does not match table Length=`%d`\", getColumns().length, table.getColumns().length));\n \t\t}\n \n-\t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns())\n-\t\t\t\t\t\t\t\t\t\t\t\t\t   .collect(Collectors.toMap(PPColumn::getName, PPColumn::getType));\n-\n-\t\tfor (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n+\t\tfinal Map<String, MajorTypeId> typesByName = Arrays.stream(getColumns()).collect(Collectors.toMap(PPColumn::getName, PPColumn::getType))\n+\t; for (int i = 0; i < Math.min(table.getColumns().length, getColumns().length); i++) {\n \t\t\tfinal Column column = table.getColumns()[i];\n \n \t\t\tif(!typesByName.containsKey(column.getName())){\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}