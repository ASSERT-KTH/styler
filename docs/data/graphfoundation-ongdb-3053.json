{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3053",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3053/Protocol.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3053/Protocol.java\nindex f532eb102ba..2674808d4d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3053/Protocol.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3053/Protocol.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.protocol;\n \n import java.util.Objects;\n@@ -26,135 +27,135 @@ import java.util.stream.Stream;\n \n public interface Protocol<IMPL extends Comparable<IMPL>>\n {\n-    String category();\n+  String category();\n+\n+  IMPL implementation();\n+\n+  static <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> Optional<T> find(\n+      T[] values, Category<T> category, IMPL implementation, Function<IMPL, IMPL> normalise)\n+  {\n+    return Stream.of(values)\n+        .filter(protocol -> Objects.equals(protocol.category(), category.canonicalName()))\n+        .filter(protocol -> Objects.equals(normalise.apply(protocol.implementation()), normalise.apply(implementation)))\n+        .findFirst();\n+  }\n+\n+  interface Category<T extends Protocol>\n+  {\n+    String canonicalName();\n+  }\n+\n+  interface ApplicationProtocol extends Protocol<Integer>\n+  {\n+  }\n+\n+  enum ApplicationProtocolCategory implements Category<ApplicationProtocol>\n+  {\n+    RAFT,\n+    CATCHUP;\n+\n+    @Override\n+    public String canonicalName()\n+    {\n+      return name().toLowerCase();\n+    }\n+  }\n \n-    IMPL implementation();\n+  enum ApplicationProtocols implements ApplicationProtocol\n+  {\n+    RAFT_1(ApplicationProtocolCategory.RAFT, 1),\n+    CATCHUP_1(ApplicationProtocolCategory.CATCHUP, 1);\n \n-    static <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> Optional<T> find(\n-            T[] values, Category<T> category, IMPL implementation, Function<IMPL,IMPL> normalise )\n+    private final Integer version;\n+    private final ApplicationProtocolCategory identifier;\n+\n+    ApplicationProtocols(ApplicationProtocolCategory identifier, int version)\n     {\n-        return Stream.of( values )\n-                .filter( protocol -> Objects.equals( protocol.category(), category.canonicalName() ) )\n-                .filter( protocol -> Objects.equals( normalise.apply( protocol.implementation() ), normalise.apply( implementation ) ) )\n-                .findFirst();\n+      this.identifier = identifier;\n+      this.version = version;\n     }\n \n-    interface Category<T extends Protocol>\n+    @Override\n+    public String category()\n     {\n-        String canonicalName();\n+      return identifier.canonicalName();\n     }\n \n-    interface ApplicationProtocol extends Protocol<Integer>\n+    @Override\n+    public Integer implementation()\n     {\n+      return version;\n     }\n \n-    enum ApplicationProtocolCategory implements Category<ApplicationProtocol>\n+    public static Optional<ApplicationProtocol> find(ApplicationProtocolCategory category, Integer version)\n+    {\n+      return Protocol.find(ApplicationProtocols.values(), category, version, Function.identity());\n+    }\n+  }\n+\n+  interface ModifierProtocol extends Protocol<String>\n+  {\n+  }\n+\n+  enum ModifierProtocolCategory implements Category<ModifierProtocol>\n+  {\n+    COMPRESSION,\n+    // Need a second Category for testing purposes.\n+    GRATUITOUS_OBFUSCATION;\n+\n+    @Override\n+    public String canonicalName()\n+    {\n+      return name().toLowerCase();\n+    }\n+  }\n+\n+  enum ModifierProtocols implements ModifierProtocol\n+  {\n+    COMPRESSION_GZIP(ModifierProtocolCategory.COMPRESSION, Implementations.GZIP),\n+    COMPRESSION_SNAPPY(ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY),\n+    COMPRESSION_SNAPPY_VALIDATING(ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY_VALIDATING),\n+    COMPRESSION_LZ4(ModifierProtocolCategory.COMPRESSION, Implementations.LZ4),\n+    COMPRESSION_LZ4_HIGH_COMPRESSION(ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION),\n+    COMPRESSION_LZ4_VALIDATING(ModifierProtocolCategory.COMPRESSION, Implementations.LZ_VALIDATING),\n+    COMPRESSION_LZ4_HIGH_COMPRESSION_VALIDATING(ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION_VALIDATING);\n+\n+    // Should be human writable into a comma separated list\n+    private final String friendlyName;\n+    private final ModifierProtocolCategory identifier;\n+\n+    ModifierProtocols(ModifierProtocolCategory identifier, String friendlyName)\n     {\n-        RAFT,\n-        CATCHUP;\n-\n-        @Override\n-        public String canonicalName()\n-        {\n-            return name().toLowerCase();\n-        }\n+      this.identifier = identifier;\n+      this.friendlyName = friendlyName;\n     }\n \n-    enum ApplicationProtocols implements ApplicationProtocol\n+    @Override\n+    public String implementation()\n     {\n-        RAFT_1( ApplicationProtocolCategory.RAFT, 1 ),\n-        CATCHUP_1( ApplicationProtocolCategory.CATCHUP, 1 );\n-\n-        private final Integer version;\n-        private final ApplicationProtocolCategory identifier;\n-\n-        ApplicationProtocols( ApplicationProtocolCategory identifier, int version )\n-        {\n-            this.identifier = identifier;\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public String category()\n-        {\n-            return identifier.canonicalName();\n-        }\n-\n-        @Override\n-        public Integer implementation()\n-        {\n-            return version;\n-        }\n-\n-        public static Optional<ApplicationProtocol> find( ApplicationProtocolCategory category, Integer version )\n-        {\n-            return Protocol.find( ApplicationProtocols.values(), category, version, Function.identity() );\n-        }\n+      return friendlyName;\n     }\n \n-    interface ModifierProtocol extends Protocol<String>\n+    @Override\n+    public String category()\n     {\n+      return identifier.canonicalName();\n     }\n \n-    enum ModifierProtocolCategory implements Category<ModifierProtocol>\n+    public static Optional<ModifierProtocol> find(ModifierProtocolCategory category, String friendlyName)\n     {\n-        COMPRESSION,\n-        // Need a second Category for testing purposes.\n-        GRATUITOUS_OBFUSCATION;\n-\n-        @Override\n-        public String canonicalName()\n-        {\n-            return name().toLowerCase();\n-        }\n+      return Protocol.find(ModifierProtocols.values(), category, friendlyName, String::toLowerCase);\n     }\n \n-    enum ModifierProtocols implements ModifierProtocol\n+    public static class Implementations\n     {\n-        COMPRESSION_GZIP( ModifierProtocolCategory.COMPRESSION, Implementations.GZIP ),\n-        COMPRESSION_SNAPPY( ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY ),\n-        COMPRESSION_SNAPPY_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY_VALIDATING ),\n-        COMPRESSION_LZ4( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4 ),\n-        COMPRESSION_LZ4_HIGH_COMPRESSION( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION ),\n-        COMPRESSION_LZ4_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.LZ_VALIDATING ),\n-        COMPRESSION_LZ4_HIGH_COMPRESSION_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION_VALIDATING );\n-\n-        // Should be human writable into a comma separated list\n-        private final String friendlyName;\n-        private final ModifierProtocolCategory identifier;\n-\n-        ModifierProtocols( ModifierProtocolCategory identifier, String friendlyName )\n-        {\n-            this.identifier = identifier;\n-            this.friendlyName = friendlyName;\n-        }\n-\n-        @Override\n-        public String implementation()\n-        {\n-            return friendlyName;\n-        }\n-\n-        @Override\n-        public String category()\n-        {\n-            return identifier.canonicalName();\n-        }\n-\n-        public static Optional<ModifierProtocol> find( ModifierProtocolCategory category, String friendlyName )\n-        {\n-            return Protocol.find( ModifierProtocols.values(), category, friendlyName, String::toLowerCase );\n-        }\n-\n-        public static class Implementations\n-        {\n-            public static final String GZIP = \"Gzip\";\n-            public static final String SNAPPY = \"Snappy\";\n-            public static final String SNAPPY_VALIDATING = \"Snappy_validating\";\n-            public static final String LZ4 = \"LZ4\";\n-            public static final String LZ4_HIGH_COMPRESSION = \"LZ4_high_compression\";\n-            public static final String LZ_VALIDATING = \"LZ_validating\";\n-            public static final String LZ4_HIGH_COMPRESSION_VALIDATING = \"LZ4_high_compression_validating\";\n-        }\n+      public static final String GZIP = \"Gzip\";\n+      public static final String SNAPPY = \"Snappy\";\n+      public static final String SNAPPY_VALIDATING = \"Snappy_validating\";\n+      public static final String LZ4 = \"LZ4\";\n+      public static final String LZ4_HIGH_COMPRESSION = \"LZ4_high_compression\";\n+      public static final String LZ_VALIDATING = \"LZ_validating\";\n+      public static final String LZ4_HIGH_COMPRESSION_VALIDATING = \"LZ4_high_compression_validating\";\n     }\n+  }\n }\n",
            "diff_size": 188
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 253).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 700).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3053/Protocol.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3053/Protocol.java\nindex f532eb102ba..92dde5b698d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3053/Protocol.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3053/Protocol.java\n@@ -30,13 +30,9 @@ public interface Protocol<IMPL extends Comparable<IMPL>>\n \n     IMPL implementation();\n \n-    static <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> Optional<T> find(\n-            T[] values, Category<T> category, IMPL implementation, Function<IMPL,IMPL> normalise )\n+    static <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> Optional<T> find( T[] values, Category<T> category, IMPL implementation, Function<IMPL,IMPL> normalise )\n     {\n-        return Stream.of( values )\n-                .filter( protocol -> Objects.equals( protocol.category(), category.canonicalName() ) )\n-                .filter( protocol -> Objects.equals( normalise.apply( protocol.implementation() ), normalise.apply( implementation ) ) )\n-                .findFirst();\n+        return Stream.of( values ).filter( protocol -> Objects.equals( protocol.category(), category.canonicalName() ) ).filter( protocol -> Objects.equals( normalise.apply( protocol.implementation() ), normalise.apply( implementation ) ) ).findFirst();\n     }\n \n     interface Category<T extends Protocol>\n@@ -62,8 +58,7 @@ public interface Protocol<IMPL extends Comparable<IMPL>>\n \n     enum ApplicationProtocols implements ApplicationProtocol\n     {\n-        RAFT_1( ApplicationProtocolCategory.RAFT, 1 ),\n-        CATCHUP_1( ApplicationProtocolCategory.CATCHUP, 1 );\n+        RAFT_1( ApplicationProtocolCategory.RAFT, 1 ), CATCHUP_1( ApplicationProtocolCategory.CATCHUP, 1 );\n \n         private final Integer version;\n         private final ApplicationProtocolCategory identifier;\n@@ -111,13 +106,7 @@ public interface Protocol<IMPL extends Comparable<IMPL>>\n \n     enum ModifierProtocols implements ModifierProtocol\n     {\n-        COMPRESSION_GZIP( ModifierProtocolCategory.COMPRESSION, Implementations.GZIP ),\n-        COMPRESSION_SNAPPY( ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY ),\n-        COMPRESSION_SNAPPY_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY_VALIDATING ),\n-        COMPRESSION_LZ4( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4 ),\n-        COMPRESSION_LZ4_HIGH_COMPRESSION( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION ),\n-        COMPRESSION_LZ4_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.LZ_VALIDATING ),\n-        COMPRESSION_LZ4_HIGH_COMPRESSION_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION_VALIDATING );\n+        COMPRESSION_GZIP( ModifierProtocolCategory.COMPRESSION, Implementations.GZIP ), COMPRESSION_SNAPPY( ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY ), COMPRESSION_SNAPPY_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.SNAPPY_VALIDATING ), COMPRESSION_LZ4( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4 ), COMPRESSION_LZ4_HIGH_COMPRESSION( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION ), COMPRESSION_LZ4_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.LZ_VALIDATING ), COMPRESSION_LZ4_HIGH_COMPRESSION_VALIDATING( ModifierProtocolCategory.COMPRESSION, Implementations.LZ4_HIGH_COMPRESSION_VALIDATING );\n \n         // Should be human writable into a comma separated list\n         private final String friendlyName;\n@@ -149,12 +138,18 @@ public interface Protocol<IMPL extends Comparable<IMPL>>\n         public static class Implementations\n         {\n             public static final String GZIP = \"Gzip\";\n-            public static final String SNAPPY = \"Snappy\";\n-            public static final String SNAPPY_VALIDATING = \"Snappy_validating\";\n-            public static final String LZ4 = \"LZ4\";\n-            public static final String LZ4_HIGH_COMPRESSION = \"LZ4_high_compression\";\n-            public static final String LZ_VALIDATING = \"LZ_validating\";\n-            public static final String LZ4_HIGH_COMPRESSION_VALIDATING = \"LZ4_high_compression_validating\";\n+\n+public static final String SNAPPY = \"Snappy\";\n+\n+public static final String SNAPPY_VALIDATING = \"Snappy_validating\";\n+\n+public static final String LZ4 = \"LZ4\";\n+\n+public static final String LZ4_HIGH_COMPRESSION = \"LZ4_high_compression\";\n+\n+public static final String LZ_VALIDATING = \"LZ_validating\";\n+\n+public static final String LZ4_HIGH_COMPRESSION_VALIDATING = \"LZ4_high_compression_validating\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}