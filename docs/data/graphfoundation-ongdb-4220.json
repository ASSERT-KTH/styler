{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4220",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4220/DataStatistics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4220/DataStatistics.java\nindex dba406eab87..d281f464203 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4220/DataStatistics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4220/DataStatistics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import java.util.ArrayList;\n@@ -36,192 +37,192 @@ import static java.lang.String.format;\n  */\n public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeCount>\n {\n-    private final List<Client> clients = new ArrayList<>();\n-    private int opened;\n-    private RelationshipTypeCount[] typeCounts;\n-    private final long nodeCount;\n-    private final long propertyCount;\n-\n-    public DataStatistics( long nodeCount, long propertyCount, RelationshipTypeCount[] sortedTypes )\n+  private final List<Client> clients = new ArrayList<>();\n+  private int opened;\n+  private RelationshipTypeCount[] typeCounts;\n+  private final long nodeCount;\n+  private final long propertyCount;\n+\n+  public DataStatistics(long nodeCount, long propertyCount, RelationshipTypeCount[] sortedTypes)\n+  {\n+    this.nodeCount = nodeCount;\n+    this.propertyCount = propertyCount;\n+    this.typeCounts = sortedTypes;\n+  }\n+\n+  @Override\n+  public Iterator<RelationshipTypeCount> iterator()\n+  {\n+    return Iterators.iterator(typeCounts);\n+  }\n+\n+  public int getNumberOfRelationshipTypes()\n+  {\n+    return typeCounts.length;\n+  }\n+\n+  public synchronized Client newClient()\n+  {\n+    Client client = new Client();\n+    clients.add(client);\n+    opened++;\n+    return client;\n+  }\n+\n+  private synchronized void closeClient()\n+  {\n+    if (--opened == 0)\n     {\n-        this.nodeCount = nodeCount;\n-        this.propertyCount = propertyCount;\n-        this.typeCounts = sortedTypes;\n+      int highestTypeId = 0;\n+      for (Client client : clients)\n+      {\n+        highestTypeId = max(highestTypeId, client.highestTypeId);\n+      }\n+\n+      long[] counts = new long[highestTypeId + 1];\n+      for (Client client : clients)\n+      {\n+        client.addTo(counts);\n+      }\n+      typeCounts = new RelationshipTypeCount[counts.length];\n+      for (int i = 0; i < counts.length; i++)\n+      {\n+        typeCounts[i] = new RelationshipTypeCount(i, counts[i]);\n+      }\n+      Arrays.sort(typeCounts);\n     }\n+  }\n \n-    @Override\n-    public Iterator<RelationshipTypeCount> iterator()\n+  public static class RelationshipTypeCount implements Comparable<RelationshipTypeCount>\n+  {\n+    private final int typeId;\n+    private final long count;\n+\n+    public RelationshipTypeCount(int typeId, long count)\n     {\n-        return Iterators.iterator( typeCounts );\n+      this.typeId = typeId;\n+      this.count = count;\n     }\n \n-    public int getNumberOfRelationshipTypes()\n+    public int getTypeId()\n     {\n-        return typeCounts.length;\n+      return typeId;\n     }\n \n-    public synchronized Client newClient()\n+    public long getCount()\n     {\n-        Client client = new Client();\n-        clients.add( client );\n-        opened++;\n-        return client;\n+      return count;\n     }\n \n-    private synchronized void closeClient()\n+    @Override\n+    public int compareTo(RelationshipTypeCount o)\n     {\n-        if ( --opened == 0 )\n-        {\n-            int highestTypeId = 0;\n-            for ( Client client : clients )\n-            {\n-                highestTypeId = max( highestTypeId, client.highestTypeId );\n-            }\n-\n-            long[] counts = new long[highestTypeId + 1];\n-            for ( Client client : clients )\n-            {\n-                client.addTo( counts );\n-            }\n-            typeCounts = new RelationshipTypeCount[counts.length];\n-            for ( int i = 0; i < counts.length; i++ )\n-            {\n-                typeCounts[i] = new RelationshipTypeCount( i, counts[i] );\n-            }\n-            Arrays.sort( typeCounts );\n-        }\n+      return Long.compare(count, o.count);\n     }\n \n-    public static class RelationshipTypeCount implements Comparable<RelationshipTypeCount>\n+    @Override\n+    public int hashCode()\n     {\n-        private final int typeId;\n-        private final long count;\n-\n-        public RelationshipTypeCount( int typeId, long count )\n-        {\n-            this.typeId = typeId;\n-            this.count = count;\n-        }\n-\n-        public int getTypeId()\n-        {\n-            return typeId;\n-        }\n-\n-        public long getCount()\n-        {\n-            return count;\n-        }\n-\n-        @Override\n-        public int compareTo( RelationshipTypeCount o )\n-        {\n-            return Long.compare( count, o.count );\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            final int prime = 31;\n-            int result = 1;\n-            result = prime * result + (int) (count ^ (count >>> 32));\n-            result = prime * result + typeId;\n-            return result;\n-        }\n-\n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            if ( this == obj )\n-            {\n-                return true;\n-            }\n-            if ( obj == null || getClass() != obj.getClass() )\n-            {\n-                return false;\n-            }\n-            RelationshipTypeCount other = (RelationshipTypeCount) obj;\n-            return count == other.count && typeId == other.typeId;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return format( \"%s[type:%d, count:%d]\", getClass().getSimpleName(), typeId, count );\n-        }\n+      final int prime = 31;\n+      int result = 1;\n+      result = prime * result + (int) (count ^ (count >>> 32));\n+      result = prime * result + typeId;\n+      return result;\n     }\n \n-    public class Client implements AutoCloseable\n+    @Override\n+    public boolean equals(Object obj)\n     {\n-        private long[] counts = new long[8]; // index is relationship type id\n-        private int highestTypeId;\n-\n-        public void increment( int typeId )\n-        {\n-            if ( typeId >= counts.length )\n-            {\n-                counts = Arrays.copyOf( counts, max( counts.length * 2, typeId + 1 ) );\n-            }\n-            counts[typeId]++;\n-            if ( typeId > highestTypeId )\n-            {\n-                highestTypeId = typeId;\n-            }\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            closeClient();\n-        }\n-\n-        private void addTo( long[] counts )\n-        {\n-            for ( int i = 0; i <= highestTypeId; i++ )\n-            {\n-                counts[i] += this.counts[i];\n-            }\n-        }\n+      if (this == obj)\n+      {\n+        return true;\n+      }\n+      if (obj == null || getClass() != obj.getClass())\n+      {\n+        return false;\n+      }\n+      RelationshipTypeCount other = (RelationshipTypeCount) obj;\n+      return count == other.count && typeId == other.typeId;\n     }\n \n-    public RelationshipTypeCount get( int index )\n+    @Override\n+    public String toString()\n     {\n-        return typeCounts[index];\n+      return format(\"%s[type:%d, count:%d]\", getClass().getSimpleName(), typeId, count);\n     }\n+  }\n+\n+  public class Client implements AutoCloseable\n+  {\n+    private long[] counts = new long[8]; // index is relationship type id\n+    private int highestTypeId;\n \n-    public PrimitiveIntSet types( int startingFromType, int upToType )\n+    public void increment(int typeId)\n     {\n-        PrimitiveIntSet set = Primitive.intSet( (upToType - startingFromType) * 2 );\n-        for ( int i = startingFromType; i < upToType; i++ )\n-        {\n-            set.add( get( i ).getTypeId() );\n-        }\n-        return set;\n+      if (typeId >= counts.length)\n+      {\n+        counts = Arrays.copyOf(counts, max(counts.length * 2, typeId + 1));\n+      }\n+      counts[typeId]++;\n+      if (typeId > highestTypeId)\n+      {\n+        highestTypeId = typeId;\n+      }\n     }\n \n-    public long getNodeCount()\n+    @Override\n+    public void close()\n     {\n-        return nodeCount;\n+      closeClient();\n     }\n \n-    public long getPropertyCount()\n+    private void addTo(long[] counts)\n     {\n-        return propertyCount;\n+      for (int i = 0; i <= highestTypeId; i++)\n+      {\n+        counts[i] += this.counts[i];\n+      }\n     }\n+  }\n+\n+  public RelationshipTypeCount get(int index)\n+  {\n+    return typeCounts[index];\n+  }\n \n-    public long getRelationshipCount()\n+  public PrimitiveIntSet types(int startingFromType, int upToType)\n+  {\n+    PrimitiveIntSet set = Primitive.intSet((upToType - startingFromType) * 2);\n+    for (int i = startingFromType; i < upToType; i++)\n     {\n-        long sum = 0;\n-        for ( RelationshipTypeCount type : typeCounts )\n-        {\n-            sum += type.count;\n-        }\n-        return sum;\n+      set.add(get(i).getTypeId());\n     }\n-\n-    @Override\n-    public String toString()\n+    return set;\n+  }\n+\n+  public long getNodeCount()\n+  {\n+    return nodeCount;\n+  }\n+\n+  public long getPropertyCount()\n+  {\n+    return propertyCount;\n+  }\n+\n+  public long getRelationshipCount()\n+  {\n+    long sum = 0;\n+    for (RelationshipTypeCount type : typeCounts)\n     {\n-        return format( \"Imported:%n  %d nodes%n  %d relationships%n  %d properties\", nodeCount, getRelationshipCount(), propertyCount );\n+      sum += type.count;\n     }\n+    return sum;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"Imported:%n  %d nodes%n  %d relationships%n  %d properties\", nodeCount, getRelationshipCount(), propertyCount);\n+  }\n }\n",
            "diff_size": 248
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "128",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4220/DataStatistics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4220/DataStatistics.java\nindex dba406eab87..79491a264ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4220/DataStatistics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4220/DataStatistics.java\n@@ -83,7 +83,8 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n             {\n                 client.addTo( counts );\n             }\n-            typeCounts = new RelationshipTypeCount[counts.length];\n+\n+typeCounts = new RelationshipTypeCount[counts.length];\n             for ( int i = 0; i < counts.length; i++ )\n             {\n                 typeCounts[i] = new RelationshipTypeCount( i, counts[i] );\n@@ -124,7 +125,7 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n         {\n             final int prime = 31;\n             int result = 1;\n-            result = prime * result + (int) (count ^ (count >>> 32));\n+            result = prime * result + ( int) ( count ^ ( count >>> 32 ));\n             result = prime * result + typeId;\n             return result;\n         }\n@@ -136,11 +137,13 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n             {\n                 return true;\n             }\n-            if ( obj == null || getClass() != obj.getClass() )\n+\n+if ( obj == null || getClass() != obj.getClass() )\n             {\n                 return false;\n             }\n-            RelationshipTypeCount other = (RelationshipTypeCount) obj;\n+\n+RelationshipTypeCount other = (RelationshipTypeCount) obj;\n             return count == other.count && typeId == other.typeId;\n         }\n \n@@ -162,8 +165,9 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n             {\n                 counts = Arrays.copyOf( counts, max( counts.length * 2, typeId + 1 ) );\n             }\n-            counts[typeId]++;\n-            if ( typeId > highestTypeId )\n+\n+counts[typeId]++;\n+            if ( typeId> highestTypeId )\n             {\n                 highestTypeId = typeId;\n             }\n@@ -191,12 +195,13 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n \n     public PrimitiveIntSet types( int startingFromType, int upToType )\n     {\n-        PrimitiveIntSet set = Primitive.intSet( (upToType - startingFromType) * 2 );\n+        PrimitiveIntSet set = Primitive.intSet( ( upToType - startingFromType) * 2 );\n         for ( int i = startingFromType; i < upToType; i++ )\n         {\n             set.add( get( i ).getTypeId() );\n         }\n-        return set;\n+\n+return set;\n     }\n \n     public long getNodeCount()\n@@ -216,7 +221,8 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n         {\n             sum += type.count;\n         }\n-        return sum;\n+\n+return sum;\n     }\n \n     @Override\n@@ -224,4 +230,4 @@ public class DataStatistics implements Iterable<DataStatistics.RelationshipTypeC\n     {\n         return format( \"Imported:%n  %d nodes%n  %d relationships%n  %d properties\", nodeCount, getRelationshipCount(), propertyCount );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}