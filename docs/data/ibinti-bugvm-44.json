{
    "project_name": "ibinti-bugvm",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "69",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 97).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * Parses the value.\n     *\n     * @return an array of {@link HeaderElement} entries, may be empty, but is never {@code null}\n     * @throws ParseException in case of a parsing error\n     */\n    HeaderElement[] getElements() throws ParseException;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/44/Header.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/44/Header.java\nindex 2e5d4e391fe..a0734ebbe2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/44/Header.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/44/Header.java\n@@ -36,39 +36,39 @@ package org.apache.http;\n  * are case-insensitive. The field value MAY be preceded by any amount\n  * of LWS, though a single SP is preferred.\n  *\n- *<pre>\n+ * <pre>\n  *     message-header = field-name \":\" [ field-value ]\n  *     field-name     = token\n  *     field-value    = *( field-content | LWS )\n  *     field-content  = &lt;the OCTETs making up the field-value\n  *                      and consisting of either *TEXT or combinations\n  *                      of token, separators, and quoted-string&gt;\n- *</pre>\n+ * </pre>\n  *\n  * @since 4.0\n  */\n public interface Header {\n \n-    /**\n-     * Get the name of the Header.\n-     *\n-     * @return the name of the Header,  never {@code null}\n-     */\n-    String getName();\n+  /**\n+   * Get the name of the Header.\n+   *\n+   * @return the name of the Header,  never {@code null}\n+   */\n+  String getName();\n \n-    /**\n-     * Get the value of the Header.\n-     *\n-     * @return the value of the Header,  may be {@code null}\n-     */\n-    String getValue();\n+  /**\n+   * Get the value of the Header.\n+   *\n+   * @return the value of the Header,  may be {@code null}\n+   */\n+  String getValue();\n \n-    /**\n-     * Parses the value.\n-     *\n-     * @return an array of {@link HeaderElement} entries, may be empty, but is never {@code null}\n-     * @throws ParseException in case of a parsing error\n-     */\n-    HeaderElement[] getElements() throws ParseException;\n+  /**\n+   * Parses the value.\n+   *\n+   * @return an array of {@link HeaderElement} entries, may be empty, but is never {@code null}\n+   * @throws ParseException in case of a parsing error\n+   */\n+  HeaderElement[] getElements() throws ParseException;\n \n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/44/Header.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/44/Header.java\nindex 2e5d4e391fe..41c6cbf3432 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/44/Header.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/44/Header.java\n@@ -71,4 +71,4 @@ public interface Header {\n      */\n     HeaderElement[] getElements() throws ParseException;\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/44/Header.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/44/Header.java\nindex 2e5d4e391fe..73f4d686815 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/44/Header.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/44/Header.java\n@@ -47,6 +47,8 @@ package org.apache.http;\n  *\n  * @since 4.0\n  */\n+\n+\n public interface Header {\n \n     /**\n@@ -54,6 +56,8 @@ public interface Header {\n      *\n      * @return the name of the Header,  never {@code null}\n      */\n+\n+\n     String getName();\n \n     /**\n@@ -61,6 +65,8 @@ public interface Header {\n      *\n      * @return the value of the Header,  may be {@code null}\n      */\n+\n+\n     String getValue();\n \n     /**\n@@ -69,6 +75,8 @@ public interface Header {\n      * @return an array of {@link HeaderElement} entries, may be empty, but is never {@code null}\n      * @throws ParseException in case of a parsing error\n      */\n+\n+\n     HeaderElement[] getElements() throws ParseException;\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}