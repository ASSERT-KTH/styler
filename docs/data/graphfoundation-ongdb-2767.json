{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2767",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "163",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2767/RelationshipDeleter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2767/RelationshipDeleter.java\nindex 7c3882d0139..85fa37babe3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2767/RelationshipDeleter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2767/RelationshipDeleter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import org.neo4j.kernel.impl.locking.LockTracer;\n@@ -34,214 +35,211 @@ import static org.neo4j.kernel.impl.transaction.state.RelationshipCreator.relCou\n \n public class RelationshipDeleter\n {\n-    private final RelationshipGroupGetter relGroupGetter;\n-    private final PropertyDeleter propertyChainDeleter;\n-\n-    public RelationshipDeleter( RelationshipGroupGetter relGroupGetter, PropertyDeleter propertyChainDeleter )\n+  private final RelationshipGroupGetter relGroupGetter;\n+  private final PropertyDeleter propertyChainDeleter;\n+\n+  public RelationshipDeleter(RelationshipGroupGetter relGroupGetter, PropertyDeleter propertyChainDeleter)\n+  {\n+    this.relGroupGetter = relGroupGetter;\n+    this.propertyChainDeleter = propertyChainDeleter;\n+  }\n+\n+  /**\n+   * Deletes a relationship by its id, returning its properties which are now\n+   * removed. It is assumed that the nodes it connects have already been\n+   * deleted in this\n+   * transaction.\n+   *\n+   * @param id The id of the relationship to delete.\n+   */\n+  public void relDelete(long id, RecordAccessSet recordChanges, ResourceLocker locks)\n+  {\n+    RelationshipRecord record = recordChanges.getRelRecords().getOrLoad(id, null).forChangingLinkage();\n+    propertyChainDeleter.deletePropertyChain(record, recordChanges.getPropertyRecords());\n+    disconnectRelationship(record, recordChanges, locks);\n+    updateNodesForDeletedRelationship(record, recordChanges, locks);\n+    record.setInUse(false);\n+  }\n+\n+  private void disconnectRelationship(RelationshipRecord rel, RecordAccessSet recordChangeSet, ResourceLocker locks)\n+  {\n+    disconnect(rel, RelationshipConnection.START_NEXT, recordChangeSet.getRelRecords(), locks);\n+    disconnect(rel, RelationshipConnection.START_PREV, recordChangeSet.getRelRecords(), locks);\n+    disconnect(rel, RelationshipConnection.END_NEXT, recordChangeSet.getRelRecords(), locks);\n+    disconnect(rel, RelationshipConnection.END_PREV, recordChangeSet.getRelRecords(), locks);\n+  }\n+\n+  private void disconnect(RelationshipRecord rel, RelationshipConnection pointer,\n+                          RecordAccess<RelationshipRecord, Void> relChanges, ResourceLocker locks)\n+  {\n+    long otherRelId = pointer.otherSide().get(rel);\n+    if (otherRelId == Record.NO_NEXT_RELATIONSHIP.intValue())\n     {\n-        this.relGroupGetter = relGroupGetter;\n-        this.propertyChainDeleter = propertyChainDeleter;\n+      return;\n     }\n \n-    /**\n-     * Deletes a relationship by its id, returning its properties which are now\n-     * removed. It is assumed that the nodes it connects have already been\n-     * deleted in this\n-     * transaction.\n-     *\n-     * @param id The id of the relationship to delete.\n-     */\n-    public void relDelete( long id, RecordAccessSet recordChanges, ResourceLocker locks )\n+    locks.acquireExclusive(LockTracer.NONE, ResourceTypes.RELATIONSHIP, otherRelId);\n+    RelationshipRecord otherRel = relChanges.getOrLoad(otherRelId, null).forChangingLinkage();\n+    boolean changed = false;\n+    long newId = pointer.get(rel);\n+    boolean newIsFirst = pointer.isFirstInChain(rel);\n+    if (otherRel.getFirstNode() == pointer.compareNode(rel))\n     {\n-        RelationshipRecord record = recordChanges.getRelRecords().getOrLoad( id, null ).forChangingLinkage();\n-        propertyChainDeleter.deletePropertyChain( record, recordChanges.getPropertyRecords() );\n-        disconnectRelationship( record, recordChanges, locks );\n-        updateNodesForDeletedRelationship( record, recordChanges, locks );\n-        record.setInUse( false );\n+      pointer.start().set(otherRel, newId, newIsFirst);\n+      changed = true;\n     }\n-\n-    private void disconnectRelationship( RelationshipRecord rel, RecordAccessSet recordChangeSet, ResourceLocker locks )\n+    if (otherRel.getSecondNode() == pointer.compareNode(rel))\n     {\n-        disconnect( rel, RelationshipConnection.START_NEXT, recordChangeSet.getRelRecords(), locks );\n-        disconnect( rel, RelationshipConnection.START_PREV, recordChangeSet.getRelRecords(), locks );\n-        disconnect( rel, RelationshipConnection.END_NEXT, recordChangeSet.getRelRecords(), locks );\n-        disconnect( rel, RelationshipConnection.END_PREV, recordChangeSet.getRelRecords(), locks );\n+      pointer.end().set(otherRel, newId, newIsFirst);\n+      changed = true;\n     }\n-\n-    private void disconnect( RelationshipRecord rel, RelationshipConnection pointer,\n-            RecordAccess<RelationshipRecord, Void> relChanges, ResourceLocker locks )\n+    if (!changed)\n     {\n-        long otherRelId = pointer.otherSide().get( rel );\n-        if ( otherRelId == Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {\n-            return;\n-        }\n-\n-        locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, otherRelId );\n-        RelationshipRecord otherRel = relChanges.getOrLoad( otherRelId, null ).forChangingLinkage();\n-        boolean changed = false;\n-        long newId = pointer.get( rel );\n-        boolean newIsFirst = pointer.isFirstInChain( rel );\n-        if ( otherRel.getFirstNode() == pointer.compareNode( rel ) )\n-        {\n-            pointer.start().set( otherRel, newId, newIsFirst );\n-            changed = true;\n-        }\n-        if ( otherRel.getSecondNode() == pointer.compareNode( rel ) )\n-        {\n-            pointer.end().set( otherRel, newId, newIsFirst );\n-            changed = true;\n-        }\n-        if ( !changed )\n-        {\n-            throw new InvalidRecordException( otherRel + \" don't match \" + rel );\n-        }\n+      throw new InvalidRecordException(otherRel + \" don't match \" + rel);\n     }\n+  }\n \n-    private void updateNodesForDeletedRelationship( RelationshipRecord rel, RecordAccessSet recordChanges,\n-            ResourceLocker locks )\n-    {\n-        RecordProxy<NodeRecord, Void> startNodeChange =\n-                recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null );\n-        RecordProxy<NodeRecord, Void> endNodeChange =\n-                recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null );\n+  private void updateNodesForDeletedRelationship(RelationshipRecord rel, RecordAccessSet recordChanges,\n+                                                 ResourceLocker locks)\n+  {\n+    RecordProxy<NodeRecord, Void> startNodeChange =\n+        recordChanges.getNodeRecords().getOrLoad(rel.getFirstNode(), null);\n+    RecordProxy<NodeRecord, Void> endNodeChange =\n+        recordChanges.getNodeRecords().getOrLoad(rel.getSecondNode(), null);\n \n-        NodeRecord startNode = recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null ).forReadingLinkage();\n-        NodeRecord endNode = recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null ).forReadingLinkage();\n-        boolean loop = startNode.getId() == endNode.getId();\n-\n-        if ( !startNode.isDense() )\n-        {\n-            if ( rel.isFirstInFirstChain() )\n-            {\n-                startNode = startNodeChange.forChangingLinkage();\n-                startNode.setNextRel( rel.getFirstNextRel() );\n-            }\n-            decrementTotalRelationshipCount( startNode.getId(), rel, startNode.getNextRel(),\n-                    recordChanges.getRelRecords(), locks );\n-        }\n-        else\n-        {\n-            RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n-                    relGroupGetter.getRelationshipGroup( startNode, rel.getType(),\n-                            recordChanges.getRelGroupRecords() ).group();\n-            assert groupChange != null : \"Relationship group \" + rel.getType() + \" should have existed here\";\n-            RelationshipGroupRecord group = groupChange.forReadingData();\n-            DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, startNode );\n-            if ( rel.isFirstInFirstChain() )\n-            {\n-                group = groupChange.forChangingData();\n-                dir.setNextRel( group, rel.getFirstNextRel() );\n-                if ( groupIsEmpty( group ) )\n-                {\n-                    deleteGroup( startNodeChange, group, recordChanges.getRelGroupRecords() );\n-                }\n-            }\n-            decrementTotalRelationshipCount( startNode.getId(), rel, dir.getNextRel( group ),\n-                    recordChanges.getRelRecords(), locks );\n-        }\n+    NodeRecord startNode = recordChanges.getNodeRecords().getOrLoad(rel.getFirstNode(), null).forReadingLinkage();\n+    NodeRecord endNode = recordChanges.getNodeRecords().getOrLoad(rel.getSecondNode(), null).forReadingLinkage();\n+    boolean loop = startNode.getId() == endNode.getId();\n \n-        if ( !endNode.isDense() )\n-        {\n-            if ( rel.isFirstInSecondChain() )\n-            {\n-                endNode = endNodeChange.forChangingLinkage();\n-                endNode.setNextRel( rel.getSecondNextRel() );\n-            }\n-            if ( !loop )\n-            {\n-                decrementTotalRelationshipCount( endNode.getId(), rel, endNode.getNextRel(),\n-                        recordChanges.getRelRecords(), locks );\n-            }\n-        }\n-        else\n+    if (!startNode.isDense())\n+    {\n+      if (rel.isFirstInFirstChain())\n+      {\n+        startNode = startNodeChange.forChangingLinkage();\n+        startNode.setNextRel(rel.getFirstNextRel());\n+      }\n+      decrementTotalRelationshipCount(startNode.getId(), rel, startNode.getNextRel(),\n+          recordChanges.getRelRecords(), locks);\n+    } else\n+    {\n+      RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n+          relGroupGetter.getRelationshipGroup(startNode, rel.getType(),\n+              recordChanges.getRelGroupRecords()).group();\n+      assert groupChange != null : \"Relationship group \" + rel.getType() + \" should have existed here\";\n+      RelationshipGroupRecord group = groupChange.forReadingData();\n+      DirectionWrapper dir = DirectionIdentifier.wrapDirection(rel, startNode);\n+      if (rel.isFirstInFirstChain())\n+      {\n+        group = groupChange.forChangingData();\n+        dir.setNextRel(group, rel.getFirstNextRel());\n+        if (groupIsEmpty(group))\n         {\n-            RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n-                    relGroupGetter.getRelationshipGroup( endNode, rel.getType(),\n-                            recordChanges.getRelGroupRecords() ).group();\n-            DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, endNode );\n-            assert groupChange != null || loop : \"Group has been deleted\";\n-            if ( groupChange != null )\n-            {\n-                RelationshipGroupRecord group = groupChange.forReadingData();\n-                if ( rel.isFirstInSecondChain() )\n-                {\n-                    group = groupChange.forChangingData();\n-                    dir.setNextRel( group, rel.getSecondNextRel() );\n-                    if ( groupIsEmpty( group ) )\n-                    {\n-                        deleteGroup( endNodeChange, group, recordChanges.getRelGroupRecords() );\n-                    }\n-                }\n-            } // Else this is a loop-rel and the group was deleted when dealing with the start node\n-            if ( !loop )\n-            {\n-                decrementTotalRelationshipCount( endNode.getId(), rel, dir.getNextRel( groupChange.forChangingData() ),\n-                        recordChanges.getRelRecords(), locks );\n-            }\n+          deleteGroup(startNodeChange, group, recordChanges.getRelGroupRecords());\n         }\n+      }\n+      decrementTotalRelationshipCount(startNode.getId(), rel, dir.getNextRel(group),\n+          recordChanges.getRelRecords(), locks);\n     }\n \n-    private boolean decrementTotalRelationshipCount( long nodeId, RelationshipRecord rel, long firstRelId,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+    if (!endNode.isDense())\n     {\n-        if ( firstRelId == Record.NO_PREV_RELATIONSHIP.intValue() )\n-        {\n-            return true;\n-        }\n-        boolean firstInChain = relIsFirstInChain( nodeId, rel );\n-        if ( !firstInChain )\n-        {\n-            locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, firstRelId );\n-        }\n-        RelationshipRecord firstRel = relRecords.getOrLoad( firstRelId, null ).forChangingLinkage();\n-        if ( nodeId == firstRel.getFirstNode() )\n-        {\n-            firstRel.setFirstPrevRel( firstInChain ? relCount( nodeId, rel ) - 1 : relCount( nodeId, firstRel ) - 1 );\n-            firstRel.setFirstInFirstChain( true );\n-        }\n-        if ( nodeId == firstRel.getSecondNode() )\n+      if (rel.isFirstInSecondChain())\n+      {\n+        endNode = endNodeChange.forChangingLinkage();\n+        endNode.setNextRel(rel.getSecondNextRel());\n+      }\n+      if (!loop)\n+      {\n+        decrementTotalRelationshipCount(endNode.getId(), rel, endNode.getNextRel(),\n+            recordChanges.getRelRecords(), locks);\n+      }\n+    } else\n+    {\n+      RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n+          relGroupGetter.getRelationshipGroup(endNode, rel.getType(),\n+              recordChanges.getRelGroupRecords()).group();\n+      DirectionWrapper dir = DirectionIdentifier.wrapDirection(rel, endNode);\n+      assert groupChange != null || loop : \"Group has been deleted\";\n+      if (groupChange != null)\n+      {\n+        RelationshipGroupRecord group = groupChange.forReadingData();\n+        if (rel.isFirstInSecondChain())\n         {\n-            firstRel.setSecondPrevRel( firstInChain ? relCount( nodeId, rel ) - 1 : relCount( nodeId, firstRel ) - 1 );\n-            firstRel.setFirstInSecondChain( true );\n+          group = groupChange.forChangingData();\n+          dir.setNextRel(group, rel.getSecondNextRel());\n+          if (groupIsEmpty(group))\n+          {\n+            deleteGroup(endNodeChange, group, recordChanges.getRelGroupRecords());\n+          }\n         }\n-        return false;\n+      } // Else this is a loop-rel and the group was deleted when dealing with the start node\n+      if (!loop)\n+      {\n+        decrementTotalRelationshipCount(endNode.getId(), rel, dir.getNextRel(groupChange.forChangingData()),\n+            recordChanges.getRelRecords(), locks);\n+      }\n     }\n+  }\n \n-    private void deleteGroup( RecordProxy<NodeRecord, Void> nodeChange,\n-                              RelationshipGroupRecord group,\n-                              RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords )\n+  private boolean decrementTotalRelationshipCount(long nodeId, RelationshipRecord rel, long firstRelId,\n+                                                  RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks)\n+  {\n+    if (firstRelId == Record.NO_PREV_RELATIONSHIP.intValue())\n     {\n-        long previous = group.getPrev();\n-        long next = group.getNext();\n-        if ( previous == Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {   // This is the first one, just point the node to the next group\n-            nodeChange.forChangingLinkage().setNextRel( next );\n-        }\n-        else\n-        {   // There are others before it, point the previous to the next group\n-            RelationshipGroupRecord previousRecord = relGroupRecords.getOrLoad( previous, null ).forChangingLinkage();\n-            previousRecord.setNext( next );\n-        }\n-\n-        if ( next != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {   // There are groups after this one, point that next group to the previous of the group to be deleted\n-            RelationshipGroupRecord nextRecord = relGroupRecords.getOrLoad( next, null ).forChangingLinkage();\n-            nextRecord.setPrev( previous );\n-        }\n-        group.setInUse( false );\n+      return true;\n     }\n-\n-    private boolean groupIsEmpty( RelationshipGroupRecord group )\n+    boolean firstInChain = relIsFirstInChain(nodeId, rel);\n+    if (!firstInChain)\n     {\n-        return group.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n-                group.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n-                group.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue();\n+      locks.acquireExclusive(LockTracer.NONE, ResourceTypes.RELATIONSHIP, firstRelId);\n     }\n-\n-    private boolean relIsFirstInChain( long nodeId, RelationshipRecord rel )\n+    RelationshipRecord firstRel = relRecords.getOrLoad(firstRelId, null).forChangingLinkage();\n+    if (nodeId == firstRel.getFirstNode())\n     {\n-        return (nodeId == rel.getFirstNode() && rel.isFirstInFirstChain()) ||\n-                (nodeId == rel.getSecondNode() && rel.isFirstInSecondChain());\n+      firstRel.setFirstPrevRel(firstInChain ? relCount(nodeId, rel) - 1 : relCount(nodeId, firstRel) - 1);\n+      firstRel.setFirstInFirstChain(true);\n+    }\n+    if (nodeId == firstRel.getSecondNode())\n+    {\n+      firstRel.setSecondPrevRel(firstInChain ? relCount(nodeId, rel) - 1 : relCount(nodeId, firstRel) - 1);\n+      firstRel.setFirstInSecondChain(true);\n+    }\n+    return false;\n+  }\n+\n+  private void deleteGroup(RecordProxy<NodeRecord, Void> nodeChange,\n+                           RelationshipGroupRecord group,\n+                           RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords)\n+  {\n+    long previous = group.getPrev();\n+    long next = group.getNext();\n+    if (previous == Record.NO_NEXT_RELATIONSHIP.intValue())\n+    {   // This is the first one, just point the node to the next group\n+      nodeChange.forChangingLinkage().setNextRel(next);\n+    } else\n+    {   // There are others before it, point the previous to the next group\n+      RelationshipGroupRecord previousRecord = relGroupRecords.getOrLoad(previous, null).forChangingLinkage();\n+      previousRecord.setNext(next);\n+    }\n+\n+    if (next != Record.NO_NEXT_RELATIONSHIP.intValue())\n+    {   // There are groups after this one, point that next group to the previous of the group to be deleted\n+      RelationshipGroupRecord nextRecord = relGroupRecords.getOrLoad(next, null).forChangingLinkage();\n+      nextRecord.setPrev(previous);\n     }\n+    group.setInUse(false);\n+  }\n+\n+  private boolean groupIsEmpty(RelationshipGroupRecord group)\n+  {\n+    return group.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n+        group.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n+        group.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue();\n+  }\n+\n+  private boolean relIsFirstInChain(long nodeId, RelationshipRecord rel)\n+  {\n+    return (nodeId == rel.getFirstNode() && rel.isFirstInFirstChain()) ||\n+        (nodeId == rel.getSecondNode() && rel.isFirstInSecondChain());\n+  }\n }\n",
            "diff_size": 290
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "column": "78",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2767/RelationshipDeleter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2767/RelationshipDeleter.java\nindex 7c3882d0139..7ab2747c7ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2767/RelationshipDeleter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2767/RelationshipDeleter.java\n@@ -68,8 +68,7 @@ public class RelationshipDeleter\n         disconnect( rel, RelationshipConnection.END_PREV, recordChangeSet.getRelRecords(), locks );\n     }\n \n-    private void disconnect( RelationshipRecord rel, RelationshipConnection pointer,\n-            RecordAccess<RelationshipRecord, Void> relChanges, ResourceLocker locks )\n+    private void disconnect( RelationshipRecord rel, RelationshipConnection pointer, RecordAccess<RelationshipRecord,Void> relChanges, ResourceLocker locks )\n     {\n         long otherRelId = pointer.otherSide().get( rel );\n         if ( otherRelId == Record.NO_NEXT_RELATIONSHIP.intValue() )\n@@ -87,12 +86,14 @@ public class RelationshipDeleter\n             pointer.start().set( otherRel, newId, newIsFirst );\n             changed = true;\n         }\n-        if ( otherRel.getSecondNode() == pointer.compareNode( rel ) )\n+\n+if ( otherRel.getSecondNode() == pointer.compareNode( rel ) )\n         {\n             pointer.end().set( otherRel, newId, newIsFirst );\n             changed = true;\n         }\n-        if ( !changed )\n+\n+if ( !changed )\n         {\n             throw new InvalidRecordException( otherRel + \" don't match \" + rel );\n         }\n@@ -101,31 +102,25 @@ public class RelationshipDeleter\n     private void updateNodesForDeletedRelationship( RelationshipRecord rel, RecordAccessSet recordChanges,\n             ResourceLocker locks )\n     {\n-        RecordProxy<NodeRecord, Void> startNodeChange =\n-                recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null );\n-        RecordProxy<NodeRecord, Void> endNodeChange =\n-                recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null );\n-\n-        NodeRecord startNode = recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null ).forReadingLinkage();\n+        RecordProxy<NodeRecord,Void> startNodeChange = recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null );\n+RecordProxy<NodeRecord,Void> endNodeChange = recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null );\n+NodeRecord startNode = recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null ).forReadingLinkage();\n         NodeRecord endNode = recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null ).forReadingLinkage();\n         boolean loop = startNode.getId() == endNode.getId();\n-\n-        if ( !startNode.isDense() )\n+if ( !startNode.isDense() )\n         {\n             if ( rel.isFirstInFirstChain() )\n             {\n                 startNode = startNodeChange.forChangingLinkage();\n                 startNode.setNextRel( rel.getFirstNextRel() );\n             }\n-            decrementTotalRelationshipCount( startNode.getId(), rel, startNode.getNextRel(),\n-                    recordChanges.getRelRecords(), locks );\n+\n+decrementTotalRelationshipCount( startNode.getId(), rel, startNode.getNextRel(), recordChanges.getRelRecords(), locks );\n         }\n         else\n         {\n-            RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n-                    relGroupGetter.getRelationshipGroup( startNode, rel.getType(),\n-                            recordChanges.getRelGroupRecords() ).group();\n-            assert groupChange != null : \"Relationship group \" + rel.getType() + \" should have existed here\";\n+            RecordProxy<RelationshipGroupRecord,Integer> groupChange = relGroupGetter.getRelationshipGroup( startNode, rel.getType(), recordChanges.getRelGroupRecords() ).group();\n+assert groupChange != null : \"Relationship group \" + rel.getType() + \" should have existed here\";\n             RelationshipGroupRecord group = groupChange.forReadingData();\n             DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, startNode );\n             if ( rel.isFirstInFirstChain() )\n@@ -137,8 +132,8 @@ public class RelationshipDeleter\n                     deleteGroup( startNodeChange, group, recordChanges.getRelGroupRecords() );\n                 }\n             }\n-            decrementTotalRelationshipCount( startNode.getId(), rel, dir.getNextRel( group ),\n-                    recordChanges.getRelRecords(), locks );\n+\n+decrementTotalRelationshipCount( startNode.getId(), rel, dir.getNextRel( group ), recordChanges.getRelRecords(), locks );\n         }\n \n         if ( !endNode.isDense() )\n@@ -148,18 +143,16 @@ public class RelationshipDeleter\n                 endNode = endNodeChange.forChangingLinkage();\n                 endNode.setNextRel( rel.getSecondNextRel() );\n             }\n-            if ( !loop )\n+\n+if ( !loop )\n             {\n-                decrementTotalRelationshipCount( endNode.getId(), rel, endNode.getNextRel(),\n-                        recordChanges.getRelRecords(), locks );\n-            }\n+                decrementTotalRelationshipCount( endNode.getId(), rel, endNode.getNextRel(), recordChanges.getRelRecords(), locks );\n+    }\n         }\n         else\n         {\n-            RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n-                    relGroupGetter.getRelationshipGroup( endNode, rel.getType(),\n-                            recordChanges.getRelGroupRecords() ).group();\n-            DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, endNode );\n+            RecordProxy<RelationshipGroupRecord,Integer> groupChange = relGroupGetter.getRelationshipGroup( endNode, rel.getType(), recordChanges.getRelGroupRecords() ).group();\n+DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, endNode );\n             assert groupChange != null || loop : \"Group has been deleted\";\n             if ( groupChange != null )\n             {\n@@ -176,14 +169,12 @@ public class RelationshipDeleter\n             } // Else this is a loop-rel and the group was deleted when dealing with the start node\n             if ( !loop )\n             {\n-                decrementTotalRelationshipCount( endNode.getId(), rel, dir.getNextRel( groupChange.forChangingData() ),\n-                        recordChanges.getRelRecords(), locks );\n-            }\n+                decrementTotalRelationshipCount( endNode.getId(), rel, dir.getNextRel( groupChange.forChangingData() ), recordChanges.getRelRecords(), locks );\n+    }\n         }\n     }\n \n-    private boolean decrementTotalRelationshipCount( long nodeId, RelationshipRecord rel, long firstRelId,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+    private boolean decrementTotalRelationshipCount( long nodeId, RelationshipRecord rel, long firstRelId, RecordAccess<RelationshipRecord,Void> relRecords, ResourceLocker locks )\n     {\n         if ( firstRelId == Record.NO_PREV_RELATIONSHIP.intValue() )\n         {\n@@ -194,13 +185,15 @@ public class RelationshipDeleter\n         {\n             locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, firstRelId );\n         }\n-        RelationshipRecord firstRel = relRecords.getOrLoad( firstRelId, null ).forChangingLinkage();\n+\n+RelationshipRecord firstRel = relRecords.getOrLoad( firstRelId, null ).forChangingLinkage();\n         if ( nodeId == firstRel.getFirstNode() )\n         {\n             firstRel.setFirstPrevRel( firstInChain ? relCount( nodeId, rel ) - 1 : relCount( nodeId, firstRel ) - 1 );\n             firstRel.setFirstInFirstChain( true );\n         }\n-        if ( nodeId == firstRel.getSecondNode() )\n+\n+if ( nodeId == firstRel.getSecondNode() )\n         {\n             firstRel.setSecondPrevRel( firstInChain ? relCount( nodeId, rel ) - 1 : relCount( nodeId, firstRel ) - 1 );\n             firstRel.setFirstInSecondChain( true );\n@@ -208,24 +201,25 @@ public class RelationshipDeleter\n         return false;\n     }\n \n-    private void deleteGroup( RecordProxy<NodeRecord, Void> nodeChange,\n-                              RelationshipGroupRecord group,\n-                              RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords )\n-    {\n+    private void deleteGroup( RecordProxy<NodeRecord,Void> nodeChange, RelationshipGroupRecord group, RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords )\n+{\n         long previous = group.getPrev();\n         long next = group.getNext();\n         if ( previous == Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {   // This is the first one, just point the node to the next group\n+        {\n+    // This is the first one, just point the node to the next group\n             nodeChange.forChangingLinkage().setNextRel( next );\n         }\n         else\n-        {   // There are others before it, point the previous to the next group\n+        {\n+    // There are others before it, point the previous to the next group\n             RelationshipGroupRecord previousRecord = relGroupRecords.getOrLoad( previous, null ).forChangingLinkage();\n             previousRecord.setNext( next );\n         }\n \n         if ( next != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {   // There are groups after this one, point that next group to the previous of the group to be deleted\n+        {\n+    // There are groups after this one, point that next group to the previous of the group to be deleted\n             RelationshipGroupRecord nextRecord = relGroupRecords.getOrLoad( next, null ).forChangingLinkage();\n             nextRecord.setPrev( previous );\n         }\n@@ -234,14 +228,12 @@ public class RelationshipDeleter\n \n     private boolean groupIsEmpty( RelationshipGroupRecord group )\n     {\n-        return group.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n-                group.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n+        return group.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() &&group.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n                 group.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue();\n     }\n \n     private boolean relIsFirstInChain( long nodeId, RelationshipRecord rel )\n     {\n-        return (nodeId == rel.getFirstNode() && rel.isFirstInFirstChain()) ||\n-                (nodeId == rel.getSecondNode() && rel.isFirstInSecondChain());\n+        return ( nodeId == rel.getFirstNode() && rel.isFirstInFirstChain()) || ( nodeId == rel.getSecondNode() && rel.isFirstInSecondChain() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "column": "39",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "column": "39",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "column": "46",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "column": "77",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "231",
                    "column": "140",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "236",
                    "column": "46",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "236",
                    "column": "75",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "236",
                    "column": "109",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2767/RelationshipDeleter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2767/RelationshipDeleter.java\nindex 7c3882d0139..7f47f807684 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2767/RelationshipDeleter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2767/RelationshipDeleter.java\n@@ -29,7 +29,6 @@ import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n import org.neo4j.kernel.impl.transaction.state.RecordAccess.RecordProxy;\n import org.neo4j.kernel.impl.util.DirectionWrapper;\n import org.neo4j.storageengine.api.lock.ResourceLocker;\n-\n import static org.neo4j.kernel.impl.transaction.state.RelationshipCreator.relCount;\n \n public class RelationshipDeleter\n@@ -51,6 +50,7 @@ public class RelationshipDeleter\n      *\n      * @param id The id of the relationship to delete.\n      */\n+\n     public void relDelete( long id, RecordAccessSet recordChanges, ResourceLocker locks )\n     {\n         RelationshipRecord record = recordChanges.getRelRecords().getOrLoad( id, null ).forChangingLinkage();\n@@ -68,8 +68,7 @@ public class RelationshipDeleter\n         disconnect( rel, RelationshipConnection.END_PREV, recordChangeSet.getRelRecords(), locks );\n     }\n \n-    private void disconnect( RelationshipRecord rel, RelationshipConnection pointer,\n-            RecordAccess<RelationshipRecord, Void> relChanges, ResourceLocker locks )\n+    private void disconnect( RelationshipRecord rel, RelationshipConnection pointer, RecordAccess<RelationshipRecord,Void> relChanges, ResourceLocker locks )\n     {\n         long otherRelId = pointer.otherSide().get( rel );\n         if ( otherRelId == Record.NO_NEXT_RELATIONSHIP.intValue() )\n@@ -87,45 +86,40 @@ public class RelationshipDeleter\n             pointer.start().set( otherRel, newId, newIsFirst );\n             changed = true;\n         }\n+\n         if ( otherRel.getSecondNode() == pointer.compareNode( rel ) )\n         {\n             pointer.end().set( otherRel, newId, newIsFirst );\n             changed = true;\n         }\n-        if ( !changed )\n+\n+        if ( ! changed )\n         {\n             throw new InvalidRecordException( otherRel + \" don't match \" + rel );\n         }\n     }\n \n-    private void updateNodesForDeletedRelationship( RelationshipRecord rel, RecordAccessSet recordChanges,\n-            ResourceLocker locks )\n+    private void updateNodesForDeletedRelationship( RelationshipRecord rel, RecordAccessSet recordChanges, ResourceLocker locks )\n     {\n-        RecordProxy<NodeRecord, Void> startNodeChange =\n-                recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null );\n-        RecordProxy<NodeRecord, Void> endNodeChange =\n-                recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null );\n-\n+        RecordProxy<NodeRecord,Void> startNodeChange = recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null );\n+        RecordProxy<NodeRecord,Void> endNodeChange = recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null );\n         NodeRecord startNode = recordChanges.getNodeRecords().getOrLoad( rel.getFirstNode(), null ).forReadingLinkage();\n         NodeRecord endNode = recordChanges.getNodeRecords().getOrLoad( rel.getSecondNode(), null ).forReadingLinkage();\n         boolean loop = startNode.getId() == endNode.getId();\n-\n-        if ( !startNode.isDense() )\n+        if ( ! startNode.isDense() )\n         {\n             if ( rel.isFirstInFirstChain() )\n             {\n                 startNode = startNodeChange.forChangingLinkage();\n                 startNode.setNextRel( rel.getFirstNextRel() );\n             }\n-            decrementTotalRelationshipCount( startNode.getId(), rel, startNode.getNextRel(),\n-                    recordChanges.getRelRecords(), locks );\n+\n+            decrementTotalRelationshipCount( startNode.getId(), rel, startNode.getNextRel(), recordChanges.getRelRecords(), locks );\n         }\n         else\n         {\n-            RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n-                    relGroupGetter.getRelationshipGroup( startNode, rel.getType(),\n-                            recordChanges.getRelGroupRecords() ).group();\n-            assert groupChange != null : \"Relationship group \" + rel.getType() + \" should have existed here\";\n+            RecordProxy<RelationshipGroupRecord,Integer> groupChange = relGroupGetter.getRelationshipGroup( startNode, rel.getType(), recordChanges.getRelGroupRecords() ).group();\n+            assert groupChange != null: \"Relationship group \" + rel.getType() + \" should have existed here\";\n             RelationshipGroupRecord group = groupChange.forReadingData();\n             DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, startNode );\n             if ( rel.isFirstInFirstChain() )\n@@ -137,30 +131,28 @@ public class RelationshipDeleter\n                     deleteGroup( startNodeChange, group, recordChanges.getRelGroupRecords() );\n                 }\n             }\n-            decrementTotalRelationshipCount( startNode.getId(), rel, dir.getNextRel( group ),\n-                    recordChanges.getRelRecords(), locks );\n+\n+            decrementTotalRelationshipCount( startNode.getId(), rel, dir.getNextRel( group ), recordChanges.getRelRecords(), locks );\n         }\n \n-        if ( !endNode.isDense() )\n+        if ( ! endNode.isDense() )\n         {\n             if ( rel.isFirstInSecondChain() )\n             {\n                 endNode = endNodeChange.forChangingLinkage();\n                 endNode.setNextRel( rel.getSecondNextRel() );\n             }\n-            if ( !loop )\n+\n+            if ( ! loop )\n             {\n-                decrementTotalRelationshipCount( endNode.getId(), rel, endNode.getNextRel(),\n-                        recordChanges.getRelRecords(), locks );\n+                decrementTotalRelationshipCount( endNode.getId(), rel, endNode.getNextRel(), recordChanges.getRelRecords(), locks );\n             }\n         }\n         else\n         {\n-            RecordProxy<RelationshipGroupRecord, Integer> groupChange =\n-                    relGroupGetter.getRelationshipGroup( endNode, rel.getType(),\n-                            recordChanges.getRelGroupRecords() ).group();\n+            RecordProxy<RelationshipGroupRecord,Integer> groupChange = relGroupGetter.getRelationshipGroup( endNode, rel.getType(), recordChanges.getRelGroupRecords() ).group();\n             DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, endNode );\n-            assert groupChange != null || loop : \"Group has been deleted\";\n+            assert groupChange != null|| loop: \"Group has been deleted\";\n             if ( groupChange != null )\n             {\n                 RelationshipGroupRecord group = groupChange.forReadingData();\n@@ -174,43 +166,44 @@ public class RelationshipDeleter\n                     }\n                 }\n             } // Else this is a loop-rel and the group was deleted when dealing with the start node\n-            if ( !loop )\n+\n+            if ( ! loop )\n             {\n-                decrementTotalRelationshipCount( endNode.getId(), rel, dir.getNextRel( groupChange.forChangingData() ),\n-                        recordChanges.getRelRecords(), locks );\n+                decrementTotalRelationshipCount( endNode.getId(), rel, dir.getNextRel( groupChange.forChangingData() ), recordChanges.getRelRecords(), locks );\n             }\n         }\n     }\n \n-    private boolean decrementTotalRelationshipCount( long nodeId, RelationshipRecord rel, long firstRelId,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+    private boolean decrementTotalRelationshipCount( long nodeId, RelationshipRecord rel, long firstRelId, RecordAccess<RelationshipRecord,Void> relRecords, ResourceLocker locks )\n     {\n         if ( firstRelId == Record.NO_PREV_RELATIONSHIP.intValue() )\n         {\n             return true;\n         }\n+\n         boolean firstInChain = relIsFirstInChain( nodeId, rel );\n-        if ( !firstInChain )\n+        if ( ! firstInChain )\n         {\n             locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, firstRelId );\n         }\n+\n         RelationshipRecord firstRel = relRecords.getOrLoad( firstRelId, null ).forChangingLinkage();\n         if ( nodeId == firstRel.getFirstNode() )\n         {\n             firstRel.setFirstPrevRel( firstInChain ? relCount( nodeId, rel ) - 1 : relCount( nodeId, firstRel ) - 1 );\n             firstRel.setFirstInFirstChain( true );\n         }\n+\n         if ( nodeId == firstRel.getSecondNode() )\n         {\n             firstRel.setSecondPrevRel( firstInChain ? relCount( nodeId, rel ) - 1 : relCount( nodeId, firstRel ) - 1 );\n             firstRel.setFirstInSecondChain( true );\n         }\n+\n         return false;\n     }\n \n-    private void deleteGroup( RecordProxy<NodeRecord, Void> nodeChange,\n-                              RelationshipGroupRecord group,\n-                              RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords )\n+    private void deleteGroup( RecordProxy<NodeRecord,Void> nodeChange, RelationshipGroupRecord group, RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords )\n     {\n         long previous = group.getPrev();\n         long next = group.getNext();\n@@ -229,19 +222,17 @@ public class RelationshipDeleter\n             RelationshipGroupRecord nextRecord = relGroupRecords.getOrLoad( next, null ).forChangingLinkage();\n             nextRecord.setPrev( previous );\n         }\n+\n         group.setInUse( false );\n     }\n \n     private boolean groupIsEmpty( RelationshipGroupRecord group )\n     {\n-        return group.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n-                group.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() &&\n-                group.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue();\n+        return group.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue()&& group.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue()&& group.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue();\n     }\n \n     private boolean relIsFirstInChain( long nodeId, RelationshipRecord rel )\n     {\n-        return (nodeId == rel.getFirstNode() && rel.isFirstInFirstChain()) ||\n-                (nodeId == rel.getSecondNode() && rel.isFirstInSecondChain());\n+        return ( nodeId == rel.getFirstNode()&& rel.isFirstInFirstChain())|| ( nodeId == rel.getSecondNode()&& rel.isFirstInSecondChain());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}