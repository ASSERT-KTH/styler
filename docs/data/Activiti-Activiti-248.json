{
    "project_name": "Activiti-Activiti",
    "error_id": "248",
    "information": {
        "errors": [
            {
                "line": "444",
                "severity": "error",
                "message": "'METHOD_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    private List<IdentityLink> getIdentityLinks(String taskId) {\n        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n            List<String> userRoles = securityManager.getAuthenticatedUserRoles();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/248/TaskRuntimeImpl.java\nindex 1dec98789a0..7a0935cd172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/248/TaskRuntimeImpl.java\n@@ -440,7 +440,6 @@ public class TaskRuntimeImpl implements TaskRuntime {\n                 saveTaskPayload.getVariables());\n     }\n \n-\n     private List<IdentityLink> getIdentityLinks(String taskId) {\n         String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "444",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/248/TaskRuntimeImpl.java\nindex 1dec98789a0..1fe2d56a89f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/248/TaskRuntimeImpl.java\n@@ -153,9 +153,9 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         if (!task.getAssignee().equals(authenticatedUserId)) {\n             throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n         }\n-        \n+\n         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n+\n         taskService.complete(completeTaskPayload.getTaskId(),\n                 completeTaskPayload.getVariables(), true);\n \n@@ -262,14 +262,14 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         task.setOwner(securityManager.getAuthenticatedUserId());\n         taskService.saveTask(task);\n         if (createTaskPayload.getCandidateGroups() != null && !createTaskPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : createTaskPayload.getCandidateGroups() ) {\n+            for (String g : createTaskPayload.getCandidateGroups()) {\n                 taskService.addCandidateGroup(task.getId(),\n                         g);\n             }\n         }\n \n         if (createTaskPayload.getCandidateUsers() != null && !createTaskPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : createTaskPayload.getCandidateUsers() ) {\n+            for (String u : createTaskPayload.getCandidateUsers()) {\n                 taskService.addCandidateUser(task.getId(),\n                         u);\n             }\n@@ -297,7 +297,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n+            for (String u : candidateUsersPayload.getCandidateUsers()) {\n                 taskService.addCandidateUser(internalTask.getId(),\n                         u);\n             }\n@@ -323,7 +323,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n+            for (String u : candidateUsersPayload.getCandidateUsers()) {\n                 taskService.deleteCandidateUser(internalTask.getId(),\n                         u);\n             }\n@@ -348,7 +348,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n+            for (String g : candidateGroupsPayload.getCandidateGroups()) {\n                 taskService.addCandidateGroup(internalTask.getId(),\n                         g);\n             }\n@@ -373,7 +373,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n+            for (String g : candidateGroupsPayload.getCandidateGroups()) {\n                 taskService.deleteCandidateGroup(internalTask.getId(),\n                         g);\n             }\n@@ -385,7 +385,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n         List<String> userCandidates = new ArrayList<>();\n         if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n+            for (IdentityLink i : identityLinks) {\n                 if (i.getUserId() != null) {\n                     if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n                         userCandidates.add(i.getUserId());\n@@ -402,7 +402,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n         List<String> groupCandidates = new ArrayList<>();\n         if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n+            for (IdentityLink i : identityLinks) {\n                 if (i.getGroupId() != null) {\n                     if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n                         groupCandidates.add(i.getGroupId());\n@@ -435,7 +435,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n \n         taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n+\n         taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n                 saveTaskPayload.getVariables());\n     }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 135.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 143.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 160.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 167.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 181.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 188.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 194.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 210.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 219.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "277",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 278.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "300",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 301.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "322",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 323.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "344",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 345.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/248/TaskRuntimeImpl.java\nindex 1dec98789a0..779a85a9689 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/248/TaskRuntimeImpl.java\n@@ -47,7 +47,6 @@ import org.activiti.runtime.api.model.impl.APITaskConverter;\n import org.activiti.runtime.api.model.impl.APIVariableInstanceConverter;\n import org.activiti.runtime.api.query.impl.PageImpl;\n import org.springframework.security.access.prepost.PreAuthorize;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n@@ -55,405 +54,373 @@ import java.util.Objects;\n @PreAuthorize(\"hasRole('ACTIVITI_USER')\")\n public class TaskRuntimeImpl implements TaskRuntime {\n \n-    private final TaskService taskService;\n+  private final TaskService taskService;\n \n-    private final APITaskConverter taskConverter;\n+  private final APITaskConverter taskConverter;\n \n-    private final APIVariableInstanceConverter variableInstanceConverter;\n+  private final APIVariableInstanceConverter variableInstanceConverter;\n \n-    private final TaskRuntimeConfiguration configuration;\n+  private final TaskRuntimeConfiguration configuration;\n \n-    private final SecurityManager securityManager;\n+  private final SecurityManager securityManager;\n \n-    private final TaskRuntimeHelper taskRuntimeHelper;\n+  private final TaskRuntimeHelper taskRuntimeHelper;\n \n-    public TaskRuntimeImpl(TaskService taskService,\n-                           SecurityManager securityManager,\n-                           APITaskConverter taskConverter,\n-                           APIVariableInstanceConverter variableInstanceConverter,\n-                           TaskRuntimeConfiguration configuration,\n-                           TaskRuntimeHelper taskRuntimeHelper) {\n-        this.taskService = taskService;\n-        this.securityManager = securityManager;\n-        this.taskConverter = taskConverter;\n-        this.variableInstanceConverter = variableInstanceConverter;\n-        this.configuration = configuration;\n-        this.taskRuntimeHelper = taskRuntimeHelper;\n-    }\n+  public TaskRuntimeImpl(TaskService taskService,\n+                         SecurityManager securityManager,\n+                         APITaskConverter taskConverter,\n+                         APIVariableInstanceConverter variableInstanceConverter,\n+                         TaskRuntimeConfiguration configuration, TaskRuntimeHelper taskRuntimeHelper) {\n+    this.taskService = taskService;\n+    this.securityManager = securityManager;\n+    this.taskConverter = taskConverter;\n+    this.variableInstanceConverter = variableInstanceConverter;\n+    this.configuration = configuration;\n+    this.taskRuntimeHelper = taskRuntimeHelper;\n+  }\n \n-    @Override\n-    public TaskRuntimeConfiguration configuration() {\n-        return configuration;\n-    }\n+  @Override\n+  public TaskRuntimeConfiguration configuration() {\n+    return configuration;\n+  }\n \n-    @Override\n-    public Task task(String taskId) {\n-        return taskConverter.fromWithCandidates(taskRuntimeHelper.getInternalTaskWithChecks(taskId));\n-    }\n+  @Override\n+  public Task task(String taskId) {\n+    return taskConverter.fromWithCandidates(taskRuntimeHelper.getInternalTaskWithChecks(taskId));\n+  }\n \n-    @Override\n-    public Page<Task> tasks(Pageable pageable) {\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            return tasks(pageable,\n-                    TaskPayloadBuilder.tasks().withAssignee(authenticatedUserId).withGroups(userGroups).build());\n-        }\n-        throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n+  @Override\n+  public Page<Task> tasks(Pageable pageable) {\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+      List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+      return tasks(pageable, TaskPayloadBuilder.tasks().withAssignee(authenticatedUserId).withGroups(userGroups).build());\n+    }\n+    throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n+  }\n+\n+  @Override\n+  public Page<Task> tasks(Pageable pageable, GetTasksPayload getTasksPayload) {\n+    TaskQuery taskQuery = taskService.createTaskQuery();\n+    if (getTasksPayload == null) {\n+      getTasksPayload = TaskPayloadBuilder.tasks().build();\n     }\n \n-    @Override\n-    public Page<Task> tasks(Pageable pageable,\n-                            GetTasksPayload getTasksPayload) {\n-        TaskQuery taskQuery = taskService.createTaskQuery();\n-        if (getTasksPayload == null) {\n-            getTasksPayload = TaskPayloadBuilder.tasks().build();\n-        }\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            getTasksPayload.setAssigneeId(authenticatedUserId);\n-            getTasksPayload.setGroups(userGroups);\n-        } else {\n-            throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n-        }\n-        taskQuery = taskQuery.or()\n-                .taskCandidateOrAssigned(getTasksPayload.getAssigneeId(),\n-                        getTasksPayload.getGroups())\n-                .taskOwner(authenticatedUserId)\n-                .endOr();\n-\n-        if (getTasksPayload.getProcessInstanceId() != null) {\n-            taskQuery = taskQuery.processInstanceId(getTasksPayload.getProcessInstanceId());\n-        }\n-        if (getTasksPayload.getParentTaskId() != null) {\n-            taskQuery = taskQuery.taskParentTaskId(getTasksPayload.getParentTaskId());\n-        }\n-        List<Task> tasks = taskConverter.from(taskQuery.listPage(pageable.getStartIndex(),\n-                pageable.getMaxItems()));\n-        return new PageImpl<>(tasks,\n-                Math.toIntExact(taskQuery.count()));\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+      List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+      getTasksPayload.setAssigneeId(authenticatedUserId);\n+      getTasksPayload.setGroups(userGroups);\n+    } else {\n+      throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n     }\n+    taskQuery = taskQuery.or().taskCandidateOrAssigned(getTasksPayload.getAssigneeId(),\n+                                                       getTasksPayload.getGroups()).taskOwner(authenticatedUserId).endOr();\n+    if (getTasksPayload.getProcessInstanceId() != null) {\n+      taskQuery = taskQuery.processInstanceId(getTasksPayload.getProcessInstanceId());\n+    }\n+    if (getTasksPayload.getParentTaskId() != null) {\n+      taskQuery = taskQuery.taskParentTaskId(getTasksPayload.getParentTaskId());\n+    }\n+\n+    List<Task> tasks = taskConverter.from(taskQuery.listPage(pageable.getStartIndex(),\n+                                                             pageable.getMaxItems()));\n+    return new PageImpl<>(tasks, Math.toIntExact(taskQuery.count()));\n+  }\n \n-    @Override\n-    public Task complete(CompleteTaskPayload completeTaskPayload) {\n+  @Override\n+  public Task complete(CompleteTaskPayload completeTaskPayload) {\n         //@TODO: not the most efficient way to return the just completed task, improve\n         //      we might need to create an empty shell with the task ID and Status only\n-        Task task;\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        try {\n-            task = task(completeTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot complete task\" + completeTaskPayload.getTaskId() + \" due he/she cannot access to the task\");\n-        }\n+    Task task;\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    try {\n+      task = task(completeTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot complete task\" + completeTaskPayload.getTaskId() + \" due he/she cannot access to the task\");\n+    }\n         // validate the the task does have an assignee\n-        if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n-            throw new IllegalStateException(\"The task needs to be claimed before trying to complete it\");\n-        }\n-        if (!task.getAssignee().equals(authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n-        }\n-        \n-        taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n-        taskService.complete(completeTaskPayload.getTaskId(),\n-                completeTaskPayload.getVariables(), true);\n-\n-\n-        ((TaskImpl) task).setStatus(Task.TaskStatus.COMPLETED);\n-\n-        return task;\n+    if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n+      throw new IllegalStateException(\"The task needs to be claimed before trying to complete it\");\n     }\n-\n-    @Override\n-    public Task claim(ClaimTaskPayload claimTaskPayload) {\n+    if (!task.getAssignee().equals(authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n+    }\n+    taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n+    taskService.complete(completeTaskPayload.getTaskId(),\n+                         completeTaskPayload.getVariables(),\n+                         true);\n+    ((TaskImpl) task).setStatus(Task.TaskStatus.COMPLETED);\n+    return task;\n+  }\n+\n+  @Override\n+  public Task claim(ClaimTaskPayload claimTaskPayload) {\n         // Validate that the task is visible by the currently authorized user\n-        Task task;\n-        try {\n-            task = task(claimTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot claim task\" + claimTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n-        }\n+    Task task;\n+    try {\n+      task = task(claimTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot claim task\" + claimTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n+    }\n         // validate the the task doesn't have an assignee\n-        if (task.getAssignee() != null && !task.getAssignee().isEmpty()) {\n-            throw new IllegalStateException(\"The task was already claimed, the assignee of this task needs to release it first for you to claim it\");\n-        }\n-\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        claimTaskPayload.setAssignee(authenticatedUserId);\n-        taskService.claim(claimTaskPayload.getTaskId(),\n-                claimTaskPayload.getAssignee());\n-\n-        return task(claimTaskPayload.getTaskId());\n+    if (task.getAssignee() != null && !task.getAssignee().isEmpty()) {\n+      throw new IllegalStateException(\"The task was already claimed, the assignee of this task needs to release it first for you to claim it\");\n     }\n \n-    @Override\n-    public Task release(ReleaseTaskPayload releaseTaskPayload) {\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    claimTaskPayload.setAssignee(authenticatedUserId);\n+    taskService.claim(claimTaskPayload.getTaskId(),\n+                      claimTaskPayload.getAssignee());\n+    return task(claimTaskPayload.getTaskId());\n+  }\n+\n+  @Override\n+  public Task release(ReleaseTaskPayload releaseTaskPayload) {\n         // Validate that the task is visible by the currently authorized user\n-        Task task;\n-        try {\n-            task = task(releaseTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot claim task\" + releaseTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n-        }\n+    Task task;\n+    try {\n+      task = task(releaseTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot claim task\" + releaseTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n+    }\n         // validate the the task doesn't have an assignee\n-        if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n-            throw new IllegalStateException(\"You cannot release a task that is not claimed\");\n-        }\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        // validate that you are trying to release task where you are the assignee\n-        if (!task.getAssignee().equals(authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot release a task where you are not the assignee\");\n-        }\n-\n-        taskService.unclaim(releaseTaskPayload.getTaskId());\n-        return task(releaseTaskPayload.getTaskId());\n+    if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n+      throw new IllegalStateException(\"You cannot release a task that is not claimed\");\n     }\n \n-    @Override\n-    public Task update(UpdateTaskPayload updateTaskPayload) {\n-        return taskRuntimeHelper.applyUpdateTaskPayload(false, updateTaskPayload);\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+        // validate that you are trying to release task where you are the assignee\n+    if (!task.getAssignee().equals(authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot release a task where you are not the assignee\");\n     }\n+    taskService.unclaim(releaseTaskPayload.getTaskId());\n+    return task(releaseTaskPayload.getTaskId());\n+  }\n+\n+  @Override\n+  public Task update(UpdateTaskPayload updateTaskPayload) {\n+    return taskRuntimeHelper.applyUpdateTaskPayload(false, updateTaskPayload);\n+  }\n \n-    @Override\n-    public Task delete(DeleteTaskPayload deleteTaskPayload) {\n+  @Override\n+  public Task delete(DeleteTaskPayload deleteTaskPayload) {\n         //@TODO: not the most efficient way to return the just deleted task, improve\n         //      we might need to create an empty shell with the task ID and Status only\n-        Task task;\n-        try {\n-            task = task(deleteTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot delete the task\" + deleteTaskPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        // validate that you are trying to delete task where you are the assignee or the owner\n-        if ((task.getAssignee() == null || task.getAssignee().isEmpty() || !task.getAssignee().equals(authenticatedUserId)) &&\n-                (task.getOwner() == null || task.getOwner().isEmpty() || !task.getOwner().equals(authenticatedUserId))) {\n-            throw new IllegalStateException(\"You cannot delete a task where you are not the assignee/owner\");\n-        }\n-        TaskImpl deletedTaskData = new TaskImpl(task.getId(),\n-                task.getName(),\n-                Task.TaskStatus.CANCELLED);\n-        if (!deleteTaskPayload.hasReason()) {\n-            deleteTaskPayload.setReason(\"Task deleted by \" + authenticatedUserId);\n-        }\n-        taskService.deleteTask(deleteTaskPayload.getTaskId(),\n-                deleteTaskPayload.getReason(),\n-                true);\n-        return deletedTaskData;\n+    Task task;\n+    try {\n+      task = task(deleteTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot delete the task\" + deleteTaskPayload.getTaskId() + \" due it is not the current assignee\");\n     }\n \n-    @Override\n-    public Task create(CreateTaskPayload createTaskPayload) {\n-        if (createTaskPayload.getName() == null || createTaskPayload.getName().isEmpty()) {\n-            throw new IllegalStateException(\"You cannot create a task without name\");\n-        }\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+        // validate that you are trying to delete task where you are the assignee or the owner\n+    if ((task.getAssignee() == null || task.getAssignee().isEmpty() || !task.getAssignee().equals(authenticatedUserId)) && (task.getOwner() == null || task.getOwner().isEmpty() || !task.getOwner().equals(authenticatedUserId))) {\n+      throw new IllegalStateException(\"You cannot delete a task where you are not the assignee/owner\");\n+    }\n \n-        org.activiti.engine.task.Task task = taskService.newTask();\n-        task.setName(createTaskPayload.getName());\n-        task.setDescription(createTaskPayload.getDescription());\n-        task.setDueDate(createTaskPayload.getDueDate());\n-        task.setPriority(createTaskPayload.getPriority());\n-        if (createTaskPayload.getAssignee() != null && !createTaskPayload.getAssignee().isEmpty()) {\n-            task.setAssignee(createTaskPayload.getAssignee());\n-        }\n-        task.setParentTaskId(createTaskPayload.getParentTaskId());\n-        task.setFormKey(createTaskPayload.getFormKey());\n-        task.setOwner(securityManager.getAuthenticatedUserId());\n-        taskService.saveTask(task);\n-        if (createTaskPayload.getCandidateGroups() != null && !createTaskPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : createTaskPayload.getCandidateGroups() ) {\n-                taskService.addCandidateGroup(task.getId(),\n-                        g);\n-            }\n-        }\n+    TaskImpl deletedTaskData = new TaskImpl(task.getId(),\n+                                            task.getName(),\n+                                            Task.TaskStatus.CANCELLED);\n+    if (!deleteTaskPayload.hasReason()) {\n+      deleteTaskPayload.setReason(\"Task deleted by \" + authenticatedUserId);\n+    }\n+    taskService.deleteTask(deleteTaskPayload.getTaskId(),\n+                           deleteTaskPayload.getReason(),\n+                           true);\n+    return deletedTaskData;\n+  }\n+\n+  @Override\n+  public Task create(CreateTaskPayload createTaskPayload) {\n+    if (createTaskPayload.getName() == null || createTaskPayload.getName().isEmpty()) {\n+      throw new IllegalStateException(\"You cannot create a task without name\");\n+    }\n \n-        if (createTaskPayload.getCandidateUsers() != null && !createTaskPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : createTaskPayload.getCandidateUsers() ) {\n-                taskService.addCandidateUser(task.getId(),\n-                        u);\n-            }\n+    org.activiti.engine.task.Task task = taskService.newTask();\n+    task.setName(createTaskPayload.getName());\n+    task.setDescription(createTaskPayload.getDescription());\n+    task.setDueDate(createTaskPayload.getDueDate());\n+    task.setPriority(createTaskPayload.getPriority());\n+    if (createTaskPayload.getAssignee() != null && !createTaskPayload.getAssignee().isEmpty()) {\n+      task.setAssignee(createTaskPayload.getAssignee());\n+    }\n+    task.setParentTaskId(createTaskPayload.getParentTaskId());\n+    task.setFormKey(createTaskPayload.getFormKey());\n+    task.setOwner(securityManager.getAuthenticatedUserId());\n+    taskService.saveTask(task);\n+    if (createTaskPayload.getCandidateGroups() != null && !createTaskPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : createTaskPayload.getCandidateGroups()) {\n+            taskService.addCandidateGroup(task.getId(), g);\n         }\n-\n-        return taskConverter.from(task);\n     }\n-\n-    @Override\n-    public void addCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n+    if (createTaskPayload.getCandidateUsers() != null && !createTaskPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : createTaskPayload.getCandidateUsers()) {\n+            taskService.addCandidateUser(task.getId(), u);\n         }\n+    }\n+    return taskConverter.from(task);\n+  }\n+\n+  @Override\n+  public void addCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+      internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n \n         // validate that you are trying to add CandidateUsers to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n-\n-        if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n-                taskService.addCandidateUser(internalTask.getId(),\n-                        u);\n-            }\n-        }\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n     }\n-\n-    @Override\n-    public void deleteCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n+    if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : candidateUsersPayload.getCandidateUsers()) {\n+            taskService.addCandidateUser(internalTask.getId(), u);\n         }\n+    }\n+  }\n+\n+  @Override\n+  public void deleteCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+      internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n \n         // validate that you are trying to add CandidateUsers to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n-\n-        if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n-                taskService.deleteCandidateUser(internalTask.getId(),\n-                        u);\n-            }\n-        }\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n     }\n-\n-    @Override\n-    public void addCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n-\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        // validate that you are trying to add CandidateGroups to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n-\n-        if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n-                taskService.addCandidateGroup(internalTask.getId(),\n-                        g);\n-            }\n+    if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : candidateUsersPayload.getCandidateUsers()) {\n+            taskService.deleteCandidateUser(internalTask.getId(), u);\n         }\n     }\n+  }\n+\n+  @Override\n+  public void addCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+      internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-    @Override\n-    public void deleteCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n-\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         // validate that you are trying to add CandidateGroups to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n-\n-        if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n-                taskService.deleteCandidateGroup(internalTask.getId(),\n-                        g);\n-            }\n-        }\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n     }\n-\n-    @Override\n-    public List<String> userCandidates(String taskId) {\n-        List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n-        List<String> userCandidates = new ArrayList<>();\n-        if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n-                if (i.getUserId() != null) {\n-                    if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n-                        userCandidates.add(i.getUserId());\n-                    }\n-                }\n-            }\n-\n-        }\n-        return userCandidates;\n-    }\n-\n-    @Override\n-    public List<String> groupCandidates(String taskId) {\n-        List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n-        List<String> groupCandidates = new ArrayList<>();\n-        if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n-                if (i.getGroupId() != null) {\n-                    if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n-                        groupCandidates.add(i.getGroupId());\n-                    }\n-                }\n-            }\n-\n+    if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : candidateGroupsPayload.getCandidateGroups()) {\n+            taskService.addCandidateGroup(internalTask.getId(), g);\n         }\n-        return groupCandidates;\n     }\n-\n-    @Override\n-    public List<VariableInstance> variables(GetTaskVariablesPayload getTaskVariablesPayload) {\n-        taskRuntimeHelper.assertHasAccessToTask(getTaskVariablesPayload.getTaskId());\n-        return variableInstanceConverter.from(taskRuntimeHelper.getInternalTaskVariables(getTaskVariablesPayload.getTaskId()).values());\n+  }\n+\n+  @Override\n+  public void deleteCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+      internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n     }\n \n-    @Override\n-    public void createVariable(CreateTaskVariablePayload createTaskVariablePayload) {\n-        taskRuntimeHelper.createVariable(false, createTaskVariablePayload);\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+        // validate that you are trying to add CandidateGroups to the task where you are the assignee\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n     }\n-\n-    @Override\n-    public void updateVariable(UpdateTaskVariablePayload updateTaskVariablePayload) {\n-        taskRuntimeHelper.updateVariable(false, updateTaskVariablePayload);\n+    if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : candidateGroupsPayload.getCandidateGroups()) {\n+            taskService.deleteCandidateGroup(internalTask.getId(), g);\n+        }\n     }\n-\n-    @Override\n-    public void save(SaveTaskPayload saveTaskPayload) {\n-        taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n-\n-        taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n-        taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n-                saveTaskPayload.getVariables());\n+  }\n+\n+  @Override\n+  public List<String> userCandidates(String taskId) {\n+    List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n+    List<String> userCandidates = new ArrayList<>();\n+    if (identityLinks != null) {\n+        for (IdentityLink i : identityLinks) {\n+          if (i.getUserId() != null) {\n+            if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n+              userCandidates.add(i.getUserId());\n+            }\n+          }\n+        }\n     }\n-\n-\n-    private List<IdentityLink> getIdentityLinks(String taskId) {\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskCandidateOrAssigned(authenticatedUserId,\n-                    userGroups).taskId(taskId).singleResult();\n-            if (internalTask == null) {\n-                throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n+    return userCandidates;\n+  }\n+\n+  @Override\n+  public List<String> groupCandidates(String taskId) {\n+    List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n+    List<String> groupCandidates = new ArrayList<>();\n+    if (identityLinks != null) {\n+        for (IdentityLink i : identityLinks) {\n+          if (i.getGroupId() != null) {\n+            if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n+              groupCandidates.add(i.getGroupId());\n             }\n-            return taskService.getIdentityLinksForTask(taskId);\n+          }\n         }\n-        throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n     }\n+    return groupCandidates;\n+  }\n+\n+  @Override\n+  public List<VariableInstance> variables(GetTaskVariablesPayload getTaskVariablesPayload) {\n+    taskRuntimeHelper.assertHasAccessToTask(getTaskVariablesPayload.getTaskId());\n+    return variableInstanceConverter.from(taskRuntimeHelper.getInternalTaskVariables(getTaskVariablesPayload.getTaskId()).values());\n+  }\n+\n+  @Override\n+  public void createVariable(CreateTaskVariablePayload createTaskVariablePayload) {\n+    taskRuntimeHelper.createVariable(false, createTaskVariablePayload);\n+  }\n+\n+  @Override\n+  public void updateVariable(UpdateTaskVariablePayload updateTaskVariablePayload) {\n+    taskRuntimeHelper.updateVariable(false, updateTaskVariablePayload);\n+  }\n+\n+  @Override\n+  public void save(SaveTaskPayload saveTaskPayload) {\n+    taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n+    taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n+    taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n+                                  saveTaskPayload.getVariables());\n+  }\n+\n+  private List<IdentityLink> getIdentityLinks(String taskId) {\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+      List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n+      List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+      org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskCandidateOrAssigned(authenticatedUserId, userGroups).taskId(taskId).singleResult();\n+      if (internalTask == null) {\n+        throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n+      }\n+      return taskService.getIdentityLinksForTask(taskId);\n+    }\n+    throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n+  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 482
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/248/TaskRuntimeImpl.java\nindex 1dec98789a0..7a0935cd172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/248/TaskRuntimeImpl.java\n@@ -440,7 +440,6 @@ public class TaskRuntimeImpl implements TaskRuntime {\n                 saveTaskPayload.getVariables());\n     }\n \n-\n     private List<IdentityLink> getIdentityLinks(String taskId) {\n         String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "443",
                    "column": "31",
                    "severity": "error",
                    "message": "GenericWhitespace '>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "443",
                    "column": "31",
                    "severity": "error",
                    "message": "GenericWhitespace '>' should followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "443",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/248/TaskRuntimeImpl.java\nindex 1dec98789a0..afa64c3de41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/248/TaskRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/248/TaskRuntimeImpl.java\n@@ -440,8 +440,8 @@ public class TaskRuntimeImpl implements TaskRuntime {\n                 saveTaskPayload.getVariables());\n     }\n \n-\n-    private List<IdentityLink> getIdentityLinks(String taskId) {\n+    private List<IdentityLink >getIdentityLinks (\n+        String taskId) {\n         String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n             List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}