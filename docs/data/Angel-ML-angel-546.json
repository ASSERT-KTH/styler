{
    "project_name": "Angel-ML-angel",
    "error_id": "546",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/546/GetNodeFeatsTest2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/546/GetNodeFeatsTest2.java\nindex d3db8389761..bb7eb56fd69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/546/GetNodeFeatsTest2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/546/GetNodeFeatsTest2.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph;\n \n import com.tencent.angel.client.AngelClient;\n@@ -153,7 +154,7 @@ public class GetNodeFeatsTest2 {\n \n     indptr[0] = 0;\n     nodeIds[0] = 1;\n-    neighbors[0] = new long[]{2, 3, 4, 5, 8};\n+    neighbors[0] = new long[] {2, 3, 4, 5, 8};\n     indptr[1] = 5;\n     idToNeighbors.put(nodeIds[0], neighbors[0]);\n     feats[0] = VFactory.denseFloatVector(5);\n@@ -164,7 +165,7 @@ public class GetNodeFeatsTest2 {\n     feats[0].set(4, 0.6f);\n \n     nodeIds[1] = 2;\n-    neighbors[1] = new long[]{1, 3, 4, 5, 8};\n+    neighbors[1] = new long[] {1, 3, 4, 5, 8};\n     indptr[2] = indptr[1] + 5;\n     idToNeighbors.put(nodeIds[1], neighbors[1]);\n     feats[1] = VFactory.sparseFloatVector(5, 2);\n@@ -172,7 +173,7 @@ public class GetNodeFeatsTest2 {\n     feats[1].set(3, 0.5f);\n \n     nodeIds[2] = 3;\n-    neighbors[2] = new long[]{1, 2, 4, 5, 8};\n+    neighbors[2] = new long[] {1, 2, 4, 5, 8};\n     indptr[3] = indptr[2] + 5;\n     idToNeighbors.put(nodeIds[2], neighbors[2]);\n     feats[2] = VFactory.sortedFloatVector(5, 3);\n@@ -181,7 +182,7 @@ public class GetNodeFeatsTest2 {\n     feats[2].set(4, 0.6f);\n \n     nodeIds[3] = 4;\n-    neighbors[3] = new long[]{1, 2, 3, 5, 8};\n+    neighbors[3] = new long[] {1, 2, 3, 5, 8};\n     indptr[4] = indptr[3] + 5;\n     idToNeighbors.put(nodeIds[3], neighbors[3]);\n     feats[3] = VFactory.sparseFloatVector(5, 2);\n@@ -189,14 +190,14 @@ public class GetNodeFeatsTest2 {\n     feats[3].set(1, 0.5f);\n \n     nodeIds[4] = 5;\n-    neighbors[4] = new long[]{1, 2, 3, 4, 8};\n+    neighbors[4] = new long[] {1, 2, 3, 4, 8};\n     indptr[5] = indptr[4] + 5;\n     idToNeighbors.put(nodeIds[4], neighbors[4]);\n     feats[4] = VFactory.sparseFloatVector(5, 1);\n     feats[4].set(2, 0.6f);\n \n     nodeIds[5] = 8;\n-    neighbors[5] = new long[]{1, 2, 3, 4, 5};\n+    neighbors[5] = new long[] {1, 2, 3, 4, 5};\n     indptr[6] = indptr[5] + 5;\n     idToNeighbors.put(nodeIds[5], neighbors[5]);\n     feats[5] = VFactory.sparseFloatVector(5, 2);\n@@ -219,7 +220,7 @@ public class GetNodeFeatsTest2 {\n     client.asyncUpdate(func).get();\n \n     // Sample the neighbors\n-    nodeIds = new long[]{1, 2, 3, 4, 5, 6, 7, 8};\n+    nodeIds = new long[] {1, 2, 3, 4, 5, 6, 7, 8};\n     GetNodeFeatsParam param = new GetNodeFeatsParam(matrixId, nodeIds);\n     Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client\n         .get(new GetNodeFeats(param)))).getResult();\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/546/GetNodeFeatsTest2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/546/GetNodeFeatsTest2.java\nindex d3db8389761..b0801347a36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/546/GetNodeFeatsTest2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/546/GetNodeFeatsTest2.java\n@@ -57,7 +57,6 @@ import org.junit.Test;\n public class GetNodeFeatsTest2 {\n \n   public static String NODE = \"node\";\n-\n   private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n   private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n@@ -67,9 +66,16 @@ public class GetNodeFeatsTest2 {\n   private WorkerId workerId;\n   private WorkerAttemptId workerAttempt0Id;\n \n+\n   int feaNum = 100000;\n+\n+\n   int start = 100;\n+\n+\n   int end = 1000000;\n+\n+\n   int nnz = 1000;\n \n   static {\n@@ -91,12 +97,10 @@ public class GetNodeFeatsTest2 {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n@@ -126,12 +130,9 @@ public class GetNodeFeatsTest2 {\n \n     // Start to run application\n     angelClient.run();\n-\n     Thread.sleep(5000);\n-\n     psId = new ParameterServerId(0);\n     psAttempt0Id = new PSAttemptId(psId, 0);\n-\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n@@ -148,9 +149,7 @@ public class GetNodeFeatsTest2 {\n     IntFloatVector[] feats = new IntFloatVector[6];\n     int[] indptr = new int[7];\n     long[][] neighbors = new long[6][];\n-\n     Long2ObjectOpenHashMap<long[]> idToNeighbors = new Long2ObjectOpenHashMap<>();\n-\n     indptr[0] = 0;\n     nodeIds[0] = 1;\n     neighbors[0] = new long[]{2, 3, 4, 5, 8};\n@@ -162,7 +161,6 @@ public class GetNodeFeatsTest2 {\n     feats[0].set(2, 0.4f);\n     feats[0].set(3, 0.5f);\n     feats[0].set(4, 0.6f);\n-\n     nodeIds[1] = 2;\n     neighbors[1] = new long[]{1, 3, 4, 5, 8};\n     indptr[2] = indptr[1] + 5;\n@@ -170,7 +168,6 @@ public class GetNodeFeatsTest2 {\n     feats[1] = VFactory.sparseFloatVector(5, 2);\n     feats[1].set(1, 0.4f);\n     feats[1].set(3, 0.5f);\n-\n     nodeIds[2] = 3;\n     neighbors[2] = new long[]{1, 2, 4, 5, 8};\n     indptr[3] = indptr[2] + 5;\n@@ -179,7 +176,6 @@ public class GetNodeFeatsTest2 {\n     feats[2].set(0, 0.4f);\n     feats[2].set(1, 0.5f);\n     feats[2].set(4, 0.6f);\n-\n     nodeIds[3] = 4;\n     neighbors[3] = new long[]{1, 2, 3, 5, 8};\n     indptr[4] = indptr[3] + 5;\n@@ -187,14 +183,12 @@ public class GetNodeFeatsTest2 {\n     feats[3] = VFactory.sparseFloatVector(5, 2);\n     feats[3].set(4, 0.6f);\n     feats[3].set(1, 0.5f);\n-\n     nodeIds[4] = 5;\n     neighbors[4] = new long[]{1, 2, 3, 4, 8};\n     indptr[5] = indptr[4] + 5;\n     idToNeighbors.put(nodeIds[4], neighbors[4]);\n     feats[4] = VFactory.sparseFloatVector(5, 1);\n     feats[4].set(2, 0.6f);\n-\n     nodeIds[5] = 8;\n     neighbors[5] = new long[]{1, 2, 3, 4, 5};\n     indptr[6] = indptr[5] + 5;\n@@ -214,18 +208,14 @@ public class GetNodeFeatsTest2 {\n \n     InitNeighbor initFunc = new InitNeighbor(new InitNeighborParam(matrixId, nodeIds, indptr, ns));\n     client.asyncUpdate(initFunc).get();\n-\n     InitNodeFeats func = new InitNodeFeats(new InitNodeFeatsParam(matrixId, nodeIds, feats));\n     client.asyncUpdate(func).get();\n \n     // Sample the neighbors\n     nodeIds = new long[]{1, 2, 3, 4, 5, 6, 7, 8};\n     GetNodeFeatsParam param = new GetNodeFeatsParam(matrixId, nodeIds);\n-    Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client\n-        .get(new GetNodeFeats(param)))).getResult();\n-    ObjectIterator<Long2ObjectMap.Entry<IntFloatVector>> iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n+    Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client.get(new GetNodeFeats(param)))).getResult();\n+    ObjectIterator<Long2ObjectMap.Entry<IntFloatVector>> iter = result.long2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n     Long2ObjectMap.Entry<IntFloatVector> entry;\n     while (iter.hasNext()) {\n@@ -238,21 +228,20 @@ public class GetNodeFeatsTest2 {\n           LOG.info(\"feat index \" + i + \" values = \" + values[i]);\n         }\n       } else if (vector.isSparse()) {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a sparse features\");\n-        ObjectIterator<Int2FloatMap.Entry> valueIter = vector\n-            .getStorage().entryIterator();\n-\n-        while (valueIter.hasNext()) {\n-          Int2FloatMap.Entry keyValue = valueIter.next();\n-          LOG.info(\"feat index \" + keyValue.getIntKey() + \" values = \" + keyValue.getFloatValue());\n-        }\n+               LOG.info(\"node \" + entry.getLongKey() + \" has a sparse features\");\n+               ObjectIterator<Int2FloatMap.Entry> valueIter = vector.getStorage().entryIterator();\n+               while (valueIter.hasNext()) {\n+                 Int2FloatMap.Entry keyValue = valueIter.next();\n+                 LOG.info(\"feat index \" + keyValue.getIntKey() + \" values = \" + keyValue.getFloatValue());\n+               }\n       } else {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a sorted features\");\n-        int[] keys = vector.getStorage().getIndices();\n-        float[] values = vector.getStorage().getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          LOG.info(\"feat index \" + keys[i] + \" values = \" + values[i]);\n-        }\n+               LOG.info(\"node \" + entry.getLongKey() + \" has a sorted features\");\n+\n+               int[] keys = vector.getStorage().getIndices();\n+               float[] values = vector.getStorage().getValues();\n+               for (int i = 0; i < values.length; i++) {\n+                 LOG.info(\"feat index \" + keys[i] + \" values = \" + values[i]);\n+               }\n       }\n     }\n   }\n@@ -262,4 +251,5 @@ public class GetNodeFeatsTest2 {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}