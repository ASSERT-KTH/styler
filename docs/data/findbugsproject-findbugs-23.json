{
    "project_name": "findbugsproject-findbugs",
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "493",
                "column": "5",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    private static void printPatterns(String filename, String header, FractionalMultiset<String> average,\n            FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n    \tDetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n        PrintWriter out = new PrintWriter(filename);\n        out.println(header);\n        for (Map.Entry<String, Double> e : average.entriesInDecreasingOrder()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/23/DBStats.java\nindex c54ef04a39f..d736d9ad75a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/23/DBStats.java\n@@ -490,7 +490,7 @@ public class DBStats {\n \n     private static void printPatterns(String filename, String header, FractionalMultiset<String> average,\n             FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n-    \tDetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n+                    DetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n         PrintWriter out = new PrintWriter(filename);\n         out.println(header);\n         for (Map.Entry<String, Double> e : average.entriesInDecreasingOrder()) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/23/DBStats.java\nindex c54ef04a39f..bae145579d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/23/DBStats.java\n@@ -55,6 +55,7 @@ import edu.umd.cs.findbugs.util.Util;\n public class DBStats {\n     enum BUG_STATUS {\n         ACCEPTED, ASSIGNED, FIXED, FIX_LATER, NEW, VERIFIED, VERIFIER_ASSIGNED, WILL_NOT_FIX, DUPLICATE;\n+\n         public static int score(String name) {\n             try {\n                 BUG_STATUS value = valueOf(name);\n@@ -75,49 +76,49 @@ public class DBStats {\n \n         public int score() {\n             switch (this) {\n-            case NEW:\n-                return 0;\n-\n-            case ACCEPTED:\n-            case DUPLICATE:\n-            case WILL_NOT_FIX:\n-                return 1;\n-\n-            case ASSIGNED:\n-            case FIXED:\n-            case FIX_LATER:\n-            case VERIFIED:\n-            case VERIFIER_ASSIGNED:\n-                return 2;\n-\n-            default:\n-                throw new IllegalStateException();\n+                case NEW:\n+                    return 0;\n+\n+                case ACCEPTED:\n+                case DUPLICATE:\n+                case WILL_NOT_FIX:\n+                    return 1;\n+\n+                case ASSIGNED:\n+                case FIXED:\n+                case FIX_LATER:\n+                case VERIFIED:\n+                case VERIFIER_ASSIGNED:\n+                    return 2;\n+\n+                default:\n+                    throw new IllegalStateException();\n             }\n         }\n \n         public int stage() {\n             switch (this) {\n-            case NEW:\n-            case DUPLICATE:\n-                return 0;\n-\n-            case ASSIGNED:\n-                return 1;\n-\n-            case WILL_NOT_FIX:\n-            case ACCEPTED:\n-                return 2;\n-\n-            case FIX_LATER:\n-                return 3;\n-            case FIXED:\n-                return 4;\n-            case VERIFIED:\n-            case VERIFIER_ASSIGNED:\n-                return 5;\n-\n-            default:\n-                throw new IllegalStateException();\n+                case NEW:\n+                case DUPLICATE:\n+                    return 0;\n+\n+                case ASSIGNED:\n+                    return 1;\n+\n+                case WILL_NOT_FIX:\n+                case ACCEPTED:\n+                    return 2;\n+\n+                case FIX_LATER:\n+                    return 3;\n+                case FIXED:\n+                    return 4;\n+                case VERIFIED:\n+                case VERIFIER_ASSIGNED:\n+                    return 5;\n+\n+                default:\n+                    throw new IllegalStateException();\n             }\n         }\n     }\n@@ -142,10 +143,12 @@ public class DBStats {\n \n         @Override\n         public boolean equals(Object obj) {\n-            if (this == obj)\n+            if (this == obj) {\n                 return true;\n-            if (!(obj instanceof TimeSeries))\n+            }\n+            if (!(obj instanceof TimeSeries)) {\n                 return false;\n+            }\n             TimeSeries other = (TimeSeries) obj;\n             return Util.nullSafeEquals(this.k, other.k) && Util.nullSafeEquals(this.v, other.v);\n         }\n@@ -168,13 +171,16 @@ public class DBStats {\n         }\n \n         public int compareTo(TimeSeries<K, V> o) {\n-            if (o == this)\n+            if (o == this) {\n                 return 0;\n+            }\n             int result = v.compareTo(o.v);\n-            if (result != 0)\n+            if (result != 0) {\n                 return result;\n-            if (keyHash < o.keyHash)\n+            }\n+            if (keyHash < o.keyHash) {\n                 return -1;\n+            }\n             return 1;\n         }\n     }\n@@ -187,17 +193,21 @@ public class DBStats {\n             BufferedReader in = new BufferedReader(new InputStreamReader(u.openStream()));\n             while (true) {\n                 String s = in.readLine();\n-                if (s == null)\n+                if (s == null) {\n                     break;\n-                if (s.trim().length() == 0)\n+                }\n+                if (s.trim().length() == 0) {\n                     continue;\n+                }\n                 int x = s.indexOf(':');\n \n-                if (x == -1)\n+                if (x == -1) {\n                     continue;\n+                }\n                 String office = s.substring(0, x);\n-                for (String person : s.substring(x + 1).split(\" \"))\n+                for (String person : s.substring(x + 1).split(\" \")) {\n                     officeLocation.put(person, office);\n+                }\n \n             }\n             in.close();\n@@ -235,7 +245,7 @@ public class DBStats {\n         ps.close();\n \n         ps = c.prepareStatement(\"SELECT who,  jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, timestamp, numIssues\"\n-                + \" FROM findbugs_invocation\");\n+            + \" FROM findbugs_invocation\");\n \n         MergeMap.MinMap<String, Timestamp> firstUse = new MergeMap.MinMap<String, Timestamp>();\n         MergeMap.MinMap<String, Timestamp> reviewers = new MergeMap.MinMap<String, Timestamp>();\n@@ -261,12 +271,14 @@ public class DBStats {\n             invocationTotal += jvmLoad + fbLoad + analysisLoad + dbSync;\n             loadTotal += fbLoad + analysisLoad + dbSync;\n             firstUse.put(who, when);\n-            if (numIssues > 3000)\n+            if (numIssues > 3000) {\n                 invocations.add(who);\n+            }\n             if (participants.add(who)) {\n                 String office = officeLocation.get(who);\n-                if (office == null)\n+                if (office == null) {\n                     office = \"unknown\";\n+                }\n                 participantsPerOffice.add(office);\n             }\n \n@@ -316,20 +328,20 @@ public class DBStats {\n                 uniqueReviews.put(issueReviewer, when);\n                 allIssues.add(designation);\n                 issueReviewedBy.add(who);\n-                if (rank != null)\n+                if (rank != null) {\n                     switch (rank) {\n-                    case SCARIEST:\n-                        scariestIssues.add(designation);\n-                        break;\n-                    case SCARY:\n-                        scaryIssues.add(designation);\n-                        break;\n-                    case TROUBLING:\n-                        troublingIssues.add(designation);\n-                        break;\n+                        case SCARIEST:\n+                            scariestIssues.add(designation);\n+                            break;\n+                        case SCARY:\n+                            scaryIssues.add(designation);\n+                            break;\n+                        case TROUBLING:\n+                            troublingIssues.add(designation);\n+                            break;\n \n                     }\n-                else {\n+                } else {\n                     if (missingRank.add(id)) {\n                         System.out.println(\"No rank for \" + id);\n                     }\n@@ -367,17 +379,19 @@ public class DBStats {\n             String postmortem = rs.getString(col++);\n \n             Timestamp when = rs.getTimestamp(col++);\n-            if (!bugsSeen.add(id))\n+            if (!bugsSeen.add(id)) {\n                 continue;\n+            }\n             Integer rank = detailedBugRank.get(hash);\n             if (rank == null) {\n                 System.out.println(\"Could not find hash \" + hash + \" for \" + id);\n             }\n             if (assignedTo != null && !\"NEW\".equals(status) && (rank != null && rank <= 4 || postmortem != null)) {\n-                if (postmortem != null)\n+                if (postmortem != null) {\n                     scariestBugs.printf(\"%s,%s,%s,%d,POSTMORTEM%n\", assignedTo, id, status, rank);\n-                else\n+                } else {\n                     scariestBugs.printf(\"%s,%s,%s,%d%n\", assignedTo, id, status, rank);\n+                }\n             }\n \n             if (!id.equals(DBCloud.PENDING) && !id.equals(DBCloud.NONE)) {\n@@ -396,8 +410,9 @@ public class DBStats {\n             int value = e.getValue();\n             Integer issue = e.getKey();\n             int num = scoredReviews.getCount(issue);\n-            if (num == 0)\n+            if (num == 0) {\n                 continue;\n+            }\n             double average = value / (double) num;\n             int score = (int) Math.round(average);\n             double square = squareScoreForIssue.getCount(issue) / (double) num;\n@@ -429,8 +444,9 @@ public class DBStats {\n             Integer key = e1.getKey();\n             int elementCount = reviewsForIssue.getCount(key);\n             Double v = e1.getValue();\n-            if (elementCount >= 3 && v >= 0.5)\n+            if (elementCount >= 3 && v >= 0.5) {\n                 out1.printf(\"%3.1f,%3.1f,%d,%d,%s%n\", v, issueScore.getValue(key), elementCount, key, bugPattern.get(key));\n+            }\n \n         }\n         out1.close();\n@@ -489,16 +505,17 @@ public class DBStats {\n     }\n \n     private static void printPatterns(String filename, String header, FractionalMultiset<String> average,\n-            FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n-    \tDetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n+                                      FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n+        DetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n         PrintWriter out = new PrintWriter(filename);\n         out.println(header);\n         for (Map.Entry<String, Double> e : average.entriesInDecreasingOrder()) {\n             String key = e.getKey();\n             BugPattern pattern = i18n.lookupBugPattern(key);\n-            if (pattern != null)\n+            if (pattern != null) {\n                 out.printf(\"%1.1f,%1.1f,%d,%d,%s%n\", e.getValue(), variance.getValue(key), BugRanker.findRank(pattern, 1),\n-                        count.getCount(key), key);\n+                    count.getCount(key), key);\n+            }\n         }\n         out.close();\n     }\n@@ -507,21 +524,22 @@ public class DBStats {\n      * @param value\n      */\n     private static UserDesignation getDesignationFromScore(int value) {\n-        if (value <= -3)\n+        if (value <= -3) {\n             return UserDesignation.BAD_ANALYSIS;\n-        else\n+        } else {\n             switch (value) {\n-            case -2:\n-                return UserDesignation.NOT_A_BUG;\n-            case -1:\n-                return UserDesignation.MOSTLY_HARMLESS;\n-            case 0:\n-                return UserDesignation.NEEDS_STUDY;\n-            case 1:\n-                return UserDesignation.SHOULD_FIX;\n-            default:\n-                return UserDesignation.MUST_FIX;\n+                case -2:\n+                    return UserDesignation.NOT_A_BUG;\n+                case -1:\n+                    return UserDesignation.MOSTLY_HARMLESS;\n+                case 0:\n+                    return UserDesignation.NEEDS_STUDY;\n+                case 1:\n+                    return UserDesignation.SHOULD_FIX;\n+                default:\n+                    return UserDesignation.MUST_FIX;\n             }\n+        }\n     }\n \n     /**\n@@ -532,24 +550,23 @@ public class DBStats {\n     private static String getDesignationTitle(I18N i18n, edu.umd.cs.findbugs.cloud.Cloud.UserDesignation d) {\n         String designation;\n         switch (d) {\n-        case OBSOLETE_CODE:\n-            designation = \"obsolete code\";\n-            break;\n-        case MUST_FIX:\n-            designation = \"Must fix\";\n-            break;\n-        case SHOULD_FIX:\n-            designation = \"Should fix\";\n-            break;\n-        default:\n-            designation = i18n.getUserDesignation(d.name());\n+            case OBSOLETE_CODE:\n+                designation = \"obsolete code\";\n+                break;\n+            case MUST_FIX:\n+                designation = \"Must fix\";\n+                break;\n+            case SHOULD_FIX:\n+                designation = \"Should fix\";\n+                break;\n+            default:\n+                designation = i18n.getUserDesignation(d.name());\n         }\n         return designation;\n     }\n \n     /**\n-     * @param out\n-     *            TODO\n+     * @param out       TODO\n      * @param allIssues\n      */\n     private static void printMultiset(PrintWriter out, String title, Multiset<String> allIssues) {\n@@ -561,14 +578,15 @@ public class DBStats {\n      * @param allIssues\n      */\n     private static void printMultisetContents(PrintWriter out, String prefix, Multiset<String> allIssues) {\n-        for (Map.Entry<String, Integer> e : allIssues.entrySet())\n+        for (Map.Entry<String, Integer> e : allIssues.entrySet()) {\n             out.printf(\"%s%s,%d%n\", prefix, e.getKey(), e.getValue());\n+        }\n     }\n \n     final static Date fixitStart = new Date(\"May 11, 2009\");\n \n     private static void printTimeSeries(String filename, String title, MergeMap.MinMap<String, Timestamp> firstUse)\n-            throws FileNotFoundException {\n+        throws FileNotFoundException {\n         PrintWriter out = new PrintWriter(filename);\n         out.println(title + \",time,full time\");\n         TreeSet<TimeSeries<String, Timestamp>> series = new TreeSet<TimeSeries<String, Timestamp>>();\n@@ -586,8 +604,9 @@ public class DBStats {\n         for (Map.Entry<Timestamp, Integer> e : counter.entrySet()) {\n             Timestamp time = e.getKey();\n             total += e.getValue();\n-            if (time.after(fixitStart))\n+            if (time.after(fixitStart)) {\n                 out.printf(\"%d,%s,%s%n\", total, format.format(time), defaultFormat.format(time));\n+            }\n         }\n         out.close();\n \n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/23/DBStats.java\nindex c54ef04a39f..9acf89b3a6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/23/DBStats.java\n@@ -55,7 +55,8 @@ import edu.umd.cs.findbugs.util.Util;\n public class DBStats {\n     enum BUG_STATUS {\n         ACCEPTED, ASSIGNED, FIXED, FIX_LATER, NEW, VERIFIED, VERIFIER_ASSIGNED, WILL_NOT_FIX, DUPLICATE;\n-        public static int score(String name) {\n+\n+public static int score(String name) {\n             try {\n                 BUG_STATUS value = valueOf(name);\n                 return value.score();\n@@ -328,8 +329,7 @@ public class DBStats {\n                         troublingIssues.add(designation);\n                         break;\n \n-                    }\n-                else {\n+                    } else {\n                     if (missingRank.add(id)) {\n                         System.out.println(\"No rank for \" + id);\n                     }\n@@ -490,8 +490,8 @@ public class DBStats {\n \n     private static void printPatterns(String filename, String header, FractionalMultiset<String> average,\n             FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n-    \tDetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n-        PrintWriter out = new PrintWriter(filename);\n+    DetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n+PrintWriter out = new PrintWriter(filename);\n         out.println(header);\n         for (Map.Entry<String, Double> e : average.entriesInDecreasingOrder()) {\n             String key = e.getKey();\n@@ -593,4 +593,4 @@ public class DBStats {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/23/DBStats.java\nindex c54ef04a39f..0c0c15097a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/23/DBStats.java\n@@ -36,7 +36,6 @@ import java.util.Map;\n import java.util.Properties;\n import java.util.TreeMap;\n import java.util.TreeSet;\n-\n import edu.umd.cs.findbugs.BugPattern;\n import edu.umd.cs.findbugs.BugRankCategory;\n import edu.umd.cs.findbugs.BugRanker;\n@@ -52,9 +51,11 @@ import edu.umd.cs.findbugs.util.Util;\n /**\n  * @author pwilliam\n  */\n+\n public class DBStats {\n     enum BUG_STATUS {\n         ACCEPTED, ASSIGNED, FIXED, FIX_LATER, NEW, VERIFIED, VERIFIER_ASSIGNED, WILL_NOT_FIX, DUPLICATE;\n+\n         public static int score(String name) {\n             try {\n                 BUG_STATUS value = valueOf(name);\n@@ -77,19 +78,16 @@ public class DBStats {\n             switch (this) {\n             case NEW:\n                 return 0;\n-\n             case ACCEPTED:\n             case DUPLICATE:\n             case WILL_NOT_FIX:\n                 return 1;\n-\n             case ASSIGNED:\n             case FIXED:\n             case FIX_LATER:\n             case VERIFIED:\n             case VERIFIER_ASSIGNED:\n                 return 2;\n-\n             default:\n                 throw new IllegalStateException();\n             }\n@@ -100,14 +98,11 @@ public class DBStats {\n             case NEW:\n             case DUPLICATE:\n                 return 0;\n-\n             case ASSIGNED:\n                 return 1;\n-\n             case WILL_NOT_FIX:\n             case ACCEPTED:\n                 return 2;\n-\n             case FIX_LATER:\n                 return 3;\n             case FIXED:\n@@ -115,7 +110,6 @@ public class DBStats {\n             case VERIFIED:\n             case VERIFIER_ASSIGNED:\n                 return 5;\n-\n             default:\n                 throw new IllegalStateException();\n             }\n@@ -156,6 +150,7 @@ public class DBStats {\n \n         final V v;\n \n+\n         public TimeSeries(K k, V v) {\n             this.k = k;\n             this.keyHash = System.identityHashCode(k);\n@@ -181,7 +176,6 @@ public class DBStats {\n \n     public static void main(String args[]) throws Exception {\n         Map<String, String> officeLocation = new HashMap<String, String>();\n-\n         URL u = DetectorFactoryCollection.getCoreResource(\"offices.properties\");\n         if (u != null) {\n             BufferedReader in = new BufferedReader(new InputStreamReader(u.openStream()));\n@@ -192,28 +186,23 @@ public class DBStats {\n                 if (s.trim().length() == 0)\n                     continue;\n                 int x = s.indexOf(':');\n-\n                 if (x == -1)\n                     continue;\n                 String office = s.substring(0, x);\n                 for (String person : s.substring(x + 1).split(\" \"))\n                     officeLocation.put(person, office);\n-\n             }\n             in.close();\n         }\n         I18N i18n = I18N.instance();\n \n         // TODO: this this\n-\n         DBCloud cloud = new DBCloud(null, null, new Properties());\n         cloud.initialize();\n         Connection c = cloud.getConnection();\n-\n         Map<Integer, BugRankCategory> bugRank = new HashMap<Integer, BugRankCategory>();\n         Map<Integer, String> bugPattern = new HashMap<Integer, String>();\n         Map<String, Integer> detailedBugRank = new HashMap<String, Integer>();\n-\n         PreparedStatement ps = c.prepareStatement(\"SELECT id, hash, bugPattern, priority FROM findbugs_issue\");\n         ResultSet rs = ps.executeQuery();\n         DetectorFactoryCollection detectorfactory = DetectorFactoryCollection.instance();\n@@ -233,14 +222,10 @@ public class DBStats {\n         }\n         rs.close();\n         ps.close();\n-\n-        ps = c.prepareStatement(\"SELECT who,  jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, timestamp, numIssues\"\n-                + \" FROM findbugs_invocation\");\n-\n+        ps = c.prepareStatement(\"SELECT who,  jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, timestamp, numIssues\" + \" FROM findbugs_invocation\");\n         MergeMap.MinMap<String, Timestamp> firstUse = new MergeMap.MinMap<String, Timestamp>();\n         MergeMap.MinMap<String, Timestamp> reviewers = new MergeMap.MinMap<String, Timestamp>();\n         MergeMap.MinMap<String, Timestamp> uniqueReviews = new MergeMap.MinMap<String, Timestamp>();\n-\n         HashSet<String> participants = new HashSet<String>();\n         Multiset<String> invocations = new Multiset<String>();\n         Multiset<String> participantsPerOffice = new Multiset<String>(new TreeMap<String, Integer>());\n@@ -269,16 +254,12 @@ public class DBStats {\n                     office = \"unknown\";\n                 participantsPerOffice.add(office);\n             }\n-\n         }\n         rs.close();\n         ps.close();\n-\n         ps = c.prepareStatement(\"SELECT id, issueId, who, designation, timestamp FROM findbugs_evaluation ORDER BY timestamp DESC\");\n         rs = ps.executeQuery();\n-\n         Multiset<String> issueReviewedBy = new Multiset<String>();\n-\n         Multiset<String> allIssues = new Multiset<String>();\n         Multiset<String> scariestIssues = new Multiset<String>();\n         Multiset<String> scaryIssues = new Multiset<String>();\n@@ -287,10 +268,8 @@ public class DBStats {\n         Multiset<Integer> squareScoreForIssue = new Multiset<Integer>();\n         Multiset<Integer> reviewsForIssue = new Multiset<Integer>();\n         Multiset<Integer> scoredReviews = new Multiset<Integer>();\n-\n         HashSet<String> issueReviews = new HashSet<String>();\n         HashSet<Integer> missingRank = new HashSet<Integer>();\n-\n         while (rs.next()) {\n             int col = 1;\n             int id = rs.getInt(col++);\n@@ -300,13 +279,11 @@ public class DBStats {\n             UserDesignation d = UserDesignation.valueOf(designation);\n             designation = getDesignationTitle(i18n, d);\n             int score = d.score();\n-\n             if (d != UserDesignation.OBSOLETE_CODE) {\n                 scoreForIssue.add(issueId, score);\n                 squareScoreForIssue.add(issueId, score * score);\n                 scoredReviews.add(issueId);\n             }\n-\n             reviewsForIssue.add(issueId);\n             Timestamp when = rs.getTimestamp(col++);\n             BugRankCategory rank = bugRank.get(issueId);\n@@ -316,31 +293,25 @@ public class DBStats {\n                 uniqueReviews.put(issueReviewer, when);\n                 allIssues.add(designation);\n                 issueReviewedBy.add(who);\n-                if (rank != null)\n-                    switch (rank) {\n-                    case SCARIEST:\n-                        scariestIssues.add(designation);\n-                        break;\n-                    case SCARY:\n-                        scaryIssues.add(designation);\n-                        break;\n-                    case TROUBLING:\n-                        troublingIssues.add(designation);\n-                        break;\n-\n-                    }\n-                else {\n+                if (rank != null) switch (rank) {\n+                                  case SCARIEST:\n+                                      scariestIssues.add(designation);\n+                                      break;\n+                                  case SCARY:\n+                                      scaryIssues.add(designation);\n+                                      break;\n+                                  case TROUBLING:\n+                                      troublingIssues.add(designation);\n+                                      break;\n+                                  } else {\n                     if (missingRank.add(id)) {\n                         System.out.println(\"No rank for \" + id);\n                     }\n-\n                 }\n             }\n-\n         }\n         rs.close();\n         ps.close();\n-\n         PrintWriter scariestBugs = new PrintWriter(\"bugReportsForScariestIssues.csv\");\n         scariestBugs.println(\"assignedTo,status,rank,note\");\n         Multiset<String> bugStatus = new Multiset<String>();\n@@ -351,21 +322,18 @@ public class DBStats {\n         FractionalMultiset<String> patternVariance = new FractionalMultiset<String>();\n         FractionalMultiset<Integer> issueVariance = new FractionalMultiset<Integer>();\n         FractionalMultiset<Integer> issueScore = new FractionalMultiset<Integer>();\n-\n         Multiset<String> bugsFiled = new Multiset<String>();\n         ps = c.prepareStatement(\"SELECT bugReportId,hash,status, whoFiled,assignedTo, postmortem, timestamp FROM findbugs_bugreport ORDER BY timestamp DESC\");\n         rs = ps.executeQuery();\n+\n         while (rs.next()) {\n             int col = 1;\n             String id = rs.getString(col++);\n             String hash = rs.getString(col++);\n-\n             String status = rs.getString(col++);\n-\n             String who = rs.getString(col++);\n             String assignedTo = rs.getString(col++);\n             String postmortem = rs.getString(col++);\n-\n             Timestamp when = rs.getTimestamp(col++);\n             if (!bugsSeen.add(id))\n                 continue;\n@@ -379,14 +347,12 @@ public class DBStats {\n                 else\n                     scariestBugs.printf(\"%s,%s,%s,%d%n\", assignedTo, id, status, rank);\n             }\n-\n             if (!id.equals(DBCloud.PENDING) && !id.equals(DBCloud.NONE)) {\n                 bugStatus.add(status);\n                 bugsFiled.add(who);\n                 bugScore.add(who, BUG_STATUS.score(status));\n             }\n         }\n-\n         rs.close();\n         ps.close();\n         c.close();\n@@ -402,7 +368,6 @@ public class DBStats {\n             int score = (int) Math.round(average);\n             double square = squareScoreForIssue.getCount(issue) / (double) num;\n             double variance = square - average * average;\n-\n             String pattern = bugPattern.get(issue);\n             patternCount.add(pattern);\n             patternScore.add(pattern, average);\n@@ -412,17 +377,12 @@ public class DBStats {\n \n             // System.out.printf(\"%s %2d %2d%n\", score, value, num);\n             overallEvaluation.add(getDesignationTitle(i18n, getDesignationFromScore(score)));\n-\n         }\n-\n         patternScore.turnTotalIntoAverage(patternCount);\n         patternVariance.turnTotalIntoAverage(patternCount);\n-\n         printPatterns(\"patternScore.csv\", \"average,variance,rank,count,pattern\", patternScore, patternVariance, patternCount);\n-\n         issueScore.turnTotalIntoAverage(reviewsForIssue);\n         issueVariance.turnTotalIntoAverage(reviewsForIssue);\n-\n         PrintWriter out1 = new PrintWriter(\"issueVariance.csv\");\n         out1.println(\"variance,average,count,key,pattern\");\n         for (Map.Entry<Integer, Double> e1 : issueVariance.entriesInDecreasingOrder()) {\n@@ -431,74 +391,66 @@ public class DBStats {\n             Double v = e1.getValue();\n             if (elementCount >= 3 && v >= 0.5)\n                 out1.printf(\"%3.1f,%3.1f,%d,%d,%s%n\", v, issueScore.getValue(key), elementCount, key, bugPattern.get(key));\n-\n         }\n         out1.close();\n-\n         System.out.printf(\"%6d invocations%n\", invocationCount);\n         System.out.printf(\"%6d invocations time (secs)%n\", invocationTotal / invocationCount / 1000);\n         System.out.printf(\"%6d load time (secs)%n\", loadTotal / invocationCount / 1000);\n         System.out.println();\n-\n         printTimeSeries(\"users.csv\", \"Unique users\", firstUse);\n         printTimeSeries(\"reviewers.csv\", \"Unique reviewers\", reviewers);\n         printTimeSeries(\"reviews.csv\", \"Total reviews\", uniqueReviews);\n-\n         PrintWriter out = new PrintWriter(\"bug_status.csv\");\n         out.println(\"Status,Number of bugs\");\n         printMultiset(out, \"Bug status\", bugStatus);\n         out.close();\n-\n         out = new PrintWriter(\"reviews_by_category.csv\");\n         out.println(\"Category,Number of reviews\");\n         printMultisetContents(out, \"\", allIssues);\n         out.close();\n-\n         out = new PrintWriter(\"overall_review_of_issue.csv\");\n         out.println(\"Category,Number of issues\");\n         printMultisetContents(out, \"\", overallEvaluation);\n         out.close();\n-\n         out = new PrintWriter(\"reviews_by_rank_and_category.csv\");\n         out.println(\"Rank,Category,Number of reviews\");\n         printMultisetContents(out, \"Scariest,\", scariestIssues);\n         printMultisetContents(out, \"Scary,\", scaryIssues);\n         printMultisetContents(out, \"Troubling,\", troublingIssues);\n         out.close();\n-\n         out = new PrintWriter(\"bugs_filed.csv\");\n         out.println(\"rank,bugs filed,who\");\n         AbstractCloud.printLeaderBoard2(out, bugsFiled, 200, null, \"%s,%s,%s\\n\", \"participants per office\");\n         out.close();\n-\n         out = new PrintWriter(\"bug_score.csv\");\n         out.println(\"rank,bug score,who\");\n         AbstractCloud.printLeaderBoard2(out, bugScore, 200, null, \"%s,%s,%s\\n\", \"participants per office\");\n         out.close();\n-\n         out = new PrintWriter(\"most_participants_by_office.csv\");\n         out.println(\"rank,participants,office\");\n         AbstractCloud.printLeaderBoard2(out, participantsPerOffice, 100, null, \"%s,%s,%s\\n\", \"participants per office\");\n         out.close();\n-\n         out = new PrintWriter(\"most_issues_reviewed_individual.csv\");\n         out.println(\"rank,reviews,reviewers\");\n         AbstractCloud.printLeaderBoard2(out, issueReviewedBy, 10000, null, \"%s,%s,%s\\n\", \"num issues reviewed\");\n         out.close();\n-\n     }\n \n-    private static void printPatterns(String filename, String header, FractionalMultiset<String> average,\n-            FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n-    \tDetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n+\n+    private static void printPatterns(String filename, String header, FractionalMultiset<String> average, FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n+        DetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n         PrintWriter out = new PrintWriter(filename);\n         out.println(header);\n         for (Map.Entry<String, Double> e : average.entriesInDecreasingOrder()) {\n             String key = e.getKey();\n             BugPattern pattern = i18n.lookupBugPattern(key);\n             if (pattern != null)\n-                out.printf(\"%1.1f,%1.1f,%d,%d,%s%n\", e.getValue(), variance.getValue(key), BugRanker.findRank(pattern, 1),\n-                        count.getCount(key), key);\n+                out.printf(\"%1.1f,%1.1f,%d,%d,%s%n\",\n+                           e.getValue(),\n+                           variance.getValue(key),\n+                           BugRanker.findRank(pattern, 1),\n+                           count.getCount(key),\n+                           key);\n         }\n         out.close();\n     }\n@@ -506,6 +458,8 @@ public class DBStats {\n     /**\n      * @param value\n      */\n+\n+\n     private static UserDesignation getDesignationFromScore(int value) {\n         if (value <= -3)\n             return UserDesignation.BAD_ANALYSIS;\n@@ -529,6 +483,8 @@ public class DBStats {\n      * @param d\n      * @return\n      */\n+\n+\n     private static String getDesignationTitle(I18N i18n, edu.umd.cs.findbugs.cloud.Cloud.UserDesignation d) {\n         String designation;\n         switch (d) {\n@@ -552,14 +508,17 @@ public class DBStats {\n      *            TODO\n      * @param allIssues\n      */\n+\n+\n     private static void printMultiset(PrintWriter out, String title, Multiset<String> allIssues) {\n         printMultisetContents(out, \"\", allIssues);\n-\n     }\n \n     /**\n      * @param allIssues\n      */\n+\n+\n     private static void printMultisetContents(PrintWriter out, String prefix, Multiset<String> allIssues) {\n         for (Map.Entry<String, Integer> e : allIssues.entrySet())\n             out.printf(\"%s%s,%d%n\", prefix, e.getKey(), e.getValue());\n@@ -567,15 +526,13 @@ public class DBStats {\n \n     final static Date fixitStart = new Date(\"May 11, 2009\");\n \n-    private static void printTimeSeries(String filename, String title, MergeMap.MinMap<String, Timestamp> firstUse)\n-            throws FileNotFoundException {\n+    private static void printTimeSeries(String filename, String title, MergeMap.MinMap<String, Timestamp> firstUse) throws FileNotFoundException {\n         PrintWriter out = new PrintWriter(filename);\n         out.println(title + \",time,full time\");\n         TreeSet<TimeSeries<String, Timestamp>> series = new TreeSet<TimeSeries<String, Timestamp>>();\n         for (Map.Entry<String, Timestamp> e : firstUse.entrySet()) {\n             series.add(new TimeSeries<String, Timestamp>(e.getKey(), e.getValue()));\n         }\n-\n         Multiset<Timestamp> counter = new Multiset<Timestamp>(new TreeMap<Timestamp, Integer>());\n         for (TimeSeries<String, Timestamp> t : series) {\n             counter.add(bucketByHour(t.v));\n@@ -590,7 +547,5 @@ public class DBStats {\n                 out.printf(\"%d,%s,%s%n\", total, format.format(time), defaultFormat.format(time));\n         }\n         out.close();\n-\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/23/DBStats.java\nindex c54ef04a39f..d736d9ad75a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/23/DBStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/23/DBStats.java\n@@ -490,7 +490,7 @@ public class DBStats {\n \n     private static void printPatterns(String filename, String header, FractionalMultiset<String> average,\n             FractionalMultiset<String> variance, Multiset<String> count) throws FileNotFoundException {\n-    \tDetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n+                    DetectorFactoryCollection i18n = DetectorFactoryCollection.instance();\n         PrintWriter out = new PrintWriter(filename);\n         out.println(header);\n         for (Map.Entry<String, Double> e : average.entriesInDecreasingOrder()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}