{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4073",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4073/BinaryLatch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4073/BinaryLatch.java\nindex a0bdcebe02a..32533adee24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4073/BinaryLatch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4073/BinaryLatch.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.concurrent;\n \n import java.util.concurrent.locks.LockSupport;\n@@ -34,160 +35,159 @@ import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n  */\n public class BinaryLatch\n {\n-    private static class Node\n-    {\n-        volatile Node next;\n-    }\n+  private static class Node\n+  {\n+    volatile Node next;\n+  }\n \n-    private static final class Waiter extends Node\n-    {\n-        final Thread waitingThread = Thread.currentThread();\n-        volatile byte state;\n-    }\n+  private static final class Waiter extends Node\n+  {\n+    final Thread waitingThread = Thread.currentThread();\n+    volatile byte state;\n+  }\n \n-    private static final long stackOffset =\n-            UnsafeUtil.getFieldOffset( BinaryLatch.class, \"stack\" );\n-    private static final Node end = new Node();\n-    private static final Node released = new Node();\n-    private static final byte waiterStateSuccessor = 1;\n-    private static final byte waiterStateReleased = 2;\n+  private static final long stackOffset =\n+      UnsafeUtil.getFieldOffset(BinaryLatch.class, \"stack\");\n+  private static final Node end = new Node();\n+  private static final Node released = new Node();\n+  private static final byte waiterStateSuccessor = 1;\n+  private static final byte waiterStateReleased = 2;\n \n-    @SuppressWarnings( \"unused\" )\n-    private volatile Node stack; // written to via unsafe\n+  @SuppressWarnings(\"unused\")\n+  private volatile Node stack; // written to via unsafe\n \n-    /**\n-     * Release the latch, thereby unblocking all current and future calls to {@link #await()}.\n-     */\n-    public void release()\n+  /**\n+   * Release the latch, thereby unblocking all current and future calls to {@link #await()}.\n+   */\n+  public void release()\n+  {\n+    // Once the release sentinel is on the stack, it can never (observably) leave.\n+    // Waiters might accidentally remove the released sentinel from the stack for brief periods of time, but then\n+    // they are required to fix the situation and put it back.\n+    // Atomically swapping the release sentinel onto the stack will give us back all the waiters, if any.\n+    Node waiters = (Node) UnsafeUtil.getAndSetObject(this, stackOffset, released);\n+    if (waiters == null)\n     {\n-        // Once the release sentinel is on the stack, it can never (observably) leave.\n-        // Waiters might accidentally remove the released sentinel from the stack for brief periods of time, but then\n-        // they are required to fix the situation and put it back.\n-        // Atomically swapping the release sentinel onto the stack will give us back all the waiters, if any.\n-        Node waiters = (Node) UnsafeUtil.getAndSetObject( this, stackOffset, released );\n-        if ( waiters == null )\n-        {\n-            // There are no waiters to unpark, so don't bother.\n-            return;\n-        }\n-        unparkSuccessor( waiters );\n+      // There are no waiters to unpark, so don't bother.\n+      return;\n     }\n+    unparkSuccessor(waiters);\n+  }\n \n-    private void unparkSuccessor( Node waiters )\n+  private void unparkSuccessor(Node waiters)\n+  {\n+    if (waiters.getClass() == Waiter.class)\n     {\n-        if ( waiters.getClass() == Waiter.class )\n-        {\n-            Waiter waiter = (Waiter) waiters;\n-            waiter.state = waiterStateSuccessor;\n-            LockSupport.unpark( waiter.waitingThread );\n-        }\n+      Waiter waiter = (Waiter) waiters;\n+      waiter.state = waiterStateSuccessor;\n+      LockSupport.unpark(waiter.waitingThread);\n     }\n+  }\n \n-    /**\n-     * Wait for the latch to be released, blocking the current thread if necessary.\n-     * <p>\n-     * This method returns immediately if the latch has already been released.\n-     */\n-    public void await()\n+  /**\n+   * Wait for the latch to be released, blocking the current thread if necessary.\n+   * <p>\n+   * This method returns immediately if the latch has already been released.\n+   */\n+  public void await()\n+  {\n+    // Put in a local variable to avoid volatile reads we don't need.\n+    Node state = stack;\n+    if (state != released)\n     {\n-        // Put in a local variable to avoid volatile reads we don't need.\n-        Node state = stack;\n-        if ( state != released )\n+      // The latch hasn't obviously already been released, so we want to add a waiter to the stack. Trouble is,\n+      // we might race with release here, so we need to re-check for release after we've modified the stack.\n+      Waiter waiter = new Waiter();\n+      state = (Node) UnsafeUtil.getAndSetObject(this, stackOffset, waiter);\n+      if (state == released)\n+      {\n+        // If we get 'released' back from the swap, then we raced with release, and it is our job to put the\n+        // released sentinel back. Doing so can, however, return more waiters that have added themselves in\n+        // the mean time. If we find such waiters, then we must make sure to unpark them. Note that we will\n+        // never get a null back from this swap, because we at least added our own waiter earlier.\n+        Node others = (Node) UnsafeUtil.getAndSetObject(this, stackOffset, released);\n+        // Set our next pointer to 'released' as a signal to other threads who might be going through the\n+        // stack in the isReleased check.\n+        waiter.next = released;\n+        unparkAll(others);\n+      } else\n+      {\n+        // It looks like the latch hasn't yet been released, so we are going to park. Before that, we must\n+        // assign a non-null value to our next pointer, so other threads will know that we have been properly\n+        // enqueued. We use the 'end' sentinel as a marker when there's otherwise no other next node.\n+        waiter.next = state == null ? end : state;\n+        do\n         {\n-            // The latch hasn't obviously already been released, so we want to add a waiter to the stack. Trouble is,\n-            // we might race with release here, so we need to re-check for release after we've modified the stack.\n-            Waiter waiter = new Waiter();\n-            state = (Node) UnsafeUtil.getAndSetObject( this, stackOffset, waiter );\n-            if ( state == released )\n-            {\n-                // If we get 'released' back from the swap, then we raced with release, and it is our job to put the\n-                // released sentinel back. Doing so can, however, return more waiters that have added themselves in\n-                // the mean time. If we find such waiters, then we must make sure to unpark them. Note that we will\n-                // never get a null back from this swap, because we at least added our own waiter earlier.\n-                Node others = (Node) UnsafeUtil.getAndSetObject( this, stackOffset, released );\n-                // Set our next pointer to 'released' as a signal to other threads who might be going through the\n-                // stack in the isReleased check.\n-                waiter.next = released;\n-                unparkAll( others );\n-            }\n-            else\n-            {\n-                // It looks like the latch hasn't yet been released, so we are going to park. Before that, we must\n-                // assign a non-null value to our next pointer, so other threads will know that we have been properly\n-                // enqueued. We use the 'end' sentinel as a marker when there's otherwise no other next node.\n-                waiter.next = state == null ? end : state;\n-                do\n-                {\n-                    // Park may wake up spuriously, so we have to loop on it until we observe from the state of the\n-                    // stack, that the latch has been released.\n-                    LockSupport.park( this );\n-                }\n-                while ( !isReleased( waiter ) );\n-            }\n+          // Park may wake up spuriously, so we have to loop on it until we observe from the state of the\n+          // stack, that the latch has been released.\n+          LockSupport.park(this);\n         }\n+        while (!isReleased(waiter));\n+      }\n     }\n+  }\n \n-    private boolean isReleased( Waiter waiter )\n+  private boolean isReleased(Waiter waiter)\n+  {\n+    // If we are the most recently enqueued waiter on the stack before the release, then that makes us the\n+    // successor. As the successor, it is our job to wake up all the other threads. We can *only* become the\n+    // successor if the latch has been released, so there's no need to check anything else in this case.\n+    if (waiter.state == waiterStateSuccessor)\n     {\n-        // If we are the most recently enqueued waiter on the stack before the release, then that makes us the\n-        // successor. As the successor, it is our job to wake up all the other threads. We can *only* become the\n-        // successor if the latch has been released, so there's no need to check anything else in this case.\n-        if ( waiter.state == waiterStateSuccessor )\n-        {\n-            unparkAll( waiter.next );\n-            return true;\n-        }\n+      unparkAll(waiter.next);\n+      return true;\n+    }\n \n-        // Otherwise we have to go through the entire stack and look for the 'released' sentinel, since we might be\n-        // racing with the 'state == released' branch in await.\n-        Node state = stack;\n-        do\n+    // Otherwise we have to go through the entire stack and look for the 'released' sentinel, since we might be\n+    // racing with the 'state == released' branch in await.\n+    Node state = stack;\n+    do\n+    {\n+      if (state == released)\n+      {\n+        // We've been released!\n+        if (waiter.state != waiterStateReleased)\n         {\n-            if ( state == released )\n-            {\n-                // We've been released!\n-                if ( waiter.state != waiterStateReleased )\n-                {\n-                    // But it doesn't look like someone else is unparking the threads, so let's do that.\n-                    // This can happen if we missed the signal to become the successor.\n-                    unparkAll( waiter.next );\n-                }\n-                return true;\n-            }\n-\n-            Node next;\n-            do\n-            {\n-                // We loop on reading the next pointer because we might observe an enqueued node before its next\n-                // pointer has been properly assigned. This is a benign race because we know that the next pointer of a\n-                // properly enqueued node is never null.\n-                next = state.next;\n-            }\n-            while ( next == null );\n-            state = next;\n+          // But it doesn't look like someone else is unparking the threads, so let's do that.\n+          // This can happen if we missed the signal to become the successor.\n+          unparkAll(waiter.next);\n         }\n-        while ( state != end );\n-        // Reaching the end of the stack without seeing 'released' means we're not released.\n-        return false;\n+        return true;\n+      }\n+\n+      Node next;\n+      do\n+      {\n+        // We loop on reading the next pointer because we might observe an enqueued node before its next\n+        // pointer has been properly assigned. This is a benign race because we know that the next pointer of a\n+        // properly enqueued node is never null.\n+        next = state.next;\n+      }\n+      while (next == null);\n+      state = next;\n     }\n+    while (state != end);\n+    // Reaching the end of the stack without seeing 'released' means we're not released.\n+    return false;\n+  }\n \n-    private void unparkAll( Node waiters )\n+  private void unparkAll(Node waiters)\n+  {\n+    // If we find a node that is not a waiter, then it is either 'end' or 'released'. Looking at the type pointer\n+    // is the cheapest way to make this check.\n+    while (waiters.getClass() == Waiter.class)\n     {\n-        // If we find a node that is not a waiter, then it is either 'end' or 'released'. Looking at the type pointer\n-        // is the cheapest way to make this check.\n-        while ( waiters.getClass() == Waiter.class )\n-        {\n-            Waiter waiter = (Waiter) waiters;\n-            waiter.state = waiterStateReleased;\n-            LockSupport.unpark( waiter.waitingThread );\n-            Node next;\n-            do\n-            {\n-                // Just like in isReleased, loop if the next pointer is null.\n-                next = waiters.next;\n-            }\n-            while ( next == null );\n-            waiters = next;\n-        }\n+      Waiter waiter = (Waiter) waiters;\n+      waiter.state = waiterStateReleased;\n+      LockSupport.unpark(waiter.waitingThread);\n+      Node next;\n+      do\n+      {\n+        // Just like in isReleased, loop if the next pointer is null.\n+        next = waiters.next;\n+      }\n+      while (next == null);\n+      waiters = next;\n     }\n+  }\n }\n",
            "diff_size": 201
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4073/BinaryLatch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4073/BinaryLatch.java\nindex a0bdcebe02a..b28bb1be655 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4073/BinaryLatch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4073/BinaryLatch.java\n@@ -45,9 +45,9 @@ public class BinaryLatch\n         volatile byte state;\n     }\n \n-    private static final long stackOffset =\n-            UnsafeUtil.getFieldOffset( BinaryLatch.class, \"stack\" );\n-    private static final Node end = new Node();\n+    private static final long stackOffset = UnsafeUtil.getFieldOffset( BinaryLatch.class, \"stack\" );\n+\n+private static final Node end = new Node();\n     private static final Node released = new Node();\n     private static final byte waiterStateSuccessor = 1;\n     private static final byte waiterStateReleased = 2;\n@@ -70,7 +70,8 @@ public class BinaryLatch\n             // There are no waiters to unpark, so don't bother.\n             return;\n         }\n-        unparkSuccessor( waiters );\n+\n+unparkSuccessor( waiters );\n     }\n \n     private void unparkSuccessor( Node waiters )\n@@ -108,7 +109,8 @@ public class BinaryLatch\n                 // Set our next pointer to 'released' as a signal to other threads who might be going through the\n                 // stack in the isReleased check.\n                 waiter.next = released;\n-                unparkAll( others );\n+\n+unparkAll( others );\n             }\n             else\n             {\n@@ -190,4 +192,4 @@ public class BinaryLatch\n             waiters = next;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}