{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1288",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "247",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1288/DefaultValueMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1288/DefaultValueMapper.java\nindex 7c8110e78dc..bff7539b70f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1288/DefaultValueMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1288/DefaultValueMapper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.util.Iterator;\n@@ -43,222 +44,218 @@ import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n \n public class DefaultValueMapper extends ValueMapper.JavaMapper\n {\n-    private final EmbeddedProxySPI proxySPI;\n+  private final EmbeddedProxySPI proxySPI;\n \n-    public DefaultValueMapper( EmbeddedProxySPI proxySPI )\n-    {\n-        this.proxySPI = proxySPI;\n+  public DefaultValueMapper(EmbeddedProxySPI proxySPI)\n+  {\n+    this.proxySPI = proxySPI;\n+  }\n+\n+  @Override\n+  public Node mapNode(VirtualNodeValue value)\n+  {\n+    assert !(value instanceof NodeReference);\n+\n+    if (value instanceof NodeProxyWrappingNodeValue)\n+    { // this is the back door through which \"virtual nodes\" slip\n+      return ((NodeProxyWrappingNodeValue) value).nodeProxy();\n     }\n+    return new NodeProxy(proxySPI, value.id());\n+  }\n \n-    @Override\n-    public Node mapNode( VirtualNodeValue value )\n+  @Override\n+  public Relationship mapRelationship(VirtualRelationshipValue value)\n+  {\n+    assert !(value instanceof RelationshipReference);\n+\n+    if (value instanceof RelationshipProxyWrappingValue)\n+    { // this is the back door through which \"virtual relationships\" slip\n+      return ((RelationshipProxyWrappingValue) value).relationshipProxy();\n+    }\n+    return new RelationshipProxy(proxySPI, value.id());\n+  }\n+\n+  @Override\n+  public Path mapPath(PathValue value)\n+  {\n+    if (value instanceof PathWrappingPathValue)\n     {\n-        assert !(value instanceof NodeReference);\n+      return ((PathWrappingPathValue) value).path();\n+    }\n+    return new CoreAPIPath(value);\n+  }\n \n-        if ( value instanceof NodeProxyWrappingNodeValue )\n-        { // this is the back door through which \"virtual nodes\" slip\n-            return ((NodeProxyWrappingNodeValue) value).nodeProxy();\n-        }\n-        return new NodeProxy( proxySPI, value.id() );\n+  private <U, V> Iterable<V> asList(U[] values, Function<U, V> mapper)\n+  {\n+    return () -> new Iterator<V>()\n+    {\n+      private int index;\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return index < values.length;\n+      }\n+\n+      @Override\n+      public V next()\n+      {\n+        return mapper.apply(values[index++]);\n+      }\n+    };\n+  }\n+\n+  private <U, V> Iterable<V> asReverseList(U[] values, Function<U, V> mapper)\n+  {\n+    return () -> new Iterator<V>()\n+    {\n+      private int index = values.length - 1;\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return index >= 0;\n+      }\n+\n+      @Override\n+      public V next()\n+      {\n+        return mapper.apply(values[index--]);\n+      }\n+    };\n+  }\n+\n+  private class CoreAPIPath implements Path\n+  {\n+    private final PathValue value;\n+\n+    CoreAPIPath(PathValue value)\n+    {\n+      this.value = value;\n     }\n \n     @Override\n-    public Relationship mapRelationship( VirtualRelationshipValue value )\n+    public String toString()\n     {\n-        assert !(value instanceof RelationshipReference);\n+      return Paths.defaultPathToStringWithNotInTransactionFallback(this);\n+    }\n \n-        if ( value instanceof RelationshipProxyWrappingValue )\n-        { // this is the back door through which \"virtual relationships\" slip\n-            return ((RelationshipProxyWrappingValue) value).relationshipProxy();\n-        }\n-        return new RelationshipProxy( proxySPI, value.id() );\n+    @Override\n+    public int hashCode()\n+    {\n+      return value.hashCode();\n     }\n \n     @Override\n-    public Path mapPath( PathValue value )\n+    public boolean equals(Object obj)\n     {\n-        if ( value instanceof PathWrappingPathValue )\n+      if (this == obj)\n+      {\n+        return true;\n+      }\n+      if (obj instanceof CoreAPIPath)\n+      {\n+        return value.equals(((CoreAPIPath) obj).value);\n+      } else if (obj instanceof Path)\n+      {\n+        Path other = (Path) obj;\n+        if (value.nodes()[0].id() != other.startNode().getId())\n         {\n-            return ((PathWrappingPathValue) value).path();\n+          return false;\n         }\n-        return new CoreAPIPath( value );\n+        return iteratorsEqual(this.relationships().iterator(), other.relationships().iterator());\n+      } else\n+      {\n+        return false;\n+      }\n     }\n \n-    private <U, V> Iterable<V> asList( U[] values, Function<U,V> mapper )\n+    @Override\n+    public Node startNode()\n     {\n-        return () -> new Iterator<V>()\n-        {\n-            private int index;\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return index < values.length;\n-            }\n-\n-            @Override\n-            public V next()\n-            {\n-                return mapper.apply( values[index++] );\n-            }\n-        };\n+      return mapNode(value.startNode());\n     }\n \n-    private <U, V> Iterable<V> asReverseList( U[] values, Function<U,V> mapper )\n+    @Override\n+    public Node endNode()\n     {\n-        return () -> new Iterator<V>()\n-        {\n-            private int index = values.length - 1;\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return index >= 0;\n-            }\n-\n-            @Override\n-            public V next()\n-            {\n-                return mapper.apply( values[index--] );\n-            }\n-        };\n+      return mapNode(value.endNode());\n     }\n \n-    private class CoreAPIPath implements Path\n+    @Override\n+    public Relationship lastRelationship()\n     {\n-        private final PathValue value;\n-\n-        CoreAPIPath( PathValue value )\n-        {\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return Paths.defaultPathToStringWithNotInTransactionFallback( this );\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return value.hashCode();\n-        }\n-\n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            if ( this == obj )\n-            {\n-                return true;\n-            }\n-            if ( obj instanceof CoreAPIPath )\n-            {\n-                return value.equals( ((CoreAPIPath) obj).value );\n-            }\n-            else if ( obj instanceof Path )\n-            {\n-                Path other = (Path) obj;\n-                if ( value.nodes()[0].id() != other.startNode().getId() )\n-                {\n-                    return false;\n-                }\n-                return iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-            }\n-            else\n-            {\n-                return false;\n-            }\n-        }\n-\n-        @Override\n-        public Node startNode()\n-        {\n-            return mapNode( value.startNode() );\n-        }\n+      if (value.size() == 0)\n+      {\n+        return null;\n+      } else\n+      {\n+        return mapRelationship(value.lastRelationship());\n+      }\n+    }\n \n-        @Override\n-        public Node endNode()\n-        {\n-            return mapNode( value.endNode() );\n-        }\n+    @Override\n+    public Iterable<Relationship> relationships()\n+    {\n+      return asList(value.relationships(), DefaultValueMapper.this::mapRelationship);\n+    }\n \n-        @Override\n-        public Relationship lastRelationship()\n-        {\n-            if ( value.size() == 0 )\n-            {\n-                return null;\n-            }\n-            else\n-            {\n-                return mapRelationship( value.lastRelationship() );\n-            }\n-        }\n+    @Override\n+    public Iterable<Relationship> reverseRelationships()\n+    {\n+      return asReverseList(value.relationships(), DefaultValueMapper.this::mapRelationship);\n+    }\n \n-        @Override\n-        public Iterable<Relationship> relationships()\n-        {\n-            return asList( value.relationships(), DefaultValueMapper.this::mapRelationship );\n-        }\n+    @Override\n+    public Iterable<Node> nodes()\n+    {\n+      return asList(value.nodes(), DefaultValueMapper.this::mapNode);\n+    }\n \n-        @Override\n-        public Iterable<Relationship> reverseRelationships()\n-        {\n-            return asReverseList( value.relationships(), DefaultValueMapper.this::mapRelationship );\n-        }\n+    @Override\n+    public Iterable<Node> reverseNodes()\n+    {\n+      return asReverseList(value.nodes(), DefaultValueMapper.this::mapNode);\n+    }\n \n-        @Override\n-        public Iterable<Node> nodes()\n-        {\n-            return asList( value.nodes(), DefaultValueMapper.this::mapNode );\n-        }\n+    @Override\n+    public int length()\n+    {\n+      return value.size();\n+    }\n \n-        @Override\n-        public Iterable<Node> reverseNodes()\n-        {\n-            return asReverseList( value.nodes(), DefaultValueMapper.this::mapNode );\n-        }\n+    @Override\n+    public Iterator<PropertyContainer> iterator()\n+    {\n+      return new Iterator<PropertyContainer>()\n+      {\n+        private final int size = 2 * value.size() + 1;\n+        private int index;\n+        private final NodeValue[] nodes = value.nodes();\n+        private final RelationshipValue[] relationships = value.relationships();\n \n         @Override\n-        public int length()\n+        public boolean hasNext()\n         {\n-            return value.size();\n+          return index < size;\n         }\n \n         @Override\n-        public Iterator<PropertyContainer> iterator()\n+        public PropertyContainer next()\n         {\n-            return new Iterator<PropertyContainer>()\n-            {\n-                private final int size = 2 * value.size() + 1;\n-                private int index;\n-                private final NodeValue[] nodes = value.nodes();\n-                private final RelationshipValue[] relationships = value.relationships();\n-\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    return index < size;\n-                }\n-\n-                @Override\n-                public PropertyContainer next()\n-                {\n-                    PropertyContainer propertyContainer;\n-                    if ( (index & 1) == 0 )\n-                    {\n-                        propertyContainer = mapNode( nodes[index >> 1] );\n-                    }\n-                    else\n-                    {\n-                        propertyContainer = mapRelationship( relationships[index >> 1] );\n-                    }\n-                    index++;\n-                    return propertyContainer;\n-                }\n-            };\n+          PropertyContainer propertyContainer;\n+          if ((index & 1) == 0)\n+          {\n+            propertyContainer = mapNode(nodes[index >> 1]);\n+          } else\n+          {\n+            propertyContainer = mapRelationship(relationships[index >> 1]);\n+          }\n+          index++;\n+          return propertyContainer;\n         }\n+      };\n     }\n+  }\n }\n \n",
            "diff_size": 273
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1288/DefaultValueMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1288/DefaultValueMapper.java\nindex 7c8110e78dc..84aa5098d76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1288/DefaultValueMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1288/DefaultValueMapper.java\n@@ -53,9 +53,8 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n     @Override\n     public Node mapNode( VirtualNodeValue value )\n     {\n-        assert !(value instanceof NodeReference);\n-\n-        if ( value instanceof NodeProxyWrappingNodeValue )\n+        assert !( value instanceof NodeReference);\n+if ( value instanceof NodeProxyWrappingNodeValue )\n         { // this is the back door through which \"virtual nodes\" slip\n             return ((NodeProxyWrappingNodeValue) value).nodeProxy();\n         }\n@@ -65,9 +64,8 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n     @Override\n     public Relationship mapRelationship( VirtualRelationshipValue value )\n     {\n-        assert !(value instanceof RelationshipReference);\n-\n-        if ( value instanceof RelationshipProxyWrappingValue )\n+        assert !( value instanceof RelationshipReference);\n+if ( value instanceof RelationshipProxyWrappingValue )\n         { // this is the back door through which \"virtual relationships\" slip\n             return ((RelationshipProxyWrappingValue) value).relationshipProxy();\n         }\n@@ -84,7 +82,7 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n         return new CoreAPIPath( value );\n     }\n \n-    private <U, V> Iterable<V> asList( U[] values, Function<U,V> mapper )\n+    private <U,V> Iterable<V> asList( U[] values, Function<U,V> mapper )\n     {\n         return () -> new Iterator<V>()\n         {\n@@ -104,7 +102,7 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n         };\n     }\n \n-    private <U, V> Iterable<V> asReverseList( U[] values, Function<U,V> mapper )\n+    private <U,V> Iterable<V> asReverseList( U[] values, Function<U,V> mapper )\n     {\n         return () -> new Iterator<V>()\n         {\n@@ -152,7 +150,8 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n             {\n                 return true;\n             }\n-            if ( obj instanceof CoreAPIPath )\n+\n+if ( obj instanceof CoreAPIPath )\n             {\n                 return value.equals( ((CoreAPIPath) obj).value );\n             }\n@@ -163,7 +162,8 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n                 {\n                     return false;\n                 }\n-                return iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+\n+return iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n             }\n             else\n             {\n@@ -246,7 +246,7 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n                 public PropertyContainer next()\n                 {\n                     PropertyContainer propertyContainer;\n-                    if ( (index & 1) == 0 )\n+                    if ( ( index & 1) == 0 )\n                     {\n                         propertyContainer = mapNode( nodes[index >> 1] );\n                     }\n@@ -260,5 +260,4 @@ public class DefaultValueMapper extends ValueMapper.JavaMapper\n             };\n         }\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}