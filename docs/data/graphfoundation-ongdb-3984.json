{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3984",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3984/PropertyNameUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3984/PropertyNameUtils.java\nindex 217c756c7bb..a18bc0f9c0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3984/PropertyNameUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3984/PropertyNameUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.coreapi.schema;\n \n import java.util.ArrayList;\n@@ -32,76 +33,76 @@ import org.neo4j.internal.kernel.api.schema.LabelSchemaDescriptor;\n \n public class PropertyNameUtils\n {\n-    private PropertyNameUtils()\n-    {\n-    }\n+  private PropertyNameUtils()\n+  {\n+  }\n \n-    public static String[] getPropertyKeys( TokenRead tokenRead, int...properties )\n-            throws PropertyKeyIdNotFoundKernelException\n+  public static String[] getPropertyKeys(TokenRead tokenRead, int... properties)\n+      throws PropertyKeyIdNotFoundKernelException\n+  {\n+    String[] propertyKeys = new String[properties.length];\n+    for (int i = 0; i < properties.length; i++)\n     {\n-        String[] propertyKeys = new String[properties.length];\n-        for ( int i = 0; i < properties.length; i++ )\n-        {\n-            propertyKeys[i] = tokenRead.propertyKeyName( properties[i] );\n-        }\n-        return propertyKeys;\n+      propertyKeys[i] = tokenRead.propertyKeyName(properties[i]);\n     }\n+    return propertyKeys;\n+  }\n \n-    public static String[] getPropertyKeys( TokenNameLookup tokenNameLookup, LabelSchemaDescriptor descriptor )\n+  public static String[] getPropertyKeys(TokenNameLookup tokenNameLookup, LabelSchemaDescriptor descriptor)\n+  {\n+    int[] propertyKeyIds = descriptor.getPropertyIds();\n+    String[] propertyKeys = new String[propertyKeyIds.length];\n+    for (int i = 0; i < propertyKeyIds.length; i++)\n     {\n-        int[] propertyKeyIds = descriptor.getPropertyIds();\n-        String[] propertyKeys = new String[propertyKeyIds.length];\n-        for ( int i = 0; i < propertyKeyIds.length; i++ )\n-        {\n-            propertyKeys[i] = tokenNameLookup.propertyKeyGetName( propertyKeyIds[i] );\n-        }\n-        return propertyKeys;\n+      propertyKeys[i] = tokenNameLookup.propertyKeyGetName(propertyKeyIds[i]);\n     }\n+    return propertyKeys;\n+  }\n \n-    public static String[] getPropertyKeys( TokenNameLookup tokenNameLookup, int[] propertyIds )\n+  public static String[] getPropertyKeys(TokenNameLookup tokenNameLookup, int[] propertyIds)\n+  {\n+    String[] propertyKeys = new String[propertyIds.length];\n+    for (int i = 0; i < propertyIds.length; i++)\n     {\n-        String[] propertyKeys = new String[propertyIds.length];\n-        for ( int i = 0; i < propertyIds.length; i++ )\n-        {\n-            propertyKeys[i] = tokenNameLookup.propertyKeyGetName( propertyIds[i] );\n-        }\n-        return propertyKeys;\n+      propertyKeys[i] = tokenNameLookup.propertyKeyGetName(propertyIds[i]);\n     }\n+    return propertyKeys;\n+  }\n \n-    public static int[] getPropertyIds( TokenRead tokenRead, String[] propertyKeys )\n+  public static int[] getPropertyIds(TokenRead tokenRead, String[] propertyKeys)\n+  {\n+    int[] propertyKeyIds = new int[propertyKeys.length];\n+    for (int i = 0; i < propertyKeys.length; i++)\n     {\n-        int[] propertyKeyIds = new int[propertyKeys.length];\n-        for ( int i = 0; i < propertyKeys.length; i++ )\n-        {\n-            propertyKeyIds[i] = tokenRead.propertyKey( propertyKeys[i] );\n-        }\n-        return propertyKeyIds;\n+      propertyKeyIds[i] = tokenRead.propertyKey(propertyKeys[i]);\n     }\n+    return propertyKeyIds;\n+  }\n \n-    public static int[] getPropertyIds( TokenRead tokenRead, Iterable<String> propertyKeys )\n-    {\n-        return Iterables.stream( propertyKeys ).mapToInt( tokenRead::propertyKey ).toArray();\n-    }\n+  public static int[] getPropertyIds(TokenRead tokenRead, Iterable<String> propertyKeys)\n+  {\n+    return Iterables.stream(propertyKeys).mapToInt(tokenRead::propertyKey).toArray();\n+  }\n \n-    public static int[] getOrCreatePropertyKeyIds( TokenWrite tokenWrite, String... propertyKeys )\n-            throws IllegalTokenNameException\n+  public static int[] getOrCreatePropertyKeyIds(TokenWrite tokenWrite, String... propertyKeys)\n+      throws IllegalTokenNameException\n+  {\n+    int[] propertyKeyIds = new int[propertyKeys.length];\n+    for (int i = 0; i < propertyKeys.length; i++)\n     {\n-        int[] propertyKeyIds = new int[propertyKeys.length];\n-        for ( int i = 0; i < propertyKeys.length; i++ )\n-        {\n-            propertyKeyIds[i] = tokenWrite.propertyKeyGetOrCreateForName( propertyKeys[i] );\n-        }\n-        return propertyKeyIds;\n+      propertyKeyIds[i] = tokenWrite.propertyKeyGetOrCreateForName(propertyKeys[i]);\n     }\n+    return propertyKeyIds;\n+  }\n \n-    public static int[] getOrCreatePropertyKeyIds( TokenWrite tokenWrite, IndexDefinition indexDefinition )\n-            throws IllegalTokenNameException\n+  public static int[] getOrCreatePropertyKeyIds(TokenWrite tokenWrite, IndexDefinition indexDefinition)\n+      throws IllegalTokenNameException\n+  {\n+    ArrayList<Integer> propertyKeyIds = new ArrayList<>();\n+    for (String s : indexDefinition.getPropertyKeys())\n     {\n-        ArrayList<Integer> propertyKeyIds = new ArrayList<>();\n-        for ( String s : indexDefinition.getPropertyKeys() )\n-        {\n-            propertyKeyIds.add( tokenWrite.propertyKeyGetOrCreateForName( s ) );\n-        }\n-        return propertyKeyIds.stream().mapToInt( i -> i ).toArray();\n+      propertyKeyIds.add(tokenWrite.propertyKeyGetOrCreateForName(s));\n     }\n+    return propertyKeyIds.stream().mapToInt(i -> i).toArray();\n+  }\n }\n",
            "diff_size": 85
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3984/PropertyNameUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3984/PropertyNameUtils.java\nindex 217c756c7bb..ca35b84518e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3984/PropertyNameUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3984/PropertyNameUtils.java\n@@ -36,15 +36,15 @@ public class PropertyNameUtils\n     {\n     }\n \n-    public static String[] getPropertyKeys( TokenRead tokenRead, int...properties )\n-            throws PropertyKeyIdNotFoundKernelException\n-    {\n+    public static String[] getPropertyKeys( TokenRead tokenRead, int...properties ) throws PropertyKeyIdNotFoundKernelException\n+{\n         String[] propertyKeys = new String[properties.length];\n         for ( int i = 0; i < properties.length; i++ )\n         {\n             propertyKeys[i] = tokenRead.propertyKeyName( properties[i] );\n         }\n-        return propertyKeys;\n+\n+return propertyKeys;\n     }\n \n     public static String[] getPropertyKeys( TokenNameLookup tokenNameLookup, LabelSchemaDescriptor descriptor )\n@@ -55,7 +55,8 @@ public class PropertyNameUtils\n         {\n             propertyKeys[i] = tokenNameLookup.propertyKeyGetName( propertyKeyIds[i] );\n         }\n-        return propertyKeys;\n+\n+return propertyKeys;\n     }\n \n     public static String[] getPropertyKeys( TokenNameLookup tokenNameLookup, int[] propertyIds )\n@@ -65,7 +66,8 @@ public class PropertyNameUtils\n         {\n             propertyKeys[i] = tokenNameLookup.propertyKeyGetName( propertyIds[i] );\n         }\n-        return propertyKeys;\n+\n+return propertyKeys;\n     }\n \n     public static int[] getPropertyIds( TokenRead tokenRead, String[] propertyKeys )\n@@ -75,7 +77,8 @@ public class PropertyNameUtils\n         {\n             propertyKeyIds[i] = tokenRead.propertyKey( propertyKeys[i] );\n         }\n-        return propertyKeyIds;\n+\n+return propertyKeyIds;\n     }\n \n     public static int[] getPropertyIds( TokenRead tokenRead, Iterable<String> propertyKeys )\n@@ -83,25 +86,25 @@ public class PropertyNameUtils\n         return Iterables.stream( propertyKeys ).mapToInt( tokenRead::propertyKey ).toArray();\n     }\n \n-    public static int[] getOrCreatePropertyKeyIds( TokenWrite tokenWrite, String... propertyKeys )\n-            throws IllegalTokenNameException\n-    {\n+    public static int[] getOrCreatePropertyKeyIds( TokenWrite tokenWrite, String... propertyKeys ) throws IllegalTokenNameException\n+{\n         int[] propertyKeyIds = new int[propertyKeys.length];\n         for ( int i = 0; i < propertyKeys.length; i++ )\n         {\n             propertyKeyIds[i] = tokenWrite.propertyKeyGetOrCreateForName( propertyKeys[i] );\n         }\n-        return propertyKeyIds;\n+\n+return propertyKeyIds;\n     }\n \n-    public static int[] getOrCreatePropertyKeyIds( TokenWrite tokenWrite, IndexDefinition indexDefinition )\n-            throws IllegalTokenNameException\n-    {\n+    public static int[] getOrCreatePropertyKeyIds( TokenWrite tokenWrite, IndexDefinition indexDefinition ) throws IllegalTokenNameException\n+{\n         ArrayList<Integer> propertyKeyIds = new ArrayList<>();\n         for ( String s : indexDefinition.getPropertyKeys() )\n         {\n             propertyKeyIds.add( tokenWrite.propertyKeyGetOrCreateForName( s ) );\n         }\n-        return propertyKeyIds.stream().mapToInt( i -> i ).toArray();\n+\n+return propertyKeyIds.stream().mapToInt( i -> i ).toArray();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}