{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "419",
    "information": {
        "errors": [
            {
                "line": "183",
                "column": "64",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData)o;\n    return\n        Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n        Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/419/SvgSaveOptionsData.java\nindex 0a3fb0da623..08b52b9d8ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/419/SvgSaveOptionsData.java\n@@ -180,7 +180,7 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData)o;\n+    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData) o;\n     return\n         Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n         Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/419/SvgSaveOptionsData.java\nindex 0a3fb0da623..146c52e4c16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/419/SvgSaveOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -64,6 +67,7 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     @SerializedName(\"TextOutputMode\")\n     private String textOutputMode = null;\n+\n     public SvgSaveOptionsData exportEmbeddedImages(Boolean exportEmbeddedImages) {\n         this.exportEmbeddedImages = exportEmbeddedImages;\n         return this;\n@@ -71,8 +75,9 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     /**\n      * Gets or sets specified whether images should be embedded into SVG document as base64.\n-    * @return exportEmbeddedImages\n-    **/\n+     *\n+     * @return exportEmbeddedImages\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specified whether images should be embedded into SVG document as base64.\")\n     public Boolean getExportEmbeddedImages() {\n         return exportEmbeddedImages;\n@@ -89,8 +94,9 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     /**\n      * Gets or sets specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.\n-    * @return fitToViewPort\n-    **/\n+     *\n+     * @return fitToViewPort\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.\")\n     public Boolean getFitToViewPort() {\n         return fitToViewPort;\n@@ -107,8 +113,9 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     /**\n      * Gets or sets specifies the physical folder where resources (images) are saved when exporting.\n-    * @return resourcesFolder\n-    **/\n+     *\n+     * @return resourcesFolder\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies the physical folder where resources (images) are saved when exporting.\")\n     public String getResourcesFolder() {\n         return resourcesFolder;\n@@ -125,8 +132,9 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     /**\n      * Gets or sets specifies the name of the folder used to construct image URIs.\n-    * @return resourcesFolderAlias\n-    **/\n+     *\n+     * @return resourcesFolderAlias\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies the name of the folder used to construct image URIs.\")\n     public String getResourcesFolderAlias() {\n         return resourcesFolderAlias;\n@@ -143,8 +151,9 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     /**\n      * Gets or sets show/hide page stepper.\n-    * @return showPageBorder\n-    **/\n+     *\n+     * @return showPageBorder\n+     **/\n     @ApiModelProperty(value = \"Gets or sets show/hide page stepper.\")\n     public Boolean getShowPageBorder() {\n         return showPageBorder;\n@@ -161,8 +170,9 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n \n     /**\n      * Gets or sets determines how text should be rendered.\n-    * @return textOutputMode\n-    **/\n+     *\n+     * @return textOutputMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets determines how text should be rendered.\")\n     public String getTextOutputMode() {\n         return textOutputMode;\n@@ -180,45 +190,45 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData)o;\n-    return\n-        Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n-        Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n-        Objects.equals(this.resourcesFolder, svgSaveOptionsData.resourcesFolder) &&\n-        Objects.equals(this.resourcesFolderAlias, svgSaveOptionsData.resourcesFolderAlias) &&\n-        Objects.equals(this.showPageBorder, svgSaveOptionsData.showPageBorder) &&\n-        Objects.equals(this.textOutputMode, svgSaveOptionsData.textOutputMode) &&\n-        super.equals(o);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(exportEmbeddedImages, fitToViewPort, resourcesFolder, resourcesFolderAlias, showPageBorder, textOutputMode, super.hashCode());\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class SvgSaveOptionsData {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    exportEmbeddedImages: \").append(toIndentedString(exportEmbeddedImages)).append(\"\\n\");\n-    sb.append(\"    fitToViewPort: \").append(toIndentedString(fitToViewPort)).append(\"\\n\");\n-    sb.append(\"    resourcesFolder: \").append(toIndentedString(resourcesFolder)).append(\"\\n\");\n-    sb.append(\"    resourcesFolderAlias: \").append(toIndentedString(resourcesFolderAlias)).append(\"\\n\");\n-    sb.append(\"    showPageBorder: \").append(toIndentedString(showPageBorder)).append(\"\\n\");\n-    sb.append(\"    textOutputMode: \").append(toIndentedString(textOutputMode)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData) o;\n+        return\n+            Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n+                Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n+                Objects.equals(this.resourcesFolder, svgSaveOptionsData.resourcesFolder) &&\n+                Objects.equals(this.resourcesFolderAlias, svgSaveOptionsData.resourcesFolderAlias) &&\n+                Objects.equals(this.showPageBorder, svgSaveOptionsData.showPageBorder) &&\n+                Objects.equals(this.textOutputMode, svgSaveOptionsData.textOutputMode) &&\n+                super.equals(o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(exportEmbeddedImages, fitToViewPort, resourcesFolder, resourcesFolderAlias, showPageBorder, textOutputMode, super.hashCode());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class SvgSaveOptionsData {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    exportEmbeddedImages: \").append(toIndentedString(exportEmbeddedImages)).append(\"\\n\");\n+        sb.append(\"    fitToViewPort: \").append(toIndentedString(fitToViewPort)).append(\"\\n\");\n+        sb.append(\"    resourcesFolder: \").append(toIndentedString(resourcesFolder)).append(\"\\n\");\n+        sb.append(\"    resourcesFolderAlias: \").append(toIndentedString(resourcesFolderAlias)).append(\"\\n\");\n+        sb.append(\"    showPageBorder: \").append(toIndentedString(showPageBorder)).append(\"\\n\");\n+        sb.append(\"    textOutputMode: \").append(toIndentedString(textOutputMode)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/419/SvgSaveOptionsData.java\nindex 0a3fb0da623..c9c048e5330 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/419/SvgSaveOptionsData.java\n@@ -45,157 +45,176 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * container class for svg save options.\n  */\n+\n+\n @ApiModel(description = \"container class for svg save options.\")\n+\n public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n-    @SerializedName(\"ExportEmbeddedImages\")\n-    private Boolean exportEmbeddedImages = null;\n+  @SerializedName(\"ExportEmbeddedImages\")\n+  private Boolean exportEmbeddedImages = null;\n \n-    @SerializedName(\"FitToViewPort\")\n-    private Boolean fitToViewPort = null;\n+  @SerializedName(\"FitToViewPort\")\n+  private Boolean fitToViewPort = null;\n \n-    @SerializedName(\"ResourcesFolder\")\n-    private String resourcesFolder = null;\n+  @SerializedName(\"ResourcesFolder\")\n+  private String resourcesFolder = null;\n \n-    @SerializedName(\"ResourcesFolderAlias\")\n-    private String resourcesFolderAlias = null;\n+  @SerializedName(\"ResourcesFolderAlias\")\n+  private String resourcesFolderAlias = null;\n \n-    @SerializedName(\"ShowPageBorder\")\n-    private Boolean showPageBorder = null;\n+  @SerializedName(\"ShowPageBorder\")\n+  private Boolean showPageBorder = null;\n \n-    @SerializedName(\"TextOutputMode\")\n-    private String textOutputMode = null;\n-    public SvgSaveOptionsData exportEmbeddedImages(Boolean exportEmbeddedImages) {\n-        this.exportEmbeddedImages = exportEmbeddedImages;\n-        return this;\n-    }\n+  @SerializedName(\"TextOutputMode\")\n+  private String textOutputMode = null;\n+\n+  public SvgSaveOptionsData exportEmbeddedImages(Boolean exportEmbeddedImages) {\n+    this.exportEmbeddedImages = exportEmbeddedImages;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specified whether images should be embedded into SVG document as base64.\n     * @return exportEmbeddedImages\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specified whether images should be embedded into SVG document as base64.\")\n-    public Boolean getExportEmbeddedImages() {\n-        return exportEmbeddedImages;\n-    }\n \n-    public void setExportEmbeddedImages(Boolean exportEmbeddedImages) {\n-        this.exportEmbeddedImages = exportEmbeddedImages;\n-    }\n \n-    public SvgSaveOptionsData fitToViewPort(Boolean fitToViewPort) {\n-        this.fitToViewPort = fitToViewPort;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specified whether images should be embedded into SVG document as base64.\")\n+  public Boolean getExportEmbeddedImages() {\n+    return exportEmbeddedImages;\n+  }\n+\n+  public void setExportEmbeddedImages(Boolean exportEmbeddedImages) {\n+    this.exportEmbeddedImages = exportEmbeddedImages;\n+  }\n+\n+  public SvgSaveOptionsData fitToViewPort(Boolean fitToViewPort) {\n+    this.fitToViewPort = fitToViewPort;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.\n     * @return fitToViewPort\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.\")\n-    public Boolean getFitToViewPort() {\n-        return fitToViewPort;\n-    }\n \n-    public void setFitToViewPort(Boolean fitToViewPort) {\n-        this.fitToViewPort = fitToViewPort;\n-    }\n \n-    public SvgSaveOptionsData resourcesFolder(String resourcesFolder) {\n-        this.resourcesFolder = resourcesFolder;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.\")\n+  public Boolean getFitToViewPort() {\n+    return fitToViewPort;\n+  }\n+\n+  public void setFitToViewPort(Boolean fitToViewPort) {\n+    this.fitToViewPort = fitToViewPort;\n+  }\n+\n+  public SvgSaveOptionsData resourcesFolder(String resourcesFolder) {\n+    this.resourcesFolder = resourcesFolder;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies the physical folder where resources (images) are saved when exporting.\n     * @return resourcesFolder\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the physical folder where resources (images) are saved when exporting.\")\n-    public String getResourcesFolder() {\n-        return resourcesFolder;\n-    }\n \n-    public void setResourcesFolder(String resourcesFolder) {\n-        this.resourcesFolder = resourcesFolder;\n-    }\n \n-    public SvgSaveOptionsData resourcesFolderAlias(String resourcesFolderAlias) {\n-        this.resourcesFolderAlias = resourcesFolderAlias;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies the physical folder where resources (images) are saved when exporting.\")\n+  public String getResourcesFolder() {\n+    return resourcesFolder;\n+  }\n+\n+  public void setResourcesFolder(String resourcesFolder) {\n+    this.resourcesFolder = resourcesFolder;\n+  }\n+\n+  public SvgSaveOptionsData resourcesFolderAlias(String resourcesFolderAlias) {\n+    this.resourcesFolderAlias = resourcesFolderAlias;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies the name of the folder used to construct image URIs.\n     * @return resourcesFolderAlias\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the name of the folder used to construct image URIs.\")\n-    public String getResourcesFolderAlias() {\n-        return resourcesFolderAlias;\n-    }\n \n-    public void setResourcesFolderAlias(String resourcesFolderAlias) {\n-        this.resourcesFolderAlias = resourcesFolderAlias;\n-    }\n \n-    public SvgSaveOptionsData showPageBorder(Boolean showPageBorder) {\n-        this.showPageBorder = showPageBorder;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies the name of the folder used to construct image URIs.\")\n+  public String getResourcesFolderAlias() {\n+    return resourcesFolderAlias;\n+  }\n+\n+  public void setResourcesFolderAlias(String resourcesFolderAlias) {\n+    this.resourcesFolderAlias = resourcesFolderAlias;\n+  }\n+\n+  public SvgSaveOptionsData showPageBorder(Boolean showPageBorder) {\n+    this.showPageBorder = showPageBorder;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets show/hide page stepper.\n     * @return showPageBorder\n     **/\n-    @ApiModelProperty(value = \"Gets or sets show/hide page stepper.\")\n-    public Boolean getShowPageBorder() {\n-        return showPageBorder;\n-    }\n \n-    public void setShowPageBorder(Boolean showPageBorder) {\n-        this.showPageBorder = showPageBorder;\n-    }\n \n-    public SvgSaveOptionsData textOutputMode(String textOutputMode) {\n-        this.textOutputMode = textOutputMode;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets show/hide page stepper.\")\n+  public Boolean getShowPageBorder() {\n+    return showPageBorder;\n+  }\n+\n+  public void setShowPageBorder(Boolean showPageBorder) {\n+    this.showPageBorder = showPageBorder;\n+  }\n+\n+  public SvgSaveOptionsData textOutputMode(String textOutputMode) {\n+    this.textOutputMode = textOutputMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets determines how text should be rendered.\n     * @return textOutputMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets determines how text should be rendered.\")\n-    public String getTextOutputMode() {\n-        return textOutputMode;\n-    }\n \n-    public void setTextOutputMode(String textOutputMode) {\n-        this.textOutputMode = textOutputMode;\n-    }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData)o;\n-    return\n-        Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n-        Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n-        Objects.equals(this.resourcesFolder, svgSaveOptionsData.resourcesFolder) &&\n-        Objects.equals(this.resourcesFolderAlias, svgSaveOptionsData.resourcesFolderAlias) &&\n-        Objects.equals(this.showPageBorder, svgSaveOptionsData.showPageBorder) &&\n-        Objects.equals(this.textOutputMode, svgSaveOptionsData.textOutputMode) &&\n-        super.equals(o);\n+  @ApiModelProperty(value = \"Gets or sets determines how text should be rendered.\")\n+  public String getTextOutputMode() {\n+    return textOutputMode;\n+  }\n+\n+  public void setTextOutputMode(String textOutputMode) {\n+    this.textOutputMode = textOutputMode;\n   }\n \n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData) o;\n+    return Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n+    Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n+    Objects.equals(this.resourcesFolder, svgSaveOptionsData.resourcesFolder) &&\n+    Objects.equals(this.resourcesFolderAlias, svgSaveOptionsData.resourcesFolderAlias) &&\n+    Objects.equals(this.showPageBorder, svgSaveOptionsData.showPageBorder) &&\n+    Objects.equals(this.textOutputMode, svgSaveOptionsData.textOutputMode) &&\n+    super.equals(o);\n+  }\n+\n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(exportEmbeddedImages, fitToViewPort, resourcesFolder, resourcesFolderAlias, showPageBorder, textOutputMode, super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -215,10 +234,11 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 168
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/419/SvgSaveOptionsData.java\nindex 0a3fb0da623..08b52b9d8ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/419/SvgSaveOptionsData.java\n@@ -180,7 +180,7 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData)o;\n+    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData) o;\n     return\n         Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n         Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/419/SvgSaveOptionsData.java\nindex 0a3fb0da623..08b52b9d8ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/419/SvgSaveOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/419/SvgSaveOptionsData.java\n@@ -180,7 +180,7 @@ public class SvgSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData)o;\n+    SvgSaveOptionsData svgSaveOptionsData = (SvgSaveOptionsData) o;\n     return\n         Objects.equals(this.exportEmbeddedImages, svgSaveOptionsData.exportEmbeddedImages) &&\n         Objects.equals(this.fitToViewPort, svgSaveOptionsData.fitToViewPort) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}