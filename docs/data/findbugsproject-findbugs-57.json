{
    "project_name": "findbugsproject-findbugs",
    "error_id": "57",
    "information": {
        "errors": [
            {
                "line": "16",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\npublic abstract class AbstractFlybushServlet<PersistenceHelper extends BasePersistenceHelper>\n\t\textends HttpServlet {\n\n\tprotected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n\tprotected PersistenceHelper persistenceHelper;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "18",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/57/AbstractFlybushServlet.java\nindex e2c7853ed29..633ec19d390 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/57/AbstractFlybushServlet.java\n@@ -13,7 +13,7 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n public abstract class AbstractFlybushServlet<PersistenceHelper extends BasePersistenceHelper>\n-\t\textends HttpServlet {\n+        extends HttpServlet {\n \n \tprotected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n \tprotected PersistenceHelper persistenceHelper;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/57/AbstractFlybushServlet.java\nindex e2c7853ed29..c6dccf3578a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/57/AbstractFlybushServlet.java\n@@ -13,79 +13,86 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n public abstract class AbstractFlybushServlet<PersistenceHelper extends BasePersistenceHelper>\n-\t\textends HttpServlet {\n+    extends HttpServlet {\n \n-\tprotected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n-\tprotected PersistenceHelper persistenceHelper;\n-\tprotected JspHelper jspHelper = new JspHelper();\n+    protected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n+    protected PersistenceHelper persistenceHelper;\n+    protected JspHelper jspHelper = new JspHelper();\n \n-\tpublic AbstractFlybushServlet() {\n-\t\tsuper();\n-\t}\n+    public AbstractFlybushServlet() {\n+        super();\n+    }\n \n \n     protected String getInitParameter(ServletConfig config, String name) {\n         ServletContext servletContext = config.getServletContext();\n-        \n+\n         String result = servletContext.getInitParameter(name);\n-        if (result != null) \n+        if (result != null) {\n             return result;\n+        }\n         System.out.println(\"Did not find init parameter \" + result);\n-        for(Enumeration<String> e = servletContext.getInitParameterNames(); e.hasMoreElements(); ) {\n+        for (Enumeration<String> e = servletContext.getInitParameterNames(); e.hasMoreElements(); ) {\n             String s = e.nextElement();\n             System.out.println(s);\n-            \n+\n         }\n         throw new RuntimeException(\"could not find \" + name);\n     }\n-    \n-\t/** for testing */\n-\tprotected void setPersistenceHelper(PersistenceHelper persistenceHelper) {\n-\t    this.persistenceHelper = persistenceHelper;\n-\t}\n-\n-\t/** Change visibility to public */\n-\t@Override\n-\tpublic void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,\n-\t\t\tIOException {\n-\t\t\t    super.doGet(req, resp);\n-\t\t\t}\n-\n-\t@Override\n-\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n-\t    String uri = req.getRequestURI();\n-\t\n-\t    PersistenceManager pm = getPersistenceManager();\n-\t\n-\t    try {\n-\t        handlePost(pm, req, resp, uri);\n-\t    } finally {\n-\t        pm.close();\n-\t    }\n-\t}\n-\n-\tprotected abstract void handlePost(PersistenceManager pm, HttpServletRequest req,\n-\t\t\tHttpServletResponse resp, String uri) throws IOException;\n-\n-\tprotected void show404(HttpServletResponse resp) throws IOException {\n-\t    setResponse(resp, 404, \"Not Found\");\n-\t}\n-\n-\tprotected void setResponse(HttpServletResponse resp, int statusCode, String textResponse)\n-\t\t\tthrows IOException {\n-\t\t\t    resp.setStatus(statusCode);\n-\t\t\t    resp.setContentType(\"text/plain\");\n-\t\t\t    resp.getWriter().println(textResponse);\n-\t\t\t}\n-\n-\tprotected PersistenceManager getPersistenceManager() throws IOException {\n-\t    return persistenceHelper.getPersistenceManager();\n-\t}\n-\n-\t/** for testing */\n-\tprotected long getCurrentTimeMillis() {\n-\t    return System.currentTimeMillis();\n-\t}\n+\n+    /**\n+     * for testing\n+     */\n+    protected void setPersistenceHelper(PersistenceHelper persistenceHelper) {\n+        this.persistenceHelper = persistenceHelper;\n+    }\n+\n+    /**\n+     * Change visibility to public\n+     */\n+    @Override\n+    public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,\n+        IOException {\n+        super.doGet(req, resp);\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        String uri = req.getRequestURI();\n+\n+        PersistenceManager pm = getPersistenceManager();\n+\n+        try {\n+            handlePost(pm, req, resp, uri);\n+        } finally {\n+            pm.close();\n+        }\n+    }\n+\n+    protected abstract void handlePost(PersistenceManager pm, HttpServletRequest req,\n+                                       HttpServletResponse resp, String uri) throws IOException;\n+\n+    protected void show404(HttpServletResponse resp) throws IOException {\n+        setResponse(resp, 404, \"Not Found\");\n+    }\n+\n+    protected void setResponse(HttpServletResponse resp, int statusCode, String textResponse)\n+        throws IOException {\n+        resp.setStatus(statusCode);\n+        resp.setContentType(\"text/plain\");\n+        resp.getWriter().println(textResponse);\n+    }\n+\n+    protected PersistenceManager getPersistenceManager() throws IOException {\n+        return persistenceHelper.getPersistenceManager();\n+    }\n+\n+    /**\n+     * for testing\n+     */\n+    protected long getCurrentTimeMillis() {\n+        return System.currentTimeMillis();\n+    }\n \n     protected String getCloudName() {\n         return jspHelper.getCloudName();\n",
            "diff_size": 66
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/57/AbstractFlybushServlet.java\nindex e2c7853ed29..1b04477d12e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/57/AbstractFlybushServlet.java\n@@ -3,7 +3,6 @@ package edu.umd.cs.findbugs.flybush;\n import java.io.IOException;\n import java.util.Enumeration;\n import java.util.logging.Logger;\n-\n import javax.jdo.PersistenceManager;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n@@ -12,80 +11,78 @@ import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n-public abstract class AbstractFlybushServlet<PersistenceHelper extends BasePersistenceHelper>\n-\t\textends HttpServlet {\n+public abstract class AbstractFlybushServlet<PersistenceHelper extends BasePersistenceHelper> extends HttpServlet {\n+    protected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n+\n+    protected PersistenceHelper persistenceHelper;\n \n-\tprotected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n-\tprotected PersistenceHelper persistenceHelper;\n-\tprotected JspHelper jspHelper = new JspHelper();\n+    protected JspHelper jspHelper = new JspHelper();\n \n-\tpublic AbstractFlybushServlet() {\n-\t\tsuper();\n-\t}\n \n+    public AbstractFlybushServlet() {\n+        super();\n+    }\n \n     protected String getInitParameter(ServletConfig config, String name) {\n         ServletContext servletContext = config.getServletContext();\n-        \n         String result = servletContext.getInitParameter(name);\n-        if (result != null) \n+        if (result != null)\n             return result;\n         System.out.println(\"Did not find init parameter \" + result);\n-        for(Enumeration<String> e = servletContext.getInitParameterNames(); e.hasMoreElements(); ) {\n+        for (Enumeration<String> e = servletContext.getInitParameterNames(); e.hasMoreElements();) {\n             String s = e.nextElement();\n             System.out.println(s);\n-            \n         }\n         throw new RuntimeException(\"could not find \" + name);\n     }\n     \n-\t/** for testing */\n-\tprotected void setPersistenceHelper(PersistenceHelper persistenceHelper) {\n-\t    this.persistenceHelper = persistenceHelper;\n-\t}\n-\n-\t/** Change visibility to public */\n-\t@Override\n-\tpublic void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,\n-\t\t\tIOException {\n-\t\t\t    super.doGet(req, resp);\n-\t\t\t}\n-\n-\t@Override\n-\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n-\t    String uri = req.getRequestURI();\n-\t\n-\t    PersistenceManager pm = getPersistenceManager();\n-\t\n-\t    try {\n-\t        handlePost(pm, req, resp, uri);\n-\t    } finally {\n-\t        pm.close();\n-\t    }\n-\t}\n-\n-\tprotected abstract void handlePost(PersistenceManager pm, HttpServletRequest req,\n-\t\t\tHttpServletResponse resp, String uri) throws IOException;\n-\n-\tprotected void show404(HttpServletResponse resp) throws IOException {\n-\t    setResponse(resp, 404, \"Not Found\");\n-\t}\n-\n-\tprotected void setResponse(HttpServletResponse resp, int statusCode, String textResponse)\n-\t\t\tthrows IOException {\n-\t\t\t    resp.setStatus(statusCode);\n-\t\t\t    resp.setContentType(\"text/plain\");\n-\t\t\t    resp.getWriter().println(textResponse);\n-\t\t\t}\n-\n-\tprotected PersistenceManager getPersistenceManager() throws IOException {\n-\t    return persistenceHelper.getPersistenceManager();\n-\t}\n-\n-\t/** for testing */\n-\tprotected long getCurrentTimeMillis() {\n-\t    return System.currentTimeMillis();\n-\t}\n+    /** for testing */\n+\n+    protected void setPersistenceHelper(PersistenceHelper persistenceHelper) {\n+        this.persistenceHelper = persistenceHelper;\n+    }\n+\n+    /** Change visibility to public */\n+\n+    @Override\n+    public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        super.doGet(req, resp);\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        String uri = req.getRequestURI();\n+        PersistenceManager pm = getPersistenceManager();\n+        try {\n+            handlePost(pm, req, resp, uri);\n+        } finally {\n+            pm.close();\n+        }\n+    }\n+\n+    protected abstract void handlePost(PersistenceManager pm,\n+        HttpServletRequest req,\n+            HttpServletResponse resp, String uri) throws IOException;\n+\n+    protected void show404(HttpServletResponse resp) throws IOException {\n+        setResponse(resp, 404, \"Not Found\");\n+    }\n+\n+    protected void setResponse(HttpServletResponse resp, int statusCode, String textResponse) throws IOException {\n+        resp.setStatus(statusCode);\n+        resp.setContentType(\"text/plain\");\n+        resp.getWriter().println(textResponse);\n+    }\n+\n+    protected PersistenceManager getPersistenceManager() throws IOException {\n+        return persistenceHelper.getPersistenceManager();\n+    }\n+\n+    /** for testing */\n+\n+    protected long getCurrentTimeMillis() {\n+        return System.currentTimeMillis();\n+    }\n \n     protected String getCloudName() {\n         return jspHelper.getCloudName();\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "18",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/57/AbstractFlybushServlet.java\nindex e2c7853ed29..633ec19d390 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/57/AbstractFlybushServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/57/AbstractFlybushServlet.java\n@@ -13,7 +13,7 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n public abstract class AbstractFlybushServlet<PersistenceHelper extends BasePersistenceHelper>\n-\t\textends HttpServlet {\n+        extends HttpServlet {\n \n \tprotected static final Logger LOGGER = Logger.getLogger(AbstractFlybushServlet.class.getName());\n \tprotected PersistenceHelper persistenceHelper;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}