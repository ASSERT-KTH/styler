{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3917",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3917/Policies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3917/Policies.java\nindex 1f36f0b0e6d..8e3f08f5753 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3917/Policies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3917/Policies.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.routing.load_balancing.plugins.server_policies;\n \n import java.util.HashMap;\n@@ -31,51 +32,50 @@ import static java.lang.String.format;\n \n public class Policies\n {\n-    public static final String POLICY_KEY = \"policy\";\n-    static final String DEFAULT_POLICY_NAME = \"default\";\n-    static final Policy DEFAULT_POLICY = new FilteringPolicy( IdentityFilter.as() ); // the default default\n+  public static final String POLICY_KEY = \"policy\";\n+  static final String DEFAULT_POLICY_NAME = \"default\";\n+  static final Policy DEFAULT_POLICY = new FilteringPolicy(IdentityFilter.as()); // the default default\n \n-    private final Map<String,Policy> policies = new HashMap<>();\n+  private final Map<String, Policy> policies = new HashMap<>();\n \n-    private final Log log;\n+  private final Log log;\n \n-    Policies( Log log )\n-    {\n-        this.log = log;\n-    }\n+  Policies(Log log)\n+  {\n+    this.log = log;\n+  }\n \n-    void addPolicy( String policyName, Policy policy )\n+  void addPolicy(String policyName, Policy policy)\n+  {\n+    Policy oldPolicy = policies.putIfAbsent(policyName, policy);\n+    if (oldPolicy != null)\n     {\n-        Policy oldPolicy = policies.putIfAbsent( policyName, policy );\n-        if ( oldPolicy != null )\n-        {\n-            log.error( format( \"Policy name conflict for '%s'.\", policyName ) );\n-        }\n+      log.error(format(\"Policy name conflict for '%s'.\", policyName));\n     }\n+  }\n \n-    Policy selectFor( Map<String,String> context ) throws ProcedureException\n-    {\n-        String policyName = context.get( POLICY_KEY );\n-\n-        if ( policyName == null )\n-        {\n-            return defaultPolicy();\n-        }\n-        else\n-        {\n-            Policy selectedPolicy = policies.get( policyName );\n-            if ( selectedPolicy == null )\n-            {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                        format( \"Policy definition for '%s' could not be found.\", policyName ) );\n-            }\n-            return selectedPolicy;\n-        }\n-    }\n+  Policy selectFor(Map<String, String> context) throws ProcedureException\n+  {\n+    String policyName = context.get(POLICY_KEY);\n \n-    private Policy defaultPolicy()\n+    if (policyName == null)\n     {\n-        Policy registeredDefault = policies.get( DEFAULT_POLICY_NAME );\n-        return registeredDefault != null ? registeredDefault : DEFAULT_POLICY;\n+      return defaultPolicy();\n+    } else\n+    {\n+      Policy selectedPolicy = policies.get(policyName);\n+      if (selectedPolicy == null)\n+      {\n+        throw new ProcedureException(Status.Procedure.ProcedureCallFailed,\n+            format(\"Policy definition for '%s' could not be found.\", policyName));\n+      }\n+      return selectedPolicy;\n     }\n+  }\n+\n+  private Policy defaultPolicy()\n+  {\n+    Policy registeredDefault = policies.get(DEFAULT_POLICY_NAME);\n+    return registeredDefault != null ? registeredDefault : DEFAULT_POLICY;\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3917/Policies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3917/Policies.java\nindex 1f36f0b0e6d..27a3c8d7687 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3917/Policies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3917/Policies.java\n@@ -56,8 +56,7 @@ public class Policies\n     Policy selectFor( Map<String,String> context ) throws ProcedureException\n     {\n         String policyName = context.get( POLICY_KEY );\n-\n-        if ( policyName == null )\n+if ( policyName == null )\n         {\n             return defaultPolicy();\n         }\n@@ -69,7 +68,8 @@ public class Policies\n                 throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n                         format( \"Policy definition for '%s' could not be found.\", policyName ) );\n             }\n-            return selectedPolicy;\n+\n+return selectedPolicy;\n         }\n     }\n \n@@ -78,4 +78,4 @@ public class Policies\n         Policy registeredDefault = policies.get( DEFAULT_POLICY_NAME );\n         return registeredDefault != null ? registeredDefault : DEFAULT_POLICY;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}