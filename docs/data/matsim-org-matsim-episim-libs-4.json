{
    "project_name": "matsim-org-matsim-episim-libs",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "352",
                "column": "52",
                "severity": "error",
                "message": "'{' at column 45 should have line break after.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "\t}\n\n\tint getPositionInTrajectory(DayOfWeek day) {return startOfDay[day.getValue() -1];}\n\n\tvoid setStartOfDay(DayOfWeek day, int position) {\n\t\tstartOfDay[day.getValue() - 1] = position;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler/4/EpisimPerson.java\nindex 2ac14ded399..6fb4040ef39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler/4/EpisimPerson.java\n@@ -349,7 +349,8 @@ public final class EpisimPerson implements Attributable {\n \t\tcurrentPositionInTrajectory = startOfDay[day.getValue() - 1];\n \t}\n \n-\tint getPositionInTrajectory(DayOfWeek day) {return startOfDay[day.getValue() -1];}\n+\tint getPositionInTrajectory(DayOfWeek day) {\n+\t\treturn startOfDay[day.getValue() -1];}\n \n \tvoid setStartOfDay(DayOfWeek day, int position) {\n \t\tstartOfDay[day.getValue() - 1] = position;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "220",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "229",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "259",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "261",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "265",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "272",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "287",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "288",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "290",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "294",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "298",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "299",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "300",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "302",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "303",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "311",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "312",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "313",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "315",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "316",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "325",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "328",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "329",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "331",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "338",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "342",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "354",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "358",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "362",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "366",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "370",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "377",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "378",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "390",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "391",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "392",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "393",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "394",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "395",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "398",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "403",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "410",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "414",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "415",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "416",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "417",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "418",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "420",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "424",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "435",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "442",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "449",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "450",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "463",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "464",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "466",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "469",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "470",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "471",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "472",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/4/EpisimPerson.java\nindex 2ac14ded399..863767d9aae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/4/EpisimPerson.java\n@@ -18,6 +18,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * #L%\n  */\n+\n package org.matsim.episim;\n \n import com.google.common.annotations.Beta;\n@@ -50,404 +51,424 @@ import static org.matsim.episim.EpisimUtils.writeChars;\n  */\n public final class EpisimPerson implements Attributable {\n \n-\tprivate final Id<Person> personId;\n-\tprivate final EpisimReporting reporting;\n-\t// This data structure is quite slow: log n costs, which should be constant...\n-\tprivate final Attributes attributes;\n-\n-\t/**\n-\t * Whole trajectory over all days of the week.\n-\t */\n-\tprivate final List<Activity> trajectory = new ArrayList<>();\n-\n-\t/**\n-\t * The position in the trajectory at the start for each day of the week.\n-\t */\n-\tprivate final int[] startOfDay = new int[7];\n-\n-\t/**\n-\t * The first visited {@link org.matsim.facilities.ActivityFacility} for each day.\n-\t */\n-\tprivate final Id<ActivityFacility>[] firstFacilityId = new Id[7];\n-\n-\t// Fields above are initialized from the sim and not persisted\n-\n-\t/**\n-\t * Traced contacts with other persons.\n-\t */\n-\tprivate final Object2DoubleMap<EpisimPerson> traceableContactPersons = new Object2DoubleLinkedOpenHashMap<>(4);\n-\n-\t/**\n-\t * Stores first time of status changes to specific type.\n-\t */\n-\tprivate final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n-\n-\t/**\n-\t * Total spent time during activities.\n-\t */\n-\tprivate final Object2DoubleMap<String> spentTime = new Object2DoubleOpenHashMap<>(4);\n-\n-\t/**\n-\t * The {@link EpisimContainer} the person is currently located in.\n-\t */\n-\tprivate EpisimContainer<?> currentContainer = null;\n-\t/**\n-\t * Current {@link DiseaseStatus}.\n-\t */\n-\tprivate DiseaseStatus status = DiseaseStatus.susceptible;\n-\t/**\n-\t * Current {@link QuarantineStatus}.\n-\t */\n-\tprivate QuarantineStatus quarantineStatus = QuarantineStatus.no;\n-\n-\t/**\n-\t * Iteration when this person got into quarantine. Negative if person was never quarantined.\n-\t */\n-\tprivate int quarantineDate = -1;\n-\tprivate int currentPositionInTrajectory;\n-\n-\t/**\n-\t * Whether this person can be traced.\n-\t */\n-\tprivate boolean traceable;\n-\n-\tEpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n-\t\tthis(personId, attrs, true, reporting);\n-\t}\n-\n-\tEpisimPerson(Id<Person> personId, Attributes attrs, boolean traceable, EpisimReporting reporting) {\n-\t\tthis.personId = personId;\n-\t\tthis.attributes = attrs;\n-\t\tthis.traceable = traceable;\n-\t\tthis.reporting = reporting;\n-\t}\n-\n-\t/**\n-\t * Reads persons state from stream.\n-\t *\n-\t * @param persons map of all persons in the simulation\n-\t */\n-\tvoid read(ObjectInput in, Map<Id<Person>, EpisimPerson> persons,\n-\t\t\t  Map<Id<ActivityFacility>, InfectionEventHandler.EpisimFacility> facilities,\n-\t\t\t  Map<Id<Vehicle>, InfectionEventHandler.EpisimVehicle> vehicles) throws IOException {\n-\n-\t\tint n = in.readInt();\n-\t\ttraceableContactPersons.clear();\n-\t\tfor (int i = 0; i < n; i++) {\n-\t\t\tId<Person> id = Id.create(readChars(in), Person.class);\n-\t\t\ttraceableContactPersons.put(persons.get(id), in.readDouble());\n-\t\t}\n-\n-\t\tn = in.readInt();\n-\t\tstatusChanges.clear();\n-\t\tfor (int i = 0; i < n; i++) {\n-\t\t\tint status = in.readInt();\n-\t\t\tstatusChanges.put(DiseaseStatus.values()[status], in.readDouble());\n-\t\t}\n-\n-\t\t// Current container is set\n-\t\tif (in.readBoolean()) {\n-\t\t\tboolean isVehicle = in.readBoolean();\n-\t\t\tString name = readChars(in);\n-\t\t\tif (isVehicle) {\n-\t\t\t\tcurrentContainer = vehicles.get(Id.create(name, Vehicle.class));\n-\t\t\t} else\n-\t\t\t\tcurrentContainer = facilities.get(Id.create(name, ActivityFacility.class));\n-\n-\t\t\tif (currentContainer == null)\n-\t\t\t\tthrow new IllegalStateException(\"Could not reconstruct container: \" + name);\n-\t\t} else\n-\t\t\tcurrentContainer = null;\n-\n-\t\tn = in.readInt();\n-\t\tspentTime.clear();\n-\t\tfor (int i = 0; i < n; i++) {\n-\t\t\tString act = readChars(in);\n-\t\t\tspentTime.put(act, in.readDouble());\n-\t\t}\n-\n-\t\tstatus = DiseaseStatus.values()[in.readInt()];\n-\t\tquarantineStatus = QuarantineStatus.values()[in.readInt()];\n-\t\tquarantineDate = in.readInt();\n-\t\tcurrentPositionInTrajectory = in.readInt();\n-\t\ttraceable = in.readBoolean();\n-\t}\n-\n-\t/**\n-\t * Writes person state to stream.\n-\t */\n-\tvoid write(ObjectOutput out) throws IOException {\n-\n-\t\tout.writeInt(traceableContactPersons.size());\n-\t\tfor (Map.Entry<EpisimPerson, Double> kv : traceableContactPersons.entrySet()) {\n-\t\t\twriteChars(out, kv.getKey().getPersonId().toString());\n-\t\t\tout.writeDouble(kv.getValue());\n-\t\t}\n-\n-\t\tout.writeInt(statusChanges.size());\n-\t\tfor (Map.Entry<DiseaseStatus, Double> e : statusChanges.entrySet()) {\n-\t\t\tout.writeInt(e.getKey().ordinal());\n-\t\t\tout.writeDouble(e.getValue());\n-\t\t}\n-\n-\t\tout.writeBoolean(currentContainer != null);\n-\t\tif (currentContainer != null) {\n-\t\t\tout.writeBoolean(currentContainer instanceof InfectionEventHandler.EpisimVehicle);\n-\t\t\twriteChars(out, currentContainer.getContainerId().toString());\n-\t\t}\n-\n-\t\tout.writeInt(spentTime.size());\n-\n-\t\tfor (Object2DoubleMap.Entry<String> kv : spentTime.object2DoubleEntrySet()) {\n-\t\t\twriteChars(out, kv.getKey());\n-\t\t\tout.writeDouble(kv.getDoubleValue());\n-\t\t}\n-\n-\t\tout.writeInt(status.ordinal());\n-\t\tout.writeInt(quarantineStatus.ordinal());\n-\t\tout.writeInt(quarantineDate);\n-\t\tout.writeInt(currentPositionInTrajectory);\n-\t\tout.writeBoolean(traceable);\n-\t}\n-\n-\tpublic Id<Person> getPersonId() {\n-\t\treturn personId;\n-\t}\n-\n-\tpublic DiseaseStatus getDiseaseStatus() {\n-\t\treturn status;\n-\t}\n-\n-\tpublic void setDiseaseStatus(double now, DiseaseStatus status) {\n-\t\tthis.status = status;\n-\t\tif (!statusChanges.containsKey(status))\n-\t\t\tstatusChanges.put(status, now);\n-\n-\t\treporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n-\t}\n-\n-\tpublic QuarantineStatus getQuarantineStatus() {\n-\t\treturn quarantineStatus;\n-\t}\n-\n-\tpublic void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n-\t\tthis.quarantineStatus = quarantineStatus;\n-\t\tthis.quarantineDate = iteration;\n-\n-\t\t// this function should receive now instead of iteration\n-\t\t// only for testing currently\n-\t\t//reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(iteration * 86400d, personId, quarantineStatus));\n-\t}\n-\n-\n-\t/**\n-\t * Days elapsed since a certain status was set.\n-\t * This will always round the change as if it happened on the start of a day.\n-\t *\n-\t * @param status     requested status\n-\t * @param currentDay current day (iteration)\n-\t * @throws IllegalStateException when the requested status was never set\n-\t */\n-\tpublic int daysSince(DiseaseStatus status, int currentDay) {\n-\t\tif (!statusChanges.containsKey(status)) throw new IllegalStateException(\"Person was never \" + status);\n-\n-\t\tdouble day = Math.floor(statusChanges.get(status) / 86400d);\n-\n-\t\treturn currentDay - (int) day;\n-\t}\n-\n-\t/**\n-\t * Return whether a person had (or currently has) a certain disease status.\n-\t */\n-\tpublic boolean hadDiseaseStatus(DiseaseStatus status) {\n-\t\treturn statusChanges.containsKey(status);\n-\t}\n-\n-\t/**\n-\t * Days elapsed since person was put into quarantine.\n-\t *\n-\t * @param currentDay current day (iteration)\n-\t * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n-\t */\n-\t@Beta\n-\tpublic int daysSinceQuarantine(int currentDay) {\n-\n-\t\t// yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n-\t\t// -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n-\t\tif (quarantineDate < 0) throw new IllegalStateException(\"Person was never quarantined\");\n-\n-\t\treturn currentDay - quarantineDate;\n-\t}\n-\n-\tint getQuarantineDate() {\n-\t\treturn this.quarantineDate;\n-\t}\n-\n-\tpublic void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n-\t\t// check if both persons have tracing capability\n-\t\tif (isTraceable() && personWrapper.isTraceable()) {\n-\t\t\t// Always use the latest tracking date\n-\t\t\ttraceableContactPersons.put(personWrapper, now);\n-\t\t\treporting.reportTracing(now, this, personWrapper);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Get all traced contacts that happened after certain time.\n-\t */\n-\tpublic List<EpisimPerson> getTraceableContactPersons(double after) {\n-\t\treturn traceableContactPersons.object2DoubleEntrySet()\n-\t\t\t\t.stream().filter(p -> p.getDoubleValue() >= after)\n-\t\t\t\t.map(Map.Entry::getKey)\n-\t\t\t\t.collect(Collectors.toList());\n-\n-\t\t// yyyy if the computationally intensive operation is to search by time, we should sort traceableContactPersons by time.  To simplify this, I\n-\t\t// would argue that it is not a problem to have a person in there multiple times.  kai, may'20\n-\n-\t}\n-\n-\t/**\n-\t * Remove old contact tracing data before a certain date.\n-\t */\n-\tpublic void clearTraceableContractPersons(double before) {\n-\n-\t\tint oldSize = traceableContactPersons.size();\n-\n-\t\tif (oldSize == 0) return;\n-\n-\t\ttraceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n-\t}\n-\n-\t/**\n-\t * Returns whether the person can be traced.\n-\t */\n-\tpublic boolean isTraceable() {\n-\t\treturn traceable;\n-\t}\n-\n-\tpublic void setTraceable(boolean traceable) {\n-\t\tthis.traceable = traceable;\n-\t}\n-\n-\tvoid addToTrajectory(Activity trajectoryElement) {\n-\t\ttrajectory.add(trajectoryElement);\n-\t}\n-\n-\tpublic List<Activity> getTrajectory() {\n-\t\treturn trajectory;\n-\t}\n-\n-\tpublic int getCurrentPositionInTrajectory() {\n-\t\treturn this.currentPositionInTrajectory;\n-\t}\n-\n-\tvoid incrementCurrentPositionInTrajectory() {\n-\t\tthis.currentPositionInTrajectory++;\n-\t}\n-\n-\tvoid resetCurrentPositionInTrajectory(DayOfWeek day) {\n-\t\tcurrentPositionInTrajectory = startOfDay[day.getValue() - 1];\n-\t}\n-\n-\tint getPositionInTrajectory(DayOfWeek day) {return startOfDay[day.getValue() -1];}\n-\n-\tvoid setStartOfDay(DayOfWeek day, int position) {\n-\t\tstartOfDay[day.getValue() - 1] = position;\n-\t}\n-\n-\t/**\n-\t * Defines that day {@code target} has the same trajectory as {@code source}.\n-\t */\n-\tvoid duplicateDay(DayOfWeek target, DayOfWeek source) {\n-\t\tstartOfDay[target.getValue() - 1] = startOfDay[source.getValue() - 1];\n-\t\tfirstFacilityId[target.getValue() - 1] = firstFacilityId[source.getValue() - 1];\n-\t}\n-\n-\tpublic EpisimContainer<?> getCurrentContainer() {\n-\t\treturn currentContainer;\n-\t}\n-\n-\t/**\n-\t * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n-\t * container can be set.\n-\t */\n-\tpublic void setCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != null)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n-\t\t\t\t\tthis.getPersonId(), container.getContainerId(), this.currentContainer.getContainerId()));\n-\n-\n-\t\tthis.currentContainer = container;\n-\t}\n-\n-\t@Override\n-\tpublic Attributes getAttributes() {\n-\t\treturn attributes;\n-\t}\n-\n-\t/**\n-\t * Whether person is currently in a container.\n-\t */\n-\tpublic boolean isInContainer() {\n-\t\treturn currentContainer != null;\n-\t}\n-\n-\tpublic void removeCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != container)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person is currently in %s, but not in removed one %s\", currentContainer, container));\n-\n-\t\tthis.currentContainer = null;\n-\t}\n-\n-\tId<ActivityFacility> getFirstFacilityId(DayOfWeek day) {\n-\t\treturn firstFacilityId[day.getValue() - 1];\n-\t}\n-\n-\tvoid setFirstFacilityId(Id<ActivityFacility> firstFacilityId, DayOfWeek day) {\n-\t\tthis.firstFacilityId[day.getValue() - 1] = firstFacilityId;\n-\t}\n-\n-\t/**\n-\t * Add amount of time to spent time for an activity.\n-\t */\n-\tpublic void addSpentTime(String actType, double timeSpent) {\n-\t\tspentTime.mergeDouble(actType, timeSpent, Double::sum);\n-\t}\n-\n-\t/**\n-\t * Spent time of this person by activity.\n-\t */\n-\tpublic Object2DoubleMap<String> getSpentTime() {\n-\t\treturn spentTime;\n-\t}\n-\n-\t/**\n-\t * Disease status of a person.\n-\t */\n-\tpublic enum DiseaseStatus {\n-\t\tsusceptible, infectedButNotContagious, contagious, showingSymptoms,\n-\t\tseriouslySick, critical, seriouslySickAfterCritical, recovered\n-\t}\n-\n-\t/**\n-\t * Quarantine status of a person.\n-\t */\n-\tpublic enum QuarantineStatus {full, atHome, no}\n-\n-\t/**\n-\t * Activity performed by a person. Holds the type and its infection params.\n-\t */\n-\tpublic static final class Activity {\n-\n-\t\tpublic final String actType;\n-\t\tpublic final EpisimConfigGroup.InfectionParams params;\n-\n-\t\t/**\n-\t\t * Constructor.\n-\t\t */\n-\t\tpublic Activity(String actType, EpisimConfigGroup.InfectionParams params) {\n-\t\t\tthis.actType = actType;\n-\t\t\tthis.params = params;\n-\t\t}\n-\t}\n+  private final Id<Person> personId;\n+  private final EpisimReporting reporting;\n+  // This data structure is quite slow: log n costs, which should be constant...\n+  private final Attributes attributes;\n+\n+  /**\n+   * Whole trajectory over all days of the week.\n+   */\n+  private final List<Activity> trajectory = new ArrayList<>();\n+\n+  /**\n+   * The position in the trajectory at the start for each day of the week.\n+   */\n+  private final int[] startOfDay = new int[7];\n+\n+  /**\n+   * The first visited {@link org.matsim.facilities.ActivityFacility} for each day.\n+   */\n+  private final Id<ActivityFacility>[] firstFacilityId = new Id[7];\n+\n+  // Fields above are initialized from the sim and not persisted\n+\n+  /**\n+   * Traced contacts with other persons.\n+   */\n+  private final Object2DoubleMap<EpisimPerson> traceableContactPersons =\n+      new Object2DoubleLinkedOpenHashMap<>(4);\n+\n+  /**\n+   * Stores first time of status changes to specific type.\n+   */\n+  private final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n+\n+  /**\n+   * Total spent time during activities.\n+   */\n+  private final Object2DoubleMap<String> spentTime = new Object2DoubleOpenHashMap<>(4);\n+\n+  /**\n+   * The {@link EpisimContainer} the person is currently located in.\n+   */\n+  private EpisimContainer<?> currentContainer = null;\n+  /**\n+   * Current {@link DiseaseStatus}.\n+   */\n+  private DiseaseStatus status = DiseaseStatus.susceptible;\n+  /**\n+   * Current {@link QuarantineStatus}.\n+   */\n+  private QuarantineStatus quarantineStatus = QuarantineStatus.no;\n+\n+  /**\n+   * Iteration when this person got into quarantine. Negative if person was never quarantined.\n+   */\n+  private int quarantineDate = -1;\n+  private int currentPositionInTrajectory;\n+\n+  /**\n+   * Whether this person can be traced.\n+   */\n+  private boolean traceable;\n+\n+  EpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n+    this(personId, attrs, true, reporting);\n+  }\n+\n+  EpisimPerson(Id<Person> personId, Attributes attrs, boolean traceable,\n+               EpisimReporting reporting) {\n+    this.personId = personId;\n+    this.attributes = attrs;\n+    this.traceable = traceable;\n+    this.reporting = reporting;\n+  }\n+\n+  /**\n+   * Reads persons state from stream.\n+   *\n+   * @param persons map of all persons in the simulation\n+   */\n+  void read(ObjectInput in, Map<Id<Person>, EpisimPerson> persons,\n+            Map<Id<ActivityFacility>, InfectionEventHandler.EpisimFacility> facilities,\n+            Map<Id<Vehicle>, InfectionEventHandler.EpisimVehicle> vehicles) throws IOException {\n+\n+    int n = in.readInt();\n+    traceableContactPersons.clear();\n+    for (int i = 0; i < n; i++) {\n+      Id<Person> id = Id.create(readChars(in), Person.class);\n+      traceableContactPersons.put(persons.get(id), in.readDouble());\n+    }\n+\n+    n = in.readInt();\n+    statusChanges.clear();\n+    for (int i = 0; i < n; i++) {\n+      int status = in.readInt();\n+      statusChanges.put(DiseaseStatus.values()[status], in.readDouble());\n+    }\n+\n+    // Current container is set\n+    if (in.readBoolean()) {\n+      boolean isVehicle = in.readBoolean();\n+      String name = readChars(in);\n+      if (isVehicle) {\n+        currentContainer = vehicles.get(Id.create(name, Vehicle.class));\n+      } else {\n+        currentContainer = facilities.get(Id.create(name, ActivityFacility.class));\n+      }\n+\n+      if (currentContainer == null) {\n+        throw new IllegalStateException(\"Could not reconstruct container: \" + name);\n+      }\n+    } else {\n+      currentContainer = null;\n+    }\n+\n+    n = in.readInt();\n+    spentTime.clear();\n+    for (int i = 0; i < n; i++) {\n+      String act = readChars(in);\n+      spentTime.put(act, in.readDouble());\n+    }\n+\n+    status = DiseaseStatus.values()[in.readInt()];\n+    quarantineStatus = QuarantineStatus.values()[in.readInt()];\n+    quarantineDate = in.readInt();\n+    currentPositionInTrajectory = in.readInt();\n+    traceable = in.readBoolean();\n+  }\n+\n+  /**\n+   * Writes person state to stream.\n+   */\n+  void write(ObjectOutput out) throws IOException {\n+\n+    out.writeInt(traceableContactPersons.size());\n+    for (Map.Entry<EpisimPerson, Double> kv : traceableContactPersons.entrySet()) {\n+      writeChars(out, kv.getKey().getPersonId().toString());\n+      out.writeDouble(kv.getValue());\n+    }\n+\n+    out.writeInt(statusChanges.size());\n+    for (Map.Entry<DiseaseStatus, Double> e : statusChanges.entrySet()) {\n+      out.writeInt(e.getKey().ordinal());\n+      out.writeDouble(e.getValue());\n+    }\n+\n+    out.writeBoolean(currentContainer != null);\n+    if (currentContainer != null) {\n+      out.writeBoolean(currentContainer instanceof InfectionEventHandler.EpisimVehicle);\n+      writeChars(out, currentContainer.getContainerId().toString());\n+    }\n+\n+    out.writeInt(spentTime.size());\n+\n+    for (Object2DoubleMap.Entry<String> kv : spentTime.object2DoubleEntrySet()) {\n+      writeChars(out, kv.getKey());\n+      out.writeDouble(kv.getDoubleValue());\n+    }\n+\n+    out.writeInt(status.ordinal());\n+    out.writeInt(quarantineStatus.ordinal());\n+    out.writeInt(quarantineDate);\n+    out.writeInt(currentPositionInTrajectory);\n+    out.writeBoolean(traceable);\n+  }\n+\n+  public Id<Person> getPersonId() {\n+    return personId;\n+  }\n+\n+  public DiseaseStatus getDiseaseStatus() {\n+    return status;\n+  }\n+\n+  public void setDiseaseStatus(double now, DiseaseStatus status) {\n+    this.status = status;\n+    if (!statusChanges.containsKey(status)) {\n+      statusChanges.put(status, now);\n+    }\n+\n+    reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n+  }\n+\n+  public QuarantineStatus getQuarantineStatus() {\n+    return quarantineStatus;\n+  }\n+\n+  public void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n+    this.quarantineStatus = quarantineStatus;\n+    this.quarantineDate = iteration;\n+\n+    // this function should receive now instead of iteration\n+    // only for testing currently\n+    //reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(iteration * 86400d, personId, quarantineStatus));\n+  }\n+\n+\n+  /**\n+   * Days elapsed since a certain status was set.\n+   * This will always round the change as if it happened on the start of a day.\n+   *\n+   * @param status     requested status\n+   * @param currentDay current day (iteration)\n+   * @throws IllegalStateException when the requested status was never set\n+   */\n+  public int daysSince(DiseaseStatus status, int currentDay) {\n+    if (!statusChanges.containsKey(status)) {\n+      throw new IllegalStateException(\"Person was never \" + status);\n+    }\n+\n+    double day = Math.floor(statusChanges.get(status) / 86400d);\n+\n+    return currentDay - (int) day;\n+  }\n+\n+  /**\n+   * Return whether a person had (or currently has) a certain disease status.\n+   */\n+  public boolean hadDiseaseStatus(DiseaseStatus status) {\n+    return statusChanges.containsKey(status);\n+  }\n+\n+  /**\n+   * Days elapsed since person was put into quarantine.\n+   *\n+   * @param currentDay current day (iteration)\n+   * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n+   */\n+  @Beta\n+  public int daysSinceQuarantine(int currentDay) {\n+\n+    // yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n+    // -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n+    if (quarantineDate < 0) {\n+      throw new IllegalStateException(\"Person was never quarantined\");\n+    }\n+\n+    return currentDay - quarantineDate;\n+  }\n+\n+  int getQuarantineDate() {\n+    return this.quarantineDate;\n+  }\n+\n+  public void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n+    // check if both persons have tracing capability\n+    if (isTraceable() && personWrapper.isTraceable()) {\n+      // Always use the latest tracking date\n+      traceableContactPersons.put(personWrapper, now);\n+      reporting.reportTracing(now, this, personWrapper);\n+    }\n+  }\n+\n+  /**\n+   * Get all traced contacts that happened after certain time.\n+   */\n+  public List<EpisimPerson> getTraceableContactPersons(double after) {\n+    return traceableContactPersons.object2DoubleEntrySet()\n+        .stream().filter(p -> p.getDoubleValue() >= after)\n+        .map(Map.Entry::getKey)\n+        .collect(Collectors.toList());\n+\n+    // yyyy if the computationally intensive operation is to search by time, we should sort traceableContactPersons by time.  To simplify this, I\n+    // would argue that it is not a problem to have a person in there multiple times.  kai, may'20\n+\n+  }\n+\n+  /**\n+   * Remove old contact tracing data before a certain date.\n+   */\n+  public void clearTraceableContractPersons(double before) {\n+\n+    int oldSize = traceableContactPersons.size();\n+\n+    if (oldSize == 0) {\n+      return;\n+    }\n+\n+    traceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n+  }\n+\n+  /**\n+   * Returns whether the person can be traced.\n+   */\n+  public boolean isTraceable() {\n+    return traceable;\n+  }\n+\n+  public void setTraceable(boolean traceable) {\n+    this.traceable = traceable;\n+  }\n+\n+  void addToTrajectory(Activity trajectoryElement) {\n+    trajectory.add(trajectoryElement);\n+  }\n+\n+  public List<Activity> getTrajectory() {\n+    return trajectory;\n+  }\n+\n+  public int getCurrentPositionInTrajectory() {\n+    return this.currentPositionInTrajectory;\n+  }\n+\n+  void incrementCurrentPositionInTrajectory() {\n+    this.currentPositionInTrajectory++;\n+  }\n+\n+  void resetCurrentPositionInTrajectory(DayOfWeek day) {\n+    currentPositionInTrajectory = startOfDay[day.getValue() - 1];\n+  }\n+\n+  int getPositionInTrajectory(DayOfWeek day) {\n+    return startOfDay[day.getValue() - 1];\n+  }\n+\n+  void setStartOfDay(DayOfWeek day, int position) {\n+    startOfDay[day.getValue() - 1] = position;\n+  }\n+\n+  /**\n+   * Defines that day {@code target} has the same trajectory as {@code source}.\n+   */\n+  void duplicateDay(DayOfWeek target, DayOfWeek source) {\n+    startOfDay[target.getValue() - 1] = startOfDay[source.getValue() - 1];\n+    firstFacilityId[target.getValue() - 1] = firstFacilityId[source.getValue() - 1];\n+  }\n+\n+  public EpisimContainer<?> getCurrentContainer() {\n+    return currentContainer;\n+  }\n+\n+  /**\n+   * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n+   * container can be set.\n+   */\n+  public void setCurrentContainer(EpisimContainer<?> container) {\n+    if (this.currentContainer != null) {\n+      throw new IllegalStateException(\n+          String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n+              this.getPersonId(), container.getContainerId(),\n+              this.currentContainer.getContainerId()));\n+    }\n+\n+\n+    this.currentContainer = container;\n+  }\n+\n+  @Override\n+  public Attributes getAttributes() {\n+    return attributes;\n+  }\n+\n+  /**\n+   * Whether person is currently in a container.\n+   */\n+  public boolean isInContainer() {\n+    return currentContainer != null;\n+  }\n+\n+  public void removeCurrentContainer(EpisimContainer<?> container) {\n+    if (this.currentContainer != container) {\n+      throw new IllegalStateException(String\n+          .format(\"Person is currently in %s, but not in removed one %s\", currentContainer,\n+              container));\n+    }\n+\n+    this.currentContainer = null;\n+  }\n+\n+  Id<ActivityFacility> getFirstFacilityId(DayOfWeek day) {\n+    return firstFacilityId[day.getValue() - 1];\n+  }\n+\n+  void setFirstFacilityId(Id<ActivityFacility> firstFacilityId, DayOfWeek day) {\n+    this.firstFacilityId[day.getValue() - 1] = firstFacilityId;\n+  }\n+\n+  /**\n+   * Add amount of time to spent time for an activity.\n+   */\n+  public void addSpentTime(String actType, double timeSpent) {\n+    spentTime.mergeDouble(actType, timeSpent, Double::sum);\n+  }\n+\n+  /**\n+   * Spent time of this person by activity.\n+   */\n+  public Object2DoubleMap<String> getSpentTime() {\n+    return spentTime;\n+  }\n+\n+  /**\n+   * Disease status of a person.\n+   */\n+  public enum DiseaseStatus {\n+    susceptible, infectedButNotContagious, contagious, showingSymptoms,\n+    seriouslySick, critical, seriouslySickAfterCritical, recovered\n+  }\n+\n+  /**\n+   * Quarantine status of a person.\n+   */\n+  public enum QuarantineStatus {full, atHome, no}\n+\n+  /**\n+   * Activity performed by a person. Holds the type and its infection params.\n+   */\n+  public static final class Activity {\n+\n+    public final String actType;\n+    public final EpisimConfigGroup.InfectionParams params;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public Activity(String actType, EpisimConfigGroup.InfectionParams params) {\n+      this.actType = actType;\n+      this.params = params;\n+    }\n+  }\n }\n",
            "diff_size": 421
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "315",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "316",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "317",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "402",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "403",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "404",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/4/EpisimPerson.java\nindex 2ac14ded399..44f8d0c1d8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/4/EpisimPerson.java\n@@ -31,7 +31,6 @@ import org.matsim.facilities.ActivityFacility;\n import org.matsim.utils.objectattributes.attributable.Attributable;\n import org.matsim.utils.objectattributes.attributable.Attributes;\n import org.matsim.vehicles.Vehicle;\n-\n import java.io.IOException;\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n@@ -41,413 +40,458 @@ import java.util.EnumMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-\n import static org.matsim.episim.EpisimUtils.readChars;\n+\n import static org.matsim.episim.EpisimUtils.writeChars;\n \n /**\n  * Persons current state in the simulation.\n  */\n+\n+\n public final class EpisimPerson implements Attributable {\n \n-\tprivate final Id<Person> personId;\n-\tprivate final EpisimReporting reporting;\n-\t// This data structure is quite slow: log n costs, which should be constant...\n-\tprivate final Attributes attributes;\n-\n-\t/**\n-\t * Whole trajectory over all days of the week.\n-\t */\n-\tprivate final List<Activity> trajectory = new ArrayList<>();\n-\n-\t/**\n-\t * The position in the trajectory at the start for each day of the week.\n-\t */\n-\tprivate final int[] startOfDay = new int[7];\n-\n-\t/**\n-\t * The first visited {@link org.matsim.facilities.ActivityFacility} for each day.\n-\t */\n-\tprivate final Id<ActivityFacility>[] firstFacilityId = new Id[7];\n-\n-\t// Fields above are initialized from the sim and not persisted\n-\n-\t/**\n-\t * Traced contacts with other persons.\n-\t */\n-\tprivate final Object2DoubleMap<EpisimPerson> traceableContactPersons = new Object2DoubleLinkedOpenHashMap<>(4);\n-\n-\t/**\n-\t * Stores first time of status changes to specific type.\n-\t */\n-\tprivate final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n-\n-\t/**\n-\t * Total spent time during activities.\n-\t */\n-\tprivate final Object2DoubleMap<String> spentTime = new Object2DoubleOpenHashMap<>(4);\n-\n-\t/**\n-\t * The {@link EpisimContainer} the person is currently located in.\n-\t */\n-\tprivate EpisimContainer<?> currentContainer = null;\n-\t/**\n-\t * Current {@link DiseaseStatus}.\n-\t */\n-\tprivate DiseaseStatus status = DiseaseStatus.susceptible;\n-\t/**\n-\t * Current {@link QuarantineStatus}.\n-\t */\n-\tprivate QuarantineStatus quarantineStatus = QuarantineStatus.no;\n-\n-\t/**\n-\t * Iteration when this person got into quarantine. Negative if person was never quarantined.\n-\t */\n-\tprivate int quarantineDate = -1;\n-\tprivate int currentPositionInTrajectory;\n-\n-\t/**\n-\t * Whether this person can be traced.\n-\t */\n-\tprivate boolean traceable;\n-\n-\tEpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n-\t\tthis(personId, attrs, true, reporting);\n-\t}\n-\n-\tEpisimPerson(Id<Person> personId, Attributes attrs, boolean traceable, EpisimReporting reporting) {\n-\t\tthis.personId = personId;\n-\t\tthis.attributes = attrs;\n-\t\tthis.traceable = traceable;\n-\t\tthis.reporting = reporting;\n-\t}\n-\n-\t/**\n-\t * Reads persons state from stream.\n-\t *\n-\t * @param persons map of all persons in the simulation\n-\t */\n-\tvoid read(ObjectInput in, Map<Id<Person>, EpisimPerson> persons,\n-\t\t\t  Map<Id<ActivityFacility>, InfectionEventHandler.EpisimFacility> facilities,\n-\t\t\t  Map<Id<Vehicle>, InfectionEventHandler.EpisimVehicle> vehicles) throws IOException {\n-\n-\t\tint n = in.readInt();\n-\t\ttraceableContactPersons.clear();\n-\t\tfor (int i = 0; i < n; i++) {\n-\t\t\tId<Person> id = Id.create(readChars(in), Person.class);\n-\t\t\ttraceableContactPersons.put(persons.get(id), in.readDouble());\n-\t\t}\n-\n-\t\tn = in.readInt();\n-\t\tstatusChanges.clear();\n-\t\tfor (int i = 0; i < n; i++) {\n-\t\t\tint status = in.readInt();\n-\t\t\tstatusChanges.put(DiseaseStatus.values()[status], in.readDouble());\n-\t\t}\n-\n-\t\t// Current container is set\n-\t\tif (in.readBoolean()) {\n-\t\t\tboolean isVehicle = in.readBoolean();\n-\t\t\tString name = readChars(in);\n-\t\t\tif (isVehicle) {\n-\t\t\t\tcurrentContainer = vehicles.get(Id.create(name, Vehicle.class));\n-\t\t\t} else\n-\t\t\t\tcurrentContainer = facilities.get(Id.create(name, ActivityFacility.class));\n-\n-\t\t\tif (currentContainer == null)\n-\t\t\t\tthrow new IllegalStateException(\"Could not reconstruct container: \" + name);\n-\t\t} else\n-\t\t\tcurrentContainer = null;\n-\n-\t\tn = in.readInt();\n-\t\tspentTime.clear();\n-\t\tfor (int i = 0; i < n; i++) {\n-\t\t\tString act = readChars(in);\n-\t\t\tspentTime.put(act, in.readDouble());\n-\t\t}\n-\n-\t\tstatus = DiseaseStatus.values()[in.readInt()];\n-\t\tquarantineStatus = QuarantineStatus.values()[in.readInt()];\n-\t\tquarantineDate = in.readInt();\n-\t\tcurrentPositionInTrajectory = in.readInt();\n-\t\ttraceable = in.readBoolean();\n-\t}\n-\n-\t/**\n-\t * Writes person state to stream.\n-\t */\n-\tvoid write(ObjectOutput out) throws IOException {\n-\n-\t\tout.writeInt(traceableContactPersons.size());\n-\t\tfor (Map.Entry<EpisimPerson, Double> kv : traceableContactPersons.entrySet()) {\n-\t\t\twriteChars(out, kv.getKey().getPersonId().toString());\n-\t\t\tout.writeDouble(kv.getValue());\n-\t\t}\n-\n-\t\tout.writeInt(statusChanges.size());\n-\t\tfor (Map.Entry<DiseaseStatus, Double> e : statusChanges.entrySet()) {\n-\t\t\tout.writeInt(e.getKey().ordinal());\n-\t\t\tout.writeDouble(e.getValue());\n-\t\t}\n-\n-\t\tout.writeBoolean(currentContainer != null);\n-\t\tif (currentContainer != null) {\n-\t\t\tout.writeBoolean(currentContainer instanceof InfectionEventHandler.EpisimVehicle);\n-\t\t\twriteChars(out, currentContainer.getContainerId().toString());\n-\t\t}\n-\n-\t\tout.writeInt(spentTime.size());\n-\n-\t\tfor (Object2DoubleMap.Entry<String> kv : spentTime.object2DoubleEntrySet()) {\n-\t\t\twriteChars(out, kv.getKey());\n-\t\t\tout.writeDouble(kv.getDoubleValue());\n-\t\t}\n-\n-\t\tout.writeInt(status.ordinal());\n-\t\tout.writeInt(quarantineStatus.ordinal());\n-\t\tout.writeInt(quarantineDate);\n-\t\tout.writeInt(currentPositionInTrajectory);\n-\t\tout.writeBoolean(traceable);\n-\t}\n-\n-\tpublic Id<Person> getPersonId() {\n-\t\treturn personId;\n-\t}\n-\n-\tpublic DiseaseStatus getDiseaseStatus() {\n-\t\treturn status;\n-\t}\n-\n-\tpublic void setDiseaseStatus(double now, DiseaseStatus status) {\n-\t\tthis.status = status;\n-\t\tif (!statusChanges.containsKey(status))\n-\t\t\tstatusChanges.put(status, now);\n-\n-\t\treporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n-\t}\n-\n-\tpublic QuarantineStatus getQuarantineStatus() {\n-\t\treturn quarantineStatus;\n-\t}\n-\n-\tpublic void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n-\t\tthis.quarantineStatus = quarantineStatus;\n-\t\tthis.quarantineDate = iteration;\n-\n-\t\t// this function should receive now instead of iteration\n-\t\t// only for testing currently\n-\t\t//reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(iteration * 86400d, personId, quarantineStatus));\n-\t}\n-\n-\n-\t/**\n-\t * Days elapsed since a certain status was set.\n-\t * This will always round the change as if it happened on the start of a day.\n-\t *\n-\t * @param status     requested status\n-\t * @param currentDay current day (iteration)\n-\t * @throws IllegalStateException when the requested status was never set\n-\t */\n-\tpublic int daysSince(DiseaseStatus status, int currentDay) {\n-\t\tif (!statusChanges.containsKey(status)) throw new IllegalStateException(\"Person was never \" + status);\n-\n-\t\tdouble day = Math.floor(statusChanges.get(status) / 86400d);\n-\n-\t\treturn currentDay - (int) day;\n-\t}\n-\n-\t/**\n-\t * Return whether a person had (or currently has) a certain disease status.\n-\t */\n-\tpublic boolean hadDiseaseStatus(DiseaseStatus status) {\n-\t\treturn statusChanges.containsKey(status);\n-\t}\n-\n-\t/**\n-\t * Days elapsed since person was put into quarantine.\n-\t *\n-\t * @param currentDay current day (iteration)\n-\t * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n-\t */\n-\t@Beta\n-\tpublic int daysSinceQuarantine(int currentDay) {\n-\n-\t\t// yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n-\t\t// -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n-\t\tif (quarantineDate < 0) throw new IllegalStateException(\"Person was never quarantined\");\n-\n-\t\treturn currentDay - quarantineDate;\n-\t}\n-\n-\tint getQuarantineDate() {\n-\t\treturn this.quarantineDate;\n-\t}\n-\n-\tpublic void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n-\t\t// check if both persons have tracing capability\n-\t\tif (isTraceable() && personWrapper.isTraceable()) {\n-\t\t\t// Always use the latest tracking date\n-\t\t\ttraceableContactPersons.put(personWrapper, now);\n-\t\t\treporting.reportTracing(now, this, personWrapper);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Get all traced contacts that happened after certain time.\n-\t */\n-\tpublic List<EpisimPerson> getTraceableContactPersons(double after) {\n-\t\treturn traceableContactPersons.object2DoubleEntrySet()\n-\t\t\t\t.stream().filter(p -> p.getDoubleValue() >= after)\n-\t\t\t\t.map(Map.Entry::getKey)\n-\t\t\t\t.collect(Collectors.toList());\n-\n-\t\t// yyyy if the computationally intensive operation is to search by time, we should sort traceableContactPersons by time.  To simplify this, I\n-\t\t// would argue that it is not a problem to have a person in there multiple times.  kai, may'20\n-\n-\t}\n-\n-\t/**\n-\t * Remove old contact tracing data before a certain date.\n-\t */\n-\tpublic void clearTraceableContractPersons(double before) {\n-\n-\t\tint oldSize = traceableContactPersons.size();\n-\n-\t\tif (oldSize == 0) return;\n-\n-\t\ttraceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n-\t}\n-\n-\t/**\n-\t * Returns whether the person can be traced.\n-\t */\n-\tpublic boolean isTraceable() {\n-\t\treturn traceable;\n-\t}\n-\n-\tpublic void setTraceable(boolean traceable) {\n-\t\tthis.traceable = traceable;\n-\t}\n-\n-\tvoid addToTrajectory(Activity trajectoryElement) {\n-\t\ttrajectory.add(trajectoryElement);\n-\t}\n-\n-\tpublic List<Activity> getTrajectory() {\n-\t\treturn trajectory;\n-\t}\n-\n-\tpublic int getCurrentPositionInTrajectory() {\n-\t\treturn this.currentPositionInTrajectory;\n-\t}\n-\n-\tvoid incrementCurrentPositionInTrajectory() {\n-\t\tthis.currentPositionInTrajectory++;\n-\t}\n-\n-\tvoid resetCurrentPositionInTrajectory(DayOfWeek day) {\n-\t\tcurrentPositionInTrajectory = startOfDay[day.getValue() - 1];\n-\t}\n-\n-\tint getPositionInTrajectory(DayOfWeek day) {return startOfDay[day.getValue() -1];}\n-\n-\tvoid setStartOfDay(DayOfWeek day, int position) {\n-\t\tstartOfDay[day.getValue() - 1] = position;\n-\t}\n-\n-\t/**\n-\t * Defines that day {@code target} has the same trajectory as {@code source}.\n-\t */\n-\tvoid duplicateDay(DayOfWeek target, DayOfWeek source) {\n-\t\tstartOfDay[target.getValue() - 1] = startOfDay[source.getValue() - 1];\n-\t\tfirstFacilityId[target.getValue() - 1] = firstFacilityId[source.getValue() - 1];\n-\t}\n-\n-\tpublic EpisimContainer<?> getCurrentContainer() {\n-\t\treturn currentContainer;\n-\t}\n-\n-\t/**\n-\t * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n-\t * container can be set.\n-\t */\n-\tpublic void setCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != null)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n-\t\t\t\t\tthis.getPersonId(), container.getContainerId(), this.currentContainer.getContainerId()));\n-\n-\n-\t\tthis.currentContainer = container;\n-\t}\n-\n-\t@Override\n-\tpublic Attributes getAttributes() {\n-\t\treturn attributes;\n-\t}\n-\n-\t/**\n-\t * Whether person is currently in a container.\n-\t */\n-\tpublic boolean isInContainer() {\n-\t\treturn currentContainer != null;\n-\t}\n-\n-\tpublic void removeCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != container)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person is currently in %s, but not in removed one %s\", currentContainer, container));\n-\n-\t\tthis.currentContainer = null;\n-\t}\n-\n-\tId<ActivityFacility> getFirstFacilityId(DayOfWeek day) {\n-\t\treturn firstFacilityId[day.getValue() - 1];\n-\t}\n-\n-\tvoid setFirstFacilityId(Id<ActivityFacility> firstFacilityId, DayOfWeek day) {\n-\t\tthis.firstFacilityId[day.getValue() - 1] = firstFacilityId;\n-\t}\n-\n-\t/**\n-\t * Add amount of time to spent time for an activity.\n-\t */\n-\tpublic void addSpentTime(String actType, double timeSpent) {\n-\t\tspentTime.mergeDouble(actType, timeSpent, Double::sum);\n-\t}\n-\n-\t/**\n-\t * Spent time of this person by activity.\n-\t */\n-\tpublic Object2DoubleMap<String> getSpentTime() {\n-\t\treturn spentTime;\n-\t}\n-\n-\t/**\n-\t * Disease status of a person.\n-\t */\n-\tpublic enum DiseaseStatus {\n-\t\tsusceptible, infectedButNotContagious, contagious, showingSymptoms,\n-\t\tseriouslySick, critical, seriouslySickAfterCritical, recovered\n-\t}\n-\n-\t/**\n-\t * Quarantine status of a person.\n-\t */\n-\tpublic enum QuarantineStatus {full, atHome, no}\n-\n-\t/**\n-\t * Activity performed by a person. Holds the type and its infection params.\n-\t */\n-\tpublic static final class Activity {\n-\n-\t\tpublic final String actType;\n-\t\tpublic final EpisimConfigGroup.InfectionParams params;\n-\n-\t\t/**\n-\t\t * Constructor.\n-\t\t */\n-\t\tpublic Activity(String actType, EpisimConfigGroup.InfectionParams params) {\n-\t\t\tthis.actType = actType;\n-\t\t\tthis.params = params;\n-\t\t}\n-\t}\n-}\n+ private final Id<Person> personId;\n+ private final EpisimReporting reporting;\n+ // This data structure is quite slow: log n costs, which should be constant...\n+ private final Attributes attributes;\n+\n+ /**\n+  * Whole trajectory over all days of the week.\n+  */\n+ private final List<Activity> trajectory = new ArrayList<>();\n+\n+ /**\n+  * The position in the trajectory at the start for each day of the week.\n+  */\n+ private final int[] startOfDay = new int[7];\n+\n+ /**\n+  * The first visited {@link org.matsim.facilities.ActivityFacility} for each day.\n+  */\n+ private final Id<ActivityFacility>[] firstFacilityId = new Id[7];\n+\n+ // Fields above are initialized from the sim and not persisted\n+\n+ /**\n+  * Traced contacts with other persons.\n+  */\n+ private final Object2DoubleMap<EpisimPerson> traceableContactPersons = new Object2DoubleLinkedOpenHashMap<>(4);\n+\n+ /**\n+  * Stores first time of status changes to specific type.\n+  */\n+ private final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n+\n+ /**\n+  * Total spent time during activities.\n+  */\n+ private final Object2DoubleMap<String> spentTime = new Object2DoubleOpenHashMap<>(4);\n+\n+ /**\n+  * The {@link EpisimContainer} the person is currently located in.\n+  */\n+ private EpisimContainer<?> currentContainer = null;\n+ /**\n+  * Current {@link DiseaseStatus}.\n+  */\n+ private DiseaseStatus status = DiseaseStatus.susceptible;\n+ /**\n+  * Current {@link QuarantineStatus}.\n+  */\n+ private QuarantineStatus quarantineStatus = QuarantineStatus.no;\n+\n+ /**\n+  * Iteration when this person got into quarantine. Negative if person was never quarantined.\n+  */\n+ private int quarantineDate = -1;\n+ private int currentPositionInTrajectory;\n+\n+ /**\n+  * Whether this person can be traced.\n+  */\n+ private boolean traceable;\n+\n+ EpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n+  this(personId, attrs, true, reporting);\n+ }\n+\n+\n+ EpisimPerson(Id<Person> personId, Attributes attrs, boolean traceable, EpisimReporting reporting) {\n+  this.personId = personId;\n+  this.attributes = attrs;\n+  this.traceable = traceable;\n+  this.reporting = reporting;\n+ }\n+\n+ /**\n+  * Reads persons state from stream.\n+  *\n+  * @param persons map of all persons in the simulation\n+  */\n+\n+ void read(ObjectInput in, Map<Id<Person>, EpisimPerson> persons, Map<Id<ActivityFacility>, InfectionEventHandler.EpisimFacility> facilities, Map<Id<Vehicle>, InfectionEventHandler.EpisimVehicle> vehicles) throws IOException {\n+  int n = in.readInt();\n+  traceableContactPersons.clear();\n+\n+  for (int i = 0; i < n; i++) {\n+   Id<Person> id = Id.create(readChars(in), Person.class);\n+   traceableContactPersons.put(persons.get(id), in.readDouble());\n+  }\n+\n+  n = in.readInt();\n+  statusChanges.clear();\n+\n+  for (int i = 0; i < n; i++) {\n+   int status = in.readInt();\n+   statusChanges.put(DiseaseStatus.values()[status], in.readDouble());\n+  }\n+\n+  // Current container is set\n+\n+  if (in.readBoolean()) {\n+   boolean isVehicle = in.readBoolean();\n+   String name = readChars(in);\n+   if (isVehicle) {\n+    currentContainer = vehicles.get(Id.create(name, Vehicle.class));\n+   } else currentContainer = facilities.get(Id.create(name, ActivityFacility.class));\n+   if (currentContainer == null) throw new IllegalStateException(\"Could not reconstruct container: \" + name);\n+  } else currentContainer = null;\n+  n = in.readInt();\n+  spentTime.clear();\n+\n+  for (int i = 0; i < n; i++) {\n+   String act = readChars(in);\n+   spentTime.put(act, in.readDouble());\n+  }\n+\n+  status = DiseaseStatus.values()[in.readInt()];\n+  quarantineStatus = QuarantineStatus.values()[in.readInt()];\n+  quarantineDate = in.readInt();\n+  currentPositionInTrajectory = in.readInt();\n+  traceable = in.readBoolean();\n+ }\n+\n+ /**\n+  * Writes person state to stream.\n+  */\n+\n+ void write(ObjectOutput out) throws IOException {\n+  out.writeInt(traceableContactPersons.size());\n+\n+  for (Map.Entry<EpisimPerson, Double> kv : traceableContactPersons.entrySet()) {\n+   writeChars(out, kv.getKey().getPersonId()\n+                              .toString());\n+   out.writeDouble(kv.getValue());\n+  }\n+\n+  out.writeInt(statusChanges.size());\n+\n+  for (Map.Entry<DiseaseStatus, Double> e : statusChanges.entrySet()) {\n+   out.writeInt(e.getKey().ordinal());\n+   out.writeDouble(e.getValue());\n+  }\n+\n+  out.writeBoolean(currentContainer != null);\n+  if (currentContainer != null) {\n+   out.writeBoolean(currentContainer instanceof InfectionEventHandler.EpisimVehicle);\n+   writeChars(out, currentContainer.getContainerId().toString());\n+  }\n+\n+  out.writeInt(spentTime.size());\n+\n+  for (Object2DoubleMap.Entry<String> kv : spentTime.object2DoubleEntrySet()) {\n+   writeChars(out, kv.getKey());\n+   out.writeDouble(kv.getDoubleValue());\n+  }\n+\n+  out.writeInt(status.ordinal());\n+  out.writeInt(quarantineStatus.ordinal());\n+  out.writeInt(quarantineDate);\n+  out.writeInt(currentPositionInTrajectory);\n+  out.writeBoolean(traceable);\n+ }\n+\n+\n+ public Id<Person> getPersonId() {\n+  return personId;\n+ }\n+\n+\n+ public DiseaseStatus getDiseaseStatus() {\n+  return status;\n+ }\n+\n+\n+ public void setDiseaseStatus(double now, DiseaseStatus status) {\n+  this.status = status;\n+  if (!statusChanges.containsKey(status))\n+   statusChanges.put(status, now);\n+  reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n+ }\n+\n+\n+ public QuarantineStatus getQuarantineStatus() {\n+  return quarantineStatus;\n+ }\n+\n+\n+ public void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n+  this.quarantineStatus = quarantineStatus;\n+  this.quarantineDate = iteration;\n+\n+  // this function should receive now instead of iteration\n+  // only for testing currently\n+  //reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(iteration * 86400d, personId, quarantineStatus));\n+ }\n+\n+\n+ /**\n+  * Days elapsed since a certain status was set.\n+  * This will always round the change as if it happened on the start of a day.\n+  *\n+  * @param status     requested status\n+  * @param currentDay current day (iteration)\n+  * @throws IllegalStateException when the requested status was never set\n+  */\n+\n+\n+ public int daysSince(DiseaseStatus status, int currentDay) {\n+\n+  if (!statusChanges.containsKey(status)) throw new IllegalStateException(\"Person was never \" + status);\n+\n+  double day = Math.floor(statusChanges.get(status) / 86400d);\n+  return currentDay - (int) day;\n+ }\n+\n+ /**\n+  * Return whether a person had (or currently has) a certain disease status.\n+  */\n+\n+\n+ public boolean hadDiseaseStatus(DiseaseStatus status) {\n+  return statusChanges.containsKey(status);\n+ }\n+\n+ /**\n+  * Days elapsed since person was put into quarantine.\n+  *\n+  * @param currentDay current day (iteration)\n+  * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n+  */\n+\n+ @Beta\n+ public int daysSinceQuarantine(int currentDay) {\n+\n+  // yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n+  // -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n+\n+  if (quarantineDate < 0) throw new IllegalStateException(\"Person was never quarantined\");\n+  return currentDay - quarantineDate;\n+ }\n+\n+ int getQuarantineDate() {\n+  return this.quarantineDate;\n+ }\n+\n+\n+ public void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n+  // check if both persons have tracing capability\n+\n+  if (isTraceable() && personWrapper.isTraceable()) {\n+   // Always use the latest tracking date\n+   traceableContactPersons.put(personWrapper, now);\n+   reporting.reportTracing(now, this, personWrapper);\n+  }\n+ }\n+\n+ /**\n+  * Get all traced contacts that happened after certain time.\n+  */\n+\n+\n+ public List<EpisimPerson> getTraceableContactPersons(double after) {\n+  return traceableContactPersons.object2DoubleEntrySet().stream()\n+                                                        .filter(p -> p.getDoubleValue() >= after)\n+                                                        .map(Map.Entry::getKey)\n+                                                        .collect(Collectors.toList());\n+\n+  // yyyy if the computationally intensive operation is to search by time, we should sort traceableContactPersons by time.  To simplify this, I\n+  // would argue that it is not a problem to have a person in there multiple times.  kai, may'20\n+ }\n+\n+ /**\n+  * Remove old contact tracing data before a certain date.\n+  */\n+\n+\n+ public void clearTraceableContractPersons(double before) {\n+  int oldSize = traceableContactPersons.size();\n+  if (oldSize == 0)\n+   return;\n+  traceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n+ }\n+\n+ /**\n+  * Returns whether the person can be traced.\n+  */\n+\n+\n+ public boolean isTraceable() {\n+  return traceable;\n+ }\n+\n+\n+ public void setTraceable(boolean traceable) {\n+  this.traceable = traceable;\n+ }\n+\n+ void addToTrajectory(Activity trajectoryElement) {\n+  trajectory.add(trajectoryElement);\n+ }\n+\n+\n+ public List<Activity> getTrajectory() {\n+  return trajectory;\n+ }\n+\n+\n+ public int getCurrentPositionInTrajectory() {\n+  return this.currentPositionInTrajectory;\n+ }\n+\n+ void incrementCurrentPositionInTrajectory() {\n+  this.currentPositionInTrajectory++;\n+ }\n+\n+ void resetCurrentPositionInTrajectory(DayOfWeek day) {\n+  currentPositionInTrajectory = startOfDay[day.getValue() - 1];\n+ }\n+\n+ int getPositionInTrajectory(DayOfWeek day) {\n+  return startOfDay[day.getValue() - 1];\n+ }\n+\n+ void setStartOfDay(DayOfWeek day, int position) {\n+  startOfDay[day.getValue() - 1] = position;\n+ }\n+\n+ /**\n+  * Defines that day {@code target} has the same trajectory as {@code source}.\n+  */\n+\n+ void duplicateDay(DayOfWeek target, DayOfWeek source) {\n+  startOfDay[target.getValue() - 1] = startOfDay[source.getValue() - 1];\n+  firstFacilityId[target.getValue() - 1] = firstFacilityId[source.getValue() - 1];\n+ }\n+\n+\n+ public EpisimContainer<?> getCurrentContainer() {\n+  return currentContainer;\n+ }\n+\n+ /**\n+  * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n+  * container can be set.\n+  */\n+\n+\n+ public void setCurrentContainer(EpisimContainer<?> container) {\n+\n+  if (this.currentContainer != null) throw new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n+                                                                                   this.getPersonId(),\n+                                                                                   container.getContainerId(),\n+                                                                                   this.currentContainer.getContainerId()));\n+  this.currentContainer = container;\n+ }\n+\n+ @Override\n+ public Attributes getAttributes() {\n+  return attributes;\n+ }\n+\n+ /**\n+  * Whether person is currently in a container.\n+  */\n+\n+\n+ public boolean isInContainer() {\n+  return currentContainer != null;\n+ }\n+\n+\n+ public void removeCurrentContainer(EpisimContainer<?> container) {\n+\n+  if (this.currentContainer != container) throw new IllegalStateException(String.format(\"Person is currently in %s, but not in removed one %s\", currentContainer, container));\n+  this.currentContainer = null;\n+ }\n+\n+ Id<ActivityFacility> getFirstFacilityId(DayOfWeek day) {\n+  return firstFacilityId[day.getValue() - 1];\n+ }\n+\n+ void setFirstFacilityId(Id<ActivityFacility> firstFacilityId, DayOfWeek day) {\n+  this.firstFacilityId[day.getValue() - 1] = firstFacilityId;\n+ }\n+\n+ /**\n+  * Add amount of time to spent time for an activity.\n+  */\n+\n+\n+ public void addSpentTime(String actType, double timeSpent) {\n+  spentTime.mergeDouble(actType, timeSpent, Double::sum);\n+ }\n+\n+ /**\n+  * Spent time of this person by activity.\n+  */\n+\n+\n+ public Object2DoubleMap<String> getSpentTime() {\n+  return spentTime;\n+ }\n+\n+ /**\n+  * Disease status of a person.\n+  */\n+\n+\n+ public enum DiseaseStatus {susceptible, infectedButNotContagious, contagious, showingSymptoms, seriouslySick, critical, seriouslySickAfterCritical, recovered}\n+\n+ /**\n+  * Quarantine status of a person.\n+  */\n+\n+\n+ public enum QuarantineStatus {\n+\n+  full,\n+\n+  atHome,\n+\n+  no\n+ }\n+\n+ /**\n+  * Activity performed by a person. Holds the type and its infection params.\n+  */\n+\n+\n+ public static final class Activity {\n+\n+  public final String actType;\n+\n+  public final EpisimConfigGroup.InfectionParams params;\n+\n+  /**\n+   * Constructor.\n+   */\n+\n+\n+  public Activity(String actType, EpisimConfigGroup.InfectionParams params) {\n+   this.actType = actType;\n+   this.params = params;\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 449
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "352",
                    "column": "52",
                    "severity": "error",
                    "message": "'{' at column 45 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_random/4/EpisimPerson.java\nindex 2ac14ded399..3de04ad63fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_random/4/EpisimPerson.java\n@@ -349,7 +349,7 @@ public final class EpisimPerson implements Attributable {\n \t\tcurrentPositionInTrajectory = startOfDay[day.getValue() - 1];\n \t}\n \n-\tint getPositionInTrajectory(DayOfWeek day) {return startOfDay[day.getValue() -1];}\n+\tint getPositionInTrajectory(DayOfWeek day) { return startOfDay[day.getValue() -1];}\n \n \tvoid setStartOfDay(DayOfWeek day, int position) {\n \t\tstartOfDay[day.getValue() - 1] = position;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_three_grams/4/EpisimPerson.java\nindex 2ac14ded399..6fb4040ef39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/4/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_three_grams/4/EpisimPerson.java\n@@ -349,7 +349,8 @@ public final class EpisimPerson implements Attributable {\n \t\tcurrentPositionInTrajectory = startOfDay[day.getValue() - 1];\n \t}\n \n-\tint getPositionInTrajectory(DayOfWeek day) {return startOfDay[day.getValue() -1];}\n+\tint getPositionInTrajectory(DayOfWeek day) {\n+\t\treturn startOfDay[day.getValue() -1];}\n \n \tvoid setStartOfDay(DayOfWeek day, int position) {\n \t\tstartOfDay[day.getValue() - 1] = position;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}