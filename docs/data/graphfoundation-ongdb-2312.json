{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2312",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2312/StoreId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2312/StoreId.java\nindex f3306098b1c..baf63c360f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2312/StoreId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2312/StoreId.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.Externalizable;\n@@ -29,134 +30,134 @@ import java.util.Random;\n public final class StoreId implements Externalizable\n {\n \n-    public static final StoreId DEFAULT = new StoreId( -1, -1, -1, -1, -1 );\n-\n-    private static final Random r = new SecureRandom();\n-\n-    private long creationTime;\n-    private long randomId;\n-    private long storeVersion;\n-    private long upgradeTime;\n-    private long upgradeId;\n-\n-    public StoreId()\n-    {\n-        //For the readExternal method.\n-    }\n-\n-    public StoreId( long storeVersion )\n-    {\n-        // If creationTime == upgradeTime && randomNumber == upgradeId then store has never been upgraded\n-        long currentTimeMillis = System.currentTimeMillis();\n-        long randomLong = r.nextLong();\n-        this.storeVersion = storeVersion;\n-        this.creationTime = currentTimeMillis;\n-        this.randomId = randomLong;\n-        this.upgradeTime = currentTimeMillis;\n-        this.upgradeId = randomLong;\n-    }\n-\n-    public StoreId( long creationTime, long randomId, long storeVersion, long upgradeTime, long upgradeId )\n-    {\n-        this.creationTime = creationTime;\n-        this.randomId = randomId;\n-        this.storeVersion = storeVersion;\n-        this.upgradeTime = upgradeTime;\n-        this.upgradeId = upgradeId;\n-    }\n-\n-    public static StoreId from( ObjectInput in ) throws IOException\n-    {\n-        StoreId storeId = new StoreId();\n-        storeId.readExternal( in );\n-        return storeId;\n-    }\n-\n-    public long getCreationTime()\n-    {\n-        return creationTime;\n-    }\n-\n-    public long getRandomId()\n-    {\n-        return randomId;\n-    }\n-\n-    public long getUpgradeTime()\n-    {\n-        return upgradeTime;\n-    }\n-\n-    public long getUpgradeId()\n-    {\n-        return upgradeId;\n-    }\n-\n-    public long getStoreVersion()\n-    {\n-        return storeVersion;\n-    }\n-\n-    @Override\n-    public void writeExternal( ObjectOutput out ) throws IOException\n-    {\n-        out.writeLong( creationTime );\n-        out.writeLong( randomId );\n-        out.writeLong( storeVersion );\n-        out.writeLong( upgradeTime );\n-        out.writeLong( upgradeId );\n-    }\n-\n-    @Override\n-    public void readExternal( ObjectInput in ) throws IOException\n-    {\n-        creationTime = in.readLong();\n-        randomId = in.readLong();\n-        storeVersion = in.readLong();\n-        upgradeTime = in.readLong();\n-        upgradeId = in.readLong();\n-    }\n-\n-    public boolean equalsByUpgradeId( StoreId other )\n-    {\n-        return internalEqual( upgradeTime, other.upgradeTime ) && internalEqual( upgradeId, other.upgradeId );\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        StoreId other = (StoreId) o;\n-        return internalEqual( creationTime, other.creationTime ) && internalEqual( randomId, other.randomId );\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return 31 * (int) (creationTime ^ (creationTime >>> 32)) + (int) (randomId ^ (randomId >>> 32));\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"StoreId{\" +\n-                \"creationTime=\" + creationTime +\n-                \", randomId=\" + randomId +\n-                \", storeVersion=\" + storeVersion +\n-                \", upgradeTime=\" + upgradeTime +\n-                \", upgradeId=\" + upgradeId +\n-                '}';\n-    }\n-\n-    private static boolean internalEqual( long first, long second )\n-    {\n-        return first == second || first == -1 || second == -1;\n-    }\n+  public static final StoreId DEFAULT = new StoreId(-1, -1, -1, -1, -1);\n+\n+  private static final Random r = new SecureRandom();\n+\n+  private long creationTime;\n+  private long randomId;\n+  private long storeVersion;\n+  private long upgradeTime;\n+  private long upgradeId;\n+\n+  public StoreId()\n+  {\n+    //For the readExternal method.\n+  }\n+\n+  public StoreId(long storeVersion)\n+  {\n+    // If creationTime == upgradeTime && randomNumber == upgradeId then store has never been upgraded\n+    long currentTimeMillis = System.currentTimeMillis();\n+    long randomLong = r.nextLong();\n+    this.storeVersion = storeVersion;\n+    this.creationTime = currentTimeMillis;\n+    this.randomId = randomLong;\n+    this.upgradeTime = currentTimeMillis;\n+    this.upgradeId = randomLong;\n+  }\n+\n+  public StoreId(long creationTime, long randomId, long storeVersion, long upgradeTime, long upgradeId)\n+  {\n+    this.creationTime = creationTime;\n+    this.randomId = randomId;\n+    this.storeVersion = storeVersion;\n+    this.upgradeTime = upgradeTime;\n+    this.upgradeId = upgradeId;\n+  }\n+\n+  public static StoreId from(ObjectInput in) throws IOException\n+  {\n+    StoreId storeId = new StoreId();\n+    storeId.readExternal(in);\n+    return storeId;\n+  }\n+\n+  public long getCreationTime()\n+  {\n+    return creationTime;\n+  }\n+\n+  public long getRandomId()\n+  {\n+    return randomId;\n+  }\n+\n+  public long getUpgradeTime()\n+  {\n+    return upgradeTime;\n+  }\n+\n+  public long getUpgradeId()\n+  {\n+    return upgradeId;\n+  }\n+\n+  public long getStoreVersion()\n+  {\n+    return storeVersion;\n+  }\n+\n+  @Override\n+  public void writeExternal(ObjectOutput out) throws IOException\n+  {\n+    out.writeLong(creationTime);\n+    out.writeLong(randomId);\n+    out.writeLong(storeVersion);\n+    out.writeLong(upgradeTime);\n+    out.writeLong(upgradeId);\n+  }\n+\n+  @Override\n+  public void readExternal(ObjectInput in) throws IOException\n+  {\n+    creationTime = in.readLong();\n+    randomId = in.readLong();\n+    storeVersion = in.readLong();\n+    upgradeTime = in.readLong();\n+    upgradeId = in.readLong();\n+  }\n+\n+  public boolean equalsByUpgradeId(StoreId other)\n+  {\n+    return internalEqual(upgradeTime, other.upgradeTime) && internalEqual(upgradeId, other.upgradeId);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+    {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+    StoreId other = (StoreId) o;\n+    return internalEqual(creationTime, other.creationTime) && internalEqual(randomId, other.randomId);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return 31 * (int) (creationTime ^ (creationTime >>> 32)) + (int) (randomId ^ (randomId >>> 32));\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"StoreId{\" +\n+        \"creationTime=\" + creationTime +\n+        \", randomId=\" + randomId +\n+        \", storeVersion=\" + storeVersion +\n+        \", upgradeTime=\" + upgradeTime +\n+        \", upgradeId=\" + upgradeId +\n+        '}';\n+  }\n+\n+  private static boolean internalEqual(long first, long second)\n+  {\n+    return first == second || first == -1 || second == -1;\n+  }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "144",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2312/StoreId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2312/StoreId.java\nindex f3306098b1c..7ac2da317b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2312/StoreId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2312/StoreId.java\n@@ -28,7 +28,6 @@ import java.util.Random;\n \n public final class StoreId implements Externalizable\n {\n-\n     public static final StoreId DEFAULT = new StoreId( -1, -1, -1, -1, -1 );\n \n     private static final Random r = new SecureRandom();\n@@ -129,34 +128,30 @@ public final class StoreId implements Externalizable\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        StoreId other = (StoreId) o;\n+\n+StoreId other = (StoreId) o;\n         return internalEqual( creationTime, other.creationTime ) && internalEqual( randomId, other.randomId );\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return 31 * (int) (creationTime ^ (creationTime >>> 32)) + (int) (randomId ^ (randomId >>> 32));\n+        return 31 * ( int) ( creationTime ^ ( creationTime >>> 32 )) + ( int) ( randomId ^ ( randomId >>> 32 ));\n     }\n \n     @Override\n     public String toString()\n     {\n-        return \"StoreId{\" +\n-                \"creationTime=\" + creationTime +\n-                \", randomId=\" + randomId +\n-                \", storeVersion=\" + storeVersion +\n-                \", upgradeTime=\" + upgradeTime +\n-                \", upgradeId=\" + upgradeId +\n-                '}';\n+        return \"StoreId{\" + \"creationTime=\" + creationTime + \", randomId=\" + randomId + \", storeVersion=\" + storeVersion + \", upgradeTime=\" + upgradeTime + \", upgradeId=\" + upgradeId + '}';\n     }\n \n     private static boolean internalEqual( long first, long second )\n     {\n         return first == second || first == -1 || second == -1;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}