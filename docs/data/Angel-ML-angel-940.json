{
    "project_name": "Angel-ML-angel",
    "error_id": "940",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/940/ParameterServerServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/940/ParameterServerServiceTest.java\nindex d34adf68a28..daa018f2878 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/940/ParameterServerServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/940/ParameterServerServiceTest.java\n@@ -146,9 +146,9 @@ public class ParameterServerServiceTest {\n       ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n       ParameterServerService parameterServerService = ps.getPsService();\n       MasterPSServiceProtos.GetThreadStackRequest request =\n-        MasterPSServiceProtos.GetThreadStackRequest.newBuilder().build();\n+          MasterPSServiceProtos.GetThreadStackRequest.newBuilder().build();\n       MasterPSServiceProtos.GetThreadStackResponse getThreadStackResponse =\n-        parameterServerService.psThreadStack(null, request);\n+          parameterServerService.psThreadStack(null, request);\n       assertNotNull(getThreadStackResponse.getStack());\n     } catch (Exception x) {\n       LOG.error(\"run testPsThreadStack failed \", x);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/940/ParameterServerServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/940/ParameterServerServiceTest.java\nindex d34adf68a28..6fcb9b9ecd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/940/ParameterServerServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/940/ParameterServerServiceTest.java\n@@ -145,10 +145,8 @@ public class ParameterServerServiceTest {\n       LOG.info(psAttempt0Id.toString());\n       ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n       ParameterServerService parameterServerService = ps.getPsService();\n-      MasterPSServiceProtos.GetThreadStackRequest request =\n-        MasterPSServiceProtos.GetThreadStackRequest.newBuilder().build();\n-      MasterPSServiceProtos.GetThreadStackResponse getThreadStackResponse =\n-        parameterServerService.psThreadStack(null, request);\n+      MasterPSServiceProtos.GetThreadStackRequest request = MasterPSServiceProtos.GetThreadStackRequest.newBuilder().build();\n+      MasterPSServiceProtos.GetThreadStackResponse getThreadStackResponse = parameterServerService.psThreadStack(null, request);\n       assertNotNull(getThreadStackResponse.getStack());\n     } catch (Exception x) {\n       LOG.error(\"run testPsThreadStack failed \", x);\n@@ -166,4 +164,4 @@ public class ParameterServerServiceTest {\n       throw x;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/940/ParameterServerServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/940/ParameterServerServiceTest.java\nindex d34adf68a28..ef0ad5f7017 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/940/ParameterServerServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/940/ParameterServerServiceTest.java\n@@ -45,11 +45,10 @@ import org.apache.log4j.PropertyConfigurator;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n import static org.junit.Assert.assertNotNull;\n \n-\n public class ParameterServerServiceTest {\n+\n   private static final Log LOG = LogFactory.getLog(MasterServiceTest.class);\n   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n   private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n@@ -87,7 +86,6 @@ public class ParameterServerServiceTest {\n       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n       conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n       conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n       conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 2);\n@@ -108,7 +106,6 @@ public class ParameterServerServiceTest {\n       mMatrix.set(MatrixConf.MATRIX_AVERAGE, \"false\");\n       mMatrix.set(MatrixConf.MATRIX_OPLOG_TYPE, \"DENSE_INT\");\n       angelClient.addMatrix(mMatrix);\n-\n       mMatrix = new MatrixContext();\n       mMatrix.setName(\"w2\");\n       mMatrix.setRowNum(1);\n@@ -121,7 +118,6 @@ public class ParameterServerServiceTest {\n       mMatrix.set(MatrixConf.MATRIX_AVERAGE, \"false\");\n       mMatrix.set(MatrixConf.MATRIX_OPLOG_TYPE, \"DENSE_DOUBLE\");\n       angelClient.addMatrix(mMatrix);\n-\n       angelClient.startPSServer();\n       angelClient.run();\n       Thread.sleep(5000);\n@@ -145,10 +141,8 @@ public class ParameterServerServiceTest {\n       LOG.info(psAttempt0Id.toString());\n       ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n       ParameterServerService parameterServerService = ps.getPsService();\n-      MasterPSServiceProtos.GetThreadStackRequest request =\n-        MasterPSServiceProtos.GetThreadStackRequest.newBuilder().build();\n-      MasterPSServiceProtos.GetThreadStackResponse getThreadStackResponse =\n-        parameterServerService.psThreadStack(null, request);\n+      MasterPSServiceProtos.GetThreadStackRequest request = MasterPSServiceProtos.GetThreadStackRequest.newBuilder().build();\n+      MasterPSServiceProtos.GetThreadStackResponse getThreadStackResponse = parameterServerService.psThreadStack(null, request);\n       assertNotNull(getThreadStackResponse.getStack());\n     } catch (Exception x) {\n       LOG.error(\"run testPsThreadStack failed \", x);\n@@ -166,4 +160,5 @@ public class ParameterServerServiceTest {\n       throw x;\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}