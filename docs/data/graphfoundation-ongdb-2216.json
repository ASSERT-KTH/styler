{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2216",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2216/DynamicRelationshipType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2216/DynamicRelationshipType.java\nindex ba9c81f279f..e96050a1180 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2216/DynamicRelationshipType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2216/DynamicRelationshipType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n /**\n@@ -50,99 +51,100 @@ package org.neo4j.graphdb;\n  * }\n  * </code>\n  * </pre>\n+ *\n  * @deprecated use {@link RelationshipType#withName(String)} instead\n  */\n @Deprecated\n public final class DynamicRelationshipType implements RelationshipType\n {\n-    private final String name;\n+  private final String name;\n \n-    private DynamicRelationshipType( final String name )\n+  private DynamicRelationshipType(final String name)\n+  {\n+    if (name == null)\n     {\n-        if ( name == null )\n-        {\n-            throw new IllegalArgumentException( \"A relationship type cannot \"\n-                                                + \"have a null name\" );\n-        }\n-        this.name = name;\n+      throw new IllegalArgumentException(\"A relationship type cannot \"\n+          + \"have a null name\");\n     }\n+    this.name = name;\n+  }\n \n-    /**\n-     * Instantiates a new DynamicRelationshipType with the given name.\n-     * There's more information regarding relationship types over at\n-     * {@link RelationshipType}.\n-     *\n-     * @param name the name of the dynamic relationship type\n-     * @return a DynamicRelationshipType with the given name\n-     * @throws IllegalArgumentException if name is <code>null</code>\n-     * @deprecated use {@link RelationshipType#withName(String)} instead\n-     */\n-    @Deprecated\n-    public static DynamicRelationshipType withName( final String name )\n-    {\n-        return new DynamicRelationshipType( name );\n-    }\n+  /**\n+   * Instantiates a new DynamicRelationshipType with the given name.\n+   * There's more information regarding relationship types over at\n+   * {@link RelationshipType}.\n+   *\n+   * @param name the name of the dynamic relationship type\n+   * @return a DynamicRelationshipType with the given name\n+   * @throws IllegalArgumentException if name is <code>null</code>\n+   * @deprecated use {@link RelationshipType#withName(String)} instead\n+   */\n+  @Deprecated\n+  public static DynamicRelationshipType withName(final String name)\n+  {\n+    return new DynamicRelationshipType(name);\n+  }\n \n-    /**\n-     * Returns the name of this relationship type. The name uniquely identifies\n-     * a relationship type, i.e. two different RelationshipType instances with\n-     * different object identifiers (and possibly even different classes) are\n-     * semantically equivalent if they have {@link String#equals(Object) equal}\n-     * names.\n-     *\n-     * @return the name of the relationship type\n-     */\n-    @Override\n-    public String name()\n-    {\n-        return this.name;\n-    }\n+  /**\n+   * Returns the name of this relationship type. The name uniquely identifies\n+   * a relationship type, i.e. two different RelationshipType instances with\n+   * different object identifiers (and possibly even different classes) are\n+   * semantically equivalent if they have {@link String#equals(Object) equal}\n+   * names.\n+   *\n+   * @return the name of the relationship type\n+   */\n+  @Override\n+  public String name()\n+  {\n+    return this.name;\n+  }\n \n-    /**\n-     * Returns a string representation of this dynamic relationship type.\n-     *\n-     * @return a string representation of this dynamic relationship type\n-     * @see java.lang.Object#toString()\n-     */\n-    @Override\n-    public String toString()\n-    {\n-        return this.name;\n-    }\n+  /**\n+   * Returns a string representation of this dynamic relationship type.\n+   *\n+   * @return a string representation of this dynamic relationship type\n+   * @see java.lang.Object#toString()\n+   */\n+  @Override\n+  public String toString()\n+  {\n+    return this.name;\n+  }\n \n-    /**\n-     * Implements the identity-based equals defined by {@link Object\n-     * java.lang.Object}. This means that this dynamic relationship type\n-     * instance will NOT be equal to other relationship types with the same\n-     * name. As outlined in the documentation for {@link RelationshipType\n-     * RelationshipType}, the proper way to check for equivalence between two\n-     * relationship types is to compare their {@link RelationshipType#name()\n-     * names}.\n-     *\n-     * @return <code>true</code> if <code>other</code> is the same instance as\n-     *         this dynamic relationship type, <code>false</code> otherwise\n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n-    @Override\n-    public boolean equals( final Object other )\n-    {\n-        return super.equals( other );\n-    }\n+  /**\n+   * Implements the identity-based equals defined by {@link Object\n+   * java.lang.Object}. This means that this dynamic relationship type\n+   * instance will NOT be equal to other relationship types with the same\n+   * name. As outlined in the documentation for {@link RelationshipType\n+   * RelationshipType}, the proper way to check for equivalence between two\n+   * relationship types is to compare their {@link RelationshipType#name()\n+   * names}.\n+   *\n+   * @return <code>true</code> if <code>other</code> is the same instance as\n+   * this dynamic relationship type, <code>false</code> otherwise\n+   * @see java.lang.Object#equals(java.lang.Object)\n+   */\n+  @Override\n+  public boolean equals(final Object other)\n+  {\n+    return super.equals(other);\n+  }\n \n-    /**\n-     * Implements the default hash function as defined by {@link Object\n-     * java.lang.Object}. This means that if you put a dynamic relationship\n-     * instance into a hash-based collection, it most likely will NOT behave as\n-     * you expect. Please see the documentation of {@link #equals(Object)\n-     * equals} and the {@link DynamicRelationshipType class documentation} for\n-     * more details.\n-     *\n-     * @return a hash code value for this dynamic relationship type instance\n-     * @see java.lang.Object#hashCode()\n-     */\n-    @Override\n-    public int hashCode()\n-    {\n-        return super.hashCode();\n-    }\n+  /**\n+   * Implements the default hash function as defined by {@link Object\n+   * java.lang.Object}. This means that if you put a dynamic relationship\n+   * instance into a hash-based collection, it most likely will NOT behave as\n+   * you expect. Please see the documentation of {@link #equals(Object)\n+   * equals} and the {@link DynamicRelationshipType class documentation} for\n+   * more details.\n+   *\n+   * @return a hash code value for this dynamic relationship type instance\n+   * @see java.lang.Object#hashCode()\n+   */\n+  @Override\n+  public int hashCode()\n+  {\n+    return super.hashCode();\n+  }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2216/DynamicRelationshipType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2216/DynamicRelationshipType.java\nindex ba9c81f279f..63120546fb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2216/DynamicRelationshipType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2216/DynamicRelationshipType.java\n@@ -61,9 +61,8 @@ public final class DynamicRelationshipType implements RelationshipType\n     {\n         if ( name == null )\n         {\n-            throw new IllegalArgumentException( \"A relationship type cannot \"\n-                                                + \"have a null name\" );\n-        }\n+            throw new IllegalArgumentException( \"A relationship type cannot \" + \"have a null name\" );\n+    }\n         this.name = name;\n     }\n \n@@ -145,4 +144,4 @@ public final class DynamicRelationshipType implements RelationshipType\n     {\n         return super.hashCode();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Annotation 'Deprecated' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2216/DynamicRelationshipType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2216/DynamicRelationshipType.java\nindex ba9c81f279f..8c8dd4ef348 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2216/DynamicRelationshipType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2216/DynamicRelationshipType.java\n@@ -52,8 +52,8 @@ package org.neo4j.graphdb;\n  * </pre>\n  * @deprecated use {@link RelationshipType#withName(String)} instead\n  */\n-@Deprecated\n-public final class DynamicRelationshipType implements RelationshipType\n+\n+@Deprecated public final class DynamicRelationshipType implements RelationshipType\n {\n     private final String name;\n \n@@ -61,9 +61,9 @@ public final class DynamicRelationshipType implements RelationshipType\n     {\n         if ( name == null )\n         {\n-            throw new IllegalArgumentException( \"A relationship type cannot \"\n-                                                + \"have a null name\" );\n+            throw new IllegalArgumentException( \"A relationship type cannot \" + \"have a null name\" );\n         }\n+\n         this.name = name;\n     }\n \n@@ -77,6 +77,7 @@ public final class DynamicRelationshipType implements RelationshipType\n      * @throws IllegalArgumentException if name is <code>null</code>\n      * @deprecated use {@link RelationshipType#withName(String)} instead\n      */\n+\n     @Deprecated\n     public static DynamicRelationshipType withName( final String name )\n     {\n@@ -92,6 +93,7 @@ public final class DynamicRelationshipType implements RelationshipType\n      *\n      * @return the name of the relationship type\n      */\n+\n     @Override\n     public String name()\n     {\n@@ -104,6 +106,7 @@ public final class DynamicRelationshipType implements RelationshipType\n      * @return a string representation of this dynamic relationship type\n      * @see java.lang.Object#toString()\n      */\n+\n     @Override\n     public String toString()\n     {\n@@ -123,6 +126,7 @@ public final class DynamicRelationshipType implements RelationshipType\n      *         this dynamic relationship type, <code>false</code> otherwise\n      * @see java.lang.Object#equals(java.lang.Object)\n      */\n+\n     @Override\n     public boolean equals( final Object other )\n     {\n@@ -140,9 +144,10 @@ public final class DynamicRelationshipType implements RelationshipType\n      * @return a hash code value for this dynamic relationship type instance\n      * @see java.lang.Object#hashCode()\n      */\n+\n     @Override\n     public int hashCode()\n     {\n         return super.hashCode();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}