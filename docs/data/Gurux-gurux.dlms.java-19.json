{
    "project_name": "Gurux-gurux.dlms.java",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "92",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 82).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\tSecurity tmp = getMappings().get(value);\n\t\tif (tmp == null) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid security integer value.\");\n\t\t}\n\t\treturn tmp;\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler/19/Security.java\nindex e60fe6b8653..ba8ba5a50a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler/19/Security.java\n@@ -89,9 +89,9 @@ public enum Security {\n \tpublic static Security forValue(final int value) {\n \t\tSecurity tmp = getMappings().get(value);\n \t\tif (tmp == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid security integer value.\");\n-\t\t}\n-\t\treturn tmp;\n+      throw new IllegalArgumentException(\"Invalid security integer value.\");\n+}\n+  return tmp;\n \t}\n \n \t@Override\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/19/Security.java\nindex e60fe6b8653..eae8baea9c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/19/Security.java\n@@ -38,103 +38,104 @@ package gurux.dlms.enums;\n  * Used security model.\n  */\n public enum Security {\n-\t/**\n-\t * Transport security is not used.\n-\t */\n-\tNONE(0),\n+    /**\n+     * Transport security is not used.\n+     */\n+    NONE(0),\n \n-\t/**\n-\t * Authentication security is used.\n-\t */\n-\tAUTHENTICATION(0x10),\n+    /**\n+     * Authentication security is used.\n+     */\n+    AUTHENTICATION(0x10),\n \n-\t/**\n-\t * Encryption security is used.\n-\t */\n-\tENCRYPTION(0x20),\n+    /**\n+     * Encryption security is used.\n+     */\n+    ENCRYPTION(0x20),\n \n-\t/**\n-\t * Authentication and Encryption security are used.\n-\t */\n-\tAUTHENTICATION_ENCRYPTION(0x30),\n+    /**\n+     * Authentication and Encryption security are used.\n+     */\n+    AUTHENTICATION_ENCRYPTION(0x30),\n \n-\t/**\n-\t * Messages are digitally signed.\n-\t */\n-\tDIGITALLY_SIGNED(0x40);\n+    /**\n+     * Messages are digitally signed.\n+     */\n+    DIGITALLY_SIGNED(0x40);\n \n-\tprivate int intValue;\n-\tprivate static java.util.HashMap<Integer, Security> mappings;\n+    private int intValue;\n+    private static java.util.HashMap<Integer, Security> mappings;\n \n-\tprivate static java.util.HashMap<Integer, Security> getMappings() {\n-\t\tif (mappings == null) {\n-\t\t\tsynchronized (Security.class) {\n-\t\t\t\tif (mappings == null) {\n-\t\t\t\t\tmappings = new java.util.HashMap<Integer, Security>();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn mappings;\n-\t}\n+    private static java.util.HashMap<Integer, Security> getMappings() {\n+        if (mappings == null) {\n+            synchronized (Security.class) {\n+                if (mappings == null) {\n+                    mappings = new java.util.HashMap<Integer, Security>();\n+                }\n+            }\n+        }\n+        return mappings;\n+    }\n \n-\tSecurity(final int value) {\n-\t\tintValue = value;\n-\t\tgetMappings().put(value, this);\n-\t}\n+    Security(final int value) {\n+        intValue = value;\n+        getMappings().put(value, this);\n+    }\n \n-\tpublic int getValue() {\n-\t\treturn intValue;\n-\t}\n+    public int getValue() {\n+        return intValue;\n+    }\n \n-\tpublic static Security forValue(final int value) {\n-\t\tSecurity tmp = getMappings().get(value);\n-\t\tif (tmp == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid security integer value.\");\n-\t\t}\n-\t\treturn tmp;\n-\t}\n+    public static Security forValue(final int value) {\n+        Security tmp = getMappings().get(value);\n+        if (tmp == null) {\n+            throw new IllegalArgumentException(\n+                    \"Invalid security integer value.\");\n+        }\n+        return tmp;\n+    }\n \n-\t@Override\n-\tpublic String toString() {\n-\t\tString str;\n-\t\tSecurity value = Security.forValue(getValue());\n-\t\tswitch (value) {\n-\t\tcase NONE:\n-\t\t\tstr = \"NONE\";\n-\t\t\tbreak;\n-\t\tcase AUTHENTICATION:\n-\t\t\tstr = \"AUTHENTICATION\";\n-\t\t\tbreak;\n-\t\tcase ENCRYPTION:\n-\t\t\tstr = \"ENCRYPTION\";\n-\t\t\tbreak;\n-\t\tcase AUTHENTICATION_ENCRYPTION:\n-\t\t\tstr = \"AUTHENTICATION_ENCRYPTION\";\n-\t\t\tbreak;\n-\t\tcase DIGITALLY_SIGNED:\n-\t\t\tstr = \"DIGITALLY_SIGNED\";\n-\t\t\tbreak;\n-\t\tdefault:\n-\t\t\tthrow new IllegalArgumentException(\"Security\");\n-\t\t}\n-\t\treturn str;\n-\t}\n+    @Override\n+    public String toString() {\n+        String str;\n+        Security value = Security.forValue(getValue());\n+        switch (value) {\n+            case NONE:\n+                str = \"NONE\";\n+                break;\n+            case AUTHENTICATION:\n+                str = \"AUTHENTICATION\";\n+                break;\n+            case ENCRYPTION:\n+                str = \"ENCRYPTION\";\n+                break;\n+            case AUTHENTICATION_ENCRYPTION:\n+                str = \"AUTHENTICATION_ENCRYPTION\";\n+                break;\n+            case DIGITALLY_SIGNED:\n+                str = \"DIGITALLY_SIGNED\";\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Security\");\n+        }\n+        return str;\n+    }\n \n-\tpublic static Security valueOfString(final String value) {\n-\t\tSecurity v;\n-\t\tif (\"NONE\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.NONE;\n-\t\t} else if (\"AUTHENTICATION\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.AUTHENTICATION;\n-\t\t} else if (\"ENCRYPTION\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.ENCRYPTION;\n-\t\t} else if (\"AUTHENTICATION_ENCRYPTION\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.AUTHENTICATION_ENCRYPTION;\n-\t\t} else if (\"DIGITALLY_SIGNED\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.DIGITALLY_SIGNED;\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(value);\n-\t\t}\n-\t\treturn v;\n-\t}\n+    public static Security valueOfString(final String value) {\n+        Security v;\n+        if (\"NONE\".equalsIgnoreCase(value)) {\n+            v = Security.NONE;\n+        } else if (\"AUTHENTICATION\".equalsIgnoreCase(value)) {\n+            v = Security.AUTHENTICATION;\n+        } else if (\"ENCRYPTION\".equalsIgnoreCase(value)) {\n+            v = Security.ENCRYPTION;\n+        } else if (\"AUTHENTICATION_ENCRYPTION\".equalsIgnoreCase(value)) {\n+            v = Security.AUTHENTICATION_ENCRYPTION;\n+        } else if (\"DIGITALLY_SIGNED\".equalsIgnoreCase(value)) {\n+            v = Security.DIGITALLY_SIGNED;\n+        } else {\n+            throw new IllegalArgumentException(value);\n+        }\n+        return v;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/19/Security.java\nindex e60fe6b8653..70d5fd5d674 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/19/Security.java\n@@ -37,104 +37,118 @@ package gurux.dlms.enums;\n /**\n  * Used security model.\n  */\n+\n public enum Security {\n-\t/**\n-\t * Transport security is not used.\n-\t */\n-\tNONE(0),\n-\n-\t/**\n-\t * Authentication security is used.\n-\t */\n-\tAUTHENTICATION(0x10),\n-\n-\t/**\n-\t * Encryption security is used.\n-\t */\n-\tENCRYPTION(0x20),\n-\n-\t/**\n-\t * Authentication and Encryption security are used.\n-\t */\n-\tAUTHENTICATION_ENCRYPTION(0x30),\n-\n-\t/**\n-\t * Messages are digitally signed.\n-\t */\n-\tDIGITALLY_SIGNED(0x40);\n-\n-\tprivate int intValue;\n-\tprivate static java.util.HashMap<Integer, Security> mappings;\n-\n-\tprivate static java.util.HashMap<Integer, Security> getMappings() {\n-\t\tif (mappings == null) {\n-\t\t\tsynchronized (Security.class) {\n-\t\t\t\tif (mappings == null) {\n-\t\t\t\t\tmappings = new java.util.HashMap<Integer, Security>();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn mappings;\n-\t}\n-\n-\tSecurity(final int value) {\n-\t\tintValue = value;\n-\t\tgetMappings().put(value, this);\n-\t}\n-\n-\tpublic int getValue() {\n-\t\treturn intValue;\n-\t}\n-\n-\tpublic static Security forValue(final int value) {\n-\t\tSecurity tmp = getMappings().get(value);\n-\t\tif (tmp == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid security integer value.\");\n-\t\t}\n-\t\treturn tmp;\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\tString str;\n-\t\tSecurity value = Security.forValue(getValue());\n-\t\tswitch (value) {\n-\t\tcase NONE:\n-\t\t\tstr = \"NONE\";\n-\t\t\tbreak;\n-\t\tcase AUTHENTICATION:\n-\t\t\tstr = \"AUTHENTICATION\";\n-\t\t\tbreak;\n-\t\tcase ENCRYPTION:\n-\t\t\tstr = \"ENCRYPTION\";\n-\t\t\tbreak;\n-\t\tcase AUTHENTICATION_ENCRYPTION:\n-\t\t\tstr = \"AUTHENTICATION_ENCRYPTION\";\n-\t\t\tbreak;\n-\t\tcase DIGITALLY_SIGNED:\n-\t\t\tstr = \"DIGITALLY_SIGNED\";\n-\t\t\tbreak;\n-\t\tdefault:\n-\t\t\tthrow new IllegalArgumentException(\"Security\");\n-\t\t}\n-\t\treturn str;\n-\t}\n-\n-\tpublic static Security valueOfString(final String value) {\n-\t\tSecurity v;\n-\t\tif (\"NONE\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.NONE;\n-\t\t} else if (\"AUTHENTICATION\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.AUTHENTICATION;\n-\t\t} else if (\"ENCRYPTION\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.ENCRYPTION;\n-\t\t} else if (\"AUTHENTICATION_ENCRYPTION\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.AUTHENTICATION_ENCRYPTION;\n-\t\t} else if (\"DIGITALLY_SIGNED\".equalsIgnoreCase(value)) {\n-\t\t\tv = Security.DIGITALLY_SIGNED;\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(value);\n-\t\t}\n-\t\treturn v;\n-\t}\n+    /**\n+     * Transport security is not used.\n+     */\n+\n+    NONE(0),\n+\n+    /**\n+     * Authentication security is used.\n+     */\n+\n+\n+    AUTHENTICATION(0x10),\n+\n+    /**\n+     * Encryption security is used.\n+     */\n+\n+\n+    ENCRYPTION(0x20),\n+\n+    /**\n+     * Authentication and Encryption security are used.\n+     */\n+\n+\n+    AUTHENTICATION_ENCRYPTION(0x30),\n+\n+    /**\n+     * Messages are digitally signed.\n+     */\n+\n+\n+    DIGITALLY_SIGNED(0x40);\n+\n+    private int intValue;\n+    private static java.util.HashMap<Integer, Security> mappings;\n+    private static java.util.HashMap<Integer, Security> getMappings() {\n+        if (mappings == null) {\n+            synchronized (Security.class) {\n+                if (mappings == null) {\n+                    mappings = new java.util.HashMap<Integer, Security>();\n+                }\n+            }\n+        }\n+        return mappings;\n+    }\n+\n+    Security(final int value) {\n+        intValue = value;\n+        getMappings().put(value, this);\n+    }\n+\n+    public int getValue() {\n+        return intValue;\n+    }\n+\n+\n+    public static Security forValue(final int value) {\n+        Security tmp = getMappings().get(value);\n+        if (tmp == null) {\n+            throw new IllegalArgumentException(\n+                \"Invalid security integer value.\");\n+        }\n+        return tmp;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        String str;\n+        Security value = Security.forValue(getValue());\n+        switch (value) {\n+        case NONE:\n+            str = \"NONE\";\n+            break;\n+        case AUTHENTICATION:\n+            str = \"AUTHENTICATION\";\n+            break;\n+        case ENCRYPTION:\n+            str = \"ENCRYPTION\";\n+            break;\n+        case AUTHENTICATION_ENCRYPTION:\n+            str = \"AUTHENTICATION_ENCRYPTION\";\n+            break;\n+        case DIGITALLY_SIGNED:\n+            str = \"DIGITALLY_SIGNED\";\n+            break;\n+        default:\n+            throw new IllegalArgumentException(\n+                \"Security\");\n+        }\n+        return str;\n+    }\n+\n+\n+    public static Security valueOfString(final String value) {\n+        Security v;\n+        if (\"NONE\".equalsIgnoreCase(value)) {\n+            v = Security.NONE;\n+        } else if (\"AUTHENTICATION\".equalsIgnoreCase(value)) {\n+            v = Security.AUTHENTICATION;\n+        } else if (\"ENCRYPTION\".equalsIgnoreCase(value)) {\n+                   v = Security.ENCRYPTION;\n+               } else if (\"AUTHENTICATION_ENCRYPTION\".equalsIgnoreCase(value)) {\n+                   v = Security.AUTHENTICATION_ENCRYPTION;\n+               } else if (\"DIGITALLY_SIGNED\".equalsIgnoreCase(value)) {\n+                          v = Security.DIGITALLY_SIGNED;\n+                      } else {\n+                   throw new IllegalArgumentException(value);\n+        }\n+        return v;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_random/19/Security.java\nindex e60fe6b8653..ba8ba5a50a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_random/19/Security.java\n@@ -89,9 +89,9 @@ public enum Security {\n \tpublic static Security forValue(final int value) {\n \t\tSecurity tmp = getMappings().get(value);\n \t\tif (tmp == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid security integer value.\");\n-\t\t}\n-\t\treturn tmp;\n+      throw new IllegalArgumentException(\"Invalid security integer value.\");\n+}\n+  return tmp;\n \t}\n \n \t@Override\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_three_grams/19/Security.java\nindex e60fe6b8653..ba8ba5a50a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/19/Security.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_three_grams/19/Security.java\n@@ -89,9 +89,9 @@ public enum Security {\n \tpublic static Security forValue(final int value) {\n \t\tSecurity tmp = getMappings().get(value);\n \t\tif (tmp == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid security integer value.\");\n-\t\t}\n-\t\treturn tmp;\n+      throw new IllegalArgumentException(\"Invalid security integer value.\");\n+}\n+  return tmp;\n \t}\n \n \t@Override\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}