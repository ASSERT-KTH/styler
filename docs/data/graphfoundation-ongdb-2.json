{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2/RawIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2/RawIterator.java\nindex 4e225697284..60957d0e5cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2/RawIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2/RawIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection;\n \n import java.util.Iterator;\n@@ -29,73 +30,73 @@ import org.neo4j.helpers.collection.Iterators;\n  * Just like {@link Iterator}, but with the addition that {@link #hasNext()} and {@link #next()} can\n  * be declared to throw a checked exception.\n  *\n- * @param <T> type of items in this iterator.\n+ * @param <T>         type of items in this iterator.\n  * @param <EXCEPTION> type of exception thrown from {@link #hasNext()} and {@link #next()}.\n  */\n-public interface RawIterator<T,EXCEPTION extends Exception>\n+public interface RawIterator<T, EXCEPTION extends Exception>\n {\n-    boolean hasNext() throws EXCEPTION;\n+  boolean hasNext() throws EXCEPTION;\n \n-    T next() throws EXCEPTION;\n+  T next() throws EXCEPTION;\n \n-    default void remove()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  default void remove()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    RawIterator<Object,Exception> EMPTY_ITERATOR = RawIterator.of();\n+  RawIterator<Object, Exception> EMPTY_ITERATOR = RawIterator.of();\n \n-    @SuppressWarnings( \"unchecked\" )\n-    static <T, EXCEPTION extends Exception> RawIterator<T,EXCEPTION> empty()\n-    {\n-        return (RawIterator<T,EXCEPTION>) EMPTY_ITERATOR;\n-    }\n+  @SuppressWarnings(\"unchecked\")\n+  static <T, EXCEPTION extends Exception> RawIterator<T, EXCEPTION> empty()\n+  {\n+    return (RawIterator<T, EXCEPTION>) EMPTY_ITERATOR;\n+  }\n \n-    static <T, EX extends Exception> RawIterator<T, EX> of( T ... values )\n+  static <T, EX extends Exception> RawIterator<T, EX> of(T... values)\n+  {\n+    return new RawIterator<T, EX>()\n     {\n-        return new RawIterator<T,EX>()\n-        {\n-            private int position;\n+      private int position;\n \n-            @Override\n-            public boolean hasNext() throws EX\n-            {\n-                return position < values.length;\n-            }\n+      @Override\n+      public boolean hasNext() throws EX\n+      {\n+        return position < values.length;\n+      }\n \n-            @Override\n-            public T next() throws EX\n-            {\n-                if ( hasNext() )\n-                {\n-                    return values[position++];\n-                }\n-                throw new NoSuchElementException();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Create a raw iterator from the provided {@link ThrowingSupplier} - the iterator will end\n-     * when the supplier returns null.\n-     */\n-    static <T, EX extends Exception> RawIterator<T, EX> from( ThrowingSupplier<T, EX> supplier )\n-    {\n-        return new PrefetchingRawIterator<T,EX>()\n+      @Override\n+      public T next() throws EX\n+      {\n+        if (hasNext())\n         {\n-            @Override\n-            protected T fetchNextOrNull() throws EX\n-            {\n-                return supplier.get();\n-            }\n-        };\n-    }\n+          return values[position++];\n+        }\n+        throw new NoSuchElementException();\n+      }\n+    };\n+  }\n \n-    /**\n-     * Create a raw iterator from a regular iterator, assuming no exceptions are being thrown\n-     */\n-    static <T, EX extends Exception> RawIterator<T, EX> wrap( final Iterator<T> iterator )\n+  /**\n+   * Create a raw iterator from the provided {@link ThrowingSupplier} - the iterator will end\n+   * when the supplier returns null.\n+   */\n+  static <T, EX extends Exception> RawIterator<T, EX> from(ThrowingSupplier<T, EX> supplier)\n+  {\n+    return new PrefetchingRawIterator<T, EX>()\n     {\n-        return Iterators.asRawIterator( iterator );\n-    }\n+      @Override\n+      protected T fetchNextOrNull() throws EX\n+      {\n+        return supplier.get();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Create a raw iterator from a regular iterator, assuming no exceptions are being thrown\n+   */\n+  static <T, EX extends Exception> RawIterator<T, EX> wrap(final Iterator<T> iterator)\n+  {\n+    return Iterators.asRawIterator(iterator);\n+  }\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2/RawIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2/RawIterator.java\nindex 4e225697284..9deba744c2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2/RawIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2/RawIterator.java\n@@ -32,12 +32,11 @@ import org.neo4j.helpers.collection.Iterators;\n  * @param <T> type of items in this iterator.\n  * @param <EXCEPTION> type of exception thrown from {@link #hasNext()} and {@link #next()}.\n  */\n-public interface RawIterator<T,EXCEPTION extends Exception>\n+public interface RawIterator<T, EXCEPTION extends Exception>\n {\n     boolean hasNext() throws EXCEPTION;\n \n     T next() throws EXCEPTION;\n-\n     default void remove()\n     {\n         throw new UnsupportedOperationException();\n@@ -51,7 +50,7 @@ public interface RawIterator<T,EXCEPTION extends Exception>\n         return (RawIterator<T,EXCEPTION>) EMPTY_ITERATOR;\n     }\n \n-    static <T, EX extends Exception> RawIterator<T, EX> of( T ... values )\n+    static <T, EX extends Exception> RawIterator<T,EX> of( T ... values )\n     {\n         return new RawIterator<T,EX>()\n         {\n@@ -79,7 +78,7 @@ public interface RawIterator<T,EXCEPTION extends Exception>\n      * Create a raw iterator from the provided {@link ThrowingSupplier} - the iterator will end\n      * when the supplier returns null.\n      */\n-    static <T, EX extends Exception> RawIterator<T, EX> from( ThrowingSupplier<T, EX> supplier )\n+    static <T, EX extends Exception> RawIterator<T,EX> from( ThrowingSupplier<T,EX> supplier )\n     {\n         return new PrefetchingRawIterator<T,EX>()\n         {\n@@ -94,8 +93,8 @@ public interface RawIterator<T,EXCEPTION extends Exception>\n     /**\n      * Create a raw iterator from a regular iterator, assuming no exceptions are being thrown\n      */\n-    static <T, EX extends Exception> RawIterator<T, EX> wrap( final Iterator<T> iterator )\n+    static <T, EX extends Exception> RawIterator<T,EX> wrap( final Iterator<T> iterator )\n     {\n         return Iterators.asRawIterator( iterator );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}