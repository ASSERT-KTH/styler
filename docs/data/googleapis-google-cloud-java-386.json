{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "386",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public void testToBuilder() {\n    compareExternalTableType(EXTERNAL_TABLE_TYPE, EXTERNAL_TABLE_TYPE.toBuilder().build());\n    ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n    assertEquals(\"NONE\", externalTableType.compression());\n    externalTableType = externalTableType.toBuilder()\n        .compression(COMPRESSION)",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/386/ExternalTableTypeTest.java\nindex 57e7ab18cb2..e6ce41d85b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/386/ExternalTableTypeTest.java\n@@ -57,7 +57,8 @@ public class ExternalTableTypeTest {\n   @Test\n   public void testToBuilder() {\n     compareExternalTableType(EXTERNAL_TABLE_TYPE, EXTERNAL_TABLE_TYPE.toBuilder().build());\n-    ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n+    ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\"\n+        ).build();\n     assertEquals(\"NONE\", externalTableType.compression());\n     externalTableType = externalTableType.toBuilder()\n         .compression(COMPRESSION)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/386/ExternalTableTypeTest.java\nindex 57e7ab18cb2..368c166a09c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/386/ExternalTableTypeTest.java\n@@ -57,7 +57,8 @@ public class ExternalTableTypeTest {\n   @Test\n   public void testToBuilder() {\n     compareExternalTableType(EXTERNAL_TABLE_TYPE, EXTERNAL_TABLE_TYPE.toBuilder().build());\n-    ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n+    ExternalTableType externalTableType =\n+        EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n     assertEquals(\"NONE\", externalTableType.compression());\n     externalTableType = externalTableType.toBuilder()\n         .compression(COMPRESSION)\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/386/ExternalTableTypeTest.java\nindex 57e7ab18cb2..e29ad348d86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/386/ExternalTableTypeTest.java\n@@ -32,17 +32,17 @@ public class ExternalTableTypeTest {\n           .mode(Field.Mode.NULLABLE)\n           .description(\"FieldDescription1\")\n           .build();\n-  private static final Field FIELD_SCHEMA2 =\n+    private static final Field FIELD_SCHEMA2 =\n       Field.builder(\"IntegerField\", Field.Type.integer())\n           .mode(Field.Mode.REPEATED)\n           .description(\"FieldDescription2\")\n           .build();\n-  private static final Field FIELD_SCHEMA3 =\n+    private static final Field FIELD_SCHEMA3 =\n       Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n           .mode(Field.Mode.REQUIRED)\n           .description(\"FieldDescription3\")\n           .build();\n-  private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n+    private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final Integer MAX_BAD_RECORDS = 42;\n   private static final Boolean IGNORE_UNKNOWN_VALUES = true;\n   private static final String COMPRESSION = \"GZIP\";\n@@ -54,7 +54,7 @@ public class ExternalTableTypeTest {\n           .maxBadRecords(MAX_BAD_RECORDS)\n           .build();\n \n-  @Test\n+@Test\n   public void testToBuilder() {\n     compareExternalTableType(EXTERNAL_TABLE_TYPE, EXTERNAL_TABLE_TYPE.toBuilder().build());\n     ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n@@ -102,4 +102,4 @@ public class ExternalTableTypeTest {\n     assertEquals(expected.sourceUris(), value.sourceUris());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/386/ExternalTableTypeTest.java\nindex 57e7ab18cb2..f5e7a60995b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/386/ExternalTableTypeTest.java\n@@ -19,56 +19,35 @@ package com.google.gcloud.bigquery;\n import static org.junit.Assert.assertEquals;\n \n import com.google.common.collect.ImmutableList;\n-\n import org.junit.Test;\n-\n import java.util.List;\n \n+\n public class ExternalTableTypeTest {\n \n   private static final List<String> SOURCE_URIS = ImmutableList.of(\"uri1\", \"uri2\");\n-  private static final Field FIELD_SCHEMA1 =\n-      Field.builder(\"StringField\", Field.Type.string())\n-          .mode(Field.Mode.NULLABLE)\n-          .description(\"FieldDescription1\")\n-          .build();\n-  private static final Field FIELD_SCHEMA2 =\n-      Field.builder(\"IntegerField\", Field.Type.integer())\n-          .mode(Field.Mode.REPEATED)\n-          .description(\"FieldDescription2\")\n-          .build();\n-  private static final Field FIELD_SCHEMA3 =\n-      Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n-          .mode(Field.Mode.REQUIRED)\n-          .description(\"FieldDescription3\")\n-          .build();\n+  private static final Field FIELD_SCHEMA1 = Field.builder(\"StringField\", Field.Type.string()).mode(Field.Mode.NULLABLE).description(\"FieldDescription1\").build();\n+  private static final Field FIELD_SCHEMA2 = Field.builder(\"IntegerField\", Field.Type.integer()).mode(Field.Mode.REPEATED).description(\"FieldDescription2\").build();\n+  private static final Field FIELD_SCHEMA3 = Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2)).mode(Field.Mode.REQUIRED).description(\"FieldDescription3\").build();\n   private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final Integer MAX_BAD_RECORDS = 42;\n   private static final Boolean IGNORE_UNKNOWN_VALUES = true;\n   private static final String COMPRESSION = \"GZIP\";\n   private static final CsvOptions CSV_OPTIONS = CsvOptions.builder().build();\n-  private static final ExternalTableType EXTERNAL_TABLE_TYPE =\n-      ExternalTableType.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS)\n-          .compression(COMPRESSION)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .maxBadRecords(MAX_BAD_RECORDS)\n-          .build();\n+  private static final ExternalTableType EXTERNAL_TABLE_TYPE = ExternalTableType.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS).compression(COMPRESSION).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).maxBadRecords(MAX_BAD_RECORDS).build();\n \n   @Test\n   public void testToBuilder() {\n     compareExternalTableType(EXTERNAL_TABLE_TYPE, EXTERNAL_TABLE_TYPE.toBuilder().build());\n     ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n     assertEquals(\"NONE\", externalTableType.compression());\n-    externalTableType = externalTableType.toBuilder()\n-        .compression(COMPRESSION)\n-        .build();\n+    externalTableType = externalTableType.toBuilder().compression(COMPRESSION).build();\n     compareExternalTableType(EXTERNAL_TABLE_TYPE, externalTableType);\n   }\n \n   @Test\n   public void testToBuilderIncomplete() {\n-    ExternalTableType externalTableType =\n-        ExternalTableType.of(SOURCE_URIS, TABLE_SCHEMA, FormatOptions.json());\n+    ExternalTableType externalTableType = ExternalTableType.of(SOURCE_URIS, TABLE_SCHEMA, FormatOptions.json());\n     assertEquals(externalTableType, externalTableType.toBuilder().build());\n   }\n \n@@ -85,10 +64,8 @@ public class ExternalTableTypeTest {\n \n   @Test\n   public void testToAndFromPb() {\n-    compareExternalTableType(EXTERNAL_TABLE_TYPE,\n-        ExternalTableType.fromPb(EXTERNAL_TABLE_TYPE.toPb()));\n-    ExternalTableType externalTableType =\n-        ExternalTableType.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS).build();\n+    compareExternalTableType(EXTERNAL_TABLE_TYPE, ExternalTableType.fromPb(EXTERNAL_TABLE_TYPE.toPb()));\n+    ExternalTableType externalTableType = ExternalTableType.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS).build();\n     compareExternalTableType(externalTableType, ExternalTableType.fromPb(externalTableType.toPb()));\n   }\n \n@@ -102,4 +79,4 @@ public class ExternalTableTypeTest {\n     assertEquals(expected.sourceUris(), value.sourceUris());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/386/ExternalTableTypeTest.java\nindex 57e7ab18cb2..e6ce41d85b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/386/ExternalTableTypeTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/386/ExternalTableTypeTest.java\n@@ -57,7 +57,8 @@ public class ExternalTableTypeTest {\n   @Test\n   public void testToBuilder() {\n     compareExternalTableType(EXTERNAL_TABLE_TYPE, EXTERNAL_TABLE_TYPE.toBuilder().build());\n-    ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\").build();\n+    ExternalTableType externalTableType = EXTERNAL_TABLE_TYPE.toBuilder().compression(\"NONE\"\n+        ).build();\n     assertEquals(\"NONE\", externalTableType.compression());\n     externalTableType = externalTableType.toBuilder()\n         .compression(COMPRESSION)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}