{
    "project_name": "eclipse-milo",
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "253",
                "column": "112",
                "severity": "error",
                "message": "'}' at column 112 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "     * @throws InvalidArgumentException if one or more input argument values are invalid.\n     */\n    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {}\n\n    /**\n     * Extends {@link AccessContext} to provide additional context to implementations of",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "253",
                    "column": "112",
                    "severity": "error",
                    "message": "'}' at column 112 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/31/AbstractMethodInvocationHandler.java\nindex adfb7a7ce0d..411f2660262 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/31/AbstractMethodInvocationHandler.java\n@@ -250,7 +250,8 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      * @param inputArgumentValues the input values provided by the client for the current method call.\n      * @throws InvalidArgumentException if one or more input argument values are invalid.\n      */\n-    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {}\n+    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {\n+    }\n \n     /**\n      * Extends {@link AccessContext} to provide additional context to implementations of\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "255",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/31/AbstractMethodInvocationHandler.java\nindex adfb7a7ce0d..06af59f0cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/31/AbstractMethodInvocationHandler.java\n@@ -250,7 +250,9 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      * @param inputArgumentValues the input values provided by the client for the current method call.\n      * @throws InvalidArgumentException if one or more input argument values are invalid.\n      */\n-    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {}\n+    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {\n+\n+}\n \n     /**\n      * Extends {@link AccessContext} to provide additional context to implementations of\n@@ -281,4 +283,4 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 20, expected level should be 82.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 86.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 20, expected level should be 82.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 24, expected level should be 86.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 28, expected level should be 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'try' has incorrect indentation level 28, expected level should be 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 32, expected level should be 94.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 32, expected level should be 94.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 36, expected level should be 98.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 32, expected level should be 94.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "'try rcurly' has incorrect indentation level 28, expected level should be 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "'catch' child has incorrect indentation level 32, expected level should be 94.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "'catch rcurly' has incorrect indentation level 28, expected level should be 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 24, expected level should be 86.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 24, expected level should be 86.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 20, expected level should be 82.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 40, expected level should be 78.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 58, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 58, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 58, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 58, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 54, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 30, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/31/AbstractMethodInvocationHandler.java\nindex adfb7a7ce0d..ebafef47f2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/31/AbstractMethodInvocationHandler.java\n@@ -12,7 +12,6 @@ package org.eclipse.milo.opcua.sdk.server.api.methods;\n \n import java.util.Arrays;\n import java.util.Optional;\n-\n import org.eclipse.milo.opcua.sdk.core.ValueRanks;\n import org.eclipse.milo.opcua.sdk.server.OpcUaServer;\n import org.eclipse.milo.opcua.sdk.server.Session;\n@@ -41,6 +40,7 @@ import org.slf4j.LoggerFactory;\n  * A partial implementation of {@link MethodInvocationHandler} that handles checking the Executable and UserExecutable\n  * attributes as well as validating the supplied input values against the input {@link Argument}s.\n  */\n+\n public abstract class AbstractMethodInvocationHandler implements MethodInvocationHandler {\n \n     private final UaMethodNode node;\n@@ -48,6 +48,7 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n     /**\n      * @param node the {@link UaMethodNode} this handler will be installed on.\n      */\n+\n     public AbstractMethodInvocationHandler(UaMethodNode node) {\n         this.node = node;\n     }\n@@ -62,8 +63,8 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n             checkExecutableAttributes(accessContext);\n \n             Variant[] inputArgumentValues = request.getInputArguments();\n-            if (inputArgumentValues == null) inputArgumentValues = new Variant[0];\n \n+            if (inputArgumentValues == null) inputArgumentValues = new Variant[0];\n             if (inputArgumentValues.length != getInputArguments().length) {\n                 throw new UaException(StatusCodes.Bad_ArgumentsMissing);\n             }\n@@ -74,39 +75,40 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n                 Argument argument = getInputArguments()[i];\n \n                 Variant variant = inputArgumentValues[i];\n+\n                 Object value = variant.getValue();\n \n                 // TODO this needs to be able to match when argument DataType is an alias type\n                 //  extract subtype logic from AttributeWriter...\n-                boolean dataTypeMatch = value == null ||\n-                    variant.getDataType()\n-                        .flatMap(xni -> xni.toNodeId(node.getNodeContext().getNamespaceTable()))\n-                        .map(type -> {\n-                            if (type.equals(argument.getDataType())) {\n-                                return true;\n-                            } else {\n-                                if (Identifiers.Structure.equals(type) && value instanceof ExtensionObject) {\n-                                    SerializationContext serializationContext =\n-                                        getNode().getNodeContext().getServer().getSerializationContext();\n-\n-                                    try {\n-                                        Object decoded = ((ExtensionObject) value).decode(serializationContext);\n-\n-                                        if (decoded instanceof UaStructure) {\n-                                            return ((UaStructure) decoded).getTypeId()\n-                                                .toNodeId(node.getNodeContext().getNamespaceTable())\n-                                                .map(argument.getDataType()::equals).orElse(false);\n-                                        }\n-                                    } catch (UaSerializationException e) {\n-                                        LoggerFactory.getLogger(getClass())\n-                                            .warn(\"Error decoding argument value\", e);\n-                                    }\n-                                }\n \n-                                return false;\n+                boolean dataTypeMatch = value == null || variant.getDataType().flatMap(xni -> xni.toNodeId(node.getNodeContext().getNamespaceTable()))\n+                                                                              .map(type -> {\n+                    if (type.equals(argument.getDataType())) {\n+                        return true;\n+                    } else {\n+                        if (Identifiers.Structure.equals(type) && value instanceof ExtensionObject) {\n+                            SerializationContext serializationContext = getNode().getNodeContext()\n+                                                                                 .getServer()\n+                                                                                 .getSerializationContext();\n+\n+                            try {\n+                                Object decoded = ((ExtensionObject) value).decode(serializationContext);\n+\n+                                if (decoded instanceof UaStructure) {\n+                                    return ((UaStructure) decoded).getTypeId()\n+                                                                  .toNodeId(node.getNodeContext().getNamespaceTable())\n+                                                                  .map(argument.getDataType()::equals)\n+                                                                  .orElse(false);\n+                                }\n+                            } catch (UaSerializationException e) {\n+                                LoggerFactory.getLogger(getClass()).warn(\"Error decoding argument value\", e);\n                             }\n-                        })\n-                        .orElse(false);\n+                        }\n+\n+                        return false;\n+                    }\n+                                        })\n+                                                                              .orElse(false);\n \n                 switch (argument.getValueRank()) {\n                     case ValueRanks.Scalar:\n@@ -114,6 +116,7 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n                             dataTypeMatch = false;\n                         }\n                         break;\n+\n                     case ValueRanks.OneDimension:\n                     case ValueRanks.OneOrMoreDimensions:\n                         if (value != null && !value.getClass().isArray()) {\n@@ -138,37 +141,31 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n             validateInputArgumentValues(inputArgumentValues);\n \n             InvocationContext invocationContext = new InvocationContext() {\n-                @Override\n-                public OpcUaServer getServer() {\n-                    return node.getNodeContext().getServer();\n-                }\n-\n-                @Override\n-                public NodeId getObjectId() {\n-                    return request.getObjectId();\n-                }\n-\n-                @Override\n-                public UaMethodNode getMethodNode() {\n-                    return node;\n-                }\n-\n-                @Override\n-                public Optional<Session> getSession() {\n-                    return accessContext.getSession();\n-                }\n-            };\n+                                                      @Override\n+                                                      public OpcUaServer getServer() {\n+                                                          return node.getNodeContext().getServer();\n+                                                      }\n+\n+                                                      @Override\n+                                                      public NodeId getObjectId() {\n+                                                          return request.getObjectId();\n+                                                      }\n+\n+                                                      @Override\n+                                                      public UaMethodNode getMethodNode() {\n+                                                          return node;\n+                                                      }\n+\n+                                                      @Override\n+                                                      public Optional<Session> getSession() {\n+                                                          return accessContext.getSession();\n+                                                      }\n+                              };\n \n             Variant[] outputValues = invoke(invocationContext, inputArgumentValues);\n-\n             return new CallMethodResult(StatusCode.GOOD, new StatusCode[0], new DiagnosticInfo[0], outputValues);\n         } catch (InvalidArgumentException e) {\n-            return new CallMethodResult(\n-                e.getStatusCode(),\n-                e.getInputArgumentResults(),\n-                e.getInputArgumentDiagnosticInfos(),\n-                new Variant[0]\n-            );\n+            return new CallMethodResult(e.getStatusCode(), e.getInputArgumentResults(), e.getInputArgumentDiagnosticInfos(), new Variant[0]);\n         } catch (UaException e) {\n             return new CallMethodResult(e.getStatusCode(), new StatusCode[0], new DiagnosticInfo[0], new Variant[0]);\n         }\n@@ -180,29 +177,18 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      * @param accessContext the {@link AccessContext}.\n      * @throws UaException if either Executable or UserExecutable attributes are not {@code true}.\n      */\n+\n+\n     protected void checkExecutableAttributes(AccessContext accessContext) throws UaException {\n-        AttributeContext attributeContext = new AttributeContext(\n-            node.getNodeContext().getServer(),\n-            accessContext.getSession().orElse(null)\n-        );\n-\n-        Boolean executable = AttributeUtil.extract(\n-            node.getAttribute(\n-                attributeContext,\n-                AttributeId.Executable\n-            )\n-        );\n+        AttributeContext attributeContext = new AttributeContext(node.getNodeContext().getServer(), accessContext.getSession().orElse(null));\n+\n+        Boolean executable = AttributeUtil.extract(node.getAttribute(attributeContext, AttributeId.Executable));\n \n         if (executable == null || !executable) {\n             throw new UaException(StatusCode.BAD);\n         }\n \n-        Boolean userExecutable = AttributeUtil.extract(\n-            node.getAttribute(\n-                attributeContext,\n-                AttributeId.UserExecutable\n-            )\n-        );\n+        Boolean userExecutable = AttributeUtil.extract(node.getAttribute(attributeContext, AttributeId.UserExecutable));\n \n         if (userExecutable == null || !userExecutable) {\n             throw new UaException(StatusCodes.Bad_UserAccessDenied);\n@@ -214,6 +200,7 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      *\n      * @return the input {@link Argument}s expected by the Method this handler is installed on.\n      */\n+\n     public abstract Argument[] getInputArguments();\n \n     /**\n@@ -221,6 +208,8 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      *\n      * @return the output {@link Argument}s expected by the Method this handler is installed on.\n      */\n+\n+\n     public abstract Argument[] getOutputArguments();\n \n     /**\n@@ -235,10 +224,8 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      * @return this output values matching this Method's output arguments, if any.\n      * @throws UaException if invocation has failed for some reason.\n      */\n-    protected abstract Variant[] invoke(\n-        InvocationContext invocationContext,\n-        Variant[] inputValues\n-    ) throws UaException;\n+\n+    protected abstract Variant[] invoke(InvocationContext invocationContext, Variant[] inputValues) throws UaException;\n \n     /**\n      * Validate the input values against the expected input arguments.\n@@ -250,12 +237,16 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      * @param inputArgumentValues the input values provided by the client for the current method call.\n      * @throws InvalidArgumentException if one or more input argument values are invalid.\n      */\n-    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {}\n+\n+    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {\n+\n+    }\n \n     /**\n      * Extends {@link AccessContext} to provide additional context to implementations of\n      * {@link AbstractMethodInvocationHandler}.\n      */\n+\n     public interface InvocationContext extends AccessContext {\n \n         /**\n@@ -270,6 +261,7 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n          *\n          * @return the {@link NodeId} of the ObjectNode the method being invoked belongs to.\n          */\n+\n         NodeId getObjectId();\n \n         /**\n@@ -277,8 +269,8 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n          *\n          * @return the {@link UaMethodNode} being invoked.\n          */\n-        UaMethodNode getMethodNode();\n \n+        UaMethodNode getMethodNode();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 120
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "253",
                    "column": "112",
                    "severity": "error",
                    "message": "'}' at column 112 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "259",
                    "severity": "error",
                    "message": "'INTERFACE_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_three_grams/31/AbstractMethodInvocationHandler.java\nindex adfb7a7ce0d..68a44c87a90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/31/AbstractMethodInvocationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_three_grams/31/AbstractMethodInvocationHandler.java\n@@ -250,9 +250,9 @@ public abstract class AbstractMethodInvocationHandler implements MethodInvocatio\n      * @param inputArgumentValues the input values provided by the client for the current method call.\n      * @throws InvalidArgumentException if one or more input argument values are invalid.\n      */\n-    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {}\n+    protected void validateInputArgumentValues(Variant[] inputArgumentValues) throws InvalidArgumentException {\n \n-    /**\n+    } /**\n      * Extends {@link AccessContext} to provide additional context to implementations of\n      * {@link AbstractMethodInvocationHandler}.\n      */\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}