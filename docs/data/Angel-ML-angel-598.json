{
    "project_name": "Angel-ML-angel",
    "error_id": "598",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/598/IntDoubleVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/598/IntDoubleVectorStorage.java\nindex dc4cdf0af8c..5c51143224b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/598/IntDoubleVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/598/IntDoubleVectorStorage.java\n@@ -128,7 +128,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeDouble(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeDouble(buf));\n       }\n     }\n   }\n@@ -143,7 +143,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeFloat(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeFloat(buf));\n       }\n     }\n   }\n@@ -158,7 +158,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeInt(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeInt(buf));\n       }\n     }\n   }\n@@ -173,7 +173,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeLong(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeLong(buf));\n       }\n     }\n   }\n@@ -407,7 +407,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n \n   @Override\n   public IntDoubleVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n+    if (isSparse()) {\n       return new IntDoubleVectorStorage(VFactory\n           .sortedDoubleVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "399",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/598/IntDoubleVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/598/IntDoubleVectorStorage.java\nindex dc4cdf0af8c..d054af006b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/598/IntDoubleVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/598/IntDoubleVectorStorage.java\n@@ -56,13 +56,12 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n     this.vector = vector;\n   }\n \n-\n-  @Override\n+@Override\n   public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (keyType != KeyType.INT) {\n       throw new UnsupportedOperationException(\n           this.getClass().getName() + \" only support int type index now\");\n-    }\n+  }\n \n     if (func != null) {\n       for (int i = 0; i < indexSize; i++) {\n@@ -81,38 +80,29 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       case T_DOUBLE_SPARSE:\n         updateUseIntDoubleSparse(buf, op);\n         break;\n-\n-      case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n         updateUseIntFloatSparse(buf, op);\n         break;\n-\n-      case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n-      case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n-      case T_DOUBLE_DENSE:\n+  case T_DOUBLE_DENSE:\n         updateUseIntDoubleDense(buf, op);\n         break;\n-\n-      case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         updateUseIntFloatDense(buf, op);\n         break;\n-\n-      case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n \n@@ -128,7 +118,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeDouble(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeDouble(buf));\n       }\n     }\n   }\n@@ -143,7 +133,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeFloat(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeFloat(buf));\n       }\n     }\n   }\n@@ -158,7 +148,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeInt(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeInt(buf));\n       }\n     }\n   }\n@@ -173,7 +163,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeLong(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeLong(buf));\n       }\n     }\n   }\n@@ -297,8 +287,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getDoubleValue());\n         }\n-\n-        break;\n+break;\n       }\n \n       case SORTED: {\n@@ -307,8 +296,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n-        break;\n+break;\n       }\n \n       default:\n@@ -408,10 +396,9 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n   @Override\n   public IntDoubleVectorStorage adaptiveClone() {\n     if(isSparse()) {\n-      return new IntDoubleVectorStorage(VFactory\n-          .sortedDoubleVector(vector.getDim(), vector.getStorage().getIndices(),\n+      return new IntDoubleVectorStorage(VFactory.sortedDoubleVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n@@ -432,4 +419,4 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "401",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/598/IntDoubleVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/598/IntDoubleVectorStorage.java\nindex dc4cdf0af8c..7ae1b71a2c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/598/IntDoubleVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/598/IntDoubleVectorStorage.java\n@@ -32,11 +32,13 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A int key double value storage: use a IntDoubleVector as storage\n  */\n+\n public class IntDoubleVectorStorage extends IntDoubleStorage {\n \n   /**\n    * A vector storage: it can use DENSE,SPARSE and SORTED storage type\n    */\n+\n   private IntDoubleVector vector;\n \n   public IntDoubleVectorStorage(IntDoubleVector vector, long indexOffset) {\n@@ -56,12 +58,11 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n     this.vector = vector;\n   }\n \n-\n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (keyType != KeyType.INT) {\n-      throw new UnsupportedOperationException(\n-          this.getClass().getName() + \" only support int type index now\");\n+      throw new UnsupportedOperationException(this.getClass().getName() + \" only support int type index now\");\n     }\n \n     if (func != null) {\n@@ -76,46 +77,37 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_DOUBLE_SPARSE:\n         updateUseIntDoubleSparse(buf, op);\n         break;\n-\n       case T_FLOAT_SPARSE:\n         updateUseIntFloatSparse(buf, op);\n         break;\n-\n       case T_LONG_SPARSE:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n       case T_INT_SPARSE:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n       case T_DOUBLE_DENSE:\n         updateUseIntDoubleDense(buf, op);\n         break;\n-\n       case T_FLOAT_DENSE:\n         updateUseIntFloatDense(buf, op);\n         break;\n-\n       case T_LONG_DENSE:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n       case T_INT_DENSE:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n-\n   }\n \n   private void updateUseIntDoubleDense(ByteBuf buf, UpdateOp op) {\n@@ -128,7 +120,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeDouble(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeDouble(buf));\n       }\n     }\n   }\n@@ -143,7 +135,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeFloat(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeFloat(buf));\n       }\n     }\n   }\n@@ -158,7 +150,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeInt(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeInt(buf));\n       }\n     }\n   }\n@@ -173,7 +165,7 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        set(i + (int)indexOffset, ByteBufSerdeUtils.deserializeLong(buf));\n+        set(i + (int) indexOffset, ByteBufSerdeUtils.deserializeLong(buf));\n       }\n     }\n   }\n@@ -297,7 +289,6 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getDoubleValue());\n         }\n-\n         break;\n       }\n \n@@ -307,7 +298,6 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n         break;\n       }\n \n@@ -407,10 +397,8 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n \n   @Override\n   public IntDoubleVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n-      return new IntDoubleVectorStorage(VFactory\n-          .sortedDoubleVector(vector.getDim(), vector.getStorage().getIndices(),\n-              vector.getStorage().getValues()), indexOffset);\n+    if (isSparse()) {\n+      return new IntDoubleVectorStorage(VFactory.sortedDoubleVector(vector.getDim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n@@ -432,4 +420,5 @@ public class IntDoubleVectorStorage extends IntDoubleStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}