{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2355",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "235",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "271",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "333",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2355/PropertyExistenceEnforcer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2355/PropertyExistenceEnforcer.java\nindex 020d91a80ad..35d8460cfa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2355/PropertyExistenceEnforcer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2355/PropertyExistenceEnforcer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.enterprise;\n \n import java.util.ArrayList;\n@@ -56,345 +57,342 @@ import static org.neo4j.internal.kernel.api.exceptions.schema.ConstraintValidati\n \n class PropertyExistenceEnforcer\n {\n-    static PropertyExistenceEnforcer getOrCreatePropertyExistenceEnforcerFrom( StoreReadLayer storeLayer )\n+  static PropertyExistenceEnforcer getOrCreatePropertyExistenceEnforcerFrom(StoreReadLayer storeLayer)\n+  {\n+    return storeLayer.getOrCreateSchemaDependantState(PropertyExistenceEnforcer.class, FACTORY);\n+  }\n+\n+  private final List<LabelSchemaDescriptor> nodeConstraints;\n+  private final List<RelationTypeSchemaDescriptor> relationshipConstraints;\n+  private final PrimitiveIntObjectMap<int[]> mandatoryNodePropertiesByLabel = Primitive.intObjectMap();\n+  private final PrimitiveIntObjectMap<int[]> mandatoryRelationshipPropertiesByType = Primitive.intObjectMap();\n+\n+  private PropertyExistenceEnforcer(List<LabelSchemaDescriptor> nodes, List<RelationTypeSchemaDescriptor> rels)\n+  {\n+    this.nodeConstraints = nodes;\n+    this.relationshipConstraints = rels;\n+    for (LabelSchemaDescriptor constraint : nodes)\n     {\n-        return storeLayer.getOrCreateSchemaDependantState( PropertyExistenceEnforcer.class, FACTORY );\n+      update(mandatoryNodePropertiesByLabel, constraint.getLabelId(),\n+          copyAndSortPropertyIds(constraint.getPropertyIds()));\n     }\n-\n-    private final List<LabelSchemaDescriptor> nodeConstraints;\n-    private final List<RelationTypeSchemaDescriptor> relationshipConstraints;\n-    private final PrimitiveIntObjectMap<int[]> mandatoryNodePropertiesByLabel = Primitive.intObjectMap();\n-    private final PrimitiveIntObjectMap<int[]> mandatoryRelationshipPropertiesByType = Primitive.intObjectMap();\n-\n-    private PropertyExistenceEnforcer( List<LabelSchemaDescriptor> nodes, List<RelationTypeSchemaDescriptor> rels )\n+    for (RelationTypeSchemaDescriptor constraint : rels)\n     {\n-        this.nodeConstraints = nodes;\n-        this.relationshipConstraints = rels;\n-        for ( LabelSchemaDescriptor constraint : nodes )\n-        {\n-            update( mandatoryNodePropertiesByLabel, constraint.getLabelId(),\n-                    copyAndSortPropertyIds( constraint.getPropertyIds() ) );\n-        }\n-        for ( RelationTypeSchemaDescriptor constraint : rels )\n-        {\n-            update( mandatoryRelationshipPropertiesByType, constraint.getRelTypeId(),\n-                    copyAndSortPropertyIds( constraint.getPropertyIds() ) );\n-        }\n+      update(mandatoryRelationshipPropertiesByType, constraint.getRelTypeId(),\n+          copyAndSortPropertyIds(constraint.getPropertyIds()));\n     }\n+  }\n \n-    private static void update( PrimitiveIntObjectMap<int[]> map, int key, int[] sortedValues )\n+  private static void update(PrimitiveIntObjectMap<int[]> map, int key, int[] sortedValues)\n+  {\n+    int[] current = map.get(key);\n+    if (current != null)\n     {\n-        int[] current = map.get( key );\n-        if ( current != null )\n+      sortedValues = union(current, sortedValues);\n+    }\n+    map.put(key, sortedValues);\n+  }\n+\n+  private static int[] copyAndSortPropertyIds(int[] propertyIds)\n+  {\n+    int[] values = new int[propertyIds.length];\n+    System.arraycopy(propertyIds, 0, values, 0, propertyIds.length);\n+    Arrays.sort(values);\n+    return values;\n+  }\n+\n+  TxStateVisitor decorate(TxStateVisitor visitor, ReadableTransactionState txState, StoreReadLayer storeLayer)\n+  {\n+    return new Decorator(visitor, txState, storeLayer);\n+  }\n+\n+  private static final PropertyExistenceEnforcer NO_CONSTRAINTS = new PropertyExistenceEnforcer(\n+      emptyList(), emptyList())\n+  {\n+    @Override\n+    TxStateVisitor decorate(TxStateVisitor visitor, ReadableTransactionState txState, StoreReadLayer storeLayer)\n+    {\n+      return visitor;\n+    }\n+  };\n+  private static final Function<StoreReadLayer, PropertyExistenceEnforcer> FACTORY = storeLayer ->\n+  {\n+    List<LabelSchemaDescriptor> nodes = new ArrayList<>();\n+    List<RelationTypeSchemaDescriptor> relationships = new ArrayList<>();\n+    for (Iterator<ConstraintDescriptor> constraints = storeLayer.constraintsGetAll(); constraints.hasNext(); )\n+    {\n+      ConstraintDescriptor constraint = constraints.next();\n+      if (constraint.enforcesPropertyExistence())\n+      {\n+        constraint.schema().processWith(new SchemaProcessor()\n         {\n-            sortedValues = union( current, sortedValues );\n-        }\n-        map.put( key, sortedValues );\n+          @Override\n+          public void processSpecific(LabelSchemaDescriptor schema)\n+          {\n+            nodes.add(schema);\n+          }\n+\n+          @Override\n+          public void processSpecific(RelationTypeSchemaDescriptor schema)\n+          {\n+            relationships.add(schema);\n+          }\n+        });\n+      }\n     }\n-\n-    private static int[] copyAndSortPropertyIds( int[] propertyIds )\n+    if (nodes.isEmpty() && relationships.isEmpty())\n     {\n-        int[] values = new int[propertyIds.length];\n-        System.arraycopy( propertyIds, 0, values, 0, propertyIds.length );\n-        Arrays.sort( values );\n-        return values;\n+      return NO_CONSTRAINTS;\n     }\n+    return new PropertyExistenceEnforcer(nodes, relationships);\n+  };\n \n-    TxStateVisitor decorate( TxStateVisitor visitor, ReadableTransactionState txState, StoreReadLayer storeLayer )\n+  private class Decorator extends TxStateVisitor.Delegator\n+  {\n+    private final ReadableTransactionState txState;\n+    private final StoreReadLayer storeLayer;\n+    private final PrimitiveIntSet propertyKeyIds = Primitive.intSet();\n+    private StorageStatement storageStatement;\n+\n+    Decorator(TxStateVisitor next, ReadableTransactionState txState, StoreReadLayer storeLayer)\n     {\n-        return new Decorator( visitor, txState, storeLayer );\n+      super(next);\n+      this.txState = txState;\n+      this.storeLayer = storeLayer;\n     }\n \n-    private static final PropertyExistenceEnforcer NO_CONSTRAINTS = new PropertyExistenceEnforcer(\n-            emptyList(), emptyList() )\n+    @Override\n+    public void visitNodePropertyChanges(\n+        long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed,\n+        Iterator<Integer> removed) throws ConstraintValidationException\n     {\n-        @Override\n-        TxStateVisitor decorate( TxStateVisitor visitor, ReadableTransactionState txState, StoreReadLayer storeLayer )\n-        {\n-            return visitor;\n-        }\n-    };\n-    private static final Function<StoreReadLayer,PropertyExistenceEnforcer> FACTORY = storeLayer ->\n+      validateNode(id);\n+      super.visitNodePropertyChanges(id, added, changed, removed);\n+    }\n+\n+    @Override\n+    public void visitNodeLabelChanges(long id, Set<Integer> added, Set<Integer> removed)\n+        throws ConstraintValidationException\n     {\n-        List<LabelSchemaDescriptor> nodes = new ArrayList<>();\n-        List<RelationTypeSchemaDescriptor> relationships = new ArrayList<>();\n-        for ( Iterator<ConstraintDescriptor> constraints = storeLayer.constraintsGetAll(); constraints.hasNext(); )\n-        {\n-            ConstraintDescriptor constraint = constraints.next();\n-            if ( constraint.enforcesPropertyExistence() )\n-            {\n-                constraint.schema().processWith( new SchemaProcessor()\n-                {\n-                    @Override\n-                    public void processSpecific( LabelSchemaDescriptor schema )\n-                    {\n-                        nodes.add( schema );\n-                    }\n-\n-                    @Override\n-                    public void processSpecific( RelationTypeSchemaDescriptor schema )\n-                    {\n-                        relationships.add( schema );\n-                    }\n-                } );\n-            }\n-        }\n-        if ( nodes.isEmpty() && relationships.isEmpty() )\n-        {\n-            return NO_CONSTRAINTS;\n-        }\n-        return new PropertyExistenceEnforcer( nodes, relationships );\n-    };\n+      validateNode(id);\n+      super.visitNodeLabelChanges(id, added, removed);\n+    }\n \n-    private class Decorator extends TxStateVisitor.Delegator\n+    @Override\n+    public void visitCreatedRelationship(long id, int type, long startNode, long endNode)\n+        throws ConstraintValidationException\n     {\n-        private final ReadableTransactionState txState;\n-        private final StoreReadLayer storeLayer;\n-        private final PrimitiveIntSet propertyKeyIds = Primitive.intSet();\n-        private StorageStatement storageStatement;\n+      validateRelationship(id);\n+      super.visitCreatedRelationship(id, type, startNode, endNode);\n+    }\n \n-        Decorator( TxStateVisitor next, ReadableTransactionState txState, StoreReadLayer storeLayer )\n-        {\n-            super( next );\n-            this.txState = txState;\n-            this.storeLayer = storeLayer;\n-        }\n+    @Override\n+    public void visitRelPropertyChanges(\n+        long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed,\n+        Iterator<Integer> removed) throws ConstraintValidationException\n+    {\n+      validateRelationship(id);\n+      super.visitRelPropertyChanges(id, added, changed, removed);\n+    }\n \n-        @Override\n-        public void visitNodePropertyChanges(\n-                long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed,\n-                Iterator<Integer> removed ) throws ConstraintValidationException\n-        {\n-            validateNode( id );\n-            super.visitNodePropertyChanges( id, added, changed, removed );\n-        }\n+    @Override\n+    public void close()\n+    {\n+      super.close();\n+      if (storageStatement != null)\n+      {\n+        storageStatement.close();\n+      }\n+    }\n \n-        @Override\n-        public void visitNodeLabelChanges( long id, Set<Integer> added, Set<Integer> removed )\n-                throws ConstraintValidationException\n+    private void validateNode(long nodeId) throws NodePropertyExistenceException\n+    {\n+      if (mandatoryNodePropertiesByLabel.isEmpty())\n+      {\n+        return;\n+      }\n+\n+      PrimitiveIntSet labelIds;\n+      try (Cursor<NodeItem> node = node(nodeId))\n+      {\n+        if (node.next())\n         {\n-            validateNode( id );\n-            super.visitNodeLabelChanges( id, added, removed );\n-        }\n-\n-        @Override\n-        public void visitCreatedRelationship( long id, int type, long startNode, long endNode )\n-                throws ConstraintValidationException\n+          labelIds = node.get().labels();\n+          if (labelIds.isEmpty())\n+          {\n+            return;\n+          }\n+          propertyKeyIds.clear();\n+          try (Cursor<PropertyItem> properties = properties(node.get()))\n+          {\n+            while (properties.next())\n+            {\n+              propertyKeyIds.add(properties.get().propertyKeyId());\n+            }\n+          }\n+        } else\n         {\n-            validateRelationship( id );\n-            super.visitCreatedRelationship( id, type, startNode, endNode );\n+          throw new IllegalStateException(format(\"Node %d with changes should exist.\", nodeId));\n         }\n+      }\n \n-        @Override\n-        public void visitRelPropertyChanges(\n-                long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed,\n-                Iterator<Integer> removed ) throws ConstraintValidationException\n-        {\n-            validateRelationship( id );\n-            super.visitRelPropertyChanges( id, added, changed, removed );\n-        }\n+      validateNodeProperties(nodeId, labelIds, propertyKeyIds);\n+    }\n \n-        @Override\n-        public void close()\n+    private void validateRelationship(long id) throws RelationshipPropertyExistenceException\n+    {\n+      if (mandatoryRelationshipPropertiesByType.isEmpty())\n+      {\n+        return;\n+      }\n+\n+      int relationshipType;\n+      int[] required;\n+      try (Cursor<RelationshipItem> relationship = relationship(id))\n+      {\n+        if (relationship.next())\n         {\n-            super.close();\n-            if ( storageStatement != null )\n+          relationshipType = relationship.get().type();\n+          required = mandatoryRelationshipPropertiesByType.get(relationshipType);\n+          if (required == null)\n+          {\n+            return;\n+          }\n+          propertyKeyIds.clear();\n+          try (Cursor<PropertyItem> properties = properties(relationship.get()))\n+          {\n+            while (properties.next())\n             {\n-                storageStatement.close();\n+              propertyKeyIds.add(properties.get().propertyKeyId());\n             }\n-        }\n-\n-        private void validateNode( long nodeId ) throws NodePropertyExistenceException\n+          }\n+        } else\n         {\n-            if ( mandatoryNodePropertiesByLabel.isEmpty() )\n-            {\n-                return;\n-            }\n-\n-            PrimitiveIntSet labelIds;\n-            try ( Cursor<NodeItem> node = node( nodeId ) )\n-            {\n-                if ( node.next() )\n-                {\n-                    labelIds = node.get().labels();\n-                    if ( labelIds.isEmpty() )\n-                    {\n-                        return;\n-                    }\n-                    propertyKeyIds.clear();\n-                    try ( Cursor<PropertyItem> properties = properties( node.get() ) )\n-                    {\n-                        while ( properties.next() )\n-                        {\n-                            propertyKeyIds.add( properties.get().propertyKeyId() );\n-                        }\n-                    }\n-                }\n-                else\n-                {\n-                    throw new IllegalStateException( format( \"Node %d with changes should exist.\", nodeId ) );\n-                }\n-            }\n-\n-            validateNodeProperties( nodeId, labelIds, propertyKeyIds );\n+          throw new IllegalStateException(format(\"Relationship %d with changes should exist.\", id));\n         }\n+      }\n \n-        private void validateRelationship( long id ) throws RelationshipPropertyExistenceException\n+      for (int mandatory : required)\n+      {\n+        if (!propertyKeyIds.contains(mandatory))\n         {\n-            if ( mandatoryRelationshipPropertiesByType.isEmpty() )\n-            {\n-                return;\n-            }\n-\n-            int relationshipType;\n-            int[] required;\n-            try ( Cursor<RelationshipItem> relationship = relationship( id ) )\n-            {\n-                if ( relationship.next() )\n-                {\n-                    relationshipType = relationship.get().type();\n-                    required = mandatoryRelationshipPropertiesByType.get( relationshipType );\n-                    if ( required == null )\n-                    {\n-                        return;\n-                    }\n-                    propertyKeyIds.clear();\n-                    try ( Cursor<PropertyItem> properties = properties( relationship.get() ) )\n-                    {\n-                        while ( properties.next() )\n-                        {\n-                            propertyKeyIds.add( properties.get().propertyKeyId() );\n-                        }\n-                    }\n-                }\n-                else\n-                {\n-                    throw new IllegalStateException( format( \"Relationship %d with changes should exist.\", id ) );\n-                }\n-            }\n-\n-            for ( int mandatory : required )\n-            {\n-                if ( !propertyKeyIds.contains( mandatory ) )\n-                {\n-                    failRelationship( id, relationshipType, mandatory );\n-                }\n-            }\n+          failRelationship(id, relationshipType, mandatory);\n         }\n+      }\n+    }\n \n-        private Cursor<NodeItem> node( long id )\n-        {\n-            Cursor<NodeItem> cursor = storeStatement().acquireSingleNodeCursor( id );\n-            return txState.augmentSingleNodeCursor( cursor, id );\n-        }\n+    private Cursor<NodeItem> node(long id)\n+    {\n+      Cursor<NodeItem> cursor = storeStatement().acquireSingleNodeCursor(id);\n+      return txState.augmentSingleNodeCursor(cursor, id);\n+    }\n \n-        private Cursor<RelationshipItem> relationship( long id )\n-        {\n-            Cursor<RelationshipItem> cursor = storeStatement().acquireSingleRelationshipCursor( id );\n-            return txState.augmentSingleRelationshipCursor( cursor, id );\n-        }\n+    private Cursor<RelationshipItem> relationship(long id)\n+    {\n+      Cursor<RelationshipItem> cursor = storeStatement().acquireSingleRelationshipCursor(id);\n+      return txState.augmentSingleRelationshipCursor(cursor, id);\n+    }\n \n-        private Cursor<PropertyItem> properties( NodeItem node )\n-        {\n-            Lock lock = node.lock();\n-            Cursor<PropertyItem> cursor = storeStatement().acquirePropertyCursor( node.nextPropertyId(), lock,\n-                    AssertOpen.ALWAYS_OPEN );\n-            return txState.augmentPropertyCursor( cursor, txState.getNodeState( node.id() ) );\n-        }\n+    private Cursor<PropertyItem> properties(NodeItem node)\n+    {\n+      Lock lock = node.lock();\n+      Cursor<PropertyItem> cursor = storeStatement().acquirePropertyCursor(node.nextPropertyId(), lock,\n+          AssertOpen.ALWAYS_OPEN);\n+      return txState.augmentPropertyCursor(cursor, txState.getNodeState(node.id()));\n+    }\n \n-        private Cursor<PropertyItem> properties( RelationshipItem relationship )\n-        {\n-            Lock lock = relationship.lock();\n-            Cursor<PropertyItem> cursor = storeStatement().acquirePropertyCursor( relationship.nextPropertyId(), lock,\n-                    AssertOpen.ALWAYS_OPEN );\n-            return txState.augmentPropertyCursor( cursor, txState.getRelationshipState( relationship.id() ) );\n-        }\n+    private Cursor<PropertyItem> properties(RelationshipItem relationship)\n+    {\n+      Lock lock = relationship.lock();\n+      Cursor<PropertyItem> cursor = storeStatement().acquirePropertyCursor(relationship.nextPropertyId(), lock,\n+          AssertOpen.ALWAYS_OPEN);\n+      return txState.augmentPropertyCursor(cursor, txState.getRelationshipState(relationship.id()));\n+    }\n \n-        private StorageStatement storeStatement()\n-        {\n-            return storageStatement == null ? storageStatement = storeLayer.newStatement() : storageStatement;\n-        }\n+    private StorageStatement storeStatement()\n+    {\n+      return storageStatement == null ? storageStatement = storeLayer.newStatement() : storageStatement;\n     }\n+  }\n \n-    private void validateNodeProperties( long id, PrimitiveIntSet labelIds, PrimitiveIntSet propertyKeyIds )\n-            throws NodePropertyExistenceException\n+  private void validateNodeProperties(long id, PrimitiveIntSet labelIds, PrimitiveIntSet propertyKeyIds)\n+      throws NodePropertyExistenceException\n+  {\n+    if (labelIds.size() > mandatoryNodePropertiesByLabel.size())\n     {\n-        if ( labelIds.size() > mandatoryNodePropertiesByLabel.size() )\n+      for (PrimitiveIntIterator labels = mandatoryNodePropertiesByLabel.iterator(); labels.hasNext(); )\n+      {\n+        int label = labels.next();\n+        if (labelIds.contains(label))\n         {\n-            for ( PrimitiveIntIterator labels = mandatoryNodePropertiesByLabel.iterator(); labels.hasNext(); )\n-            {\n-                int label = labels.next();\n-                if ( labelIds.contains( label ) )\n-                {\n-                    validateNodeProperties( id, label, mandatoryNodePropertiesByLabel.get( label ), propertyKeyIds );\n-                }\n-            }\n+          validateNodeProperties(id, label, mandatoryNodePropertiesByLabel.get(label), propertyKeyIds);\n         }\n-        else\n+      }\n+    } else\n+    {\n+      for (PrimitiveIntIterator labels = labelIds.iterator(); labels.hasNext(); )\n+      {\n+        int label = labels.next();\n+        int[] keys = mandatoryNodePropertiesByLabel.get(label);\n+        if (keys != null)\n         {\n-            for ( PrimitiveIntIterator labels = labelIds.iterator(); labels.hasNext(); )\n-            {\n-                int label = labels.next();\n-                int[] keys = mandatoryNodePropertiesByLabel.get( label );\n-                if ( keys != null )\n-                {\n-                    validateNodeProperties( id, label, keys, propertyKeyIds );\n-                }\n-            }\n+          validateNodeProperties(id, label, keys, propertyKeyIds);\n         }\n+      }\n     }\n+  }\n \n-    private void validateNodeProperties( long id, int label, int[] requiredKeys, PrimitiveIntSet propertyKeyIds )\n-            throws NodePropertyExistenceException\n+  private void validateNodeProperties(long id, int label, int[] requiredKeys, PrimitiveIntSet propertyKeyIds)\n+      throws NodePropertyExistenceException\n+  {\n+    for (int key : requiredKeys)\n     {\n-        for ( int key : requiredKeys )\n-        {\n-            if ( !propertyKeyIds.contains( key ) )\n-            {\n-                failNode( id, label, key );\n-            }\n-        }\n+      if (!propertyKeyIds.contains(key))\n+      {\n+        failNode(id, label, key);\n+      }\n     }\n+  }\n \n-    private void failNode( long id, int label, int propertyKey )\n-            throws NodePropertyExistenceException\n+  private void failNode(long id, int label, int propertyKey)\n+      throws NodePropertyExistenceException\n+  {\n+    for (LabelSchemaDescriptor constraint : nodeConstraints)\n     {\n-        for ( LabelSchemaDescriptor constraint : nodeConstraints )\n-        {\n-            if ( constraint.getLabelId() == label && contains( constraint.getPropertyIds(), propertyKey ) )\n-            {\n-                throw new NodePropertyExistenceException( constraint, VALIDATION, id );\n-            }\n-        }\n-        throw new IllegalStateException( format(\n-                \"Node constraint for label=%d, propertyKey=%d should exist.\",\n-                label, propertyKey ) );\n+      if (constraint.getLabelId() == label && contains(constraint.getPropertyIds(), propertyKey))\n+      {\n+        throw new NodePropertyExistenceException(constraint, VALIDATION, id);\n+      }\n     }\n-\n-    private void failRelationship( long id, int relationshipType, int propertyKey )\n-            throws RelationshipPropertyExistenceException\n+    throw new IllegalStateException(format(\n+        \"Node constraint for label=%d, propertyKey=%d should exist.\",\n+        label, propertyKey));\n+  }\n+\n+  private void failRelationship(long id, int relationshipType, int propertyKey)\n+      throws RelationshipPropertyExistenceException\n+  {\n+    for (RelationTypeSchemaDescriptor constraint : relationshipConstraints)\n     {\n-        for ( RelationTypeSchemaDescriptor constraint : relationshipConstraints )\n-        {\n-            if ( constraint.getRelTypeId() == relationshipType && contains( constraint.getPropertyIds(), propertyKey ) )\n-            {\n-                throw new RelationshipPropertyExistenceException( constraint, VALIDATION, id );\n-            }\n-        }\n-        throw new IllegalStateException( format(\n-                \"Relationship constraint for relationshipType=%d, propertyKey=%d should exist.\",\n-                relationshipType, propertyKey ) );\n+      if (constraint.getRelTypeId() == relationshipType && contains(constraint.getPropertyIds(), propertyKey))\n+      {\n+        throw new RelationshipPropertyExistenceException(constraint, VALIDATION, id);\n+      }\n     }\n-\n-    private boolean contains( int[] list, int value )\n+    throw new IllegalStateException(format(\n+        \"Relationship constraint for relationshipType=%d, propertyKey=%d should exist.\",\n+        relationshipType, propertyKey));\n+  }\n+\n+  private boolean contains(int[] list, int value)\n+  {\n+    for (int x : list)\n     {\n-        for ( int x : list )\n-        {\n-            if ( value == x )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      if (value == x)\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n }\n",
            "diff_size": 440
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "375",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2355/PropertyExistenceEnforcer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2355/PropertyExistenceEnforcer.java\nindex 020d91a80ad..baa59ac2135 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2355/PropertyExistenceEnforcer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2355/PropertyExistenceEnforcer.java\n@@ -79,7 +79,7 @@ class PropertyExistenceEnforcer\n         {\n             update( mandatoryRelationshipPropertiesByType, constraint.getRelTypeId(),\n                     copyAndSortPropertyIds( constraint.getPropertyIds() ) );\n-        }\n+    }\n     }\n \n     private static void update( PrimitiveIntObjectMap<int[]> map, int key, int[] sortedValues )\n@@ -105,8 +105,7 @@ class PropertyExistenceEnforcer\n         return new Decorator( visitor, txState, storeLayer );\n     }\n \n-    private static final PropertyExistenceEnforcer NO_CONSTRAINTS = new PropertyExistenceEnforcer(\n-            emptyList(), emptyList() )\n+    private static final PropertyExistenceEnforcer NO_CONSTRAINTS = new PropertyExistenceEnforcer( emptyList(), emptyList() )\n     {\n         @Override\n         TxStateVisitor decorate( TxStateVisitor visitor, ReadableTransactionState txState, StoreReadLayer storeLayer )\n@@ -114,11 +113,13 @@ class PropertyExistenceEnforcer\n             return visitor;\n         }\n     };\n-    private static final Function<StoreReadLayer,PropertyExistenceEnforcer> FACTORY = storeLayer ->\n+\n+private static final Function<StoreReadLayer,PropertyExistenceEnforcer> FACTORY = storeLayer ->\n     {\n         List<LabelSchemaDescriptor> nodes = new ArrayList<>();\n         List<RelationTypeSchemaDescriptor> relationships = new ArrayList<>();\n-        for ( Iterator<ConstraintDescriptor> constraints = storeLayer.constraintsGetAll(); constraints.hasNext(); )\n+        for ( Iterator<ConstraintDescriptor> constraints = storeLayer.constraintsGetAll();\n+constraints.hasNext(); )\n         {\n             ConstraintDescriptor constraint = constraints.next();\n             if ( constraint.enforcesPropertyExistence() )\n@@ -161,35 +162,29 @@ class PropertyExistenceEnforcer\n         }\n \n         @Override\n-        public void visitNodePropertyChanges(\n-                long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed,\n-                Iterator<Integer> removed ) throws ConstraintValidationException\n-        {\n+        public void visitNodePropertyChanges( long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed, Iterator<Integer> removed ) throws ConstraintValidationException\n+{\n             validateNode( id );\n             super.visitNodePropertyChanges( id, added, changed, removed );\n         }\n \n         @Override\n-        public void visitNodeLabelChanges( long id, Set<Integer> added, Set<Integer> removed )\n-                throws ConstraintValidationException\n-        {\n+        public void visitNodeLabelChanges( long id, Set<Integer> added, Set<Integer> removed ) throws ConstraintValidationException\n+{\n             validateNode( id );\n             super.visitNodeLabelChanges( id, added, removed );\n         }\n \n         @Override\n-        public void visitCreatedRelationship( long id, int type, long startNode, long endNode )\n-                throws ConstraintValidationException\n-        {\n+        public void visitCreatedRelationship( long id, int type, long startNode, long endNode ) throws ConstraintValidationException\n+{\n             validateRelationship( id );\n             super.visitCreatedRelationship( id, type, startNode, endNode );\n         }\n \n         @Override\n-        public void visitRelPropertyChanges(\n-                long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed,\n-                Iterator<Integer> removed ) throws ConstraintValidationException\n-        {\n+        public void visitRelPropertyChanges( long id, Iterator<StorageProperty> added, Iterator<StorageProperty> changed, Iterator<Integer> removed ) throws ConstraintValidationException\n+{\n             validateRelationship( id );\n             super.visitRelPropertyChanges( id, added, changed, removed );\n         }\n@@ -299,7 +294,7 @@ class PropertyExistenceEnforcer\n             Lock lock = node.lock();\n             Cursor<PropertyItem> cursor = storeStatement().acquirePropertyCursor( node.nextPropertyId(), lock,\n                     AssertOpen.ALWAYS_OPEN );\n-            return txState.augmentPropertyCursor( cursor, txState.getNodeState( node.id() ) );\n+return txState.augmentPropertyCursor( cursor, txState.getNodeState( node.id() ) );\n         }\n \n         private Cursor<PropertyItem> properties( RelationshipItem relationship )\n@@ -307,7 +302,7 @@ class PropertyExistenceEnforcer\n             Lock lock = relationship.lock();\n             Cursor<PropertyItem> cursor = storeStatement().acquirePropertyCursor( relationship.nextPropertyId(), lock,\n                     AssertOpen.ALWAYS_OPEN );\n-            return txState.augmentPropertyCursor( cursor, txState.getRelationshipState( relationship.id() ) );\n+return txState.augmentPropertyCursor( cursor, txState.getRelationshipState( relationship.id() ) );\n         }\n \n         private StorageStatement storeStatement()\n@@ -316,12 +311,12 @@ class PropertyExistenceEnforcer\n         }\n     }\n \n-    private void validateNodeProperties( long id, PrimitiveIntSet labelIds, PrimitiveIntSet propertyKeyIds )\n-            throws NodePropertyExistenceException\n-    {\n+    private void validateNodeProperties( long id, PrimitiveIntSet labelIds, PrimitiveIntSet propertyKeyIds ) throws NodePropertyExistenceException\n+{\n         if ( labelIds.size() > mandatoryNodePropertiesByLabel.size() )\n         {\n-            for ( PrimitiveIntIterator labels = mandatoryNodePropertiesByLabel.iterator(); labels.hasNext(); )\n+            for ( PrimitiveIntIterator labels = mandatoryNodePropertiesByLabel.iterator();\n+labels.hasNext(); )\n             {\n                 int label = labels.next();\n                 if ( labelIds.contains( label ) )\n@@ -332,7 +327,8 @@ class PropertyExistenceEnforcer\n         }\n         else\n         {\n-            for ( PrimitiveIntIterator labels = labelIds.iterator(); labels.hasNext(); )\n+            for ( PrimitiveIntIterator labels = labelIds.iterator();\n+labels.hasNext(); )\n             {\n                 int label = labels.next();\n                 int[] keys = mandatoryNodePropertiesByLabel.get( label );\n@@ -344,9 +340,8 @@ class PropertyExistenceEnforcer\n         }\n     }\n \n-    private void validateNodeProperties( long id, int label, int[] requiredKeys, PrimitiveIntSet propertyKeyIds )\n-            throws NodePropertyExistenceException\n-    {\n+    private void validateNodeProperties( long id, int label, int[] requiredKeys, PrimitiveIntSet propertyKeyIds ) throws NodePropertyExistenceException\n+{\n         for ( int key : requiredKeys )\n         {\n             if ( !propertyKeyIds.contains( key ) )\n@@ -356,9 +351,8 @@ class PropertyExistenceEnforcer\n         }\n     }\n \n-    private void failNode( long id, int label, int propertyKey )\n-            throws NodePropertyExistenceException\n-    {\n+    private void failNode( long id, int label, int propertyKey ) throws NodePropertyExistenceException\n+{\n         for ( LabelSchemaDescriptor constraint : nodeConstraints )\n         {\n             if ( constraint.getLabelId() == label && contains( constraint.getPropertyIds(), propertyKey ) )\n@@ -366,14 +360,11 @@ class PropertyExistenceEnforcer\n                 throw new NodePropertyExistenceException( constraint, VALIDATION, id );\n             }\n         }\n-        throw new IllegalStateException( format(\n-                \"Node constraint for label=%d, propertyKey=%d should exist.\",\n-                label, propertyKey ) );\n+        throw new IllegalStateException( format( \"Node constraint for label=%d, propertyKey=%d should exist.\", label, propertyKey ) );\n     }\n \n-    private void failRelationship( long id, int relationshipType, int propertyKey )\n-            throws RelationshipPropertyExistenceException\n-    {\n+    private void failRelationship( long id, int relationshipType, int propertyKey ) throws RelationshipPropertyExistenceException\n+{\n         for ( RelationTypeSchemaDescriptor constraint : relationshipConstraints )\n         {\n             if ( constraint.getRelTypeId() == relationshipType && contains( constraint.getPropertyIds(), propertyKey ) )\n@@ -381,9 +372,7 @@ class PropertyExistenceEnforcer\n                 throw new RelationshipPropertyExistenceException( constraint, VALIDATION, id );\n             }\n         }\n-        throw new IllegalStateException( format(\n-                \"Relationship constraint for relationshipType=%d, propertyKey=%d should exist.\",\n-                relationshipType, propertyKey ) );\n+        throw new IllegalStateException( format( \"Relationship constraint for relationshipType=%d, propertyKey=%d should exist.\", relationshipType, propertyKey ) );\n     }\n \n     private boolean contains( int[] list, int value )\n@@ -397,4 +386,4 @@ class PropertyExistenceEnforcer\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}