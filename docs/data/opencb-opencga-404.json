{
    "project_name": "opencb-opencga",
    "error_id": "404",
    "information": {
        "errors": [
            {
                "line": "1216",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        Map<String, Long> jobStatusCount = new HashMap<>();\n\n        OpenCGAResult result = catalogManager.getJobManager().groupBy(study, new Query(baseQuery), JobDBAdaptor.QueryParams.STATUS_NAME.key(),\n                new QueryOptions(QueryOptions.COUNT, true), token);\n        for (Object o : result.getResults()) {\n            String status = ((Map) ((Map) o).get(\"_id\")).get(\"status.name\").toString();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1216",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/404/JobManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/404/JobManager.java\nindex 851041fa065..2e0ebf8c37b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/404/JobManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/404/JobManager.java\n@@ -62,829 +62,829 @@ import static org.opencb.opencga.catalog.auth.authorization.CatalogAuthorization\n  */\n public class JobManager extends ResourceManager<Job> {\n \n-    protected static Logger logger = LoggerFactory.getLogger(JobManager.class);\n-    private UserManager userManager;\n-    private StudyManager studyManager;\n-\n-    public static final QueryOptions INCLUDE_JOB_IDS = new QueryOptions(QueryOptions.INCLUDE,\n-            Arrays.asList(JobDBAdaptor.QueryParams.ID.key(), JobDBAdaptor.QueryParams.UID.key(), JobDBAdaptor.QueryParams.UUID.key(),\n-                    JobDBAdaptor.QueryParams.STUDY_UID.key()));\n-\n-    JobManager(AuthorizationManager authorizationManager, AuditManager auditManager, CatalogManager catalogManager,\n-               DBAdaptorFactory catalogDBAdaptorFactory, CatalogIOManagerFactory ioManagerFactory, Configuration configuration) {\n-        super(authorizationManager, auditManager, catalogManager, catalogDBAdaptorFactory, ioManagerFactory, configuration);\n-\n-        this.userManager = catalogManager.getUserManager();\n-        this.studyManager = catalogManager.getStudyManager();\n+  protected static Logger logger = LoggerFactory.getLogger(JobManager.class);\n+  private UserManager userManager;\n+  private StudyManager studyManager;\n+\n+  public static final QueryOptions INCLUDE_JOB_IDS = new QueryOptions(QueryOptions.INCLUDE,\n+      Arrays.asList(JobDBAdaptor.QueryParams.ID.key(), JobDBAdaptor.QueryParams.UID.key(), JobDBAdaptor.QueryParams.UUID.key(),\n+          JobDBAdaptor.QueryParams.STUDY_UID.key()));\n+\n+  JobManager(AuthorizationManager authorizationManager, AuditManager auditManager, CatalogManager catalogManager,\n+             DBAdaptorFactory catalogDBAdaptorFactory, CatalogIOManagerFactory ioManagerFactory, Configuration configuration) {\n+    super(authorizationManager, auditManager, catalogManager, catalogDBAdaptorFactory, ioManagerFactory, configuration);\n+\n+    this.userManager = catalogManager.getUserManager();\n+    this.studyManager = catalogManager.getStudyManager();\n+  }\n+\n+  @Override\n+  Enums.Resource getEntity() {\n+    return Enums.Resource.JOB;\n+  }\n+\n+  @Override\n+  OpenCGAResult<Job> internalGet(long studyUid, String entry, @Nullable Query query, QueryOptions options, String user)\n+      throws CatalogException {\n+    ParamUtils.checkIsSingleID(entry);\n+    Query queryCopy = query == null ? new Query() : new Query(query);\n+    queryCopy.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), studyUid);\n+\n+    if (UUIDUtils.isOpenCGAUUID(entry)) {\n+      queryCopy.put(JobDBAdaptor.QueryParams.UUID.key(), entry);\n+    } else {\n+      queryCopy.put(JobDBAdaptor.QueryParams.ID.key(), entry);\n     }\n-\n-    @Override\n-    Enums.Resource getEntity() {\n-        return Enums.Resource.JOB;\n-    }\n-\n-    @Override\n-    OpenCGAResult<Job> internalGet(long studyUid, String entry, @Nullable Query query, QueryOptions options, String user)\n-            throws CatalogException {\n-        ParamUtils.checkIsSingleID(entry);\n-        Query queryCopy = query == null ? new Query() : new Query(query);\n-        queryCopy.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), studyUid);\n-\n-        if (UUIDUtils.isOpenCGAUUID(entry)) {\n-            queryCopy.put(JobDBAdaptor.QueryParams.UUID.key(), entry);\n-        } else {\n-            queryCopy.put(JobDBAdaptor.QueryParams.ID.key(), entry);\n-        }\n //        QueryOptions options = new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\n //                JobDBAdaptor.QueryParams.UUID.key(), JobDBAdaptor.QueryParams.UID.key(), JobDBAdaptor.QueryParams.STUDY_UID.key(),\n //                JobDBAdaptor.QueryParams.ID.key(), JobDBAdaptor.QueryParams.STATUS.key()));\n-        OpenCGAResult<Job> jobDataResult = jobDBAdaptor.get(studyUid, queryCopy, options, user);\n-        if (jobDataResult.getNumResults() == 0) {\n-            jobDataResult = jobDBAdaptor.get(queryCopy, options);\n-            if (jobDataResult.getNumResults() == 0) {\n-                throw new CatalogException(\"Job \" + entry + \" not found\");\n-            } else {\n-                throw new CatalogAuthorizationException(\"Permission denied. \" + user + \" is not allowed to see the job \" + entry);\n-            }\n-        } else if (jobDataResult.getNumResults() > 1) {\n-            throw new CatalogException(\"More than one job found based on \" + entry);\n-        } else {\n-            return jobDataResult;\n-        }\n+    OpenCGAResult<Job> jobDataResult = jobDBAdaptor.get(studyUid, queryCopy, options, user);\n+    if (jobDataResult.getNumResults() == 0) {\n+      jobDataResult = jobDBAdaptor.get(queryCopy, options);\n+      if (jobDataResult.getNumResults() == 0) {\n+        throw new CatalogException(\"Job \" + entry + \" not found\");\n+      } else {\n+        throw new CatalogAuthorizationException(\"Permission denied. \" + user + \" is not allowed to see the job \" + entry);\n+      }\n+    } else if (jobDataResult.getNumResults() > 1) {\n+      throw new CatalogException(\"More than one job found based on \" + entry);\n+    } else {\n+      return jobDataResult;\n     }\n+  }\n \n-    @Override\n-    InternalGetDataResult<Job> internalGet(long studyUid, List<String> entryList, @Nullable Query query, QueryOptions options, String user,\n-                                           boolean ignoreException) throws CatalogException {\n-        if (ListUtils.isEmpty(entryList)) {\n-            throw new CatalogException(\"Missing job entries.\");\n-        }\n-        List<String> uniqueList = ListUtils.unique(entryList);\n-\n-        QueryOptions queryOptions = new QueryOptions(ParamUtils.defaultObject(options, QueryOptions::new));\n-        Query queryCopy = query == null ? new Query() : new Query(query);\n-        queryCopy.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), studyUid);\n-\n-        Function<Job, String> jobStringFunction = Job::getId;\n-        JobDBAdaptor.QueryParams idQueryParam = null;\n-        for (String entry : uniqueList) {\n-            JobDBAdaptor.QueryParams param = JobDBAdaptor.QueryParams.ID;\n-            if (UUIDUtils.isOpenCGAUUID(entry)) {\n-                param = JobDBAdaptor.QueryParams.UUID;\n-                jobStringFunction = Job::getUuid;\n-            }\n-            if (idQueryParam == null) {\n-                idQueryParam = param;\n-            }\n-            if (idQueryParam != param) {\n-                throw new CatalogException(\"Found uuids and ids in the same query. Please, choose one or do two different queries.\");\n-            }\n-        }\n-        queryCopy.put(idQueryParam.key(), uniqueList);\n-\n-        // Ensure the field by which we are querying for will be kept in the results\n-        queryOptions = keepFieldInQueryOptions(queryOptions, idQueryParam.key());\n-\n-        OpenCGAResult<Job> jobDataResult = jobDBAdaptor.get(studyUid, queryCopy, options, user);\n-        if (ignoreException || jobDataResult.getNumResults() == uniqueList.size()) {\n-            return keepOriginalOrder(uniqueList, jobStringFunction, jobDataResult, ignoreException, false);\n-        }\n-        // Query without adding the user check\n-        OpenCGAResult<Job> resultsNoCheck = jobDBAdaptor.get(queryCopy, queryOptions);\n-\n-        if (resultsNoCheck.getNumResults() == jobDataResult.getNumResults()) {\n-            throw CatalogException.notFound(\"jobs\", getMissingFields(uniqueList, jobDataResult.getResults(), jobStringFunction));\n-        } else {\n-            throw new CatalogAuthorizationException(\"Permission denied. \" + user + \" is not allowed to see some or none of the jobs.\");\n-        }\n+  @Override\n+  InternalGetDataResult<Job> internalGet(long studyUid, List<String> entryList, @Nullable Query query, QueryOptions options, String user,\n+                                         boolean ignoreException) throws CatalogException {\n+    if (ListUtils.isEmpty(entryList)) {\n+      throw new CatalogException(\"Missing job entries.\");\n     }\n-\n-    private OpenCGAResult<Job> getJob(long studyUid, String jobUuid, QueryOptions options) throws CatalogDBException {\n-        Query query = new Query()\n-                .append(JobDBAdaptor.QueryParams.STUDY_UID.key(), studyUid)\n-                .append(JobDBAdaptor.QueryParams.UUID.key(), jobUuid);\n-        return jobDBAdaptor.get(query, options);\n+    List<String> uniqueList = ListUtils.unique(entryList);\n+\n+    QueryOptions queryOptions = new QueryOptions(ParamUtils.defaultObject(options, QueryOptions::new));\n+    Query queryCopy = query == null ? new Query() : new Query(query);\n+    queryCopy.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), studyUid);\n+\n+    Function<Job, String> jobStringFunction = Job::getId;\n+    JobDBAdaptor.QueryParams idQueryParam = null;\n+    for (String entry : uniqueList) {\n+      JobDBAdaptor.QueryParams param = JobDBAdaptor.QueryParams.ID;\n+      if (UUIDUtils.isOpenCGAUUID(entry)) {\n+        param = JobDBAdaptor.QueryParams.UUID;\n+        jobStringFunction = Job::getUuid;\n+      }\n+      if (idQueryParam == null) {\n+        idQueryParam = param;\n+      }\n+      if (idQueryParam != param) {\n+        throw new CatalogException(\"Found uuids and ids in the same query. Please, choose one or do two different queries.\");\n+      }\n     }\n+    queryCopy.put(idQueryParam.key(), uniqueList);\n+\n+    // Ensure the field by which we are querying for will be kept in the results\n+    queryOptions = keepFieldInQueryOptions(queryOptions, idQueryParam.key());\n \n-    public Long getStudyId(long jobId) throws CatalogException {\n-        return jobDBAdaptor.getStudyId(jobId);\n+    OpenCGAResult<Job> jobDataResult = jobDBAdaptor.get(studyUid, queryCopy, options, user);\n+    if (ignoreException || jobDataResult.getNumResults() == uniqueList.size()) {\n+      return keepOriginalOrder(uniqueList, jobStringFunction, jobDataResult, ignoreException, false);\n     }\n+    // Query without adding the user check\n+    OpenCGAResult<Job> resultsNoCheck = jobDBAdaptor.get(queryCopy, queryOptions);\n \n-    public Study getStudy(Job job, String sessionId) throws CatalogException {\n-        ParamUtils.checkObj(job, \"job\");\n-        ParamUtils.checkObj(sessionId, \"session id\");\n+    if (resultsNoCheck.getNumResults() == jobDataResult.getNumResults()) {\n+      throw CatalogException.notFound(\"jobs\", getMissingFields(uniqueList, jobDataResult.getResults(), jobStringFunction));\n+    } else {\n+      throw new CatalogAuthorizationException(\"Permission denied. \" + user + \" is not allowed to see some or none of the jobs.\");\n+    }\n+  }\n \n-        if (job.getStudyUid() <= 0) {\n-            throw new CatalogException(\"Missing study uid field in job\");\n-        }\n+  private OpenCGAResult<Job> getJob(long studyUid, String jobUuid, QueryOptions options) throws CatalogDBException {\n+    Query query = new Query()\n+        .append(JobDBAdaptor.QueryParams.STUDY_UID.key(), studyUid)\n+        .append(JobDBAdaptor.QueryParams.UUID.key(), jobUuid);\n+    return jobDBAdaptor.get(query, options);\n+  }\n \n-        String user = catalogManager.getUserManager().getUserId(sessionId);\n+  public Long getStudyId(long jobId) throws CatalogException {\n+    return jobDBAdaptor.getStudyId(jobId);\n+  }\n \n-        Query query = new Query(StudyDBAdaptor.QueryParams.UID.key(), job.getStudyUid());\n-        OpenCGAResult<Study> studyDataResult = studyDBAdaptor.get(query, QueryOptions.empty(), user);\n-        if (studyDataResult.getNumResults() == 1) {\n-            return studyDataResult.first();\n-        } else {\n-            authorizationManager.checkCanViewStudy(job.getStudyUid(), user);\n-            throw new CatalogException(\"Incorrect study uid\");\n-        }\n-    }\n+  public Study getStudy(Job job, String sessionId) throws CatalogException {\n+    ParamUtils.checkObj(job, \"job\");\n+    ParamUtils.checkObj(sessionId, \"session id\");\n \n-    public OpenCGAResult<Job> visit(String studyId, String jobId, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyId, userId);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"studyId\", studyId)\n-                .append(\"jobId\", jobId)\n-                .append(\"token\", token);\n-        try {\n-            JobUpdateParams updateParams = new JobUpdateParams().setVisited(true);\n-            Job job = internalGet(study.getUid(), jobId, INCLUDE_JOB_IDS, userId).first();\n-\n-            OpenCGAResult result = update(study, job, updateParams, QueryOptions.empty(), userId);\n-            auditManager.audit(userId, Enums.Action.VISIT, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                    study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-\n-            return result;\n-        } catch (CatalogException e) {\n-            auditManager.audit(userId, Enums.Action.VISIT, Enums.Resource.JOB, jobId, \"\", study.getId(), study.getUuid(),\n-                    auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n-        }\n+    if (job.getStudyUid() <= 0) {\n+      throw new CatalogException(\"Missing study uid field in job\");\n     }\n \n-    @Override\n-    public OpenCGAResult<Job> create(String studyStr, Job job, QueryOptions options, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyStr, userId);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyStr)\n-                .append(\"job\", job)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n-        try {\n-            authorizationManager.checkStudyPermission(study.getUid(), userId, StudyAclEntry.StudyPermissions.WRITE_JOBS);\n-\n-            ParamUtils.checkObj(job, \"Job\");\n-            ParamUtils.checkAlias(job.getId(), \"job id\");\n-            job.setName(ParamUtils.defaultString(job.getName(), \"\"));\n-            job.setDescription(ParamUtils.defaultString(job.getDescription(), \"\"));\n-            job.setCommandLine(ParamUtils.defaultString(job.getCommandLine(), \"\"));\n-            job.setCreationDate(ParamUtils.defaultString(job.getCreationDate(), TimeUtils.getTime()));\n-            job.setStatus(ParamUtils.defaultObject(job.getStatus(), new Enums.ExecutionStatus(Enums.ExecutionStatus.DONE)));\n-            job.setPriority(ParamUtils.defaultObject(job.getPriority(), Enums.Priority.MEDIUM));\n-            job.setInput(ParamUtils.defaultObject(job.getInput(), Collections.emptyList()));\n-            job.setOutput(ParamUtils.defaultObject(job.getOutput(), Collections.emptyList()));\n-            job.setParams(ParamUtils.defaultObject(job.getParams(), HashMap::new));\n-            job.setAttributes(ParamUtils.defaultObject(job.getAttributes(), HashMap::new));\n-            job.setUserId(userId);\n-            job.setRelease(catalogManager.getStudyManager().getCurrentRelease(study));\n-            job.setOutDir(job.getOutDir() != null && StringUtils.isNotEmpty(job.getOutDir().getPath()) ? job.getOutDir() : null);\n-            job.setStudyUuid(study.getUuid());\n-\n-            if (!Arrays.asList(Enums.ExecutionStatus.ABORTED, Enums.ExecutionStatus.DONE, Enums.ExecutionStatus.UNREGISTERED,\n-                    Enums.ExecutionStatus.ERROR).contains(job.getStatus().getName())) {\n-                throw new CatalogException(\"Cannot create a job in a status different from one of the final ones.\");\n-            }\n-\n-            if (ListUtils.isNotEmpty(job.getInput())) {\n-                List<File> inputFiles = new ArrayList<>(job.getInput().size());\n-                for (File file : job.getInput()) {\n-                    inputFiles.add(getFile(study.getUid(), file.getPath(), userId));\n-                }\n-                job.setInput(inputFiles);\n-            }\n-            if (ListUtils.isNotEmpty(job.getOutput())) {\n-                List<File> outputFiles = new ArrayList<>(job.getOutput().size());\n-                for (File file : job.getOutput()) {\n-                    outputFiles.add(getFile(study.getUid(), file.getPath(), userId));\n-                }\n-                job.setOutput(outputFiles);\n-            }\n-            if (job.getOutDir() != null && StringUtils.isNotEmpty(job.getOutDir().getPath())) {\n-                job.setOutDir(getFile(study.getUid(), job.getOutDir().getPath(), userId));\n-                if (job.getOutDir().getType() != File.Type.DIRECTORY) {\n-                    throw new CatalogException(\"Unexpected outDir type. Expected \" + File.Type.DIRECTORY);\n-                }\n-            }\n-            if (job.getStdout() != null && StringUtils.isNotEmpty(job.getStdout().getPath())) {\n-                job.setStdout(getFile(study.getUid(), job.getStdout().getPath(), userId));\n-            }\n-            if (job.getStderr() != null && StringUtils.isNotEmpty(job.getStderr().getPath())) {\n-                job.setStderr(getFile(study.getUid(), job.getStderr().getPath(), userId));\n-            }\n+    String user = catalogManager.getUserManager().getUserId(sessionId);\n \n-            job.setUuid(UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.JOB));\n-            jobDBAdaptor.insert(study.getUid(), job, options);\n-            OpenCGAResult<Job> queryResult = getJob(study.getUid(), job.getUuid(), options);\n-            auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(), study.getUuid(),\n-                    auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-\n-            return queryResult;\n-        } catch (CatalogException e) {\n-            auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), \"\", study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n+    Query query = new Query(StudyDBAdaptor.QueryParams.UID.key(), job.getStudyUid());\n+    OpenCGAResult<Study> studyDataResult = studyDBAdaptor.get(query, QueryOptions.empty(), user);\n+    if (studyDataResult.getNumResults() == 1) {\n+      return studyDataResult.first();\n+    } else {\n+      authorizationManager.checkCanViewStudy(job.getStudyUid(), user);\n+      throw new CatalogException(\"Incorrect study uid\");\n+    }\n+  }\n+\n+  public OpenCGAResult<Job> visit(String studyId, String jobId, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyId, userId);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"studyId\", studyId)\n+        .append(\"jobId\", jobId)\n+        .append(\"token\", token);\n+    try {\n+      JobUpdateParams updateParams = new JobUpdateParams().setVisited(true);\n+      Job job = internalGet(study.getUid(), jobId, INCLUDE_JOB_IDS, userId).first();\n+\n+      OpenCGAResult result = update(study, job, updateParams, QueryOptions.empty(), userId);\n+      auditManager.audit(userId, Enums.Action.VISIT, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+          study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+\n+      return result;\n+    } catch (CatalogException e) {\n+      auditManager.audit(userId, Enums.Action.VISIT, Enums.Resource.JOB, jobId, \"\", study.getId(), study.getUuid(),\n+          auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public OpenCGAResult<Job> create(String studyStr, Job job, QueryOptions options, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyStr, userId);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyStr)\n+        .append(\"job\", job)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n+    try {\n+      authorizationManager.checkStudyPermission(study.getUid(), userId, StudyAclEntry.StudyPermissions.WRITE_JOBS);\n+\n+      ParamUtils.checkObj(job, \"Job\");\n+      ParamUtils.checkAlias(job.getId(), \"job id\");\n+      job.setName(ParamUtils.defaultString(job.getName(), \"\"));\n+      job.setDescription(ParamUtils.defaultString(job.getDescription(), \"\"));\n+      job.setCommandLine(ParamUtils.defaultString(job.getCommandLine(), \"\"));\n+      job.setCreationDate(ParamUtils.defaultString(job.getCreationDate(), TimeUtils.getTime()));\n+      job.setStatus(ParamUtils.defaultObject(job.getStatus(), new Enums.ExecutionStatus(Enums.ExecutionStatus.DONE)));\n+      job.setPriority(ParamUtils.defaultObject(job.getPriority(), Enums.Priority.MEDIUM));\n+      job.setInput(ParamUtils.defaultObject(job.getInput(), Collections.emptyList()));\n+      job.setOutput(ParamUtils.defaultObject(job.getOutput(), Collections.emptyList()));\n+      job.setParams(ParamUtils.defaultObject(job.getParams(), HashMap::new));\n+      job.setAttributes(ParamUtils.defaultObject(job.getAttributes(), HashMap::new));\n+      job.setUserId(userId);\n+      job.setRelease(catalogManager.getStudyManager().getCurrentRelease(study));\n+      job.setOutDir(job.getOutDir() != null && StringUtils.isNotEmpty(job.getOutDir().getPath()) ? job.getOutDir() : null);\n+      job.setStudyUuid(study.getUuid());\n+\n+      if (!Arrays.asList(Enums.ExecutionStatus.ABORTED, Enums.ExecutionStatus.DONE, Enums.ExecutionStatus.UNREGISTERED,\n+          Enums.ExecutionStatus.ERROR).contains(job.getStatus().getName())) {\n+        throw new CatalogException(\"Cannot create a job in a status different from one of the final ones.\");\n+      }\n+\n+      if (ListUtils.isNotEmpty(job.getInput())) {\n+        List<File> inputFiles = new ArrayList<>(job.getInput().size());\n+        for (File file : job.getInput()) {\n+          inputFiles.add(getFile(study.getUid(), file.getPath(), userId));\n+        }\n+        job.setInput(inputFiles);\n+      }\n+      if (ListUtils.isNotEmpty(job.getOutput())) {\n+        List<File> outputFiles = new ArrayList<>(job.getOutput().size());\n+        for (File file : job.getOutput()) {\n+          outputFiles.add(getFile(study.getUid(), file.getPath(), userId));\n+        }\n+        job.setOutput(outputFiles);\n+      }\n+      if (job.getOutDir() != null && StringUtils.isNotEmpty(job.getOutDir().getPath())) {\n+        job.setOutDir(getFile(study.getUid(), job.getOutDir().getPath(), userId));\n+        if (job.getOutDir().getType() != File.Type.DIRECTORY) {\n+          throw new CatalogException(\"Unexpected outDir type. Expected \" + File.Type.DIRECTORY);\n         }\n+      }\n+      if (job.getStdout() != null && StringUtils.isNotEmpty(job.getStdout().getPath())) {\n+        job.setStdout(getFile(study.getUid(), job.getStdout().getPath(), userId));\n+      }\n+      if (job.getStderr() != null && StringUtils.isNotEmpty(job.getStderr().getPath())) {\n+        job.setStderr(getFile(study.getUid(), job.getStderr().getPath(), userId));\n+      }\n+\n+      job.setUuid(UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.JOB));\n+      jobDBAdaptor.insert(study.getUid(), job, options);\n+      OpenCGAResult<Job> queryResult = getJob(study.getUid(), job.getUuid(), options);\n+      auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(), study.getUuid(),\n+          auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+\n+      return queryResult;\n+    } catch (CatalogException e) {\n+      auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), \"\", study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n     }\n+  }\n \n-    private void autoCompleteNewJob(Study study, Job job, String token) throws CatalogException {\n-        ParamUtils.checkObj(job, \"Job\");\n+  private void autoCompleteNewJob(Study study, Job job, String token) throws CatalogException {\n+    ParamUtils.checkObj(job, \"Job\");\n \n-        // Auto generate id\n-        if (StringUtils.isEmpty(job.getId())) {\n-            job.setId(job.getTool().getId() + \".\" + TimeUtils.getTime() + \".\" + org.opencb.commons.utils.StringUtils.randomString(6));\n-        }\n-        job.setPriority(ParamUtils.defaultObject(job.getPriority(), Enums.Priority.MEDIUM));\n-        job.setUuid(UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.JOB));\n-        job.setCreationDate(ParamUtils.defaultString(job.getCreationDate(), TimeUtils.getTime()));\n-        job.setRelease(catalogManager.getStudyManager().getCurrentRelease(study));\n+    // Auto generate id\n+    if (StringUtils.isEmpty(job.getId())) {\n+      job.setId(job.getTool().getId() + \".\" + TimeUtils.getTime() + \".\" + org.opencb.commons.utils.StringUtils.randomString(6));\n+    }\n+    job.setPriority(ParamUtils.defaultObject(job.getPriority(), Enums.Priority.MEDIUM));\n+    job.setUuid(UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.JOB));\n+    job.setCreationDate(ParamUtils.defaultString(job.getCreationDate(), TimeUtils.getTime()));\n+    job.setRelease(catalogManager.getStudyManager().getCurrentRelease(study));\n \n-        if (job.getStatus() == null || StringUtils.isEmpty(job.getStatus().getName())) {\n-            job.setStatus(new Enums.ExecutionStatus(Enums.ExecutionStatus.PENDING));\n-        }\n+    if (job.getStatus() == null || StringUtils.isEmpty(job.getStatus().getName())) {\n+      job.setStatus(new Enums.ExecutionStatus(Enums.ExecutionStatus.PENDING));\n+    }\n \n-        // Look for input files\n-        String fileParamSuffix = \"file\";\n-        List<File> inputFiles = new ArrayList<>();\n-        if (job.getParams() != null) {\n-            Map<String, Object> dynamicParams = null;\n-            for (Map.Entry<String, Object> entry : job.getParams().entrySet()) {\n-                // We assume that every variable ending in 'file' corresponds to input files that need to be accessible in catalog\n-                if (entry.getKey().toLowerCase().endsWith(fileParamSuffix)) {\n-                    for (String fileStr : StringUtils.split((String) entry.getValue(), ',')) {\n-                        try {\n-                            // Validate the user has access to the file\n-                            File file = catalogManager.getFileManager().get(study.getFqn(), fileStr,\n-                                    FileManager.INCLUDE_FILE_URI_PATH, token).first();\n-                            inputFiles.add(file);\n-                        } catch (CatalogException e) {\n-                            throw new CatalogException(\"Cannot find file '\" + entry.getValue() + \"' \"\n-                                    + \"from job param '\" + entry.getKey() + \"'; (study = \" + study.getName() + \", token = \" + token + \") :\"\n-                                    + e.getMessage(), e);\n-                        }\n-                    }\n-                } else if (entry.getValue() instanceof Map) {\n-                    if (dynamicParams != null) {\n-                        List<String> dynamicParamKeys = job.getParams()\n-                                .entrySet()\n-                                .stream()\n-                                .filter(e -> e.getValue() instanceof Map)\n-                                .map(Map.Entry::getKey)\n-                                .collect(Collectors.toList());\n-                        throw new CatalogException(\"Found multiple dynamic param maps in job params: \" + dynamicParamKeys);\n-                    }\n-                    // If we have found a map for further dynamic params...\n-                    dynamicParams = (Map<String, Object>) entry.getValue();\n-                }\n+    // Look for input files\n+    String fileParamSuffix = \"file\";\n+    List<File> inputFiles = new ArrayList<>();\n+    if (job.getParams() != null) {\n+      Map<String, Object> dynamicParams = null;\n+      for (Map.Entry<String, Object> entry : job.getParams().entrySet()) {\n+        // We assume that every variable ending in 'file' corresponds to input files that need to be accessible in catalog\n+        if (entry.getKey().toLowerCase().endsWith(fileParamSuffix)) {\n+          for (String fileStr : StringUtils.split((String) entry.getValue(), ',')) {\n+            try {\n+              // Validate the user has access to the file\n+              File file = catalogManager.getFileManager().get(study.getFqn(), fileStr,\n+                  FileManager.INCLUDE_FILE_URI_PATH, token).first();\n+              inputFiles.add(file);\n+            } catch (CatalogException e) {\n+              throw new CatalogException(\"Cannot find file '\" + entry.getValue() + \"' \"\n+                  + \"from job param '\" + entry.getKey() + \"'; (study = \" + study.getName() + \", token = \" + token + \") :\"\n+                  + e.getMessage(), e);\n             }\n-            if (dynamicParams != null) {\n-                // We look for files in the dynamic params\n-                for (Map.Entry<String, Object> entry : dynamicParams.entrySet()) {\n-                    if (entry.getKey().toLowerCase().endsWith(fileParamSuffix)) {\n-                        // We assume that every variable ending in 'file' corresponds to input files that need to be accessible in catalog\n-                        try {\n-                            // Validate the user has access to the file\n-                            File file = catalogManager.getFileManager().get(study.getFqn(), (String) entry.getValue(),\n-                                    FileManager.INCLUDE_FILE_URI_PATH, token).first();\n-                            inputFiles.add(file);\n-                        } catch (CatalogException e) {\n-                            throw new CatalogException(\"Cannot find file '\" + entry.getValue() + \"' from variable '\" + entry.getKey()\n-                                    + \"'. \", e);\n-                        }\n-                    }\n-                }\n+          }\n+        } else if (entry.getValue() instanceof Map) {\n+          if (dynamicParams != null) {\n+            List<String> dynamicParamKeys = job.getParams()\n+                .entrySet()\n+                .stream()\n+                .filter(e -> e.getValue() instanceof Map)\n+                .map(Map.Entry::getKey)\n+                .collect(Collectors.toList());\n+            throw new CatalogException(\"Found multiple dynamic param maps in job params: \" + dynamicParamKeys);\n+          }\n+          // If we have found a map for further dynamic params...\n+          dynamicParams = (Map<String, Object>) entry.getValue();\n+        }\n+      }\n+      if (dynamicParams != null) {\n+        // We look for files in the dynamic params\n+        for (Map.Entry<String, Object> entry : dynamicParams.entrySet()) {\n+          if (entry.getKey().toLowerCase().endsWith(fileParamSuffix)) {\n+            // We assume that every variable ending in 'file' corresponds to input files that need to be accessible in catalog\n+            try {\n+              // Validate the user has access to the file\n+              File file = catalogManager.getFileManager().get(study.getFqn(), (String) entry.getValue(),\n+                  FileManager.INCLUDE_FILE_URI_PATH, token).first();\n+              inputFiles.add(file);\n+            } catch (CatalogException e) {\n+              throw new CatalogException(\"Cannot find file '\" + entry.getValue() + \"' from variable '\" + entry.getKey()\n+                  + \"'. \", e);\n             }\n+          }\n         }\n-        job.setInput(inputFiles);\n-\n-        job.setAttributes(ParamUtils.defaultObject(job.getAttributes(), HashMap::new));\n-    }\n-\n-    public OpenCGAResult<Job> submit(String studyStr, String toolId, Enums.Priority priority, Map<String, Object> params, String token)\n-            throws CatalogException {\n-        return submit(studyStr, toolId, priority, params, null, null, null, null, token);\n+      }\n     }\n+    job.setInput(inputFiles);\n \n-    public OpenCGAResult<Job> submit(String studyStr, String toolId, Enums.Priority priority, Map<String, Object> params, String jobId,\n-                                     String jobName, String jobDescription, List<String> jobTags, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyStr, userId);\n+    job.setAttributes(ParamUtils.defaultObject(job.getAttributes(), HashMap::new));\n+  }\n \n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyStr)\n-                .append(\"toolId\", toolId)\n-                .append(\"priority\", priority)\n-                .append(\"params\", params)\n-                .append(\"token\", token);\n+  public OpenCGAResult<Job> submit(String studyStr, String toolId, Enums.Priority priority, Map<String, Object> params, String token)\n+      throws CatalogException {\n+    return submit(studyStr, toolId, priority, params, null, null, null, null, token);\n+  }\n \n-        Job job = new Job();\n-        job.setId(jobId);\n-        job.setName(jobName);\n-        job.setDescription(jobDescription);\n-        job.setTool(new ToolInfo().setId(toolId));\n-        job.setTags(jobTags);\n+  public OpenCGAResult<Job> submit(String studyStr, String toolId, Enums.Priority priority, Map<String, Object> params, String jobId,\n+                                   String jobName, String jobDescription, List<String> jobTags, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyStr, userId);\n \n-        try {\n-            authorizationManager.checkStudyPermission(study.getUid(), userId, StudyAclEntry.StudyPermissions.EXECUTION);\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyStr)\n+        .append(\"toolId\", toolId)\n+        .append(\"priority\", priority)\n+        .append(\"params\", params)\n+        .append(\"token\", token);\n \n-            job.setStudyUuid(study.getUuid());\n-            job.setUserId(userId);\n-            job.setParams(params);\n-            job.setPriority(priority);\n+    Job job = new Job();\n+    job.setId(jobId);\n+    job.setName(jobName);\n+    job.setDescription(jobDescription);\n+    job.setTool(new ToolInfo().setId(toolId));\n+    job.setTags(jobTags);\n \n-            autoCompleteNewJob(study, job, token);\n+    try {\n+      authorizationManager.checkStudyPermission(study.getUid(), userId, StudyAclEntry.StudyPermissions.EXECUTION);\n \n-            jobDBAdaptor.insert(study.getUid(), job, new QueryOptions());\n-            OpenCGAResult<Job> jobResult = jobDBAdaptor.get(job.getUid(), new QueryOptions());\n+      job.setStudyUuid(study.getUuid());\n+      job.setUserId(userId);\n+      job.setParams(params);\n+      job.setPriority(priority);\n \n-            auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), \"\", study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      autoCompleteNewJob(study, job, token);\n \n-            return jobResult;\n-        } catch (CatalogException e) {\n-            auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), \"\", study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      jobDBAdaptor.insert(study.getUid(), job, new QueryOptions());\n+      OpenCGAResult<Job> jobResult = jobDBAdaptor.get(job.getUid(), new QueryOptions());\n \n-            job.setStatus(new Enums.ExecutionStatus(Enums.ExecutionStatus.ABORTED));\n-            jobDBAdaptor.insert(study.getUid(), job, new QueryOptions());\n+      auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), \"\", study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n \n-            throw e;\n-        }\n-    }\n+      return jobResult;\n+    } catch (CatalogException e) {\n+      auditManager.auditCreate(userId, Enums.Resource.JOB, job.getId(), \"\", study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n \n-    public OpenCGAResult count(Query query, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        authorizationManager.checkIsAdmin(userId);\n+      job.setStatus(new Enums.ExecutionStatus(Enums.ExecutionStatus.ABORTED));\n+      jobDBAdaptor.insert(study.getUid(), job, new QueryOptions());\n \n-        return jobDBAdaptor.count(query);\n+      throw e;\n     }\n-\n-    public DBIterator<Job> iterator(Query query, QueryOptions options, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        authorizationManager.checkIsAdmin(userId);\n-\n-        return jobDBAdaptor.iterator(query, options);\n+  }\n+\n+  public OpenCGAResult count(Query query, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    authorizationManager.checkIsAdmin(userId);\n+\n+    return jobDBAdaptor.count(query);\n+  }\n+\n+  public DBIterator<Job> iterator(Query query, QueryOptions options, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    authorizationManager.checkIsAdmin(userId);\n+\n+    return jobDBAdaptor.iterator(query, options);\n+  }\n+\n+  public OpenCGAResult<Job> get(long jobId, QueryOptions options, String sessionId) throws CatalogException {\n+    return get(null, String.valueOf(jobId), options, sessionId);\n+  }\n+\n+  public OpenCGAResult<Job> get(List<String> jobIds, QueryOptions options, boolean ignoreException, String sessionId)\n+      throws CatalogException {\n+    return get(null, jobIds, options, ignoreException, sessionId);\n+  }\n+\n+  private void fixQueryObject(Study study, Query query, String userId) throws CatalogException {\n+    if (query.containsKey(\"inputFiles\")) {\n+      List<File> inputFiles = catalogManager.getFileManager().internalGet(study.getUid(), query.getAsStringList(\"inputFiles\"),\n+          FileManager.INCLUDE_FILE_IDS, userId, true).getResults();\n+      if (ListUtils.isNotEmpty(inputFiles)) {\n+        query.put(JobDBAdaptor.QueryParams.INPUT_UID.key(), inputFiles.stream().map(File::getUid).collect(Collectors.toList()));\n+      } else {\n+        // We add 0 so the query returns no results\n+        query.put(JobDBAdaptor.QueryParams.INPUT_UID.key(), 0);\n+      }\n+      query.remove(\"inputFiles\");\n     }\n-\n-    public OpenCGAResult<Job> get(long jobId, QueryOptions options, String sessionId) throws CatalogException {\n-        return get(null, String.valueOf(jobId), options, sessionId);\n+    if (query.containsKey(\"outputFiles\")) {\n+      List<File> inputFiles = catalogManager.getFileManager().internalGet(study.getUid(), query.getAsStringList(\"outputFiles\"),\n+          FileManager.INCLUDE_FILE_IDS, userId, true).getResults();\n+      if (ListUtils.isNotEmpty(inputFiles)) {\n+        query.put(JobDBAdaptor.QueryParams.OUTPUT_UID.key(), inputFiles.stream().map(File::getUid).collect(Collectors.toList()));\n+      } else {\n+        // We add 0 so the query returns no results\n+        query.put(JobDBAdaptor.QueryParams.OUTPUT_UID.key(), 0);\n+      }\n+      query.remove(\"outputFiles\");\n     }\n-\n-    public OpenCGAResult<Job> get(List<String> jobIds, QueryOptions options, boolean ignoreException, String sessionId)\n-            throws CatalogException {\n-        return get(null, jobIds, options, ignoreException, sessionId);\n+  }\n+\n+  @Override\n+  public OpenCGAResult<Job> search(String studyId, Query query, QueryOptions options, String token) throws CatalogException {\n+    query = ParamUtils.defaultObject(query, Query::new);\n+    options = ParamUtils.defaultObject(options, QueryOptions::new);\n+\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"studyId\", studyId)\n+        .append(\"query\", new Query(query))\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n+    try {\n+      fixQueryObject(study, query, userId);\n+      query.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+\n+      Future<OpenCGAResult<Long>> countFuture = null;\n+      if (options.getBoolean(QueryOptions.COUNT)) {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        Query finalQuery = query;\n+        countFuture = executor.submit(() -> jobDBAdaptor.count(study.getUid(), finalQuery, userId,\n+            StudyAclEntry.StudyPermissions.VIEW_JOBS));\n+      }\n+      OpenCGAResult<Job> queryResult = OpenCGAResult.empty();\n+      if (options.getInt(QueryOptions.LIMIT, DEFAULT_LIMIT) > 0) {\n+        queryResult = jobDBAdaptor.get(study.getUid(), query, options, userId);\n+      }\n+      if (countFuture != null) {\n+        mergeCount(queryResult, countFuture);\n+      }\n+      auditManager.auditSearch(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+\n+      return queryResult;\n+    } catch (CatalogException e) {\n+      auditManager.auditSearch(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n+    } catch (InterruptedException | ExecutionException e) {\n+      auditManager.auditSearch(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.ERROR, new Error(-1, \"\", e.getMessage())));\n+      throw new CatalogException(\"Unexpected error\", e);\n     }\n+  }\n \n-    private void fixQueryObject(Study study, Query query, String userId) throws CatalogException {\n-        if (query.containsKey(\"inputFiles\")) {\n-            List<File> inputFiles = catalogManager.getFileManager().internalGet(study.getUid(), query.getAsStringList(\"inputFiles\"),\n-                    FileManager.INCLUDE_FILE_IDS, userId, true).getResults();\n-            if (ListUtils.isNotEmpty(inputFiles)) {\n-                query.put(JobDBAdaptor.QueryParams.INPUT_UID.key(), inputFiles.stream().map(File::getUid).collect(Collectors.toList()));\n-            } else {\n-                // We add 0 so the query returns no results\n-                query.put(JobDBAdaptor.QueryParams.INPUT_UID.key(), 0);\n-            }\n-            query.remove(\"inputFiles\");\n-        }\n-        if (query.containsKey(\"outputFiles\")) {\n-            List<File> inputFiles = catalogManager.getFileManager().internalGet(study.getUid(), query.getAsStringList(\"outputFiles\"),\n-                    FileManager.INCLUDE_FILE_IDS, userId, true).getResults();\n-            if (ListUtils.isNotEmpty(inputFiles)) {\n-                query.put(JobDBAdaptor.QueryParams.OUTPUT_UID.key(), inputFiles.stream().map(File::getUid).collect(Collectors.toList()));\n-            } else {\n-                // We add 0 so the query returns no results\n-                query.put(JobDBAdaptor.QueryParams.OUTPUT_UID.key(), 0);\n-            }\n-            query.remove(\"outputFiles\");\n-        }\n-    }\n+  @Override\n+  public DBIterator<Job> iterator(String studyId, Query query, QueryOptions options, String token) throws CatalogException {\n+    query = ParamUtils.defaultObject(query, Query::new);\n+    options = ParamUtils.defaultObject(options, QueryOptions::new);\n \n-    @Override\n-    public OpenCGAResult<Job> search(String studyId, Query query, QueryOptions options, String token) throws CatalogException {\n-        query = ParamUtils.defaultObject(query, Query::new);\n-        options = ParamUtils.defaultObject(options, QueryOptions::new);\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n \n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"studyId\", studyId)\n-                .append(\"query\", new Query(query))\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n-        try {\n-            fixQueryObject(study, query, userId);\n-            query.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n-\n-            Future<OpenCGAResult<Long>> countFuture = null;\n-            if (options.getBoolean(QueryOptions.COUNT)) {\n-                ExecutorService executor = Executors.newSingleThreadExecutor();\n-                Query finalQuery = query;\n-                countFuture = executor.submit(() -> jobDBAdaptor.count(study.getUid(), finalQuery, userId,\n-                        StudyAclEntry.StudyPermissions.VIEW_JOBS));\n-            }\n-            OpenCGAResult<Job> queryResult = OpenCGAResult.empty();\n-            if (options.getInt(QueryOptions.LIMIT, DEFAULT_LIMIT) > 0) {\n-                queryResult = jobDBAdaptor.get(study.getUid(), query, options, userId);\n-            }\n-            if (countFuture != null) {\n-                mergeCount(queryResult, countFuture);\n-            }\n-            auditManager.auditSearch(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-\n-            return queryResult;\n-        } catch (CatalogException e) {\n-            auditManager.auditSearch(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n-        } catch (InterruptedException | ExecutionException e) {\n-            auditManager.auditSearch(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.ERROR, new Error(-1, \"\", e.getMessage())));\n-            throw new CatalogException(\"Unexpected error\", e);\n-        }\n-    }\n+    query.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n \n-    @Override\n-    public DBIterator<Job> iterator(String studyId, Query query, QueryOptions options, String token) throws CatalogException {\n-        query = ParamUtils.defaultObject(query, Query::new);\n-        options = ParamUtils.defaultObject(options, QueryOptions::new);\n+    fixQueryObject(study, query, userId);\n \n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n+    return jobDBAdaptor.iterator(study.getUid(), query, options, userId);\n+  }\n \n-        query.put(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+  @Override\n+  public OpenCGAResult<Job> count(String studyId, Query query, String token) throws CatalogException {\n+    query = ParamUtils.defaultObject(query, Query::new);\n \n-        fixQueryObject(study, query, userId);\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n \n-        return jobDBAdaptor.iterator(study.getUid(), query, options, userId);\n-    }\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"studyId\", studyId)\n+        .append(\"query\", new Query(query))\n+        .append(\"token\", token);\n+    try {\n+      fixQueryObject(study, query, userId);\n \n-    @Override\n-    public OpenCGAResult<Job> count(String studyId, Query query, String token) throws CatalogException {\n-        query = ParamUtils.defaultObject(query, Query::new);\n-\n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"studyId\", studyId)\n-                .append(\"query\", new Query(query))\n-                .append(\"token\", token);\n-        try {\n-            fixQueryObject(study, query, userId);\n-\n-            query.append(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n-            OpenCGAResult<Long> queryResultAux = jobDBAdaptor.count(study.getUid(), query, userId,\n-                    StudyAclEntry.StudyPermissions.VIEW_JOBS);\n-\n-            auditManager.auditCount(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-\n-            return new OpenCGAResult<>(queryResultAux.getTime(), queryResultAux.getEvents(), 0, Collections.emptyList(),\n-                    queryResultAux.getNumMatches());\n-        } catch (CatalogException e) {\n-            auditManager.auditCount(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n-        }\n-    }\n+      query.append(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+      OpenCGAResult<Long> queryResultAux = jobDBAdaptor.count(study.getUid(), query, userId,\n+          StudyAclEntry.StudyPermissions.VIEW_JOBS);\n+\n+      auditManager.auditCount(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n \n-    @Override\n-    public OpenCGAResult delete(String studyStr, List<String> jobIds, ObjectMap params, String token) throws CatalogException {\n-        return delete(studyStr, jobIds, params, false, token);\n+      return new OpenCGAResult<>(queryResultAux.getTime(), queryResultAux.getEvents(), 0, Collections.emptyList(),\n+          queryResultAux.getNumMatches());\n+    } catch (CatalogException e) {\n+      auditManager.auditCount(userId, Enums.Resource.JOB, study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n     }\n+  }\n+\n+  @Override\n+  public OpenCGAResult delete(String studyStr, List<String> jobIds, ObjectMap params, String token) throws CatalogException {\n+    return delete(studyStr, jobIds, params, false, token);\n+  }\n+\n+  public OpenCGAResult delete(String studyStr, List<String> jobIds, ObjectMap params, boolean ignoreException, String token)\n+      throws CatalogException {\n+    String userId = catalogManager.getUserManager().getUserId(token);\n+    Study study = studyManager.resolveId(studyStr, userId);\n+\n+    String operationUuid = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyStr)\n+        .append(\"jobIds\", jobIds)\n+        .append(\"params\", params)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"token\", token);\n+\n+    boolean checkPermissions;\n+    try {\n+      // If the user is the owner or the admin, we won't check if he has permissions for every single entry\n+      checkPermissions = !authorizationManager.isOwnerOrAdmin(study.getUid(), userId);\n+    } catch (CatalogException e) {\n+      auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(),\n+          auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n+    }\n+\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    for (String id : jobIds) {\n+      String jobId = id;\n+      String jobUuid = \"\";\n \n-    public OpenCGAResult delete(String studyStr, List<String> jobIds, ObjectMap params, boolean ignoreException, String token)\n-            throws CatalogException {\n-        String userId = catalogManager.getUserManager().getUserId(token);\n-        Study study = studyManager.resolveId(studyStr, userId);\n-\n-        String operationUuid = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyStr)\n-                .append(\"jobIds\", jobIds)\n-                .append(\"params\", params)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"token\", token);\n-\n-        boolean checkPermissions;\n-        try {\n-            // If the user is the owner or the admin, we won't check if he has permissions for every single entry\n-            checkPermissions = !authorizationManager.isOwnerOrAdmin(study.getUid(), userId);\n-        } catch (CatalogException e) {\n-            auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(),\n-                    auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n+      try {\n+        OpenCGAResult<Job> internalResult = internalGet(study.getUid(), id, INCLUDE_JOB_IDS, userId);\n+        if (internalResult.getNumResults() == 0) {\n+          throw new CatalogException(\"Job '\" + id + \"' not found\");\n         }\n \n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        for (String id : jobIds) {\n-            String jobId = id;\n-            String jobUuid = \"\";\n+        Job job = internalResult.first();\n+        // We set the proper values for the audit\n+        jobId = job.getId();\n+        jobUuid = job.getUuid();\n \n-            try {\n-                OpenCGAResult<Job> internalResult = internalGet(study.getUid(), id, INCLUDE_JOB_IDS, userId);\n-                if (internalResult.getNumResults() == 0) {\n-                    throw new CatalogException(\"Job '\" + id + \"' not found\");\n-                }\n+        if (checkPermissions) {\n+          authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.DELETE);\n+        }\n \n-                Job job = internalResult.first();\n-                // We set the proper values for the audit\n-                jobId = job.getId();\n-                jobUuid = job.getUuid();\n+        // Check if the job can be deleted\n+        checkJobCanBeDeleted(job);\n \n-                if (checkPermissions) {\n-                    authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.DELETE);\n-                }\n+        result.append(jobDBAdaptor.delete(job));\n \n-                // Check if the job can be deleted\n-                checkJobCanBeDeleted(job);\n+        auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      } catch (CatalogException e) {\n+        Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n+        result.getEvents().add(event);\n \n-                result.append(jobDBAdaptor.delete(job));\n+        logger.error(\"Cannot delete job {}: {}\", jobId, e.getMessage(), e);\n+        auditManager.auditDelete(operationUuid, userId, Enums.Resource.FAMILY, jobId, jobUuid,\n+            study.getId(), study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      }\n+    }\n \n-                auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-            } catch (CatalogException e) {\n-                Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n-                result.getEvents().add(event);\n+    return endResult(result, ignoreException);\n+  }\n \n-                logger.error(\"Cannot delete job {}: {}\", jobId, e.getMessage(), e);\n-                auditManager.auditDelete(operationUuid, userId, Enums.Resource.FAMILY, jobId, jobUuid,\n-                        study.getId(), study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            }\n-        }\n+  @Override\n+  public OpenCGAResult delete(String studyId, Query query, ObjectMap params, String token) throws CatalogException {\n+    return delete(studyId, query, params, false, token);\n+  }\n \n-        return endResult(result, ignoreException);\n-    }\n+  public OpenCGAResult delete(String studyId, Query query, ObjectMap params, boolean ignoreException, String token)\n+      throws CatalogException {\n+    Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n+    OpenCGAResult result = OpenCGAResult.empty();\n \n-    @Override\n-    public OpenCGAResult delete(String studyId, Query query, ObjectMap params, String token) throws CatalogException {\n-        return delete(studyId, query, params, false, token);\n-    }\n+    String userId = catalogManager.getUserManager().getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n \n-    public OpenCGAResult delete(String studyId, Query query, ObjectMap params, boolean ignoreException, String token)\n-            throws CatalogException {\n-        Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n-        OpenCGAResult result = OpenCGAResult.empty();\n+    String operationUuid = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n \n-        String userId = catalogManager.getUserManager().getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyId)\n+        .append(\"query\", new Query(query))\n+        .append(\"params\", params)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"token\", token);\n \n-        String operationUuid = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+    // If the user is the owner or the admin, we won't check if he has permissions for every single entry\n+    boolean checkPermissions;\n \n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyId)\n-                .append(\"query\", new Query(query))\n-                .append(\"params\", params)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"token\", token);\n+    // We try to get an iterator containing all the jobs to be deleted\n+    DBIterator<Job> iterator;\n+    try {\n+      fixQueryObject(study, query, userId);\n+      finalQuery.append(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n \n-        // If the user is the owner or the admin, we won't check if he has permissions for every single entry\n-        boolean checkPermissions;\n+      iterator = jobDBAdaptor.iterator(study.getUid(), finalQuery, INCLUDE_JOB_IDS, userId);\n \n-        // We try to get an iterator containing all the jobs to be deleted\n-        DBIterator<Job> iterator;\n-        try {\n-            fixQueryObject(study, query, userId);\n-            finalQuery.append(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+      // If the user is the owner or the admin, we won't check if he has permissions for every single entry\n+      checkPermissions = !authorizationManager.isOwnerOrAdmin(study.getUid(), userId);\n+    } catch (CatalogException e) {\n+      auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(), auditParams,\n+          new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n+    }\n \n-            iterator = jobDBAdaptor.iterator(study.getUid(), finalQuery, INCLUDE_JOB_IDS, userId);\n+    while (iterator.hasNext()) {\n+      Job job = iterator.next();\n \n-            // If the user is the owner or the admin, we won't check if he has permissions for every single entry\n-            checkPermissions = !authorizationManager.isOwnerOrAdmin(study.getUid(), userId);\n-        } catch (CatalogException e) {\n-            auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(), auditParams,\n-                    new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n+      try {\n+        if (checkPermissions) {\n+          authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.DELETE);\n         }\n \n-        while (iterator.hasNext()) {\n-            Job job = iterator.next();\n-\n-            try {\n-                if (checkPermissions) {\n-                    authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.DELETE);\n-                }\n-\n-                // Check if the job can be deleted\n-                checkJobCanBeDeleted(job);\n+        // Check if the job can be deleted\n+        checkJobCanBeDeleted(job);\n \n-                result.append(jobDBAdaptor.delete(job));\n+        result.append(jobDBAdaptor.delete(job));\n \n-                auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-            } catch (CatalogException e) {\n-                String errorMsg = \"Cannot delete job \" + job.getId() + \": \" + e.getMessage();\n+        auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      } catch (CatalogException e) {\n+        String errorMsg = \"Cannot delete job \" + job.getId() + \": \" + e.getMessage();\n \n-                Event event = new Event(Event.Type.ERROR, job.getId(), e.getMessage());\n-                result.getEvents().add(event);\n+        Event event = new Event(Event.Type.ERROR, job.getId(), e.getMessage());\n+        result.getEvents().add(event);\n \n-                logger.error(errorMsg, e);\n-                auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            }\n-        }\n-\n-        return endResult(result, ignoreException);\n+        logger.error(errorMsg, e);\n+        auditManager.auditDelete(operationUuid, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      }\n     }\n \n-    private void checkJobCanBeDeleted(Job job) throws CatalogException {\n-        switch (job.getStatus().getName()) {\n-            case Enums.ExecutionStatus.DELETED:\n-                throw new CatalogException(\"Job already deleted.\");\n-            case Enums.ExecutionStatus.PENDING:\n-            case Enums.ExecutionStatus.RUNNING:\n-            case Enums.ExecutionStatus.QUEUED:\n-                throw new CatalogException(\"The status of the job is \" + job.getStatus().getName()\n-                        + \". Please, stop the job before deleting it.\");\n-            default:\n-                break;\n-        }\n+    return endResult(result, ignoreException);\n+  }\n+\n+  private void checkJobCanBeDeleted(Job job) throws CatalogException {\n+    switch (job.getStatus().getName()) {\n+      case Enums.ExecutionStatus.DELETED:\n+        throw new CatalogException(\"Job already deleted.\");\n+      case Enums.ExecutionStatus.PENDING:\n+      case Enums.ExecutionStatus.RUNNING:\n+      case Enums.ExecutionStatus.QUEUED:\n+        throw new CatalogException(\"The status of the job is \" + job.getStatus().getName()\n+            + \". Please, stop the job before deleting it.\");\n+      default:\n+        break;\n+    }\n+  }\n+\n+  public OpenCGAResult<Job> update(String studyStr, Query query, JobUpdateParams updateParams, QueryOptions options, String token)\n+      throws CatalogException {\n+    return update(studyStr, query, updateParams, false, options, token);\n+  }\n+\n+  public OpenCGAResult<Job> update(String studyStr, Query query, JobUpdateParams updateParams, boolean ignoreException,\n+                                   QueryOptions options, String token) throws CatalogException {\n+    Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n+\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyStr, userId);\n+\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyStr)\n+        .append(\"query\", query)\n+        .append(\"updateParams\", updateParams != null ? updateParams.getUpdateMap() : null)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n+\n+    DBIterator<Job> iterator;\n+    try {\n+      fixQueryObject(study, finalQuery, userId);\n+      finalQuery.append(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+\n+      iterator = jobDBAdaptor.iterator(study.getUid(), finalQuery, INCLUDE_JOB_IDS, userId);\n+    } catch (CatalogException e) {\n+      auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(),\n+          auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n     }\n \n-    public OpenCGAResult<Job> update(String studyStr, Query query, JobUpdateParams updateParams, QueryOptions options, String token)\n-            throws CatalogException {\n-        return update(studyStr, query, updateParams, false, options, token);\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    while (iterator.hasNext()) {\n+      Job job = iterator.next();\n+      try {\n+        OpenCGAResult<Job> updateResult = update(study, job, updateParams, options, userId);\n+        result.append(updateResult);\n+\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      } catch (CatalogException e) {\n+        Event event = new Event(Event.Type.ERROR, job.getId(), e.getMessage());\n+        result.getEvents().add(event);\n+\n+        logger.error(\"Could not update job {}: {}\", job.getId(), e.getMessage(), e);\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      }\n     }\n \n-    public OpenCGAResult<Job> update(String studyStr, Query query, JobUpdateParams updateParams, boolean ignoreException,\n-                                        QueryOptions options, String token) throws CatalogException {\n-        Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n-\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyStr, userId);\n-\n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyStr)\n-                .append(\"query\", query)\n-                .append(\"updateParams\", updateParams != null ? updateParams.getUpdateMap() : null)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n-\n-        DBIterator<Job> iterator;\n-        try {\n-            fixQueryObject(study, finalQuery, userId);\n-            finalQuery.append(JobDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n-\n-            iterator = jobDBAdaptor.iterator(study.getUid(), finalQuery, INCLUDE_JOB_IDS, userId);\n-        } catch (CatalogException e) {\n-            auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(),\n-                    auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n+    return endResult(result, ignoreException);\n+  }\n+\n+  /**\n+   * Update Job from catalog.\n+   *\n+   * @param studyStr     Study id in string format. Could be one of [id|user@aliasProject:aliasStudy|aliasProject:aliasStudy|aliasStudy].\n+   * @param jobIds       List of Job ids. Could be either the id or uuid.\n+   * @param updateParams Data model filled only with the parameters to be updated.\n+   * @param options      QueryOptions object.\n+   * @param token        Session id of the user logged in.\n+   * @return A OpenCGAResult with the objects updated.\n+   * @throws CatalogException if there is any internal error, the user does not have proper permissions or a parameter passed does not\n+   *                          exist or is not allowed to be updated.\n+   */\n+  public OpenCGAResult<Job> update(String studyStr, List<String> jobIds, JobUpdateParams updateParams, QueryOptions options,\n+                                   String token) throws CatalogException {\n+    return update(studyStr, jobIds, updateParams, false, options, token);\n+  }\n+\n+  public OpenCGAResult<Job> update(String studyStr, List<String> jobIds, JobUpdateParams updateParams, boolean ignoreException,\n+                                   QueryOptions options, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyStr, userId);\n+\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyStr)\n+        .append(\"jobIds\", jobIds)\n+        .append(\"updateParams\", updateParams != null ? updateParams.getUpdateMap() : null)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n+\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    for (String id : jobIds) {\n+      String jobId = id;\n+      String jobUuid = \"\";\n+\n+      try {\n+        OpenCGAResult<Job> internalResult = internalGet(study.getUid(), id, INCLUDE_JOB_IDS, userId);\n+        if (internalResult.getNumResults() == 0) {\n+          throw new CatalogException(\"Job '\" + id + \"' not found\");\n         }\n+        Job job = internalResult.first();\n \n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        while (iterator.hasNext()) {\n-            Job job = iterator.next();\n-            try {\n-                OpenCGAResult<Job> updateResult = update(study, job, updateParams, options, userId);\n-                result.append(updateResult);\n+        // We set the proper values for the audit\n+        jobId = job.getId();\n+        jobUuid = job.getUuid();\n \n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-            } catch (CatalogException e) {\n-                Event event = new Event(Event.Type.ERROR, job.getId(), e.getMessage());\n-                result.getEvents().add(event);\n+        OpenCGAResult<Job> updateResult = update(study, job, updateParams, options, userId);\n+        result.append(updateResult);\n \n-                logger.error(\"Could not update job {}: {}\", job.getId(), e.getMessage(), e);\n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            }\n-        }\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      } catch (CatalogException e) {\n+        Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n+        result.getEvents().add(event);\n \n-        return endResult(result, ignoreException);\n+        logger.error(\"Could not update job {}: {}\", jobId, e.getMessage(), e);\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      }\n     }\n-\n-    /**\n-     * Update Job from catalog.\n-     *\n-     * @param studyStr   Study id in string format. Could be one of [id|user@aliasProject:aliasStudy|aliasProject:aliasStudy|aliasStudy].\n-     * @param jobIds  List of Job ids. Could be either the id or uuid.\n-     * @param updateParams Data model filled only with the parameters to be updated.\n-     * @param options      QueryOptions object.\n-     * @param token  Session id of the user logged in.\n-     * @return A OpenCGAResult with the objects updated.\n-     * @throws CatalogException if there is any internal error, the user does not have proper permissions or a parameter passed does not\n-     *                          exist or is not allowed to be updated.\n-     */\n-    public OpenCGAResult<Job> update(String studyStr, List<String> jobIds, JobUpdateParams updateParams, QueryOptions options,\n-                                     String token) throws CatalogException {\n-        return update(studyStr, jobIds, updateParams, false, options, token);\n+    return endResult(result, ignoreException);\n+  }\n+\n+  public OpenCGAResult<Job> update(String studyStr, String jobId, JobUpdateParams updateParams, QueryOptions options, String token)\n+      throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyStr, userId);\n+\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyStr)\n+        .append(\"jobId\", jobId)\n+        .append(\"updateParams\", updateParams != null ? updateParams.getUpdateMap() : null)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n+\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    String jobUuid = \"\";\n+    try {\n+      OpenCGAResult<Job> internalResult = internalGet(study.getUid(), jobId, INCLUDE_JOB_IDS, userId);\n+      if (internalResult.getNumResults() == 0) {\n+        throw new CatalogException(\"Job '\" + jobId + \"' not found\");\n+      }\n+      Job job = internalResult.first();\n+\n+      // We set the proper values for the audit\n+      jobId = job.getId();\n+      jobUuid = job.getUuid();\n+\n+      OpenCGAResult updateResult = update(study, job, updateParams, options, userId);\n+      result.append(updateResult);\n+\n+      auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+          study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+    } catch (CatalogException e) {\n+      Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n+      result.getEvents().add(event);\n+\n+      logger.error(\"Could not update job {}: {}\", jobId, e.getMessage(), e);\n+      auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n+          study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n     }\n \n-    public OpenCGAResult<Job> update(String studyStr, List<String> jobIds, JobUpdateParams updateParams, boolean ignoreException,\n-                                        QueryOptions options, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyStr, userId);\n-\n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyStr)\n-                .append(\"jobIds\", jobIds)\n-                .append(\"updateParams\", updateParams != null ? updateParams.getUpdateMap() : null)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n+    return result;\n+  }\n \n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        for (String id : jobIds) {\n-            String jobId = id;\n-            String jobUuid = \"\";\n-\n-            try {\n-                OpenCGAResult<Job> internalResult = internalGet(study.getUid(), id, INCLUDE_JOB_IDS, userId);\n-                if (internalResult.getNumResults() == 0) {\n-                    throw new CatalogException(\"Job '\" + id + \"' not found\");\n-                }\n-                Job job = internalResult.first();\n-\n-                // We set the proper values for the audit\n-                jobId = job.getId();\n-                jobUuid = job.getUuid();\n-\n-                OpenCGAResult<Job> updateResult = update(study, job, updateParams, options, userId);\n-                result.append(updateResult);\n-\n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-            } catch (CatalogException e) {\n-                Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n-                result.getEvents().add(event);\n-\n-                logger.error(\"Could not update job {}: {}\", jobId, e.getMessage(), e);\n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            }\n-        }\n-        return endResult(result, ignoreException);\n+  private OpenCGAResult<Job> update(Study study, Job job, JobUpdateParams updateParams, QueryOptions options, String userId)\n+      throws CatalogException {\n+    if (updateParams == null) {\n+      throw new CatalogException(\"Missing parameters to update\");\n     }\n-\n-    public OpenCGAResult<Job> update(String studyStr, String jobId, JobUpdateParams updateParams, QueryOptions options, String token)\n-            throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyStr, userId);\n-\n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyStr)\n-                .append(\"jobId\", jobId)\n-                .append(\"updateParams\", updateParams != null ? updateParams.getUpdateMap() : null)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n-\n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        String jobUuid = \"\";\n-        try {\n-            OpenCGAResult<Job> internalResult = internalGet(study.getUid(), jobId, INCLUDE_JOB_IDS, userId);\n-            if (internalResult.getNumResults() == 0) {\n-                throw new CatalogException(\"Job '\" + jobId + \"' not found\");\n-            }\n-            Job job = internalResult.first();\n-\n-            // We set the proper values for the audit\n-            jobId = job.getId();\n-            jobUuid = job.getUuid();\n-\n-            OpenCGAResult updateResult = update(study, job, updateParams, options, userId);\n-            result.append(updateResult);\n-\n-            auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                    study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-        } catch (CatalogException e) {\n-            Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n-            result.getEvents().add(event);\n-\n-            logger.error(\"Could not update job {}: {}\", jobId, e.getMessage(), e);\n-            auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n-                    study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n-        }\n-\n-        return result;\n+    if (updateParams.getUpdateMap().isEmpty()) {\n+      throw new CatalogException(\"Missing parameters to update\");\n     }\n \n-    private OpenCGAResult<Job> update(Study study, Job job, JobUpdateParams updateParams, QueryOptions options, String userId)\n-            throws CatalogException {\n-        if (updateParams == null) {\n-            throw new CatalogException(\"Missing parameters to update\");\n-        }\n-        if (updateParams.getUpdateMap().isEmpty()) {\n-            throw new CatalogException(\"Missing parameters to update\");\n-        }\n-\n-        options = ParamUtils.defaultObject(options, QueryOptions::new);\n-        authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n+    options = ParamUtils.defaultObject(options, QueryOptions::new);\n+    authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n \n //        if (StringUtils.isNotEmpty(updateParams.getId())) {\n //            ParamUtils.checkAlias(updateParams.getId(), JobDBAdaptor.QueryParams.ID.key());\n@@ -926,195 +926,195 @@ public class JobManager extends ResourceManager<Job> {\n //            updateParams.setErrorLog(getFile(study.getUid(), updateParams.getErrorLog().getPath(), userId));\n //        }\n \n-        return jobDBAdaptor.update(job.getUid(), updateParams.getUpdateMap(), options);\n-    }\n-\n-    private File getFile(long studyUid, String path, String userId) throws CatalogException {\n-        if (StringUtils.isEmpty(path)) {\n-            throw new CatalogException(\"Missing file path\");\n-        }\n+    return jobDBAdaptor.update(job.getUid(), updateParams.getUpdateMap(), options);\n+  }\n \n-        OpenCGAResult<File> fileResult = catalogManager.getFileManager().internalGet(studyUid, path, FileManager.INCLUDE_FILE_URI_PATH,\n-                userId);\n-        if (fileResult.getNumResults() == 0) {\n-            throw new CatalogException(\"File/Folder '\" + path + \"' not found\");\n-        }\n-        return fileResult.first();\n+  private File getFile(long studyUid, String path, String userId) throws CatalogException {\n+    if (StringUtils.isEmpty(path)) {\n+      throw new CatalogException(\"Missing file path\");\n     }\n \n-    public OpenCGAResult<Job> update(String studyId, Query query, ObjectMap parameters, QueryOptions options, String token)\n-            throws CatalogException {\n-        return update(studyId, query, parameters, false, options, token);\n+    OpenCGAResult<File> fileResult = catalogManager.getFileManager().internalGet(studyUid, path, FileManager.INCLUDE_FILE_URI_PATH,\n+        userId);\n+    if (fileResult.getNumResults() == 0) {\n+      throw new CatalogException(\"File/Folder '\" + path + \"' not found\");\n+    }\n+    return fileResult.first();\n+  }\n+\n+  public OpenCGAResult<Job> update(String studyId, Query query, ObjectMap parameters, QueryOptions options, String token)\n+      throws CatalogException {\n+    return update(studyId, query, parameters, false, options, token);\n+  }\n+\n+  public OpenCGAResult<Job> update(String studyId, Query query, ObjectMap parameters, boolean ignoreException, QueryOptions options,\n+                                   String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyId, userId);\n+\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyId)\n+        .append(\"query\", query)\n+        .append(\"parameters\", parameters)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n+\n+    ParamUtils.checkObj(parameters, \"parameters\");\n+\n+    Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n+\n+    DBIterator<Job> iterator;\n+    try {\n+      fixQueryObject(study, finalQuery, token);\n+      finalQuery.append(FamilyDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+\n+      iterator = jobDBAdaptor.iterator(study.getUid(), finalQuery, INCLUDE_JOB_IDS, userId);\n+    } catch (CatalogException e) {\n+      auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(),\n+          auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n     }\n \n-    public OpenCGAResult<Job> update(String studyId, Query query, ObjectMap parameters, boolean ignoreException, QueryOptions options,\n-                                     String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyId, userId);\n-\n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyId)\n-                .append(\"query\", query)\n-                .append(\"parameters\", parameters)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n-\n-        ParamUtils.checkObj(parameters, \"parameters\");\n-\n-        Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n-\n-        DBIterator<Job> iterator;\n-        try {\n-            fixQueryObject(study, finalQuery, token);\n-            finalQuery.append(FamilyDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n-\n-            iterator = jobDBAdaptor.iterator(study.getUid(), finalQuery, INCLUDE_JOB_IDS, userId);\n-        } catch (CatalogException e) {\n-            auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, \"\", \"\", study.getId(), study.getUuid(),\n-                    auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n-        }\n-\n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        while (iterator.hasNext()) {\n-            Job job = iterator.next();\n-            try {\n-                options = ParamUtils.defaultObject(options, QueryOptions::new);\n-\n-                authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    while (iterator.hasNext()) {\n+      Job job = iterator.next();\n+      try {\n+        options = ParamUtils.defaultObject(options, QueryOptions::new);\n \n-                OpenCGAResult updateResult = jobDBAdaptor.update(job.getUid(), parameters, options);\n-                result.append(updateResult);\n+        authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n \n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-            } catch (CatalogException e) {\n-                Event event = new Event(Event.Type.ERROR, job.getId(), e.getMessage());\n-                result.getEvents().add(event);\n+        OpenCGAResult updateResult = jobDBAdaptor.update(job.getUid(), parameters, options);\n+        result.append(updateResult);\n \n-                logger.error(\"Cannot update job {}: {}\", job.getId(), e.getMessage());\n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            }\n-        }\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      } catch (CatalogException e) {\n+        Event event = new Event(Event.Type.ERROR, job.getId(), e.getMessage());\n+        result.getEvents().add(event);\n \n-        return endResult(result, ignoreException);\n+        logger.error(\"Cannot update job {}: {}\", job.getId(), e.getMessage());\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      }\n     }\n \n-    public OpenCGAResult<Job> update(String studyId, String jobId, ObjectMap parameters, QueryOptions options, String token)\n-            throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyId, userId);\n+    return endResult(result, ignoreException);\n+  }\n \n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+  public OpenCGAResult<Job> update(String studyId, String jobId, ObjectMap parameters, QueryOptions options, String token)\n+      throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyId, userId);\n \n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyId)\n-                .append(\"jobId\", jobId)\n-                .append(\"parameters\", parameters)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n \n-        ParamUtils.checkObj(parameters, \"parameters\");\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyId)\n+        .append(\"jobId\", jobId)\n+        .append(\"parameters\", parameters)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n \n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        String jobUuid = \"\";\n-        try {\n-            OpenCGAResult<Job> internalResult = internalGet(study.getUid(), jobId, QueryOptions.empty(), userId);\n-            if (internalResult.getNumResults() == 0) {\n-                throw new CatalogException(\"Job '\" + jobId + \"' not found\");\n-            }\n-            Job job = internalResult.first();\n+    ParamUtils.checkObj(parameters, \"parameters\");\n \n-            // We set the proper values for the audit\n-            jobId = job.getId();\n-            jobUuid = job.getUuid();\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    String jobUuid = \"\";\n+    try {\n+      OpenCGAResult<Job> internalResult = internalGet(study.getUid(), jobId, QueryOptions.empty(), userId);\n+      if (internalResult.getNumResults() == 0) {\n+        throw new CatalogException(\"Job '\" + jobId + \"' not found\");\n+      }\n+      Job job = internalResult.first();\n \n-            options = ParamUtils.defaultObject(options, QueryOptions::new);\n+      // We set the proper values for the audit\n+      jobId = job.getId();\n+      jobUuid = job.getUuid();\n \n-            authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n+      options = ParamUtils.defaultObject(options, QueryOptions::new);\n \n-            OpenCGAResult updateResult = jobDBAdaptor.update(job.getUid(), parameters, options);\n-            result.append(updateResult);\n+      authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n \n-            auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                    study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-        } catch (CatalogException e) {\n-            Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n-            result.getEvents().add(event);\n+      OpenCGAResult updateResult = jobDBAdaptor.update(job.getUid(), parameters, options);\n+      result.append(updateResult);\n \n-            logger.error(\"Cannot update job {}: {}\", jobId, e.getMessage());\n-            auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n-                    study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            throw e;\n-        }\n+      auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+          study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+    } catch (CatalogException e) {\n+      Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n+      result.getEvents().add(event);\n \n-        return result;\n+      logger.error(\"Cannot update job {}: {}\", jobId, e.getMessage());\n+      auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n+          study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      throw e;\n     }\n \n-    public OpenCGAResult<Job> update(String studyId, List<String> jobIds, ObjectMap parameters, QueryOptions options, String token)\n-            throws CatalogException {\n-        return update(studyId, jobIds, parameters, false, options, token);\n-    }\n+    return result;\n+  }\n \n-    public OpenCGAResult<Job> update(String studyId, List<String> jobIds, ObjectMap parameters, boolean ignoreException,\n-                                     QueryOptions options, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyId, userId);\n+  public OpenCGAResult<Job> update(String studyId, List<String> jobIds, ObjectMap parameters, QueryOptions options, String token)\n+      throws CatalogException {\n+    return update(studyId, jobIds, parameters, false, options, token);\n+  }\n \n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+  public OpenCGAResult<Job> update(String studyId, List<String> jobIds, ObjectMap parameters, boolean ignoreException,\n+                                   QueryOptions options, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyId, userId);\n \n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"study\", studyId)\n-                .append(\"jobIds\", jobIds)\n-                .append(\"parameters\", parameters)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"options\", options)\n-                .append(\"token\", token);\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n \n-        ParamUtils.checkObj(parameters, \"parameters\");\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"study\", studyId)\n+        .append(\"jobIds\", jobIds)\n+        .append(\"parameters\", parameters)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"options\", options)\n+        .append(\"token\", token);\n \n-        OpenCGAResult<Job> result = OpenCGAResult.empty();\n-        for (String id : jobIds) {\n-            String jobId = id;\n-            String jobUuid = \"\";\n+    ParamUtils.checkObj(parameters, \"parameters\");\n \n-            try {\n-                OpenCGAResult<Job> internalResult = internalGet(study.getUid(), id, QueryOptions.empty(), userId);\n-                if (internalResult.getNumResults() == 0) {\n-                    throw new CatalogException(\"Job '\" + id + \"' not found\");\n-                }\n-                Job job = internalResult.first();\n+    OpenCGAResult<Job> result = OpenCGAResult.empty();\n+    for (String id : jobIds) {\n+      String jobId = id;\n+      String jobUuid = \"\";\n \n-                // We set the proper values for the audit\n-                jobId = job.getId();\n-                jobUuid = job.getUuid();\n+      try {\n+        OpenCGAResult<Job> internalResult = internalGet(study.getUid(), id, QueryOptions.empty(), userId);\n+        if (internalResult.getNumResults() == 0) {\n+          throw new CatalogException(\"Job '\" + id + \"' not found\");\n+        }\n+        Job job = internalResult.first();\n \n-                options = ParamUtils.defaultObject(options, QueryOptions::new);\n+        // We set the proper values for the audit\n+        jobId = job.getId();\n+        jobUuid = job.getUuid();\n \n-                authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n+        options = ParamUtils.defaultObject(options, QueryOptions::new);\n \n-                OpenCGAResult updateResult = jobDBAdaptor.update(job.getUid(), parameters, options);\n-                result.append(updateResult);\n+        authorizationManager.checkJobPermission(study.getUid(), job.getUid(), userId, JobAclEntry.JobPermissions.UPDATE);\n \n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n-            } catch (CatalogException e) {\n-                Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n-                result.getEvents().add(event);\n+        OpenCGAResult updateResult = jobDBAdaptor.update(job.getUid(), parameters, options);\n+        result.append(updateResult);\n \n-                logger.error(\"Cannot update job {}: {}\", jobId, e.getMessage());\n-                auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n-            }\n-        }\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, job.getId(), job.getUuid(), study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS));\n+      } catch (CatalogException e) {\n+        Event event = new Event(Event.Type.ERROR, jobId, e.getMessage());\n+        result.getEvents().add(event);\n \n-        return endResult(result, ignoreException);\n+        logger.error(\"Cannot update job {}: {}\", jobId, e.getMessage());\n+        auditManager.auditUpdate(operationId, userId, Enums.Resource.JOB, jobId, jobUuid, study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()));\n+      }\n     }\n \n+    return endResult(result, ignoreException);\n+  }\n+\n //    public void setStatus(String studyId, String jobId, String status, String message, String token) throws CatalogException {\n //        String userId = userManager.getUserId(token);\n //        Study study = studyManager.resolveId(studyId, userId);\n@@ -1155,270 +1155,270 @@ public class JobManager extends ResourceManager<Job> {\n //        }\n //    }\n \n-    public OpenCGAResult<JobsTop> top(String study, Query baseQuery, int limit, String token) throws CatalogException {\n-        StopWatch stopWatch = StopWatch.createStarted();\n-        QueryOptions queryOptions = new QueryOptions()\n-                .append(QueryOptions.INCLUDE, \"id,name,status,execution,creationDate\")\n-                .append(QueryOptions.COUNT, false)\n-                .append(QueryOptions.ORDER, QueryOptions.ASCENDING);\n-\n-        int jobsLimit = limit;\n-        OpenCGAResult<Job> running = catalogManager.getJobManager().search(\n-                study,\n-                new Query(baseQuery)\n-                        .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.RUNNING),\n-                new QueryOptions(queryOptions)\n-                        .append(QueryOptions.LIMIT, jobsLimit)\n-                        .append(QueryOptions.SORT, \"execution.start\"),\n-                token);\n-        jobsLimit -= running.getResults().size();\n-\n-        OpenCGAResult<Job> queued = catalogManager.getJobManager().search(\n-                study,\n-                new Query(baseQuery)\n-                        .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.QUEUED),\n-                new QueryOptions(queryOptions)\n-                        .append(QueryOptions.LIMIT, jobsLimit)\n-                        .append(QueryOptions.SORT, \"creationDate\"),\n-                token);\n-        jobsLimit -= queued.getResults().size();\n-\n-        OpenCGAResult<Job> pending = catalogManager.getJobManager().search(\n-                study,\n-                new Query(baseQuery)\n-                        .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.PENDING),\n-                new QueryOptions(queryOptions)\n-                        .append(QueryOptions.LIMIT, jobsLimit)\n-                        .append(QueryOptions.SORT, \"creationDate\"),\n-                token);\n-        jobsLimit -= pending.getResults().size();\n-\n-        List<Job> finishedJobs = catalogManager.getJobManager().search(\n-                study,\n-                new Query(baseQuery)\n-                        .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.DONE + \",\"\n-                                + Enums.ExecutionStatus.ERROR + \",\"\n-                                + Enums.ExecutionStatus.ABORTED),\n-                new QueryOptions(queryOptions)\n-                        .append(QueryOptions.LIMIT, Math.max(1, jobsLimit))\n-                        .append(QueryOptions.SORT, \"execution.end\")\n-                        .append(QueryOptions.ORDER, QueryOptions.DESCENDING), // Get last n elements,\n-                token).getResults();\n-        Collections.reverse(finishedJobs); // Reverse elements\n-\n-        List<Job> allJobs = new ArrayList<>(running.getResults().size() + pending.getResults().size() + queued.getResults().size());\n-        allJobs.addAll(finishedJobs);\n-        allJobs.addAll(running.getResults());\n-        allJobs.addAll(queued.getResults());\n-        allJobs.addAll(pending.getResults());\n-        Map<String, Long> jobStatusCount = new HashMap<>();\n-\n-        OpenCGAResult result = catalogManager.getJobManager().groupBy(study, new Query(baseQuery), JobDBAdaptor.QueryParams.STATUS_NAME.key(),\n-                new QueryOptions(QueryOptions.COUNT, true), token);\n-        for (Object o : result.getResults()) {\n-            String status = ((Map) ((Map) o).get(\"_id\")).get(\"status.name\").toString();\n-            long count = ((Number) ((Map) o).get(\"count\")).longValue();\n-            jobStatusCount.put(status, count);\n-        }\n-        JobsTop top = new JobsTop(Date.from(Instant.now()), jobStatusCount, allJobs);\n-        return new OpenCGAResult<>(((int) stopWatch.getTime()), null, 1, Collections.singletonList(top), 1);\n+  public OpenCGAResult<JobsTop> top(String study, Query baseQuery, int limit, String token) throws CatalogException {\n+    StopWatch stopWatch = StopWatch.createStarted();\n+    QueryOptions queryOptions = new QueryOptions()\n+        .append(QueryOptions.INCLUDE, \"id,name,status,execution,creationDate\")\n+        .append(QueryOptions.COUNT, false)\n+        .append(QueryOptions.ORDER, QueryOptions.ASCENDING);\n+\n+    int jobsLimit = limit;\n+    OpenCGAResult<Job> running = catalogManager.getJobManager().search(\n+        study,\n+        new Query(baseQuery)\n+            .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.RUNNING),\n+        new QueryOptions(queryOptions)\n+            .append(QueryOptions.LIMIT, jobsLimit)\n+            .append(QueryOptions.SORT, \"execution.start\"),\n+        token);\n+    jobsLimit -= running.getResults().size();\n+\n+    OpenCGAResult<Job> queued = catalogManager.getJobManager().search(\n+        study,\n+        new Query(baseQuery)\n+            .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.QUEUED),\n+        new QueryOptions(queryOptions)\n+            .append(QueryOptions.LIMIT, jobsLimit)\n+            .append(QueryOptions.SORT, \"creationDate\"),\n+        token);\n+    jobsLimit -= queued.getResults().size();\n+\n+    OpenCGAResult<Job> pending = catalogManager.getJobManager().search(\n+        study,\n+        new Query(baseQuery)\n+            .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.PENDING),\n+        new QueryOptions(queryOptions)\n+            .append(QueryOptions.LIMIT, jobsLimit)\n+            .append(QueryOptions.SORT, \"creationDate\"),\n+        token);\n+    jobsLimit -= pending.getResults().size();\n+\n+    List<Job> finishedJobs = catalogManager.getJobManager().search(\n+        study,\n+        new Query(baseQuery)\n+            .append(JobDBAdaptor.QueryParams.STATUS_NAME.key(), Enums.ExecutionStatus.DONE + \",\"\n+                + Enums.ExecutionStatus.ERROR + \",\"\n+                + Enums.ExecutionStatus.ABORTED),\n+        new QueryOptions(queryOptions)\n+            .append(QueryOptions.LIMIT, Math.max(1, jobsLimit))\n+            .append(QueryOptions.SORT, \"execution.end\")\n+            .append(QueryOptions.ORDER, QueryOptions.DESCENDING), // Get last n elements,\n+        token).getResults();\n+    Collections.reverse(finishedJobs); // Reverse elements\n+\n+    List<Job> allJobs = new ArrayList<>(running.getResults().size() + pending.getResults().size() + queued.getResults().size());\n+    allJobs.addAll(finishedJobs);\n+    allJobs.addAll(running.getResults());\n+    allJobs.addAll(queued.getResults());\n+    allJobs.addAll(pending.getResults());\n+    Map<String, Long> jobStatusCount = new HashMap<>();\n+\n+    OpenCGAResult result = catalogManager.getJobManager().groupBy(study, new Query(baseQuery), JobDBAdaptor.QueryParams.STATUS_NAME.key(),\n+        new QueryOptions(QueryOptions.COUNT, true), token);\n+    for (Object o : result.getResults()) {\n+      String status = ((Map) ((Map) o).get(\"_id\")).get(\"status.name\").toString();\n+      long count = ((Number) ((Map) o).get(\"count\")).longValue();\n+      jobStatusCount.put(status, count);\n     }\n-\n-    @Override\n-    public OpenCGAResult rank(String studyId, Query query, String field, int numResults, boolean asc, String token)\n-            throws CatalogException {\n-        query = ParamUtils.defaultObject(query, Query::new);\n-        ParamUtils.checkObj(field, \"field\");\n-        ParamUtils.checkObj(token, \"sessionId\");\n-\n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n-        authorizationManager.checkStudyPermission(study.getUid(), userId, StudyAclEntry.StudyPermissions.VIEW_JOBS);\n-\n-        // TODO: In next release, we will have to check the count parameter from the queryOptions object.\n-        boolean count = true;\n-        //query.append(CatalogJobDBAdaptor.QueryParams.STUDY_UID.key(), studyId);\n-        OpenCGAResult queryResult = null;\n-        if (count) {\n-            // We do not need to check for permissions when we show the count of files\n-            queryResult = jobDBAdaptor.rank(query, field, numResults, asc);\n-        }\n-\n-        return ParamUtils.defaultObject(queryResult, OpenCGAResult::new);\n+    JobsTop top = new JobsTop(Date.from(Instant.now()), jobStatusCount, allJobs);\n+    return new OpenCGAResult<>(((int) stopWatch.getTime()), null, 1, Collections.singletonList(top), 1);\n+  }\n+\n+  @Override\n+  public OpenCGAResult rank(String studyId, Query query, String field, int numResults, boolean asc, String token)\n+      throws CatalogException {\n+    query = ParamUtils.defaultObject(query, Query::new);\n+    ParamUtils.checkObj(field, \"field\");\n+    ParamUtils.checkObj(token, \"sessionId\");\n+\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n+    authorizationManager.checkStudyPermission(study.getUid(), userId, StudyAclEntry.StudyPermissions.VIEW_JOBS);\n+\n+    // TODO: In next release, we will have to check the count parameter from the queryOptions object.\n+    boolean count = true;\n+    //query.append(CatalogJobDBAdaptor.QueryParams.STUDY_UID.key(), studyId);\n+    OpenCGAResult queryResult = null;\n+    if (count) {\n+      // We do not need to check for permissions when we show the count of files\n+      queryResult = jobDBAdaptor.rank(query, field, numResults, asc);\n     }\n \n-    @Override\n-    public OpenCGAResult groupBy(@Nullable String studyId, Query query, List<String> fields, QueryOptions options, String token)\n-            throws CatalogException {\n-        query = ParamUtils.defaultObject(query, Query::new);\n-        options = ParamUtils.defaultObject(options, QueryOptions::new);\n-        ParamUtils.checkObj(fields, \"fields\");\n-        if (fields == null || fields.size() == 0) {\n-            throw new CatalogException(\"Empty fields parameter.\");\n-        }\n-\n-        String userId = userManager.getUserId(token);\n-        Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n-\n-        // Add study id to the query\n-        query.put(SampleDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n-\n-        OpenCGAResult queryResult = jobDBAdaptor.groupBy(study.getUid(), query, fields, options, userId);\n-\n-        return ParamUtils.defaultObject(queryResult, OpenCGAResult::new);\n-    }\n-\n-    // **************************   ACLs  ******************************** //\n-    public OpenCGAResult<Map<String, List<String>>> getAcls(String studyId, List<String> jobList, String member, boolean ignoreException,\n-                                                            String token) throws CatalogException {\n-        String user = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyId, user);\n-\n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"studyId\", studyId)\n-                .append(\"jobList\", jobList)\n-                .append(\"member\", member)\n-                .append(\"ignoreException\", ignoreException)\n-                .append(\"token\", token);\n-        try {\n-            OpenCGAResult<Map<String, List<String>>> jobAclList = OpenCGAResult.empty();\n-            InternalGetDataResult<Job> queryResult = internalGet(study.getUid(), jobList, INCLUDE_JOB_IDS, user, ignoreException);\n-\n-            Map<String, InternalGetDataResult.Missing> missingMap = new HashMap<>();\n-            if (queryResult.getMissing() != null) {\n-                missingMap = queryResult.getMissing().stream()\n-                        .collect(Collectors.toMap(InternalGetDataResult.Missing::getId, Function.identity()));\n-            }\n-            int counter = 0;\n-            for (String jobId : jobList) {\n-                if (!missingMap.containsKey(jobId)) {\n-                    Job job = queryResult.getResults().get(counter);\n-                    try {\n-                        OpenCGAResult<Map<String, List<String>>> allJobAcls;\n-                        if (StringUtils.isNotEmpty(member)) {\n-                            allJobAcls = authorizationManager.getJobAcl(study.getUid(), job.getUid(), user, member);\n-                        } else {\n-                            allJobAcls = authorizationManager.getAllJobAcls(study.getUid(), job.getUid(), user);\n-                        }\n-                        jobAclList.append(allJobAcls);\n-                        auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, job.getId(),\n-                                job.getUuid(), study.getId(), study.getUuid(), auditParams,\n-                                new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS), new ObjectMap());\n-                    } catch (CatalogException e) {\n-                        auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, job.getId(),\n-                                job.getUuid(), study.getId(), study.getUuid(), auditParams,\n-                                new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()), new ObjectMap());\n-                        if (!ignoreException) {\n-                            throw e;\n-                        } else {\n-                            Event event = new Event(Event.Type.ERROR, jobId, missingMap.get(jobId).getErrorMsg());\n-                            jobAclList.append(new OpenCGAResult<>(0, Collections.singletonList(event), 0,\n-                                    Collections.singletonList(Collections.emptyMap()), 0));\n-                        }\n-                    }\n-                    counter += 1;\n-                } else {\n-                    Event event = new Event(Event.Type.ERROR, jobId, missingMap.get(jobId).getErrorMsg());\n-                    jobAclList.append(new OpenCGAResult<>(0, Collections.singletonList(event), 0,\n-                            Collections.singletonList(Collections.emptyMap()), 0));\n-\n-                    auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, jobId, \"\", study.getId(),\n-                            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR,\n-                                    new Error(0, \"\", missingMap.get(jobId).getErrorMsg())), new ObjectMap());\n-                }\n-            }\n-            return jobAclList;\n-        } catch (CatalogException e) {\n-            for (String jobId : jobList) {\n-                auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, jobId, \"\", study.getId(),\n-                        study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()),\n-                        new ObjectMap());\n-            }\n-            throw e;\n-        }\n+    return ParamUtils.defaultObject(queryResult, OpenCGAResult::new);\n+  }\n+\n+  @Override\n+  public OpenCGAResult groupBy(@Nullable String studyId, Query query, List<String> fields, QueryOptions options, String token)\n+      throws CatalogException {\n+    query = ParamUtils.defaultObject(query, Query::new);\n+    options = ParamUtils.defaultObject(options, QueryOptions::new);\n+    ParamUtils.checkObj(fields, \"fields\");\n+    if (fields == null || fields.size() == 0) {\n+      throw new CatalogException(\"Empty fields parameter.\");\n     }\n \n-    public OpenCGAResult<Map<String, List<String>>> updateAcl(String studyId, List<String> jobStrList, String memberList,\n-                                                              AclParams aclParams, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n-        Study study = studyManager.resolveId(studyId, userId);\n-\n-        ObjectMap auditParams = new ObjectMap()\n-                .append(\"studyId\", studyId)\n-                .append(\"jobStrList\", jobStrList)\n-                .append(\"memberList\", memberList)\n-                .append(\"aclParams\", aclParams)\n-                .append(\"token\", token);\n-        String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n-\n-        try {\n-            if (jobStrList == null || jobStrList.isEmpty()) {\n-                throw new CatalogException(\"Missing job parameter\");\n-            }\n-\n-            if (aclParams.getAction() == null) {\n-                throw new CatalogException(\"Invalid action found. Please choose a valid action to be performed.\");\n-            }\n-\n-            List<String> permissions = Collections.emptyList();\n-            if (StringUtils.isNotEmpty(aclParams.getPermissions())) {\n-                permissions = Arrays.asList(aclParams.getPermissions().trim().replaceAll(\"\\\\s\", \"\").split(\",\"));\n-                checkPermissions(permissions, JobAclEntry.JobPermissions::valueOf);\n-            }\n-\n-            List<Job> jobList = internalGet(study.getUid(), jobStrList, INCLUDE_JOB_IDS, userId, false).getResults();\n-\n-            authorizationManager.checkCanAssignOrSeePermissions(study.getUid(), userId);\n-\n-            // Validate that the members are actually valid members\n-            List<String> members;\n-            if (memberList != null && !memberList.isEmpty()) {\n-                members = Arrays.asList(memberList.split(\",\"));\n+    String userId = userManager.getUserId(token);\n+    Study study = catalogManager.getStudyManager().resolveId(studyId, userId);\n+\n+    // Add study id to the query\n+    query.put(SampleDBAdaptor.QueryParams.STUDY_UID.key(), study.getUid());\n+\n+    OpenCGAResult queryResult = jobDBAdaptor.groupBy(study.getUid(), query, fields, options, userId);\n+\n+    return ParamUtils.defaultObject(queryResult, OpenCGAResult::new);\n+  }\n+\n+  // **************************   ACLs  ******************************** //\n+  public OpenCGAResult<Map<String, List<String>>> getAcls(String studyId, List<String> jobList, String member, boolean ignoreException,\n+                                                          String token) throws CatalogException {\n+    String user = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyId, user);\n+\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"studyId\", studyId)\n+        .append(\"jobList\", jobList)\n+        .append(\"member\", member)\n+        .append(\"ignoreException\", ignoreException)\n+        .append(\"token\", token);\n+    try {\n+      OpenCGAResult<Map<String, List<String>>> jobAclList = OpenCGAResult.empty();\n+      InternalGetDataResult<Job> queryResult = internalGet(study.getUid(), jobList, INCLUDE_JOB_IDS, user, ignoreException);\n+\n+      Map<String, InternalGetDataResult.Missing> missingMap = new HashMap<>();\n+      if (queryResult.getMissing() != null) {\n+        missingMap = queryResult.getMissing().stream()\n+            .collect(Collectors.toMap(InternalGetDataResult.Missing::getId, Function.identity()));\n+      }\n+      int counter = 0;\n+      for (String jobId : jobList) {\n+        if (!missingMap.containsKey(jobId)) {\n+          Job job = queryResult.getResults().get(counter);\n+          try {\n+            OpenCGAResult<Map<String, List<String>>> allJobAcls;\n+            if (StringUtils.isNotEmpty(member)) {\n+              allJobAcls = authorizationManager.getJobAcl(study.getUid(), job.getUid(), user, member);\n             } else {\n-                members = Collections.emptyList();\n+              allJobAcls = authorizationManager.getAllJobAcls(study.getUid(), job.getUid(), user);\n             }\n-            authorizationManager.checkNotAssigningPermissionsToAdminsGroup(members);\n-            checkMembers(study.getUid(), members);\n-\n-            OpenCGAResult<Map<String, List<String>>> queryResultList;\n-            switch (aclParams.getAction()) {\n-                case SET:\n-                    queryResultList = authorizationManager.setAcls(study.getUid(), jobList.stream().map(Job::getUid)\n-                            .collect(Collectors.toList()), members, permissions, Enums.Resource.JOB);\n-                    break;\n-                case ADD:\n-                    queryResultList = authorizationManager.addAcls(study.getUid(), jobList.stream().map(Job::getUid)\n-                            .collect(Collectors.toList()), members, permissions, Enums.Resource.JOB);\n-                    break;\n-                case REMOVE:\n-                    queryResultList = authorizationManager.removeAcls(jobList.stream().map(Job::getUid).collect(Collectors.toList()),\n-                            members, permissions, Enums.Resource.JOB);\n-                    break;\n-                case RESET:\n-                    queryResultList = authorizationManager.removeAcls(jobList.stream().map(Job::getUid).collect(Collectors.toList()),\n-                            members, null, Enums.Resource.JOB);\n-                    break;\n-                default:\n-                    throw new CatalogException(\"Unexpected error occurred. No valid action found.\");\n+            jobAclList.append(allJobAcls);\n+            auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, job.getId(),\n+                job.getUuid(), study.getId(), study.getUuid(), auditParams,\n+                new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS), new ObjectMap());\n+          } catch (CatalogException e) {\n+            auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, job.getId(),\n+                job.getUuid(), study.getId(), study.getUuid(), auditParams,\n+                new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()), new ObjectMap());\n+            if (!ignoreException) {\n+              throw e;\n+            } else {\n+              Event event = new Event(Event.Type.ERROR, jobId, missingMap.get(jobId).getErrorMsg());\n+              jobAclList.append(new OpenCGAResult<>(0, Collections.singletonList(event), 0,\n+                  Collections.singletonList(Collections.emptyMap()), 0));\n             }\n+          }\n+          counter += 1;\n+        } else {\n+          Event event = new Event(Event.Type.ERROR, jobId, missingMap.get(jobId).getErrorMsg());\n+          jobAclList.append(new OpenCGAResult<>(0, Collections.singletonList(event), 0,\n+              Collections.singletonList(Collections.emptyMap()), 0));\n \n-            for (Job job : jobList) {\n-                auditManager.audit(operationId, userId, Enums.Action.UPDATE_ACLS, Enums.Resource.JOB, job.getId(),\n-                        job.getUuid(), study.getId(), study.getUuid(), auditParams,\n-                        new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS), new ObjectMap());\n-            }\n-            return queryResultList;\n-        } catch (CatalogException e) {\n-            if (jobStrList != null) {\n-                for (String jobId : jobStrList) {\n-                    auditManager.audit(operationId, userId, Enums.Action.UPDATE_ACLS, Enums.Resource.JOB, jobId, \"\",\n-                            study.getId(), study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR,\n-                                    e.getError()), new ObjectMap());\n-                }\n-            }\n-            throw e;\n+          auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, jobId, \"\", study.getId(),\n+              study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR,\n+                  new Error(0, \"\", missingMap.get(jobId).getErrorMsg())), new ObjectMap());\n+        }\n+      }\n+      return jobAclList;\n+    } catch (CatalogException e) {\n+      for (String jobId : jobList) {\n+        auditManager.audit(operationId, user, Enums.Action.FETCH_ACLS, Enums.Resource.JOB, jobId, \"\", study.getId(),\n+            study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR, e.getError()),\n+            new ObjectMap());\n+      }\n+      throw e;\n+    }\n+  }\n+\n+  public OpenCGAResult<Map<String, List<String>>> updateAcl(String studyId, List<String> jobStrList, String memberList,\n+                                                            AclParams aclParams, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n+    Study study = studyManager.resolveId(studyId, userId);\n+\n+    ObjectMap auditParams = new ObjectMap()\n+        .append(\"studyId\", studyId)\n+        .append(\"jobStrList\", jobStrList)\n+        .append(\"memberList\", memberList)\n+        .append(\"aclParams\", aclParams)\n+        .append(\"token\", token);\n+    String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n+\n+    try {\n+      if (jobStrList == null || jobStrList.isEmpty()) {\n+        throw new CatalogException(\"Missing job parameter\");\n+      }\n+\n+      if (aclParams.getAction() == null) {\n+        throw new CatalogException(\"Invalid action found. Please choose a valid action to be performed.\");\n+      }\n+\n+      List<String> permissions = Collections.emptyList();\n+      if (StringUtils.isNotEmpty(aclParams.getPermissions())) {\n+        permissions = Arrays.asList(aclParams.getPermissions().trim().replaceAll(\"\\\\s\", \"\").split(\",\"));\n+        checkPermissions(permissions, JobAclEntry.JobPermissions::valueOf);\n+      }\n+\n+      List<Job> jobList = internalGet(study.getUid(), jobStrList, INCLUDE_JOB_IDS, userId, false).getResults();\n+\n+      authorizationManager.checkCanAssignOrSeePermissions(study.getUid(), userId);\n+\n+      // Validate that the members are actually valid members\n+      List<String> members;\n+      if (memberList != null && !memberList.isEmpty()) {\n+        members = Arrays.asList(memberList.split(\",\"));\n+      } else {\n+        members = Collections.emptyList();\n+      }\n+      authorizationManager.checkNotAssigningPermissionsToAdminsGroup(members);\n+      checkMembers(study.getUid(), members);\n+\n+      OpenCGAResult<Map<String, List<String>>> queryResultList;\n+      switch (aclParams.getAction()) {\n+        case SET:\n+          queryResultList = authorizationManager.setAcls(study.getUid(), jobList.stream().map(Job::getUid)\n+              .collect(Collectors.toList()), members, permissions, Enums.Resource.JOB);\n+          break;\n+        case ADD:\n+          queryResultList = authorizationManager.addAcls(study.getUid(), jobList.stream().map(Job::getUid)\n+              .collect(Collectors.toList()), members, permissions, Enums.Resource.JOB);\n+          break;\n+        case REMOVE:\n+          queryResultList = authorizationManager.removeAcls(jobList.stream().map(Job::getUid).collect(Collectors.toList()),\n+              members, permissions, Enums.Resource.JOB);\n+          break;\n+        case RESET:\n+          queryResultList = authorizationManager.removeAcls(jobList.stream().map(Job::getUid).collect(Collectors.toList()),\n+              members, null, Enums.Resource.JOB);\n+          break;\n+        default:\n+          throw new CatalogException(\"Unexpected error occurred. No valid action found.\");\n+      }\n+\n+      for (Job job : jobList) {\n+        auditManager.audit(operationId, userId, Enums.Action.UPDATE_ACLS, Enums.Resource.JOB, job.getId(),\n+            job.getUuid(), study.getId(), study.getUuid(), auditParams,\n+            new AuditRecord.Status(AuditRecord.Status.Result.SUCCESS), new ObjectMap());\n+      }\n+      return queryResultList;\n+    } catch (CatalogException e) {\n+      if (jobStrList != null) {\n+        for (String jobId : jobStrList) {\n+          auditManager.audit(operationId, userId, Enums.Action.UPDATE_ACLS, Enums.Resource.JOB, jobId, \"\",\n+              study.getId(), study.getUuid(), auditParams, new AuditRecord.Status(AuditRecord.Status.Result.ERROR,\n+                  e.getError()), new ObjectMap());\n         }\n+      }\n+      throw e;\n     }\n+  }\n \n }\n",
            "diff_size": 1706
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1213",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1339",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/404/JobManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/404/JobManager.java\nindex 851041fa065..680b1f232fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/404/JobManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/404/JobManager.java\n@@ -69,9 +69,7 @@ public class JobManager extends ResourceManager<Job> {\n     public static final QueryOptions INCLUDE_JOB_IDS = new QueryOptions(QueryOptions.INCLUDE,\n             Arrays.asList(JobDBAdaptor.QueryParams.ID.key(), JobDBAdaptor.QueryParams.UID.key(), JobDBAdaptor.QueryParams.UUID.key(),\n                     JobDBAdaptor.QueryParams.STUDY_UID.key()));\n-\n-    JobManager(AuthorizationManager authorizationManager, AuditManager auditManager, CatalogManager catalogManager,\n-               DBAdaptorFactory catalogDBAdaptorFactory, CatalogIOManagerFactory ioManagerFactory, Configuration configuration) {\n+JobManager(AuthorizationManager authorizationManager, AuditManager auditManager, CatalogManager catalogManager, DBAdaptorFactory catalogDBAdaptorFactory, CatalogIOManagerFactory ioManagerFactory, Configuration configuration) {\n         super(authorizationManager, auditManager, catalogManager, catalogDBAdaptorFactory, ioManagerFactory, configuration);\n \n         this.userManager = catalogManager.getUserManager();\n@@ -114,9 +112,8 @@ public class JobManager extends ResourceManager<Job> {\n     }\n \n     @Override\n-    InternalGetDataResult<Job> internalGet(long studyUid, List<String> entryList, @Nullable Query query, QueryOptions options, String user,\n-                                           boolean ignoreException) throws CatalogException {\n-        if (ListUtils.isEmpty(entryList)) {\n+    InternalGetDataResult<Job> internalGet(long studyUid, List<String> entryList, @Nullable Query query, QueryOptions options, String user, boolean ignoreException) throws CatalogException {\n+    if (ListUtils.isEmpty(entryList)) {\n             throw new CatalogException(\"Missing job entries.\");\n         }\n         List<String> uniqueList = ListUtils.unique(entryList);\n@@ -715,7 +712,7 @@ public class JobManager extends ResourceManager<Job> {\n \n     public OpenCGAResult<Job> update(String studyStr, Query query, JobUpdateParams updateParams, boolean ignoreException,\n                                         QueryOptions options, String token) throws CatalogException {\n-        Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n+    Query finalQuery = new Query(ParamUtils.defaultObject(query, Query::new));\n \n         String userId = userManager.getUserId(token);\n         Study study = studyManager.resolveId(studyStr, userId);\n@@ -778,12 +775,12 @@ public class JobManager extends ResourceManager<Job> {\n      */\n     public OpenCGAResult<Job> update(String studyStr, List<String> jobIds, JobUpdateParams updateParams, QueryOptions options,\n                                      String token) throws CatalogException {\n-        return update(studyStr, jobIds, updateParams, false, options, token);\n+    return update(studyStr, jobIds, updateParams, false, options, token);\n     }\n \n     public OpenCGAResult<Job> update(String studyStr, List<String> jobIds, JobUpdateParams updateParams, boolean ignoreException,\n                                         QueryOptions options, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n+    String userId = userManager.getUserId(token);\n         Study study = studyManager.resolveId(studyStr, userId);\n \n         String operationId = UUIDUtils.generateOpenCGAUUID(UUIDUtils.Entity.AUDIT);\n@@ -1171,7 +1168,7 @@ public class JobManager extends ResourceManager<Job> {\n                         .append(QueryOptions.LIMIT, jobsLimit)\n                         .append(QueryOptions.SORT, \"execution.start\"),\n                 token);\n-        jobsLimit -= running.getResults().size();\n+jobsLimit -= running.getResults().size();\n \n         OpenCGAResult<Job> queued = catalogManager.getJobManager().search(\n                 study,\n@@ -1181,7 +1178,7 @@ public class JobManager extends ResourceManager<Job> {\n                         .append(QueryOptions.LIMIT, jobsLimit)\n                         .append(QueryOptions.SORT, \"creationDate\"),\n                 token);\n-        jobsLimit -= queued.getResults().size();\n+jobsLimit -= queued.getResults().size();\n \n         OpenCGAResult<Job> pending = catalogManager.getJobManager().search(\n                 study,\n@@ -1191,7 +1188,7 @@ public class JobManager extends ResourceManager<Job> {\n                         .append(QueryOptions.LIMIT, jobsLimit)\n                         .append(QueryOptions.SORT, \"creationDate\"),\n                 token);\n-        jobsLimit -= pending.getResults().size();\n+jobsLimit -= pending.getResults().size();\n \n         List<Job> finishedJobs = catalogManager.getJobManager().search(\n                 study,\n@@ -1339,9 +1336,8 @@ public class JobManager extends ResourceManager<Job> {\n         }\n     }\n \n-    public OpenCGAResult<Map<String, List<String>>> updateAcl(String studyId, List<String> jobStrList, String memberList,\n-                                                              AclParams aclParams, String token) throws CatalogException {\n-        String userId = userManager.getUserId(token);\n+    public OpenCGAResult<Map<String, List<String>>> updateAcl(String studyId, List<String> jobStrList, String memberList, AclParams aclParams, String token) throws CatalogException {\n+    String userId = userManager.getUserId(token);\n         Study study = studyManager.resolveId(studyId, userId);\n \n         ObjectMap auditParams = new ObjectMap()\n@@ -1401,7 +1397,7 @@ public class JobManager extends ResourceManager<Job> {\n                     break;\n                 default:\n                     throw new CatalogException(\"Unexpected error occurred. No valid action found.\");\n-            }\n+    }\n \n             for (Job job : jobList) {\n                 auditManager.audit(operationId, userId, Enums.Action.UPDATE_ACLS, Enums.Resource.JOB, job.getId(),\n@@ -1421,4 +1417,4 @@ public class JobManager extends ResourceManager<Job> {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1216",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1216",
                    "column": "12",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/404/JobManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/404/JobManager.java\nindex 851041fa065..79fa43387b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/404/JobManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/404/JobManager.java\n@@ -1212,8 +1212,8 @@ public class JobManager extends ResourceManager<Job> {\n         allJobs.addAll(queued.getResults());\n         allJobs.addAll(pending.getResults());\n         Map<String, Long> jobStatusCount = new HashMap<>();\n-\n-        OpenCGAResult result = catalogManager.getJobManager().groupBy(study, new Query(baseQuery), JobDBAdaptor.QueryParams.STATUS_NAME.key(),\n+        OpenCGAResult result = catalogManager.getJobManager(\n+        ) . groupBy(study, new Query(baseQuery), JobDBAdaptor.QueryParams.STATUS_NAME.key(),\n                 new QueryOptions(QueryOptions.COUNT, true), token);\n         for (Object o : result.getResults()) {\n             String status = ((Map) ((Map) o).get(\"_id\")).get(\"status.name\").toString();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}