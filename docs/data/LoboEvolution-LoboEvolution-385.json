{
    "project_name": "LoboEvolution-LoboEvolution",
    "error_id": "385",
    "information": {
        "errors": [
            {
                "line": "42",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class AluminiumIcons extends BaseIcons {\n\n\t/**\n\t * <p>getCloseIcon.</p>\n\t *\n\t * @return a {@link javax.swing.Icon} object.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/styler/385/AluminiumIcons.java\nindex 6ae17886472..e74701b4edc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/styler/385/AluminiumIcons.java\n@@ -39,12 +39,12 @@ import com.jtattoo.plaf.LazyImageIcon;\n  */\n public class AluminiumIcons extends BaseIcons {\n \n-\t/**\n+    /**\n \t * <p>getCloseIcon.</p>\n \t *\n \t * @return a {@link javax.swing.Icon} object.\n \t */\n-\tpublic static Icon getCloseIcon() {\n+           public static Icon getCloseIcon() {\n \t\tif (closeIcon == null) {\n \t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n \t\t\t\tcloseIcon = new MacCloseIcon();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/intellij/385/AluminiumIcons.java\nindex 6ae17886472..1b02852c6d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/intellij/385/AluminiumIcons.java\n@@ -1,25 +1,26 @@\n /*\n-* Copyright (c) 2002 and later by MH Software-Entwicklung. All Rights Reserved.\n-*\n-* JTattoo is multiple licensed. If your are an open source developer you can use\n-* it under the terms and conditions of the GNU General Public License version 2.0\n-* or later as published by the Free Software Foundation.\n-*\n-* see: gpl-2.0.txt\n-*\n-* If you pay for a license you will become a registered user who could use the\n-* software under the terms and conditions of the GNU Lesser General Public License\n-* version 2.0 or later with classpath exception as published by the Free Software\n-* Foundation.\n-*\n-* see: lgpl-2.0.txt\n-* see: classpath-exception.txt\n-*\n-* Registered users could also use JTattoo under the terms and conditions of the\n-* Apache License, Version 2.0 as published by the Apache Software Foundation.\n-*\n-* see: APACHE-LICENSE-2.0.txt\n+ * Copyright (c) 2002 and later by MH Software-Entwicklung. All Rights Reserved.\n+ *\n+ * JTattoo is multiple licensed. If your are an open source developer you can use\n+ * it under the terms and conditions of the GNU General Public License version 2.0\n+ * or later as published by the Free Software Foundation.\n+ *\n+ * see: gpl-2.0.txt\n+ *\n+ * If you pay for a license you will become a registered user who could use the\n+ * software under the terms and conditions of the GNU Lesser General Public License\n+ * version 2.0 or later with classpath exception as published by the Free Software\n+ * Foundation.\n+ *\n+ * see: lgpl-2.0.txt\n+ * see: classpath-exception.txt\n+ *\n+ * Registered users could also use JTattoo under the terms and conditions of the\n+ * Apache License, Version 2.0 as published by the Apache Software Foundation.\n+ *\n+ * see: APACHE-LICENSE-2.0.txt\n  */\n+\n package com.jtattoo.plaf.aluminium;\n \n import java.awt.Color;\n@@ -33,186 +34,185 @@ import com.jtattoo.plaf.LazyImageIcon;\n \n /**\n  * <p>AluminiumIcons class.</p>\n- *\n+ * <p>\n  * Author Michael Hagen\n- *\n  */\n public class AluminiumIcons extends BaseIcons {\n \n-\t/**\n-\t * <p>getCloseIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getCloseIcon() {\n-\t\tif (closeIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\tcloseIcon = new MacCloseIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\tcloseIcon = new BaseIcons.CloseSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn closeIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getIconIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getIconIcon() {\n-\t\tif (iconIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\ticonIcon = new MacIconIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\ticonIcon = new BaseIcons.IconSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn iconIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getMaxIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getMaxIcon() {\n-\t\tif (maxIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\tmaxIcon = new MacMaxIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\tmaxIcon = new BaseIcons.MaxSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn maxIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getMinIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getMinIcon() {\n-\t\tif (minIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\tminIcon = new MacMinIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\tminIcon = new BaseIcons.MinSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn minIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterDownArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterDownArrowIcon() {\n-\t\tif (splitterDownArrowIcon == null) {\n-\t\t\tsplitterDownArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterDownArrow.gif\");\n-\t\t}\n-\t\treturn splitterDownArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterLeftArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterLeftArrowIcon() {\n-\t\tif (splitterLeftArrowIcon == null) {\n-\t\t\tsplitterLeftArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterLeftArrow.gif\");\n-\t\t}\n-\t\treturn splitterLeftArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterRightArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterRightArrowIcon() {\n-\t\tif (splitterRightArrowIcon == null) {\n-\t\t\tsplitterRightArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterRightArrow.gif\");\n-\t\t}\n-\t\treturn splitterRightArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterUpArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterUpArrowIcon() {\n-\t\tif (splitterUpArrowIcon == null) {\n-\t\t\tsplitterUpArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterUpArrow.gif\");\n-\t\t}\n-\t\treturn splitterUpArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbHorIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbHorIcon() {\n-\t\tif (thumbHorIcon == null) {\n-\t\t\tthumbHorIcon = new LazyImageIcon(\"aluminium/icons/thumb_hor.gif\");\n-\t\t}\n-\t\treturn thumbHorIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbHorIconRollover.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbHorIconRollover() {\n-\t\tif (thumbHorIconRollover == null) {\n-\t\t\tthumbHorIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_hor_rollover.gif\");\n-\t\t}\n-\t\treturn thumbHorIconRollover;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbVerIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbVerIcon() {\n-\t\tif (thumbVerIcon == null) {\n-\t\t\tthumbVerIcon = new LazyImageIcon(\"aluminium/icons/thumb_ver.gif\");\n-\t\t}\n-\t\treturn thumbVerIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbVerIconRollover.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbVerIconRollover() {\n-\t\tif (thumbVerIconRollover == null) {\n-\t\t\tthumbVerIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_ver_rollover.gif\");\n-\t\t}\n-\t\treturn thumbVerIconRollover;\n-\t}\n+    /**\n+     * <p>getCloseIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getCloseIcon() {\n+        if (closeIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                closeIcon = new MacCloseIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                closeIcon = new BaseIcons.CloseSymbol(iconColor, iconShadowColor, iconRolloverColor,\n+                    new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return closeIcon;\n+    }\n+\n+    /**\n+     * <p>getIconIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getIconIcon() {\n+        if (iconIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                iconIcon = new MacIconIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                iconIcon = new BaseIcons.IconSymbol(iconColor, iconShadowColor, iconRolloverColor,\n+                    new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return iconIcon;\n+    }\n+\n+    /**\n+     * <p>getMaxIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getMaxIcon() {\n+        if (maxIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                maxIcon = new MacMaxIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                maxIcon = new BaseIcons.MaxSymbol(iconColor, iconShadowColor, iconRolloverColor,\n+                    new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return maxIcon;\n+    }\n+\n+    /**\n+     * <p>getMinIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getMinIcon() {\n+        if (minIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                minIcon = new MacMinIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                minIcon = new BaseIcons.MinSymbol(iconColor, iconShadowColor, iconRolloverColor,\n+                    new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return minIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterDownArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getSplitterDownArrowIcon() {\n+        if (splitterDownArrowIcon == null) {\n+            splitterDownArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterDownArrow.gif\");\n+        }\n+        return splitterDownArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterLeftArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getSplitterLeftArrowIcon() {\n+        if (splitterLeftArrowIcon == null) {\n+            splitterLeftArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterLeftArrow.gif\");\n+        }\n+        return splitterLeftArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterRightArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getSplitterRightArrowIcon() {\n+        if (splitterRightArrowIcon == null) {\n+            splitterRightArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterRightArrow.gif\");\n+        }\n+        return splitterRightArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterUpArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getSplitterUpArrowIcon() {\n+        if (splitterUpArrowIcon == null) {\n+            splitterUpArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterUpArrow.gif\");\n+        }\n+        return splitterUpArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getThumbHorIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getThumbHorIcon() {\n+        if (thumbHorIcon == null) {\n+            thumbHorIcon = new LazyImageIcon(\"aluminium/icons/thumb_hor.gif\");\n+        }\n+        return thumbHorIcon;\n+    }\n+\n+    /**\n+     * <p>getThumbHorIconRollover.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getThumbHorIconRollover() {\n+        if (thumbHorIconRollover == null) {\n+            thumbHorIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_hor_rollover.gif\");\n+        }\n+        return thumbHorIconRollover;\n+    }\n+\n+    /**\n+     * <p>getThumbVerIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getThumbVerIcon() {\n+        if (thumbVerIcon == null) {\n+            thumbVerIcon = new LazyImageIcon(\"aluminium/icons/thumb_ver.gif\");\n+        }\n+        return thumbVerIcon;\n+    }\n+\n+    /**\n+     * <p>getThumbVerIconRollover.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+    public static Icon getThumbVerIconRollover() {\n+        if (thumbVerIconRollover == null) {\n+            thumbVerIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_ver_rollover.gif\");\n+        }\n+        return thumbVerIconRollover;\n+    }\n \n } // end of class AluminiumIcons\n",
            "diff_size": 198
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/codebuff/385/AluminiumIcons.java\nindex 6ae17886472..9ae8a476ee4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/codebuff/385/AluminiumIcons.java\n@@ -24,9 +24,7 @@ package com.jtattoo.plaf.aluminium;\n \n import java.awt.Color;\n import java.awt.Insets;\n-\n import javax.swing.Icon;\n-\n import com.jtattoo.plaf.AbstractLookAndFeel;\n import com.jtattoo.plaf.BaseIcons;\n import com.jtattoo.plaf.LazyImageIcon;\n@@ -37,182 +35,215 @@ import com.jtattoo.plaf.LazyImageIcon;\n  * Author Michael Hagen\n  *\n  */\n+\n+\n public class AluminiumIcons extends BaseIcons {\n \n-\t/**\n-\t * <p>getCloseIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getCloseIcon() {\n-\t\tif (closeIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\tcloseIcon = new MacCloseIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\tcloseIcon = new BaseIcons.CloseSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn closeIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getIconIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getIconIcon() {\n-\t\tif (iconIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\ticonIcon = new MacIconIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\ticonIcon = new BaseIcons.IconSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn iconIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getMaxIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getMaxIcon() {\n-\t\tif (maxIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\tmaxIcon = new MacMaxIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\tmaxIcon = new BaseIcons.MaxSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn maxIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getMinIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getMinIcon() {\n-\t\tif (minIcon == null) {\n-\t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n-\t\t\t\tminIcon = new MacMinIcon();\n-\t\t\t} else {\n-\t\t\t\tColor iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n-\t\t\t\tColor iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n-\t\t\t\tColor iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n-\t\t\t\tminIcon = new BaseIcons.MinSymbol(iconColor, iconShadowColor, iconRolloverColor,\n-\t\t\t\t\t\tnew Insets(0, 0, 1, 0));\n-\t\t\t}\n-\t\t}\n-\t\treturn minIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterDownArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterDownArrowIcon() {\n-\t\tif (splitterDownArrowIcon == null) {\n-\t\t\tsplitterDownArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterDownArrow.gif\");\n-\t\t}\n-\t\treturn splitterDownArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterLeftArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterLeftArrowIcon() {\n-\t\tif (splitterLeftArrowIcon == null) {\n-\t\t\tsplitterLeftArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterLeftArrow.gif\");\n-\t\t}\n-\t\treturn splitterLeftArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterRightArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterRightArrowIcon() {\n-\t\tif (splitterRightArrowIcon == null) {\n-\t\t\tsplitterRightArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterRightArrow.gif\");\n-\t\t}\n-\t\treturn splitterRightArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getSplitterUpArrowIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getSplitterUpArrowIcon() {\n-\t\tif (splitterUpArrowIcon == null) {\n-\t\t\tsplitterUpArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterUpArrow.gif\");\n-\t\t}\n-\t\treturn splitterUpArrowIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbHorIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbHorIcon() {\n-\t\tif (thumbHorIcon == null) {\n-\t\t\tthumbHorIcon = new LazyImageIcon(\"aluminium/icons/thumb_hor.gif\");\n-\t\t}\n-\t\treturn thumbHorIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbHorIconRollover.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbHorIconRollover() {\n-\t\tif (thumbHorIconRollover == null) {\n-\t\t\tthumbHorIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_hor_rollover.gif\");\n-\t\t}\n-\t\treturn thumbHorIconRollover;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbVerIcon.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbVerIcon() {\n-\t\tif (thumbVerIcon == null) {\n-\t\t\tthumbVerIcon = new LazyImageIcon(\"aluminium/icons/thumb_ver.gif\");\n-\t\t}\n-\t\treturn thumbVerIcon;\n-\t}\n-\n-\t/**\n-\t * <p>getThumbVerIconRollover.</p>\n-\t *\n-\t * @return a {@link javax.swing.Icon} object.\n-\t */\n-\tpublic static Icon getThumbVerIconRollover() {\n-\t\tif (thumbVerIconRollover == null) {\n-\t\t\tthumbVerIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_ver_rollover.gif\");\n-\t\t}\n-\t\treturn thumbVerIconRollover;\n-\t}\n-\n-} // end of class AluminiumIcons\n+    /**\n+     * <p>getCloseIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getCloseIcon() {\n+        if (closeIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                closeIcon = new MacCloseIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                closeIcon = new BaseIcons.CloseSymbol(iconColor,\n+                    iconShadowColor,\n+                        iconRolloverColor,\n+                            new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return closeIcon;\n+    }\n+\n+    /**\n+     * <p>getIconIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getIconIcon() {\n+        if (iconIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                iconIcon = new MacIconIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                iconIcon = new BaseIcons.IconSymbol(iconColor,\n+                    iconShadowColor,\n+                        iconRolloverColor,\n+                            new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return iconIcon;\n+    }\n+\n+    /**\n+     * <p>getMaxIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getMaxIcon() {\n+        if (maxIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                maxIcon = new MacMaxIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                maxIcon = new BaseIcons.MaxSymbol(iconColor,\n+                    iconShadowColor,\n+                        iconRolloverColor,\n+                            new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return maxIcon;\n+    }\n+\n+    /**\n+     * <p>getMinIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getMinIcon() {\n+        if (minIcon == null) {\n+            if (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n+                minIcon = new MacMinIcon();\n+            } else {\n+                Color iconColor = AbstractLookAndFeel.getTheme().getWindowIconColor();\n+                Color iconShadowColor = AbstractLookAndFeel.getTheme().getWindowIconShadowColor();\n+                Color iconRolloverColor = AbstractLookAndFeel.getTheme().getWindowIconRolloverColor();\n+                minIcon = new BaseIcons.MinSymbol(iconColor,\n+                    iconShadowColor,\n+                        iconRolloverColor,\n+                            new Insets(0, 0, 1, 0));\n+            }\n+        }\n+        return minIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterDownArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getSplitterDownArrowIcon() {\n+        if (splitterDownArrowIcon == null) {\n+            splitterDownArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterDownArrow.gif\");\n+        }\n+        return splitterDownArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterLeftArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getSplitterLeftArrowIcon() {\n+        if (splitterLeftArrowIcon == null) {\n+            splitterLeftArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterLeftArrow.gif\");\n+        }\n+        return splitterLeftArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterRightArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getSplitterRightArrowIcon() {\n+        if (splitterRightArrowIcon == null) {\n+            splitterRightArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterRightArrow.gif\");\n+        }\n+        return splitterRightArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getSplitterUpArrowIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getSplitterUpArrowIcon() {\n+        if (splitterUpArrowIcon == null) {\n+            splitterUpArrowIcon = new LazyImageIcon(\"aluminium/icons/SplitterUpArrow.gif\");\n+        }\n+        return splitterUpArrowIcon;\n+    }\n+\n+    /**\n+     * <p>getThumbHorIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getThumbHorIcon() {\n+        if (thumbHorIcon == null) {\n+            thumbHorIcon = new LazyImageIcon(\"aluminium/icons/thumb_hor.gif\");\n+        }\n+        return thumbHorIcon;\n+    }\n+\n+    /**\n+     * <p>getThumbHorIconRollover.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getThumbHorIconRollover() {\n+        if (thumbHorIconRollover == null) {\n+            thumbHorIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_hor_rollover.gif\");\n+        }\n+        return thumbHorIconRollover;\n+    }\n+\n+    /**\n+     * <p>getThumbVerIcon.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getThumbVerIcon() {\n+        if (thumbVerIcon == null) {\n+            thumbVerIcon = new LazyImageIcon(\"aluminium/icons/thumb_ver.gif\");\n+        }\n+        return thumbVerIcon;\n+    }\n+\n+    /**\n+     * <p>getThumbVerIconRollover.</p>\n+     *\n+     * @return a {@link javax.swing.Icon} object.\n+     */\n+\n+\n+    public static Icon getThumbVerIconRollover() {\n+        if (thumbVerIconRollover == null) {\n+            thumbVerIconRollover = new LazyImageIcon(\"aluminium/icons/thumb_ver_rollover.gif\");\n+        }\n+        return thumbVerIconRollover;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 212
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/styler_random/385/AluminiumIcons.java\nindex 6ae17886472..e74701b4edc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/styler_random/385/AluminiumIcons.java\n@@ -39,12 +39,12 @@ import com.jtattoo.plaf.LazyImageIcon;\n  */\n public class AluminiumIcons extends BaseIcons {\n \n-\t/**\n+    /**\n \t * <p>getCloseIcon.</p>\n \t *\n \t * @return a {@link javax.swing.Icon} object.\n \t */\n-\tpublic static Icon getCloseIcon() {\n+           public static Icon getCloseIcon() {\n \t\tif (closeIcon == null) {\n \t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n \t\t\t\tcloseIcon = new MacCloseIcon();\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/styler_three_grams/385/AluminiumIcons.java\nindex 6ae17886472..3e6dac0fbf6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/errored/1/385/AluminiumIcons.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/LoboEvolution-LoboEvolution/styler_three_grams/385/AluminiumIcons.java\n@@ -38,13 +38,12 @@ import com.jtattoo.plaf.LazyImageIcon;\n  *\n  */\n public class AluminiumIcons extends BaseIcons {\n-\n-\t/**\n+/**\n \t * <p>getCloseIcon.</p>\n \t *\n \t * @return a {@link javax.swing.Icon} object.\n \t */\n-\tpublic static Icon getCloseIcon() {\n+ public static Icon getCloseIcon() {\n \t\tif (closeIcon == null) {\n \t\t\tif (AbstractLookAndFeel.getTheme().isMacStyleWindowDecorationOn()) {\n \t\t\t\tcloseIcon = new MacCloseIcon();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}