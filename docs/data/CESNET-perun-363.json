{
    "project_name": "CESNET-perun",
    "error_id": "363",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t */\n\tgetPublicationSystems {\n\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n\t\t}\n\t},",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/363/CabinetManagerMethod.java\nindex 801e3a7c324..23fca15c576 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/363/CabinetManagerMethod.java\n@@ -27,7 +27,7 @@ public enum CabinetManagerMethod implements ManagerMethod {\n \t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n \t */\n \tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\t\tpublic List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\treturn ac.getCabinetManager().getPublicationSystems();\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/363/CabinetManagerMethod.java\nindex 801e3a7c324..987b1e0bc87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/363/CabinetManagerMethod.java\n@@ -21,554 +21,554 @@ import cz.metacentrum.perun.cabinet.bl.CabinetException;\n \n public enum CabinetManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Get all PublicationSystems in Perun. If none, return empty list.\n-\t *\n-\t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n-\t */\n-\tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of all Categories in Perun or empty list of none present.\n-\t *\n-\t * @return List<Category> Categories\n-\t */\n-\tgetCategories {\n-\t\tpublic List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getCategories();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Category for Publications with specified name and rank.\n-\t *\n-\t * @param category Category new Category object\n-\t * @return Category Created Category with ID set\n-\t */\n-\tcreateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates publications category in Perun. Category to update\n-\t * is found by ID. When category rank is changed, priorityCoefficient\n-\t * for all authors of books from this category, is recalculated.\n-\t *\n-\t * @param category Category to update to\n-\t * @return Category Updated category\n-\t * @throw CabinetException When Category doesn't exists\n-\t */\n-\tupdateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete category by its ID. If category contains any publications,\n-\t * it can't be deleted.\n-\t *\n-\t * @param id int Category <code>id</code>\n-\t * @throw CabinetException When Category doesn't exists or has publications\n-\t */\n-\tdeleteCategory {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Thanks for Publication\n-\t *\n-\t * @param thanks Thanks new Thanks object\n-\t * @return Thanks Created thanks\n-\t */\n-\tcreateThanks {\n-\t\tpublic Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete Thanks by its ID.\n-\t *\n-\t * @param id int Thanks <code>id</code>\n-\t * @throw CabinetException When Thanks doesn't exists\n-\t */\n-\tdeleteThanks {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get ThanksForGUI of Publication specified by its ID or empty list.\n-\t *\n-\t * @param id int Publication <code>id</code>\n-\t * @return List<ThanksForGUI> Found thanks\n-\t */\n-\tgetRichThanksByPublicationId {\n-\t\tpublic List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t// SEARCH METHODS\n-\t/*#\n-\t * Finds publications of perun's user specified in param\n-\t * Search is done in external publication systems (MU, ZCU)\n-\t * All parameters are required.\n-\t *\n-\t * @param user int Perun user\n-\t * @param yearSince int Year since\n-\t * @param yearTill int Year till - must be equal or greater then yearSince\n-\t * @param pubSysNamespace String (MU or ZCU)\n-\t * @return List<Publication> Found publications\n-\t */\n-\tfindExternalPublications {\n-\t\tpublic List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findExternalPublications(ac.getSession(), parms.readInt(\"user\"), parms.readInt(\"yearSince\"), parms.readInt(\"yearTill\"), parms.readString(\"pubSysNamespace\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds publications according to provided instance. All set\n-\t\t* properties are used with conjunction AND.\n-\t\t*\n-\t\t* @param publication Publication JSON object\n-\t\t* @return List<Publication> Found publications\n-\t\t*/\n-\tfindPublicationByFilter {\n-\t\tpublic List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findPublicationsByFilter(parms.read(\"publication\", Publication.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\tfindSimilarPublications {\n-\t\tpublic Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\tSet<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n-\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tInteger userId = null;\n-\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t\tresult.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t\tresult.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t\tresult.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds rich publications in Cabinet by GUI filter:\n-\t\t*\n-\t\t* id = exact match (used when search for publication of authors)\n-\t\t* title = if \"like\" this substring\n-\t\t* year = exact match\n-\t\t* isbn = if \"like\" this substring\n-\t\t* category = exact match\n-\t\t* yearSince = if year >= yearSince\n-\t\t* yearTill = if year <= yearTill\n-\t\t*\n-\t\t* If you don't want to filter by publication params, do not include the attribute in the query.\n-\t\t*\n-\t\t* @param id int Publication <code>id</code>\n-\t\t* @param title String Title\n-\t\t* @param isbn String ISBN\n-\t\t* @param year int Year\n-\t\t* @param category int Category\n-\t\t* @param doi String DOI\n-\t\t* @param locked boolean Publication locked\n-\t\t* @param yearSince int Year since\n-\t\t* @param yearTill int Year till\n-\t\t* @param userId int User <code>id</code>\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\tfindPublicationsByGUIFilter {\n-\t\tpublic List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\t// set filter\n-\t\t\tPublication filter = new Publication();\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tInteger userId = null;\n-\n-\t\t\tif (parms.contains(\"id\")) {\n-\t\t\t\tfilter.setId(parms.readInt(\"id\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"year\")) {\n-\t\t\t\tfilter.setYear(parms.readInt(\"year\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"category\")) {\n-\t\t\t\tfilter.setCategoryId(parms.readInt(\"category\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"locked\")) {\n-\t\t\t\tif (parms.readString(\"locked\").equalsIgnoreCase(\"false\")) {\n-\t\t\t\t\tfilter.setLocked(false);\n-\t\t\t\t} else if (parms.readString(\"locked\").equalsIgnoreCase(\"true\")) {\n-\t\t\t\t\tfilter.setLocked(true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearSince\")) {\n-\t\t\t\tyearSince = parms.readInt(\"yearSince\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearTill\")) {\n-\t\t\t\tyearTill = parms.readInt(\"yearTill\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"userId\")) {\n-\t\t\t\t// just to be safe\n-\t\t\t\tif (parms.readInt(\"userId\") != 0) {\n-\t\t\t\t\tuserId = parms.readInt(\"userId\");\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// result list\n-\t\t\tList<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n-\n-\t\t\tresult = ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill);\n-\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns a Publication by its <code>id</code>.\n-\t\t* @param id int Publication <code>id</code>\n-\t\t* @return PublicationForGUI found Publication\n-\t\t*/\n-\tfindPublicationById {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findRichPublicationById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns all authorships.\n-\t\t* @return List<Authorship> Authorships\n-\t\t*/\n-\tfindAllAuthorships {\n-\t\tpublic List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAllAuthorships();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns all authorships according to a filter. Between filled properties is\n-\t\t* used conjunction AND.\n-\t\t*\n-\t\t* @param authorship Authorship JSON object\n-\t\t* @return List<Authorship> Authorships\n-\t\t*/\n-\tfindAuthorshipsByFilter {\n-\t\tpublic List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAuthorshipsByFilter(parms.read(\"authorship\", Authorship.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns an Authorship by its <code>id</code>.\n-\t\t* @param id int Authorship <code>id</code>\n-\t\t* @return Authorship found Authorship\n-\t\t*/\n-\tfindAuthorshipById {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAuthorshipById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns all authors.\n-\t\t* @return List<Author> Authors\n-\t\t*/\n-\tfindAllAuthors {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAllAuthors();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds Authors of a Publication.\n-\t\t* @param id int Publication <code>id</code>\n-\t\t* @return List<Author> Authors\n-\t\t*/\n-\tfindAuthorsByPublicationId {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAuthorsByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t// CREATE / UPDATE / DELETE / CHECK METHODS\n-\n-\t/*#\n-\t\t* Creates an Authorship.\n-\t\t* If the authorship already exists, it's returned.\n-\t\t* @param authorship Authorship JSON object\n-\t\t* @return Authorship Authorship\n-\t\t*/\n-\tcreateAuthorship {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship auth = parms.read(\"authorship\", Authorship.class);\n-\t\t\tif (ac.getCabinetApi().authorshipExists(auth)) {\n-\t\t\t\t// exists - return existing\n-\t\t\t\t// we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n-\t\t\t\tAuthorship filterAuthorship = new Authorship();\n-\t\t\t\tfilterAuthorship.setPublicationId(auth.getPublicationId());\n-\t\t\t\tfilterAuthorship.setUserId(auth.getUserId());\n-\t\t\t\treturn ac.getCabinetApi().findAuthorshipsByFilter(filterAuthorship).get(0);\n-\t\t\t\t// pubId and userId are unique and checked before, so we can safely return first and only authorship.\n-\t\t\t} else {\n-\t\t\t\tint id = ac.getCabinetApi().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n-\t\t\t\treturn ac.getCabinetApi().findAuthorshipById(id);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Updates an Authorship.\n-\t\t* @param authorship Authorship JSON object\n-\t\t* @return Authorship Updated Authorship\n-\t\t*/\n-\tupdateAuthorship {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship a = parms.read(\"authorship\", Authorship.class);\n-\t\t\tac.getCabinetApi().updateAuthorship(ac.getSession(), a);\n-\t\t\treturn ac.getCabinetApi().findAuthorshipById(a.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Deletes an Authorship.\n-\t\t* @param publicationId int Publication <code>id</code>\n-\t\t* @param userId int User <code>id</code>\n-\t\t*/\n-\tdeleteAuthorship {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship filter = new Authorship();\n-\t\t\tfilter.setPublicationId(parms.readInt(\"publicationId\"));\n-\t\t\tfilter.setUserId(parms.readInt(\"userId\"));\n-\t\t\t// pubId and UserId are unique, so return of first is safe\n-\t\t\tAuthorship authorship = ac.getCabinetApi().findAuthorshipsByFilter(filter).get(0);\n-\t\t\t// delete\n-\t\t\tac.getCabinetApi().deleteAuthorshipById(ac.getSession(), authorship.getId());\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Creates a new Publication.\n-\t\t* If publication already exists, it's returned.\n-\t\t*\n-\t\t* @param publication Publication JSON object\n-\t\t* @return Publication Publication\n-\t\t*/\n-\tcreatePublication {\n-\t\tpublic Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tif (ac.getCabinetApi().publicationExists(pub)) {\n-\t\t\t\t// if publication exists, do not create new\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\t// get for external pubs\n-\t\t\t\tif (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n-\t\t\t\t\tfilter.setExternalId(pub.getExternalId());\n-\t\t\t\t\tfilter.setPublicationSystemId(pub.getPublicationSystemId());\n-\t\t\t\t\t// externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n-\t\t\t\t\treturn ac.getCabinetApi().findRichPublicationsByFilter(filter, null).get(0);\n-\t\t\t\t\t// for internal pubs\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// else create one\n-\t\t\tint id = ac.getCabinetApi().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n-\t\t\treturn ac.getCabinetApi().findRichPublicationById(id);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Updates a Publication.\n-\t\t*\n-\t\t* @param publication Publication JSON object\n-\t\t* @return Publication Updated Publication\n-\t\t*/\n-\tupdatePublication {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tac.getCabinetApi().updatePublicationById(ac.getSession(), pub);\n-\t\t\treturn ac.getCabinetApi().findRichPublicationById(pub.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Deletes a Publication.\n-\t\t* @param id int Publication <code>id</code>\n-\t\t*/\n-\tdeletePublication {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetApi().deletePublicationById(ac.getSession(), parms.readInt(\"id\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Checks whether a publication exists.\n-\t\t* If you don't want to filter by a publication param, do not include the attribute in the query.\n-\t\t*\n-\t\t* @param externalId int External <code>id</code>\n-\t\t* @param pubSysId int PubSys <code>id</code>\n-\t\t* @param isbn String ISBN\n-\t\t* @return boolean True if exists\n-\t\t*/\n-\tcheckPublicationExists {\n-\t\tpublic Boolean call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tPublication pub = new Publication();\n-\t\t\tif (parms.contains(\"externalId\")) {\n-\t\t\t\tpub.setExternalId(parms.readInt(\"externalId\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"pubSysId\")) {\n-\t\t\t\tpub.setPublicationSystemId(parms.readInt(\"pubSysId\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tpub.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t}\n-\t\t\treturn ac.getCabinetApi().publicationExists(pub);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Locks and unlocks publications.\n-\t * @param publications List<Publication> Publications\n-\t * @param lock boolean true = lock, false = unlock\n-\t * @return int Number of updated rows\n-\t */\n-\tlockPublications {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Publication> pubs = parms.readList(\"publications\", Publication.class);\n-\t\t\tboolean lockState = parms.readBoolean(\"lock\");\n-\t\t\treturn ac.getCabinetApi().lockPublications(ac.getSession(), lockState, pubs);\n-\n-\t\t}\n-\t},\n-\n-\t// OTHER METHODS\n-\n-\t/*#\n-\t\t* Returns user's rank.\n-\t\t*\n-\t\t* @param user int User <code>id</code>\n-\t\t* @return double User's rank\n-\t\t*/\n-\tgetRank {\n-\t\tpublic Double call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().getRank(parms.readInt(\"user\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Recalculates \"publications\" attribute for\n-\t\t* all users who reported any publication\n-\t\t*/\n-\trecalculateThanksAttribute {\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.getCabinetApi().recalculateThanksAttribute(ac.getSession());\n-\t\t\treturn null;\n-\t\t}\n-\t};\n+    /*#\n+     * Get all PublicationSystems in Perun. If none, return empty list.\n+     *\n+     * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n+     */\n+    getPublicationSystems {\n+        public List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getPublicationSystems();\n+        }\n+    },\n+\n+    /*#\n+     * Return list of all Categories in Perun or empty list of none present.\n+     *\n+     * @return List<Category> Categories\n+     */\n+    getCategories {\n+        public List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getCategories();\n+        }\n+    },\n+\n+    /*#\n+     * Creates new Category for Publications with specified name and rank.\n+     *\n+     * @param category Category new Category object\n+     * @return Category Created Category with ID set\n+     */\n+    createCategory {\n+        public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+        }\n+    },\n+\n+    /*#\n+     * Updates publications category in Perun. Category to update\n+     * is found by ID. When category rank is changed, priorityCoefficient\n+     * for all authors of books from this category, is recalculated.\n+     *\n+     * @param category Category to update to\n+     * @return Category Updated category\n+     * @throw CabinetException When Category doesn't exists\n+     */\n+    updateCategory {\n+        public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+        }\n+    },\n+\n+    /*#\n+     * Delete category by its ID. If category contains any publications,\n+     * it can't be deleted.\n+     *\n+     * @param id int Category <code>id</code>\n+     * @throw CabinetException When Category doesn't exists or has publications\n+     */\n+    deleteCategory {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Creates new Thanks for Publication\n+     *\n+     * @param thanks Thanks new Thanks object\n+     * @return Thanks Created thanks\n+     */\n+    createThanks {\n+        public Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n+        }\n+    },\n+\n+    /*#\n+     * Delete Thanks by its ID.\n+     *\n+     * @param id int Thanks <code>id</code>\n+     * @throw CabinetException When Thanks doesn't exists\n+     */\n+    deleteThanks {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get ThanksForGUI of Publication specified by its ID or empty list.\n+     *\n+     * @param id int Publication <code>id</code>\n+     * @return List<ThanksForGUI> Found thanks\n+     */\n+    getRichThanksByPublicationId {\n+        public List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    // SEARCH METHODS\n+    /*#\n+     * Finds publications of perun's user specified in param\n+     * Search is done in external publication systems (MU, ZCU)\n+     * All parameters are required.\n+     *\n+     * @param user int Perun user\n+     * @param yearSince int Year since\n+     * @param yearTill int Year till - must be equal or greater then yearSince\n+     * @param pubSysNamespace String (MU or ZCU)\n+     * @return List<Publication> Found publications\n+     */\n+    findExternalPublications {\n+        public List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findExternalPublications(ac.getSession(), parms.readInt(\"user\"), parms.readInt(\"yearSince\"), parms.readInt(\"yearTill\"), parms.readString(\"pubSysNamespace\"));\n+        }\n+    },\n+\n+    /*#\n+     * Finds publications according to provided instance. All set\n+     * properties are used with conjunction AND.\n+     *\n+     * @param publication Publication JSON object\n+     * @return List<Publication> Found publications\n+     */\n+    findPublicationByFilter {\n+        public List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findPublicationsByFilter(parms.read(\"publication\", Publication.class));\n+        }\n+    },\n+\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param title String Title\n+     * @param isbn String ISBN\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param isbn String ISBN\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param title String Title\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param title String Title\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param isbn String ISBN\n+     * @param doi String DOI\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    /*#\n+     * Finds similar publications\n+     *\n+     * @param isbn String ISBN\n+     *\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    findSimilarPublications {\n+        public Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+\n+            Set<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n+\n+            int yearSince = 0;\n+            int yearTill = 0;\n+            Integer userId = null;\n+\n+            if (parms.contains(\"title\")) {\n+                Publication filter = new Publication();\n+                filter.setTitle(parms.readString(\"title\"));\n+                result.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n+            }\n+            if (parms.contains(\"isbn\")) {\n+                Publication filter = new Publication();\n+                filter.setIsbn(parms.readString(\"isbn\"));\n+                result.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n+            }\n+            if (parms.contains(\"doi\")) {\n+                Publication filter = new Publication();\n+                filter.setDoi(parms.readString(\"doi\"));\n+                result.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n+            }\n+            return result;\n+\n+        }\n+    },\n+\n+    /*#\n+     * Finds rich publications in Cabinet by GUI filter:\n+     *\n+     * id = exact match (used when search for publication of authors)\n+     * title = if \"like\" this substring\n+     * year = exact match\n+     * isbn = if \"like\" this substring\n+     * category = exact match\n+     * yearSince = if year >= yearSince\n+     * yearTill = if year <= yearTill\n+     *\n+     * If you don't want to filter by publication params, do not include the attribute in the query.\n+     *\n+     * @param id int Publication <code>id</code>\n+     * @param title String Title\n+     * @param isbn String ISBN\n+     * @param year int Year\n+     * @param category int Category\n+     * @param doi String DOI\n+     * @param locked boolean Publication locked\n+     * @param yearSince int Year since\n+     * @param yearTill int Year till\n+     * @param userId int User <code>id</code>\n+     * @return List<PublicationForGUI> Found publications\n+     */\n+    findPublicationsByGUIFilter {\n+        public List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+\n+            // set filter\n+            Publication filter = new Publication();\n+            int yearSince = 0;\n+            int yearTill = 0;\n+            Integer userId = null;\n+\n+            if (parms.contains(\"id\")) {\n+                filter.setId(parms.readInt(\"id\"));\n+            }\n+            if (parms.contains(\"title\")) {\n+                filter.setTitle(parms.readString(\"title\"));\n+            }\n+            if (parms.contains(\"isbn\")) {\n+                filter.setIsbn(parms.readString(\"isbn\"));\n+            }\n+            if (parms.contains(\"year\")) {\n+                filter.setYear(parms.readInt(\"year\"));\n+            }\n+            if (parms.contains(\"category\")) {\n+                filter.setCategoryId(parms.readInt(\"category\"));\n+            }\n+            if (parms.contains(\"doi\")) {\n+                filter.setDoi(parms.readString(\"doi\"));\n+            }\n+            if (parms.contains(\"locked\")) {\n+                if (parms.readString(\"locked\").equalsIgnoreCase(\"false\")) {\n+                    filter.setLocked(false);\n+                } else if (parms.readString(\"locked\").equalsIgnoreCase(\"true\")) {\n+                    filter.setLocked(true);\n+                }\n+            }\n+            if (parms.contains(\"yearSince\")) {\n+                yearSince = parms.readInt(\"yearSince\");\n+            }\n+            if (parms.contains(\"yearTill\")) {\n+                yearTill = parms.readInt(\"yearTill\");\n+            }\n+            if (parms.contains(\"userId\")) {\n+                // just to be safe\n+                if (parms.readInt(\"userId\") != 0) {\n+                    userId = parms.readInt(\"userId\");\n+                }\n+            }\n+\n+            // result list\n+            List<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n+\n+            result = ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill);\n+\n+            return result;\n+\n+        }\n+    },\n+\n+    /*#\n+     * Returns a Publication by its <code>id</code>.\n+     * @param id int Publication <code>id</code>\n+     * @return PublicationForGUI found Publication\n+     */\n+    findPublicationById {\n+        public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findRichPublicationById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all authorships.\n+     * @return List<Authorship> Authorships\n+     */\n+    findAllAuthorships {\n+        public List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findAllAuthorships();\n+        }\n+    },\n+\n+    /*#\n+     * Returns all authorships according to a filter. Between filled properties is\n+     * used conjunction AND.\n+     *\n+     * @param authorship Authorship JSON object\n+     * @return List<Authorship> Authorships\n+     */\n+    findAuthorshipsByFilter {\n+        public List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findAuthorshipsByFilter(parms.read(\"authorship\", Authorship.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns an Authorship by its <code>id</code>.\n+     * @param id int Authorship <code>id</code>\n+     * @return Authorship found Authorship\n+     */\n+    findAuthorshipById {\n+        public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findAuthorshipById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all authors.\n+     * @return List<Author> Authors\n+     */\n+    findAllAuthors {\n+        public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findAllAuthors();\n+        }\n+    },\n+\n+    /*#\n+     * Finds Authors of a Publication.\n+     * @param id int Publication <code>id</code>\n+     * @return List<Author> Authors\n+     */\n+    findAuthorsByPublicationId {\n+        public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().findAuthorsByPublicationId(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    // CREATE / UPDATE / DELETE / CHECK METHODS\n+\n+    /*#\n+     * Creates an Authorship.\n+     * If the authorship already exists, it's returned.\n+     * @param authorship Authorship JSON object\n+     * @return Authorship Authorship\n+     */\n+    createAuthorship {\n+        public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Authorship auth = parms.read(\"authorship\", Authorship.class);\n+            if (ac.getCabinetApi().authorshipExists(auth)) {\n+                // exists - return existing\n+                // we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n+                Authorship filterAuthorship = new Authorship();\n+                filterAuthorship.setPublicationId(auth.getPublicationId());\n+                filterAuthorship.setUserId(auth.getUserId());\n+                return ac.getCabinetApi().findAuthorshipsByFilter(filterAuthorship).get(0);\n+                // pubId and userId are unique and checked before, so we can safely return first and only authorship.\n+            } else {\n+                int id = ac.getCabinetApi().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n+                return ac.getCabinetApi().findAuthorshipById(id);\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Updates an Authorship.\n+     * @param authorship Authorship JSON object\n+     * @return Authorship Updated Authorship\n+     */\n+    updateAuthorship {\n+        public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Authorship a = parms.read(\"authorship\", Authorship.class);\n+            ac.getCabinetApi().updateAuthorship(ac.getSession(), a);\n+            return ac.getCabinetApi().findAuthorshipById(a.getId());\n+        }\n+    },\n+\n+    /*#\n+     * Deletes an Authorship.\n+     * @param publicationId int Publication <code>id</code>\n+     * @param userId int User <code>id</code>\n+     */\n+    deleteAuthorship {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Authorship filter = new Authorship();\n+            filter.setPublicationId(parms.readInt(\"publicationId\"));\n+            filter.setUserId(parms.readInt(\"userId\"));\n+            // pubId and UserId are unique, so return of first is safe\n+            Authorship authorship = ac.getCabinetApi().findAuthorshipsByFilter(filter).get(0);\n+            // delete\n+            ac.getCabinetApi().deleteAuthorshipById(ac.getSession(), authorship.getId());\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Creates a new Publication.\n+     * If publication already exists, it's returned.\n+     *\n+     * @param publication Publication JSON object\n+     * @return Publication Publication\n+     */\n+    createPublication {\n+        public Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Publication pub = parms.read(\"publication\", Publication.class);\n+            if (ac.getCabinetApi().publicationExists(pub)) {\n+                // if publication exists, do not create new\n+                Publication filter = new Publication();\n+                // get for external pubs\n+                if (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n+                    filter.setExternalId(pub.getExternalId());\n+                    filter.setPublicationSystemId(pub.getPublicationSystemId());\n+                    // externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n+                    return ac.getCabinetApi().findRichPublicationsByFilter(filter, null).get(0);\n+                    // for internal pubs\n+                }\n+            }\n+            // else create one\n+            int id = ac.getCabinetApi().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n+            return ac.getCabinetApi().findRichPublicationById(id);\n+        }\n+    },\n+\n+    /*#\n+     * Updates a Publication.\n+     *\n+     * @param publication Publication JSON object\n+     * @return Publication Updated Publication\n+     */\n+    updatePublication {\n+        public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            Publication pub = parms.read(\"publication\", Publication.class);\n+            ac.getCabinetApi().updatePublicationById(ac.getSession(), pub);\n+            return ac.getCabinetApi().findRichPublicationById(pub.getId());\n+        }\n+    },\n+\n+    /*#\n+     * Deletes a Publication.\n+     * @param id int Publication <code>id</code>\n+     */\n+    deletePublication {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+            ac.getCabinetApi().deletePublicationById(ac.getSession(), parms.readInt(\"id\"));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Checks whether a publication exists.\n+     * If you don't want to filter by a publication param, do not include the attribute in the query.\n+     *\n+     * @param externalId int External <code>id</code>\n+     * @param pubSysId int PubSys <code>id</code>\n+     * @param isbn String ISBN\n+     * @return boolean True if exists\n+     */\n+    checkPublicationExists {\n+        public Boolean call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            Publication pub = new Publication();\n+            if (parms.contains(\"externalId\")) {\n+                pub.setExternalId(parms.readInt(\"externalId\"));\n+            }\n+            if (parms.contains(\"pubSysId\")) {\n+                pub.setPublicationSystemId(parms.readInt(\"pubSysId\"));\n+            }\n+            if (parms.contains(\"isbn\")) {\n+                pub.setIsbn(parms.readString(\"isbn\"));\n+            }\n+            return ac.getCabinetApi().publicationExists(pub);\n+        }\n+    },\n+\n+    /*#\n+     * Locks and unlocks publications.\n+     * @param publications List<Publication> Publications\n+     * @param lock boolean true = lock, false = unlock\n+     * @return int Number of updated rows\n+     */\n+    lockPublications {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.stateChangingCheck();\n+\n+            List<Publication> pubs = parms.readList(\"publications\", Publication.class);\n+            boolean lockState = parms.readBoolean(\"lock\");\n+            return ac.getCabinetApi().lockPublications(ac.getSession(), lockState, pubs);\n+\n+        }\n+    },\n+\n+    // OTHER METHODS\n+\n+    /*#\n+     * Returns user's rank.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return double User's rank\n+     */\n+    getRank {\n+        public Double call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            return ac.getCabinetApi().getRank(parms.readInt(\"user\"));\n+        }\n+    },\n+\n+    /*#\n+     * Recalculates \"publications\" attribute for\n+     * all users who reported any publication\n+     */\n+    recalculateThanksAttribute {\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+            ac.getCabinetApi().recalculateThanksAttribute(ac.getSession());\n+            return null;\n+        }\n+    };\n \n }\n",
            "diff_size": 549
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/363/CabinetManagerMethod.java\nindex 801e3a7c324..30d386a1164 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/363/CabinetManagerMethod.java\n@@ -4,7 +4,6 @@ import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.rpc.ApiCaller;\n import cz.metacentrum.perun.rpc.ManagerMethod;\n@@ -19,556 +18,609 @@ import cz.metacentrum.perun.cabinet.model.Thanks;\n import cz.metacentrum.perun.cabinet.model.ThanksForGUI;\n import cz.metacentrum.perun.cabinet.bl.CabinetException;\n \n+\n public enum CabinetManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Get all PublicationSystems in Perun. If none, return empty list.\n-\t *\n-\t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n-\t */\n-\tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of all Categories in Perun or empty list of none present.\n-\t *\n-\t * @return List<Category> Categories\n-\t */\n-\tgetCategories {\n-\t\tpublic List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getCategories();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Category for Publications with specified name and rank.\n-\t *\n-\t * @param category Category new Category object\n-\t * @return Category Created Category with ID set\n-\t */\n-\tcreateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates publications category in Perun. Category to update\n-\t * is found by ID. When category rank is changed, priorityCoefficient\n-\t * for all authors of books from this category, is recalculated.\n-\t *\n-\t * @param category Category to update to\n-\t * @return Category Updated category\n-\t * @throw CabinetException When Category doesn't exists\n-\t */\n-\tupdateCategory {\n-\t\tpublic Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete category by its ID. If category contains any publications,\n-\t * it can't be deleted.\n-\t *\n-\t * @param id int Category <code>id</code>\n-\t * @throw CabinetException When Category doesn't exists or has publications\n-\t */\n-\tdeleteCategory {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates new Thanks for Publication\n-\t *\n-\t * @param thanks Thanks new Thanks object\n-\t * @return Thanks Created thanks\n-\t */\n-\tcreateThanks {\n-\t\tpublic Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete Thanks by its ID.\n-\t *\n-\t * @param id int Thanks <code>id</code>\n-\t * @throw CabinetException When Thanks doesn't exists\n-\t */\n-\tdeleteThanks {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get ThanksForGUI of Publication specified by its ID or empty list.\n-\t *\n-\t * @param id int Publication <code>id</code>\n-\t * @return List<ThanksForGUI> Found thanks\n-\t */\n-\tgetRichThanksByPublicationId {\n-\t\tpublic List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t// SEARCH METHODS\n-\t/*#\n-\t * Finds publications of perun's user specified in param\n-\t * Search is done in external publication systems (MU, ZCU)\n-\t * All parameters are required.\n-\t *\n-\t * @param user int Perun user\n-\t * @param yearSince int Year since\n-\t * @param yearTill int Year till - must be equal or greater then yearSince\n-\t * @param pubSysNamespace String (MU or ZCU)\n-\t * @return List<Publication> Found publications\n-\t */\n-\tfindExternalPublications {\n-\t\tpublic List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findExternalPublications(ac.getSession(), parms.readInt(\"user\"), parms.readInt(\"yearSince\"), parms.readInt(\"yearTill\"), parms.readString(\"pubSysNamespace\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds publications according to provided instance. All set\n-\t\t* properties are used with conjunction AND.\n-\t\t*\n-\t\t* @param publication Publication JSON object\n-\t\t* @return List<Publication> Found publications\n-\t\t*/\n-\tfindPublicationByFilter {\n-\t\tpublic List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findPublicationsByFilter(parms.read(\"publication\", Publication.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param title String Title\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t* @param doi String DOI\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\t/*#\n-\t\t* Finds similar publications\n-\t\t*\n-\t\t* @param isbn String ISBN\n-\t\t*\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\tfindSimilarPublications {\n-\t\tpublic Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\tSet<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n-\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tInteger userId = null;\n-\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t\tresult.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t\tresult.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t\tresult.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds rich publications in Cabinet by GUI filter:\n-\t\t*\n-\t\t* id = exact match (used when search for publication of authors)\n-\t\t* title = if \"like\" this substring\n-\t\t* year = exact match\n-\t\t* isbn = if \"like\" this substring\n-\t\t* category = exact match\n-\t\t* yearSince = if year >= yearSince\n-\t\t* yearTill = if year <= yearTill\n-\t\t*\n-\t\t* If you don't want to filter by publication params, do not include the attribute in the query.\n-\t\t*\n-\t\t* @param id int Publication <code>id</code>\n-\t\t* @param title String Title\n-\t\t* @param isbn String ISBN\n-\t\t* @param year int Year\n-\t\t* @param category int Category\n-\t\t* @param doi String DOI\n-\t\t* @param locked boolean Publication locked\n-\t\t* @param yearSince int Year since\n-\t\t* @param yearTill int Year till\n-\t\t* @param userId int User <code>id</code>\n-\t\t* @return List<PublicationForGUI> Found publications\n-\t\t*/\n-\tfindPublicationsByGUIFilter {\n-\t\tpublic List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\n-\t\t\t// set filter\n-\t\t\tPublication filter = new Publication();\n-\t\t\tint yearSince = 0;\n-\t\t\tint yearTill = 0;\n-\t\t\tInteger userId = null;\n-\n-\t\t\tif (parms.contains(\"id\")) {\n-\t\t\t\tfilter.setId(parms.readInt(\"id\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"title\")) {\n-\t\t\t\tfilter.setTitle(parms.readString(\"title\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tfilter.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"year\")) {\n-\t\t\t\tfilter.setYear(parms.readInt(\"year\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"category\")) {\n-\t\t\t\tfilter.setCategoryId(parms.readInt(\"category\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"doi\")) {\n-\t\t\t\tfilter.setDoi(parms.readString(\"doi\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"locked\")) {\n-\t\t\t\tif (parms.readString(\"locked\").equalsIgnoreCase(\"false\")) {\n-\t\t\t\t\tfilter.setLocked(false);\n-\t\t\t\t} else if (parms.readString(\"locked\").equalsIgnoreCase(\"true\")) {\n-\t\t\t\t\tfilter.setLocked(true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearSince\")) {\n-\t\t\t\tyearSince = parms.readInt(\"yearSince\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"yearTill\")) {\n-\t\t\t\tyearTill = parms.readInt(\"yearTill\");\n-\t\t\t}\n-\t\t\tif (parms.contains(\"userId\")) {\n-\t\t\t\t// just to be safe\n-\t\t\t\tif (parms.readInt(\"userId\") != 0) {\n-\t\t\t\t\tuserId = parms.readInt(\"userId\");\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// result list\n-\t\t\tList<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n-\n-\t\t\tresult = ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill);\n-\n-\t\t\treturn result;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns a Publication by its <code>id</code>.\n-\t\t* @param id int Publication <code>id</code>\n-\t\t* @return PublicationForGUI found Publication\n-\t\t*/\n-\tfindPublicationById {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findRichPublicationById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns all authorships.\n-\t\t* @return List<Authorship> Authorships\n-\t\t*/\n-\tfindAllAuthorships {\n-\t\tpublic List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAllAuthorships();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns all authorships according to a filter. Between filled properties is\n-\t\t* used conjunction AND.\n-\t\t*\n-\t\t* @param authorship Authorship JSON object\n-\t\t* @return List<Authorship> Authorships\n-\t\t*/\n-\tfindAuthorshipsByFilter {\n-\t\tpublic List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAuthorshipsByFilter(parms.read(\"authorship\", Authorship.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns an Authorship by its <code>id</code>.\n-\t\t* @param id int Authorship <code>id</code>\n-\t\t* @return Authorship found Authorship\n-\t\t*/\n-\tfindAuthorshipById {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAuthorshipById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Returns all authors.\n-\t\t* @return List<Author> Authors\n-\t\t*/\n-\tfindAllAuthors {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAllAuthors();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Finds Authors of a Publication.\n-\t\t* @param id int Publication <code>id</code>\n-\t\t* @return List<Author> Authors\n-\t\t*/\n-\tfindAuthorsByPublicationId {\n-\t\tpublic List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().findAuthorsByPublicationId(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t// CREATE / UPDATE / DELETE / CHECK METHODS\n-\n-\t/*#\n-\t\t* Creates an Authorship.\n-\t\t* If the authorship already exists, it's returned.\n-\t\t* @param authorship Authorship JSON object\n-\t\t* @return Authorship Authorship\n-\t\t*/\n-\tcreateAuthorship {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship auth = parms.read(\"authorship\", Authorship.class);\n-\t\t\tif (ac.getCabinetApi().authorshipExists(auth)) {\n-\t\t\t\t// exists - return existing\n-\t\t\t\t// we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n-\t\t\t\tAuthorship filterAuthorship = new Authorship();\n-\t\t\t\tfilterAuthorship.setPublicationId(auth.getPublicationId());\n-\t\t\t\tfilterAuthorship.setUserId(auth.getUserId());\n-\t\t\t\treturn ac.getCabinetApi().findAuthorshipsByFilter(filterAuthorship).get(0);\n-\t\t\t\t// pubId and userId are unique and checked before, so we can safely return first and only authorship.\n-\t\t\t} else {\n-\t\t\t\tint id = ac.getCabinetApi().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n-\t\t\t\treturn ac.getCabinetApi().findAuthorshipById(id);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Updates an Authorship.\n-\t\t* @param authorship Authorship JSON object\n-\t\t* @return Authorship Updated Authorship\n-\t\t*/\n-\tupdateAuthorship {\n-\t\tpublic Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship a = parms.read(\"authorship\", Authorship.class);\n-\t\t\tac.getCabinetApi().updateAuthorship(ac.getSession(), a);\n-\t\t\treturn ac.getCabinetApi().findAuthorshipById(a.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Deletes an Authorship.\n-\t\t* @param publicationId int Publication <code>id</code>\n-\t\t* @param userId int User <code>id</code>\n-\t\t*/\n-\tdeleteAuthorship {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tAuthorship filter = new Authorship();\n-\t\t\tfilter.setPublicationId(parms.readInt(\"publicationId\"));\n-\t\t\tfilter.setUserId(parms.readInt(\"userId\"));\n-\t\t\t// pubId and UserId are unique, so return of first is safe\n-\t\t\tAuthorship authorship = ac.getCabinetApi().findAuthorshipsByFilter(filter).get(0);\n-\t\t\t// delete\n-\t\t\tac.getCabinetApi().deleteAuthorshipById(ac.getSession(), authorship.getId());\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Creates a new Publication.\n-\t\t* If publication already exists, it's returned.\n-\t\t*\n-\t\t* @param publication Publication JSON object\n-\t\t* @return Publication Publication\n-\t\t*/\n-\tcreatePublication {\n-\t\tpublic Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tif (ac.getCabinetApi().publicationExists(pub)) {\n-\t\t\t\t// if publication exists, do not create new\n-\t\t\t\tPublication filter = new Publication();\n-\t\t\t\t// get for external pubs\n-\t\t\t\tif (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n-\t\t\t\t\tfilter.setExternalId(pub.getExternalId());\n-\t\t\t\t\tfilter.setPublicationSystemId(pub.getPublicationSystemId());\n-\t\t\t\t\t// externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n-\t\t\t\t\treturn ac.getCabinetApi().findRichPublicationsByFilter(filter, null).get(0);\n-\t\t\t\t\t// for internal pubs\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// else create one\n-\t\t\tint id = ac.getCabinetApi().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n-\t\t\treturn ac.getCabinetApi().findRichPublicationById(id);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Updates a Publication.\n-\t\t*\n-\t\t* @param publication Publication JSON object\n-\t\t* @return Publication Updated Publication\n-\t\t*/\n-\tupdatePublication {\n-\t\tpublic PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tPublication pub = parms.read(\"publication\", Publication.class);\n-\t\t\tac.getCabinetApi().updatePublicationById(ac.getSession(), pub);\n-\t\t\treturn ac.getCabinetApi().findRichPublicationById(pub.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Deletes a Publication.\n-\t\t* @param id int Publication <code>id</code>\n-\t\t*/\n-\tdeletePublication {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getCabinetApi().deletePublicationById(ac.getSession(), parms.readInt(\"id\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Checks whether a publication exists.\n-\t\t* If you don't want to filter by a publication param, do not include the attribute in the query.\n-\t\t*\n-\t\t* @param externalId int External <code>id</code>\n-\t\t* @param pubSysId int PubSys <code>id</code>\n-\t\t* @param isbn String ISBN\n-\t\t* @return boolean True if exists\n-\t\t*/\n-\tcheckPublicationExists {\n-\t\tpublic Boolean call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tPublication pub = new Publication();\n-\t\t\tif (parms.contains(\"externalId\")) {\n-\t\t\t\tpub.setExternalId(parms.readInt(\"externalId\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"pubSysId\")) {\n-\t\t\t\tpub.setPublicationSystemId(parms.readInt(\"pubSysId\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"isbn\")) {\n-\t\t\t\tpub.setIsbn(parms.readString(\"isbn\"));\n-\t\t\t}\n-\t\t\treturn ac.getCabinetApi().publicationExists(pub);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Locks and unlocks publications.\n-\t * @param publications List<Publication> Publications\n-\t * @param lock boolean true = lock, false = unlock\n-\t * @return int Number of updated rows\n-\t */\n-\tlockPublications {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Publication> pubs = parms.readList(\"publications\", Publication.class);\n-\t\t\tboolean lockState = parms.readBoolean(\"lock\");\n-\t\t\treturn ac.getCabinetApi().lockPublications(ac.getSession(), lockState, pubs);\n-\n-\t\t}\n-\t},\n-\n-\t// OTHER METHODS\n-\n-\t/*#\n-\t\t* Returns user's rank.\n-\t\t*\n-\t\t* @param user int User <code>id</code>\n-\t\t* @return double User's rank\n-\t\t*/\n-\tgetRank {\n-\t\tpublic Double call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\treturn ac.getCabinetApi().getRank(parms.readInt(\"user\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t\t* Recalculates \"publications\" attribute for\n-\t\t* all users who reported any publication\n-\t\t*/\n-\trecalculateThanksAttribute {\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n-\t\t\tac.getCabinetApi().recalculateThanksAttribute(ac.getSession());\n-\t\t\treturn null;\n-\t\t}\n-\t};\n-\n-}\n+ /*#\n+  * Get all PublicationSystems in Perun. If none, return empty list.\n+  *\n+  * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n+  */\n+\n+\n+ getPublicationSystems {\n+  public List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getPublicationSystems();\n+  }\n+ },\n+\n+ /*#\n+  * Return list of all Categories in Perun or empty list of none present.\n+  *\n+  * @return List<Category> Categories\n+  */\n+\n+\n+ getCategories {\n+  public List<Category> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getCategories();\n+  }\n+ },\n+\n+ /*#\n+  * Creates new Category for Publications with specified name and rank.\n+  *\n+  * @param category Category new Category object\n+  * @return Category Created Category with ID set\n+  */\n+\n+\n+ createCategory {\n+  public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getCabinetManager().createCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+  }\n+ },\n+\n+ /*#\n+  * Updates publications category in Perun. Category to update\n+  * is found by ID. When category rank is changed, priorityCoefficient\n+  * for all authors of books from this category, is recalculated.\n+  *\n+  * @param category Category to update to\n+  * @return Category Updated category\n+  * @throw CabinetException When Category doesn't exists\n+  */\n+\n+\n+ updateCategory {\n+  public Category call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getCabinetManager().updateCategory(ac.getSession(), parms.read(\"category\", Category.class));\n+  }\n+ },\n+\n+ /*#\n+  * Delete category by its ID. If category contains any publications,\n+  * it can't be deleted.\n+  *\n+  * @param id int Category <code>id</code>\n+  * @throw CabinetException When Category doesn't exists or has publications\n+  */\n+\n+\n+ deleteCategory {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getCabinetManager().deleteCategory(ac.getSession(), ac.getCategoryById(parms.readInt(\"id\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Creates new Thanks for Publication\n+  *\n+  * @param thanks Thanks new Thanks object\n+  * @return Thanks Created thanks\n+  */\n+\n+\n+ createThanks {\n+  public Thanks call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getCabinetManager().createThanks(ac.getSession(), parms.read(\"thanks\", Thanks.class));\n+  }\n+ },\n+\n+ /*#\n+  * Delete Thanks by its ID.\n+  *\n+  * @param id int Thanks <code>id</code>\n+  * @throw CabinetException When Thanks doesn't exists\n+  */\n+\n+\n+ deleteThanks {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getCabinetManager().deleteThanks(ac.getSession(), ac.getThanksById(parms.readInt(\"id\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get ThanksForGUI of Publication specified by its ID or empty list.\n+  *\n+  * @param id int Publication <code>id</code>\n+  * @return List<ThanksForGUI> Found thanks\n+  */\n+\n+\n+ getRichThanksByPublicationId {\n+  public List<ThanksForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getCabinetManager().getRichThanksByPublicationId(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ // SEARCH METHODS\n+ /*#\n+  * Finds publications of perun's user specified in param\n+  * Search is done in external publication systems (MU, ZCU)\n+  * All parameters are required.\n+  *\n+  * @param user int Perun user\n+  * @param yearSince int Year since\n+  * @param yearTill int Year till - must be equal or greater then yearSince\n+  * @param pubSysNamespace String (MU or ZCU)\n+  * @return List<Publication> Found publications\n+  */\n+\n+\n+ findExternalPublications {\n+  public List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findExternalPublications(ac.getSession(),\n+parms.readInt(\"user\"),\n+parms.readInt(\"yearSince\"),\n+parms.readInt(\"yearTill\"),\n+parms.readString(\"pubSysNamespace\"));\n+  }\n+ },\n+\n+ /*#\n+  * Finds publications according to provided instance. All set\n+  * properties are used with conjunction AND.\n+  *\n+  * @param publication Publication JSON object\n+  * @return List<Publication> Found publications\n+  */\n+\n+\n+ findPublicationByFilter {\n+  public List<Publication> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findPublicationsByFilter(parms.read(\"publication\", Publication.class));\n+  }\n+ },\n+\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param title String Title\n+  * @param isbn String ISBN\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param isbn String ISBN\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param title String Title\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param title String Title\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param isbn String ISBN\n+  * @param doi String DOI\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+ /*#\n+  * Finds similar publications\n+  *\n+  * @param isbn String ISBN\n+  *\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+\n+\n+ findSimilarPublications {\n+  public Set<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   Set<PublicationForGUI> result = new HashSet<PublicationForGUI>();\n+   int yearSince = 0;\n+   int yearTill = 0;\n+   Integer userId = null;\n+   if (parms.contains(\"title\")) {\n+    Publication filter = new Publication();\n+    filter.setTitle(parms.readString(\"title\"));\n+    result.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n+   }\n+   if (parms.contains(\"isbn\")) {\n+    Publication filter = new Publication();\n+    filter.setIsbn(parms.readString(\"isbn\"));\n+    result.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n+   }\n+   if (parms.contains(\"doi\")) {\n+    Publication filter = new Publication();\n+    filter.setDoi(parms.readString(\"doi\"));\n+    result.addAll(ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill));\n+   }\n+\n+   return result;\n+  }\n+ },\n+\n+ /*#\n+  * Finds rich publications in Cabinet by GUI filter:\n+  *\n+  * id = exact match (used when search for publication of authors)\n+  * title = if \"like\" this substring\n+  * year = exact match\n+  * isbn = if \"like\" this substring\n+  * category = exact match\n+  * yearSince = if year >= yearSince\n+  * yearTill = if year <= yearTill\n+  *\n+  * If you don't want to filter by publication params, do not include the attribute in the query.\n+  *\n+  * @param id int Publication <code>id</code>\n+  * @param title String Title\n+  * @param isbn String ISBN\n+  * @param year int Year\n+  * @param category int Category\n+  * @param doi String DOI\n+  * @param locked boolean Publication locked\n+  * @param yearSince int Year since\n+  * @param yearTill int Year till\n+  * @param userId int User <code>id</code>\n+  * @return List<PublicationForGUI> Found publications\n+  */\n+\n+\n+ findPublicationsByGUIFilter {\n+  public List<PublicationForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+\n+   // set filter\n+   Publication filter = new Publication();\n+   int yearSince = 0;\n+   int yearTill = 0;\n+   Integer userId = null;\n+   if (parms.contains(\"id\")) {\n+    filter.setId(parms.readInt(\"id\"));\n+   }\n+   if (parms.contains(\"title\")) {\n+    filter.setTitle(parms.readString(\"title\"));\n+   }\n+   if (parms.contains(\"isbn\")) {\n+    filter.setIsbn(parms.readString(\"isbn\"));\n+   }\n+   if (parms.contains(\"year\")) {\n+    filter.setYear(parms.readInt(\"year\"));\n+   }\n+   if (parms.contains(\"category\")) {\n+    filter.setCategoryId(parms.readInt(\"category\"));\n+   }\n+   if (parms.contains(\"doi\")) {\n+    filter.setDoi(parms.readString(\"doi\"));\n+   }\n+   if (parms.contains(\"locked\")) {\n+    if (parms.readString(\"locked\").equalsIgnoreCase(\"false\")) {\n+     filter.setLocked(false);\n+    } else if (parms.readString(\"locked\").equalsIgnoreCase(\"true\")) {\n+     filter.setLocked(true);\n+    }\n+   }\n+   if (parms.contains(\"yearSince\")) {\n+    yearSince = parms.readInt(\"yearSince\");\n+   }\n+   if (parms.contains(\"yearTill\")) {\n+    yearTill = parms.readInt(\"yearTill\");\n+   }\n+   if (parms.contains(\"userId\")) {\n+    // just to be safe\n+    if (parms.readInt(\"userId\") != 0) {\n+     userId = parms.readInt(\"userId\");\n+    }\n+   }\n+\n+   // result list\n+   List<PublicationForGUI> result = new ArrayList<PublicationForGUI>();\n+   result = ac.getCabinetApi().findRichPublicationsByGUIFilter(filter, userId, yearSince, yearTill);\n+   return result;\n+  }\n+ },\n+\n+ /*#\n+  * Returns a Publication by its <code>id</code>.\n+  * @param id int Publication <code>id</code>\n+  * @return PublicationForGUI found Publication\n+  */\n+\n+\n+ findPublicationById {\n+  public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findRichPublicationById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all authorships.\n+  * @return List<Authorship> Authorships\n+  */\n+\n+\n+ findAllAuthorships {\n+  public List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findAllAuthorships();\n+  }\n+ },\n+\n+ /*#\n+  * Returns all authorships according to a filter. Between filled properties is\n+  * used conjunction AND.\n+  *\n+  * @param authorship Authorship JSON object\n+  * @return List<Authorship> Authorships\n+  */\n+\n+\n+ findAuthorshipsByFilter {\n+  public List<Authorship> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findAuthorshipsByFilter(parms.read(\"authorship\", Authorship.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns an Authorship by its <code>id</code>.\n+  * @param id int Authorship <code>id</code>\n+  * @return Authorship found Authorship\n+  */\n+\n+\n+ findAuthorshipById {\n+  public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findAuthorshipById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all authors.\n+  * @return List<Author> Authors\n+  */\n+\n+\n+ findAllAuthors {\n+  public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findAllAuthors();\n+  }\n+ },\n+\n+ /*#\n+  * Finds Authors of a Publication.\n+  * @param id int Publication <code>id</code>\n+  * @return List<Author> Authors\n+  */\n+\n+\n+ findAuthorsByPublicationId {\n+  public List<Author> call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().findAuthorsByPublicationId(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ // CREATE / UPDATE / DELETE / CHECK METHODS\n+\n+ /*#\n+  * Creates an Authorship.\n+  * If the authorship already exists, it's returned.\n+  * @param authorship Authorship JSON object\n+  * @return Authorship Authorship\n+  */\n+\n+\n+ createAuthorship {\n+  public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Authorship auth = parms.read(\"authorship\", Authorship.class);\n+   if (ac.getCabinetApi().authorshipExists(auth)) {\n+    // exists - return existing\n+    // we must take only unique params, when called multiple time from GUI and entry was created by somebody else\n+    Authorship filterAuthorship = new Authorship();\n+    filterAuthorship.setPublicationId(auth.getPublicationId());\n+    filterAuthorship.setUserId(auth.getUserId());\n+    return ac.getCabinetApi().findAuthorshipsByFilter(filterAuthorship).get(0);\n+    // pubId and userId are unique and checked before, so we can safely return first and only authorship.\n+   } else {\n+    int id = ac.getCabinetApi().createAuthorship(ac.getSession(), parms.read(\"authorship\", Authorship.class));\n+    return ac.getCabinetApi().findAuthorshipById(id);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Updates an Authorship.\n+  * @param authorship Authorship JSON object\n+  * @return Authorship Updated Authorship\n+  */\n+\n+\n+ updateAuthorship {\n+  public Authorship call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Authorship a = parms.read(\"authorship\", Authorship.class);\n+   ac.getCabinetApi().updateAuthorship(ac.getSession(), a);\n+   return ac.getCabinetApi().findAuthorshipById(a.getId());\n+  }\n+ },\n+\n+ /*#\n+  * Deletes an Authorship.\n+  * @param publicationId int Publication <code>id</code>\n+  * @param userId int User <code>id</code>\n+  */\n+\n+\n+ deleteAuthorship {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Authorship filter = new Authorship();\n+   filter.setPublicationId(parms.readInt(\"publicationId\"));\n+   filter.setUserId(parms.readInt(\"userId\"));\n+   // pubId and UserId are unique, so return of first is safe\n+   Authorship authorship = ac.getCabinetApi().findAuthorshipsByFilter(filter).get(0);\n+   // delete\n+   ac.getCabinetApi().deleteAuthorshipById(ac.getSession(), authorship.getId());\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Creates a new Publication.\n+  * If publication already exists, it's returned.\n+  *\n+  * @param publication Publication JSON object\n+  * @return Publication Publication\n+  */\n+\n+\n+ createPublication {\n+  public Publication call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Publication pub = parms.read(\"publication\", Publication.class);\n+   if (ac.getCabinetApi().publicationExists(pub)) {\n+    // if publication exists, do not create new\n+    Publication filter = new Publication();\n+    // get for external pubs\n+    if (pub.getExternalId() != 0 && pub.getPublicationSystemId() != 0) {\n+     filter.setExternalId(pub.getExternalId());\n+     filter.setPublicationSystemId(pub.getPublicationSystemId());\n+     // externalId and publicationSystemId are unique and checked before so we can safely return first and only publication.\n+     return ac.getCabinetApi().findRichPublicationsByFilter(filter, null).get(0);\n+     // for internal pubs\n+    }\n+   }\n+   // else create one\n+\n+   int id = ac.getCabinetApi().createPublication(ac.getSession(), parms.read(\"publication\", Publication.class));\n+   return ac.getCabinetApi().findRichPublicationById(id);\n+  }\n+ },\n+\n+ /*#\n+  * Updates a Publication.\n+  *\n+  * @param publication Publication JSON object\n+  * @return Publication Updated Publication\n+  */\n+\n+\n+ updatePublication {\n+  public PublicationForGUI call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   Publication pub = parms.read(\"publication\", Publication.class);\n+   ac.getCabinetApi().updatePublicationById(ac.getSession(), pub);\n+   return ac.getCabinetApi().findRichPublicationById(pub.getId());\n+  }\n+ },\n+\n+ /*#\n+  * Deletes a Publication.\n+  * @param id int Publication <code>id</code>\n+  */\n+\n+\n+ deletePublication {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   ac.getCabinetApi().deletePublicationById(ac.getSession(), parms.readInt(\"id\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Checks whether a publication exists.\n+  * If you don't want to filter by a publication param, do not include the attribute in the query.\n+  *\n+  * @param externalId int External <code>id</code>\n+  * @param pubSysId int PubSys <code>id</code>\n+  * @param isbn String ISBN\n+  * @return boolean True if exists\n+  */\n+\n+\n+ checkPublicationExists {\n+  public Boolean call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   Publication pub = new Publication();\n+   if (parms.contains(\"externalId\")) {\n+    pub.setExternalId(parms.readInt(\"externalId\"));\n+   }\n+   if (parms.contains(\"pubSysId\")) {\n+    pub.setPublicationSystemId(parms.readInt(\"pubSysId\"));\n+   }\n+   if (parms.contains(\"isbn\")) {\n+    pub.setIsbn(parms.readString(\"isbn\"));\n+   }\n+\n+   return ac.getCabinetApi().publicationExists(pub);\n+  }\n+ },\n+\n+ /*#\n+  * Locks and unlocks publications.\n+  * @param publications List<Publication> Publications\n+  * @param lock boolean true = lock, false = unlock\n+  * @return int Number of updated rows\n+  */\n+\n+\n+ lockPublications {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.stateChangingCheck();\n+   List<Publication> pubs = parms.readList(\"publications\", Publication.class);\n+   boolean lockState = parms.readBoolean(\"lock\");\n+   return ac.getCabinetApi().lockPublications(ac.getSession(), lockState, pubs);\n+  }\n+ },\n+\n+ // OTHER METHODS\n+\n+ /*#\n+  * Returns user's rank.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return double User's rank\n+  */\n+\n+\n+ getRank {\n+  public Double call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   return ac.getCabinetApi().getRank(parms.readInt(\"user\"));\n+  }\n+ },\n+\n+ /*#\n+  * Recalculates \"publications\" attribute for\n+  * all users who reported any publication\n+  */\n+\n+\n+ recalculateThanksAttribute {\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException, CabinetException {\n+   ac.getCabinetApi().recalculateThanksAttribute(ac.getSession());\n+   return null;\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 605
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/363/CabinetManagerMethod.java\nindex 801e3a7c324..23fca15c576 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/363/CabinetManagerMethod.java\n@@ -27,7 +27,7 @@ public enum CabinetManagerMethod implements ManagerMethod {\n \t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n \t */\n \tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\t\tpublic List<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\treturn ac.getCabinetManager().getPublicationSystems();\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/363/CabinetManagerMethod.java\nindex 801e3a7c324..f4a23eda7c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/363/CabinetManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/363/CabinetManagerMethod.java\n@@ -27,8 +27,9 @@ public enum CabinetManagerMethod implements ManagerMethod {\n \t * @return List<PublicationSystem> List of all PublicationSystems or empty list.\n \t */\n \tgetPublicationSystems {\n-\t\tpublic \tList<PublicationSystem> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n+\t\tpublic List<PublicationSystem >call ( ApiCaller\n+\t\t\tac , Deserializer parms) throws PerunException {\n+\t\t\t\treturn ac.getCabinetManager().getPublicationSystems();\n \t\t}\n \t},\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}