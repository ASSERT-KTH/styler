{
    "project_name": "EMResearch-EMB",
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "122",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        }\n      } catch (PatternSyntaxException e) {\n        // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n        //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n        //(.*)(sg|pl.*acc.*\n        //                 ^",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/92/PolishSynthesizer.java\nindex 5d7d19ab99c..49a34d2a68a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/92/PolishSynthesizer.java\n@@ -119,7 +119,7 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n           }\n         }\n       } catch (PatternSyntaxException e) {\n-        // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n+      // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n         //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n         //(.*)(sg|pl.*acc.*\n         //                 ^\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/92/PolishSynthesizer.java\nindex 5d7d19ab99c..f99772862e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/92/PolishSynthesizer.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.synthesis.pl;\n \n import java.io.IOException;\n@@ -41,146 +42,146 @@ import org.languagetool.synthesis.SynthesizerTools;\n \n /**\n  * Polish word form synthesizer. Based on project Morfologik.\n- * \n+ *\n  * @author Marcin Milkowski\n  */\n \n public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n \n-  private static final String RESOURCE_FILENAME = \"/pl/polish_synth.dict\";\n-  private static final String TAGS_FILE_NAME = \"/pl/polish_tags.txt\";\n-\n-  private static final String POTENTIAL_NEGATION_TAG = \":aff\";\n-  private static final String NEGATION_TAG = \":neg\";\n-  private static final String COMP_TAG = \"com\";\n-  private static final String SUP_TAG = \"sup\";\n+    private static final String RESOURCE_FILENAME = \"/pl/polish_synth.dict\";\n+    private static final String TAGS_FILE_NAME = \"/pl/polish_tags.txt\";\n \n-  private List<String> possibleTags;\n+    private static final String POTENTIAL_NEGATION_TAG = \":aff\";\n+    private static final String NEGATION_TAG = \":neg\";\n+    private static final String COMP_TAG = \"com\";\n+    private static final String SUP_TAG = \"sup\";\n \n-  public PolishSynthesizer(Language lang) {\n-    super(RESOURCE_FILENAME, TAGS_FILE_NAME, lang);\n-  }\n+    private List<String> possibleTags;\n \n-  @Override\n-  public final String[] synthesize(AnalyzedToken token, String posTag) throws IOException {\n-    if (posTag == null) {\n-      return null;\n+    public PolishSynthesizer(Language lang) {\n+        super(RESOURCE_FILENAME, TAGS_FILE_NAME, lang);\n     }\n-    IStemmer synthesizer = new DictionaryLookup(getDictionary());\n-    boolean isNegated = false;\n-    if (token.getPOSTag() != null) {\n-      isNegated = posTag.indexOf(NEGATION_TAG) > 0\n-          || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n-          && !(posTag.indexOf(COMP_TAG) > 0) && !(posTag.indexOf(SUP_TAG) > 0);\n-    }\n-    if (posTag.indexOf('+') > 0) {\n-      return synthesize(token, posTag, true);\n-    }\n-    List<String> forms = getWordForms(token, posTag, isNegated, synthesizer);\n-    return forms.toArray(new String[0]);\n-  }\n-\n-  @Override\n-  public final String[] synthesize(AnalyzedToken token, String pos, boolean posTagRegExp) throws IOException {\n-    if (pos == null) {\n-      return null;\n+\n+    @Override\n+    public final String[] synthesize(AnalyzedToken token, String posTag) throws IOException {\n+        if (posTag == null) {\n+            return null;\n+        }\n+        IStemmer synthesizer = new DictionaryLookup(getDictionary());\n+        boolean isNegated = false;\n+        if (token.getPOSTag() != null) {\n+            isNegated = posTag.indexOf(NEGATION_TAG) > 0\n+                || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n+                && !(posTag.indexOf(COMP_TAG) > 0) && !(posTag.indexOf(SUP_TAG) > 0);\n+        }\n+        if (posTag.indexOf('+') > 0) {\n+            return synthesize(token, posTag, true);\n+        }\n+        List<String> forms = getWordForms(token, posTag, isNegated, synthesizer);\n+        return forms.toArray(new String[0]);\n     }\n-    String posTag = pos;\n-    if (posTagRegExp) {\n-      if (possibleTags == null) {\n-        try (InputStream stream = JLanguageTool.getDataBroker().getFromResourceDirAsStream(TAGS_FILE_NAME)) {\n-          possibleTags = SynthesizerTools.loadWords(stream);\n+\n+    @Override\n+    public final String[] synthesize(AnalyzedToken token, String pos, boolean posTagRegExp) throws IOException {\n+        if (pos == null) {\n+            return null;\n         }\n-      }\n-      IStemmer synthesizer = new DictionaryLookup(getDictionary());\n-      List<String> results = new ArrayList<>();\n-\n-      boolean isNegated = false;\n-      if (token.getPOSTag() != null) {\n-        isNegated = posTag.indexOf(NEGATION_TAG) > 0\n-            || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n-            && !(posTag.indexOf(COMP_TAG) > 0)\n-            && !(posTag.indexOf(SUP_TAG) > 0);\n-      }\n-\n-      if (isNegated) {\n-        posTag = posTag.replaceAll(NEGATION_TAG, POTENTIAL_NEGATION_TAG + \"?\");\n-      }\n-\n-      try {\n-        Pattern p = Pattern.compile(posTag.replace('+', '|'));\n-        for (String tag : possibleTags) {\n-          Matcher m = p.matcher(tag);\n-          if (m.matches()) {\n-            List<String> wordForms = getWordForms(token, tag, isNegated, synthesizer);\n-            if (wordForms != null) {\n-              results.addAll(wordForms);\n+        String posTag = pos;\n+        if (posTagRegExp) {\n+            if (possibleTags == null) {\n+                try (InputStream stream = JLanguageTool.getDataBroker().getFromResourceDirAsStream(TAGS_FILE_NAME)) {\n+                    possibleTags = SynthesizerTools.loadWords(stream);\n+                }\n+            }\n+            IStemmer synthesizer = new DictionaryLookup(getDictionary());\n+            List<String> results = new ArrayList<>();\n+\n+            boolean isNegated = false;\n+            if (token.getPOSTag() != null) {\n+                isNegated = posTag.indexOf(NEGATION_TAG) > 0\n+                    || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n+                    && !(posTag.indexOf(COMP_TAG) > 0)\n+                    && !(posTag.indexOf(SUP_TAG) > 0);\n             }\n-          }\n+\n+            if (isNegated) {\n+                posTag = posTag.replaceAll(NEGATION_TAG, POTENTIAL_NEGATION_TAG + \"?\");\n+            }\n+\n+            try {\n+                Pattern p = Pattern.compile(posTag.replace('+', '|'));\n+                for (String tag : possibleTags) {\n+                    Matcher m = p.matcher(tag);\n+                    if (m.matches()) {\n+                        List<String> wordForms = getWordForms(token, tag, isNegated, synthesizer);\n+                        if (wordForms != null) {\n+                            results.addAll(wordForms);\n+                        }\n+                    }\n+                }\n+            } catch (PatternSyntaxException e) {\n+                // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n+                //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n+                //(.*)(sg|pl.*acc.*\n+                //                 ^\n+                e.printStackTrace();\n+            }\n+            //remove duplicates\n+            Set<String> hs = new HashSet<>(results);\n+            results.clear();\n+            results.addAll(hs);\n+\n+            return results.toArray(new String[0]);\n         }\n-      } catch (PatternSyntaxException e) {\n-        // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n-        //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n-        //(.*)(sg|pl.*acc.*\n-        //                 ^\n-        e.printStackTrace();\n-      }\n-      //remove duplicates\n-      Set<String> hs = new HashSet<>(results);\n-      results.clear();\n-      results.addAll(hs);     \n-      \n-      return results.toArray(new String[0]);\n+        return synthesize(token, posTag);\n     }\n-    return synthesize(token, posTag);\n-  }\n-\n-  @Override\n-  public final String getPosTagCorrection(String posTag) {\n-    if (posTag.contains(\".\")) {\n-      String[] tags = posTag.split(\":\");\n-      int pos = -1;\n-      for (int i = 0; i < tags.length; i++) {\n-        if (tags[i].matches(\".*[a-z]\\\\.[a-z].*\")) {\n-          tags[i] = \"(.*\" + tags[i].replace(\".\", \".*|.*\") + \".*)\";\n-          pos = i;\n+\n+    @Override\n+    public final String getPosTagCorrection(String posTag) {\n+        if (posTag.contains(\".\")) {\n+            String[] tags = posTag.split(\":\");\n+            int pos = -1;\n+            for (int i = 0; i < tags.length; i++) {\n+                if (tags[i].matches(\".*[a-z]\\\\.[a-z].*\")) {\n+                    tags[i] = \"(.*\" + tags[i].replace(\".\", \".*|.*\") + \".*)\";\n+                    pos = i;\n+                }\n+            }\n+            if (pos == -1) {\n+                return posTag;\n+            }\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(tags[0]);\n+            for (int i = 1; i < tags.length; i++) {\n+                sb.append(':');\n+                sb.append(tags[i]);\n+            }\n+            return sb.toString();\n         }\n-      }\n-      if (pos == -1) {\n         return posTag;\n-      }\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(tags[0]);\n-      for (int i = 1; i < tags.length; i++) {\n-        sb.append(':');\n-        sb.append(tags[i]);\n-      }\n-      return sb.toString();\n     }\n-    return posTag;\n-  }\n-\n-  private List<String> getWordForms(AnalyzedToken token, String posTag,\n-      boolean isNegated, IStemmer synthesizer) {\n-    List<String> forms = new ArrayList<>();\n-    List<WordData> wordForms;\n-    if (isNegated) {\n-      wordForms = synthesizer.lookup(token.getLemma() + \"|\"\n-          + posTag.replaceFirst(NEGATION_TAG, POTENTIAL_NEGATION_TAG));\n-      if (wordForms != null) {                      \n-        for (WordData wd : wordForms) {\n-          forms.add(\"nie\" + wd.getStem());\n-        }\n-      }\n-    } else {\n-      wordForms = synthesizer.lookup(token.getLemma() + \"|\" + posTag);\n-      for (WordData wd : wordForms) {\n-        if (wd.getStem() != null) {\n-          forms.add(wd.getStem().toString());\n+\n+    private List<String> getWordForms(AnalyzedToken token, String posTag,\n+                                      boolean isNegated, IStemmer synthesizer) {\n+        List<String> forms = new ArrayList<>();\n+        List<WordData> wordForms;\n+        if (isNegated) {\n+            wordForms = synthesizer.lookup(token.getLemma() + \"|\"\n+                + posTag.replaceFirst(NEGATION_TAG, POTENTIAL_NEGATION_TAG));\n+            if (wordForms != null) {\n+                for (WordData wd : wordForms) {\n+                    forms.add(\"nie\" + wd.getStem());\n+                }\n+            }\n+        } else {\n+            wordForms = synthesizer.lookup(token.getLemma() + \"|\" + posTag);\n+            for (WordData wd : wordForms) {\n+                if (wd.getStem() != null) {\n+                    forms.add(wd.getStem().toString());\n+                }\n+            }\n         }\n-      }      \n+        return forms;\n     }\n-    return forms;\n-  }\n \n }\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/92/PolishSynthesizer.java\nindex 5d7d19ab99c..1255179b21c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/92/PolishSynthesizer.java\n@@ -69,9 +69,7 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n     IStemmer synthesizer = new DictionaryLookup(getDictionary());\n     boolean isNegated = false;\n     if (token.getPOSTag() != null) {\n-      isNegated = posTag.indexOf(NEGATION_TAG) > 0\n-          || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n-          && !(posTag.indexOf(COMP_TAG) > 0) && !(posTag.indexOf(SUP_TAG) > 0);\n+      isNegated = posTag.indexOf(NEGATION_TAG) > 0 || token.getPOSTag().indexOf(NEGATION_TAG) > 0 && !(posTag.indexOf(COMP_TAG) > 0) && !(posTag.indexOf(SUP_TAG) > 0);\n     }\n     if (posTag.indexOf('+') > 0) {\n       return synthesize(token, posTag, true);\n@@ -97,11 +95,9 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n \n       boolean isNegated = false;\n       if (token.getPOSTag() != null) {\n-        isNegated = posTag.indexOf(NEGATION_TAG) > 0\n-            || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n-            && !(posTag.indexOf(COMP_TAG) > 0)\n+        isNegated = posTag.indexOf(NEGATION_TAG) > 0 || token.getPOSTag().indexOf(NEGATION_TAG) > 0 && !(posTag.indexOf(COMP_TAG) > 0)\n             && !(posTag.indexOf(SUP_TAG) > 0);\n-      }\n+    }\n \n       if (isNegated) {\n         posTag = posTag.replaceAll(NEGATION_TAG, POTENTIAL_NEGATION_TAG + \"?\");\n@@ -128,10 +124,9 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n       //remove duplicates\n       Set<String> hs = new HashSet<>(results);\n       results.clear();\n-      results.addAll(hs);     \n-      \n-      return results.toArray(new String[0]);\n-    }\n+      results.addAll(hs);\n+return results.toArray(new String[0]);\n+  }\n     return synthesize(token, posTag);\n   }\n \n@@ -167,9 +162,9 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n     if (isNegated) {\n       wordForms = synthesizer.lookup(token.getLemma() + \"|\"\n           + posTag.replaceFirst(NEGATION_TAG, POTENTIAL_NEGATION_TAG));\n-      if (wordForms != null) {                      \n-        for (WordData wd : wordForms) {\n-          forms.add(\"nie\" + wd.getStem());\n+      if (wordForms != null) {\n+    for (WordData wd : wordForms) {\n+    forms.add(\"nie\" + wd.getStem());\n         }\n       }\n     } else {\n@@ -178,9 +173,9 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n         if (wd.getStem() != null) {\n           forms.add(wd.getStem().toString());\n         }\n-      }      \n-    }\n-    return forms;\n+      }\n+  }\n+return forms;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/92/PolishSynthesizer.java\nindex 5d7d19ab99c..12498f78fb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/92/PolishSynthesizer.java\n@@ -27,11 +27,9 @@ import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.regex.PatternSyntaxException;\n-\n import morfologik.stemming.DictionaryLookup;\n import morfologik.stemming.IStemmer;\n import morfologik.stemming.WordData;\n-\n import org.languagetool.AnalyzedToken;\n import org.languagetool.JLanguageTool;\n import org.languagetool.Language;\n@@ -45,142 +43,136 @@ import org.languagetool.synthesis.SynthesizerTools;\n  * @author Marcin Milkowski\n  */\n \n-public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n-\n-  private static final String RESOURCE_FILENAME = \"/pl/polish_synth.dict\";\n-  private static final String TAGS_FILE_NAME = \"/pl/polish_tags.txt\";\n \n-  private static final String POTENTIAL_NEGATION_TAG = \":aff\";\n-  private static final String NEGATION_TAG = \":neg\";\n-  private static final String COMP_TAG = \"com\";\n-  private static final String SUP_TAG = \"sup\";\n-\n-  private List<String> possibleTags;\n+public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n \n-  public PolishSynthesizer(Language lang) {\n-    super(RESOURCE_FILENAME, TAGS_FILE_NAME, lang);\n-  }\n+    private static final String RESOURCE_FILENAME = \"/pl/polish_synth.dict\";\n+    private static final String TAGS_FILE_NAME = \"/pl/polish_tags.txt\";\n+    private static final String POTENTIAL_NEGATION_TAG = \":aff\";\n+    private static final String NEGATION_TAG = \":neg\";\n+    private static final String COMP_TAG = \"com\";\n+    private static final String SUP_TAG = \"sup\";\n+    private List<String> possibleTags;\n \n-  @Override\n-  public final String[] synthesize(AnalyzedToken token, String posTag) throws IOException {\n-    if (posTag == null) {\n-      return null;\n-    }\n-    IStemmer synthesizer = new DictionaryLookup(getDictionary());\n-    boolean isNegated = false;\n-    if (token.getPOSTag() != null) {\n-      isNegated = posTag.indexOf(NEGATION_TAG) > 0\n-          || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n-          && !(posTag.indexOf(COMP_TAG) > 0) && !(posTag.indexOf(SUP_TAG) > 0);\n-    }\n-    if (posTag.indexOf('+') > 0) {\n-      return synthesize(token, posTag, true);\n+    public PolishSynthesizer(Language lang) {\n+        super(RESOURCE_FILENAME, TAGS_FILE_NAME, lang);\n     }\n-    List<String> forms = getWordForms(token, posTag, isNegated, synthesizer);\n-    return forms.toArray(new String[0]);\n-  }\n \n-  @Override\n-  public final String[] synthesize(AnalyzedToken token, String pos, boolean posTagRegExp) throws IOException {\n-    if (pos == null) {\n-      return null;\n-    }\n-    String posTag = pos;\n-    if (posTagRegExp) {\n-      if (possibleTags == null) {\n-        try (InputStream stream = JLanguageTool.getDataBroker().getFromResourceDirAsStream(TAGS_FILE_NAME)) {\n-          possibleTags = SynthesizerTools.loadWords(stream);\n+    @Override\n+    public final String[] synthesize(AnalyzedToken token, String posTag) throws IOException {\n+        if (posTag == null) {\n+            return null;\n         }\n-      }\n-      IStemmer synthesizer = new DictionaryLookup(getDictionary());\n-      List<String> results = new ArrayList<>();\n-\n-      boolean isNegated = false;\n-      if (token.getPOSTag() != null) {\n-        isNegated = posTag.indexOf(NEGATION_TAG) > 0\n-            || token.getPOSTag().indexOf(NEGATION_TAG) > 0\n-            && !(posTag.indexOf(COMP_TAG) > 0)\n-            && !(posTag.indexOf(SUP_TAG) > 0);\n-      }\n-\n-      if (isNegated) {\n-        posTag = posTag.replaceAll(NEGATION_TAG, POTENTIAL_NEGATION_TAG + \"?\");\n-      }\n+        IStemmer synthesizer = new DictionaryLookup(getDictionary());\n+        boolean isNegated = false;\n+        if (token.getPOSTag() != null) {\n+            isNegated = posTag.indexOf(NEGATION_TAG) > 0 || token.getPOSTag().indexOf(NEGATION_TAG) > 0 && !(posTag.indexOf(COMP_TAG) > 0)\n+                                                                && !(posTag.indexOf(SUP_TAG) > 0);\n+        }\n+        if (posTag.indexOf('+') > 0) {\n+            return synthesize(token, posTag, true);\n+        }\n+        List<String> forms = getWordForms(token, posTag, isNegated, synthesizer);\n+        return forms.toArray(new String[0]);\n+    }\n \n-      try {\n-        Pattern p = Pattern.compile(posTag.replace('+', '|'));\n-        for (String tag : possibleTags) {\n-          Matcher m = p.matcher(tag);\n-          if (m.matches()) {\n-            List<String> wordForms = getWordForms(token, tag, isNegated, synthesizer);\n-            if (wordForms != null) {\n-              results.addAll(wordForms);\n+    @Override\n+    public final String[] synthesize(AnalyzedToken token, String pos, boolean posTagRegExp) throws IOException {\n+        if (pos == null) {\n+            return null;\n+        }\n+        String posTag = pos;\n+        if (posTagRegExp) {\n+        if (possibleTags == null) {\n+            try (InputStream stream = JLanguageTool.getDataBroker().getFromResourceDirAsStream(TAGS_FILE_NAME)) {\n+                                      possibleTags = SynthesizerTools.loadWords(stream);\n             }\n-          }\n         }\n-      } catch (PatternSyntaxException e) {\n+        IStemmer synthesizer = new DictionaryLookup(getDictionary());\n+        List<String> results = new ArrayList<>();\n+        boolean isNegated = false;\n+        if (token.getPOSTag() != null) {\n+            isNegated = posTag.indexOf(NEGATION_TAG) > 0 || token.getPOSTag().indexOf(NEGATION_TAG) > 0 && !(posTag.indexOf(COMP_TAG) > 0)\n+                                                                && !(posTag.indexOf(SUP_TAG) > 0);\n+        }\n+        if (isNegated) {\n+            posTag = posTag.replaceAll(NEGATION_TAG, POTENTIAL_NEGATION_TAG + \"?\");\n+        }\n+        try {\n+            Pattern p = Pattern.compile(posTag.replace('+', '|'));\n+            for (String tag : possibleTags) {\n+            Matcher m = p.matcher(tag);\n+            if (m.matches()) {\n+                List<String> wordForms = getWordForms(token, tag, isNegated, synthesizer);\n+                if (wordForms != null) {\n+                    results.addAll(wordForms);\n+                }\n+            }\n+            }\n+        } catch (PatternSyntaxException e) {\n         // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n         //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n         //(.*)(sg|pl.*acc.*\n         //                 ^\n-        e.printStackTrace();\n-      }\n+            e.printStackTrace();\n+        }\n       //remove duplicates\n-      Set<String> hs = new HashSet<>(results);\n-      results.clear();\n-      results.addAll(hs);     \n-      \n-      return results.toArray(new String[0]);\n+        Set<String> hs = new HashSet<>(results);\n+        results.clear();\n+        results.addAll(hs);\n+        return results.toArray(new String[0]);\n+        }\n+        return synthesize(token, posTag);\n     }\n-    return synthesize(token, posTag);\n-  }\n \n-  @Override\n-  public final String getPosTagCorrection(String posTag) {\n-    if (posTag.contains(\".\")) {\n-      String[] tags = posTag.split(\":\");\n-      int pos = -1;\n-      for (int i = 0; i < tags.length; i++) {\n-        if (tags[i].matches(\".*[a-z]\\\\.[a-z].*\")) {\n-          tags[i] = \"(.*\" + tags[i].replace(\".\", \".*|.*\") + \".*)\";\n-          pos = i;\n+    @Override\n+    public final String getPosTagCorrection(String posTag) {\n+        if (posTag.contains(\".\")) {\n+            String[] tags = posTag.split(\":\");\n+            int pos = -1;\n+            for (int i = 0; i < tags.length; i++) {\n+                if (tags[i].matches(\".*[a-z]\\\\.[a-z].*\")) {\n+                    tags[i] = \"(.*\" + tags[i].replace(\".\", \".*|.*\") + \".*)\";\n+                    pos = i;\n+                }\n+            }\n+            if (pos == -1) {\n+                return posTag;\n+            }\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(tags[0]);\n+\n+            for (int i = 1; i < tags.length; i++) {\n+                                      sb.append(':');\n+                                      sb.append(tags[i]);\n+            }\n+            return sb.toString();\n         }\n-      }\n-      if (pos == -1) {\n         return posTag;\n-      }\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(tags[0]);\n-      for (int i = 1; i < tags.length; i++) {\n-        sb.append(':');\n-        sb.append(tags[i]);\n-      }\n-      return sb.toString();\n     }\n-    return posTag;\n-  }\n \n-  private List<String> getWordForms(AnalyzedToken token, String posTag,\n-      boolean isNegated, IStemmer synthesizer) {\n-    List<String> forms = new ArrayList<>();\n-    List<WordData> wordForms;\n-    if (isNegated) {\n-      wordForms = synthesizer.lookup(token.getLemma() + \"|\"\n-          + posTag.replaceFirst(NEGATION_TAG, POTENTIAL_NEGATION_TAG));\n-      if (wordForms != null) {                      \n-        for (WordData wd : wordForms) {\n-          forms.add(\"nie\" + wd.getStem());\n-        }\n-      }\n-    } else {\n-      wordForms = synthesizer.lookup(token.getLemma() + \"|\" + posTag);\n-      for (WordData wd : wordForms) {\n-        if (wd.getStem() != null) {\n-          forms.add(wd.getStem().toString());\n+    private List<String> getWordForms(AnalyzedToken token, String posTag, boolean isNegated, IStemmer synthesizer) {\n+        List<String> forms = new ArrayList<>();\n+        List<WordData> wordForms;\n+        if (isNegated) {\n+            wordForms = synthesizer.lookup(token.getLemma() + \"|\"\n+            + posTag.replaceFirst(NEGATION_TAG, POTENTIAL_NEGATION_TAG));\n+            if (wordForms != null) {\n+                for (WordData wd : wordForms) {\n+                                       forms.add(\"nie\"\n+                                           + wd.getStem());\n+                }\n+            }\n+        } else {\n+            wordForms = synthesizer.lookup(token.getLemma() + \"|\"\n+            + posTag);\n+\n+            for (WordData wd : wordForms) {\n+                if (wd.getStem() != null) {\n+                    forms.add(wd.getStem().toString());\n+                }\n+            }\n         }\n-      }      \n+        return forms;\n     }\n-    return forms;\n-  }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 164
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/92/PolishSynthesizer.java\nindex 5d7d19ab99c..49a34d2a68a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/92/PolishSynthesizer.java\n@@ -119,7 +119,7 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n           }\n         }\n       } catch (PatternSyntaxException e) {\n-        // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n+      // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n         //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n         //(.*)(sg|pl.*acc.*\n         //                 ^\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/92/PolishSynthesizer.java\nindex 5d7d19ab99c..333e99ed805 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/92/PolishSynthesizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/92/PolishSynthesizer.java\n@@ -119,7 +119,8 @@ public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n           }\n         }\n       } catch (PatternSyntaxException e) {\n-        // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n+\n+     // catch this rare error which I couldn't fix yet (https://github.com/languagetool-org/languagetool/issues/1651):\n         //java.util.regex.PatternSyntaxException: Unclosed group near index 17\n         //(.*)(sg|pl.*acc.*\n         //                 ^\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}