{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1549",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1549/ConstraintDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1549/ConstraintDefinition.java\nindex c684dde3c13..09200728051 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1549/ConstraintDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1549/ConstraintDefinition.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.schema;\n \n import org.neo4j.graphdb.Label;\n@@ -30,46 +31,46 @@ import org.neo4j.graphdb.RelationshipType;\n  */\n public interface ConstraintDefinition\n {\n-    /**\n-     * This accessor method returns a label which this constraint is associated with if this constraint has type\n-     * {@link ConstraintType#UNIQUENESS} or {@link ConstraintType#NODE_PROPERTY_EXISTENCE}.\n-     * Type of the constraint can be examined by calling {@link #getConstraintType()} or\n-     * {@link #isConstraintType(ConstraintType)} methods.\n-     *\n-     * @return the {@link Label} this constraint is associated with.\n-     * @throws IllegalStateException when this constraint is associated with relationships.\n-     */\n-    Label getLabel();\n+  /**\n+   * This accessor method returns a label which this constraint is associated with if this constraint has type\n+   * {@link ConstraintType#UNIQUENESS} or {@link ConstraintType#NODE_PROPERTY_EXISTENCE}.\n+   * Type of the constraint can be examined by calling {@link #getConstraintType()} or\n+   * {@link #isConstraintType(ConstraintType)} methods.\n+   *\n+   * @return the {@link Label} this constraint is associated with.\n+   * @throws IllegalStateException when this constraint is associated with relationships.\n+   */\n+  Label getLabel();\n \n-    /**\n-     * This accessor method returns a relationship type which this constraint is associated with if this constraint\n-     * has type {@link ConstraintType#UNIQUENESS} or {@link ConstraintType#NODE_PROPERTY_EXISTENCE}.\n-     * Type of the constraint can be examined by calling {@link #getConstraintType()} or\n-     * {@link #isConstraintType(ConstraintType)} methods.\n-     *\n-     * @return the {@link RelationshipType} this constraint is associated with.\n-     * @throws IllegalStateException when this constraint is associated with nodes.\n-     */\n-    RelationshipType getRelationshipType();\n+  /**\n+   * This accessor method returns a relationship type which this constraint is associated with if this constraint\n+   * has type {@link ConstraintType#UNIQUENESS} or {@link ConstraintType#NODE_PROPERTY_EXISTENCE}.\n+   * Type of the constraint can be examined by calling {@link #getConstraintType()} or\n+   * {@link #isConstraintType(ConstraintType)} methods.\n+   *\n+   * @return the {@link RelationshipType} this constraint is associated with.\n+   * @throws IllegalStateException when this constraint is associated with nodes.\n+   */\n+  RelationshipType getRelationshipType();\n \n-    /**\n-     * @return the property keys this constraint is about.\n-     */\n-    Iterable<String> getPropertyKeys();\n+  /**\n+   * @return the property keys this constraint is about.\n+   */\n+  Iterable<String> getPropertyKeys();\n \n-    /**\n-     * Drops this constraint.\n-     */\n-    void drop();\n+  /**\n+   * Drops this constraint.\n+   */\n+  void drop();\n \n-    /**\n-     * @return the {@link ConstraintType} of constraint.\n-     */\n-    ConstraintType getConstraintType();\n+  /**\n+   * @return the {@link ConstraintType} of constraint.\n+   */\n+  ConstraintType getConstraintType();\n \n-    /**\n-     * @param type a constraint type\n-     * @return true if this constraint definition's type is equal to the provided type\n-     */\n-    boolean isConstraintType( ConstraintType type );\n+  /**\n+   * @param type a constraint type\n+   * @return true if this constraint definition's type is equal to the provided type\n+   */\n+  boolean isConstraintType(ConstraintType type);\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1549/ConstraintDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1549/ConstraintDefinition.java\nindex c684dde3c13..d9f2118afee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1549/ConstraintDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1549/ConstraintDefinition.java\n@@ -72,4 +72,4 @@ public interface ConstraintDefinition\n      * @return true if this constraint definition's type is equal to the provided type\n      */\n     boolean isConstraintType( ConstraintType type );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}