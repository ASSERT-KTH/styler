{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2048",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2048/NumberSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2048/NumberSchemaKey.java\nindex 110cea77622..b18871153c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2048/NumberSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2048/NumberSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.values.storable.NumberValue;\n@@ -29,108 +30,108 @@ import static java.lang.String.format;\n  * Includes value and entity id (to be able to handle non-unique values).\n  * A value can be any {@link Number} and is represented as a {@code long} to store the raw bits and a type\n  * to say if it's a long, double or float.\n- *\n+ * <p>\n  * Distinction between double and float exists because coersions between each other and long may differ.\n  * TODO this should be figured out and potentially reduced to long, double types only.\n  */\n class NumberSchemaKey extends NativeSchemaKey<NumberSchemaKey>\n {\n-    static final int SIZE =\n-            Byte.BYTES + /* type of value */\n-            Long.BYTES + /* raw value bits */\n-\n-            // TODO this could use 6 bytes instead and have the highest 2 bits stored in the type byte\n-            Long.BYTES;  /* entityId */\n-\n-    byte type;\n-    long rawValueBits;\n-\n-    @Override\n-    protected Value assertCorrectType( Value value )\n-    {\n-        if ( !Values.isNumberValue( value ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support numbers, tried to create key from \" + value );\n-        }\n-        return value;\n-    }\n-\n-    @Override\n-    NumberValue asValue()\n-    {\n-        return RawBits.asNumberValue( rawValueBits, type );\n-    }\n+  static final int SIZE =\n+      Byte.BYTES + /* type of value */\n+          Long.BYTES + /* raw value bits */\n \n-    @Override\n-    void initValueAsLowest()\n-    {\n-        writeFloatingPoint( Double.NEGATIVE_INFINITY );\n-    }\n-\n-    @Override\n-    void initValueAsHighest()\n-    {\n-        writeFloatingPoint( Double.POSITIVE_INFINITY );\n-    }\n-\n-    /**\n-     * Compares the value of this key to that of another key.\n-     * This method is expected to be called in scenarios where inconsistent reads may happen (and later retried).\n-     *\n-     * @param other the {@link NumberSchemaKey} to compare to.\n-     * @return comparison against the {@code other} {@link NumberSchemaKey}.\n-     */\n-    int compareValueTo( NumberSchemaKey other )\n-    {\n-        return RawBits.compare( rawValueBits, type, other.rawValueBits, other.type );\n-    }\n+          // TODO this could use 6 bytes instead and have the highest 2 bits stored in the type byte\n+          Long.BYTES;  /* entityId */\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"type=%d,rawValue=%d,value=%s,entityId=%d\", type, rawValueBits, asValue(), getEntityId() );\n-    }\n-\n-    @Override\n-    public void writeInteger( byte value )\n-    {\n-        type = RawBits.BYTE;\n-        rawValueBits = value;\n-    }\n-\n-    @Override\n-    public void writeInteger( short value )\n-    {\n-        type = RawBits.SHORT;\n-        rawValueBits = value;\n-    }\n-\n-    @Override\n-    public void writeInteger( int value )\n-    {\n-        type = RawBits.INT;\n-        rawValueBits = value;\n-    }\n-\n-    @Override\n-    public void writeInteger( long value )\n-    {\n-        type = RawBits.LONG;\n-        rawValueBits = value;\n-    }\n-\n-    @Override\n-    public void writeFloatingPoint( float value )\n-    {\n-        type = RawBits.FLOAT;\n-        rawValueBits = Float.floatToIntBits( value );\n-    }\n+  byte type;\n+  long rawValueBits;\n \n-    @Override\n-    public void writeFloatingPoint( double value )\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!Values.isNumberValue(value))\n     {\n-        type = RawBits.DOUBLE;\n-        rawValueBits = Double.doubleToLongBits( value );\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support numbers, tried to create key from \" + value);\n     }\n+    return value;\n+  }\n+\n+  @Override\n+  NumberValue asValue()\n+  {\n+    return RawBits.asNumberValue(rawValueBits, type);\n+  }\n+\n+  @Override\n+  void initValueAsLowest()\n+  {\n+    writeFloatingPoint(Double.NEGATIVE_INFINITY);\n+  }\n+\n+  @Override\n+  void initValueAsHighest()\n+  {\n+    writeFloatingPoint(Double.POSITIVE_INFINITY);\n+  }\n+\n+  /**\n+   * Compares the value of this key to that of another key.\n+   * This method is expected to be called in scenarios where inconsistent reads may happen (and later retried).\n+   *\n+   * @param other the {@link NumberSchemaKey} to compare to.\n+   * @return comparison against the {@code other} {@link NumberSchemaKey}.\n+   */\n+  int compareValueTo(NumberSchemaKey other)\n+  {\n+    return RawBits.compare(rawValueBits, type, other.rawValueBits, other.type);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"type=%d,rawValue=%d,value=%s,entityId=%d\", type, rawValueBits, asValue(), getEntityId());\n+  }\n+\n+  @Override\n+  public void writeInteger(byte value)\n+  {\n+    type = RawBits.BYTE;\n+    rawValueBits = value;\n+  }\n+\n+  @Override\n+  public void writeInteger(short value)\n+  {\n+    type = RawBits.SHORT;\n+    rawValueBits = value;\n+  }\n+\n+  @Override\n+  public void writeInteger(int value)\n+  {\n+    type = RawBits.INT;\n+    rawValueBits = value;\n+  }\n+\n+  @Override\n+  public void writeInteger(long value)\n+  {\n+    type = RawBits.LONG;\n+    rawValueBits = value;\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(float value)\n+  {\n+    type = RawBits.FLOAT;\n+    rawValueBits = Float.floatToIntBits(value);\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(double value)\n+  {\n+    type = RawBits.DOUBLE;\n+    rawValueBits = Double.doubleToLongBits(value);\n+  }\n }\n",
            "diff_size": 177
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2048/NumberSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2048/NumberSchemaKey.java\nindex 110cea77622..d4ff5ca0afb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2048/NumberSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2048/NumberSchemaKey.java\n@@ -35,14 +35,13 @@ import static java.lang.String.format;\n  */\n class NumberSchemaKey extends NativeSchemaKey<NumberSchemaKey>\n {\n-    static final int SIZE =\n-            Byte.BYTES + /* type of value */\n+    static final int SIZE = Byte.BYTES + /* type of value */\n             Long.BYTES + /* raw value bits */\n \n             // TODO this could use 6 bytes instead and have the highest 2 bits stored in the type byte\n-            Long.BYTES;  /* entityId */\n-\n-    byte type;\n+            Long.BYTES;\n+/* entityId */\n+byte type;\n     long rawValueBits;\n \n     @Override\n@@ -50,10 +49,10 @@ class NumberSchemaKey extends NativeSchemaKey<NumberSchemaKey>\n     {\n         if ( !Values.isNumberValue( value ) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support numbers, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support numbers, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n \n     @Override\n@@ -133,4 +132,4 @@ class NumberSchemaKey extends NativeSchemaKey<NumberSchemaKey>\n         type = RawBits.DOUBLE;\n         rawValueBits = Double.doubleToLongBits( value );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}