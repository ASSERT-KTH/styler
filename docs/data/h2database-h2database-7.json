{
    "project_name": "h2database-h2database",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "190",
                "column": "32",
                "severity": "warning",
                "message": "'=' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        int columnCount = asQuery.getColumnCount();\n        ArrayList<Expression> expressions = asQuery.getExpressions();\n        ColumnNamer columnNamer= new ColumnNamer(session);\n        for (int i = 0; i < columnCount; i++) {\n            Expression expr = expressions.get(i);\n            String name = columnNamer.getColumnName(expr, i, expr.getAlias());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/7/CreateTable.java\nindex 702d8995666..6459ebe8529 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/7/CreateTable.java\n@@ -187,7 +187,7 @@ public class CreateTable extends CommandWithColumns {\n     private void generateColumnsFromQuery() {\n         int columnCount = asQuery.getColumnCount();\n         ArrayList<Expression> expressions = asQuery.getExpressions();\n-        ColumnNamer columnNamer= new ColumnNamer(session);\n+        ColumnNamer columnNamer = new ColumnNamer(session);\n         for (int i = 0; i < columnCount; i++) {\n             Expression expr = expressions.get(i);\n             String name = columnNamer.getColumnName(expr, i, expr.getAlias());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/7/CreateTable.java\nindex 702d8995666..a90e28f77d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/7/CreateTable.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import java.util.ArrayList;\n@@ -86,7 +87,8 @@ public class CreateTable extends CommandWithColumns {\n             if (ifNotExists) {\n                 return 0;\n             }\n-            throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.tableName);\n+            throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1,\n+                    data.tableName);\n         }\n         if (asQuery != null) {\n             asQuery.prepare();\n@@ -99,7 +101,8 @@ public class CreateTable extends CommandWithColumns {\n                 for (int i = 0; i < columns.size(); i++) {\n                     Column column = columns.get(i);\n                     if (column.getType().getValueType() == Value.UNKNOWN) {\n-                        columns.set(i, new Column(column.getName(), asQuery.getExpressions().get(i).getType()));\n+                        columns.set(i, new Column(column.getName(),\n+                                asQuery.getExpressions().get(i).getType()));\n                     }\n                 }\n             }\n@@ -109,7 +112,8 @@ public class CreateTable extends CommandWithColumns {\n         data.create = create;\n         data.session = session;\n         Table table = getSchema().createTable(data);\n-        ArrayList<Sequence> sequences = generateSequences(data.columns, data.temporary);\n+        ArrayList<Sequence> sequences =\n+                generateSequences(data.columns, data.temporary);\n         table.setComment(comment);\n         if (isSessionTemporary) {\n             if (onCommitDrop) {\n@@ -161,10 +165,10 @@ public class CreateTable extends CommandWithColumns {\n                             throw DbException.get(\n                                     ErrorCode.FEATURE_NOT_SUPPORTED_1,\n                                     \"Table depends on another table \" +\n-                                    \"with a higher ID: \" + t +\n-                                    \", this is currently not supported, \" +\n-                                    \"as it would prevent the database from \" +\n-                                    \"being re-opened\");\n+                                            \"with a higher ID: \" + t +\n+                                            \", this is currently not supported, \" +\n+                                            \"as it would prevent the database from \" +\n+                                            \"being re-opened\");\n                         }\n                     }\n                 }\n@@ -187,7 +191,7 @@ public class CreateTable extends CommandWithColumns {\n     private void generateColumnsFromQuery() {\n         int columnCount = asQuery.getColumnCount();\n         ArrayList<Expression> expressions = asQuery.getExpressions();\n-        ColumnNamer columnNamer= new ColumnNamer(session);\n+        ColumnNamer columnNamer = new ColumnNamer(session);\n         for (int i = 0; i < columnCount; i++) {\n             Expression expr = expressions.get(i);\n             String name = columnNamer.getColumnName(expr, i, expr.getAlias());\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/7/CreateTable.java\nindex 702d8995666..c86164af946 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/7/CreateTable.java\n@@ -187,7 +187,7 @@ public class CreateTable extends CommandWithColumns {\n     private void generateColumnsFromQuery() {\n         int columnCount = asQuery.getColumnCount();\n         ArrayList<Expression> expressions = asQuery.getExpressions();\n-        ColumnNamer columnNamer= new ColumnNamer(session);\n+        ColumnNamer columnNamer = new ColumnNamer(session);\n         for (int i = 0; i < columnCount; i++) {\n             Expression expr = expressions.get(i);\n             String name = columnNamer.getColumnName(expr, i, expr.getAlias());\n@@ -254,4 +254,4 @@ public class CreateTable extends CommandWithColumns {\n         return CommandInterface.CREATE_TABLE;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/7/CreateTable.java\nindex 702d8995666..98d40384904 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/7/CreateTable.java\n@@ -27,6 +27,8 @@ import org.h2.value.Value;\n  * This class represents the statement\n  * CREATE TABLE\n  */\n+\n+\n public class CreateTable extends CommandWithColumns {\n \n     private final CreateTableData data = new CreateTableData();\n@@ -44,14 +46,17 @@ public class CreateTable extends CommandWithColumns {\n         data.persistData = true;\n     }\n \n+\n     public void setQuery(Query query) {\n         this.asQuery = query;\n     }\n \n+\n     public void setTemporary(boolean temporary) {\n         data.temporary = temporary;\n     }\n \n+\n     public void setTableName(String tableName) {\n         data.tableName = tableName;\n     }\n@@ -61,10 +66,12 @@ public class CreateTable extends CommandWithColumns {\n         data.columns.add(column);\n     }\n \n+\n     public ArrayList<Column> getColumns() {\n         return data.columns;\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n@@ -94,12 +101,13 @@ public class CreateTable extends CommandWithColumns {\n                 generateColumnsFromQuery();\n             } else if (data.columns.size() != asQuery.getColumnCount()) {\n                 throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-            } else {\n+                             } else {\n                 ArrayList<Column> columns = data.columns;\n                 for (int i = 0; i < columns.size(); i++) {\n                     Column column = columns.get(i);\n                     if (column.getType().getValueType() == Value.UNKNOWN) {\n-                        columns.set(i, new Column(column.getName(), asQuery.getExpressions().get(i).getType()));\n+                        columns.set(i,\n+                                    new Column(column.getName(), asQuery.getExpressions().get(i).getType()));\n                     }\n                 }\n             }\n@@ -148,7 +156,7 @@ public class CreateTable extends CommandWithColumns {\n                     session.setUndoLogEnabled(old);\n                 }\n             }\n-            HashSet<DbObject> set = new HashSet<>();\n+            HashSet<DbObject> set = new HashSet< >();\n             table.addDependencies(set);\n             for (DbObject obj : set) {\n                 if (obj == table) {\n@@ -158,13 +166,9 @@ public class CreateTable extends CommandWithColumns {\n                     if (obj instanceof Table) {\n                         Table t = (Table) obj;\n                         if (t.getId() > table.getId()) {\n-                            throw DbException.get(\n-                                    ErrorCode.FEATURE_NOT_SUPPORTED_1,\n-                                    \"Table depends on another table \" +\n-                                    \"with a higher ID: \" + t +\n-                                    \", this is currently not supported, \" +\n-                                    \"as it would prevent the database from \" +\n-                                    \"being re-opened\");\n+                            throw DbException.get(ErrorCode.FEATURE_NOT_SUPPORTED_1, \"Table depends on another table \" + \"with a higher ID: \"\n+                            + t + \", this is currently not supported, \"\n+                            + \"as it would prevent the database from \" + \"being re-opened\");\n                         }\n                     }\n                 }\n@@ -187,7 +191,7 @@ public class CreateTable extends CommandWithColumns {\n     private void generateColumnsFromQuery() {\n         int columnCount = asQuery.getColumnCount();\n         ArrayList<Expression> expressions = asQuery.getExpressions();\n-        ColumnNamer columnNamer= new ColumnNamer(session);\n+        ColumnNamer columnNamer = new ColumnNamer(session);\n         for (int i = 0; i < columnCount; i++) {\n             Expression expr = expressions.get(i);\n             String name = columnNamer.getColumnName(expr, i, expr.getAlias());\n@@ -196,10 +200,12 @@ public class CreateTable extends CommandWithColumns {\n         }\n     }\n \n+\n     public void setPersistIndexes(boolean persistIndexes) {\n         data.persistIndexes = persistIndexes;\n     }\n \n+\n     public void setGlobalTemporary(boolean globalTemporary) {\n         data.globalTemporary = globalTemporary;\n     }\n@@ -207,6 +213,8 @@ public class CreateTable extends CommandWithColumns {\n     /**\n      * This temporary table is dropped on commit.\n      */\n+\n+\n     public void setOnCommitDrop() {\n         this.onCommitDrop = true;\n     }\n@@ -214,14 +222,18 @@ public class CreateTable extends CommandWithColumns {\n     /**\n      * This temporary table is truncated on commit.\n      */\n+\n+\n     public void setOnCommitTruncate() {\n         this.onCommitTruncate = true;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n \n+\n     public void setPersistData(boolean persistData) {\n         data.persistData = persistData;\n         if (!persistData) {\n@@ -229,22 +241,27 @@ public class CreateTable extends CommandWithColumns {\n         }\n     }\n \n+\n     public void setSortedInsertMode(boolean sortedInsertMode) {\n         this.sortedInsertMode = sortedInsertMode;\n     }\n \n+\n     public void setWithNoData(boolean withNoData) {\n         this.withNoData = withNoData;\n     }\n \n+\n     public void setTableEngine(String tableEngine) {\n         data.tableEngine = tableEngine;\n     }\n \n+\n     public void setTableEngineParams(ArrayList<String> tableEngineParams) {\n         data.tableEngineParams = tableEngineParams;\n     }\n \n+\n     public void setHidden(boolean isHidden) {\n         data.isHidden = isHidden;\n     }\n@@ -254,4 +271,4 @@ public class CreateTable extends CommandWithColumns {\n         return CommandInterface.CREATE_TABLE;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/7/CreateTable.java\nindex 702d8995666..6459ebe8529 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/7/CreateTable.java\n@@ -187,7 +187,7 @@ public class CreateTable extends CommandWithColumns {\n     private void generateColumnsFromQuery() {\n         int columnCount = asQuery.getColumnCount();\n         ArrayList<Expression> expressions = asQuery.getExpressions();\n-        ColumnNamer columnNamer= new ColumnNamer(session);\n+        ColumnNamer columnNamer = new ColumnNamer(session);\n         for (int i = 0; i < columnCount; i++) {\n             Expression expr = expressions.get(i);\n             String name = columnNamer.getColumnName(expr, i, expr.getAlias());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/7/CreateTable.java\nindex 702d8995666..6459ebe8529 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/7/CreateTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/7/CreateTable.java\n@@ -187,7 +187,7 @@ public class CreateTable extends CommandWithColumns {\n     private void generateColumnsFromQuery() {\n         int columnCount = asQuery.getColumnCount();\n         ArrayList<Expression> expressions = asQuery.getExpressions();\n-        ColumnNamer columnNamer= new ColumnNamer(session);\n+        ColumnNamer columnNamer = new ColumnNamer(session);\n         for (int i = 0; i < columnCount; i++) {\n             Expression expr = expressions.get(i);\n             String name = columnNamer.getColumnName(expr, i, expr.getAlias());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}