{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2126",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2126/AStar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2126/AStar.java\nindex 4d10b4248ae..62a3f1386b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2126/AStar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2126/AStar.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import java.util.HashMap;\n@@ -47,264 +48,262 @@ import static org.neo4j.helpers.collection.Iterables.option;\n \n public class AStar implements PathFinder<WeightedPath>\n {\n-    private final PathExpander<?> expander;\n-    private final CostEvaluator<Double> lengthEvaluator;\n-    private final EstimateEvaluator<Double> estimateEvaluator;\n-    private Metadata lastMetadata;\n-\n-    public AStar( PathExpander<?> expander,\n-            CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n-    {\n-        this.expander = expander;\n-        this.lengthEvaluator = lengthEvaluator;\n-        this.estimateEvaluator = estimateEvaluator;\n-    }\n-\n-    @Override\n-    public WeightedPath findSinglePath( Node start, Node end )\n+  private final PathExpander<?> expander;\n+  private final CostEvaluator<Double> lengthEvaluator;\n+  private final EstimateEvaluator<Double> estimateEvaluator;\n+  private Metadata lastMetadata;\n+\n+  public AStar(PathExpander<?> expander,\n+               CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator)\n+  {\n+    this.expander = expander;\n+    this.lengthEvaluator = lengthEvaluator;\n+    this.estimateEvaluator = estimateEvaluator;\n+  }\n+\n+  @Override\n+  public WeightedPath findSinglePath(Node start, Node end)\n+  {\n+    lastMetadata = new Metadata();\n+    AStarIterator iterator = new AStarIterator(start, end);\n+    while (iterator.hasNext())\n     {\n-        lastMetadata = new Metadata();\n-        AStarIterator iterator = new AStarIterator( start, end );\n-        while ( iterator.hasNext() )\n+      Node node = iterator.next();\n+      GraphDatabaseService graphDb = node.getGraphDatabase();\n+      if (node.equals(end))\n+      {\n+        // Hit, return path\n+        double weight = iterator.visitData.get(node.getId()).wayLength;\n+        final Path path;\n+        if (start.getId() == end.getId())\n         {\n-            Node node = iterator.next();\n-            GraphDatabaseService graphDb = node.getGraphDatabase();\n-            if ( node.equals( end ) )\n-            {\n-                // Hit, return path\n-                double weight = iterator.visitData.get( node.getId() ).wayLength;\n-                final Path path;\n-                if ( start.getId() == end.getId() )\n-                {\n-                    // Nothing to iterate over\n-                    path = PathImpl.singular( start );\n-                }\n-                else\n-                {\n-                    LinkedList<Relationship> rels = new LinkedList<>();\n-                    Relationship rel = graphDb.getRelationshipById(\n-                            iterator.visitData.get( node.getId() ).cameFromRelationship );\n-                    while ( rel != null )\n-                    {\n-                        rels.addFirst( rel );\n-                        node = rel.getOtherNode( node );\n-                        long nextRelId = iterator.visitData.get( node.getId() ).cameFromRelationship;\n-                        rel = nextRelId == -1 ? null : graphDb.getRelationshipById( nextRelId );\n-                    }\n-                    path = toPath( start, rels );\n-                }\n-                lastMetadata.paths++;\n-                return new WeightedPathImpl( weight, path );\n-            }\n+          // Nothing to iterate over\n+          path = PathImpl.singular(start);\n+        } else\n+        {\n+          LinkedList<Relationship> rels = new LinkedList<>();\n+          Relationship rel = graphDb.getRelationshipById(\n+              iterator.visitData.get(node.getId()).cameFromRelationship);\n+          while (rel != null)\n+          {\n+            rels.addFirst(rel);\n+            node = rel.getOtherNode(node);\n+            long nextRelId = iterator.visitData.get(node.getId()).cameFromRelationship;\n+            rel = nextRelId == -1 ? null : graphDb.getRelationshipById(nextRelId);\n+          }\n+          path = toPath(start, rels);\n         }\n-        return null;\n+        lastMetadata.paths++;\n+        return new WeightedPathImpl(weight, path);\n+      }\n     }\n-\n-    @Override\n-    public Iterable<WeightedPath> findAllPaths( final Node node, final Node end )\n+    return null;\n+  }\n+\n+  @Override\n+  public Iterable<WeightedPath> findAllPaths(final Node node, final Node end)\n+  {\n+    return option(findSinglePath(node, end));\n+  }\n+\n+  @Override\n+  public TraversalMetadata metadata()\n+  {\n+    return lastMetadata;\n+  }\n+\n+  private Path toPath(Node start, LinkedList<Relationship> rels)\n+  {\n+    PathImpl.Builder builder = new PathImpl.Builder(start);\n+    for (Relationship rel : rels)\n     {\n-        return option( findSinglePath( node, end ) );\n+      builder = builder.push(rel);\n     }\n-\n-    @Override\n-    public TraversalMetadata metadata()\n+    return builder.build();\n+  }\n+\n+  private static class Visit\n+  {\n+    private double wayLength; // accumulated cost to get here (g)\n+    private double estimate; // heuristic estimate of cost to reach end (h)\n+    private long cameFromRelationship;\n+    private boolean visited;\n+    private boolean next;\n+\n+    Visit(long cameFromRelationship, double wayLength, double estimate)\n     {\n-        return lastMetadata;\n+      update(cameFromRelationship, wayLength, estimate);\n     }\n \n-    private Path toPath( Node start, LinkedList<Relationship> rels )\n+    void update(long cameFromRelationship, double wayLength, double estimate)\n     {\n-        PathImpl.Builder builder = new PathImpl.Builder( start );\n-        for ( Relationship rel : rels )\n-        {\n-            builder = builder.push( rel );\n-        }\n-        return builder.build();\n+      this.cameFromRelationship = cameFromRelationship;\n+      this.wayLength = wayLength;\n+      this.estimate = estimate;\n     }\n \n-    private static class Visit\n+    double getFscore()\n     {\n-        private double wayLength; // accumulated cost to get here (g)\n-        private double estimate; // heuristic estimate of cost to reach end (h)\n-        private long cameFromRelationship;\n-        private boolean visited;\n-        private boolean next;\n-\n-        Visit( long cameFromRelationship, double wayLength, double estimate )\n-        {\n-            update( cameFromRelationship, wayLength, estimate );\n-        }\n+      return wayLength + estimate;\n+    }\n+  }\n+\n+  private class AStarIterator extends PrefetchingIterator<Node> implements Path\n+  {\n+    private final Node start;\n+    private final Node end;\n+    private Node lastNode;\n+    private final PriorityMap<Node, Node, Double> nextPrioritizedNodes =\n+        PriorityMap.withSelfKeyNaturalOrder();\n+    private final Map<Long, Visit> visitData = new HashMap<>();\n+\n+    AStarIterator(Node start, Node end)\n+    {\n+      this.start = start;\n+      this.end = end;\n \n-        void update( long cameFromRelationship, double wayLength, double estimate )\n-        {\n-            this.cameFromRelationship = cameFromRelationship;\n-            this.wayLength = wayLength;\n-            this.estimate = estimate;\n-        }\n+      Visit visit = new Visit(-1, 0, estimateEvaluator.getCost(start, end));\n+      addNext(start, visit.getFscore(), visit);\n+      this.visitData.put(start.getId(), visit);\n+    }\n \n-        double getFscore()\n-        {\n-            return wayLength + estimate;\n-        }\n+    private void addNext(Node node, double fscore, Visit visit)\n+    {\n+      nextPrioritizedNodes.put(node, fscore);\n+      visit.next = true;\n     }\n \n-    private class AStarIterator extends PrefetchingIterator<Node> implements Path\n+    private Node popLowestScoreNode()\n     {\n-        private final Node start;\n-        private final Node end;\n-        private Node lastNode;\n-        private final PriorityMap<Node, Node, Double> nextPrioritizedNodes =\n-                PriorityMap.withSelfKeyNaturalOrder();\n-        private final Map<Long, Visit> visitData = new HashMap<>();\n-\n-        AStarIterator( Node start, Node end )\n-        {\n-            this.start = start;\n-            this.end = end;\n+      Entry<Node, Double> top = nextPrioritizedNodes.pop();\n+      if (top == null)\n+      {\n+        return null;\n+      }\n \n-            Visit visit = new Visit( -1, 0, estimateEvaluator.getCost( start, end ) );\n-            addNext( start, visit.getFscore(), visit );\n-            this.visitData.put( start.getId(), visit );\n-        }\n+      Node node = top.getEntity();\n+      Visit visit = visitData.get(node.getId());\n+      visit.visited = true;\n+      visit.next = false;\n+      return node;\n+    }\n \n-        private void addNext( Node node, double fscore, Visit visit )\n-        {\n-            nextPrioritizedNodes.put( node, fscore );\n-            visit.next = true;\n-        }\n+    @Override\n+    protected Node fetchNextOrNull()\n+    {\n+      if (lastNode != null)\n+      {\n+        expand();\n+      }\n \n-        private Node popLowestScoreNode()\n-        {\n-            Entry<Node, Double> top = nextPrioritizedNodes.pop();\n-            if ( top == null )\n-            {\n-                return null;\n-            }\n-\n-            Node node = top.getEntity();\n-            Visit visit = visitData.get( node.getId() );\n-            visit.visited = true;\n-            visit.next = false;\n-            return node;\n-        }\n+      lastNode = popLowestScoreNode();\n+      return lastNode;\n+    }\n \n-        @Override\n-        protected Node fetchNextOrNull()\n+    @SuppressWarnings(\"unchecked\")\n+    private void expand()\n+    {\n+      Iterable<Relationship> expand = expander.expand(this, BranchState.NO_STATE);\n+      for (Relationship rel : expand)\n+      {\n+        lastMetadata.rels++;\n+        Node node = rel.getOtherNode(lastNode);\n+        Visit visit = visitData.get(node.getId());\n+        if (visit != null && visit.visited)\n         {\n-            if ( lastNode != null )\n-            {\n-                expand();\n-            }\n-\n-            lastNode = popLowestScoreNode();\n-            return lastNode;\n+          continue;\n         }\n \n-        @SuppressWarnings( \"unchecked\" )\n-        private void expand()\n-        {\n-            Iterable<Relationship> expand = expander.expand( this, BranchState.NO_STATE );\n-            for ( Relationship rel : expand )\n-            {\n-                lastMetadata.rels++;\n-                Node node = rel.getOtherNode( lastNode );\n-                Visit visit = visitData.get( node.getId() );\n-                if ( visit != null && visit.visited )\n-                {\n-                    continue;\n-                }\n-\n-                Visit lastVisit = visitData.get( lastNode.getId() );\n-                double tentativeGScore = lastVisit.wayLength +\n-                        lengthEvaluator.getCost( rel, Direction.OUTGOING );\n-                double estimate = estimateEvaluator.getCost( node, end );\n-\n-                if ( visit == null || !visit.next || tentativeGScore < visit.wayLength )\n-                {\n-                    if ( visit == null )\n-                    {\n-                        visit = new Visit( rel.getId(), tentativeGScore, estimate );\n-                        visitData.put( node.getId(), visit );\n-                    }\n-                    else\n-                    {\n-                        visit.update( rel.getId(), tentativeGScore, estimate );\n-                    }\n-                    addNext( node, estimate + tentativeGScore, visit );\n-                }\n-            }\n-        }\n+        Visit lastVisit = visitData.get(lastNode.getId());\n+        double tentativeGScore = lastVisit.wayLength +\n+            lengthEvaluator.getCost(rel, Direction.OUTGOING);\n+        double estimate = estimateEvaluator.getCost(node, end);\n \n-        @Override\n-        public Node startNode()\n+        if (visit == null || !visit.next || tentativeGScore < visit.wayLength)\n         {\n-            return start;\n+          if (visit == null)\n+          {\n+            visit = new Visit(rel.getId(), tentativeGScore, estimate);\n+            visitData.put(node.getId(), visit);\n+          } else\n+          {\n+            visit.update(rel.getId(), tentativeGScore, estimate);\n+          }\n+          addNext(node, estimate + tentativeGScore, visit);\n         }\n+      }\n+    }\n \n-        @Override\n-        public Node endNode()\n-        {\n-            return lastNode;\n-        }\n+    @Override\n+    public Node startNode()\n+    {\n+      return start;\n+    }\n \n-        @Override\n-        public Relationship lastRelationship()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Node endNode()\n+    {\n+      return lastNode;\n+    }\n \n-        @Override\n-        public Iterable<Relationship> relationships()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Relationship lastRelationship()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterable<Relationship> reverseRelationships()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Relationship> relationships()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterable<Node> nodes()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Relationship> reverseRelationships()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterable<Node> reverseNodes()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Node> nodes()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public int length()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Node> reverseNodes()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterator<PropertyContainer> iterator()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public int length()\n+    {\n+      throw new UnsupportedOperationException();\n     }\n \n-    private static class Metadata implements TraversalMetadata\n+    @Override\n+    public Iterator<PropertyContainer> iterator()\n     {\n-        private int rels;\n-        private int paths;\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n \n-        @Override\n-        public int getNumberOfPathsReturned()\n-        {\n-            return paths;\n-        }\n+  private static class Metadata implements TraversalMetadata\n+  {\n+    private int rels;\n+    private int paths;\n \n-        @Override\n-        public int getNumberOfRelationshipsTraversed()\n-        {\n-            return rels;\n-        }\n+    @Override\n+    public int getNumberOfPathsReturned()\n+    {\n+      return paths;\n+    }\n+\n+    @Override\n+    public int getNumberOfRelationshipsTraversed()\n+    {\n+      return rels;\n     }\n+  }\n }\n",
            "diff_size": 292
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2126/AStar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2126/AStar.java\nindex 4d10b4248ae..dcff3404a13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2126/AStar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2126/AStar.java\n@@ -52,8 +52,7 @@ public class AStar implements PathFinder<WeightedPath>\n     private final EstimateEvaluator<Double> estimateEvaluator;\n     private Metadata lastMetadata;\n \n-    public AStar( PathExpander<?> expander,\n-            CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+    public AStar( PathExpander<?> expander, CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n     {\n         this.expander = expander;\n         this.lengthEvaluator = lengthEvaluator;\n@@ -82,16 +81,16 @@ public class AStar implements PathFinder<WeightedPath>\n                 else\n                 {\n                     LinkedList<Relationship> rels = new LinkedList<>();\n-                    Relationship rel = graphDb.getRelationshipById(\n-                            iterator.visitData.get( node.getId() ).cameFromRelationship );\n-                    while ( rel != null )\n+                    Relationship rel = graphDb.getRelationshipById( iterator.visitData.get( node.getId() ).cameFromRelationship );\n+    while ( rel != null )\n                     {\n                         rels.addFirst( rel );\n                         node = rel.getOtherNode( node );\n                         long nextRelId = iterator.visitData.get( node.getId() ).cameFromRelationship;\n                         rel = nextRelId == -1 ? null : graphDb.getRelationshipById( nextRelId );\n                     }\n-                    path = toPath( start, rels );\n+\n+path = toPath( start, rels );\n                 }\n                 lastMetadata.paths++;\n                 return new WeightedPathImpl( weight, path );\n@@ -119,7 +118,8 @@ public class AStar implements PathFinder<WeightedPath>\n         {\n             builder = builder.push( rel );\n         }\n-        return builder.build();\n+\n+return builder.build();\n     }\n \n     private static class Visit\n@@ -153,9 +153,8 @@ public class AStar implements PathFinder<WeightedPath>\n         private final Node start;\n         private final Node end;\n         private Node lastNode;\n-        private final PriorityMap<Node, Node, Double> nextPrioritizedNodes =\n-                PriorityMap.withSelfKeyNaturalOrder();\n-        private final Map<Long, Visit> visitData = new HashMap<>();\n+        private final PriorityMap<Node, Node, Double> nextPrioritizedNodes = PriorityMap.withSelfKeyNaturalOrder();\n+private final Map<Long,Visit> visitData = new HashMap<>();\n \n         AStarIterator( Node start, Node end )\n         {\n@@ -175,7 +174,7 @@ public class AStar implements PathFinder<WeightedPath>\n \n         private Node popLowestScoreNode()\n         {\n-            Entry<Node, Double> top = nextPrioritizedNodes.pop();\n+            Entry<Node,Double> top = nextPrioritizedNodes.pop();\n             if ( top == null )\n             {\n                 return null;\n@@ -215,11 +214,9 @@ public class AStar implements PathFinder<WeightedPath>\n                 }\n \n                 Visit lastVisit = visitData.get( lastNode.getId() );\n-                double tentativeGScore = lastVisit.wayLength +\n-                        lengthEvaluator.getCost( rel, Direction.OUTGOING );\n-                double estimate = estimateEvaluator.getCost( node, end );\n-\n-                if ( visit == null || !visit.next || tentativeGScore < visit.wayLength )\n+                double tentativeGScore = lastVisit.wayLength + lengthEvaluator.getCost( rel, Direction.OUTGOING );\n+    double estimate = estimateEvaluator.getCost( node, end );\n+if ( visit == null || !visit.next || tentativeGScore < visit.wayLength )\n                 {\n                     if ( visit == null )\n                     {\n@@ -230,7 +227,8 @@ public class AStar implements PathFinder<WeightedPath>\n                     {\n                         visit.update( rel.getId(), tentativeGScore, estimate );\n                     }\n-                    addNext( node, estimate + tentativeGScore, visit );\n+\n+addNext( node, estimate + tentativeGScore, visit );\n                 }\n             }\n         }\n@@ -307,4 +305,4 @@ public class AStar implements PathFinder<WeightedPath>\n             return rels;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}