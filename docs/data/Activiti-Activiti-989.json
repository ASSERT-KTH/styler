{
    "project_name": "Activiti-Activiti",
    "error_id": "989",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/989/FlowElement.java\nindex 05cdf6dd7dd..d6c937f8f96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/989/FlowElement.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/989/FlowElement.java\nindex 05cdf6dd7dd..6d0dfc3b28b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/989/FlowElement.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -19,66 +20,66 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public abstract class FlowElement extends BaseElement implements HasExecutionListeners {\n \n-  protected String name;\n-  protected String documentation;\n-  protected List<ActivitiListener> executionListeners = new ArrayList<ActivitiListener>();\n-  protected FlowElementsContainer parentContainer;\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public String getDocumentation() {\n-    return documentation;\n-  }\n-\n-  public void setDocumentation(String documentation) {\n-    this.documentation = documentation;\n-  }\n-\n-  public List<ActivitiListener> getExecutionListeners() {\n-    return executionListeners;\n-  }\n-\n-  public void setExecutionListeners(List<ActivitiListener> executionListeners) {\n-    this.executionListeners = executionListeners;\n-  }\n-  \n-  @JsonIgnore\n-  public FlowElementsContainer getParentContainer() {\n-    return parentContainer;\n-  }\n-  \n-  @JsonIgnore\n-  public SubProcess getSubProcess() {\n-    SubProcess subProcess = null;\n-    if (parentContainer instanceof SubProcess) {\n-      subProcess = (SubProcess) parentContainer;\n+    protected String name;\n+    protected String documentation;\n+    protected List<ActivitiListener> executionListeners = new ArrayList<ActivitiListener>();\n+    protected FlowElementsContainer parentContainer;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getDocumentation() {\n+        return documentation;\n+    }\n+\n+    public void setDocumentation(String documentation) {\n+        this.documentation = documentation;\n+    }\n+\n+    public List<ActivitiListener> getExecutionListeners() {\n+        return executionListeners;\n+    }\n+\n+    public void setExecutionListeners(List<ActivitiListener> executionListeners) {\n+        this.executionListeners = executionListeners;\n+    }\n+\n+    @JsonIgnore\n+    public FlowElementsContainer getParentContainer() {\n+        return parentContainer;\n+    }\n+\n+    @JsonIgnore\n+    public SubProcess getSubProcess() {\n+        SubProcess subProcess = null;\n+        if (parentContainer instanceof SubProcess) {\n+            subProcess = (SubProcess) parentContainer;\n+        }\n+\n+        return subProcess;\n     }\n-    \n-    return subProcess;\n-  }\n-  \n-  public void setParentContainer(FlowElementsContainer parentContainer) {\n-    this.parentContainer = parentContainer;\n-  }\n-\n-  public abstract FlowElement clone();\n-\n-  public void setValues(FlowElement otherElement) {\n-    super.setValues(otherElement);\n-    setName(otherElement.getName());\n-    setDocumentation(otherElement.getDocumentation());\n-\n-    executionListeners = new ArrayList<ActivitiListener>();\n-    if (otherElement.getExecutionListeners() != null && !otherElement.getExecutionListeners().isEmpty()) {\n-      for (ActivitiListener listener : otherElement.getExecutionListeners()) {\n-        executionListeners.add(listener.clone());\n-      }\n+\n+    public void setParentContainer(FlowElementsContainer parentContainer) {\n+        this.parentContainer = parentContainer;\n+    }\n+\n+    public abstract FlowElement clone();\n+\n+    public void setValues(FlowElement otherElement) {\n+        super.setValues(otherElement);\n+        setName(otherElement.getName());\n+        setDocumentation(otherElement.getDocumentation());\n+\n+        executionListeners = new ArrayList<ActivitiListener>();\n+        if (otherElement.getExecutionListeners() != null && !otherElement.getExecutionListeners().isEmpty()) {\n+            for (ActivitiListener listener : otherElement.getExecutionListeners()) {\n+                executionListeners.add(listener.clone());\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 66
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "20",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/989/FlowElement.java\nindex 05cdf6dd7dd..f8aeba8a10d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/989/FlowElement.java\n@@ -14,16 +14,15 @@ package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import com.fasterxml.jackson.annotation.JsonIgnore;\n \n+\n public abstract class FlowElement extends BaseElement implements HasExecutionListeners {\n \n   protected String name;\n   protected String documentation;\n   protected List<ActivitiListener> executionListeners = new ArrayList<ActivitiListener>();\n   protected FlowElementsContainer parentContainer;\n-\n   public String getName() {\n     return name;\n   }\n@@ -47,38 +46,35 @@ public abstract class FlowElement extends BaseElement implements HasExecutionLis\n   public void setExecutionListeners(List<ActivitiListener> executionListeners) {\n     this.executionListeners = executionListeners;\n   }\n-  \n+\n   @JsonIgnore\n   public FlowElementsContainer getParentContainer() {\n     return parentContainer;\n   }\n-  \n+\n   @JsonIgnore\n   public SubProcess getSubProcess() {\n     SubProcess subProcess = null;\n     if (parentContainer instanceof SubProcess) {\n       subProcess = (SubProcess) parentContainer;\n     }\n-    \n     return subProcess;\n   }\n-  \n+\n   public void setParentContainer(FlowElementsContainer parentContainer) {\n     this.parentContainer = parentContainer;\n   }\n \n   public abstract FlowElement clone();\n-\n   public void setValues(FlowElement otherElement) {\n     super.setValues(otherElement);\n     setName(otherElement.getName());\n     setDocumentation(otherElement.getDocumentation());\n-\n     executionListeners = new ArrayList<ActivitiListener>();\n     if (otherElement.getExecutionListeners() != null && !otherElement.getExecutionListeners().isEmpty()) {\n-      for (ActivitiListener listener : otherElement.getExecutionListeners()) {\n-        executionListeners.add(listener.clone());\n-      }\n+        for (ActivitiListener listener : otherElement.getExecutionListeners()) {\n+            executionListeners.add(listener.clone());\n+        }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/989/FlowElement.java\nindex 05cdf6dd7dd..d6c937f8f96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/989/FlowElement.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/989/FlowElement.java\nindex 05cdf6dd7dd..d6c937f8f96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/989/FlowElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/989/FlowElement.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}