{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1869",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "232",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "246",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "249",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "262",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1869/ImportCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1869/ImportCommand.java\nindex 359761bdd18..f396c72c05e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1869/ImportCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1869/ImportCommand.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.commandline.dbms;\n \n import java.io.IOException;\n@@ -48,238 +49,233 @@ import static org.neo4j.unsafe.impl.batchimport.input.csv.Configuration.COMMAS;\n \n public class ImportCommand implements AdminCommand\n {\n-    public static final String DEFAULT_REPORT_FILE_NAME = \"import.report\";\n-    private static final String[] allowedModes = {\"database\", \"csv\"};\n-    private static final Arguments databaseArguments = new Arguments()\n-            .withArgument( new MandatoryNamedArg( \"mode\", \"database\", \"Import a pre-3.0 installation.\" )\n-            {\n-                @Override\n-                public String usage()\n-                {\n-                    return String.format( \"--%s=%s\", name(), exampleValue() );\n-                }\n-            } )\n-            .withDatabase()\n-            .withAdditionalConfig();\n+  public static final String DEFAULT_REPORT_FILE_NAME = \"import.report\";\n+  private static final String[] allowedModes = {\"database\", \"csv\"};\n+  private static final Arguments databaseArguments = new Arguments()\n+      .withArgument(new MandatoryNamedArg(\"mode\", \"database\", \"Import a pre-3.0 installation.\")\n+      {\n+        @Override\n+        public String usage()\n+        {\n+          return String.format(\"--%s=%s\", name(), exampleValue());\n+        }\n+      })\n+      .withDatabase()\n+      .withAdditionalConfig();\n \n-    private static final Arguments csvArguments = new Arguments()\n-            .withArgument( new OptionalNamedArg( \"mode\", \"csv\", \"csv\", \"Import a collection of CSV files.\" )\n-            {\n-                @Override\n-                public String usage()\n-                {\n-                    return String.format( \"[--%s=%s]\", name(), exampleValue() );\n-                }\n-            } )\n-            .withDatabase()\n-            .withAdditionalConfig();\n+  private static final Arguments csvArguments = new Arguments()\n+      .withArgument(new OptionalNamedArg(\"mode\", \"csv\", \"csv\", \"Import a collection of CSV files.\")\n+      {\n+        @Override\n+        public String usage()\n+        {\n+          return String.format(\"[--%s=%s]\", name(), exampleValue());\n+        }\n+      })\n+      .withDatabase()\n+      .withAdditionalConfig();\n \n-    private static final Arguments allArguments = new Arguments()\n-            .withDatabase()\n-            .withAdditionalConfig()\n-            .withArgument( new OptionalNamedArg( \"mode\", allowedModes, \"csv\",\n-                    \"Import a collection of CSV files or a pre-3.0 installation.\" ) );\n+  private static final Arguments allArguments = new Arguments()\n+      .withDatabase()\n+      .withAdditionalConfig()\n+      .withArgument(new OptionalNamedArg(\"mode\", allowedModes, \"csv\",\n+          \"Import a collection of CSV files or a pre-3.0 installation.\"));\n \n-    private static void includeDatabaseArguments( Arguments arguments )\n-    {\n-        arguments\n-            .withArgument( new OptionalNamedArg( \"from\", \"source-directory\", \"\",\n-                    \"The location of the pre-3.0 database (e.g. <neo4j-root>/data/graph.db).\" ) );\n-    }\n+  private static void includeDatabaseArguments(Arguments arguments)\n+  {\n+    arguments\n+        .withArgument(new OptionalNamedArg(\"from\", \"source-directory\", \"\",\n+            \"The location of the pre-3.0 database (e.g. <neo4j-root>/data/graph.db).\"));\n+  }\n \n-    private static void includeCsvArguments( Arguments arguments )\n-    {\n-        arguments\n-            .withArgument( new OptionalNamedArg( \"report-file\", \"filename\", DEFAULT_REPORT_FILE_NAME,\n-                    \"File in which to store the report of the csv-import.\" ) )\n-            .withArgument( new OptionalNamedArgWithMetadata( \"nodes\",\n-                    \":Label1:Label2\",\n-                    \"\\\"file1,file2,...\\\"\", \"\",\n-                    \"Node CSV header and data. Multiple files will be logically seen as \" +\n-                            \"one big file from the perspective of the importer. The first line \" +\n-                            \"must contain the header. Multiple data sources like these can be \" +\n-                            \"specified in one import, where each data source has its own header. \" +\n-                    \"Note that file groups must be enclosed in quotation marks.\" ) )\n-            .withArgument( new OptionalNamedArgWithMetadata( \"relationships\",\n-                    \":RELATIONSHIP_TYPE\",\n-                    \"\\\"file1,file2,...\\\"\",\n-                    \"\",\n-                    \"Relationship CSV header and data. Multiple files will be logically \" +\n-                            \"seen as one big file from the perspective of the importer. The first \" +\n-                            \"line must contain the header. Multiple data sources like these can be \" +\n-                            \"specified in one import, where each data source has its own header. \" +\n-                    \"Note that file groups must be enclosed in quotation marks.\" ) )\n-            .withArgument( new OptionalNamedArg( \"id-type\", new String[]{\"STRING\", \"INTEGER\", \"ACTUAL\"},\n-                    \"STRING\", \"Each node must provide a unique id. This is used to find the correct \" +\n-                    \"nodes when creating relationships. Possible values are:\\n\" +\n-                    \"  STRING: arbitrary strings for identifying nodes,\\n\" +\n-                    \"  INTEGER: arbitrary integer values for identifying nodes,\\n\" +\n-                    \"  ACTUAL: (advanced) actual node ids.\\n\" +\n-                    \"For more information on id handling, please see the Neo4j Manual: \" +\n-                    \"https://neo4j.com/docs/operations-manual/current/tools/import/\" ) )\n-            .withArgument( new OptionalNamedArg( \"input-encoding\", \"character-set\", \"UTF-8\",\n-                    \"Character set that input data is encoded in.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"ignore-extra-columns\", false,\n-                    \"If un-specified columns should be ignored during the import.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"ignore-duplicate-nodes\", false,\n-                    \"If duplicate nodes should be ignored during the import.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"ignore-missing-nodes\", false,\n-                    \"If relationships referring to missing nodes should be ignored during the import.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"multiline-fields\",\n-                    DEFAULT.multilineFields(),\n-                    \"Whether or not fields from input source can span multiple lines,\" +\n-                            \" i.e. contain newline characters.\" ) )\n-            .withArgument( new OptionalNamedArg( \"delimiter\",\n-                    \"delimiter-character\",\n-                    String.valueOf( COMMAS.delimiter() ),\n-                    \"Delimiter character between values in CSV data.\" ) )\n-            .withArgument( new OptionalNamedArg( \"array-delimiter\",\n-                    \"array-delimiter-character\",\n-                    String.valueOf( COMMAS.arrayDelimiter() ),\n-                    \"Delimiter character between array elements within a value in CSV data.\" ) )\n-            .withArgument( new OptionalNamedArg( \"quote\",\n-                    \"quotation-character\",\n-                    String.valueOf( COMMAS.quotationCharacter() ),\n-                    \"Character to treat as quotation character for values in CSV data. \"\n-                            + \"Quotes can be escaped as per RFC 4180 by doubling them, for example \\\"\\\" would be \" +\n-                            \"interpreted as a literal \\\". You cannot escape using \\\\.\" ) )\n-            .withArgument( new OptionalNamedArg( \"max-memory\",\n-                    \"max-memory-that-importer-can-use\",\n-                    String.valueOf( DEFAULT_MAX_MEMORY_PERCENT ) + \"%\",\n-                    \"Maximum memory that neo4j-admin can use for various data structures and caching \" +\n-                            \"to improve performance. \" +\n-                            \"Values can be plain numbers, like 10000000 or e.g. 20G for 20 gigabyte, or even e.g. 70%\" +\n-                            \".\" ) )\n-            .withArgument( new OptionalNamedArg( \"f\",\n-                    \"File containing all arguments to this import\",\n-                    \"\",\n-                    \"File containing all arguments, used as an alternative to supplying all arguments on the command line directly.\"\n-                            + \"Each argument can be on a separate line or multiple arguments per line separated by space.\"\n-                            + \"Arguments containing spaces needs to be quoted.\"\n-                            + \"Supplying other arguments in addition to this file argument is not supported.\" ) )\n-            .withArgument( new OptionalNamedArg( \"high-io\",\n-                    \"true/false\",\n-                    null,\n-                    \"Ignore environment-based heuristics, and assume that the target storage subsystem can support parallel IO with high throughput.\" ) );\n-    }\n+  private static void includeCsvArguments(Arguments arguments)\n+  {\n+    arguments\n+        .withArgument(new OptionalNamedArg(\"report-file\", \"filename\", DEFAULT_REPORT_FILE_NAME,\n+            \"File in which to store the report of the csv-import.\"))\n+        .withArgument(new OptionalNamedArgWithMetadata(\"nodes\",\n+            \":Label1:Label2\",\n+            \"\\\"file1,file2,...\\\"\", \"\",\n+            \"Node CSV header and data. Multiple files will be logically seen as \" +\n+                \"one big file from the perspective of the importer. The first line \" +\n+                \"must contain the header. Multiple data sources like these can be \" +\n+                \"specified in one import, where each data source has its own header. \" +\n+                \"Note that file groups must be enclosed in quotation marks.\"))\n+        .withArgument(new OptionalNamedArgWithMetadata(\"relationships\",\n+            \":RELATIONSHIP_TYPE\",\n+            \"\\\"file1,file2,...\\\"\",\n+            \"\",\n+            \"Relationship CSV header and data. Multiple files will be logically \" +\n+                \"seen as one big file from the perspective of the importer. The first \" +\n+                \"line must contain the header. Multiple data sources like these can be \" +\n+                \"specified in one import, where each data source has its own header. \" +\n+                \"Note that file groups must be enclosed in quotation marks.\"))\n+        .withArgument(new OptionalNamedArg(\"id-type\", new String[] {\"STRING\", \"INTEGER\", \"ACTUAL\"},\n+            \"STRING\", \"Each node must provide a unique id. This is used to find the correct \" +\n+            \"nodes when creating relationships. Possible values are:\\n\" +\n+            \"  STRING: arbitrary strings for identifying nodes,\\n\" +\n+            \"  INTEGER: arbitrary integer values for identifying nodes,\\n\" +\n+            \"  ACTUAL: (advanced) actual node ids.\\n\" +\n+            \"For more information on id handling, please see the Neo4j Manual: \" +\n+            \"https://neo4j.com/docs/operations-manual/current/tools/import/\"))\n+        .withArgument(new OptionalNamedArg(\"input-encoding\", \"character-set\", \"UTF-8\",\n+            \"Character set that input data is encoded in.\"))\n+        .withArgument(new OptionalBooleanArg(\"ignore-extra-columns\", false,\n+            \"If un-specified columns should be ignored during the import.\"))\n+        .withArgument(new OptionalBooleanArg(\"ignore-duplicate-nodes\", false,\n+            \"If duplicate nodes should be ignored during the import.\"))\n+        .withArgument(new OptionalBooleanArg(\"ignore-missing-nodes\", false,\n+            \"If relationships referring to missing nodes should be ignored during the import.\"))\n+        .withArgument(new OptionalBooleanArg(\"multiline-fields\",\n+            DEFAULT.multilineFields(),\n+            \"Whether or not fields from input source can span multiple lines,\" +\n+                \" i.e. contain newline characters.\"))\n+        .withArgument(new OptionalNamedArg(\"delimiter\",\n+            \"delimiter-character\",\n+            String.valueOf(COMMAS.delimiter()),\n+            \"Delimiter character between values in CSV data.\"))\n+        .withArgument(new OptionalNamedArg(\"array-delimiter\",\n+            \"array-delimiter-character\",\n+            String.valueOf(COMMAS.arrayDelimiter()),\n+            \"Delimiter character between array elements within a value in CSV data.\"))\n+        .withArgument(new OptionalNamedArg(\"quote\",\n+            \"quotation-character\",\n+            String.valueOf(COMMAS.quotationCharacter()),\n+            \"Character to treat as quotation character for values in CSV data. \"\n+                + \"Quotes can be escaped as per RFC 4180 by doubling them, for example \\\"\\\" would be \" +\n+                \"interpreted as a literal \\\". You cannot escape using \\\\.\"))\n+        .withArgument(new OptionalNamedArg(\"max-memory\",\n+            \"max-memory-that-importer-can-use\",\n+            String.valueOf(DEFAULT_MAX_MEMORY_PERCENT) + \"%\",\n+            \"Maximum memory that neo4j-admin can use for various data structures and caching \" +\n+                \"to improve performance. \" +\n+                \"Values can be plain numbers, like 10000000 or e.g. 20G for 20 gigabyte, or even e.g. 70%\" +\n+                \".\"))\n+        .withArgument(new OptionalNamedArg(\"f\",\n+            \"File containing all arguments to this import\",\n+            \"\",\n+            \"File containing all arguments, used as an alternative to supplying all arguments on the command line directly.\"\n+                + \"Each argument can be on a separate line or multiple arguments per line separated by space.\"\n+                + \"Arguments containing spaces needs to be quoted.\"\n+                + \"Supplying other arguments in addition to this file argument is not supported.\"))\n+        .withArgument(new OptionalNamedArg(\"high-io\",\n+            \"true/false\",\n+            null,\n+            \"Ignore environment-based heuristics, and assume that the target storage subsystem can support parallel IO with high throughput.\"));\n+  }\n \n-    static\n-    {\n-        includeDatabaseArguments( databaseArguments );\n-        includeDatabaseArguments( allArguments );\n+  static\n+  {\n+    includeDatabaseArguments(databaseArguments);\n+    includeDatabaseArguments(allArguments);\n \n-        includeCsvArguments( csvArguments );\n-        includeCsvArguments( allArguments );\n-    }\n+    includeCsvArguments(csvArguments);\n+    includeCsvArguments(allArguments);\n+  }\n \n-    public static Arguments databaseArguments()\n-    {\n-        return databaseArguments;\n-    }\n+  public static Arguments databaseArguments()\n+  {\n+    return databaseArguments;\n+  }\n \n-    public static Arguments csvArguments()\n-    {\n-        return csvArguments;\n-    }\n+  public static Arguments csvArguments()\n+  {\n+    return csvArguments;\n+  }\n \n-    public static Arguments allArguments()\n-    {\n-        return allArguments;\n-    }\n+  public static Arguments allArguments()\n+  {\n+    return allArguments;\n+  }\n \n-    private final Path homeDir;\n-    private final Path configDir;\n-    private final OutsideWorld outsideWorld;\n-    private final ImporterFactory importerFactory;\n+  private final Path homeDir;\n+  private final Path configDir;\n+  private final OutsideWorld outsideWorld;\n+  private final ImporterFactory importerFactory;\n \n-    public ImportCommand( Path homeDir, Path configDir, OutsideWorld outsideWorld )\n-    {\n-        this( homeDir, configDir, outsideWorld, new ImporterFactory() );\n-    }\n+  public ImportCommand(Path homeDir, Path configDir, OutsideWorld outsideWorld)\n+  {\n+    this(homeDir, configDir, outsideWorld, new ImporterFactory());\n+  }\n \n-    ImportCommand( Path homeDir, Path configDir, OutsideWorld outsideWorld, ImporterFactory importerFactory )\n-    {\n-        this.homeDir = homeDir;\n-        this.configDir = configDir;\n-        this.outsideWorld = outsideWorld;\n-        this.importerFactory = importerFactory;\n-    }\n+  ImportCommand(Path homeDir, Path configDir, OutsideWorld outsideWorld, ImporterFactory importerFactory)\n+  {\n+    this.homeDir = homeDir;\n+    this.configDir = configDir;\n+    this.outsideWorld = outsideWorld;\n+    this.importerFactory = importerFactory;\n+  }\n \n-    @Override\n-    public void execute( String[] args ) throws IncorrectUsage, CommandFailed\n-    {\n-        String mode;\n-        Optional<Path> additionalConfigFile;\n-        String database;\n+  @Override\n+  public void execute(String[] args) throws IncorrectUsage, CommandFailed\n+  {\n+    String mode;\n+    Optional<Path> additionalConfigFile;\n+    String database;\n \n-        try\n-        {\n-            mode = allArguments.parse( args ).get( \"mode\" );\n-            Optional<Path> fileArgument = allArguments.getOptionalPath( \"f\" );\n-            if ( fileArgument.isPresent() )\n-            {\n-                // Parsing the arguments inside the -f file and reassigning the \"args\" parameter, because it's the one\n-                // carrying the arguments to the actual importer.\n-                args = parseFileArgumentList( fileArgument.get().toFile() );\n-                allArguments.parse( args );\n-            }\n-            database = allArguments.get( ARG_DATABASE );\n-            additionalConfigFile = allArguments.getOptionalPath( \"additional-config\" );\n-        }\n-        catch ( IllegalArgumentException e )\n-        {\n-            throw new IncorrectUsage( e.getMessage() );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n-\n-        try\n-        {\n-            Config config =\n-                    loadNeo4jConfig( homeDir, configDir, database, loadAdditionalConfig( additionalConfigFile ) );\n-\n-            // The \"args\" parameter may have been reassigned from what came into this method.\n-            // This can happen if there was a -f argument in it, where arguments inside that file gets loaded into it.\n-            Importer importer = importerFactory.getImporterForMode( mode, Args.parse( args ), config, outsideWorld );\n-            importer.doImport();\n-        }\n-        catch ( IllegalArgumentException e )\n-        {\n-            throw new IncorrectUsage( e.getMessage() );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n+    try\n+    {\n+      mode = allArguments.parse(args).get(\"mode\");\n+      Optional<Path> fileArgument = allArguments.getOptionalPath(\"f\");\n+      if (fileArgument.isPresent())\n+      {\n+        // Parsing the arguments inside the -f file and reassigning the \"args\" parameter, because it's the one\n+        // carrying the arguments to the actual importer.\n+        args = parseFileArgumentList(fileArgument.get().toFile());\n+        allArguments.parse(args);\n+      }\n+      database = allArguments.get(ARG_DATABASE);\n+      additionalConfigFile = allArguments.getOptionalPath(\"additional-config\");\n+    } catch (IllegalArgumentException e)\n+    {\n+      throw new IncorrectUsage(e.getMessage());\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n \n-    private static Map<String,String> loadAdditionalConfig( Optional<Path> additionalConfigFile )\n+    try\n     {\n-        if ( additionalConfigFile.isPresent() )\n-        {\n-            try\n-            {\n-                return MapUtil.load( additionalConfigFile.get().toFile() );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Could not read configuration file [%s]\", additionalConfigFile ), e );\n-            }\n-        }\n+      Config config =\n+          loadNeo4jConfig(homeDir, configDir, database, loadAdditionalConfig(additionalConfigFile));\n \n-        return new HashMap<>();\n+      // The \"args\" parameter may have been reassigned from what came into this method.\n+      // This can happen if there was a -f argument in it, where arguments inside that file gets loaded into it.\n+      Importer importer = importerFactory.getImporterForMode(mode, Args.parse(args), config, outsideWorld);\n+      importer.doImport();\n+    } catch (IllegalArgumentException e)\n+    {\n+      throw new IncorrectUsage(e.getMessage());\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName,\n-            Map<String,String> additionalConfig )\n+  private static Map<String, String> loadAdditionalConfig(Optional<Path> additionalConfigFile)\n+  {\n+    if (additionalConfigFile.isPresent())\n     {\n-        return Config.fromFile( configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ) )\n-                .withHome( homeDir )\n-                .withSetting( GraphDatabaseSettings.active_database, databaseName )\n-                .withSettings( additionalConfig )\n-                .withConnectorsDisabled().build();\n+      try\n+      {\n+        return MapUtil.load(additionalConfigFile.get().toFile());\n+      } catch (IOException e)\n+      {\n+        throw new IllegalArgumentException(\n+            String.format(\"Could not read configuration file [%s]\", additionalConfigFile), e);\n+      }\n     }\n+\n+    return new HashMap<>();\n+  }\n+\n+  private static Config loadNeo4jConfig(Path homeDir, Path configDir, String databaseName,\n+                                        Map<String, String> additionalConfig)\n+  {\n+    return Config.fromFile(configDir.resolve(Config.DEFAULT_CONFIG_FILE_NAME))\n+        .withHome(homeDir)\n+        .withSetting(GraphDatabaseSettings.active_database, databaseName)\n+        .withSettings(additionalConfig)\n+        .withConnectorsDisabled().build();\n+  }\n }\n",
            "diff_size": 240
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 373).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 927).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1869/ImportCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1869/ImportCommand.java\nindex 359761bdd18..e59def0a9d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1869/ImportCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1869/ImportCommand.java\n@@ -50,117 +50,40 @@ public class ImportCommand implements AdminCommand\n {\n     public static final String DEFAULT_REPORT_FILE_NAME = \"import.report\";\n     private static final String[] allowedModes = {\"database\", \"csv\"};\n-    private static final Arguments databaseArguments = new Arguments()\n-            .withArgument( new MandatoryNamedArg( \"mode\", \"database\", \"Import a pre-3.0 installation.\" )\n+\n+private static final Arguments databaseArguments = new Arguments().withArgument( new MandatoryNamedArg( \"mode\", \"database\", \"Import a pre-3.0 installation.\" )\n             {\n                 @Override\n                 public String usage()\n                 {\n                     return String.format( \"--%s=%s\", name(), exampleValue() );\n                 }\n-            } )\n-            .withDatabase()\n-            .withAdditionalConfig();\n+            } ).withDatabase().withAdditionalConfig();\n \n-    private static final Arguments csvArguments = new Arguments()\n-            .withArgument( new OptionalNamedArg( \"mode\", \"csv\", \"csv\", \"Import a collection of CSV files.\" )\n+private static final Arguments csvArguments = new Arguments().withArgument( new OptionalNamedArg( \"mode\", \"csv\", \"csv\", \"Import a collection of CSV files.\" )\n             {\n                 @Override\n                 public String usage()\n                 {\n                     return String.format( \"[--%s=%s]\", name(), exampleValue() );\n                 }\n-            } )\n-            .withDatabase()\n-            .withAdditionalConfig();\n+            } ).withDatabase().withAdditionalConfig();\n \n-    private static final Arguments allArguments = new Arguments()\n-            .withDatabase()\n-            .withAdditionalConfig()\n-            .withArgument( new OptionalNamedArg( \"mode\", allowedModes, \"csv\",\n-                    \"Import a collection of CSV files or a pre-3.0 installation.\" ) );\n+private static final Arguments allArguments = new Arguments().withDatabase().withAdditionalConfig().withArgument( new OptionalNamedArg( \"mode\", allowedModes, \"csv\", \"Import a collection of CSV files or a pre-3.0 installation.\" ) );\n \n-    private static void includeDatabaseArguments( Arguments arguments )\n+private static void includeDatabaseArguments( Arguments arguments )\n     {\n-        arguments\n-            .withArgument( new OptionalNamedArg( \"from\", \"source-directory\", \"\",\n-                    \"The location of the pre-3.0 database (e.g. <neo4j-root>/data/graph.db).\" ) );\n+        arguments.withArgument( new OptionalNamedArg( \"from\", \"source-directory\", \"\", \"The location of the pre-3.0 database (e.g. <neo4j-root>/data/graph.db).\" ) );\n     }\n \n     private static void includeCsvArguments( Arguments arguments )\n     {\n-        arguments\n-            .withArgument( new OptionalNamedArg( \"report-file\", \"filename\", DEFAULT_REPORT_FILE_NAME,\n-                    \"File in which to store the report of the csv-import.\" ) )\n-            .withArgument( new OptionalNamedArgWithMetadata( \"nodes\",\n-                    \":Label1:Label2\",\n-                    \"\\\"file1,file2,...\\\"\", \"\",\n-                    \"Node CSV header and data. Multiple files will be logically seen as \" +\n-                            \"one big file from the perspective of the importer. The first line \" +\n-                            \"must contain the header. Multiple data sources like these can be \" +\n-                            \"specified in one import, where each data source has its own header. \" +\n-                    \"Note that file groups must be enclosed in quotation marks.\" ) )\n-            .withArgument( new OptionalNamedArgWithMetadata( \"relationships\",\n-                    \":RELATIONSHIP_TYPE\",\n-                    \"\\\"file1,file2,...\\\"\",\n-                    \"\",\n-                    \"Relationship CSV header and data. Multiple files will be logically \" +\n-                            \"seen as one big file from the perspective of the importer. The first \" +\n-                            \"line must contain the header. Multiple data sources like these can be \" +\n-                            \"specified in one import, where each data source has its own header. \" +\n-                    \"Note that file groups must be enclosed in quotation marks.\" ) )\n-            .withArgument( new OptionalNamedArg( \"id-type\", new String[]{\"STRING\", \"INTEGER\", \"ACTUAL\"},\n-                    \"STRING\", \"Each node must provide a unique id. This is used to find the correct \" +\n-                    \"nodes when creating relationships. Possible values are:\\n\" +\n-                    \"  STRING: arbitrary strings for identifying nodes,\\n\" +\n-                    \"  INTEGER: arbitrary integer values for identifying nodes,\\n\" +\n-                    \"  ACTUAL: (advanced) actual node ids.\\n\" +\n-                    \"For more information on id handling, please see the Neo4j Manual: \" +\n-                    \"https://neo4j.com/docs/operations-manual/current/tools/import/\" ) )\n-            .withArgument( new OptionalNamedArg( \"input-encoding\", \"character-set\", \"UTF-8\",\n-                    \"Character set that input data is encoded in.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"ignore-extra-columns\", false,\n-                    \"If un-specified columns should be ignored during the import.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"ignore-duplicate-nodes\", false,\n-                    \"If duplicate nodes should be ignored during the import.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"ignore-missing-nodes\", false,\n-                    \"If relationships referring to missing nodes should be ignored during the import.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"multiline-fields\",\n-                    DEFAULT.multilineFields(),\n-                    \"Whether or not fields from input source can span multiple lines,\" +\n-                            \" i.e. contain newline characters.\" ) )\n-            .withArgument( new OptionalNamedArg( \"delimiter\",\n-                    \"delimiter-character\",\n-                    String.valueOf( COMMAS.delimiter() ),\n-                    \"Delimiter character between values in CSV data.\" ) )\n-            .withArgument( new OptionalNamedArg( \"array-delimiter\",\n-                    \"array-delimiter-character\",\n-                    String.valueOf( COMMAS.arrayDelimiter() ),\n-                    \"Delimiter character between array elements within a value in CSV data.\" ) )\n-            .withArgument( new OptionalNamedArg( \"quote\",\n-                    \"quotation-character\",\n-                    String.valueOf( COMMAS.quotationCharacter() ),\n-                    \"Character to treat as quotation character for values in CSV data. \"\n-                            + \"Quotes can be escaped as per RFC 4180 by doubling them, for example \\\"\\\" would be \" +\n-                            \"interpreted as a literal \\\". You cannot escape using \\\\.\" ) )\n-            .withArgument( new OptionalNamedArg( \"max-memory\",\n-                    \"max-memory-that-importer-can-use\",\n-                    String.valueOf( DEFAULT_MAX_MEMORY_PERCENT ) + \"%\",\n-                    \"Maximum memory that neo4j-admin can use for various data structures and caching \" +\n-                            \"to improve performance. \" +\n-                            \"Values can be plain numbers, like 10000000 or e.g. 20G for 20 gigabyte, or even e.g. 70%\" +\n-                            \".\" ) )\n-            .withArgument( new OptionalNamedArg( \"f\",\n-                    \"File containing all arguments to this import\",\n-                    \"\",\n-                    \"File containing all arguments, used as an alternative to supplying all arguments on the command line directly.\"\n-                            + \"Each argument can be on a separate line or multiple arguments per line separated by space.\"\n-                            + \"Arguments containing spaces needs to be quoted.\"\n-                            + \"Supplying other arguments in addition to this file argument is not supported.\" ) )\n-            .withArgument( new OptionalNamedArg( \"high-io\",\n-                    \"true/false\",\n-                    null,\n-                    \"Ignore environment-based heuristics, and assume that the target storage subsystem can support parallel IO with high throughput.\" ) );\n+        arguments.withArgument( new OptionalNamedArg( \"report-file\", \"filename\", DEFAULT_REPORT_FILE_NAME, \"File in which to store the report of the csv-import.\" ) ).withArgument( new OptionalNamedArgWithMetadata( \"nodes\", \":Label1:Label2\", \"\\\"file1,file2,...\\\"\", \"\", \"Node CSV header and data. Multiple files will be logically seen as \" + \"one big file from the perspective of the importer. The first line \" + \"must contain the header. Multiple data sources like these can be \" + \"specified in one import, where each data source has its own header. \" + \"Note that file groups must be enclosed in quotation marks.\" ) ).withArgument( new OptionalNamedArgWithMetadata( \"relationships\", \":RELATIONSHIP_TYPE\", \"\\\"file1,file2,...\\\"\", \"\", \"Relationship CSV header and data. Multiple files will be logically \" + \"seen as one big file from the perspective of the importer. The first \" + \"line must contain the header. Multiple data sources like these can be \" + \"specified in one import, where each data source has its own header. \" + \"Note that file groups must be enclosed in quotation marks.\" ) ).withArgument( new OptionalNamedArg( \"id-type\", new String[]{\"STRING\", \"INTEGER\", \"ACTUAL\"}, \"STRING\", \"Each node must provide a unique id. This is used to find the correct \" + \"nodes when creating relationships. Possible values are:\\n\" + \"  STRING: arbitrary strings for identifying nodes,\\n\" + \"  INTEGER: arbitrary integer values for identifying nodes,\\n\" + \"  ACTUAL: (advanced) actual node ids.\\n\" + \"For more information on id handling, please see the Neo4j Manual: \" + \"https://neo4j.com/docs/operations-manual/current/tools/import/\" ) ).withArgument( new OptionalNamedArg( \"input-encoding\", \"character-set\", \"UTF-8\", \"Character set that input data is encoded in.\" ) ).withArgument( new OptionalBooleanArg( \"ignore-extra-columns\", false, \"If un-specified columns should be ignored during the import.\" ) ).withArgument( new OptionalBooleanArg( \"ignore-duplicate-nodes\", false, \"If duplicate nodes should be ignored during the import.\" ) ).withArgument( new OptionalBooleanArg( \"ignore-missing-nodes\", false, \"If relationships referring to missing nodes should be ignored during the import.\" ) ).withArgument( new OptionalBooleanArg( \"multiline-fields\",\n+                    DEFAULT.multilineFields(), \"Whether or not fields from input source can span multiple lines,\" + \" i.e. contain newline characters.\" ) ).withArgument( new OptionalNamedArg( \"delimiter\", \"delimiter-character\",\n+                    String.valueOf( COMMAS.delimiter() ), \"Delimiter character between values in CSV data.\" ) ).withArgument( new OptionalNamedArg( \"array-delimiter\", \"array-delimiter-character\",\n+                    String.valueOf( COMMAS.arrayDelimiter() ), \"Delimiter character between array elements within a value in CSV data.\" ) ).withArgument( new OptionalNamedArg( \"quote\", \"quotation-character\",\n+                    String.valueOf( COMMAS.quotationCharacter() ), \"Character to treat as quotation character for values in CSV data. \" + \"Quotes can be escaped as per RFC 4180 by doubling them, for example \\\"\\\" would be \" + \"interpreted as a literal \\\". You cannot escape using \\\\.\" ) ).withArgument( new OptionalNamedArg( \"max-memory\", \"max-memory-that-importer-can-use\",\n+                    String.valueOf( DEFAULT_MAX_MEMORY_PERCENT ) + \"%\", \"Maximum memory that neo4j-admin can use for various data structures and caching \" + \"to improve performance. \" + \"Values can be plain numbers, like 10000000 or e.g. 20G for 20 gigabyte, or even e.g. 70%\" + \".\" ) ).withArgument( new OptionalNamedArg( \"f\", \"File containing all arguments to this import\", \"\", \"File containing all arguments, used as an alternative to supplying all arguments on the command line directly.\" + \"Each argument can be on a separate line or multiple arguments per line separated by space.\" + \"Arguments containing spaces needs to be quoted.\" + \"Supplying other arguments in addition to this file argument is not supported.\" ) ).withArgument( new OptionalNamedArg( \"high-io\", \"true/false\", null, \"Ignore environment-based heuristics, and assume that the target storage subsystem can support parallel IO with high throughput.\" ) );\n     }\n \n     static\n@@ -223,7 +146,8 @@ public class ImportCommand implements AdminCommand\n                 args = parseFileArgumentList( fileArgument.get().toFile() );\n                 allArguments.parse( args );\n             }\n-            database = allArguments.get( ARG_DATABASE );\n+\n+database = allArguments.get( ARG_DATABASE );\n             additionalConfigFile = allArguments.getOptionalPath( \"additional-config\" );\n         }\n         catch ( IllegalArgumentException e )\n@@ -237,10 +161,8 @@ public class ImportCommand implements AdminCommand\n \n         try\n         {\n-            Config config =\n-                    loadNeo4jConfig( homeDir, configDir, database, loadAdditionalConfig( additionalConfigFile ) );\n-\n-            // The \"args\" parameter may have been reassigned from what came into this method.\n+            Config config = loadNeo4jConfig( homeDir, configDir, database, loadAdditionalConfig( additionalConfigFile ) );\n+    // The \"args\" parameter may have been reassigned from what came into this method.\n             // This can happen if there was a -f argument in it, where arguments inside that file gets loaded into it.\n             Importer importer = importerFactory.getImporterForMode( mode, Args.parse( args ), config, outsideWorld );\n             importer.doImport();\n@@ -265,21 +187,18 @@ public class ImportCommand implements AdminCommand\n             }\n             catch ( IOException e )\n             {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Could not read configuration file [%s]\", additionalConfigFile ), e );\n-            }\n+                throw new IllegalArgumentException( String.format( \"Could not read configuration file [%s]\", additionalConfigFile ), e );\n+    }\n         }\n \n         return new HashMap<>();\n     }\n \n-    private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName,\n-            Map<String,String> additionalConfig )\n+    private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName, Map<String,String> additionalConfig )\n     {\n-        return Config.fromFile( configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ) )\n-                .withHome( homeDir )\n+        return Config.fromFile( configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ) ).withHome( homeDir )\n                 .withSetting( GraphDatabaseSettings.active_database, databaseName )\n                 .withSettings( additionalConfig )\n                 .withConnectorsDisabled().build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 105
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}