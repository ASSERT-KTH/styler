{
    "project_name": "Chaklader-Object-Oriented-Design",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "86",
                "column": "48",
                "severity": "error",
                "message": "'}' at column 48 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    for (int i = 0; i < THREAD_COUNT; i++) {\n      executorService.execute(() -> {\n        while (inventory.addItem(new Item())) {};\n      });\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "86",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/47/InventoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/intellij/47/InventoryTest.java\nindex 0b1487e1123..5d1a7781d8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/47/InventoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/intellij/47/InventoryTest.java\n@@ -1,17 +1,17 @@\n /**\n  * The MIT License\n  * Copyright (c) 2014-2016 Ilkka Sepp\u00e4l\u00e4\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -83,7 +83,9 @@ public class InventoryTest {\n     final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);\n     for (int i = 0; i < THREAD_COUNT; i++) {\n       executorService.execute(() -> {\n-        while (inventory.addItem(new Item())) {};\n+        while (inventory.addItem(new Item())) {\n+        }\n+        ;\n       });\n     }\n \n@@ -105,7 +107,6 @@ public class InventoryTest {\n   }\n \n \n-\n   private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private List<ILoggingEvent> log = new LinkedList<>();\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "'class def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/47/InventoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/47/InventoryTest.java\nindex 0b1487e1123..2b881343860 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/47/InventoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/47/InventoryTest.java\n@@ -104,9 +104,7 @@ public class InventoryTest {\n     }\n   }\n \n-\n-\n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender(Class clazz) {\n@@ -124,4 +122,4 @@ public class InventoryTest {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/47/InventoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/47/InventoryTest.java\nindex 0b1487e1123..9b604a2b7aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/47/InventoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/47/InventoryTest.java\n@@ -29,7 +29,6 @@ import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.LoggerFactory;\n-\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.ExecutorService;\n@@ -45,6 +44,8 @@ import static org.junit.Assert.assertTrue;\n  *\n  * @author Jeroen Meulemeester\n  */\n+\n+\n public class InventoryTest {\n \n   private InMemoryAppender appender;\n@@ -63,6 +64,7 @@ public class InventoryTest {\n    * The number of threads used to stress test the locking of the {@link Inventory#addItem(Item)}\n    * method\n    */\n+\n   private static final int THREAD_COUNT = 8;\n \n   /**\n@@ -76,6 +78,7 @@ public class InventoryTest {\n    * of order, it means that the locking is not ok, increasing the risk of going over the inventory\n    * item limit.\n    */\n+\n   @Test(timeout = 10000)\n   public void testAddItem() throws Exception {\n     // Create a new inventory with a limit of 1000 items and put some load on the add method\n@@ -83,19 +86,22 @@ public class InventoryTest {\n     final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);\n     for (int i = 0; i < THREAD_COUNT; i++) {\n       executorService.execute(() -> {\n-        while (inventory.addItem(new Item())) {};\n+        while (inventory.addItem(new Item())) {\n+        }\n+        ;\n       });\n     }\n \n     // Wait until all threads have finished\n+\n     executorService.shutdown();\n     executorService.awaitTermination(5, TimeUnit.SECONDS);\n \n     // Check the number of items in the inventory. It should not have exceeded the allowed maximum\n+\n     final List<Item> items = inventory.getItems();\n     assertNotNull(items);\n     assertEquals(INVENTORY_SIZE, items.size());\n-\n     assertEquals(INVENTORY_SIZE, appender.getLogSize());\n \n     // ... and check if the inventory size is increasing continuously\n@@ -104,9 +110,8 @@ public class InventoryTest {\n     }\n   }\n \n-\n-\n   private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+\n     private List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender(Class clazz) {\n@@ -119,9 +124,9 @@ public class InventoryTest {\n       log.add(eventObject);\n     }\n \n+\n     public int getLogSize() {\n       return log.size();\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "86",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "86",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}