{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1872",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "293",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1872/KeyValueStoreFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1872/KeyValueStoreFile.java\nindex ef0ec7fb5e4..99433be06a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1872/KeyValueStoreFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1872/KeyValueStoreFile.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.kvstore;\n \n import java.io.Closeable;\n@@ -36,311 +37,312 @@ import static org.neo4j.kernel.impl.store.kvstore.BigEndianByteArrayBuffer.newBu\n  */\n public class KeyValueStoreFile implements Closeable\n {\n-    private final PagedFile file;\n-    private final int keySize;\n-    private final int valueSize;\n-    private final Headers headers;\n-    private final int headerEntries;\n-    /** Includes header, data and trailer entries. */\n-    private final int totalEntries;\n-    /**\n-     * The page catalogue is used to find the appropriate (first) page without having to do I/O.\n-     * <p>\n-     * <b>Content:</b> {@code (minKey, maxKey)+}, one entry (at {@code 2 x} {@link #keySize}) for each page.\n-     */\n-    private final byte[] pageCatalogue;\n+  private final PagedFile file;\n+  private final int keySize;\n+  private final int valueSize;\n+  private final Headers headers;\n+  private final int headerEntries;\n+  /**\n+   * Includes header, data and trailer entries.\n+   */\n+  private final int totalEntries;\n+  /**\n+   * The page catalogue is used to find the appropriate (first) page without having to do I/O.\n+   * <p>\n+   * <b>Content:</b> {@code (minKey, maxKey)+}, one entry (at {@code 2 x} {@link #keySize}) for each page.\n+   */\n+  private final byte[] pageCatalogue;\n+\n+  KeyValueStoreFile(PagedFile file, int keySize, int valueSize, Metadata metadata)\n+  {\n+    this.file = file;\n+    this.keySize = keySize;\n+    this.valueSize = valueSize;\n+    this.headerEntries = metadata.headerEntries();\n+    this.totalEntries = metadata.totalEntries();\n+    this.headers = metadata.headers();\n+    this.pageCatalogue = metadata.pageCatalogue();\n+  }\n+\n+  public Headers headers()\n+  {\n+    return headers;\n+  }\n \n-    KeyValueStoreFile( PagedFile file, int keySize, int valueSize, Metadata metadata )\n+  /**\n+   * Visit key value pairs that are greater than or equal to the specified key. Visitation will continue as long as\n+   * the visitor {@link KeyValueVisitor#visit(ReadableBuffer, ReadableBuffer) returns true}.\n+   *\n+   * @return {@code true} if an exact match was found, meaning that the first visited key/value pair was a perfect\n+   * match for the specified key.\n+   */\n+  public boolean scan(SearchKey search, KeyValueVisitor visitor) throws IOException\n+  {\n+    BigEndianByteArrayBuffer searchKey = newBuffer(keySize);\n+    BigEndianByteArrayBuffer key = newBuffer(keySize);\n+    BigEndianByteArrayBuffer value = newBuffer(valueSize);\n+    search.searchKey(searchKey);\n+    int page = findPage(searchKey, pageCatalogue);\n+    if (page < 0 || (page >= pageCatalogue.length / (keySize * 2)))\n     {\n-        this.file = file;\n-        this.keySize = keySize;\n-        this.valueSize = valueSize;\n-        this.headerEntries = metadata.headerEntries();\n-        this.totalEntries = metadata.totalEntries();\n-        this.headers = metadata.headers();\n-        this.pageCatalogue = metadata.pageCatalogue();\n+      return false;\n     }\n-\n-    public Headers headers()\n+    try (PageCursor cursor = file.io(page, PF_SHARED_READ_LOCK))\n     {\n-        return headers;\n+      if (!cursor.next())\n+      {\n+        return false;\n+      }\n+      // finds and reads the first key/value pair\n+      int offset = findByteOffset(cursor, searchKey, key, value);\n+      try\n+      {\n+        return Arrays.equals(searchKey.buffer, key.buffer);\n+      } finally\n+      {\n+        visitKeyValuePairs(file.pageSize(), cursor, offset, visitor, false, key, value);\n+      }\n     }\n+  }\n \n-    /**\n-     * Visit key value pairs that are greater than or equal to the specified key. Visitation will continue as long as\n-     * the visitor {@link KeyValueVisitor#visit(ReadableBuffer, ReadableBuffer) returns true}.\n-     *\n-     * @return {@code true} if an exact match was found, meaning that the first visited key/value pair was a perfect\n-     * match for the specified key.\n-     */\n-    public boolean scan( SearchKey search, KeyValueVisitor visitor ) throws IOException\n+  public DataProvider dataProvider() throws IOException\n+  {\n+    int pageId = headerEntries * (keySize + valueSize) / file.pageSize();\n+    final PageCursor cursor = file.io(pageId, PF_SHARED_READ_LOCK);\n+    return new DataProvider()\n     {\n-        BigEndianByteArrayBuffer searchKey = newBuffer( keySize );\n-        BigEndianByteArrayBuffer key = newBuffer( keySize );\n-        BigEndianByteArrayBuffer value = newBuffer( valueSize );\n-        search.searchKey( searchKey );\n-        int page = findPage( searchKey, pageCatalogue );\n-        if ( page < 0 || (page >= pageCatalogue.length / (keySize * 2)) )\n+      int offset = headerEntries * (keySize + valueSize);\n+      boolean done = !cursor.next();\n+\n+      @Override\n+      public boolean visit(WritableBuffer key, WritableBuffer value) throws IOException\n+      {\n+        if (done)\n         {\n-            return false;\n+          return false;\n         }\n-        try ( PageCursor cursor = file.io( page, PF_SHARED_READ_LOCK ) )\n+        readKeyValuePair(cursor, offset, key, value);\n+        if (key.allZeroes())\n         {\n-            if ( !cursor.next() )\n-            {\n-                return false;\n-            }\n-            // finds and reads the first key/value pair\n-            int offset = findByteOffset( cursor, searchKey, key, value );\n-            try\n-            {\n-                return Arrays.equals( searchKey.buffer, key.buffer );\n-            }\n-            finally\n-            {\n-                visitKeyValuePairs( file.pageSize(), cursor, offset, visitor, false, key, value );\n-            }\n+          done = true;\n+          return false;\n         }\n-    }\n-\n-    public DataProvider dataProvider() throws IOException\n-    {\n-        int pageId = headerEntries * (keySize + valueSize) / file.pageSize();\n-        final PageCursor cursor = file.io( pageId, PF_SHARED_READ_LOCK );\n-        return new DataProvider()\n+        offset += key.size() + value.size();\n+        if (offset >= file.pageSize())\n         {\n-            int offset = headerEntries * (keySize + valueSize);\n-            boolean done = !cursor.next();\n+          offset = 0;\n+          if (!cursor.next())\n+          {\n+            done = true;\n+          }\n+        }\n+        return true;\n+      }\n \n-            @Override\n-            public boolean visit( WritableBuffer key, WritableBuffer value ) throws IOException\n-            {\n-                if ( done )\n-                {\n-                    return false;\n-                }\n-                readKeyValuePair( cursor, offset, key, value );\n-                if ( key.allZeroes() )\n-                {\n-                    done = true;\n-                    return false;\n-                }\n-                offset += key.size() + value.size();\n-                if ( offset >= file.pageSize() )\n-                {\n-                    offset = 0;\n-                    if ( !cursor.next() )\n-                    {\n-                        done = true;\n-                    }\n-                }\n-                return true;\n-            }\n+      @Override\n+      public void close()\n+      {\n+        cursor.close();\n+      }\n+    };\n+  }\n \n-            @Override\n-            public void close()\n-            {\n-                cursor.close();\n-            }\n-        };\n-    }\n+  public void scan(KeyValueVisitor visitor) throws IOException\n+  {\n+    scanAll(file, headerEntries * (keySize + valueSize), visitor,\n+        new BigEndianByteArrayBuffer(new byte[keySize]),\n+        new BigEndianByteArrayBuffer(new byte[valueSize]));\n+  }\n \n-    public void scan( KeyValueVisitor visitor ) throws IOException\n-    {\n-        scanAll( file, headerEntries * (keySize + valueSize), visitor,\n-                new BigEndianByteArrayBuffer( new byte[keySize] ),\n-                new BigEndianByteArrayBuffer( new byte[valueSize] ) );\n-    }\n+  public int entryCount()\n+  {\n+    return totalEntries - headerEntries;\n+  }\n \n-    public int entryCount()\n-    {\n-        return totalEntries - headerEntries;\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    file.close();\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        file.close();\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[\" + file + \"]\";\n+  }\n \n-    @Override\n-    public String toString()\n+  static <Buffer extends BigEndianByteArrayBuffer> void scanAll(PagedFile file, int startOffset,\n+                                                                EntryVisitor<? super Buffer> visitor, Buffer key, Buffer value) throws IOException\n+  {\n+    boolean visitHeaders = !(visitor instanceof KeyValueVisitor);\n+    try (PageCursor cursor = file.io(startOffset / file.pageSize(), PF_SHARED_READ_LOCK))\n     {\n-        return getClass().getSimpleName() + \"[\" + file + \"]\";\n+      if (!cursor.next())\n+      {\n+        return;\n+      }\n+      readKeyValuePair(cursor, startOffset, key, value);\n+      visitKeyValuePairs(file.pageSize(), cursor, startOffset, visitor, visitHeaders, key, value);\n     }\n+  }\n \n-    static <Buffer extends BigEndianByteArrayBuffer> void scanAll( PagedFile file, int startOffset,\n-            EntryVisitor<? super Buffer> visitor, Buffer key, Buffer value ) throws IOException\n+  /**\n+   * Expects the first key/value-pair to be read into the buffers already, reads subsequent pairs (if requested).\n+   */\n+  private static <Buffer extends BigEndianByteArrayBuffer> void visitKeyValuePairs(int pageSize, PageCursor cursor,\n+                                                                                   int offset, EntryVisitor<? super Buffer> visitor, boolean visitHeaders,\n+                                                                                   Buffer key, Buffer value)\n+      throws IOException\n+  {\n+    while (visitable(key, visitHeaders) && visitor.visit(key, value))\n     {\n-        boolean visitHeaders = !(visitor instanceof KeyValueVisitor);\n-        try ( PageCursor cursor = file.io( startOffset / file.pageSize(), PF_SHARED_READ_LOCK ) )\n+      offset += key.size() + value.size();\n+      if (offset >= pageSize)\n+      {\n+        offset = 0;\n+        if (!cursor.next())\n         {\n-            if ( !cursor.next() )\n-            {\n-                return;\n-            }\n-            readKeyValuePair( cursor, startOffset, key, value );\n-            visitKeyValuePairs( file.pageSize(), cursor, startOffset, visitor, visitHeaders, key, value );\n+          return;\n         }\n+      }\n+      // reads the next key/value pair\n+      readKeyValuePair(cursor, offset, key, value);\n     }\n+  }\n \n-    /** Expects the first key/value-pair to be read into the buffers already, reads subsequent pairs (if requested). */\n-    private static <Buffer extends BigEndianByteArrayBuffer> void visitKeyValuePairs( int pageSize, PageCursor cursor,\n-            int offset, EntryVisitor<? super Buffer> visitor, boolean visitHeaders, Buffer key, Buffer value )\n-            throws IOException\n-    {\n-        while ( visitable( key, visitHeaders ) && visitor.visit( key, value ) )\n-        {\n-            offset += key.size() + value.size();\n-            if ( offset >= pageSize )\n-            {\n-                offset = 0;\n-                if ( !cursor.next() )\n-                {\n-                    return;\n-                }\n-            }\n-            // reads the next key/value pair\n-            readKeyValuePair( cursor, offset, key, value );\n-        }\n-    }\n+  private static boolean visitable(BigEndianByteArrayBuffer key, boolean acceptZeroKey)\n+  {\n+    return acceptZeroKey || !key.allZeroes();\n+  }\n \n-    private static boolean visitable( BigEndianByteArrayBuffer key, boolean acceptZeroKey )\n+  private static void readKeyValuePair(PageCursor cursor, int offset, WritableBuffer key, WritableBuffer value)\n+      throws IOException\n+  {\n+    do\n     {\n-        return acceptZeroKey || !key.allZeroes();\n+      cursor.setOffset(offset);\n+      key.getFrom(cursor);\n+      value.getFrom(cursor);\n     }\n-\n-    private static void readKeyValuePair( PageCursor cursor, int offset, WritableBuffer key, WritableBuffer value )\n-            throws IOException\n+    while (cursor.shouldRetry());\n+    if (cursor.checkAndClearBoundsFlag())\n     {\n-        do\n-        {\n-            cursor.setOffset( offset );\n-            key.getFrom( cursor );\n-            value.getFrom( cursor );\n-        }\n-        while ( cursor.shouldRetry() );\n-        if ( cursor.checkAndClearBoundsFlag() )\n-        {\n-            throwOutOfBounds( cursor, offset );\n-        }\n+      throwOutOfBounds(cursor, offset);\n     }\n+  }\n \n-    private static void throwOutOfBounds( PageCursor cursor, int offset )\n-    {\n-        long pageId = cursor.getCurrentPageId();\n-        int pageSize = cursor.getCurrentPageSize();\n-        String file = cursor.getCurrentFile().getAbsolutePath();\n-        throw new UnderlyingStorageException(\n-                \"Out of page bounds when reading key-value pair from offset \" + offset + \" into page \" +\n-                pageId + \" (with a size of \" + pageSize + \" bytes) of file \" + file );\n-    }\n+  private static void throwOutOfBounds(PageCursor cursor, int offset)\n+  {\n+    long pageId = cursor.getCurrentPageId();\n+    int pageSize = cursor.getCurrentPageSize();\n+    String file = cursor.getCurrentFile().getAbsolutePath();\n+    throw new UnderlyingStorageException(\n+        \"Out of page bounds when reading key-value pair from offset \" + offset + \" into page \" +\n+            pageId + \" (with a size of \" + pageSize + \" bytes) of file \" + file);\n+  }\n \n-    /**\n-     * Finds the page that would contain the given key from the {@linkplain #pageCatalogue page catalogue}.\n-     *\n-     * @param key The key to look for.\n-     * @return {@code -1} if the key is not contained in any page,\n-     * otherwise the id of the page that would contain the key is returned.\n-     */\n-    static int findPage( BigEndianByteArrayBuffer key, byte[] catalogue )\n+  /**\n+   * Finds the page that would contain the given key from the {@linkplain #pageCatalogue page catalogue}.\n+   *\n+   * @param key The key to look for.\n+   * @return {@code -1} if the key is not contained in any page,\n+   * otherwise the id of the page that would contain the key is returned.\n+   */\n+  static int findPage(BigEndianByteArrayBuffer key, byte[] catalogue)\n+  {\n+    int max = catalogue.length / (key.size() * 2) - 1;\n+    int min = 0;\n+    for (int mid; min <= max; )\n     {\n-        int max = catalogue.length / (key.size() * 2) - 1;\n-        int min = 0;\n-        for ( int mid; min <= max; )\n+      mid = min + (max - min) / 2;\n+      // look at the low mark for the page\n+      int cmp = compare(key.buffer, catalogue, mid * key.size() * 2);\n+      if (cmp == 0)\n+      {\n+        // this page starts with the key\n+        // the previous page might also contain mid the key\n+        max = mid;\n+      }\n+      if (cmp > 0)\n+      {\n+        // look at the high mark for the page\n+        cmp = compare(key.buffer, catalogue, mid * key.size() * 2 + key.size());\n+        if (cmp <= 0)\n+        {\n+          return mid; // the key is within the range of this page\n+        } else // look at pages after 'mid'\n         {\n-            mid = min + (max - min) / 2;\n-            // look at the low mark for the page\n-            int cmp = compare( key.buffer, catalogue, mid * key.size() * 2 );\n-            if ( cmp == 0 )\n-            {\n-                // this page starts with the key\n-                // the previous page might also contain mid the key\n-                max = mid;\n-            }\n-            if ( cmp > 0 )\n-            {\n-                // look at the high mark for the page\n-                cmp = compare( key.buffer, catalogue, mid * key.size() * 2 + key.size() );\n-                if ( cmp <= 0 )\n-                {\n-                    return mid; // the key is within the range of this page\n-                }\n-                else // look at pages after 'mid'\n-                {\n-                    min = mid + 1;\n-                }\n-            }\n-            else // look at pages before 'mid'\n-            {\n-                max = mid - 1;\n-            }\n+          min = mid + 1;\n         }\n-        return min; // the first page after the value that was smaller than the key (mid + 1, you know...)\n+      } else // look at pages before 'mid'\n+      {\n+        max = mid - 1;\n+      }\n     }\n+    return min; // the first page after the value that was smaller than the key (mid + 1, you know...)\n+  }\n \n-    /**\n-     * @param cursor the cursor for the page to search for the key in.\n-     * @param searchKey the key to search for.\n-     * @param key a buffer to write the key into.\n-     * @param value a buffer to write the value into.\n-     * @return the offset (in bytes within the given page) of the first entry with a key that is greater than or equal\n-     * to the given key.\n-     */\n-    private int findByteOffset( PageCursor cursor, BigEndianByteArrayBuffer searchKey, BigEndianByteArrayBuffer key,\n-            BigEndianByteArrayBuffer value ) throws IOException\n-    {\n-        int entrySize = searchKey.size() + value.size();\n-        int last = maxPage( file.pageSize(), entrySize, totalEntries );\n-        int firstEntry = (cursor.getCurrentPageId() == 0) ? headerEntries : 0; // skip header in first page\n-        int entryCount = totalEntries % (file.pageSize() / entrySize);\n-        // If the last page is full, 'entryCount' will be 0 at this point.\n-        if ( cursor.getCurrentPageId() != last || entryCount == 0 )\n-        { // The current page is a full page (either because it has pages after it, or the last page is actually full).\n-            entryCount = file.pageSize() / entrySize;\n-        }\n-        int entryOffset = findEntryOffset( cursor, searchKey, key, value, firstEntry, entryCount - 1 );\n-        return entryOffset * entrySize;\n+  /**\n+   * @param cursor    the cursor for the page to search for the key in.\n+   * @param searchKey the key to search for.\n+   * @param key       a buffer to write the key into.\n+   * @param value     a buffer to write the value into.\n+   * @return the offset (in bytes within the given page) of the first entry with a key that is greater than or equal\n+   * to the given key.\n+   */\n+  private int findByteOffset(PageCursor cursor, BigEndianByteArrayBuffer searchKey, BigEndianByteArrayBuffer key,\n+                             BigEndianByteArrayBuffer value) throws IOException\n+  {\n+    int entrySize = searchKey.size() + value.size();\n+    int last = maxPage(file.pageSize(), entrySize, totalEntries);\n+    int firstEntry = (cursor.getCurrentPageId() == 0) ? headerEntries : 0; // skip header in first page\n+    int entryCount = totalEntries % (file.pageSize() / entrySize);\n+    // If the last page is full, 'entryCount' will be 0 at this point.\n+    if (cursor.getCurrentPageId() != last || entryCount == 0)\n+    { // The current page is a full page (either because it has pages after it, or the last page is actually full).\n+      entryCount = file.pageSize() / entrySize;\n     }\n+    int entryOffset = findEntryOffset(cursor, searchKey, key, value, firstEntry, entryCount - 1);\n+    return entryOffset * entrySize;\n+  }\n \n-    static int maxPage( int pageSize, int entrySize, int totalEntries )\n-    {\n-        int maxPage = totalEntries / (pageSize / entrySize);\n-        return maxPage * (pageSize / entrySize) == totalEntries ? maxPage - 1 : maxPage;\n-    }\n+  static int maxPage(int pageSize, int entrySize, int totalEntries)\n+  {\n+    int maxPage = totalEntries / (pageSize / entrySize);\n+    return maxPage * (pageSize / entrySize) == totalEntries ? maxPage - 1 : maxPage;\n+  }\n \n-    /**\n-     * @param cursor the cursor for the page to search for the key in.\n-     * @param searchKey the key to search for.\n-     * @param key a buffer to write the key into.\n-     * @param value a buffer to write the value into.\n-     * @param min the offset (in number of entries within the page) of the first entry in the page.\n-     * @param max the offset (in number of entries within the page) of the last entry in the page.\n-     * @return the offset (in number of entries within the page) of the first entry with a key that is greater than or\n-     * equal to the given key.\n-     */\n-    static int findEntryOffset( PageCursor cursor, BigEndianByteArrayBuffer searchKey, BigEndianByteArrayBuffer key,\n-            BigEndianByteArrayBuffer value, int min, int max ) throws IOException\n+  /**\n+   * @param cursor    the cursor for the page to search for the key in.\n+   * @param searchKey the key to search for.\n+   * @param key       a buffer to write the key into.\n+   * @param value     a buffer to write the value into.\n+   * @param min       the offset (in number of entries within the page) of the first entry in the page.\n+   * @param max       the offset (in number of entries within the page) of the last entry in the page.\n+   * @return the offset (in number of entries within the page) of the first entry with a key that is greater than or\n+   * equal to the given key.\n+   */\n+  static int findEntryOffset(PageCursor cursor, BigEndianByteArrayBuffer searchKey, BigEndianByteArrayBuffer key,\n+                             BigEndianByteArrayBuffer value, int min, int max) throws IOException\n+  {\n+    int entrySize = key.size() + value.size();\n+    for (int mid; min <= max; )\n     {\n-        int entrySize = key.size() + value.size();\n-        for ( int mid; min <= max; )\n-        {\n-            mid = min + (max - min) / 2;\n-            readKeyValuePair( cursor, mid * entrySize, key, value );\n-            if ( min == max )\n-            {\n-                break; // break here instead of in the loop condition to ensure the right key is read\n-            }\n-            int cmp = compare( searchKey.buffer, key.buffer, 0 );\n-            if ( cmp > 0 ) // search key bigger than found key, continue after 'mid'\n-            {\n-                min = mid + 1;\n-            }\n-            else // search key smaller (or equal to) than found key, continue before 'mid'\n-            {\n-                max = mid; // don't add, greater than are to be included...\n-            }\n-        }\n-        return max;\n+      mid = min + (max - min) / 2;\n+      readKeyValuePair(cursor, mid * entrySize, key, value);\n+      if (min == max)\n+      {\n+        break; // break here instead of in the loop condition to ensure the right key is read\n+      }\n+      int cmp = compare(searchKey.buffer, key.buffer, 0);\n+      if (cmp > 0) // search key bigger than found key, continue after 'mid'\n+      {\n+        min = mid + 1;\n+      } else // search key smaller (or equal to) than found key, continue before 'mid'\n+      {\n+        max = mid; // don't add, greater than are to be included...\n+      }\n     }\n+    return max;\n+  }\n }\n",
            "diff_size": 379
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1872/KeyValueStoreFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1872/KeyValueStoreFile.java\nindex ef0ec7fb5e4..eaa77706493 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1872/KeyValueStoreFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1872/KeyValueStoreFile.java\n@@ -41,9 +41,11 @@ public class KeyValueStoreFile implements Closeable\n     private final int valueSize;\n     private final Headers headers;\n     private final int headerEntries;\n-    /** Includes header, data and trailer entries. */\n+\n+/** Includes header, data and trailer entries. */\n     private final int totalEntries;\n-    /**\n+\n+/**\n      * The page catalogue is used to find the appropriate (first) page without having to do I/O.\n      * <p>\n      * <b>Content:</b> {@code (minKey, maxKey)+}, one entry (at {@code 2 x} {@link #keySize}) for each page.\n@@ -80,7 +82,7 @@ public class KeyValueStoreFile implements Closeable\n         BigEndianByteArrayBuffer value = newBuffer( valueSize );\n         search.searchKey( searchKey );\n         int page = findPage( searchKey, pageCatalogue );\n-        if ( page < 0 || (page >= pageCatalogue.length / (keySize * 2)) )\n+        if ( page < 0 || ( page >= pageCatalogue.length / ( keySize * 2 )) )\n         {\n             return false;\n         }\n@@ -119,13 +121,15 @@ public class KeyValueStoreFile implements Closeable\n                 {\n                     return false;\n                 }\n-                readKeyValuePair( cursor, offset, key, value );\n+\n+readKeyValuePair( cursor, offset, key, value );\n                 if ( key.allZeroes() )\n                 {\n                     done = true;\n                     return false;\n                 }\n-                offset += key.size() + value.size();\n+\n+offset += key.size() + value.size();\n                 if ( offset >= file.pageSize() )\n                 {\n                     offset = 0;\n@@ -147,9 +151,7 @@ public class KeyValueStoreFile implements Closeable\n \n     public void scan( KeyValueVisitor visitor ) throws IOException\n     {\n-        scanAll( file, headerEntries * (keySize + valueSize), visitor,\n-                new BigEndianByteArrayBuffer( new byte[keySize] ),\n-                new BigEndianByteArrayBuffer( new byte[valueSize] ) );\n+        scanAll( file, headerEntries * (keySize + valueSize), visitor, new BigEndianByteArrayBuffer( new byte[keySize] ), new BigEndianByteArrayBuffer( new byte[valueSize] ) );\n     }\n \n     public int entryCount()\n@@ -169,26 +171,24 @@ public class KeyValueStoreFile implements Closeable\n         return getClass().getSimpleName() + \"[\" + file + \"]\";\n     }\n \n-    static <Buffer extends BigEndianByteArrayBuffer> void scanAll( PagedFile file, int startOffset,\n-            EntryVisitor<? super Buffer> visitor, Buffer key, Buffer value ) throws IOException\n-    {\n-        boolean visitHeaders = !(visitor instanceof KeyValueVisitor);\n+    static <Buffer extends BigEndianByteArrayBuffer> void scanAll( PagedFile file, int startOffset, EntryVisitor<? super Buffer> visitor, Buffer key, Buffer value ) throws IOException\n+{\n+        boolean visitHeaders = !( visitor instanceof KeyValueVisitor);\n         try ( PageCursor cursor = file.io( startOffset / file.pageSize(), PF_SHARED_READ_LOCK ) )\n         {\n             if ( !cursor.next() )\n             {\n                 return;\n             }\n-            readKeyValuePair( cursor, startOffset, key, value );\n+\n+readKeyValuePair( cursor, startOffset, key, value );\n             visitKeyValuePairs( file.pageSize(), cursor, startOffset, visitor, visitHeaders, key, value );\n         }\n     }\n \n     /** Expects the first key/value-pair to be read into the buffers already, reads subsequent pairs (if requested). */\n-    private static <Buffer extends BigEndianByteArrayBuffer> void visitKeyValuePairs( int pageSize, PageCursor cursor,\n-            int offset, EntryVisitor<? super Buffer> visitor, boolean visitHeaders, Buffer key, Buffer value )\n-            throws IOException\n-    {\n+    private static <Buffer extends BigEndianByteArrayBuffer> void visitKeyValuePairs( int pageSize, PageCursor cursor, int offset, EntryVisitor<? super Buffer> visitor, boolean visitHeaders, Buffer key, Buffer value ) throws IOException\n+{\n         while ( visitable( key, visitHeaders ) && visitor.visit( key, value ) )\n         {\n             offset += key.size() + value.size();\n@@ -210,9 +210,8 @@ public class KeyValueStoreFile implements Closeable\n         return acceptZeroKey || !key.allZeroes();\n     }\n \n-    private static void readKeyValuePair( PageCursor cursor, int offset, WritableBuffer key, WritableBuffer value )\n-            throws IOException\n-    {\n+    private static void readKeyValuePair( PageCursor cursor, int offset, WritableBuffer key, WritableBuffer value ) throws IOException\n+{\n         do\n         {\n             cursor.setOffset( offset );\n@@ -231,9 +230,7 @@ public class KeyValueStoreFile implements Closeable\n         long pageId = cursor.getCurrentPageId();\n         int pageSize = cursor.getCurrentPageSize();\n         String file = cursor.getCurrentFile().getAbsolutePath();\n-        throw new UnderlyingStorageException(\n-                \"Out of page bounds when reading key-value pair from offset \" + offset + \" into page \" +\n-                pageId + \" (with a size of \" + pageSize + \" bytes) of file \" + file );\n+        throw new UnderlyingStorageException( \"Out of page bounds when reading key-value pair from offset \" + offset + \" into page \" + pageId + \" (with a size of \" + pageSize + \" bytes) of file \" + file );\n     }\n \n     /**\n@@ -249,7 +246,7 @@ public class KeyValueStoreFile implements Closeable\n         int min = 0;\n         for ( int mid; min <= max; )\n         {\n-            mid = min + (max - min) / 2;\n+            mid = min + ( max - min) / 2;\n             // look at the low mark for the page\n             int cmp = compare( key.buffer, catalogue, mid * key.size() * 2 );\n             if ( cmp == 0 )\n@@ -258,7 +255,8 @@ public class KeyValueStoreFile implements Closeable\n                 // the previous page might also contain mid the key\n                 max = mid;\n             }\n-            if ( cmp > 0 )\n+\n+if ( cmp > 0 )\n             {\n                 // look at the high mark for the page\n                 cmp = compare( key.buffer, catalogue, mid * key.size() * 2 + key.size() );\n@@ -289,7 +287,7 @@ public class KeyValueStoreFile implements Closeable\n      */\n     private int findByteOffset( PageCursor cursor, BigEndianByteArrayBuffer searchKey, BigEndianByteArrayBuffer key,\n             BigEndianByteArrayBuffer value ) throws IOException\n-    {\n+{\n         int entrySize = searchKey.size() + value.size();\n         int last = maxPage( file.pageSize(), entrySize, totalEntries );\n         int firstEntry = (cursor.getCurrentPageId() == 0) ? headerEntries : 0; // skip header in first page\n@@ -305,8 +303,8 @@ public class KeyValueStoreFile implements Closeable\n \n     static int maxPage( int pageSize, int entrySize, int totalEntries )\n     {\n-        int maxPage = totalEntries / (pageSize / entrySize);\n-        return maxPage * (pageSize / entrySize) == totalEntries ? maxPage - 1 : maxPage;\n+        int maxPage = totalEntries / ( pageSize / entrySize);\n+        return maxPage * ( pageSize / entrySize) == totalEntries ? maxPage - 1 : maxPage;\n     }\n \n     /**\n@@ -321,11 +319,11 @@ public class KeyValueStoreFile implements Closeable\n      */\n     static int findEntryOffset( PageCursor cursor, BigEndianByteArrayBuffer searchKey, BigEndianByteArrayBuffer key,\n             BigEndianByteArrayBuffer value, int min, int max ) throws IOException\n-    {\n+{\n         int entrySize = key.size() + value.size();\n         for ( int mid; min <= max; )\n         {\n-            mid = min + (max - min) / 2;\n+            mid = min + ( max - min) / 2;\n             readKeyValuePair( cursor, mid * entrySize, key, value );\n             if ( min == max )\n             {\n@@ -343,4 +341,4 @@ public class KeyValueStoreFile implements Closeable\n         }\n         return max;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}