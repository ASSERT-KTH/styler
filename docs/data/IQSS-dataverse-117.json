{
    "project_name": "IQSS-dataverse",
    "error_id": "117",
    "information": {
        "errors": [
            {
                "line": "24",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n@Table(indexes = {@Index(columnList=\"token\")\n\t\t, @Index(columnList=\"builtinuser_id\")})\n@NamedQueries({\n    @NamedQuery(name=\"PasswordResetData.findAll\",\n            query=\"SELECT prd FROM PasswordResetData prd\"),",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/117/PasswordResetData.java\nindex a3150161c52..22b4f724db2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/117/PasswordResetData.java\n@@ -21,7 +21,7 @@ import javax.persistence.OneToOne;\n import javax.persistence.Table;\n \n @Table(indexes = {@Index(columnList=\"token\")\n-\t\t, @Index(columnList=\"builtinuser_id\")})\n+                      , @Index(columnList=\"builtinuser_id\")})\n @NamedQueries({\n     @NamedQuery(name=\"PasswordResetData.findAll\",\n             query=\"SELECT prd FROM PasswordResetData prd\"),\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/117/PasswordResetData.java\nindex a3150161c52..abc950cc696 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/117/PasswordResetData.java\n@@ -20,114 +20,115 @@ import javax.persistence.NamedQuery;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n \n-@Table(indexes = {@Index(columnList=\"token\")\n-\t\t, @Index(columnList=\"builtinuser_id\")})\n+@Table(indexes = {@Index(columnList = \"token\")\n+  , @Index(columnList = \"builtinuser_id\")})\n @NamedQueries({\n-    @NamedQuery(name=\"PasswordResetData.findAll\",\n-            query=\"SELECT prd FROM PasswordResetData prd\"),\n-    @NamedQuery(name=\"PasswordResetData.findByUser\",\n-            query=\"SELECT prd FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n-    @NamedQuery(name=\"PasswordResetData.findByToken\",\n-            query=\"SELECT prd FROM PasswordResetData prd WHERE prd.token = :token\"),\n-    @NamedQuery(name=\"PasswordResetData.deleteByUser\",\n-            query=\"DELETE FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n+  @NamedQuery(name = \"PasswordResetData.findAll\",\n+    query = \"SELECT prd FROM PasswordResetData prd\"),\n+  @NamedQuery(name = \"PasswordResetData.findByUser\",\n+    query = \"SELECT prd FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n+  @NamedQuery(name = \"PasswordResetData.findByToken\",\n+    query = \"SELECT prd FROM PasswordResetData prd WHERE prd.token = :token\"),\n+  @NamedQuery(name = \"PasswordResetData.deleteByUser\",\n+    query = \"DELETE FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n })\n @Entity\n public class PasswordResetData implements Serializable {\n-     \n-    public enum Reason {\n-        FORGOT_PASSWORD,\n-        NON_COMPLIANT_PASSWORD,\n-        UPGRADE_REQUIRED\n-    }\n-    \n-    // TODO cleaup: can remove the (unused) id field, and use the token field as an id instead.\n-    // This will prevent duplicate tokens (ok, not a likely poroblem) and would\n-    // make the token lookup much faster.\n-    \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long id;\n-\n-    @Column(nullable = true)\n-    private String token;\n-\n-    /**\n-     * @todo Is there an annotation to help enforce that a given DataverseUser\n-     * can only have one token at a time?\n-     */\n-    @OneToOne\n-    @JoinColumn(nullable = false)\n-    private BuiltinUser builtinUser;\n-\n-    @Column(nullable = false)\n-    private Timestamp created;\n-\n-    @Column(nullable = false)\n-    private Timestamp expires;\n-    \n-    @Enumerated(EnumType.STRING)\n-    private Reason reason;\n-\n-    /**\n-     * This is only here because it has to be: \"The class should have a no-arg,\n-     * public or protected constructor.\" Please use the constructor that takes\n-     * arguments.\n-     */\n-    @Deprecated\n-    public PasswordResetData() {\n-    }\n-\n-    public PasswordResetData(BuiltinUser aBuiltinUser) {\n-        builtinUser = aBuiltinUser;\n-        token = UUID.randomUUID().toString();\n-        long nowInMilliseconds = new Date().getTime();\n-        created = new Timestamp(nowInMilliseconds);\n-        long ONE_MINUTE_IN_MILLISECONDS = 60000;\n-        long futureInMilliseconds = nowInMilliseconds + (SystemConfig.getMinutesUntilPasswordResetTokenExpires() * ONE_MINUTE_IN_MILLISECONDS);\n-        expires = new Timestamp(new Date(futureInMilliseconds).getTime());\n-        reason = Reason.FORGOT_PASSWORD;\n-    }\n-\n-    public boolean isExpired() {\n-        if (this.expires == null) {\n-            return true;\n-        }\n-        long expiresInMilliseconds = this.expires.getTime();\n-        long nowInMilliseconds = new Date().getTime();\n-        return nowInMilliseconds > expiresInMilliseconds;\n-    }\n-\n-    public String getToken() {\n-        return token;\n-    }\n-\n-    public BuiltinUser getBuiltinUser() {\n-        return builtinUser;\n-    }\n-\n-    public Timestamp getCreated() {\n-        return created;\n-    }\n-\n-    public Timestamp getExpires() {\n-        return expires;\n-    }\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n-    public Reason getReason() {\n-        return reason;\n-    }\n \n-    public void setReason(Reason reason) {\n-        this.reason = reason;\n+  public enum Reason {\n+    FORGOT_PASSWORD,\n+    NON_COMPLIANT_PASSWORD,\n+    UPGRADE_REQUIRED\n+  }\n+\n+  // TODO cleaup: can remove the (unused) id field, and use the token field as an id instead.\n+  // This will prevent duplicate tokens (ok, not a likely poroblem) and would\n+  // make the token lookup much faster.\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long id;\n+\n+  @Column(nullable = true)\n+  private String token;\n+\n+  /**\n+   * @todo Is there an annotation to help enforce that a given DataverseUser\n+   * can only have one token at a time?\n+   */\n+  @OneToOne\n+  @JoinColumn(nullable = false)\n+  private BuiltinUser builtinUser;\n+\n+  @Column(nullable = false)\n+  private Timestamp created;\n+\n+  @Column(nullable = false)\n+  private Timestamp expires;\n+\n+  @Enumerated(EnumType.STRING)\n+  private Reason reason;\n+\n+  /**\n+   * This is only here because it has to be: \"The class should have a no-arg,\n+   * public or protected constructor.\" Please use the constructor that takes\n+   * arguments.\n+   */\n+  @Deprecated\n+  public PasswordResetData() {\n+  }\n+\n+  public PasswordResetData(BuiltinUser aBuiltinUser) {\n+    builtinUser = aBuiltinUser;\n+    token = UUID.randomUUID().toString();\n+    long nowInMilliseconds = new Date().getTime();\n+    created = new Timestamp(nowInMilliseconds);\n+    long ONE_MINUTE_IN_MILLISECONDS = 60000;\n+    long futureInMilliseconds =\n+      nowInMilliseconds + (SystemConfig.getMinutesUntilPasswordResetTokenExpires() * ONE_MINUTE_IN_MILLISECONDS);\n+    expires = new Timestamp(new Date(futureInMilliseconds).getTime());\n+    reason = Reason.FORGOT_PASSWORD;\n+  }\n+\n+  public boolean isExpired() {\n+    if (this.expires == null) {\n+      return true;\n     }\n+    long expiresInMilliseconds = this.expires.getTime();\n+    long nowInMilliseconds = new Date().getTime();\n+    return nowInMilliseconds > expiresInMilliseconds;\n+  }\n+\n+  public String getToken() {\n+    return token;\n+  }\n+\n+  public BuiltinUser getBuiltinUser() {\n+    return builtinUser;\n+  }\n+\n+  public Timestamp getCreated() {\n+    return created;\n+  }\n+\n+  public Timestamp getExpires() {\n+    return expires;\n+  }\n+\n+  public Long getId() {\n+    return id;\n+  }\n+\n+  public void setId(Long id) {\n+    this.id = id;\n+  }\n+\n+  public Reason getReason() {\n+    return reason;\n+  }\n+\n+  public void setReason(Reason reason) {\n+    this.reason = reason;\n+  }\n \n }\n",
            "diff_size": 195
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/117/PasswordResetData.java\nindex a3150161c52..8bff9783fa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/117/PasswordResetData.java\n@@ -20,31 +20,29 @@ import javax.persistence.NamedQuery;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n \n-@Table(indexes = {@Index(columnList=\"token\")\n-\t\t, @Index(columnList=\"builtinuser_id\")})\n+\n+@Table(indexes = {@Index(columnList = \"token\"), @Index(columnList = \"builtinuser_id\")})\n @NamedQueries({\n-    @NamedQuery(name=\"PasswordResetData.findAll\",\n-            query=\"SELECT prd FROM PasswordResetData prd\"),\n-    @NamedQuery(name=\"PasswordResetData.findByUser\",\n-            query=\"SELECT prd FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n-    @NamedQuery(name=\"PasswordResetData.findByToken\",\n-            query=\"SELECT prd FROM PasswordResetData prd WHERE prd.token = :token\"),\n-    @NamedQuery(name=\"PasswordResetData.deleteByUser\",\n-            query=\"DELETE FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n+    @NamedQuery(name = \"PasswordResetData.findAll\", query = \"SELECT prd FROM PasswordResetData prd\"),\n+    @NamedQuery(name = \"PasswordResetData.findByUser\",\n+        query = \"SELECT prd FROM PasswordResetData prd WHERE prd.builtinUser = :user\"),\n+    @NamedQuery(name = \"PasswordResetData.findByToken\",\n+        query = \"SELECT prd FROM PasswordResetData prd WHERE prd.token = :token\"),\n+    @NamedQuery(name = \"PasswordResetData.deleteByUser\",\n+        query = \"DELETE FROM PasswordResetData prd WHERE prd.builtinUser = :user\")\n+,\n })\n @Entity\n public class PasswordResetData implements Serializable {\n-     \n+\n     public enum Reason {\n-        FORGOT_PASSWORD,\n-        NON_COMPLIANT_PASSWORD,\n-        UPGRADE_REQUIRED\n+        FORGOT_PASSWORD, NON_COMPLIANT_PASSWORD, UPGRADE_REQUIRED\n     }\n     \n     // TODO cleaup: can remove the (unused) id field, and use the token field as an id instead.\n     // This will prevent duplicate tokens (ok, not a likely poroblem) and would\n     // make the token lookup much faster.\n-    \n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;\n@@ -56,6 +54,7 @@ public class PasswordResetData implements Serializable {\n      * @todo Is there an annotation to help enforce that a given DataverseUser\n      * can only have one token at a time?\n      */\n+\n     @OneToOne\n     @JoinColumn(nullable = false)\n     private BuiltinUser builtinUser;\n@@ -65,7 +64,7 @@ public class PasswordResetData implements Serializable {\n \n     @Column(nullable = false)\n     private Timestamp expires;\n-    \n+\n     @Enumerated(EnumType.STRING)\n     private Reason reason;\n \n@@ -74,9 +73,9 @@ public class PasswordResetData implements Serializable {\n      * public or protected constructor.\" Please use the constructor that takes\n      * arguments.\n      */\n+\n     @Deprecated\n-    public PasswordResetData() {\n-    }\n+    public PasswordResetData() {}\n \n     public PasswordResetData(BuiltinUser aBuiltinUser) {\n         builtinUser = aBuiltinUser;\n@@ -129,5 +128,4 @@ public class PasswordResetData implements Serializable {\n     public void setReason(Reason reason) {\n         this.reason = reason;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/117/PasswordResetData.java\nindex a3150161c52..22b4f724db2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/117/PasswordResetData.java\n@@ -21,7 +21,7 @@ import javax.persistence.OneToOne;\n import javax.persistence.Table;\n \n @Table(indexes = {@Index(columnList=\"token\")\n-\t\t, @Index(columnList=\"builtinuser_id\")})\n+                      , @Index(columnList=\"builtinuser_id\")})\n @NamedQueries({\n     @NamedQuery(name=\"PasswordResetData.findAll\",\n             query=\"SELECT prd FROM PasswordResetData prd\"),\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/117/PasswordResetData.java\nindex a3150161c52..1d9102a8727 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/117/PasswordResetData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/117/PasswordResetData.java\n@@ -21,7 +21,7 @@ import javax.persistence.OneToOne;\n import javax.persistence.Table;\n \n @Table(indexes = {@Index(columnList=\"token\")\n-\t\t, @Index(columnList=\"builtinuser_id\")})\n+        , @Index(columnList=\"builtinuser_id\")})\n @NamedQueries({\n     @NamedQuery(name=\"PasswordResetData.findAll\",\n             query=\"SELECT prd FROM PasswordResetData prd\"),\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}