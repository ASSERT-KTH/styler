{
    "project_name": "neo4j-neo4j",
    "error_id": "1721",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1721/QueryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1721/QueryCollector.java\nindex 60c568f9d68..f0ce8b0a157 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1721/QueryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1721/QueryCollector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.collector;\n \n import java.util.ArrayList;\n@@ -36,7 +37,7 @@ import org.neo4j.scheduler.JobScheduler;\n \n /**\n  * Thread-safe query collector.\n- *\n+ * <p>\n  * Delegates to {@link RecentQueryBuffer} to hard limit the number of collected queries at any point in time.\n  */\n class QueryCollector extends CollectorStateMachine<Iterator<TruncatedQuerySnapshot>> implements QueryExecutionMonitor\n@@ -47,12 +48,12 @@ class QueryCollector extends CollectorStateMachine<Iterator<TruncatedQuerySnapsh\n     private final JobScheduler jobScheduler;\n     private final int maxQueryTextSize;\n \n-    QueryCollector( NamedDatabaseId databaseId,\n-                    JobScheduler jobScheduler,\n-                    RecentQueryBuffer recentQueryBuffer,\n-                    int maxQueryTextSize )\n+    QueryCollector(NamedDatabaseId databaseId,\n+                   JobScheduler jobScheduler,\n+                   RecentQueryBuffer recentQueryBuffer,\n+                   int maxQueryTextSize)\n     {\n-        super( true );\n+        super(true);\n         this.databaseId = databaseId;\n         this.jobScheduler = jobScheduler;\n         this.maxQueryTextSize = maxQueryTextSize;\n@@ -66,83 +67,83 @@ class QueryCollector extends CollectorStateMachine<Iterator<TruncatedQuerySnapsh\n     }\n \n     @Override\n-    protected Result doCollect( Map<String,Object> config, long collectionId ) throws InvalidArgumentsException\n+    protected Result doCollect(Map<String, Object> config, long collectionId) throws InvalidArgumentsException\n     {\n-        int collectSeconds = QueryCollectorConfig.of( config ).collectSeconds;\n-        if ( collectSeconds > 0 )\n+        int collectSeconds = QueryCollectorConfig.of(config).collectSeconds;\n+        if (collectSeconds > 0)\n         {\n-            var monitoringParams = JobMonitoringParams.systemJob( databaseId.name(), \"Timeout of query collection\" );\n-            jobScheduler.schedule( Group.DATA_COLLECTOR, monitoringParams, () -> QueryCollector.this.stop( collectionId ), collectSeconds, TimeUnit.SECONDS );\n+            var monitoringParams = JobMonitoringParams.systemJob(databaseId.name(), \"Timeout of query collection\");\n+            jobScheduler.schedule(Group.DATA_COLLECTOR, monitoringParams, () -> QueryCollector.this.stop(collectionId), collectSeconds, TimeUnit.SECONDS);\n         }\n         isCollecting = true;\n-        return success( \"Collection started.\" );\n+        return success(\"Collection started.\");\n     }\n \n     @Override\n     protected Result doStop()\n     {\n         isCollecting = false;\n-        return success( \"Collection stopped.\" );\n+        return success(\"Collection stopped.\");\n     }\n \n     @Override\n     protected Result doClear()\n     {\n-        recentQueryBuffer.clear( databaseId );\n-        return success( \"Data cleared.\" );\n+        recentQueryBuffer.clear(databaseId);\n+        return success(\"Data cleared.\");\n     }\n \n     @Override\n     protected Iterator<TruncatedQuerySnapshot> doGetData()\n     {\n         List<TruncatedQuerySnapshot> querySnapshots = new ArrayList<>();\n-        recentQueryBuffer.foreach( databaseId, querySnapshots::add );\n+        recentQueryBuffer.foreach(databaseId, querySnapshots::add);\n         return querySnapshots.iterator();\n     }\n \n     // QueryExecutionMonitor\n \n     @Override\n-    public void startProcessing( ExecutingQuery query )\n+    public void startProcessing(ExecutingQuery query)\n     {\n     }\n \n     @Override\n-    public void startExecution( ExecutingQuery query )\n+    public void startExecution(ExecutingQuery query)\n     {\n     }\n \n     @Override\n-    public void endFailure( ExecutingQuery query, Throwable failure )\n+    public void endFailure(ExecutingQuery query, Throwable failure)\n     {\n     }\n \n     @Override\n-    public void endFailure( ExecutingQuery query, String reason )\n+    public void endFailure(ExecutingQuery query, String reason)\n     {\n     }\n \n     @Override\n-    public void endSuccess( ExecutingQuery query )\n+    public void endSuccess(ExecutingQuery query)\n     {\n-        if ( isCollecting )\n+        if (isCollecting)\n         {\n             QuerySnapshot snapshot = query.snapshot();\n-            var databaseId = query.databaseId().orElse( null );\n-            var queryText = snapshot.obfuscatedQueryText().orElse( null );\n-            var parameters = snapshot.obfuscatedQueryParameters().orElse( null );\n+            var databaseId = query.databaseId().orElse(null);\n+            var queryText = snapshot.obfuscatedQueryText().orElse(null);\n+            var parameters = snapshot.obfuscatedQueryParameters().orElse(null);\n \n-            if ( databaseId != null && queryText != null && parameters != null )\n+            if (databaseId != null && queryText != null && parameters != null)\n             {\n                 recentQueryBuffer.produce(\n-                    new TruncatedQuerySnapshot( databaseId,\n-                                                queryText,\n-                                                snapshot.queryPlanSupplier(),\n-                                                parameters,\n-                                                snapshot.elapsedTimeMicros(),\n-                                                snapshot.compilationTimeMicros(),\n-                                                snapshot.startTimestampMillis(),\n-                                                maxQueryTextSize ) );\n+                  new TruncatedQuerySnapshot(databaseId,\n+                    queryText,\n+                    snapshot.queryPlanSupplier(),\n+                    parameters,\n+                    snapshot.elapsedTimeMicros(),\n+                    snapshot.compilationTimeMicros(),\n+                    snapshot.startTimestampMillis(),\n+                    maxQueryTextSize));\n             }\n         }\n     }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}