{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4399",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4399/CheckPointScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4399/CheckPointScheduler.java\nindex 8cdb99949d5..4559f88aac2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4399/CheckPointScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4399/CheckPointScheduler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.util.Arrays;\n@@ -35,126 +36,123 @@ import static org.neo4j.scheduler.JobScheduler.Groups.checkPoint;\n \n public class CheckPointScheduler extends LifecycleAdapter\n {\n-    /**\n-     * The max number of consecutive check point failures that can be tolerated before treating\n-     * check point failures more seriously, with a panic.\n-     */\n-    static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE =\n-            FeatureToggles.getInteger( CheckPointScheduler.class, \"failure_tolerance\", 10 );\n+  /**\n+   * The max number of consecutive check point failures that can be tolerated before treating\n+   * check point failures more seriously, with a panic.\n+   */\n+  static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE =\n+      FeatureToggles.getInteger(CheckPointScheduler.class, \"failure_tolerance\", 10);\n \n-    private final CheckPointer checkPointer;\n-    private final IOLimiter ioLimiter;\n-    private final JobScheduler scheduler;\n-    private final long recurringPeriodMillis;\n-    private final DatabaseHealth health;\n-    private final Throwable[] failures = new Throwable[MAX_CONSECUTIVE_FAILURES_TOLERANCE];\n-    private volatile int consecutiveFailures;\n-    private final Runnable job = new Runnable()\n+  private final CheckPointer checkPointer;\n+  private final IOLimiter ioLimiter;\n+  private final JobScheduler scheduler;\n+  private final long recurringPeriodMillis;\n+  private final DatabaseHealth health;\n+  private final Throwable[] failures = new Throwable[MAX_CONSECUTIVE_FAILURES_TOLERANCE];\n+  private volatile int consecutiveFailures;\n+  private final Runnable job = new Runnable()\n+  {\n+    @Override\n+    public void run()\n     {\n-        @Override\n-        public void run()\n+      try\n+      {\n+        checkPointing = true;\n+        if (stopped)\n         {\n-            try\n-            {\n-                checkPointing = true;\n-                if ( stopped )\n-                {\n-                    return;\n-                }\n-                checkPointer.checkPointIfNeeded( new SimpleTriggerInfo( \"scheduler\" ) );\n-\n-                // There were previous unsuccessful attempts, but this attempt was a success\n-                // so let's clear those previous errors.\n-                if ( consecutiveFailures > 0 )\n-                {\n-                    Arrays.fill( failures, null );\n-                    consecutiveFailures = 0;\n-                }\n-            }\n-            catch ( Throwable t )\n-            {\n-                failures[consecutiveFailures++] = t;\n-\n-                // We're counting check pointer to log about the failure itself\n-                if ( consecutiveFailures >= MAX_CONSECUTIVE_FAILURES_TOLERANCE )\n-                {\n-                    UnderlyingStorageException combinedFailure = constructCombinedFailure();\n-                    health.panic( combinedFailure );\n-                    throw combinedFailure;\n-                }\n-            }\n-            finally\n-            {\n-                checkPointing = false;\n-            }\n-\n-            // reschedule only if it is not stopped\n-            if ( !stopped )\n-            {\n-                handle = scheduler.schedule( checkPoint, job, recurringPeriodMillis, MILLISECONDS );\n-            }\n+          return;\n         }\n+        checkPointer.checkPointIfNeeded(new SimpleTriggerInfo(\"scheduler\"));\n \n-        private UnderlyingStorageException constructCombinedFailure()\n+        // There were previous unsuccessful attempts, but this attempt was a success\n+        // so let's clear those previous errors.\n+        if (consecutiveFailures > 0)\n         {\n-            UnderlyingStorageException combined = new UnderlyingStorageException( \"Error performing check point\" );\n-            for ( int i = 0; i < consecutiveFailures; i++ )\n-            {\n-                combined.addSuppressed( failures[i] );\n-            }\n-            return combined;\n+          Arrays.fill(failures, null);\n+          consecutiveFailures = 0;\n         }\n-    };\n+      } catch (Throwable t)\n+      {\n+        failures[consecutiveFailures++] = t;\n \n-    private volatile JobScheduler.JobHandle handle;\n-    private volatile boolean stopped;\n-    private volatile boolean checkPointing;\n-    private final BooleanSupplier checkPointingCondition = new BooleanSupplier()\n-    {\n-        @Override\n-        public boolean getAsBoolean()\n+        // We're counting check pointer to log about the failure itself\n+        if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES_TOLERANCE)\n         {\n-            return !checkPointing;\n+          UnderlyingStorageException combinedFailure = constructCombinedFailure();\n+          health.panic(combinedFailure);\n+          throw combinedFailure;\n         }\n-    };\n+      } finally\n+      {\n+        checkPointing = false;\n+      }\n+\n+      // reschedule only if it is not stopped\n+      if (!stopped)\n+      {\n+        handle = scheduler.schedule(checkPoint, job, recurringPeriodMillis, MILLISECONDS);\n+      }\n+    }\n \n-    public CheckPointScheduler( CheckPointer checkPointer, IOLimiter ioLimiter, JobScheduler scheduler, long recurringPeriodMillis,\n-            DatabaseHealth health )\n+    private UnderlyingStorageException constructCombinedFailure()\n     {\n-        this.checkPointer = checkPointer;\n-        this.ioLimiter = ioLimiter;\n-        this.scheduler = scheduler;\n-        this.recurringPeriodMillis = recurringPeriodMillis;\n-        this.health = health;\n+      UnderlyingStorageException combined = new UnderlyingStorageException(\"Error performing check point\");\n+      for (int i = 0; i < consecutiveFailures; i++)\n+      {\n+        combined.addSuppressed(failures[i]);\n+      }\n+      return combined;\n     }\n+  };\n \n+  private volatile JobScheduler.JobHandle handle;\n+  private volatile boolean stopped;\n+  private volatile boolean checkPointing;\n+  private final BooleanSupplier checkPointingCondition = new BooleanSupplier()\n+  {\n     @Override\n-    public void start()\n+    public boolean getAsBoolean()\n     {\n-        handle = scheduler.schedule( checkPoint, job, recurringPeriodMillis, MILLISECONDS );\n+      return !checkPointing;\n     }\n+  };\n \n-    @Override\n-    public void stop()\n+  public CheckPointScheduler(CheckPointer checkPointer, IOLimiter ioLimiter, JobScheduler scheduler, long recurringPeriodMillis,\n+                             DatabaseHealth health)\n+  {\n+    this.checkPointer = checkPointer;\n+    this.ioLimiter = ioLimiter;\n+    this.scheduler = scheduler;\n+    this.recurringPeriodMillis = recurringPeriodMillis;\n+    this.health = health;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    handle = scheduler.schedule(checkPoint, job, recurringPeriodMillis, MILLISECONDS);\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    stopped = true;\n+    if (handle != null)\n     {\n-        stopped = true;\n-        if ( handle != null )\n-        {\n-            handle.cancel( false );\n-        }\n-        waitOngoingCheckpointCompletion();\n+      handle.cancel(false);\n     }\n+    waitOngoingCheckpointCompletion();\n+  }\n \n-    private void waitOngoingCheckpointCompletion()\n+  private void waitOngoingCheckpointCompletion()\n+  {\n+    ioLimiter.disableLimit();\n+    try\n     {\n-        ioLimiter.disableLimit();\n-        try\n-        {\n-            Predicates.awaitForever( checkPointingCondition, 100, MILLISECONDS );\n-        }\n-        finally\n-        {\n-            ioLimiter.enableLimit();\n-        }\n+      Predicates.awaitForever(checkPointingCondition, 100, MILLISECONDS);\n+    } finally\n+    {\n+      ioLimiter.enableLimit();\n     }\n+  }\n }\n",
            "diff_size": 155
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4399/CheckPointScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4399/CheckPointScheduler.java\nindex 8cdb99949d5..e9101c63ed8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4399/CheckPointScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4399/CheckPointScheduler.java\n@@ -39,10 +39,8 @@ public class CheckPointScheduler extends LifecycleAdapter\n      * The max number of consecutive check point failures that can be tolerated before treating\n      * check point failures more seriously, with a panic.\n      */\n-    static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE =\n-            FeatureToggles.getInteger( CheckPointScheduler.class, \"failure_tolerance\", 10 );\n-\n-    private final CheckPointer checkPointer;\n+    static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE = FeatureToggles.getInteger( CheckPointScheduler.class, \"failure_tolerance\", 10 );\n+private final CheckPointer checkPointer;\n     private final IOLimiter ioLimiter;\n     private final JobScheduler scheduler;\n     private final long recurringPeriodMillis;\n@@ -102,7 +100,8 @@ public class CheckPointScheduler extends LifecycleAdapter\n             {\n                 combined.addSuppressed( failures[i] );\n             }\n-            return combined;\n+\n+return combined;\n         }\n     };\n \n@@ -142,7 +141,8 @@ public class CheckPointScheduler extends LifecycleAdapter\n         {\n             handle.cancel( false );\n         }\n-        waitOngoingCheckpointCompletion();\n+\n+waitOngoingCheckpointCompletion();\n     }\n \n     private void waitOngoingCheckpointCompletion()\n@@ -157,4 +157,4 @@ public class CheckPointScheduler extends LifecycleAdapter\n             ioLimiter.enableLimit();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4399/CheckPointScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4399/CheckPointScheduler.java\nindex 8cdb99949d5..3ab07d162c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4399/CheckPointScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4399/CheckPointScheduler.java\n@@ -21,7 +21,6 @@ package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.util.Arrays;\n import java.util.function.BooleanSupplier;\n-\n import org.neo4j.function.Predicates;\n import org.neo4j.io.pagecache.IOLimiter;\n import org.neo4j.kernel.impl.store.UnderlyingStorageException;\n@@ -29,8 +28,8 @@ import org.neo4j.kernel.internal.DatabaseHealth;\n import org.neo4j.kernel.lifecycle.LifecycleAdapter;\n import org.neo4j.scheduler.JobScheduler;\n import org.neo4j.util.FeatureToggles;\n-\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n import static org.neo4j.scheduler.JobScheduler.Groups.checkPoint;\n \n public class CheckPointScheduler extends LifecycleAdapter\n@@ -39,9 +38,7 @@ public class CheckPointScheduler extends LifecycleAdapter\n      * The max number of consecutive check point failures that can be tolerated before treating\n      * check point failures more seriously, with a panic.\n      */\n-    static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE =\n-            FeatureToggles.getInteger( CheckPointScheduler.class, \"failure_tolerance\", 10 );\n-\n+    static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE = FeatureToggles.getInteger( CheckPointScheduler.class, \"failure_tolerance\", 10 );\n     private final CheckPointer checkPointer;\n     private final IOLimiter ioLimiter;\n     private final JobScheduler scheduler;\n@@ -50,76 +47,77 @@ public class CheckPointScheduler extends LifecycleAdapter\n     private final Throwable[] failures = new Throwable[MAX_CONSECUTIVE_FAILURES_TOLERANCE];\n     private volatile int consecutiveFailures;\n     private final Runnable job = new Runnable()\n+{\n+    @Override\n+    public void run()\n     {\n-        @Override\n-        public void run()\n+        try\n         {\n-            try\n+            checkPointing = true;\n+            if ( stopped )\n             {\n-                checkPointing = true;\n-                if ( stopped )\n-                {\n-                    return;\n-                }\n-                checkPointer.checkPointIfNeeded( new SimpleTriggerInfo( \"scheduler\" ) );\n+                return;\n+            }\n+\n+            checkPointer.checkPointIfNeeded( new SimpleTriggerInfo( \"scheduler\" ) );\n \n                 // There were previous unsuccessful attempts, but this attempt was a success\n                 // so let's clear those previous errors.\n-                if ( consecutiveFailures > 0 )\n-                {\n-                    Arrays.fill( failures, null );\n-                    consecutiveFailures = 0;\n-                }\n-            }\n-            catch ( Throwable t )\n+            if ( consecutiveFailures > 0 )\n             {\n-                failures[consecutiveFailures++] = t;\n+                Arrays.fill( failures, null );\n+                consecutiveFailures = 0;\n+            }\n+        }\n+        catch ( Throwable t )\n+        {\n+            failures[consecutiveFailures ++] = t;\n \n                 // We're counting check pointer to log about the failure itself\n-                if ( consecutiveFailures >= MAX_CONSECUTIVE_FAILURES_TOLERANCE )\n-                {\n-                    UnderlyingStorageException combinedFailure = constructCombinedFailure();\n-                    health.panic( combinedFailure );\n-                    throw combinedFailure;\n-                }\n-            }\n-            finally\n+            if ( consecutiveFailures >= MAX_CONSECUTIVE_FAILURES_TOLERANCE )\n             {\n-                checkPointing = false;\n+                UnderlyingStorageException combinedFailure = constructCombinedFailure();\n+                health.panic( combinedFailure );\n+                throw combinedFailure;\n             }\n+        }\n+        finally\n+        {\n+            checkPointing = false;\n+        }\n \n             // reschedule only if it is not stopped\n-            if ( !stopped )\n-            {\n-                handle = scheduler.schedule( checkPoint, job, recurringPeriodMillis, MILLISECONDS );\n-            }\n+\n+        if ( ! stopped )\n+        {\n+            handle = scheduler.schedule( checkPoint, job, recurringPeriodMillis, MILLISECONDS );\n         }\n+    }\n \n-        private UnderlyingStorageException constructCombinedFailure()\n+    private UnderlyingStorageException constructCombinedFailure()\n+    {\n+        UnderlyingStorageException combined = new UnderlyingStorageException( \"Error performing check point\" );\n+        for ( int i = 0; i < consecutiveFailures; i++ )\n         {\n-            UnderlyingStorageException combined = new UnderlyingStorageException( \"Error performing check point\" );\n-            for ( int i = 0; i < consecutiveFailures; i++ )\n-            {\n-                combined.addSuppressed( failures[i] );\n-            }\n-            return combined;\n+            combined.addSuppressed( failures[ i] );\n         }\n-    };\n \n+        return combined;\n+    }\n+};\n     private volatile JobScheduler.JobHandle handle;\n     private volatile boolean stopped;\n     private volatile boolean checkPointing;\n     private final BooleanSupplier checkPointingCondition = new BooleanSupplier()\n+{\n+    @Override\n+    public boolean getAsBoolean()\n     {\n-        @Override\n-        public boolean getAsBoolean()\n-        {\n-            return !checkPointing;\n-        }\n-    };\n+        return ! checkPointing;\n+    }\n+};\n \n-    public CheckPointScheduler( CheckPointer checkPointer, IOLimiter ioLimiter, JobScheduler scheduler, long recurringPeriodMillis,\n-            DatabaseHealth health )\n+    public CheckPointScheduler( CheckPointer checkPointer, IOLimiter ioLimiter, JobScheduler scheduler, long recurringPeriodMillis, DatabaseHealth health )\n     {\n         this.checkPointer = checkPointer;\n         this.ioLimiter = ioLimiter;\n@@ -142,6 +140,7 @@ public class CheckPointScheduler extends LifecycleAdapter\n         {\n             handle.cancel( false );\n         }\n+\n         waitOngoingCheckpointCompletion();\n     }\n \n@@ -157,4 +156,4 @@ public class CheckPointScheduler extends LifecycleAdapter\n             ioLimiter.enableLimit();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 81
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}