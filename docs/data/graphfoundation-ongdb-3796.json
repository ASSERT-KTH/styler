{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3796",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "186",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3796/PartitionedUniquenessVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3796/PartitionedUniquenessVerifier.java\nindex 468add9cb43..5ba5b8fc219 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3796/PartitionedUniquenessVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3796/PartitionedUniquenessVerifier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.verification;\n \n import org.apache.lucene.index.Fields;\n@@ -61,156 +62,155 @@ import static java.util.stream.Collectors.toList;\n  */\n public class PartitionedUniquenessVerifier implements UniquenessVerifier\n {\n-    private final List<PartitionSearcher> searchers;\n-\n-    public PartitionedUniquenessVerifier( List<PartitionSearcher> searchers )\n-    {\n-        this.searchers = searchers;\n-    }\n+  private final List<PartitionSearcher> searchers;\n \n-    @Override\n-    public void verify( PropertyAccessor accessor, int[] propKeyIds ) throws IndexEntryConflictException, IOException\n-    {\n-        for ( String field : allFields() )\n-        {\n-            if ( LuceneDocumentStructure.useFieldForUniquenessVerification( field ) )\n-            {\n-                TermsEnum terms = LuceneDocumentStructure.originalTerms( termsForField( field ), field );\n-                BytesRef termsRef;\n-                while ( (termsRef = terms.next()) != null )\n-                {\n-                    if ( terms.docFreq() > 1 )\n-                    {\n-                        TermQuery query = new TermQuery( new Term( field, termsRef ) );\n-                        searchForDuplicates( query, accessor, propKeyIds, terms.docFreq() );\n-                    }\n-                }\n-            }\n-        }\n-    }\n+  public PartitionedUniquenessVerifier(List<PartitionSearcher> searchers)\n+  {\n+    this.searchers = searchers;\n+  }\n \n-    @Override\n-    public void verify( PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples )\n-            throws IndexEntryConflictException, IOException\n+  @Override\n+  public void verify(PropertyAccessor accessor, int[] propKeyIds) throws IndexEntryConflictException, IOException\n+  {\n+    for (String field : allFields())\n     {\n-        for ( Value[] valueTuple : updatedValueTuples )\n+      if (LuceneDocumentStructure.useFieldForUniquenessVerification(field))\n+      {\n+        TermsEnum terms = LuceneDocumentStructure.originalTerms(termsForField(field), field);\n+        BytesRef termsRef;\n+        while ((termsRef = terms.next()) != null)\n         {\n-            Query query = LuceneDocumentStructure.newSeekQuery( valueTuple );\n-            searchForDuplicates( query, accessor, propKeyIds );\n+          if (terms.docFreq() > 1)\n+          {\n+            TermQuery query = new TermQuery(new Term(field, termsRef));\n+            searchForDuplicates(query, accessor, propKeyIds, terms.docFreq());\n+          }\n         }\n+      }\n     }\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        IOUtils.closeAll( searchers );\n-    }\n-\n-    private Terms termsForField( String fieldName ) throws IOException\n+  @Override\n+  public void verify(PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples)\n+      throws IndexEntryConflictException, IOException\n+  {\n+    for (Value[] valueTuple : updatedValueTuples)\n     {\n-        List<Terms> terms = new ArrayList<>();\n-        List<ReaderSlice> readerSlices = new ArrayList<>();\n-\n-        for ( LeafReader leafReader : allLeafReaders() )\n-        {\n-            Fields fields = leafReader.fields();\n-\n-            Terms leafTerms = fields.terms( fieldName );\n-            if ( leafTerms != null )\n-            {\n-                ReaderSlice readerSlice = new ReaderSlice( 0, Math.toIntExact( leafTerms.size() ), 0 );\n-                terms.add( leafTerms );\n-                readerSlices.add( readerSlice );\n-            }\n-        }\n-\n-        Terms[] termsArray = terms.toArray( new Terms[terms.size()] );\n-        ReaderSlice[] readerSlicesArray = readerSlices.toArray( new ReaderSlice[readerSlices.size()] );\n-\n-        return new MultiTerms( termsArray, readerSlicesArray );\n+      Query query = LuceneDocumentStructure.newSeekQuery(valueTuple);\n+      searchForDuplicates(query, accessor, propKeyIds);\n     }\n+  }\n \n-    /**\n-     * Search for unknown number of duplicates duplicates\n-     *\n-     * @param query query to find duplicates in\n-     * @param accessor accessor to load actual property value from store\n-     * @param propertyKeyIds property key ids\n-     * @throws IOException\n-     * @throws IndexEntryConflictException\n-     */\n-    private void searchForDuplicates( Query query, PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        DuplicateCheckingCollector collector = getDuplicateCollector( accessor, propertyKeyIds );\n-        collector.init();\n-        searchForDuplicates( query, collector );\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    IOUtils.closeAll(searchers);\n+  }\n \n-    /**\n-     * Search for known number of duplicates duplicates\n-     *\n-     * @param query query to find duplicates in\n-     * @param accessor accessor to load actual property value from store\n-     * @param propertyKeyIds property key ids\n-     * @param expectedNumberOfEntries expected number of duplicates in query\n-     * @throws IOException\n-     * @throws IndexEntryConflictException\n-     */\n-    private void searchForDuplicates( Query query, PropertyAccessor accessor, int[] propertyKeyIds,\n-            int expectedNumberOfEntries ) throws IOException, IndexEntryConflictException\n-    {\n-        DuplicateCheckingCollector collector = getDuplicateCollector( accessor, propertyKeyIds );\n-        collector.init( expectedNumberOfEntries );\n-        searchForDuplicates( query, collector );\n-    }\n+  private Terms termsForField(String fieldName) throws IOException\n+  {\n+    List<Terms> terms = new ArrayList<>();\n+    List<ReaderSlice> readerSlices = new ArrayList<>();\n \n-    private DuplicateCheckingCollector getDuplicateCollector( PropertyAccessor accessor, int[] propertyKeyIds )\n+    for (LeafReader leafReader : allLeafReaders())\n     {\n-        return DuplicateCheckingCollector.forProperties( accessor, propertyKeyIds );\n+      Fields fields = leafReader.fields();\n+\n+      Terms leafTerms = fields.terms(fieldName);\n+      if (leafTerms != null)\n+      {\n+        ReaderSlice readerSlice = new ReaderSlice(0, Math.toIntExact(leafTerms.size()), 0);\n+        terms.add(leafTerms);\n+        readerSlices.add(readerSlice);\n+      }\n     }\n \n-    private void searchForDuplicates( Query query, DuplicateCheckingCollector collector ) throws IndexEntryConflictException, IOException\n+    Terms[] termsArray = terms.toArray(new Terms[terms.size()]);\n+    ReaderSlice[] readerSlicesArray = readerSlices.toArray(new ReaderSlice[readerSlices.size()]);\n+\n+    return new MultiTerms(termsArray, readerSlicesArray);\n+  }\n+\n+  /**\n+   * Search for unknown number of duplicates duplicates\n+   *\n+   * @param query          query to find duplicates in\n+   * @param accessor       accessor to load actual property value from store\n+   * @param propertyKeyIds property key ids\n+   * @throws IOException\n+   * @throws IndexEntryConflictException\n+   */\n+  private void searchForDuplicates(Query query, PropertyAccessor accessor, int[] propertyKeyIds)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    DuplicateCheckingCollector collector = getDuplicateCollector(accessor, propertyKeyIds);\n+    collector.init();\n+    searchForDuplicates(query, collector);\n+  }\n+\n+  /**\n+   * Search for known number of duplicates duplicates\n+   *\n+   * @param query                   query to find duplicates in\n+   * @param accessor                accessor to load actual property value from store\n+   * @param propertyKeyIds          property key ids\n+   * @param expectedNumberOfEntries expected number of duplicates in query\n+   * @throws IOException\n+   * @throws IndexEntryConflictException\n+   */\n+  private void searchForDuplicates(Query query, PropertyAccessor accessor, int[] propertyKeyIds,\n+                                   int expectedNumberOfEntries) throws IOException, IndexEntryConflictException\n+  {\n+    DuplicateCheckingCollector collector = getDuplicateCollector(accessor, propertyKeyIds);\n+    collector.init(expectedNumberOfEntries);\n+    searchForDuplicates(query, collector);\n+  }\n+\n+  private DuplicateCheckingCollector getDuplicateCollector(PropertyAccessor accessor, int[] propertyKeyIds)\n+  {\n+    return DuplicateCheckingCollector.forProperties(accessor, propertyKeyIds);\n+  }\n+\n+  private void searchForDuplicates(Query query, DuplicateCheckingCollector collector) throws IndexEntryConflictException, IOException\n+  {\n+    try\n     {\n-        try\n-        {\n-            for ( PartitionSearcher searcher : searchers )\n-            {\n-                    /*\n-                     * Here {@link DuplicateCheckingCollector#init()} is deliberately not called to preserve accumulated\n-                     * state (knowledge about duplicates) across all {@link IndexSearcher#search(Query, Collector)} calls.\n-                     */\n-                searcher.getIndexSearcher().search( query, collector );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            Throwable cause = e.getCause();\n-            if ( cause instanceof IndexEntryConflictException )\n-            {\n-                throw (IndexEntryConflictException) cause;\n-            }\n-            throw e;\n-        }\n-    }\n-\n-    private Set<String> allFields() throws IOException\n+      for (PartitionSearcher searcher : searchers)\n+      {\n+        /*\n+         * Here {@link DuplicateCheckingCollector#init()} is deliberately not called to preserve accumulated\n+         * state (knowledge about duplicates) across all {@link IndexSearcher#search(Query, Collector)} calls.\n+         */\n+        searcher.getIndexSearcher().search(query, collector);\n+      }\n+    } catch (IOException e)\n     {\n-        Set<String> allFields = new HashSet<>();\n-        for ( LeafReader leafReader : allLeafReaders() )\n-        {\n-            Iterables.addAll( allFields, leafReader.fields() );\n-        }\n-        return allFields;\n+      Throwable cause = e.getCause();\n+      if (cause instanceof IndexEntryConflictException)\n+      {\n+        throw (IndexEntryConflictException) cause;\n+      }\n+      throw e;\n     }\n+  }\n \n-    private List<LeafReader> allLeafReaders()\n+  private Set<String> allFields() throws IOException\n+  {\n+    Set<String> allFields = new HashSet<>();\n+    for (LeafReader leafReader : allLeafReaders())\n     {\n-        return searchers.stream()\n-                .map( PartitionSearcher::getIndexSearcher )\n-                .map( IndexSearcher::getIndexReader )\n-                .flatMap( indexReader -> indexReader.leaves().stream() )\n-                .map( LeafReaderContext::reader )\n-                .collect( toList() );\n+      Iterables.addAll(allFields, leafReader.fields());\n     }\n+    return allFields;\n+  }\n+\n+  private List<LeafReader> allLeafReaders()\n+  {\n+    return searchers.stream()\n+        .map(PartitionSearcher::getIndexSearcher)\n+        .map(IndexSearcher::getIndexReader)\n+        .flatMap(indexReader -> indexReader.leaves().stream())\n+        .map(LeafReaderContext::reader)\n+        .collect(toList());\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3796/PartitionedUniquenessVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3796/PartitionedUniquenessVerifier.java\nindex 468add9cb43..0d825c9b2cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3796/PartitionedUniquenessVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3796/PartitionedUniquenessVerifier.java\n@@ -90,9 +90,8 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n     }\n \n     @Override\n-    public void verify( PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples )\n-            throws IndexEntryConflictException, IOException\n-    {\n+    public void verify( PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples ) throws IndexEntryConflictException, IOException\n+{\n         for ( Value[] valueTuple : updatedValueTuples )\n         {\n             Query query = LuceneDocumentStructure.newSeekQuery( valueTuple );\n@@ -110,12 +109,10 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n     {\n         List<Terms> terms = new ArrayList<>();\n         List<ReaderSlice> readerSlices = new ArrayList<>();\n-\n-        for ( LeafReader leafReader : allLeafReaders() )\n+for ( LeafReader leafReader : allLeafReaders() )\n         {\n             Fields fields = leafReader.fields();\n-\n-            Terms leafTerms = fields.terms( fieldName );\n+Terms leafTerms = fields.terms( fieldName );\n             if ( leafTerms != null )\n             {\n                 ReaderSlice readerSlice = new ReaderSlice( 0, Math.toIntExact( leafTerms.size() ), 0 );\n@@ -126,8 +123,7 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n \n         Terms[] termsArray = terms.toArray( new Terms[terms.size()] );\n         ReaderSlice[] readerSlicesArray = readerSlices.toArray( new ReaderSlice[readerSlices.size()] );\n-\n-        return new MultiTerms( termsArray, readerSlicesArray );\n+return new MultiTerms( termsArray, readerSlicesArray );\n     }\n \n     /**\n@@ -139,9 +135,8 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n      * @throws IOException\n      * @throws IndexEntryConflictException\n      */\n-    private void searchForDuplicates( Query query, PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    private void searchForDuplicates( Query query, PropertyAccessor accessor, int[] propertyKeyIds ) throws IOException, IndexEntryConflictException\n+{\n         DuplicateCheckingCollector collector = getDuplicateCollector( accessor, propertyKeyIds );\n         collector.init();\n         searchForDuplicates( query, collector );\n@@ -157,9 +152,8 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n      * @throws IOException\n      * @throws IndexEntryConflictException\n      */\n-    private void searchForDuplicates( Query query, PropertyAccessor accessor, int[] propertyKeyIds,\n-            int expectedNumberOfEntries ) throws IOException, IndexEntryConflictException\n-    {\n+    private void searchForDuplicates( Query query, PropertyAccessor accessor, int[] propertyKeyIds, int expectedNumberOfEntries ) throws IOException, IndexEntryConflictException\n+{\n         DuplicateCheckingCollector collector = getDuplicateCollector( accessor, propertyKeyIds );\n         collector.init( expectedNumberOfEntries );\n         searchForDuplicates( query, collector );\n@@ -176,11 +170,11 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n         {\n             for ( PartitionSearcher searcher : searchers )\n             {\n-                    /*\n+    /*\n                      * Here {@link DuplicateCheckingCollector#init()} is deliberately not called to preserve accumulated\n                      * state (knowledge about duplicates) across all {@link IndexSearcher#search(Query, Collector)} calls.\n                      */\n-                searcher.getIndexSearcher().search( query, collector );\n+searcher.getIndexSearcher().search( query, collector );\n             }\n         }\n         catch ( IOException e )\n@@ -201,16 +195,12 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n         {\n             Iterables.addAll( allFields, leafReader.fields() );\n         }\n-        return allFields;\n+\n+return allFields;\n     }\n \n     private List<LeafReader> allLeafReaders()\n     {\n-        return searchers.stream()\n-                .map( PartitionSearcher::getIndexSearcher )\n-                .map( IndexSearcher::getIndexReader )\n-                .flatMap( indexReader -> indexReader.leaves().stream() )\n-                .map( LeafReaderContext::reader )\n-                .collect( toList() );\n+        return searchers.stream().map( PartitionSearcher::getIndexSearcher ).map( IndexSearcher::getIndexReader ).flatMap( indexReader -> indexReader.leaves().stream() ).map( LeafReaderContext::reader ).collect( toList() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}