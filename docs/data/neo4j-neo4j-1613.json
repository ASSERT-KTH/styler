{
    "project_name": "neo4j-neo4j",
    "error_id": "1613",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "83",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1613/FusionIndexUpdater.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1613/FusionIndexUpdater.java\nindex 174915a236c..7314e096e82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1613/FusionIndexUpdater.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1613/FusionIndexUpdater.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.concurrent.atomic.AtomicReference;\n@@ -28,44 +29,44 @@ import org.neo4j.storageengine.api.ValueIndexEntryUpdate;\n \n class FusionIndexUpdater extends FusionIndexBase<IndexUpdater> implements IndexUpdater\n {\n-    FusionIndexUpdater( SlotSelector slotSelector, LazyInstanceSelector<IndexUpdater> instanceSelector )\n+    FusionIndexUpdater(SlotSelector slotSelector, LazyInstanceSelector<IndexUpdater> instanceSelector)\n     {\n-        super( slotSelector, instanceSelector );\n+        super(slotSelector, instanceSelector);\n     }\n \n     @Override\n-    public void process( IndexEntryUpdate<?> update ) throws IndexEntryConflictException\n+    public void process(IndexEntryUpdate<?> update) throws IndexEntryConflictException\n     {\n-        ValueIndexEntryUpdate<?> valueUpdate = asValueUpdate( update );\n-        switch ( valueUpdate.updateMode() )\n+        ValueIndexEntryUpdate<?> valueUpdate = asValueUpdate(update);\n+        switch (valueUpdate.updateMode())\n         {\n-        case ADDED:\n-            instanceSelector.select( slotSelector.selectSlot( valueUpdate.values(), CATEGORY_OF ) ).process( valueUpdate );\n-            break;\n-        case CHANGED:\n-            // Hmm, here's a little conundrum. What if we change from a value that goes into native\n-            // to a value that goes into fallback, or vice versa? We also don't want to blindly pass\n-            // all CHANGED updates to both updaters since not all values will work in them.\n-            IndexUpdater from = instanceSelector.select( slotSelector.selectSlot( valueUpdate.beforeValues(), CATEGORY_OF ) );\n-            IndexUpdater to = instanceSelector.select( slotSelector.selectSlot( valueUpdate.values(), CATEGORY_OF ) );\n-            // There are two cases:\n-            // - both before/after go into the same updater --> pass update into that updater\n-            if ( from == to )\n-            {\n-                from.process( valueUpdate );\n-            }\n-            // - before go into one and after into the other --> REMOVED from one and ADDED into the other\n-            else\n-            {\n-                from.process( IndexEntryUpdate.remove( valueUpdate.getEntityId(), valueUpdate.indexKey(), valueUpdate.beforeValues() ) );\n-                to.process( IndexEntryUpdate.add( valueUpdate.getEntityId(), valueUpdate.indexKey(), valueUpdate.values() ) );\n-            }\n-            break;\n-        case REMOVED:\n-            instanceSelector.select( slotSelector.selectSlot( valueUpdate.values(), CATEGORY_OF ) ).process( valueUpdate );\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Unknown update mode\" );\n+            case ADDED:\n+                instanceSelector.select(slotSelector.selectSlot(valueUpdate.values(), CATEGORY_OF)).process(valueUpdate);\n+                break;\n+            case CHANGED:\n+                // Hmm, here's a little conundrum. What if we change from a value that goes into native\n+                // to a value that goes into fallback, or vice versa? We also don't want to blindly pass\n+                // all CHANGED updates to both updaters since not all values will work in them.\n+                IndexUpdater from = instanceSelector.select(slotSelector.selectSlot(valueUpdate.beforeValues(), CATEGORY_OF));\n+                IndexUpdater to = instanceSelector.select(slotSelector.selectSlot(valueUpdate.values(), CATEGORY_OF));\n+                // There are two cases:\n+                // - both before/after go into the same updater --> pass update into that updater\n+                if (from == to)\n+                {\n+                    from.process(valueUpdate);\n+                }\n+                // - before go into one and after into the other --> REMOVED from one and ADDED into the other\n+                else\n+                {\n+                    from.process(IndexEntryUpdate.remove(valueUpdate.getEntityId(), valueUpdate.indexKey(), valueUpdate.beforeValues()));\n+                    to.process(IndexEntryUpdate.add(valueUpdate.getEntityId(), valueUpdate.indexKey(), valueUpdate.values()));\n+                }\n+                break;\n+            case REMOVED:\n+                instanceSelector.select(slotSelector.selectSlot(valueUpdate.values(), CATEGORY_OF)).process(valueUpdate);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown update mode\");\n         }\n     }\n \n@@ -74,22 +75,21 @@ class FusionIndexUpdater extends FusionIndexBase<IndexUpdater> implements IndexU\n     {\n         AtomicReference<IndexEntryConflictException> chainedExceptions = new AtomicReference<>();\n \n-        instanceSelector.close( indexUpdater ->\n+        instanceSelector.close(indexUpdater ->\n         {\n             try\n             {\n                 indexUpdater.close();\n-            }\n-            catch ( IndexEntryConflictException e )\n+            } catch (IndexEntryConflictException e)\n             {\n-                if ( !chainedExceptions.compareAndSet( null, e ) )\n+                if (!chainedExceptions.compareAndSet(null, e))\n                 {\n-                    chainedExceptions.get().addSuppressed( e );\n+                    chainedExceptions.get().addSuppressed(e);\n                 }\n             }\n-        } );\n+        });\n \n-        if ( chainedExceptions.get() != null )\n+        if (chainedExceptions.get() != null)\n         {\n             throw chainedExceptions.get();\n         }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}