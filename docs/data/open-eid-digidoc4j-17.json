{
    "project_name": "open-eid-digidoc4j",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "158",
                "column": "15",
                "severity": "error",
                "message": "'(' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "    if (in == null) {\n      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n              (\"Keystore not found by location <%s>\", keystoreLocation)));\n    }\n    return in;\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler/17/TslLoader.java\nindex d22e837e4e4..fe0ad4b51b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler/17/TslLoader.java\n@@ -154,8 +154,8 @@ public class TslLoader implements Serializable {\n     }\n     InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n     if (in == null) {\n-      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-              (\"Keystore not found by location <%s>\", keystoreLocation)));\n+      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format(\n+      \"Keystore not found by location <%s>\", keystoreLocation)));\n     }\n     return in;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "158",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/17/TslLoader.java\nindex d22e837e4e4..6e1d7ea91d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/17/TslLoader.java\n@@ -127,7 +127,7 @@ public class TslLoader implements Serializable {\n     CollectionUtils.addAll(trustedTerritories, this.configuration.getTrustedTerritories());\n \n     lotlSource.setLotlPredicate(new EULOTLOtherTSLPointer()\n-            .and(new XMLOtherTSLPointer())\n+        .and(new XMLOtherTSLPointer())\n     );\n \n     if (!trustedTerritories.isEmpty()) {\n@@ -141,7 +141,7 @@ public class TslLoader implements Serializable {\n   private KeyStoreCertificateSource getKeyStore() {\n     try (InputStream tslKeyStoreInputStream = openTslKeyStoreInputStream()) {\n       return new KeyStoreCertificateSource(tslKeyStoreInputStream, DEFAULT_KEYSTORE_TYPE,\n-              this.configuration.getTslKeyStorePassword());\n+          this.configuration.getTslKeyStorePassword());\n     } catch (IOException e) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve keystore\", e);\n     }\n@@ -155,7 +155,7 @@ public class TslLoader implements Serializable {\n     InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n     if (in == null) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-              (\"Keystore not found by location <%s>\", keystoreLocation)));\n+          (\"Keystore not found by location <%s>\", keystoreLocation)));\n     }\n     return in;\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/17/TslLoader.java\nindex d22e837e4e4..ad1c9841935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/17/TslLoader.java\n@@ -126,9 +126,7 @@ public class TslLoader implements Serializable {\n     Set<String> trustedTerritories = new HashSet<>();\n     CollectionUtils.addAll(trustedTerritories, this.configuration.getTrustedTerritories());\n \n-    lotlSource.setLotlPredicate(new EULOTLOtherTSLPointer()\n-            .and(new XMLOtherTSLPointer())\n-    );\n+    lotlSource.setLotlPredicate(new EULOTLOtherTSLPointer().and(new XMLOtherTSLPointer()));\n \n     if (!trustedTerritories.isEmpty()) {\n       lotlSource.setTlPredicate(new SchemeTerritoryOtherTSLPointer(trustedTerritories));\n@@ -140,8 +138,7 @@ public class TslLoader implements Serializable {\n \n   private KeyStoreCertificateSource getKeyStore() {\n     try (InputStream tslKeyStoreInputStream = openTslKeyStoreInputStream()) {\n-      return new KeyStoreCertificateSource(tslKeyStoreInputStream, DEFAULT_KEYSTORE_TYPE,\n-              this.configuration.getTslKeyStorePassword());\n+      return new KeyStoreCertificateSource(tslKeyStoreInputStream, DEFAULT_KEYSTORE_TYPE, this.configuration.getTslKeyStorePassword());\n     } catch (IOException e) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve keystore\", e);\n     }\n@@ -154,9 +151,8 @@ public class TslLoader implements Serializable {\n     }\n     InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n     if (in == null) {\n-      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-              (\"Keystore not found by location <%s>\", keystoreLocation)));\n-    }\n+      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format(\"Keystore not found by location <%s>\", keystoreLocation)));\n+  }\n     return in;\n   }\n \n@@ -164,8 +160,7 @@ public class TslLoader implements Serializable {\n    * ACCESSORS\n    */\n \n-\n-  public TSLCertificateSourceImpl getTslCertificateSource() {\n+public TSLCertificateSourceImpl getTslCertificateSource() {\n     return tslCertificateSource;\n   }\n \n@@ -173,4 +168,4 @@ public class TslLoader implements Serializable {\n     return tlValidationJob;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/17/TslLoader.java\nindex d22e837e4e4..1a084012c5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/17/TslLoader.java\n@@ -35,7 +35,6 @@ import org.digidoc4j.exceptions.TslKeyStoreNotFoundException;\n import org.digidoc4j.utils.ResourceUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n@@ -48,6 +47,8 @@ import java.util.Set;\n /**\n  * TSL loader\n  */\n+\n+\n public class TslLoader implements Serializable {\n \n   public static final File fileCacheDirectory = new File(System.getProperty(\"java.io.tmpdir\") + \"/digidoc4jTSLCache\");\n@@ -60,10 +61,12 @@ public class TslLoader implements Serializable {\n   /**\n    * @param configuration configuration context\n    */\n+\n   public TslLoader(Configuration configuration) {\n     this.configuration = configuration;\n   }\n \n+\n   public static void invalidateCache() {\n     logger.info(\"Cleaning TSL cache directory at {}\", TslLoader.fileCacheDirectory.getPath());\n     try {\n@@ -88,7 +91,6 @@ public class TslLoader implements Serializable {\n \n   private TLValidationJob createTslValidationJob() {\n     TLValidationJob job = new TLValidationJob();\n-\n     DataLoader tslDataLoader = new TslDataLoaderFactory(this.configuration, fileCacheDirectory).create();\n     if (tslDataLoader instanceof DSSFileLoader) {\n       job.setOnlineDataLoader((DSSFileLoader) tslDataLoader);\n@@ -99,9 +101,7 @@ public class TslLoader implements Serializable {\n     job.setListOfTrustedListSources(lotlSource);\n     job.setTrustedListCertificateSource(this.tslCertificateSource);\n     job.setSynchronizationStrategy(new AcceptAllStrategy());\n-\n     job.setTLAlerts(Arrays.asList(tlSigningAlert(), tlExpirationDetection()));\n-\n     return job;\n   }\n \n@@ -121,27 +121,21 @@ public class TslLoader implements Serializable {\n     LOTLSource lotlSource = new LOTLSource();\n     lotlSource.setUrl(this.configuration.getTslLocation());\n     lotlSource.setCertificateSource(this.tslCertificateSource);\n-\n     lotlSource.setCertificateSource(getKeyStore());\n     Set<String> trustedTerritories = new HashSet<>();\n     CollectionUtils.addAll(trustedTerritories, this.configuration.getTrustedTerritories());\n-\n-    lotlSource.setLotlPredicate(new EULOTLOtherTSLPointer()\n-            .and(new XMLOtherTSLPointer())\n-    );\n-\n+    lotlSource.setLotlPredicate(new EULOTLOtherTSLPointer().and(new XMLOtherTSLPointer()));\n     if (!trustedTerritories.isEmpty()) {\n       lotlSource.setTlPredicate(new SchemeTerritoryOtherTSLPointer(trustedTerritories));\n     }\n-\n     return lotlSource;\n   }\n \n-\n   private KeyStoreCertificateSource getKeyStore() {\n     try (InputStream tslKeyStoreInputStream = openTslKeyStoreInputStream()) {\n-      return new KeyStoreCertificateSource(tslKeyStoreInputStream, DEFAULT_KEYSTORE_TYPE,\n-              this.configuration.getTslKeyStorePassword());\n+      return new KeyStoreCertificateSource(tslKeyStoreInputStream,\n+        DEFAULT_KEYSTORE_TYPE,\n+          this.configuration.getTslKeyStorePassword());\n     } catch (IOException e) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve keystore\", e);\n     }\n@@ -154,8 +148,7 @@ public class TslLoader implements Serializable {\n     }\n     InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n     if (in == null) {\n-      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-              (\"Keystore not found by location <%s>\", keystoreLocation)));\n+      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format(\"Keystore not found by location <%s>\", keystoreLocation)));\n     }\n     return in;\n   }\n@@ -164,7 +157,6 @@ public class TslLoader implements Serializable {\n    * ACCESSORS\n    */\n \n-\n   public TSLCertificateSourceImpl getTslCertificateSource() {\n     return tslCertificateSource;\n   }\n@@ -172,5 +164,4 @@ public class TslLoader implements Serializable {\n   public TLValidationJob getTlValidationJob() {\n     return tlValidationJob;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/17/TslLoader.java\nindex d22e837e4e4..fe0ad4b51b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/17/TslLoader.java\n@@ -154,8 +154,8 @@ public class TslLoader implements Serializable {\n     }\n     InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n     if (in == null) {\n-      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-              (\"Keystore not found by location <%s>\", keystoreLocation)));\n+      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format(\n+      \"Keystore not found by location <%s>\", keystoreLocation)));\n     }\n     return in;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "158",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/17/TslLoader.java\nindex d22e837e4e4..5d49e53fcde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/17/TslLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/17/TslLoader.java\n@@ -155,7 +155,7 @@ public class TslLoader implements Serializable {\n     InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n     if (in == null) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-              (\"Keystore not found by location <%s>\", keystoreLocation)));\n+          (\"Keystore not found by location <%s>\", keystoreLocation)));\n     }\n     return in;\n   }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}