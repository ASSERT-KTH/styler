{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4166",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "98",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4166/NodeLabelReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4166/NodeLabelReader.java\nindex b47317c6319..00932dcc4a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4166/NodeLabelReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4166/NodeLabelReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.ArrayList;\n@@ -46,90 +47,89 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n \n public class NodeLabelReader\n {\n-    private NodeLabelReader()\n-    {\n-    }\n+  private NodeLabelReader()\n+  {\n+  }\n \n-    public static <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> Set<Long> getListOfLabels(\n-            NodeRecord nodeRecord, RecordAccess records, CheckerEngine<RECORD, REPORT> engine )\n-    {\n-        final Set<Long> labels = new HashSet<>();\n-\n-        NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( nodeRecord );\n-        if ( nodeLabels instanceof DynamicNodeLabels )\n-        {\n+  public static <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> Set<Long> getListOfLabels(\n+      NodeRecord nodeRecord, RecordAccess records, CheckerEngine<RECORD, REPORT> engine)\n+  {\n+    final Set<Long> labels = new HashSet<>();\n \n-            DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n-            long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n-            RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels( firstRecordId );\n-            engine.comparativeCheck( firstRecordReference,\n-                    new LabelChainWalker<>(\n-                            new LabelChainWalker.Validator<RECORD, REPORT>()\n-                            {\n-                                @Override\n-                                public void onRecordNotInUse( DynamicRecord dynamicRecord,\n-                                                              CheckerEngine<RECORD, REPORT> engine )\n-                                {\n-                                }\n+    NodeLabels nodeLabels = NodeLabelsField.parseLabelsField(nodeRecord);\n+    if (nodeLabels instanceof DynamicNodeLabels)\n+    {\n \n-                                @Override\n-                                public void onRecordChainCycle( DynamicRecord record,\n-                                                                CheckerEngine<RECORD, REPORT> engine )\n-                                {\n-                                }\n+      DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n+      long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n+      RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels(firstRecordId);\n+      engine.comparativeCheck(firstRecordReference,\n+          new LabelChainWalker<>(\n+              new LabelChainWalker.Validator<RECORD, REPORT>()\n+              {\n+                @Override\n+                public void onRecordNotInUse(DynamicRecord dynamicRecord,\n+                                             CheckerEngine<RECORD, REPORT> engine)\n+                {\n+                }\n \n-                                @Override\n-                                public void onWellFormedChain( long[] labelIds,\n-                                                               CheckerEngine<RECORD, REPORT> engine,\n-                                                               RecordAccess records )\n-                                {\n-                                    copyToSet( labelIds, labels );\n-                                }\n-                            } ) );\n-        }\n-        else\n-        {\n-            copyToSet( nodeLabels.get( null ), labels );\n-        }\n+                @Override\n+                public void onRecordChainCycle(DynamicRecord record,\n+                                               CheckerEngine<RECORD, REPORT> engine)\n+                {\n+                }\n \n-        return labels;\n+                @Override\n+                public void onWellFormedChain(long[] labelIds,\n+                                              CheckerEngine<RECORD, REPORT> engine,\n+                                              RecordAccess records)\n+                {\n+                  copyToSet(labelIds, labels);\n+                }\n+              }));\n+    } else\n+    {\n+      copyToSet(nodeLabels.get(null), labels);\n     }\n \n-    public static long[] getListOfLabels( NodeRecord nodeRecord, RecordStore<DynamicRecord> labels )\n+    return labels;\n+  }\n+\n+  public static long[] getListOfLabels(NodeRecord nodeRecord, RecordStore<DynamicRecord> labels)\n+  {\n+    long field = nodeRecord.getLabelField();\n+    if (NodeLabelsField.fieldPointsToDynamicRecordOfLabels(field))\n     {\n-        long field = nodeRecord.getLabelField();\n-        if ( NodeLabelsField.fieldPointsToDynamicRecordOfLabels( field ) )\n+      List<DynamicRecord> recordList = new ArrayList<>();\n+      PrimitiveLongSet alreadySeen = Primitive.longSet(16);\n+      long id = NodeLabelsField.firstDynamicLabelRecordId(field);\n+      while (!Record.NULL_REFERENCE.is(id))\n+      {\n+        DynamicRecord record = labels.getRecord(id, labels.newRecord(), FORCE);\n+        if (!record.inUse() || !alreadySeen.add(id))\n         {\n-            List<DynamicRecord> recordList = new ArrayList<>();\n-            PrimitiveLongSet alreadySeen = Primitive.longSet( 16 );\n-            long id = NodeLabelsField.firstDynamicLabelRecordId( field );\n-            while ( !Record.NULL_REFERENCE.is( id ) )\n-            {\n-                DynamicRecord record = labels.getRecord( id, labels.newRecord(), FORCE );\n-                if ( !record.inUse() || !alreadySeen.add( id ) )\n-                {\n-                    return PrimitiveLongCollections.EMPTY_LONG_ARRAY;\n-                }\n-                recordList.add( record );\n-            }\n-            return LabelChainWalker.labelIds( recordList );\n+          return PrimitiveLongCollections.EMPTY_LONG_ARRAY;\n         }\n-        return InlineNodeLabels.get( nodeRecord );\n+        recordList.add(record);\n+      }\n+      return LabelChainWalker.labelIds(recordList);\n     }\n+    return InlineNodeLabels.get(nodeRecord);\n+  }\n \n-    public static Set<Long> getListOfLabels( long labelField )\n-    {\n-        final Set<Long> labels = new HashSet<>();\n-        copyToSet( InlineNodeLabels.parseInlined(labelField), labels );\n+  public static Set<Long> getListOfLabels(long labelField)\n+  {\n+    final Set<Long> labels = new HashSet<>();\n+    copyToSet(InlineNodeLabels.parseInlined(labelField), labels);\n \n-        return labels;\n-    }\n+    return labels;\n+  }\n \n-    private static void copyToSet( long[] array, Set<Long> set )\n+  private static void copyToSet(long[] array, Set<Long> set)\n+  {\n+    for (long labelId : array)\n     {\n-        for ( long labelId : array )\n-        {\n-            set.add( labelId );\n-        }\n+      set.add(labelId);\n     }\n+  }\n }\n",
            "diff_size": 106
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4166/NodeLabelReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4166/NodeLabelReader.java\nindex b47317c6319..78a2d5ee4b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4166/NodeLabelReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4166/NodeLabelReader.java\n@@ -50,43 +50,35 @@ public class NodeLabelReader\n     {\n     }\n \n-    public static <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> Set<Long> getListOfLabels(\n-            NodeRecord nodeRecord, RecordAccess records, CheckerEngine<RECORD, REPORT> engine )\n+    public static <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> Set<Long> getListOfLabels( NodeRecord nodeRecord, RecordAccess records, CheckerEngine<RECORD,REPORT> engine )\n     {\n         final Set<Long> labels = new HashSet<>();\n-\n-        NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( nodeRecord );\n+NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( nodeRecord );\n         if ( nodeLabels instanceof DynamicNodeLabels )\n         {\n-\n-            DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n+    DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n             long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n             RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels( firstRecordId );\n-            engine.comparativeCheck( firstRecordReference,\n-                    new LabelChainWalker<>(\n-                            new LabelChainWalker.Validator<RECORD, REPORT>()\n+            engine.comparativeCheck( firstRecordReference, new LabelChainWalker<>( new LabelChainWalker.Validator<RECORD, REPORT>()\n                             {\n                                 @Override\n-                                public void onRecordNotInUse( DynamicRecord dynamicRecord,\n-                                                              CheckerEngine<RECORD, REPORT> engine )\n-                                {\n+                                public void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD,REPORT> engine )\n+{\n                                 }\n \n                                 @Override\n-                                public void onRecordChainCycle( DynamicRecord record,\n-                                                                CheckerEngine<RECORD, REPORT> engine )\n-                                {\n+                                public void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD,REPORT> engine )\n+{\n                                 }\n \n                                 @Override\n-                                public void onWellFormedChain( long[] labelIds,\n-                                                               CheckerEngine<RECORD, REPORT> engine,\n+                                public void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD,REPORT> engine,\n                                                                RecordAccess records )\n-                                {\n+{\n                                     copyToSet( labelIds, labels );\n                                 }\n                             } ) );\n-        }\n+    }\n         else\n         {\n             copyToSet( nodeLabels.get( null ), labels );\n@@ -112,17 +104,18 @@ public class NodeLabelReader\n                 }\n                 recordList.add( record );\n             }\n-            return LabelChainWalker.labelIds( recordList );\n+\n+return LabelChainWalker.labelIds( recordList );\n         }\n-        return InlineNodeLabels.get( nodeRecord );\n+\n+return InlineNodeLabels.get( nodeRecord );\n     }\n \n     public static Set<Long> getListOfLabels( long labelField )\n     {\n         final Set<Long> labels = new HashSet<>();\n         copyToSet( InlineNodeLabels.parseInlined(labelField), labels );\n-\n-        return labels;\n+return labels;\n     }\n \n     private static void copyToSet( long[] array, Set<Long> set )\n@@ -132,4 +125,4 @@ public class NodeLabelReader\n             set.add( labelId );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}