{
    "project_name": "neo4j-neo4j",
    "error_id": "1541",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1541/Generator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1541/Generator.java\nindex a8dcd338787..1652896fe32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1541/Generator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1541/Generator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n /**\n@@ -29,37 +30,43 @@ public interface Generator\n {\n     /**\n      * Return a pseudorandom normally distributed long\n+     *\n      * @return a pseudorandom normally distributed long\n      */\n     long nextLong();\n \n     /**\n      * Return a pseudorandom normally distributed boolean\n+     *\n      * @return a pseudorandom normally distributed boolean\n      */\n     boolean nextBoolean();\n \n     /**\n      * Return a pseudorandom normally distributed int\n+     *\n      * @return a pseudorandom normally distributed int\n      */\n     int nextInt();\n \n     /**\n      * Return a pseudorandom normally distributed long between 0 (inclusive) and the given bound(exlusive)\n+     *\n      * @param bound the exclusive upper bound for the number generation\n      * @return a pseudorandom normally distributed int\n      */\n-    int nextInt( int bound );\n+    int nextInt(int bound);\n \n     /**\n      * Return a pseudorandom normally distributed float from {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive)\n+     *\n      * @return a pseudorandom normally distributed from {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive)\n      */\n     float nextFloat();\n \n     /**\n      * Return a pseudorandom normally distributed double from {@code 0.0} (inclusive) to {@code 1.0} (exclusive)\n+     *\n      * @return a pseudorandom normally distributed double from {@code 0.0} (inclusive) to {@code 1.0} (exclusive)\n      */\n     double nextDouble();\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}