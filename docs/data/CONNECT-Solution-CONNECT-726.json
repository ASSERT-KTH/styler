{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "726",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.callback.cxf;\n\nimport gov.hhs.fha.nhinc.nhinclib.NhincConstants;\nimport gov.hhs.fha.nhinc.properties.PropertyAccessor;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/726/CONNECTSamlAssertionValidator.java\nindex fbb01a4441d..db026f79cb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/726/CONNECTSamlAssertionValidator.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.callback.cxf;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n@@ -53,259 +54,271 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * The Class CONNECTSamlAssertionValidator.\n- *\n+ * <p>\n  * {@inheritDoc}\n- *\n+ * <p>\n  * In addition, this class can be configured to allow Assertions with No Subjects. This is required for interoperability\n  * with previous CONNECT gateways.\n  */\n public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n \n-    /** The Constant LOG. */\n-    private static final Logger LOG = LoggerFactory.getLogger(CONNECTSamlAssertionValidator.class);\n-\n-    /** The Constant ALLOW_NO_SUBJECT_ASSERTION_PROP. */\n-    private static final String ALLOW_NO_SUBJECT_ASSERTION_PROP = \"allowNoSubjectAssertion\";\n-\n-    /** The Constant ALLOW_NO_SUBJECT_ASSERTION_ID. */\n-    private static final String ALLOW_NO_SUBJECT_ASSERTION_ID = \"saml2-core-spec-validator-allow-no-subject-assertion\";\n-\n-    /** The Constant EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE. */\n-    private static final String EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE = \"exchange-authorization-framework-validator-suite\";\n-\n-    /** The Constant TEMP_RESOURCE_FOR_VALIDATION. */\n-    private static final String TEMP_RESOURCE_FOR_VALIDATION = \"TEMPORARY_RESOURCE_FOR_VALIDATION\";\n-\n-    /** The property accessor. */\n-    private PropertyAccessor propertyAccessor;\n-\n-    /**\n-     * Instantiates a new cONNECT saml assertion validator.\n-     */\n-    public CONNECTSamlAssertionValidator() {\n-        propertyAccessor = PropertyAccessor.getInstance();\n-    }\n+  /**\n+   * The Constant LOG.\n+   */\n+  private static final Logger LOG = LoggerFactory.getLogger(CONNECTSamlAssertionValidator.class);\n+\n+  /**\n+   * The Constant ALLOW_NO_SUBJECT_ASSERTION_PROP.\n+   */\n+  private static final String ALLOW_NO_SUBJECT_ASSERTION_PROP = \"allowNoSubjectAssertion\";\n+\n+  /**\n+   * The Constant ALLOW_NO_SUBJECT_ASSERTION_ID.\n+   */\n+  private static final String ALLOW_NO_SUBJECT_ASSERTION_ID = \"saml2-core-spec-validator-allow-no-subject-assertion\";\n+\n+  /**\n+   * The Constant EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE.\n+   */\n+  private static final String EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE = \"exchange-authorization-framework-validator-suite\";\n+\n+  /**\n+   * The Constant TEMP_RESOURCE_FOR_VALIDATION.\n+   */\n+  private static final String TEMP_RESOURCE_FOR_VALIDATION = \"TEMPORARY_RESOURCE_FOR_VALIDATION\";\n+\n+  /**\n+   * The property accessor.\n+   */\n+  private PropertyAccessor propertyAccessor;\n+\n+  /**\n+   * Instantiates a new cONNECT saml assertion validator.\n+   */\n+  public CONNECTSamlAssertionValidator() {\n+    propertyAccessor = PropertyAccessor.getInstance();\n+  }\n+\n+  /**\n+   * Instantiates a new cONNECT saml assertion validator.\n+   *\n+   * @param propertyAccessor the property accessor\n+   */\n+  public CONNECTSamlAssertionValidator(PropertyAccessor propertyAccessor) {\n+    this.propertyAccessor = propertyAccessor;\n+  }\n+\n+  /**\n+   * Validate the assertion against schemas/profiles.\n+   *\n+   * @param assertion the assertion\n+   * @throws WSSecurityException the wS security exception\n+   */\n+  @Override\n+  protected void validateAssertion(AssertionWrapper assertion) throws WSSecurityException {\n+    if (assertion.getSaml1() != null) {\n+      ValidatorSuite schemaValidators = org.opensaml.Configuration.getValidatorSuite(\"saml1-schema-validator\");\n+      ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(\"saml1-spec-validator\");\n+      try {\n+        schemaValidators.validate(assertion.getSaml1());\n+        specValidators.validate(assertion.getSaml1());\n+      } catch (ValidationException e) {\n+        LOG.debug(\"Saml Validation error: \" + e.getMessage(), e);\n+        throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+      }\n+    } else if (assertion.getSaml2() != null) {\n+      List<ValidatorSuite> validators = new LinkedList<>();\n+      validators.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-schema-validator\"));\n+      validators.addAll(getSaml2SpecValidators());\n+\n+      for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n+        if (StringUtils.isBlank(auth.getResource())) {\n+          auth.setResource(TEMP_RESOURCE_FOR_VALIDATION);\n+        }\n+      }\n+\n+      Issuer issuer = assertion.getSaml2().getIssuer();\n+      if (issuer.getFormat().equals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\")) {\n+        if (!StringUtils.isBlank(issuer.getSPProvidedID())) {\n+          throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n+              + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n+              + \"Security/Assertion/Issuer/@SPProvidedID\" + \" \" + \"is present.\");\n+        }\n+        if (!StringUtils.isBlank(issuer.getNameQualifier())) {\n+          throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n+              + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n+              + \"Security/Assertion/Issuer/@NameQualifier\" + \" \" + \"is present.\");\n+        }\n \n-    /**\n-     * Instantiates a new cONNECT saml assertion validator.\n-     *\n-     * @param propertyAccessor the property accessor\n-     */\n-    public CONNECTSamlAssertionValidator(PropertyAccessor propertyAccessor) {\n-        this.propertyAccessor = propertyAccessor;\n-    }\n+        if (!StringUtils.isBlank(issuer.getSPNameQualifier())) {\n+          throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n+              + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n+              + \"Security/Assertion/Issuer/@SPNameQualifier\" + \" \" + \"is present.\");\n \n-    /**\n-     * Validate the assertion against schemas/profiles.\n-     *\n-     * @param assertion the assertion\n-     * @throws WSSecurityException the wS security exception\n-     */\n-    @Override\n-    protected void validateAssertion(AssertionWrapper assertion) throws WSSecurityException {\n-        if (assertion.getSaml1() != null) {\n-            ValidatorSuite schemaValidators = org.opensaml.Configuration.getValidatorSuite(\"saml1-schema-validator\");\n-            ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(\"saml1-spec-validator\");\n-            try {\n-                schemaValidators.validate(assertion.getSaml1());\n-                specValidators.validate(assertion.getSaml1());\n-            } catch (ValidationException e) {\n-                LOG.debug(\"Saml Validation error: \" + e.getMessage(), e);\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n-            }\n-        } else if (assertion.getSaml2() != null) {\n-            List<ValidatorSuite> validators = new LinkedList<>();\n-            validators.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-schema-validator\"));\n-            validators.addAll(getSaml2SpecValidators());\n-\n-            for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n-                if (StringUtils.isBlank(auth.getResource())) {\n-                    auth.setResource(TEMP_RESOURCE_FOR_VALIDATION);\n-                }\n-            }\n-\n-            Issuer issuer = assertion.getSaml2().getIssuer();\n-            if (issuer.getFormat().equals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\")) {\n-                if (!StringUtils.isBlank(issuer.getSPProvidedID())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@SPProvidedID\" + \" \" + \"is present.\");\n-                }\n-                if (!StringUtils.isBlank(issuer.getNameQualifier())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@NameQualifier\" + \" \" + \"is present.\");\n-                }\n-\n-                if (!StringUtils.isBlank(issuer.getSPNameQualifier())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@SPNameQualifier\" + \" \" + \"is present.\");\n-\n-                }\n-            }\n-\n-            try {\n-                for (ValidatorSuite v : validators) {\n-                    v.validate(assertion.getSaml2());\n-                }\n-            } catch (ValidationException e) {\n-                LOG.error(\"Saml Validation error: \" + e.getMessage(), e);\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n-            }\n-\n-            for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n-                if (StringUtils.equals(auth.getResource(), TEMP_RESOURCE_FOR_VALIDATION)) {\n-                    auth.setResource(StringUtils.EMPTY);\n-                }\n-            }\n         }\n-    }\n+      }\n \n-    /**\n-     * Gets the exchange auth framework validator suite.\n-     *\n-     * @return the exchange auth framework validator suite\n-     */\n-    protected ValidatorSuite getExchangeAuthFrameworkValidatorSuite() {\n-        ValidatorSuite specValidator = org.opensaml.Configuration.getValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n-\n-        if (specValidator == null) {\n-            QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n-            specValidator = new ValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n-            specValidator.registerValidator(qName, new Saml2ExchangeAuthFrameworkValidator());\n-            org.opensaml.Configuration.registerValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE, specValidator);\n+      try {\n+        for (ValidatorSuite v : validators) {\n+          v.validate(assertion.getSaml2());\n         }\n-\n-        return specValidator;\n-    }\n-\n-    /**\n-     * Gets the saml2 spec validators.\n-     *\n-     * @return the saml2 spec validators\n-     */\n-    protected Collection<ValidatorSuite> getSaml2SpecValidators() {\n-        try {\n-            Boolean allowNoSubjectAssertion = propertyAccessor.getPropertyBoolean(NhincConstants.GATEWAY_PROPERTY_FILE,\n-                    ALLOW_NO_SUBJECT_ASSERTION_PROP);\n-\n-            if (allowNoSubjectAssertion) {\n-                return getSaml2AllowNoSubjectAssertionSpecValidators();\n-            } else {\n-                return getSaml2DefaultAssertionSpecValidators();\n-            }\n-\n-        } catch (Exception e) {\n-            LOG.warn(\"Failed to get SAML 2 assertion validator. \" + e.getMessage(), e);\n-            return null;\n+      } catch (ValidationException e) {\n+        LOG.error(\"Saml Validation error: \" + e.getMessage(), e);\n+        throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+      }\n+\n+      for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n+        if (StringUtils.equals(auth.getResource(), TEMP_RESOURCE_FOR_VALIDATION)) {\n+          auth.setResource(StringUtils.EMPTY);\n         }\n+      }\n     }\n-\n-    /**\n-     * Gets the saml2 allow no subject assertion spec validators.\n-     *\n-     * @return the saml2 allow no subject assertion spec validators\n-     */\n-    protected Collection<ValidatorSuite> getSaml2AllowNoSubjectAssertionSpecValidators() {\n-        return Collections.singleton(getSaml2AllowNoSubjectAssertionSpecValidator());\n+  }\n+\n+  /**\n+   * Gets the exchange auth framework validator suite.\n+   *\n+   * @return the exchange auth framework validator suite\n+   */\n+  protected ValidatorSuite getExchangeAuthFrameworkValidatorSuite() {\n+    ValidatorSuite specValidator = org.opensaml.Configuration.getValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n+\n+    if (specValidator == null) {\n+      QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n+      specValidator = new ValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n+      specValidator.registerValidator(qName, new Saml2ExchangeAuthFrameworkValidator());\n+      org.opensaml.Configuration.registerValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE, specValidator);\n     }\n \n-    /**\n-     * Gets the saml2 allow no subject assertion spec validator.\n-     *\n-     * @return the saml2 allow no subject assertion spec validator\n-     */\n-    protected ValidatorSuite getSaml2AllowNoSubjectAssertionSpecValidator() {\n-        ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n-\n-        if (specValidators == null) {\n-            QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n-            specValidators = new ValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n-            specValidators.registerValidator(qName, new Saml2AllowNoSubjectAssertionSpecValidator());\n-            org.opensaml.Configuration.registerValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID, specValidators);\n-        }\n-\n-        return specValidators;\n+    return specValidator;\n+  }\n+\n+  /**\n+   * Gets the saml2 spec validators.\n+   *\n+   * @return the saml2 spec validators\n+   */\n+  protected Collection<ValidatorSuite> getSaml2SpecValidators() {\n+    try {\n+      Boolean allowNoSubjectAssertion = propertyAccessor.getPropertyBoolean(NhincConstants.GATEWAY_PROPERTY_FILE,\n+          ALLOW_NO_SUBJECT_ASSERTION_PROP);\n+\n+      if (allowNoSubjectAssertion) {\n+        return getSaml2AllowNoSubjectAssertionSpecValidators();\n+      } else {\n+        return getSaml2DefaultAssertionSpecValidators();\n+      }\n+\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to get SAML 2 assertion validator. \" + e.getMessage(), e);\n+      return null;\n     }\n-\n-    /**\n-     * Gets the saml2 assertion spec validator.\n-     *\n-     * @return the saml2 assertion spec validator\n-     */\n-    protected Collection<ValidatorSuite> getSaml2DefaultAssertionSpecValidators() {\n-        Collection<ValidatorSuite> suites = new HashSet<>();\n-        suites.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-spec-validator\"));\n-        suites.add(getExchangeAuthFrameworkValidatorSuite());\n-        return suites;\n+  }\n+\n+  /**\n+   * Gets the saml2 allow no subject assertion spec validators.\n+   *\n+   * @return the saml2 allow no subject assertion spec validators\n+   */\n+  protected Collection<ValidatorSuite> getSaml2AllowNoSubjectAssertionSpecValidators() {\n+    return Collections.singleton(getSaml2AllowNoSubjectAssertionSpecValidator());\n+  }\n+\n+  /**\n+   * Gets the saml2 allow no subject assertion spec validator.\n+   *\n+   * @return the saml2 allow no subject assertion spec validator\n+   */\n+  protected ValidatorSuite getSaml2AllowNoSubjectAssertionSpecValidator() {\n+    ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n+\n+    if (specValidators == null) {\n+      QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n+      specValidators = new ValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n+      specValidators.registerValidator(qName, new Saml2AllowNoSubjectAssertionSpecValidator());\n+      org.opensaml.Configuration.registerValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID, specValidators);\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see org.apache.ws.security.validate.SamlAssertionValidator( org.apache.ws.security.validate.Credential,\n-     * org.apache.ws.security.handler.RequestData)\n-     */\n-    @Override\n-    public Credential validate(Credential credential, RequestData data) throws WSSecurityException {\n-        if (credential == null || credential.getAssertion() == null) {\n-            throw new WSSecurityException(WSSecurityException.FAILURE, \"noCredential\");\n-        }\n-        AssertionWrapper assertion = credential.getAssertion();\n-\n-        // Check HOK requirements\n-        String confirmMethod = null;\n-        List<String> methods = assertion.getConfirmationMethods();\n-        if (methods != null && methods.size() > 0) {\n-            confirmMethod = methods.get(0);\n-        }\n-        if (OpenSAMLUtil.isMethodHolderOfKey(confirmMethod)) {\n-            if (assertion.getSubjectKeyInfo() == null) {\n-                LOG.debug(\"There is no Subject KeyInfo to match the holder-of-key subject conf method\");\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"noKeyInSAMLToken\");\n-            }\n-            // The assertion must have been signed for HOK\n-            if (!assertion.isSigned()) {\n-                LOG.debug(\"A holder-of-key assertion must be signed\");\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n-            }\n-        }\n-\n-        // Check conditions\n-        checkConditions(assertion);\n-\n-        // Validate the assertion against schemas/profiles\n-        validateAssertion(assertion);\n-\n-        checkSignedAssertion(assertion, data);\n+    return specValidators;\n+  }\n+\n+  /**\n+   * Gets the saml2 assertion spec validator.\n+   *\n+   * @return the saml2 assertion spec validator\n+   */\n+  protected Collection<ValidatorSuite> getSaml2DefaultAssertionSpecValidators() {\n+    Collection<ValidatorSuite> suites = new HashSet<>();\n+    suites.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-spec-validator\"));\n+    suites.add(getExchangeAuthFrameworkValidatorSuite());\n+    return suites;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see org.apache.ws.security.validate.SamlAssertionValidator( org.apache.ws.security.validate.Credential,\n+   * org.apache.ws.security.handler.RequestData)\n+   */\n+  @Override\n+  public Credential validate(Credential credential, RequestData data) throws WSSecurityException {\n+    if (credential == null || credential.getAssertion() == null) {\n+      throw new WSSecurityException(WSSecurityException.FAILURE, \"noCredential\");\n+    }\n+    AssertionWrapper assertion = credential.getAssertion();\n \n-        return credential;\n+    // Check HOK requirements\n+    String confirmMethod = null;\n+    List<String> methods = assertion.getConfirmationMethods();\n+    if (methods != null && methods.size() > 0) {\n+      confirmMethod = methods.get(0);\n+    }\n+    if (OpenSAMLUtil.isMethodHolderOfKey(confirmMethod)) {\n+      if (assertion.getSubjectKeyInfo() == null) {\n+        LOG.debug(\"There is no Subject KeyInfo to match the holder-of-key subject conf method\");\n+        throw new WSSecurityException(WSSecurityException.FAILURE, \"noKeyInSAMLToken\");\n+      }\n+      // The assertion must have been signed for HOK\n+      if (!assertion.isSigned()) {\n+        LOG.debug(\"A holder-of-key assertion must be signed\");\n+        throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+      }\n     }\n \n-    /**\n-     * Check signed assertion.\n-     *\n-     * @param assertion the assertion\n-     * @param data the data\n-     * @throws WSSecurityException the wS security exception\n-     */\n-    protected void checkSignedAssertion(AssertionWrapper assertion, RequestData data) throws WSSecurityException {\n-\n-        SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n-        X509Certificate[] certs = samlKeyInfo.getCerts();\n-        PublicKey publicKey = samlKeyInfo.getPublicKey();\n-\n-        try {\n-            super.verifySignedAssertion(assertion, data);\n-        } catch (WSSecurityException e) {\n-            if (certs == null && publicKey != null) {\n-                LOG.warn(\"Could not establish trust of the signature's public key because no matching public key \"\n-                        + \"exists in the truststore. Please see GATEWAY-3146 for more details.\");\n-            } else {\n-                throw e;\n-            }\n-        }\n+    // Check conditions\n+    checkConditions(assertion);\n+\n+    // Validate the assertion against schemas/profiles\n+    validateAssertion(assertion);\n+\n+    checkSignedAssertion(assertion, data);\n+\n+    return credential;\n+  }\n+\n+  /**\n+   * Check signed assertion.\n+   *\n+   * @param assertion the assertion\n+   * @param data      the data\n+   * @throws WSSecurityException the wS security exception\n+   */\n+  protected void checkSignedAssertion(AssertionWrapper assertion, RequestData data) throws WSSecurityException {\n+\n+    SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n+    X509Certificate[] certs = samlKeyInfo.getCerts();\n+    PublicKey publicKey = samlKeyInfo.getPublicKey();\n+\n+    try {\n+      super.verifySignedAssertion(assertion, data);\n+    } catch (WSSecurityException e) {\n+      if (certs == null && publicKey != null) {\n+        LOG.warn(\"Could not establish trust of the signature's public key because no matching public key \"\n+            + \"exists in the truststore. Please see GATEWAY-3146 for more details.\");\n+      } else {\n+        throw e;\n+      }\n     }\n+  }\n \n }\n",
            "diff_size": 349
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 250).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "298",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/726/CONNECTSamlAssertionValidator.java\nindex fbb01a4441d..1c577178fba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/726/CONNECTSamlAssertionValidator.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.callback.cxf;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n@@ -111,7 +112,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n                 specValidators.validate(assertion.getSaml1());\n             } catch (ValidationException e) {\n                 LOG.debug(\"Saml Validation error: \" + e.getMessage(), e);\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+\n+throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n             }\n         } else if (assertion.getSaml2() != null) {\n             List<ValidatorSuite> validators = new LinkedList<>();\n@@ -127,31 +129,25 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n             Issuer issuer = assertion.getSaml2().getIssuer();\n             if (issuer.getFormat().equals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\")) {\n                 if (!StringUtils.isBlank(issuer.getSPProvidedID())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@SPProvidedID\" + \" \" + \"is present.\");\n-                }\n+                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\" + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\" + \"Security/Assertion/Issuer/@SPProvidedID\" + \" \" + \"is present.\");\n+\n+        }\n                 if (!StringUtils.isBlank(issuer.getNameQualifier())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@NameQualifier\" + \" \" + \"is present.\");\n-                }\n+                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\" + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\" + \"Security/Assertion/Issuer/@NameQualifier\" + \" \" + \"is present.\");\n+    }\n \n                 if (!StringUtils.isBlank(issuer.getSPNameQualifier())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@SPNameQualifier\" + \" \" + \"is present.\");\n-\n-                }\n+                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\" + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\" + \"Security/Assertion/Issuer/@SPNameQualifier\" + \" \" + \"is present.\");\n+    }\n             }\n-\n-            try {\n+try {\n                 for (ValidatorSuite v : validators) {\n                     v.validate(assertion.getSaml2());\n                 }\n             } catch (ValidationException e) {\n                 LOG.error(\"Saml Validation error: \" + e.getMessage(), e);\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+\n+throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n             }\n \n             for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n@@ -169,8 +165,7 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      */\n     protected ValidatorSuite getExchangeAuthFrameworkValidatorSuite() {\n         ValidatorSuite specValidator = org.opensaml.Configuration.getValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n-\n-        if (specValidator == null) {\n+if (specValidator == null) {\n             QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n             specValidator = new ValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n             specValidator.registerValidator(qName, new Saml2ExchangeAuthFrameworkValidator());\n@@ -187,10 +182,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      */\n     protected Collection<ValidatorSuite> getSaml2SpecValidators() {\n         try {\n-            Boolean allowNoSubjectAssertion = propertyAccessor.getPropertyBoolean(NhincConstants.GATEWAY_PROPERTY_FILE,\n-                    ALLOW_NO_SUBJECT_ASSERTION_PROP);\n-\n-            if (allowNoSubjectAssertion) {\n+            Boolean allowNoSubjectAssertion = propertyAccessor.getPropertyBoolean(NhincConstants.GATEWAY_PROPERTY_FILE, ALLOW_NO_SUBJECT_ASSERTION_PROP);\n+if (allowNoSubjectAssertion) {\n                 return getSaml2AllowNoSubjectAssertionSpecValidators();\n             } else {\n                 return getSaml2DefaultAssertionSpecValidators();\n@@ -198,7 +191,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n \n         } catch (Exception e) {\n             LOG.warn(\"Failed to get SAML 2 assertion validator. \" + e.getMessage(), e);\n-            return null;\n+\n+return null;\n         }\n     }\n \n@@ -218,8 +212,7 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      */\n     protected ValidatorSuite getSaml2AllowNoSubjectAssertionSpecValidator() {\n         ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n-\n-        if (specValidators == null) {\n+if (specValidators == null) {\n             QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n             specValidators = new ValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n             specValidators.registerValidator(qName, new Saml2AllowNoSubjectAssertionSpecValidator());\n@@ -238,7 +231,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n         Collection<ValidatorSuite> suites = new HashSet<>();\n         suites.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-spec-validator\"));\n         suites.add(getExchangeAuthFrameworkValidatorSuite());\n-        return suites;\n+\n+return suites;\n     }\n \n     /*\n@@ -263,12 +257,14 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n         if (OpenSAMLUtil.isMethodHolderOfKey(confirmMethod)) {\n             if (assertion.getSubjectKeyInfo() == null) {\n                 LOG.debug(\"There is no Subject KeyInfo to match the holder-of-key subject conf method\");\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"noKeyInSAMLToken\");\n+\n+throw new WSSecurityException(WSSecurityException.FAILURE, \"noKeyInSAMLToken\");\n             }\n             // The assertion must have been signed for HOK\n             if (!assertion.isSigned()) {\n                 LOG.debug(\"A holder-of-key assertion must be signed\");\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+\n+throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n             }\n         }\n \n@@ -295,17 +291,15 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n         SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n         X509Certificate[] certs = samlKeyInfo.getCerts();\n         PublicKey publicKey = samlKeyInfo.getPublicKey();\n-\n-        try {\n+try {\n             super.verifySignedAssertion(assertion, data);\n         } catch (WSSecurityException e) {\n             if (certs == null && publicKey != null) {\n-                LOG.warn(\"Could not establish trust of the signature's public key because no matching public key \"\n-                        + \"exists in the truststore. Please see GATEWAY-3146 for more details.\");\n-            } else {\n+                LOG.warn(\"Could not establish trust of the signature's public key because no matching public key \" + \"exists in the truststore. Please see GATEWAY-3146 for more details.\");\n+    } else {\n                 throw e;\n             }\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "115",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 244).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "196",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "198",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "263",
                    "column": "31",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "263",
                    "column": "31",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "272",
                    "column": "46",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "308",
                    "column": "24",
                    "severity": "error",
                    "message": "'X509Certificate' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "313",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "314",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "315",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/726/CONNECTSamlAssertionValidator.java\nindex fbb01a4441d..5e6d0baf03e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/726/CONNECTSamlAssertionValidator.java\n@@ -59,9 +59,13 @@ import org.slf4j.LoggerFactory;\n  * In addition, this class can be configured to allow Assertions with No Subjects. This is required for interoperability\n  * with previous CONNECT gateways.\n  */\n-public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n+\n+\n+public class CONNECTSamlAssertionValidator extends\n+    SamlAssertionValidator {\n \n     /** The Constant LOG. */\n+\n     private static final Logger LOG = LoggerFactory.getLogger(CONNECTSamlAssertionValidator.class);\n \n     /** The Constant ALLOW_NO_SUBJECT_ASSERTION_PROP. */\n@@ -82,6 +86,7 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n     /**\n      * Instantiates a new cONNECT saml assertion validator.\n      */\n+\n     public CONNECTSamlAssertionValidator() {\n         propertyAccessor = PropertyAccessor.getInstance();\n     }\n@@ -91,6 +96,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      *\n      * @param propertyAccessor the property accessor\n      */\n+\n+\n     public CONNECTSamlAssertionValidator(PropertyAccessor propertyAccessor) {\n         this.propertyAccessor = propertyAccessor;\n     }\n@@ -101,9 +108,11 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      * @param assertion the assertion\n      * @throws WSSecurityException the wS security exception\n      */\n+\n+\n     @Override\n     protected void validateAssertion(AssertionWrapper assertion) throws WSSecurityException {\n-        if (assertion.getSaml1() != null) {\n+        if(assertion.getSaml1() != null) {\n             ValidatorSuite schemaValidators = org.opensaml.Configuration.getValidatorSuite(\"saml1-schema-validator\");\n             ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(\"saml1-spec-validator\");\n             try {\n@@ -113,53 +122,47 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n                 LOG.debug(\"Saml Validation error: \" + e.getMessage(), e);\n                 throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n             }\n-        } else if (assertion.getSaml2() != null) {\n-            List<ValidatorSuite> validators = new LinkedList<>();\n-            validators.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-schema-validator\"));\n-            validators.addAll(getSaml2SpecValidators());\n-\n-            for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n-                if (StringUtils.isBlank(auth.getResource())) {\n-                    auth.setResource(TEMP_RESOURCE_FOR_VALIDATION);\n-                }\n-            }\n-\n-            Issuer issuer = assertion.getSaml2().getIssuer();\n-            if (issuer.getFormat().equals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\")) {\n-                if (!StringUtils.isBlank(issuer.getSPProvidedID())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@SPProvidedID\" + \" \" + \"is present.\");\n-                }\n-                if (!StringUtils.isBlank(issuer.getNameQualifier())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@NameQualifier\" + \" \" + \"is present.\");\n-                }\n-\n-                if (!StringUtils.isBlank(issuer.getSPNameQualifier())) {\n-                    throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\"\n-                            + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\"\n-                            + \"Security/Assertion/Issuer/@SPNameQualifier\" + \" \" + \"is present.\");\n-\n-                }\n-            }\n+        }\n \n-            try {\n-                for (ValidatorSuite v : validators) {\n-                    v.validate(assertion.getSaml2());\n-                }\n-            } catch (ValidationException e) {\n-                LOG.error(\"Saml Validation error: \" + e.getMessage(), e);\n-                throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n-            }\n \n-            for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n-                if (StringUtils.equals(auth.getResource(), TEMP_RESOURCE_FOR_VALIDATION)) {\n-                    auth.setResource(StringUtils.EMPTY);\n-                }\n-            }\n-        }\n+else if (assertion.getSaml2() != null) {\n+         List<ValidatorSuite> validators = new LinkedList<>();\n+         validators.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-schema-validator\"));\n+         validators.addAll(getSaml2SpecValidators());\n+         for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n+             if (StringUtils.isBlank(auth.getResource())) {\n+                 auth.setResource(TEMP_RESOURCE_FOR_VALIDATION);\n+             }\n+         }\n+         Issuer issuer = assertion.getSaml2().getIssuer();\n+         if (issuer.getFormat().equals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\")) {\n+             if (!\n+                     StringUtils.isBlank(issuer.getSPProvidedID())) {\n+                 throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\" + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\" + \"Security/Assertion/Issuer/@SPProvidedID\" + \" \" + \"is present.\");\n+             }\n+             if (!\n+                     StringUtils.isBlank(issuer.getNameQualifier())) {\n+                 throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\" + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\" + \"Security/Assertion/Issuer/@NameQualifier\" + \" \" + \"is present.\");\n+             }\n+             if (!\n+                     StringUtils.isBlank(issuer.getSPNameQualifier())) {\n+                 throw new WSSecurityException(\"SOAP header element Security/Assertion/Issuer/@Format = \" + \"\" + \"urn:oasis:names:tc:SAML:1.1:nameid-format:entity\" + \"\" + \"and\" + \"Security/Assertion/Issuer/@SPNameQualifier\" + \" \" + \"is present.\");\n+             }\n+         }\n+         try {\n+             for (ValidatorSuite v : validators) {\n+                 v.validate(assertion.getSaml2());\n+             }\n+         } catch (ValidationException e) {\n+             LOG.error(\"Saml Validation error: \" + e.getMessage(), e);\n+             throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n+         }\n+         for (AuthzDecisionStatement auth : assertion.getSaml2().getAuthzDecisionStatements()) {\n+             if (StringUtils.equals(auth.getResource(), TEMP_RESOURCE_FOR_VALIDATION)) {\n+                 auth.setResource(StringUtils.EMPTY);\n+             }\n+         }\n+     }\n     }\n \n     /**\n@@ -167,16 +170,16 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      *\n      * @return the exchange auth framework validator suite\n      */\n+\n+\n     protected ValidatorSuite getExchangeAuthFrameworkValidatorSuite() {\n         ValidatorSuite specValidator = org.opensaml.Configuration.getValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n-\n         if (specValidator == null) {\n             QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n             specValidator = new ValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE);\n             specValidator.registerValidator(qName, new Saml2ExchangeAuthFrameworkValidator());\n             org.opensaml.Configuration.registerValidatorSuite(EXCHANGE_AUTH_FRWK_VALIDATOR_SUITE, specValidator);\n         }\n-\n         return specValidator;\n     }\n \n@@ -185,17 +188,19 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      *\n      * @return the saml2 spec validators\n      */\n+\n+\n     protected Collection<ValidatorSuite> getSaml2SpecValidators() {\n         try {\n-            Boolean allowNoSubjectAssertion = propertyAccessor.getPropertyBoolean(NhincConstants.GATEWAY_PROPERTY_FILE,\n-                    ALLOW_NO_SUBJECT_ASSERTION_PROP);\n-\n-            if (allowNoSubjectAssertion) {\n+            Boolean allowNoSubjectAssertion = propertyAccessor.getPropertyBoolean(NhincConstants.GATEWAY_PROPERTY_FILE, ALLOW_NO_SUBJECT_ASSERTION_PROP);\n+            if(allowNoSubjectAssertion) {\n                 return getSaml2AllowNoSubjectAssertionSpecValidators();\n-            } else {\n-                return getSaml2DefaultAssertionSpecValidators();\n             }\n \n+\n+else {\n+                return getSaml2DefaultAssertionSpecValidators();\n+            }\n         } catch (Exception e) {\n             LOG.warn(\"Failed to get SAML 2 assertion validator. \" + e.getMessage(), e);\n             return null;\n@@ -207,6 +212,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      *\n      * @return the saml2 allow no subject assertion spec validators\n      */\n+\n+\n     protected Collection<ValidatorSuite> getSaml2AllowNoSubjectAssertionSpecValidators() {\n         return Collections.singleton(getSaml2AllowNoSubjectAssertionSpecValidator());\n     }\n@@ -216,16 +223,16 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      *\n      * @return the saml2 allow no subject assertion spec validator\n      */\n+\n+\n     protected ValidatorSuite getSaml2AllowNoSubjectAssertionSpecValidator() {\n         ValidatorSuite specValidators = org.opensaml.Configuration.getValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n-\n         if (specValidators == null) {\n             QName qName = new QName(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\", \"saml2\");\n             specValidators = new ValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID);\n             specValidators.registerValidator(qName, new Saml2AllowNoSubjectAssertionSpecValidator());\n             org.opensaml.Configuration.registerValidatorSuite(ALLOW_NO_SUBJECT_ASSERTION_ID, specValidators);\n         }\n-\n         return specValidators;\n     }\n \n@@ -234,6 +241,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      *\n      * @return the saml2 assertion spec validator\n      */\n+\n+\n     protected Collection<ValidatorSuite> getSaml2DefaultAssertionSpecValidators() {\n         Collection<ValidatorSuite> suites = new HashSet<>();\n         suites.add(org.opensaml.Configuration.getValidatorSuite(\"saml2-core-spec-validator\"));\n@@ -247,9 +256,12 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      * @see org.apache.ws.security.validate.SamlAssertionValidator( org.apache.ws.security.validate.Credential,\n      * org.apache.ws.security.handler.RequestData)\n      */\n+\n+\n     @Override\n     public Credential validate(Credential credential, RequestData data) throws WSSecurityException {\n-        if (credential == null || credential.getAssertion() == null) {\n+        if (credential == null||\n+            credential.getAssertion() == null) {\n             throw new WSSecurityException(WSSecurityException.FAILURE, \"noCredential\");\n         }\n         AssertionWrapper assertion = credential.getAssertion();\n@@ -257,7 +269,7 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n         // Check HOK requirements\n         String confirmMethod = null;\n         List<String> methods = assertion.getConfirmationMethods();\n-        if (methods != null && methods.size() > 0) {\n+        if (methods != null && methods.size()> 0) {\n             confirmMethod = methods.get(0);\n         }\n         if (OpenSAMLUtil.isMethodHolderOfKey(confirmMethod)) {\n@@ -266,7 +278,8 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n                 throw new WSSecurityException(WSSecurityException.FAILURE, \"noKeyInSAMLToken\");\n             }\n             // The assertion must have been signed for HOK\n-            if (!assertion.isSigned()) {\n+            if (!\n+                    assertion.isSigned()) {\n                 LOG.debug(\"A holder-of-key assertion must be signed\");\n                 throw new WSSecurityException(WSSecurityException.FAILURE, \"invalidSAMLsecurity\");\n             }\n@@ -277,9 +290,7 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n \n         // Validate the assertion against schemas/profiles\n         validateAssertion(assertion);\n-\n         checkSignedAssertion(assertion, data);\n-\n         return credential;\n     }\n \n@@ -290,22 +301,24 @@ public class CONNECTSamlAssertionValidator extends SamlAssertionValidator {\n      * @param data the data\n      * @throws WSSecurityException the wS security exception\n      */\n-    protected void checkSignedAssertion(AssertionWrapper assertion, RequestData data) throws WSSecurityException {\n \n+\n+    protected void checkSignedAssertion(AssertionWrapper assertion, RequestData data) throws WSSecurityException {\n         SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n-        X509Certificate[] certs = samlKeyInfo.getCerts();\n+        X509Certificate [] certs = samlKeyInfo.getCerts();\n         PublicKey publicKey = samlKeyInfo.getPublicKey();\n-\n         try {\n             super.verifySignedAssertion(assertion, data);\n         } catch (WSSecurityException e) {\n-            if (certs == null && publicKey != null) {\n-                LOG.warn(\"Could not establish trust of the signature's public key because no matching public key \"\n-                        + \"exists in the truststore. Please see GATEWAY-3146 for more details.\");\n-            } else {\n+            if(certs == null && publicKey != null) {\n+                LOG.warn(\"Could not establish trust of the signature's public key because no matching public key \" + \"exists in the truststore. Please see GATEWAY-3146 for more details.\");\n+            }\n+\n+\n+            else {\n                 throw e;\n             }\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 133
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "package statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "30",
                    "column": "4",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/726/CONNECTSamlAssertionValidator.java\nindex fbb01a4441d..25b95e01ba2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/726/CONNECTSamlAssertionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/726/CONNECTSamlAssertionValidator.java\n@@ -24,7 +24,10 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-package gov.hhs.fha.nhinc.callback.cxf;\n+\n+package gov.hhs.fha.nhinc.callback.\n+\n+cxf ;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n import gov.hhs.fha.nhinc.properties.PropertyAccessor;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}