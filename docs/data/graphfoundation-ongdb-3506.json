{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3506",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3506/Mark.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3506/Mark.java\nindex 289b164550a..d9595749e44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3506/Mark.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3506/Mark.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import static java.lang.String.format;\n@@ -28,69 +29,69 @@ import static java.lang.String.format;\n  */\n public class Mark\n {\n-    public static final int END_OF_LINE_CHARACTER = -1;\n+  public static final int END_OF_LINE_CHARACTER = -1;\n \n-    private int startPosition;\n-    private int position;\n-    private int character;\n-    private boolean quoted;\n+  private int startPosition;\n+  private int position;\n+  private int character;\n+  private boolean quoted;\n \n-    /**\n-     * @param startPosition position of first character in value (inclusive).\n-     * @param position position of last character in value (exclusive).\n-     * @param character use {@code -1} to denote that the matching character was an end-of-line or end-of-file\n-     * @param quoted whether or not the original data was quoted.\n-     */\n-    void set( int startPosition, int position, int character, boolean quoted )\n-    {\n-        this.startPosition = startPosition;\n-        this.position = position;\n-        this.character = character;\n-        this.quoted = quoted;\n-    }\n+  /**\n+   * @param startPosition position of first character in value (inclusive).\n+   * @param position      position of last character in value (exclusive).\n+   * @param character     use {@code -1} to denote that the matching character was an end-of-line or end-of-file\n+   * @param quoted        whether or not the original data was quoted.\n+   */\n+  void set(int startPosition, int position, int character, boolean quoted)\n+  {\n+    this.startPosition = startPosition;\n+    this.position = position;\n+    this.character = character;\n+    this.quoted = quoted;\n+  }\n \n-    public int character()\n-    {\n-        assert !isEndOfLine();\n-        return character;\n-    }\n+  public int character()\n+  {\n+    assert !isEndOfLine();\n+    return character;\n+  }\n \n-    public boolean isEndOfLine()\n-    {\n-        return character == -1;\n-    }\n+  public boolean isEndOfLine()\n+  {\n+    return character == -1;\n+  }\n \n-    public boolean isQuoted()\n-    {\n-        return quoted;\n-    }\n+  public boolean isQuoted()\n+  {\n+    return quoted;\n+  }\n \n-    int position()\n+  int position()\n+  {\n+    if (position == -1)\n     {\n-        if ( position == -1 )\n-        {\n-            throw new IllegalStateException( \"No value to extract here\" );\n-        }\n-        return position;\n+      throw new IllegalStateException(\"No value to extract here\");\n     }\n+    return position;\n+  }\n \n-    int startPosition()\n+  int startPosition()\n+  {\n+    if (startPosition == -1)\n     {\n-        if ( startPosition == -1 )\n-        {\n-            throw new IllegalStateException( \"No value to extract here\" );\n-        }\n-        return startPosition;\n+      throw new IllegalStateException(\"No value to extract here\");\n     }\n+    return startPosition;\n+  }\n \n-    int length()\n-    {\n-        return position - startPosition;\n-    }\n+  int length()\n+  {\n+    return position - startPosition;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"Mark[from:%d, to:%d, qutoed:%b]\", startPosition, position, quoted);\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"Mark[from:%d, to:%d, qutoed:%b]\", startPosition, position, quoted);\n+  }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3506/Mark.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3506/Mark.java\nindex 289b164550a..6170f2a4cf5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3506/Mark.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3506/Mark.java\n@@ -71,7 +71,8 @@ public class Mark\n         {\n             throw new IllegalStateException( \"No value to extract here\" );\n         }\n-        return position;\n+\n+return position;\n     }\n \n     int startPosition()\n@@ -80,7 +81,8 @@ public class Mark\n         {\n             throw new IllegalStateException( \"No value to extract here\" );\n         }\n-        return startPosition;\n+\n+return startPosition;\n     }\n \n     int length()\n@@ -91,6 +93,6 @@ public class Mark\n     @Override\n     public String toString()\n     {\n-        return format( \"Mark[from:%d, to:%d, qutoed:%b]\", startPosition, position, quoted);\n+        return format( \"Mark[from:%d, to:%d, qutoed:%b]\", startPosition, position, quoted );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}