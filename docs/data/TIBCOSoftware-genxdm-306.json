{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "306",
    "information": {
        "errors": [
            {
                "line": "36",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    extends ConvertibleVariantExpr\n{\n\tprivate final QName name;\n\tprivate final VariantExpr[] args;\n\n\tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/306/ExtensionFunctionCallExpr.java\nindex 5e2e2b61a1e..151d98a17cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/306/ExtensionFunctionCallExpr.java\n@@ -33,7 +33,7 @@ import org.genxdm.xpath.v10.VariantExpr;\n final class ExtensionFunctionCallExpr \r\n     extends ConvertibleVariantExpr\r\n {\r\n-\tprivate final QName name;\r\n+private final QName name;\r\n \tprivate final VariantExpr[] args;\r\n \r\n \tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/306/ExtensionFunctionCallExpr.java\nindex 5e2e2b61a1e..156f5be0b65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/306/ExtensionFunctionCallExpr.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import java.lang.reflect.Array;\r\n@@ -30,27 +31,27 @@ import org.genxdm.xpath.v10.ExprException;\n import org.genxdm.xpath.v10.Variant;\r\n import org.genxdm.xpath.v10.VariantExpr;\r\n \r\n-final class ExtensionFunctionCallExpr \r\n-    extends ConvertibleVariantExpr\r\n-{\r\n-\tprivate final QName name;\r\n-\tprivate final VariantExpr[] args;\r\n-\r\n-\tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\r\n-\t{\r\n-\t\tsuper();\r\n-\t\tthis.name = name;\r\n-\t\tthis.args = args;\r\n-\t}\r\n-\r\n-\tpublic <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t{\r\n-\t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tfinal Variant<N>[] argValues = (Variant<N>[])Array.newInstance(Variant.class, args.length);\r\n-\t\tfor (int i = 0; i < args.length; i++)\r\n-\t\t{\r\n-\t\t\targValues[i] = args[i].evaluateAsVariant(model, contextNode, dynEnv);\r\n-\t\t}\r\n-\t\treturn dynEnv.getExtensionContext(name.getNamespaceURI()).call(name.getLocalPart(), contextNode, argValues);\r\n-\t}\r\n+final class ExtensionFunctionCallExpr\r\n+    extends ConvertibleVariantExpr {\r\n+    private final QName name;\r\n+\r\n+    private final VariantExpr[] args;\r\n+\r\n+    ExtensionFunctionCallExpr(final QName name, final VariantExpr[] args) {\r\n+        super();\r\n+        this.name = name;\r\n+        this.args = args;\r\n+    }\r\n+\r\n+    public <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode,\r\n+                                            final ExprContextDynamic<N> dynEnv)\r\n+        throws ExprException {\r\n+        @SuppressWarnings(\"unchecked\") final Variant<N>[] argValues =\r\n+            (Variant<N>[]) Array.newInstance(Variant.class, args.length);\r\n+        for (int i = 0; i < args.length; i++) {\r\n+            argValues[i] = args[i].evaluateAsVariant(model, contextNode, dynEnv);\r\n+        }\r\n+        return dynEnv.getExtensionContext(name.getNamespaceURI())\r\n+            .call(name.getLocalPart(), contextNode, argValues);\r\n+    }\r\n }\r\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/306/ExtensionFunctionCallExpr.java\nindex 5e2e2b61a1e..ee8300868fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/306/ExtensionFunctionCallExpr.java\n@@ -31,26 +31,26 @@ import org.genxdm.xpath.v10.Variant;\n import org.genxdm.xpath.v10.VariantExpr;\r\n \r\n final class ExtensionFunctionCallExpr \r\n-    extends ConvertibleVariantExpr\r\n-{\r\n-\tprivate final QName name;\r\n+    extends ConvertibleVariantExpr\n+{\n+    private final QName name;\r\n \tprivate final VariantExpr[] args;\r\n \r\n \tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\r\n-\t{\r\n-\t\tsuper();\r\n+\t{\n+    super();\r\n \t\tthis.name = name;\r\n-\t\tthis.args = args;\r\n-\t}\r\n+\t\tthis.args = args;\n+    }\r\n \r\n \tpublic <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t{\r\n-\t\t@SuppressWarnings(\"unchecked\")\r\n+\t{\n+    @SuppressWarnings(\"unchecked\")\r\n \t\tfinal Variant<N>[] argValues = (Variant<N>[])Array.newInstance(Variant.class, args.length);\r\n \t\tfor (int i = 0; i < args.length; i++)\r\n-\t\t{\r\n-\t\t\targValues[i] = args[i].evaluateAsVariant(model, contextNode, dynEnv);\r\n-\t\t}\r\n-\t\treturn dynEnv.getExtensionContext(name.getNamespaceURI()).call(name.getLocalPart(), contextNode, argValues);\r\n-\t}\r\n-}\r\n+\t\t{\n+    argValues[i] = args[i].evaluateAsVariant(model, contextNode, dynEnv);\n+    }\r\n+\t\treturn dynEnv.getExtensionContext(name.getNamespaceURI()).call(name.getLocalPart(), contextNode, argValues);\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/306/ExtensionFunctionCallExpr.java\nindex 5e2e2b61a1e..0f07dd63cf9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/306/ExtensionFunctionCallExpr.java\n@@ -18,39 +18,36 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import java.lang.reflect.Array;\r\n-\r\n-import javax.xml.namespace.QName;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.xpath.v10.ExprContextDynamic;\r\n-import org.genxdm.xpath.v10.ExprException;\r\n-import org.genxdm.xpath.v10.Variant;\r\n-import org.genxdm.xpath.v10.VariantExpr;\r\n-\r\n-final class ExtensionFunctionCallExpr \r\n-    extends ConvertibleVariantExpr\r\n-{\r\n-\tprivate final QName name;\r\n-\tprivate final VariantExpr[] args;\r\n-\r\n-\tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\r\n-\t{\r\n-\t\tsuper();\r\n-\t\tthis.name = name;\r\n-\t\tthis.args = args;\r\n-\t}\r\n-\r\n-\tpublic <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t{\r\n-\t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tfinal Variant<N>[] argValues = (Variant<N>[])Array.newInstance(Variant.class, args.length);\r\n-\t\tfor (int i = 0; i < args.length; i++)\r\n-\t\t{\r\n-\t\t\targValues[i] = args[i].evaluateAsVariant(model, contextNode, dynEnv);\r\n-\t\t}\r\n-\t\treturn dynEnv.getExtensionContext(name.getNamespaceURI()).call(name.getLocalPart(), contextNode, argValues);\r\n-\t}\r\n-}\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import java.lang.reflect.Array;\n+import javax.xml.namespace.QName;\n+import org.genxdm.Model;\n+import org.genxdm.xpath.v10.ExprContextDynamic;\n+import org.genxdm.xpath.v10.ExprException;\n+import org.genxdm.xpath.v10.Variant;\n+import org.genxdm.xpath.v10.VariantExpr;\n+\n+final class ExtensionFunctionCallExpr extends ConvertibleVariantExpr\n+{\n+    private final QName name;\n+    private final VariantExpr[] args;\n+\n+    ExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\n+    {\n+        super();\n+        this.name = name;\n+        this.args = args;\n+    }\n+\n+    public <N> Variant<N> evaluateAsVariant(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        final Variant<N>[] argValues = (Variant<N>[])Array.newInstance(Variant.class, args.length);\n+        for (int i = 0; i < args.length; i++)\n+        {\n+            argValues[i] = args[i].evaluateAsVariant(model, contextNode, dynEnv);\n+        }\n+        return dynEnv.getExtensionContext(name.getNamespaceURI()).call(name.getLocalPart(), contextNode, argValues);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/306/ExtensionFunctionCallExpr.java\nindex 5e2e2b61a1e..151d98a17cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/306/ExtensionFunctionCallExpr.java\n@@ -33,7 +33,7 @@ import org.genxdm.xpath.v10.VariantExpr;\n final class ExtensionFunctionCallExpr \r\n     extends ConvertibleVariantExpr\r\n {\r\n-\tprivate final QName name;\r\n+private final QName name;\r\n \tprivate final VariantExpr[] args;\r\n \r\n \tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/306/ExtensionFunctionCallExpr.java\nindex 5e2e2b61a1e..57da0ae3371 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/306/ExtensionFunctionCallExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/306/ExtensionFunctionCallExpr.java\n@@ -33,7 +33,7 @@ import org.genxdm.xpath.v10.VariantExpr;\n final class ExtensionFunctionCallExpr \r\n     extends ConvertibleVariantExpr\r\n {\r\n-\tprivate final QName name;\r\n+    private final QName name;\r\n \tprivate final VariantExpr[] args;\r\n \r\n \tExtensionFunctionCallExpr(final QName name, final VariantExpr[] args)\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}