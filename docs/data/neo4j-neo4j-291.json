{
    "project_name": "neo4j-neo4j",
    "error_id": "291",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/291/Version.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/291/Version.java\nindex 3aaf0c1d878..2d1dcadc529 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/291/Version.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/291/Version.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal;\n \n import java.util.regex.Matcher;\n@@ -32,12 +33,12 @@ public class Version\n     static final String CUSTOM_VERSION_SETTING = \"unsupported.neo4j.custom.version\";\n     private static final String DEFAULT_DEV_VERSION = \"dev\";\n     private static final String KERNEL_ARTIFACT_ID = \"neo4j-kernel\";\n-    private static final Version KERNEL_VERSION = new Version( KERNEL_ARTIFACT_ID, selectVersion() );\n+    private static final Version KERNEL_VERSION = new Version(KERNEL_ARTIFACT_ID, selectVersion());\n \n     static String selectVersion()\n     {\n-        var versionString = getProperty( CUSTOM_VERSION_SETTING, Version.class.getPackage().getImplementationVersion() );\n-        return defaultString( versionString, DEFAULT_DEV_VERSION );\n+        var versionString = getProperty(CUSTOM_VERSION_SETTING, Version.class.getPackage().getImplementationVersion());\n+        return defaultString(versionString, DEFAULT_DEV_VERSION);\n     }\n \n     private final String artifactId;\n@@ -64,24 +65,23 @@ public class Version\n     public String toString()\n     {\n         StringBuilder result = new StringBuilder();\n-        if ( title != null )\n+        if (title != null)\n         {\n-            result.append( title );\n-            if ( artifactId == null || !artifactId.equals( title ) )\n+            result.append(title);\n+            if (artifactId == null || !artifactId.equals(title))\n             {\n-                result.append( \" (\" ).append( artifactId ).append( ')' );\n+                result.append(\" (\").append(artifactId).append(')');\n             }\n-        }\n-        else\n+        } else\n         {\n-            result.append( requireNonNullElse( artifactId, \"Unknown Component\" ) );\n+            result.append(requireNonNullElse(artifactId, \"Unknown Component\"));\n         }\n-        result.append( \", \" );\n-        if ( title == null )\n+        result.append(\", \");\n+        if (title == null)\n         {\n-            result.append( \"unpackaged \" );\n+            result.append(\"unpackaged \");\n         }\n-        result.append( \"version: \" ).append( getVersion() );\n+        result.append(\"version: \").append(getVersion());\n         return result.toString();\n     }\n \n@@ -102,36 +102,36 @@ public class Version\n         return releaseVersion;\n     }\n \n-    protected Version( String artifactId, String version )\n+    protected Version(String artifactId, String version)\n     {\n-        requireNonNull( artifactId );\n-        requireNonNull( version );\n+        requireNonNull(artifactId);\n+        requireNonNull(version);\n         this.artifactId = artifactId;\n         this.title = artifactId;\n         this.version = version;\n-        this.releaseVersion = parseReleaseVersion( this.version );\n+        this.releaseVersion = parseReleaseVersion(this.version);\n     }\n \n     /**\n      * This reads out the user friendly part of the version, for public display.\n      */\n-    private static String parseReleaseVersion( String fullVersion )\n+    private static String parseReleaseVersion(String fullVersion)\n     {\n         // Generally, a version we extract from the jar manifest will look like:\n         //   1.2.3-M01,abcdef-dirty\n         // Parse out the first part of it:\n         Pattern pattern = Pattern.compile(\n-                \"(\\\\d+\" +                  // Major version\n-                \"\\\\.\\\\d+\" +                // Minor version\n-                \"(\\\\.\\\\d+)?\" +             // Optional patch version\n-                \"(-?[^,]+)?)\" +          // Optional marker, like M01, GA, SNAPSHOT - anything other than a comma\n-                \".*\"                       // Anything else, such as git revision\n+          \"(\\\\d+\" +                  // Major version\n+            \"\\\\.\\\\d+\" +                // Minor version\n+            \"(\\\\.\\\\d+)?\" +             // Optional patch version\n+            \"(-?[^,]+)?)\" +          // Optional marker, like M01, GA, SNAPSHOT - anything other than a comma\n+            \".*\"                       // Anything else, such as git revision\n         );\n \n-        Matcher matcher = pattern.matcher( fullVersion );\n-        if ( matcher.matches() )\n+        Matcher matcher = pattern.matcher(fullVersion);\n+        if (matcher.matches())\n         {\n-            return matcher.group( 1 );\n+            return matcher.group(1);\n         }\n \n         // If we don't recognize the version pattern, do the safe thing and keep it in full\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}