{
    "project_name": "moquette-io-moquette",
    "error_id": "48",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "warning",
                "message": "missing copyright header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "package io.moquette.broker;\n\nimport io.moquette.spi.impl.subscriptions.Topic;\nimport io.netty.handler.codec.mqtt.MqttPublishMessage;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/48/MemoryRetainedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/48/MemoryRetainedRepository.java\nindex bec21ebc32d..f7f83d3f09d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/48/MemoryRetainedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/48/MemoryRetainedRepository.java\n@@ -7,29 +7,29 @@ import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n /*\n-* In memory retained messages store\n-* */\n+ * In memory retained messages store\n+ * */\n final class MemoryRetainedRepository implements IRetainedRepository {\n \n-    private final ConcurrentMap<String, MqttPublishMessage> storage = new ConcurrentHashMap<>();\n+  private final ConcurrentMap<String, MqttPublishMessage> storage = new ConcurrentHashMap<>();\n \n-    @Override\n-    public void cleanRetained(Topic topic) {\n-        storage.remove(topic.toString());\n-    }\n+  @Override\n+  public void cleanRetained(Topic topic) {\n+    storage.remove(topic.toString());\n+  }\n \n-    @Override\n-    public void retain(Topic topic, MqttPublishMessage msg) {\n-        storage.put(topic.toString(), msg);\n-    }\n+  @Override\n+  public void retain(Topic topic, MqttPublishMessage msg) {\n+    storage.put(topic.toString(), msg);\n+  }\n \n-    @Override\n-    public boolean isEmtpy() {\n-        return storage.isEmpty();\n-    }\n+  @Override\n+  public boolean isEmtpy() {\n+    return storage.isEmpty();\n+  }\n \n-    @Override\n-    public MqttPublishMessage retainedOnTopic(String topic) {\n-        return storage.get(topic);\n-    }\n+  @Override\n+  public MqttPublishMessage retainedOnTopic(String topic) {\n+    return storage.get(topic);\n+  }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/48/MemoryRetainedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/48/MemoryRetainedRepository.java\nindex bec21ebc32d..451264c7436 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/48/MemoryRetainedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/48/MemoryRetainedRepository.java\n@@ -32,4 +32,4 @@ final class MemoryRetainedRepository implements IRetainedRepository {\n     public MqttPublishMessage retainedOnTopic(String topic) {\n         return storage.get(topic);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "two or more consecutive empty lines",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/48/MemoryRetainedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/48/MemoryRetainedRepository.java\nindex bec21ebc32d..4c00c542ec8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/48/MemoryRetainedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/48/MemoryRetainedRepository.java\n@@ -2,13 +2,14 @@ package io.moquette.broker;\n \n import io.moquette.spi.impl.subscriptions.Topic;\n import io.netty.handler.codec.mqtt.MqttPublishMessage;\n-\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n /*\n * In memory retained messages store\n * */\n+\n+\n final class MemoryRetainedRepository implements IRetainedRepository {\n \n     private final ConcurrentMap<String, MqttPublishMessage> storage = new ConcurrentHashMap<>();\n@@ -32,4 +33,4 @@ final class MemoryRetainedRepository implements IRetainedRepository {\n     public MqttPublishMessage retainedOnTopic(String topic) {\n         return storage.get(topic);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}