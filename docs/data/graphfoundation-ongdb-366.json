{
    "project_name": "graphfoundation-ongdb",
    "error_id": "366",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "117",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/366/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/366/Configuration.java\nindex 8e9c8554b5d..29f03903a87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/366/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/366/Configuration.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n /**\n@@ -24,133 +25,134 @@ package org.neo4j.csv.reader;\n  */\n public interface Configuration\n {\n-    /**\n-     * TODO: Our intention is to flip this to false (which means to comply with RFC4180) at some point\n-     * because of how it better complies with common expectancy of behavior. It may be least disruptive\n-     * to do this when changing major version of the product.\n-     */\n-    boolean DEFAULT_LEGACY_STYLE_QUOTING = true;\n-\n-    /**\n-     * Character to regard as quotes. Quoted values can contain newline characters and even delimiters.\n-     */\n-    char quotationCharacter();\n-\n-    /**\n-     * Data buffer size.\n-     */\n-    int bufferSize();\n-\n-    /**\n-     * Whether or not fields are allowed to have newline characters in them, i.e. span multiple lines.\n-     */\n-    boolean multilineFields();\n-\n-    /**\n-     * Whether or not strings should be trimmed for whitespaces.\n-     */\n-    boolean trimStrings();\n-\n-    /**\n-     * @return {@code true} for treating empty strings, i.e. {@code \"\"} as null, instead of an empty string.\n-     */\n-    boolean emptyQuotedStringsAsNull();\n-\n-    /**\n-     * Adds a default implementation returning {@link #DEFAULT_LEGACY_STYLE_QUOTING}, this to not requiring\n-     * any change to other classes using this interface.\n-     *\n-     * @return whether or not the parsing will interpret <code>\\\"</code> (see {@link #quotationCharacter()})\n-     * as an inner quote. Reason why this is configurable is that this interpretation conflicts with\n-     * \"standard\" RFC for CSV parsing, see https://tools.ietf.org/html/rfc4180. This also makes it impossible\n-     * to enter some combinations of characters, e.g. <code>\"\"\"abc\\\"\"\"</code>, when expecting <code>\"abc\\\"</code>.\n-     */\n-    default boolean legacyStyleQuoting()\n+  /**\n+   * TODO: Our intention is to flip this to false (which means to comply with RFC4180) at some point\n+   * because of how it better complies with common expectancy of behavior. It may be least disruptive\n+   * to do this when changing major version of the product.\n+   */\n+  boolean DEFAULT_LEGACY_STYLE_QUOTING = true;\n+\n+  /**\n+   * Character to regard as quotes. Quoted values can contain newline characters and even delimiters.\n+   */\n+  char quotationCharacter();\n+\n+  /**\n+   * Data buffer size.\n+   */\n+  int bufferSize();\n+\n+  /**\n+   * Whether or not fields are allowed to have newline characters in them, i.e. span multiple lines.\n+   */\n+  boolean multilineFields();\n+\n+  /**\n+   * Whether or not strings should be trimmed for whitespaces.\n+   */\n+  boolean trimStrings();\n+\n+  /**\n+   * @return {@code true} for treating empty strings, i.e. {@code \"\"} as null, instead of an empty string.\n+   */\n+  boolean emptyQuotedStringsAsNull();\n+\n+  /**\n+   * Adds a default implementation returning {@link #DEFAULT_LEGACY_STYLE_QUOTING}, this to not requiring\n+   * any change to other classes using this interface.\n+   *\n+   * @return whether or not the parsing will interpret <code>\\\"</code> (see {@link #quotationCharacter()})\n+   * as an inner quote. Reason why this is configurable is that this interpretation conflicts with\n+   * \"standard\" RFC for CSV parsing, see https://tools.ietf.org/html/rfc4180. This also makes it impossible\n+   * to enter some combinations of characters, e.g. <code>\"\"\"abc\\\"\"\"</code>, when expecting <code>\"abc\\\"</code>.\n+   */\n+  default boolean legacyStyleQuoting()\n+  {\n+    return DEFAULT_LEGACY_STYLE_QUOTING;\n+  }\n+\n+  int KB = 1024;\n+  int MB = KB * KB;\n+  int DEFAULT_BUFFER_SIZE_4MB = 4 * MB;\n+\n+  class Default implements Configuration\n+  {\n+    @Override\n+    public char quotationCharacter()\n+    {\n+      return '\"';\n+    }\n+\n+    @Override\n+    public int bufferSize()\n     {\n-        return DEFAULT_LEGACY_STYLE_QUOTING;\n+      return DEFAULT_BUFFER_SIZE_4MB;\n     }\n-    int KB = 1024;\n-    int MB = KB * KB;\n-    int DEFAULT_BUFFER_SIZE_4MB = 4 * MB;\n \n-    class Default implements Configuration\n+    @Override\n+    public boolean multilineFields()\n+    {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean emptyQuotedStringsAsNull()\n+    {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean trimStrings()\n+    {\n+      return false;\n+    }\n+  }\n+\n+  Configuration DEFAULT = new Default();\n+\n+  class Overridden implements Configuration\n+  {\n+    private final Configuration defaults;\n+\n+    public Overridden(Configuration defaults)\n     {\n-        @Override\n-        public char quotationCharacter()\n-        {\n-            return '\"';\n-        }\n-\n-        @Override\n-        public int bufferSize()\n-        {\n-            return DEFAULT_BUFFER_SIZE_4MB;\n-        }\n-\n-        @Override\n-        public boolean multilineFields()\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean emptyQuotedStringsAsNull()\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean trimStrings()\n-        {\n-            return false;\n-        }\n+      this.defaults = defaults;\n     }\n \n-    Configuration DEFAULT = new Default();\n+    @Override\n+    public char quotationCharacter()\n+    {\n+      return defaults.quotationCharacter();\n+    }\n+\n+    @Override\n+    public int bufferSize()\n+    {\n+      return defaults.bufferSize();\n+    }\n+\n+    @Override\n+    public boolean multilineFields()\n+    {\n+      return defaults.multilineFields();\n+    }\n+\n+    @Override\n+    public boolean emptyQuotedStringsAsNull()\n+    {\n+      return defaults.emptyQuotedStringsAsNull();\n+    }\n+\n+    @Override\n+    public boolean trimStrings()\n+    {\n+      return defaults.trimStrings();\n+    }\n \n-    class Overridden implements Configuration\n+    @Override\n+    public boolean legacyStyleQuoting()\n     {\n-        private final Configuration defaults;\n-\n-        public Overridden( Configuration defaults )\n-        {\n-            this.defaults = defaults;\n-        }\n-\n-        @Override\n-        public char quotationCharacter()\n-        {\n-            return defaults.quotationCharacter();\n-        }\n-\n-        @Override\n-        public int bufferSize()\n-        {\n-            return defaults.bufferSize();\n-        }\n-\n-        @Override\n-        public boolean multilineFields()\n-        {\n-            return defaults.multilineFields();\n-        }\n-\n-        @Override\n-        public boolean emptyQuotedStringsAsNull()\n-        {\n-            return defaults.emptyQuotedStringsAsNull();\n-        }\n-\n-        @Override\n-        public boolean trimStrings()\n-        {\n-            return defaults.trimStrings();\n-        }\n-\n-        @Override\n-        public boolean legacyStyleQuoting()\n-        {\n-            return defaults.legacyStyleQuoting();\n-        }\n+      return defaults.legacyStyleQuoting();\n     }\n+  }\n }\n",
            "diff_size": 194
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/366/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/366/Configuration.java\nindex 8e9c8554b5d..fbe04090daf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/366/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/366/Configuration.java\n@@ -153,4 +153,4 @@ public interface Configuration\n             return defaults.legacyStyleQuoting();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}