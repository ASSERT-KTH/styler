{
    "project_name": "EMResearch-EMB",
    "error_id": "105",
    "information": {
        "errors": [
            {
                "line": "103",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  }\n\n  /** The error in its context. See {@link #getContextOffset()} and {@link #getErrorLength()} to get the exact position. */\n  public String getContext() {\n    return context;\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/105/RemoteRuleMatch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/105/RemoteRuleMatch.java\nindex 33549d068a7..ee018f310d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/105/RemoteRuleMatch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/105/RemoteRuleMatch.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.server;\n \n import org.languagetool.Experimental;\n@@ -28,156 +29,179 @@ import java.util.Optional;\n \n /**\n  * A potential error as returned by the HTTP API of LanguageTool.\n+ *\n  * @since 4.0\n  */\n class RemoteRuleMatch {\n \n-  private final String ruleId;\n-  private final String msg;\n-  private final String context;\n-  private final int contextOffset;\n-  private final int offset;\n-  private final int errorLength;\n-  private final int estimatedContextForSureMatch;\n-\n-  private String subId;\n-  private String shortMsg;\n-  private List<String> replacements;\n-  private String url;\n-  private String category;\n-  private String categoryId;\n-  private String locQualityIssueType;\n-\n-  RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength) {\n-    this(ruleId, msg, context, contextOffset, offset, errorLength, 0);\n-  }\n-  \n-  RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength,\n-                  int estimatedContextForSureMatch) {\n-    this.ruleId = Objects.requireNonNull(ruleId);\n-    this.msg = Objects.requireNonNull(msg);\n-    this.context = Objects.requireNonNull(context);\n-    this.contextOffset = contextOffset;\n-    this.offset = offset;\n-    this.errorLength = errorLength;\n-    this.estimatedContextForSureMatch = estimatedContextForSureMatch;\n-  }\n-\n-  boolean isTouchedByOneOf(List<RuleMatch> matches) {\n-    for (RuleMatch match : matches) {\n-      if (offset <= match.getToPos() && offset + errorLength >= match.getFromPos()) {\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n-\n-  /** Unique (per language) identifier for the error. */\n-  public String getRuleId() {\n-    return ruleId;\n-  }\n-\n-  /** Optional sub id (rule groups have a sub id for each rule). */\n-  public Optional<String> getRuleSubId() {\n-    return Optional.ofNullable(subId);\n-  }\n-\n-  /** A text describing the error to the user. */\n-  public String getMessage() {\n-    return msg;\n-  }\n-\n-  /** Optional short message describing the error. */\n-  public Optional<String> getShortMessage() {\n-    return Optional.ofNullable(shortMsg);\n-  }\n-\n-  /**\n-   * Potential corrections for the error. Note that corrections might be wrong and\n-   * they are not necessarily ordered by quality.\n-   */\n-  public Optional<List<String>> getReplacements() {\n-    return Optional.ofNullable(replacements);\n-  }\n-\n-  /** The error in its context. See {@link #getContextOffset()} and {@link #getErrorLength()} to get the exact position. */\n-  public String getContext() {\n-    return context;\n-  }\n-  \n-  /** The character position of the error start inside the result of {@link #getContext()}. */\n-  public int getContextOffset() {\n-    return contextOffset;\n-  }\n-  \n-  /** The character position where the error starts. */\n-  public int getErrorOffset() {\n-    return offset;\n-  }\n-  \n-  /** The length of the error in characters. */\n-  public int getErrorLength() {\n-    return errorLength;\n-  }\n-\n-  /** URL with a more detailed explanation of the error. */\n-  public Optional<String> getUrl() {\n-    return Optional.ofNullable(url);\n-  }\n-\n-  /** The error's category. */\n-  public Optional<String> getCategory() {\n-    return Optional.of(category);\n-  }\n-\n-  /** The id of the error's category. */\n-  public Optional<String> getCategoryId() {\n-    return Optional.of(categoryId);\n-  }\n-\n-  public Optional<String> getLocQualityIssueType() {\n-    return Optional.ofNullable(locQualityIssueType);\n-  }\n-\n-  //\n-  // non-public setters\n-  //\n-  \n-  void setRuleSubId(String subId) {\n-    this.subId = subId;\n-  }\n-\n-  void setShortMsg(String shortMsg) {\n-    this.shortMsg = shortMsg;\n-  }\n-\n-  void setReplacements(List<String> replacements) {\n-    this.replacements = Collections.unmodifiableList(replacements);\n-  }\n-\n-  void setUrl(String url) {\n-    this.url = url;\n-  }\n-\n-  void setCategory(String category) {\n-    this.category = category;\n-  }\n-\n-  void setCategoryId(String categoryId) {\n-    this.categoryId = categoryId;\n-  }\n-\n-  void setLocQualityIssueType(String locQualityIssueType) {\n-    this.locQualityIssueType = locQualityIssueType;\n-  }\n-\n-  int estimatedContextForSureMatch() {\n-    return estimatedContextForSureMatch;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return ruleId + \"@\" + offset + \"-\" + (offset + errorLength);\n-  }\n+    private final String ruleId;\n+    private final String msg;\n+    private final String context;\n+    private final int contextOffset;\n+    private final int offset;\n+    private final int errorLength;\n+    private final int estimatedContextForSureMatch;\n+\n+    private String subId;\n+    private String shortMsg;\n+    private List<String> replacements;\n+    private String url;\n+    private String category;\n+    private String categoryId;\n+    private String locQualityIssueType;\n+\n+    RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength) {\n+        this(ruleId, msg, context, contextOffset, offset, errorLength, 0);\n+    }\n+\n+    RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength,\n+                    int estimatedContextForSureMatch) {\n+        this.ruleId = Objects.requireNonNull(ruleId);\n+        this.msg = Objects.requireNonNull(msg);\n+        this.context = Objects.requireNonNull(context);\n+        this.contextOffset = contextOffset;\n+        this.offset = offset;\n+        this.errorLength = errorLength;\n+        this.estimatedContextForSureMatch = estimatedContextForSureMatch;\n+    }\n+\n+    boolean isTouchedByOneOf(List<RuleMatch> matches) {\n+        for (RuleMatch match : matches) {\n+            if (offset <= match.getToPos() && offset + errorLength >= match.getFromPos()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Unique (per language) identifier for the error.\n+     */\n+    public String getRuleId() {\n+        return ruleId;\n+    }\n+\n+    /**\n+     * Optional sub id (rule groups have a sub id for each rule).\n+     */\n+    public Optional<String> getRuleSubId() {\n+        return Optional.ofNullable(subId);\n+    }\n+\n+    /**\n+     * A text describing the error to the user.\n+     */\n+    public String getMessage() {\n+        return msg;\n+    }\n+\n+    /**\n+     * Optional short message describing the error.\n+     */\n+    public Optional<String> getShortMessage() {\n+        return Optional.ofNullable(shortMsg);\n+    }\n+\n+    /**\n+     * Potential corrections for the error. Note that corrections might be wrong and\n+     * they are not necessarily ordered by quality.\n+     */\n+    public Optional<List<String>> getReplacements() {\n+        return Optional.ofNullable(replacements);\n+    }\n+\n+    /**\n+     * The error in its context. See {@link #getContextOffset()} and {@link #getErrorLength()} to get the exact position.\n+     */\n+    public String getContext() {\n+        return context;\n+    }\n+\n+    /**\n+     * The character position of the error start inside the result of {@link #getContext()}.\n+     */\n+    public int getContextOffset() {\n+        return contextOffset;\n+    }\n+\n+    /**\n+     * The character position where the error starts.\n+     */\n+    public int getErrorOffset() {\n+        return offset;\n+    }\n+\n+    /**\n+     * The length of the error in characters.\n+     */\n+    public int getErrorLength() {\n+        return errorLength;\n+    }\n+\n+    /**\n+     * URL with a more detailed explanation of the error.\n+     */\n+    public Optional<String> getUrl() {\n+        return Optional.ofNullable(url);\n+    }\n+\n+    /**\n+     * The error's category.\n+     */\n+    public Optional<String> getCategory() {\n+        return Optional.of(category);\n+    }\n+\n+    /**\n+     * The id of the error's category.\n+     */\n+    public Optional<String> getCategoryId() {\n+        return Optional.of(categoryId);\n+    }\n+\n+    public Optional<String> getLocQualityIssueType() {\n+        return Optional.ofNullable(locQualityIssueType);\n+    }\n+\n+    //\n+    // non-public setters\n+    //\n+\n+    void setRuleSubId(String subId) {\n+        this.subId = subId;\n+    }\n+\n+    void setShortMsg(String shortMsg) {\n+        this.shortMsg = shortMsg;\n+    }\n+\n+    void setReplacements(List<String> replacements) {\n+        this.replacements = Collections.unmodifiableList(replacements);\n+    }\n+\n+    void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    void setCategory(String category) {\n+        this.category = category;\n+    }\n+\n+    void setCategoryId(String categoryId) {\n+        this.categoryId = categoryId;\n+    }\n+\n+    void setLocQualityIssueType(String locQualityIssueType) {\n+        this.locQualityIssueType = locQualityIssueType;\n+    }\n+\n+    int estimatedContextForSureMatch() {\n+        return estimatedContextForSureMatch;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ruleId + \"@\" + offset + \"-\" + (offset + errorLength);\n+    }\n \n }\n",
            "diff_size": 171
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/105/RemoteRuleMatch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/105/RemoteRuleMatch.java\nindex 33549d068a7..f1a1fb7ea99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/105/RemoteRuleMatch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/105/RemoteRuleMatch.java\n@@ -20,7 +20,6 @@ package org.languagetool.server;\n \n import org.languagetool.Experimental;\n import org.languagetool.rules.RuleMatch;\n-\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n@@ -30,30 +29,35 @@ import java.util.Optional;\n  * A potential error as returned by the HTTP API of LanguageTool.\n  * @since 4.0\n  */\n+\n+\n class RemoteRuleMatch {\n \n-  private final String ruleId;\n-  private final String msg;\n-  private final String context;\n-  private final int contextOffset;\n-  private final int offset;\n-  private final int errorLength;\n-  private final int estimatedContextForSureMatch;\n-\n-  private String subId;\n-  private String shortMsg;\n-  private List<String> replacements;\n-  private String url;\n-  private String category;\n-  private String categoryId;\n-  private String locQualityIssueType;\n-\n-  RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength) {\n+    private final String ruleId;\n+    private final String msg;\n+    private final String context;\n+    private final int contextOffset;\n+    private final int offset;\n+    private final int errorLength;\n+    private final int estimatedContextForSureMatch;\n+    private String subId;\n+    private String shortMsg;\n+    private List<String> replacements;\n+    private String url;\n+    private String category;\n+    private String categoryId;\n+    private String locQualityIssueType;\n+\n+    RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength) {\n     this(ruleId, msg, context, contextOffset, offset, errorLength, 0);\n-  }\n-  \n-  RemoteRuleMatch(String ruleId, String msg, String context, int contextOffset, int offset, int errorLength,\n-                  int estimatedContextForSureMatch) {\n+    }\n+\n+    RemoteRuleMatch(String ruleId,\n+                    String msg,\n+                    String context,\n+                    int contextOffset,\n+                    int offset,\n+                    int errorLength, int estimatedContextForSureMatch) {\n     this.ruleId = Objects.requireNonNull(ruleId);\n     this.msg = Objects.requireNonNull(msg);\n     this.context = Objects.requireNonNull(context);\n@@ -61,123 +65,136 @@ class RemoteRuleMatch {\n     this.offset = offset;\n     this.errorLength = errorLength;\n     this.estimatedContextForSureMatch = estimatedContextForSureMatch;\n-  }\n+    }\n \n-  boolean isTouchedByOneOf(List<RuleMatch> matches) {\n+    boolean isTouchedByOneOf(List<RuleMatch> matches) {\n     for (RuleMatch match : matches) {\n-      if (offset <= match.getToPos() && offset + errorLength >= match.getFromPos()) {\n-        return true;\n-      }\n+        if (offset <= match.getToPos() && offset + errorLength >= match.getFromPos()) {\n+            return true;\n+        }\n     }\n     return false;\n-  }\n+    }\n \n   /** Unique (per language) identifier for the error. */\n-  public String getRuleId() {\n-    return ruleId;\n-  }\n+\n+    public String getRuleId() {\n+        return ruleId;\n+    }\n \n   /** Optional sub id (rule groups have a sub id for each rule). */\n-  public Optional<String> getRuleSubId() {\n-    return Optional.ofNullable(subId);\n-  }\n+\n+    public Optional<String> getRuleSubId() {\n+        return Optional.ofNullable(subId);\n+    }\n \n   /** A text describing the error to the user. */\n-  public String getMessage() {\n-    return msg;\n-  }\n+\n+    public String getMessage() {\n+        return msg;\n+    }\n \n   /** Optional short message describing the error. */\n-  public Optional<String> getShortMessage() {\n-    return Optional.ofNullable(shortMsg);\n-  }\n+\n+    public Optional<String> getShortMessage() {\n+        return Optional.ofNullable(shortMsg);\n+    }\n \n   /**\n    * Potential corrections for the error. Note that corrections might be wrong and\n    * they are not necessarily ordered by quality.\n    */\n-  public Optional<List<String>> getReplacements() {\n-    return Optional.ofNullable(replacements);\n-  }\n+\n+    public Optional<List<String>> getReplacements() {\n+        return Optional.ofNullable(replacements);\n+    }\n \n   /** The error in its context. See {@link #getContextOffset()} and {@link #getErrorLength()} to get the exact position. */\n-  public String getContext() {\n-    return context;\n-  }\n+\n+    public String getContext() {\n+        return context;\n+    }\n   \n   /** The character position of the error start inside the result of {@link #getContext()}. */\n-  public int getContextOffset() {\n-    return contextOffset;\n-  }\n+\n+    public int getContextOffset() {\n+        return contextOffset;\n+    }\n   \n   /** The character position where the error starts. */\n-  public int getErrorOffset() {\n-    return offset;\n-  }\n+\n+    public int getErrorOffset() {\n+        return offset;\n+    }\n   \n   /** The length of the error in characters. */\n-  public int getErrorLength() {\n-    return errorLength;\n-  }\n+\n+    public int getErrorLength() {\n+        return errorLength;\n+    }\n \n   /** URL with a more detailed explanation of the error. */\n-  public Optional<String> getUrl() {\n-    return Optional.ofNullable(url);\n-  }\n+\n+    public Optional<String> getUrl() {\n+        return Optional.ofNullable(url);\n+    }\n \n   /** The error's category. */\n-  public Optional<String> getCategory() {\n-    return Optional.of(category);\n-  }\n+\n+    public Optional<String> getCategory() {\n+        return Optional.of(category);\n+    }\n \n   /** The id of the error's category. */\n-  public Optional<String> getCategoryId() {\n-    return Optional.of(categoryId);\n-  }\n \n-  public Optional<String> getLocQualityIssueType() {\n-    return Optional.ofNullable(locQualityIssueType);\n-  }\n+    public Optional<String> getCategoryId() {\n+        return Optional.of(categoryId);\n+    }\n+\n+    public Optional<String> getLocQualityIssueType() {\n+        return Optional.ofNullable(locQualityIssueType);\n+    }\n \n   //\n   // non-public setters\n   //\n-  \n-  void setRuleSubId(String subId) {\n-    this.subId = subId;\n-  }\n \n-  void setShortMsg(String shortMsg) {\n-    this.shortMsg = shortMsg;\n-  }\n+    void setRuleSubId(String subId) {\n+        this.subId = subId;\n+    }\n \n-  void setReplacements(List<String> replacements) {\n-    this.replacements = Collections.unmodifiableList(replacements);\n-  }\n+    void setShortMsg(String shortMsg) {\n+        this.shortMsg = shortMsg;\n+    }\n \n-  void setUrl(String url) {\n-    this.url = url;\n-  }\n+    void setReplacements(List<String> replacements) {\n+        this.replacements = Collections.unmodifiableList(replacements);\n+    }\n \n-  void setCategory(String category) {\n-    this.category = category;\n-  }\n+    void setUrl(String url) {\n+        this.url = url;\n+    }\n \n-  void setCategoryId(String categoryId) {\n-    this.categoryId = categoryId;\n-  }\n+    void setCategory(String category) {\n+        this.category = category;\n+    }\n \n-  void setLocQualityIssueType(String locQualityIssueType) {\n-    this.locQualityIssueType = locQualityIssueType;\n-  }\n+    void setCategoryId(String categoryId) {\n+        this.categoryId = categoryId;\n+    }\n \n-  int estimatedContextForSureMatch() {\n-    return estimatedContextForSureMatch;\n-  }\n+    void setLocQualityIssueType(String locQualityIssueType) {\n+        this.locQualityIssueType = locQualityIssueType;\n+    }\n \n-  @Override\n-  public String toString() {\n-    return ruleId + \"@\" + offset + \"-\" + (offset + errorLength);\n-  }\n+    int estimatedContextForSureMatch() {\n+    return estimatedContextForSureMatch;\n+    }\n \n-}\n+    @Override\n+    public String toString() {\n+        return ruleId + \"@\"\n+        + offset + \"-\"\n+        + (offset + errorLength);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/105/RemoteRuleMatch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/105/RemoteRuleMatch.java\nindex 33549d068a7..a5f528d50ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/105/RemoteRuleMatch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/105/RemoteRuleMatch.java\n@@ -100,8 +100,7 @@ class RemoteRuleMatch {\n     return Optional.ofNullable(replacements);\n   }\n \n-  /** The error in its context. See {@link #getContextOffset()} and {@link #getErrorLength()} to get the exact position. */\n-  public String getContext() {\n+  /** The error in its context. See {@link #getContextOffset()} and {@link #getErrorLength()} to get the exact position. */ public String getContext() {\n     return context;\n   }\n   \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}