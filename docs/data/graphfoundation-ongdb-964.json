{
    "project_name": "graphfoundation-ongdb",
    "error_id": "964",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "144",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "325",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "325",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "330",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "340",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/964/Client.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/964/Client.java\nindex a410e4e582b..a53a7d925a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/964/Client.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/964/Client.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.com;\n \n import org.jboss.netty.bootstrap.ClientBootstrap;\n@@ -71,394 +72,386 @@ import static org.neo4j.helpers.NamedThreadFactory.daemon;\n  */\n public abstract class Client<T> extends LifecycleAdapter implements ChannelPipelineFactory\n {\n-    // Max number of concurrent channels that may exist. Needs to be high because we\n-    // don't want to run into that limit, it will make some #acquire calls block and\n-    // gets disastrous if that thread is holding monitors that is needed to communicate\n-    // with the server in some way.\n-    public static final int DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT = 20;\n-    public static final int DEFAULT_READ_RESPONSE_TIMEOUT_SECONDS = 20;\n-\n-    private static final String BLOCKING_CHANNEL_HANDLER_NAME = \"blockingHandler\";\n-    private static final String MONITORING_CHANNEL_HANDLER_NAME = \"monitor\";\n-\n-    private ClientBootstrap bootstrap;\n-    private final SocketAddress destination;\n-    private final SocketAddress origin;\n-    private final Log msgLog;\n-    private ResourcePool<ChannelContext> channelPool;\n-    private final Protocol protocol;\n-    private final int frameLength;\n-    private final long readTimeout;\n-    private final int maxUnusedChannels;\n-    private final StoreId storeId;\n-    private ResourceReleaser resourcePoolReleaser;\n-    private ComExceptionHandler comExceptionHandler;\n-    private final ResponseUnpacker responseUnpacker;\n-    private final ByteCounterMonitor byteCounterMonitor;\n-    private final RequestMonitor requestMonitor;\n-    private final LogEntryReader<ReadableClosablePositionAwareChannel> entryReader;\n-\n-    public Client( String destinationHostNameOrIp, int destinationPort, String originHostNameOrIp,\n-            LogProvider logProvider, StoreId storeId, int frameLength,\n-            long readTimeout, int maxConcurrentChannels, int chunkSize,\n-            ResponseUnpacker responseUnpacker,\n-            ByteCounterMonitor byteCounterMonitor,\n-            RequestMonitor requestMonitor,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> entryReader )\n+  // Max number of concurrent channels that may exist. Needs to be high because we\n+  // don't want to run into that limit, it will make some #acquire calls block and\n+  // gets disastrous if that thread is holding monitors that is needed to communicate\n+  // with the server in some way.\n+  public static final int DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT = 20;\n+  public static final int DEFAULT_READ_RESPONSE_TIMEOUT_SECONDS = 20;\n+\n+  private static final String BLOCKING_CHANNEL_HANDLER_NAME = \"blockingHandler\";\n+  private static final String MONITORING_CHANNEL_HANDLER_NAME = \"monitor\";\n+\n+  private ClientBootstrap bootstrap;\n+  private final SocketAddress destination;\n+  private final SocketAddress origin;\n+  private final Log msgLog;\n+  private ResourcePool<ChannelContext> channelPool;\n+  private final Protocol protocol;\n+  private final int frameLength;\n+  private final long readTimeout;\n+  private final int maxUnusedChannels;\n+  private final StoreId storeId;\n+  private ResourceReleaser resourcePoolReleaser;\n+  private ComExceptionHandler comExceptionHandler;\n+  private final ResponseUnpacker responseUnpacker;\n+  private final ByteCounterMonitor byteCounterMonitor;\n+  private final RequestMonitor requestMonitor;\n+  private final LogEntryReader<ReadableClosablePositionAwareChannel> entryReader;\n+\n+  public Client(String destinationHostNameOrIp, int destinationPort, String originHostNameOrIp,\n+                LogProvider logProvider, StoreId storeId, int frameLength,\n+                long readTimeout, int maxConcurrentChannels, int chunkSize,\n+                ResponseUnpacker responseUnpacker,\n+                ByteCounterMonitor byteCounterMonitor,\n+                RequestMonitor requestMonitor,\n+                LogEntryReader<ReadableClosablePositionAwareChannel> entryReader)\n+  {\n+    this.entryReader = entryReader;\n+    assert byteCounterMonitor != null;\n+    assert requestMonitor != null;\n+\n+    this.byteCounterMonitor = byteCounterMonitor;\n+    this.requestMonitor = requestMonitor;\n+    assertChunkSizeIsWithinFrameSize(chunkSize, frameLength);\n+\n+    this.msgLog = logProvider.getLog(getClass());\n+    this.storeId = storeId;\n+    this.frameLength = frameLength;\n+    this.readTimeout = readTimeout;\n+    // ResourcePool no longer controls max concurrent channels. Use this value for the pool size\n+    this.maxUnusedChannels = maxConcurrentChannels;\n+    this.comExceptionHandler = getNoOpComExceptionHandler();\n+\n+    if (destinationHostNameOrIp.equals(\"0.0.0.0\"))\n     {\n-        this.entryReader = entryReader;\n-        assert byteCounterMonitor != null;\n-        assert requestMonitor != null;\n-\n-        this.byteCounterMonitor = byteCounterMonitor;\n-        this.requestMonitor = requestMonitor;\n-        assertChunkSizeIsWithinFrameSize( chunkSize, frameLength );\n-\n-        this.msgLog = logProvider.getLog( getClass() );\n-        this.storeId = storeId;\n-        this.frameLength = frameLength;\n-        this.readTimeout = readTimeout;\n-        // ResourcePool no longer controls max concurrent channels. Use this value for the pool size\n-        this.maxUnusedChannels = maxConcurrentChannels;\n-        this.comExceptionHandler = getNoOpComExceptionHandler();\n-\n-        if ( destinationHostNameOrIp.equals( \"0.0.0.0\" ) )\n-        {\n-            // So it turns out that on Windows, connecting to 0.0.0.0 when specifying\n-            // an origin address will not succeed. But since we know we are\n-            // connecting to ourselves, and that we are listening on everything,\n-            // replacing with localhost is the proper thing to do.\n-            this.destination = new InetSocketAddress( getLocalAddress(), destinationPort );\n-        }\n-        else\n-        {\n-            // An explicit destination address is always correct\n-            this.destination = new InetSocketAddress( destinationHostNameOrIp, destinationPort );\n-        }\n-\n-        if ( originHostNameOrIp == null || originHostNameOrIp.equals( \"0.0.0.0\" ) )\n-        {\n-            origin = null;\n-        }\n-        else\n-        {\n-            origin = new InetSocketAddress( originHostNameOrIp, 0 );\n-        }\n-\n-        ProtocolVersion protocolVersion = getProtocolVersion();\n-        this.protocol = createProtocol( chunkSize, protocolVersion.getApplicationProtocol() );\n-        this.responseUnpacker = responseUnpacker;\n-\n-        msgLog.info( getClass().getSimpleName() + \" communication channel created towards \" + destination );\n-    }\n-\n-    private String getLocalAddress()\n+      // So it turns out that on Windows, connecting to 0.0.0.0 when specifying\n+      // an origin address will not succeed. But since we know we are\n+      // connecting to ourselves, and that we are listening on everything,\n+      // replacing with localhost is the proper thing to do.\n+      this.destination = new InetSocketAddress(getLocalAddress(), destinationPort);\n+    } else\n     {\n-        try\n-        {\n-            // Null corresponds to localhost\n-            return InetAddress.getByName( null ).getHostAddress();\n-        }\n-        catch ( UnknownHostException e )\n-        {\n-            // Fetching the localhost address won't throw this exception, so this should never happen, but if it\n-            // were, then the computer doesn't even have a loopback interface, so crash now rather than later\n-            throw new AssertionError( e );\n-        }\n+      // An explicit destination address is always correct\n+      this.destination = new InetSocketAddress(destinationHostNameOrIp, destinationPort);\n     }\n \n-    private ComExceptionHandler getNoOpComExceptionHandler()\n+    if (originHostNameOrIp == null || originHostNameOrIp.equals(\"0.0.0.0\"))\n     {\n-        return exception ->\n-        {\n-            if ( ComException.TRACE_HA_CONNECTIVITY )\n-            {\n-                String noOpComExceptionHandler = \"NoOpComExceptionHandler\";\n-                //noinspection ThrowableResultOfMethodCallIgnored\n-                traceComException( exception, noOpComExceptionHandler );\n-            }\n-        };\n-    }\n-\n-    private ComException traceComException( ComException exception, String tracePoint )\n+      origin = null;\n+    } else\n     {\n-        return exception.traceComException( msgLog, tracePoint );\n+      origin = new InetSocketAddress(originHostNameOrIp, 0);\n     }\n \n-    protected Protocol createProtocol( int chunkSize, byte applicationProtocolVersion )\n-    {\n-        return new Protocol320( chunkSize, applicationProtocolVersion, getInternalProtocolVersion() );\n-    }\n+    ProtocolVersion protocolVersion = getProtocolVersion();\n+    this.protocol = createProtocol(chunkSize, protocolVersion.getApplicationProtocol());\n+    this.responseUnpacker = responseUnpacker;\n \n-    public abstract ProtocolVersion getProtocolVersion();\n+    msgLog.info(getClass().getSimpleName() + \" communication channel created towards \" + destination);\n+  }\n \n-    @Override\n-    public void start()\n+  private String getLocalAddress()\n+  {\n+    try\n     {\n-        bootstrap = new ClientBootstrap( new NioClientSocketChannelFactory(\n-                newCachedThreadPool( daemon( getClass().getSimpleName() + \"-boss@\" + destination ) ),\n-                newCachedThreadPool( daemon( getClass().getSimpleName() + \"-worker@\" + destination ) ) ) );\n-        bootstrap.setPipelineFactory( this );\n-\n-        channelPool = new ResourcePool<ChannelContext>( maxUnusedChannels,\n-                new ResourcePool.CheckStrategy.TimeoutCheckStrategy( DEFAULT_CHECK_INTERVAL, Clocks.systemClock() ),\n-                new LoggingResourcePoolMonitor( msgLog ) )\n-        {\n-            @Override\n-            protected ChannelContext create()\n-            {\n-                msgLog.info( threadInfo() + \"Trying to open a new channel from \" + origin + \" to \" + destination );\n-                // We must specify the origin address in case the server has multiple IPs per interface\n-                ChannelFuture channelFuture = bootstrap.connect( destination, origin );\n-                channelFuture.awaitUninterruptibly( 5, TimeUnit.SECONDS );\n-                if ( channelFuture.isSuccess() )\n-                {\n-                    msgLog.info( threadInfo() + \"Opened a new channel from \" +\n-                            channelFuture.getChannel().getLocalAddress() + \" to \" +\n-                            channelFuture.getChannel().getRemoteAddress() );\n-\n-                    return new ChannelContext( channelFuture.getChannel(), ChannelBuffers.dynamicBuffer(),\n-                            ByteBuffer.allocate( 1024 * 1024 ) );\n-                }\n-\n-                Throwable cause = channelFuture.getCause();\n-                String msg = Client.this.getClass().getSimpleName() + \" could not connect from \" + origin + \" to \" +\n-                        destination;\n-                msgLog.debug( msg );\n-                throw traceComException( new ComException( msg, cause ), \"Client.start\" );\n-            }\n-\n-            @Override\n-            protected boolean isAlive( ChannelContext context )\n-            {\n-                return context.channel().isConnected();\n-            }\n-\n-            @Override\n-            protected void dispose( ChannelContext context )\n-            {\n-                Channel channel = context.channel();\n-                if ( channel.isConnected() )\n-                {\n-                    msgLog.info( threadInfo() + \"Closing: \" + context + \". \" +\n-                            \"Channel pool size is now \" + currentSize() );\n-                    channel.close();\n-                }\n-            }\n-\n-            private String threadInfo()\n-            {\n-                return \"Thread[\" + Thread.currentThread().getId() + \", \" + Thread.currentThread().getName() + \"] \";\n-            }\n-        };\n-        /*\n-         * This is here to couple the channel releasing to Response.close() itself and not\n-         * to TransactionStream.close() as it is implemented here. The reason is that a Response\n-         * that is returned without a TransactionStream will still hold the channel and should\n-         * release it eventually. Also, logically, closing the channel is not dependent on the\n-         * TransactionStream.\n-         */\n-        resourcePoolReleaser = () ->\n-        {\n-            if ( channelPool != null )\n-            {\n-                channelPool.release();\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public void stop()\n+      // Null corresponds to localhost\n+      return InetAddress.getByName(null).getHostAddress();\n+    } catch (UnknownHostException e)\n     {\n-        if ( channelPool != null )\n-        {\n-            channelPool.close( true );\n-            bootstrap.releaseExternalResources();\n-            channelPool = null;\n-        }\n-\n-        comExceptionHandler = getNoOpComExceptionHandler();\n-        msgLog.info( toString() + \" shutdown\" );\n+      // Fetching the localhost address won't throw this exception, so this should never happen, but if it\n+      // were, then the computer doesn't even have a loopback interface, so crash now rather than later\n+      throw new AssertionError(e);\n     }\n+  }\n \n-    protected <R> Response<R> sendRequest( RequestType type, RequestContext context,\n-            Serializer serializer, Deserializer<R> deserializer )\n+  private ComExceptionHandler getNoOpComExceptionHandler()\n+  {\n+    return exception ->\n     {\n-        return sendRequest( type, context, serializer, deserializer, null, NO_OP_TX_HANDLER );\n-    }\n-\n-    protected <R> Response<R> sendRequest( RequestType type, RequestContext context,\n-            Serializer serializer, Deserializer<R> deserializer,\n-            StoreId specificStoreId, TxHandler txHandler )\n+      if (ComException.TRACE_HA_CONNECTIVITY)\n+      {\n+        String noOpComExceptionHandler = \"NoOpComExceptionHandler\";\n+        //noinspection ThrowableResultOfMethodCallIgnored\n+        traceComException(exception, noOpComExceptionHandler);\n+      }\n+    };\n+  }\n+\n+  private ComException traceComException(ComException exception, String tracePoint)\n+  {\n+    return exception.traceComException(msgLog, tracePoint);\n+  }\n+\n+  protected Protocol createProtocol(int chunkSize, byte applicationProtocolVersion)\n+  {\n+    return new Protocol320(chunkSize, applicationProtocolVersion, getInternalProtocolVersion());\n+  }\n+\n+  public abstract ProtocolVersion getProtocolVersion();\n+\n+  @Override\n+  public void start()\n+  {\n+    bootstrap = new ClientBootstrap(new NioClientSocketChannelFactory(\n+        newCachedThreadPool(daemon(getClass().getSimpleName() + \"-boss@\" + destination)),\n+        newCachedThreadPool(daemon(getClass().getSimpleName() + \"-worker@\" + destination))));\n+    bootstrap.setPipelineFactory(this);\n+\n+    channelPool = new ResourcePool<ChannelContext>(maxUnusedChannels,\n+        new ResourcePool.CheckStrategy.TimeoutCheckStrategy(DEFAULT_CHECK_INTERVAL, Clocks.systemClock()),\n+        new LoggingResourcePoolMonitor(msgLog))\n     {\n-        ChannelContext channelContext = acquireChannelContext( type );\n-\n-        Throwable failure = null;\n-        try\n-        {\n-            requestMonitor.beginRequest( channelContext.channel().getRemoteAddress(), type, context );\n-\n-            // Request\n-            protocol.serializeRequest( channelContext.channel(), channelContext.output(), type, context, serializer );\n-\n-            // Response\n-            Response<R> response = protocol.deserializeResponse( extractBlockingReadHandler( channelContext ),\n-                    channelContext.input(), getReadTimeout( type, readTimeout ), deserializer, resourcePoolReleaser,\n-                    entryReader );\n-\n-            if ( type.responseShouldBeUnpacked() )\n-            {\n-                responseUnpacker.unpackResponse( response, txHandler );\n-            }\n-\n-            if ( shouldCheckStoreId( type ) )\n-            {\n-                // specificStoreId is there as a workaround for then the graphDb isn't initialized yet\n-                if ( specificStoreId != null )\n-                {\n-                    assertCorrectStoreId( response.getStoreId(), specificStoreId );\n-                }\n-                else\n-                {\n-                    assertCorrectStoreId( response.getStoreId(), storeId );\n-                }\n-            }\n-\n-            return response;\n-        }\n-        catch ( ComException e )\n+      @Override\n+      protected ChannelContext create()\n+      {\n+        msgLog.info(threadInfo() + \"Trying to open a new channel from \" + origin + \" to \" + destination);\n+        // We must specify the origin address in case the server has multiple IPs per interface\n+        ChannelFuture channelFuture = bootstrap.connect(destination, origin);\n+        channelFuture.awaitUninterruptibly(5, TimeUnit.SECONDS);\n+        if (channelFuture.isSuccess())\n         {\n-            failure = e;\n-            comExceptionHandler.handle( e );\n-            throw traceComException( e, \"Client.sendRequest\" );\n-        }\n-        catch ( Throwable e )\n-        {\n-            failure = e;\n-            throwIfUnchecked( e );\n-            throw new RuntimeException( e );\n+          msgLog.info(threadInfo() + \"Opened a new channel from \" +\n+              channelFuture.getChannel().getLocalAddress() + \" to \" +\n+              channelFuture.getChannel().getRemoteAddress());\n+\n+          return new ChannelContext(channelFuture.getChannel(), ChannelBuffers.dynamicBuffer(),\n+              ByteBuffer.allocate(1024 * 1024));\n         }\n-        finally\n+\n+        Throwable cause = channelFuture.getCause();\n+        String msg = Client.this.getClass().getSimpleName() + \" could not connect from \" + origin + \" to \" +\n+            destination;\n+        msgLog.debug(msg);\n+        throw traceComException(new ComException(msg, cause), \"Client.start\");\n+      }\n+\n+      @Override\n+      protected boolean isAlive(ChannelContext context)\n+      {\n+        return context.channel().isConnected();\n+      }\n+\n+      @Override\n+      protected void dispose(ChannelContext context)\n+      {\n+        Channel channel = context.channel();\n+        if (channel.isConnected())\n         {\n-            /*\n-             * Otherwise the user must call response.close() to prevent resource leaks.\n-             */\n-            if ( failure != null )\n-            {\n-                dispose( channelContext );\n-            }\n-            requestMonitor.endRequest( failure );\n+          msgLog.info(threadInfo() + \"Closing: \" + context + \". \" +\n+              \"Channel pool size is now \" + currentSize());\n+          channel.close();\n         }\n-    }\n-\n-    protected long getReadTimeout( RequestType type, long readTimeout )\n+      }\n+\n+      private String threadInfo()\n+      {\n+        return \"Thread[\" + Thread.currentThread().getId() + \", \" + Thread.currentThread().getName() + \"] \";\n+      }\n+    };\n+    /*\n+     * This is here to couple the channel releasing to Response.close() itself and not\n+     * to TransactionStream.close() as it is implemented here. The reason is that a Response\n+     * that is returned without a TransactionStream will still hold the channel and should\n+     * release it eventually. Also, logically, closing the channel is not dependent on the\n+     * TransactionStream.\n+     */\n+    resourcePoolReleaser = () ->\n     {\n-        return readTimeout;\n-    }\n-\n-    protected boolean shouldCheckStoreId( RequestType type )\n+      if (channelPool != null)\n+      {\n+        channelPool.release();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    if (channelPool != null)\n     {\n-        return true;\n+      channelPool.close(true);\n+      bootstrap.releaseExternalResources();\n+      channelPool = null;\n     }\n \n-    protected StoreId getStoreId()\n-    {\n-        return storeId;\n-    }\n+    comExceptionHandler = getNoOpComExceptionHandler();\n+    msgLog.info(toString() + \" shutdown\");\n+  }\n \n-    private void assertCorrectStoreId( StoreId storeId, StoreId myStoreId )\n-    {\n-        if ( !myStoreId.equals( storeId ) )\n-        {\n-            throw new MismatchingStoreIdException( myStoreId, storeId );\n-        }\n-    }\n+  protected <R> Response<R> sendRequest(RequestType type, RequestContext context,\n+                                        Serializer serializer, Deserializer<R> deserializer)\n+  {\n+    return sendRequest(type, context, serializer, deserializer, null, NO_OP_TX_HANDLER);\n+  }\n \n-    private ChannelContext acquireChannelContext( RequestType type )\n+  protected <R> Response<R> sendRequest(RequestType type, RequestContext context,\n+                                        Serializer serializer, Deserializer<R> deserializer,\n+                                        StoreId specificStoreId, TxHandler txHandler)\n+  {\n+    ChannelContext channelContext = acquireChannelContext(type);\n+\n+    Throwable failure = null;\n+    try\n     {\n-        if ( channelPool == null )\n-        {\n-            throw new ComException( String.format( \"Client for %s is stopped\", destination.toString() ) );\n-        }\n+      requestMonitor.beginRequest(channelContext.channel().getRemoteAddress(), type, context);\n \n-        // Calling acquire is dangerous since it may be a blocking call... and if this\n-        // thread holds a lock which others may want to be able to communicate with\n-        // the server things go stiff.\n-        ChannelContext result = channelPool.acquire();\n-        if ( result == null )\n-        {\n-            msgLog.error( \"Unable to acquire new channel for \" + type );\n-            throw traceComException(\n-                    new ComException( \"Unable to acquire new channel for \" + type ),\n-                    \"Client.acquireChannelContext\" );\n-        }\n-        return result;\n-    }\n+      // Request\n+      protocol.serializeRequest(channelContext.channel(), channelContext.output(), type, context, serializer);\n \n-    private void dispose( ChannelContext channelContext )\n-    {\n-        channelContext.channel().close().awaitUninterruptibly();\n-        if ( channelPool != null )\n+      // Response\n+      Response<R> response = protocol.deserializeResponse(extractBlockingReadHandler(channelContext),\n+          channelContext.input(), getReadTimeout(type, readTimeout), deserializer, resourcePoolReleaser,\n+          entryReader);\n+\n+      if (type.responseShouldBeUnpacked())\n+      {\n+        responseUnpacker.unpackResponse(response, txHandler);\n+      }\n+\n+      if (shouldCheckStoreId(type))\n+      {\n+        // specificStoreId is there as a workaround for then the graphDb isn't initialized yet\n+        if (specificStoreId != null)\n         {\n-            channelPool.release();\n+          assertCorrectStoreId(response.getStoreId(), specificStoreId);\n+        } else\n+        {\n+          assertCorrectStoreId(response.getStoreId(), storeId);\n         }\n-    }\n+      }\n \n-    @Override\n-    public ChannelPipeline getPipeline()\n+      return response;\n+    } catch (ComException e)\n+    {\n+      failure = e;\n+      comExceptionHandler.handle(e);\n+      throw traceComException(e, \"Client.sendRequest\");\n+    } catch (Throwable e)\n+    {\n+      failure = e;\n+      throwIfUnchecked(e);\n+      throw new RuntimeException(e);\n+    } finally\n     {\n-        ChannelPipeline pipeline = Channels.pipeline();\n-        pipeline.addLast( MONITORING_CHANNEL_HANDLER_NAME, new MonitorChannelHandler( byteCounterMonitor ) );\n-        addLengthFieldPipes( pipeline, frameLength );\n-        BlockingReadHandler<ChannelBuffer> reader =\n-                new BlockingReadHandler<>( new ArrayBlockingQueue<>( 100, false ) );\n-        pipeline.addLast( BLOCKING_CHANNEL_HANDLER_NAME, reader );\n-        return pipeline;\n+      /*\n+       * Otherwise the user must call response.close() to prevent resource leaks.\n+       */\n+      if (failure != null)\n+      {\n+        dispose(channelContext);\n+      }\n+      requestMonitor.endRequest(failure);\n     }\n-\n-    public void setComExceptionHandler( ComExceptionHandler handler )\n+  }\n+\n+  protected long getReadTimeout(RequestType type, long readTimeout)\n+  {\n+    return readTimeout;\n+  }\n+\n+  protected boolean shouldCheckStoreId(RequestType type)\n+  {\n+    return true;\n+  }\n+\n+  protected StoreId getStoreId()\n+  {\n+    return storeId;\n+  }\n+\n+  private void assertCorrectStoreId(StoreId storeId, StoreId myStoreId)\n+  {\n+    if (!myStoreId.equals(storeId))\n     {\n-        comExceptionHandler = (handler == null) ? getNoOpComExceptionHandler() : handler;\n+      throw new MismatchingStoreIdException(myStoreId, storeId);\n     }\n+  }\n \n-    protected byte getInternalProtocolVersion()\n+  private ChannelContext acquireChannelContext(RequestType type)\n+  {\n+    if (channelPool == null)\n     {\n-        return Server.INTERNAL_PROTOCOL_VERSION;\n+      throw new ComException(String.format(\"Client for %s is stopped\", destination.toString()));\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private static BlockingReadHandler<ChannelBuffer> extractBlockingReadHandler( ChannelContext channelContext )\n+    // Calling acquire is dangerous since it may be a blocking call... and if this\n+    // thread holds a lock which others may want to be able to communicate with\n+    // the server things go stiff.\n+    ChannelContext result = channelPool.acquire();\n+    if (result == null)\n     {\n-        ChannelPipeline pipeline = channelContext.channel().getPipeline();\n-        return (BlockingReadHandler<ChannelBuffer>) pipeline.get( BLOCKING_CHANNEL_HANDLER_NAME );\n+      msgLog.error(\"Unable to acquire new channel for \" + type);\n+      throw traceComException(\n+          new ComException(\"Unable to acquire new channel for \" + type),\n+          \"Client.acquireChannelContext\");\n     }\n+    return result;\n+  }\n \n-    protected static String beginningOfBufferAsHexString( ChannelBuffer buffer, int maxBytesToPrint )\n+  private void dispose(ChannelContext channelContext)\n+  {\n+    channelContext.channel().close().awaitUninterruptibly();\n+    if (channelPool != null)\n     {\n-        // read buffer from pos 0 - writeIndex\n-        int prevIndex = buffer.readerIndex();\n-        buffer.readerIndex( 0 );\n-        try\n-        {\n-            ByteArrayOutputStream byteArrayStream = new ByteArrayOutputStream( buffer.readableBytes() );\n-            PrintStream stream = new PrintStream( byteArrayStream );\n-            HexPrinter printer = new HexPrinter( stream ).withLineNumberDigits( 4 );\n-            for ( int i = 0; buffer.readable() && i < maxBytesToPrint; i++ )\n-            {\n-                printer.append( buffer.readByte() );\n-            }\n-            stream.flush();\n-            return byteArrayStream.toString();\n-        }\n-        finally\n-        {\n-            buffer.readerIndex( prevIndex );\n-        }\n+      channelPool.release();\n     }\n-\n-    @Override\n-    public String toString()\n+  }\n+\n+  @Override\n+  public ChannelPipeline getPipeline()\n+  {\n+    ChannelPipeline pipeline = Channels.pipeline();\n+    pipeline.addLast(MONITORING_CHANNEL_HANDLER_NAME, new MonitorChannelHandler(byteCounterMonitor));\n+    addLengthFieldPipes(pipeline, frameLength);\n+    BlockingReadHandler<ChannelBuffer> reader =\n+        new BlockingReadHandler<>(new ArrayBlockingQueue<>(100, false));\n+    pipeline.addLast(BLOCKING_CHANNEL_HANDLER_NAME, reader);\n+    return pipeline;\n+  }\n+\n+  public void setComExceptionHandler(ComExceptionHandler handler)\n+  {\n+    comExceptionHandler = (handler == null) ? getNoOpComExceptionHandler() : handler;\n+  }\n+\n+  protected byte getInternalProtocolVersion()\n+  {\n+    return Server.INTERNAL_PROTOCOL_VERSION;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static BlockingReadHandler<ChannelBuffer> extractBlockingReadHandler(ChannelContext channelContext)\n+  {\n+    ChannelPipeline pipeline = channelContext.channel().getPipeline();\n+    return (BlockingReadHandler<ChannelBuffer>) pipeline.get(BLOCKING_CHANNEL_HANDLER_NAME);\n+  }\n+\n+  protected static String beginningOfBufferAsHexString(ChannelBuffer buffer, int maxBytesToPrint)\n+  {\n+    // read buffer from pos 0 - writeIndex\n+    int prevIndex = buffer.readerIndex();\n+    buffer.readerIndex(0);\n+    try\n     {\n-        return getClass().getSimpleName() + \"[\" + destination + \"]\";\n+      ByteArrayOutputStream byteArrayStream = new ByteArrayOutputStream(buffer.readableBytes());\n+      PrintStream stream = new PrintStream(byteArrayStream);\n+      HexPrinter printer = new HexPrinter(stream).withLineNumberDigits(4);\n+      for (int i = 0; buffer.readable() && i < maxBytesToPrint; i++)\n+      {\n+        printer.append(buffer.readByte());\n+      }\n+      stream.flush();\n+      return byteArrayStream.toString();\n+    } finally\n+    {\n+      buffer.readerIndex(prevIndex);\n     }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[\" + destination + \"]\";\n+  }\n }\n",
            "diff_size": 545
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}