{
    "project_name": "CESNET-perun",
    "error_id": "173",
    "information": {
        "errors": [
            {
                "line": "81",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n\t/**\n\t * \tGets the propagation type for this instance.\n\t *\n\t *  @return The propagation type, either \"PARALLEL\", \"SERIAL\" or \"DUMMY\"\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/173/Destination.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/173/Destination.java\nindex 3d36b5639af..3031ab343f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/173/Destination.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/173/Destination.java\n@@ -7,207 +7,225 @@ package cz.metacentrum.perun.core.api;\n  */\n public class Destination extends Auditable implements Comparable<PerunBean> {\n \n-\tpublic final static String DESTINATIONHOSTTYPE = \"host\";\n-\tpublic final static String DESTINATIONEMAILTYPE = \"email\";\n-\tpublic final static String DESTINATIONSEMAILTYPE = \"semail\";\n-\tpublic final static String DESTINATIONURLTYPE = \"url\";\n-\tpublic final static String DESTINATIONUSERHOSTTYPE = \"user@host\";\n-\tpublic final static String DESTINATIONUSERHOSTPORTTYPE = \"user@host:port\";\n-\tpublic final static String DESTINATIONSERVICESPECIFICTYPE = \"service-specific\";\n-\tpublic final static String DESTINATIONWINDOWS = \"user@host-windows\";\n-\tpublic final static String DESTINATIONWINDOWSPROXY = \"host-windows-proxy\";\n-\n-\tpublic static final String PROPAGATIONTYPE_PARALLEL = \"PARALLEL\";\n-\tpublic static final String PROPAGATIONTYPE_SERIAL = \"SERIAL\";\n-\tpublic static final String PROPAGATIONTYPE_DUMMY = \"DUMMY\";\n-\n-\tprivate String destination;\n-\tprivate String type;\n-\tprivate String propagationType = PROPAGATIONTYPE_PARALLEL;\n-\n-\tpublic Destination() {\n-\t\tsuper();\n-\t}\n-\n-\tpublic Destination(int id, String destination){\n-\t\tsuper(id);\n-\t\tthis.destination = destination;\n-\t}\n-\n-\tpublic Destination(int id, String destination, String type) {\n-\t\tthis(id, destination);\n-\t\tthis.type = type;\n-\t}\n-\n-\tpublic Destination(int id, String destination, String type, String propagationType) {\n-\t\tthis(id, destination, type);\n-\t\tthis.propagationType = propagationType;\n-\t}\n-\n-\tpublic Destination(int id, String destination, String type, String createdAt, String createdBy, String modifiedAt, String modifiedBy, Integer createdByUid, Integer modifiedByUid) {\n-\t\tsuper(id, createdAt, createdBy, modifiedAt, modifiedBy, createdByUid, modifiedByUid);\n-\t\tthis.destination = destination;\n-\t\tthis.type = type;\n-\t}\n-\n-\t/**\n-\t * Gets the destination for this instance.\n-\t *\n-\t * @return The name.\n-\t */\n-\tpublic String getDestination() {\n-\t\treturn this.destination;\n-\t}\n-\n-\t/**\n-\t * Sets the destination for this instance.\n-\t *\n-\t * @param destination The destination.\n-\t */\n-\tpublic void setDestination(String destination) {\n-\t\tthis.destination = destination;\n-\t}\n-\n-\t/**\n-\t * Gets the type for this instance.\n-\t *\n-\t * @return The type.\n-\t */\n-\tpublic String getType() {\n-\t\treturn this.type;\n-\t}\n-\n-\t/**\n-\t * \tGets the propagation type for this instance.\n-\t *\n-\t *  @return The propagation type, either \"PARALLEL\", \"SERIAL\" or \"DUMMY\"\n-\t */\n-\tpublic String getPropagationType() {\n-\t\treturn this.propagationType;\n-\t}\n-\n-\t/**\n-\t * Gets the hostname from destination\n-\t * e.g. if destination is type user@host then return host\n-\t * e.g. if destination is type user@host:port then return host\n-\t * e.g. if destination is type user@host-windows then return host-windows\n-\t * if destination is other type then these three, return destination without changes\n-\t *\n-\t * if there is no chars @ and :, return not changed type\n-\t * if type is null, return this destination without changes\n-\t * if destination null, return destination without changes (null)\n-\t *\n-\t * @return host from destination if possible to separate, in other case return destination without changes\n-\t */\n-\tpublic String getHostNameFromDestination() {\n-\t\tif(this.destination == null) return this.destination;\n-\t\tif(this.type == null) return this.destination;\n-\n-\t\tif(this.type.equals(DESTINATIONUSERHOSTPORTTYPE) || this.type.equals(DESTINATIONUSERHOSTTYPE) || this.type.equals(DESTINATIONWINDOWS)) {\n-\t\t\tint startIndex = this.destination.indexOf('@');\n-\t\t\tint endIndex = this.destination.indexOf(':');\n-\t\t\tif(startIndex == -1) return this.destination;\n-\t\t\tif(endIndex == -1) endIndex = this.destination.length();\n-\n-\t\t\tString hostname = this.destination.substring(startIndex, endIndex);\n-\t\t\treturn hostname;\n-\t\t} else return this.destination;\n-\t}\n-\n-\t/**\n-\t * Sets the type for this instance.\n-\t *\n-\t * @param type The type.\n-\t */\n-\tpublic void setType(String type) {\n-\t\tthis.type = type;\n-\t}\n-\n-\t/**\n-\t * Sets the propagation type for this instance.\n-\t *\n-\t * @param type The propagation type.\n-\t */\n-\tpublic void setPropagationType(String type) {\n-\t\tthis.propagationType = type;\n-\t}\n-\n-\t@Override\n-\tpublic String serializeToString() {\n-\t\tStringBuilder str = new StringBuilder();\n-\n-\t\treturn str.append(this.getClass().getSimpleName()).append(\":[\").append(\n-\t\t\t\"id=<\").append(getId()).append(\">\").append(\n-\t\t\t\", destination=<\").append(getDestination() == null ? \"\\\\0\" : BeansUtils.createEscaping(getDestination())).append(\">\").append(\n-\t\t\t\", type=<\").append(getType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getType())).append(\">\").append(\n-\t\t\t\", propagationtype=<\").append(getPropagationType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getPropagationType())).append(\">\").append(\n-\t\t\t']').toString();\n-\t}\n-\n-\tpublic String toString() {\n-\t\tStringBuilder str = new StringBuilder();\n-\n-\t\treturn str.append(getClass().getSimpleName()).append(\":[\"\n-\t\t\t).append(\"id='\").append(getId()\n-\t\t\t).append(\"', destination='\").append(destination\n-\t\t\t).append(\"', type='\").append(type\n-\t\t\t).append(\"', propagationtype='\").append(propagationType\n-\t\t\t).append(\"']\").toString();\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\tfinal int prime = 31;\n-\t\tint result = 1;\n-\t\tresult = prime * result + ((type == null) ? 0 : type.hashCode());\n-\t\tresult = prime * result + getId();\n-\t\tresult = prime * result + ((destination == null) ? 0 : destination.hashCode());\n-\t\treturn result;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\tif (this == obj) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (obj == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (getClass() != obj.getClass()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tDestination other = (Destination) obj;\n-\t\tif (type == null) {\n-\t\t\tif (other.type != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t} else if (!type.equals(other.type)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (getId() != other.getId()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (destination == null) {\n-\t\t\tif (other.destination != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t} else if (!destination.equals(other.destination)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic int compareTo(PerunBean perunBean) {\n-\t\tif(perunBean == null) throw new NullPointerException(\"PerunBean to compare with is null.\");\n-\t\tif(perunBean instanceof Destination) {\n-\t\t\tDestination destination = (Destination) perunBean;\n-\t\t\tif (this.getDestination() == null && destination.getDestination() != null) return -1;\n-\t\t\tif (destination.getDestination() == null && this.getDestination() != null) return 1;\n-\t\t\tif (this.getDestination() == null && destination.getDestination() == null) return 0;\n-\t\t\treturn this.getDestination().compareToIgnoreCase(destination.getDestination());\n-\t\t} else {\n-\t\t\treturn (this.getId() - perunBean.getId());\n-\t\t}\n-\t}\n+    public final static String DESTINATIONHOSTTYPE = \"host\";\n+    public final static String DESTINATIONEMAILTYPE = \"email\";\n+    public final static String DESTINATIONSEMAILTYPE = \"semail\";\n+    public final static String DESTINATIONURLTYPE = \"url\";\n+    public final static String DESTINATIONUSERHOSTTYPE = \"user@host\";\n+    public final static String DESTINATIONUSERHOSTPORTTYPE = \"user@host:port\";\n+    public final static String DESTINATIONSERVICESPECIFICTYPE = \"service-specific\";\n+    public final static String DESTINATIONWINDOWS = \"user@host-windows\";\n+    public final static String DESTINATIONWINDOWSPROXY = \"host-windows-proxy\";\n+\n+    public static final String PROPAGATIONTYPE_PARALLEL = \"PARALLEL\";\n+    public static final String PROPAGATIONTYPE_SERIAL = \"SERIAL\";\n+    public static final String PROPAGATIONTYPE_DUMMY = \"DUMMY\";\n+\n+    private String destination;\n+    private String type;\n+    private String propagationType = PROPAGATIONTYPE_PARALLEL;\n+\n+    public Destination() {\n+        super();\n+    }\n+\n+    public Destination(int id, String destination) {\n+        super(id);\n+        this.destination = destination;\n+    }\n+\n+    public Destination(int id, String destination, String type) {\n+        this(id, destination);\n+        this.type = type;\n+    }\n+\n+    public Destination(int id, String destination, String type, String propagationType) {\n+        this(id, destination, type);\n+        this.propagationType = propagationType;\n+    }\n+\n+    public Destination(int id, String destination, String type, String createdAt, String createdBy, String modifiedAt, String modifiedBy, Integer createdByUid, Integer modifiedByUid) {\n+        super(id, createdAt, createdBy, modifiedAt, modifiedBy, createdByUid, modifiedByUid);\n+        this.destination = destination;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the destination for this instance.\n+     *\n+     * @return The name.\n+     */\n+    public String getDestination() {\n+        return this.destination;\n+    }\n+\n+    /**\n+     * Sets the destination for this instance.\n+     *\n+     * @param destination The destination.\n+     */\n+    public void setDestination(String destination) {\n+        this.destination = destination;\n+    }\n+\n+    /**\n+     * Gets the type for this instance.\n+     *\n+     * @return The type.\n+     */\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    /**\n+     * Gets the propagation type for this instance.\n+     *\n+     * @return The propagation type, either \"PARALLEL\", \"SERIAL\" or \"DUMMY\"\n+     */\n+    public String getPropagationType() {\n+        return this.propagationType;\n+    }\n+\n+    /**\n+     * Gets the hostname from destination\n+     * e.g. if destination is type user@host then return host\n+     * e.g. if destination is type user@host:port then return host\n+     * e.g. if destination is type user@host-windows then return host-windows\n+     * if destination is other type then these three, return destination without changes\n+     * <p>\n+     * if there is no chars @ and :, return not changed type\n+     * if type is null, return this destination without changes\n+     * if destination null, return destination without changes (null)\n+     *\n+     * @return host from destination if possible to separate, in other case return destination without changes\n+     */\n+    public String getHostNameFromDestination() {\n+        if (this.destination == null) {\n+            return this.destination;\n+        }\n+        if (this.type == null) {\n+            return this.destination;\n+        }\n+\n+        if (this.type.equals(DESTINATIONUSERHOSTPORTTYPE) || this.type.equals(DESTINATIONUSERHOSTTYPE) || this.type.equals(DESTINATIONWINDOWS)) {\n+            int startIndex = this.destination.indexOf('@');\n+            int endIndex = this.destination.indexOf(':');\n+            if (startIndex == -1) {\n+                return this.destination;\n+            }\n+            if (endIndex == -1) {\n+                endIndex = this.destination.length();\n+            }\n+\n+            String hostname = this.destination.substring(startIndex, endIndex);\n+            return hostname;\n+        } else {\n+            return this.destination;\n+        }\n+    }\n+\n+    /**\n+     * Sets the type for this instance.\n+     *\n+     * @param type The type.\n+     */\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Sets the propagation type for this instance.\n+     *\n+     * @param type The propagation type.\n+     */\n+    public void setPropagationType(String type) {\n+        this.propagationType = type;\n+    }\n+\n+    @Override\n+    public String serializeToString() {\n+        StringBuilder str = new StringBuilder();\n+\n+        return str.append(this.getClass().getSimpleName()).append(\":[\").append(\n+                \"id=<\").append(getId()).append(\">\").append(\n+                \", destination=<\").append(getDestination() == null ? \"\\\\0\" : BeansUtils.createEscaping(getDestination())).append(\">\").append(\n+                \", type=<\").append(getType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getType())).append(\">\").append(\n+                \", propagationtype=<\").append(getPropagationType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getPropagationType())).append(\">\").append(\n+                ']').toString();\n+    }\n+\n+    public String toString() {\n+        StringBuilder str = new StringBuilder();\n+\n+        return str.append(getClass().getSimpleName()).append(\":[\"\n+        ).append(\"id='\").append(getId()\n+        ).append(\"', destination='\").append(destination\n+        ).append(\"', type='\").append(type\n+        ).append(\"', propagationtype='\").append(propagationType\n+        ).append(\"']\").toString();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((type == null) ? 0 : type.hashCode());\n+        result = prime * result + getId();\n+        result = prime * result + ((destination == null) ? 0 : destination.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        Destination other = (Destination) obj;\n+        if (type == null) {\n+            if (other.type != null) {\n+                return false;\n+            }\n+        } else if (!type.equals(other.type)) {\n+            return false;\n+        }\n+        if (getId() != other.getId()) {\n+            return false;\n+        }\n+        if (destination == null) {\n+            if (other.destination != null) {\n+                return false;\n+            }\n+        } else if (!destination.equals(other.destination)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int compareTo(PerunBean perunBean) {\n+        if (perunBean == null) {\n+            throw new NullPointerException(\"PerunBean to compare with is null.\");\n+        }\n+        if (perunBean instanceof Destination) {\n+            Destination destination = (Destination) perunBean;\n+            if (this.getDestination() == null && destination.getDestination() != null) {\n+                return -1;\n+            }\n+            if (destination.getDestination() == null && this.getDestination() != null) {\n+                return 1;\n+            }\n+            if (this.getDestination() == null && destination.getDestination() == null) {\n+                return 0;\n+            }\n+            return this.getDestination().compareToIgnoreCase(destination.getDestination());\n+        } else {\n+            return (this.getId() - perunBean.getId());\n+        }\n+    }\n }\n",
            "diff_size": 221
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/173/Destination.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/173/Destination.java\nindex 3d36b5639af..46a09b5f08f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/173/Destination.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/173/Destination.java\n@@ -5,209 +5,221 @@ package cz.metacentrum.perun.core.api;\n  *\n  * @author Slavek Licehammer\n  */\n+\n+\n public class Destination extends Auditable implements Comparable<PerunBean> {\n+ public final static String DESTINATIONHOSTTYPE = \"host\";\n+\n+ public final static String DESTINATIONEMAILTYPE = \"email\";\n+\n+ public final static String DESTINATIONSEMAILTYPE = \"semail\";\n+\n+ public final static String DESTINATIONURLTYPE = \"url\";\n+\n+ public final static String DESTINATIONUSERHOSTTYPE = \"user@host\";\n \n-\tpublic final static String DESTINATIONHOSTTYPE = \"host\";\n-\tpublic final static String DESTINATIONEMAILTYPE = \"email\";\n-\tpublic final static String DESTINATIONSEMAILTYPE = \"semail\";\n-\tpublic final static String DESTINATIONURLTYPE = \"url\";\n-\tpublic final static String DESTINATIONUSERHOSTTYPE = \"user@host\";\n-\tpublic final static String DESTINATIONUSERHOSTPORTTYPE = \"user@host:port\";\n-\tpublic final static String DESTINATIONSERVICESPECIFICTYPE = \"service-specific\";\n-\tpublic final static String DESTINATIONWINDOWS = \"user@host-windows\";\n-\tpublic final static String DESTINATIONWINDOWSPROXY = \"host-windows-proxy\";\n-\n-\tpublic static final String PROPAGATIONTYPE_PARALLEL = \"PARALLEL\";\n-\tpublic static final String PROPAGATIONTYPE_SERIAL = \"SERIAL\";\n-\tpublic static final String PROPAGATIONTYPE_DUMMY = \"DUMMY\";\n-\n-\tprivate String destination;\n-\tprivate String type;\n-\tprivate String propagationType = PROPAGATIONTYPE_PARALLEL;\n-\n-\tpublic Destination() {\n-\t\tsuper();\n-\t}\n-\n-\tpublic Destination(int id, String destination){\n-\t\tsuper(id);\n-\t\tthis.destination = destination;\n-\t}\n-\n-\tpublic Destination(int id, String destination, String type) {\n-\t\tthis(id, destination);\n-\t\tthis.type = type;\n-\t}\n-\n-\tpublic Destination(int id, String destination, String type, String propagationType) {\n-\t\tthis(id, destination, type);\n-\t\tthis.propagationType = propagationType;\n-\t}\n-\n-\tpublic Destination(int id, String destination, String type, String createdAt, String createdBy, String modifiedAt, String modifiedBy, Integer createdByUid, Integer modifiedByUid) {\n-\t\tsuper(id, createdAt, createdBy, modifiedAt, modifiedBy, createdByUid, modifiedByUid);\n-\t\tthis.destination = destination;\n-\t\tthis.type = type;\n-\t}\n-\n-\t/**\n-\t * Gets the destination for this instance.\n-\t *\n-\t * @return The name.\n-\t */\n-\tpublic String getDestination() {\n-\t\treturn this.destination;\n-\t}\n-\n-\t/**\n-\t * Sets the destination for this instance.\n-\t *\n-\t * @param destination The destination.\n-\t */\n-\tpublic void setDestination(String destination) {\n-\t\tthis.destination = destination;\n-\t}\n-\n-\t/**\n-\t * Gets the type for this instance.\n-\t *\n-\t * @return The type.\n-\t */\n-\tpublic String getType() {\n-\t\treturn this.type;\n-\t}\n-\n-\t/**\n-\t * \tGets the propagation type for this instance.\n-\t *\n-\t *  @return The propagation type, either \"PARALLEL\", \"SERIAL\" or \"DUMMY\"\n-\t */\n-\tpublic String getPropagationType() {\n-\t\treturn this.propagationType;\n-\t}\n-\n-\t/**\n-\t * Gets the hostname from destination\n-\t * e.g. if destination is type user@host then return host\n-\t * e.g. if destination is type user@host:port then return host\n-\t * e.g. if destination is type user@host-windows then return host-windows\n-\t * if destination is other type then these three, return destination without changes\n-\t *\n-\t * if there is no chars @ and :, return not changed type\n-\t * if type is null, return this destination without changes\n-\t * if destination null, return destination without changes (null)\n-\t *\n-\t * @return host from destination if possible to separate, in other case return destination without changes\n-\t */\n-\tpublic String getHostNameFromDestination() {\n-\t\tif(this.destination == null) return this.destination;\n-\t\tif(this.type == null) return this.destination;\n-\n-\t\tif(this.type.equals(DESTINATIONUSERHOSTPORTTYPE) || this.type.equals(DESTINATIONUSERHOSTTYPE) || this.type.equals(DESTINATIONWINDOWS)) {\n-\t\t\tint startIndex = this.destination.indexOf('@');\n-\t\t\tint endIndex = this.destination.indexOf(':');\n-\t\t\tif(startIndex == -1) return this.destination;\n-\t\t\tif(endIndex == -1) endIndex = this.destination.length();\n-\n-\t\t\tString hostname = this.destination.substring(startIndex, endIndex);\n-\t\t\treturn hostname;\n-\t\t} else return this.destination;\n-\t}\n-\n-\t/**\n-\t * Sets the type for this instance.\n-\t *\n-\t * @param type The type.\n-\t */\n-\tpublic void setType(String type) {\n-\t\tthis.type = type;\n-\t}\n-\n-\t/**\n-\t * Sets the propagation type for this instance.\n-\t *\n-\t * @param type The propagation type.\n-\t */\n-\tpublic void setPropagationType(String type) {\n-\t\tthis.propagationType = type;\n-\t}\n-\n-\t@Override\n-\tpublic String serializeToString() {\n-\t\tStringBuilder str = new StringBuilder();\n-\n-\t\treturn str.append(this.getClass().getSimpleName()).append(\":[\").append(\n-\t\t\t\"id=<\").append(getId()).append(\">\").append(\n-\t\t\t\", destination=<\").append(getDestination() == null ? \"\\\\0\" : BeansUtils.createEscaping(getDestination())).append(\">\").append(\n-\t\t\t\", type=<\").append(getType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getType())).append(\">\").append(\n-\t\t\t\", propagationtype=<\").append(getPropagationType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getPropagationType())).append(\">\").append(\n-\t\t\t']').toString();\n-\t}\n-\n-\tpublic String toString() {\n-\t\tStringBuilder str = new StringBuilder();\n-\n-\t\treturn str.append(getClass().getSimpleName()).append(\":[\"\n-\t\t\t).append(\"id='\").append(getId()\n-\t\t\t).append(\"', destination='\").append(destination\n-\t\t\t).append(\"', type='\").append(type\n-\t\t\t).append(\"', propagationtype='\").append(propagationType\n-\t\t\t).append(\"']\").toString();\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\tfinal int prime = 31;\n-\t\tint result = 1;\n-\t\tresult = prime * result + ((type == null) ? 0 : type.hashCode());\n-\t\tresult = prime * result + getId();\n-\t\tresult = prime * result + ((destination == null) ? 0 : destination.hashCode());\n-\t\treturn result;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\tif (this == obj) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (obj == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (getClass() != obj.getClass()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tDestination other = (Destination) obj;\n-\t\tif (type == null) {\n-\t\t\tif (other.type != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t} else if (!type.equals(other.type)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (getId() != other.getId()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (destination == null) {\n-\t\t\tif (other.destination != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t} else if (!destination.equals(other.destination)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic int compareTo(PerunBean perunBean) {\n-\t\tif(perunBean == null) throw new NullPointerException(\"PerunBean to compare with is null.\");\n-\t\tif(perunBean instanceof Destination) {\n-\t\t\tDestination destination = (Destination) perunBean;\n-\t\t\tif (this.getDestination() == null && destination.getDestination() != null) return -1;\n-\t\t\tif (destination.getDestination() == null && this.getDestination() != null) return 1;\n-\t\t\tif (this.getDestination() == null && destination.getDestination() == null) return 0;\n-\t\t\treturn this.getDestination().compareToIgnoreCase(destination.getDestination());\n-\t\t} else {\n-\t\t\treturn (this.getId() - perunBean.getId());\n-\t\t}\n-\t}\n-}\n+ public final static String DESTINATIONUSERHOSTPORTTYPE = \"user@host:port\";\n+\n+ public final static String DESTINATIONSERVICESPECIFICTYPE = \"service-specific\";\n+\n+ public final static String DESTINATIONWINDOWS = \"user@host-windows\";\n+\n+ public final static String DESTINATIONWINDOWSPROXY = \"host-windows-proxy\";\n+\n+ public static final String PROPAGATIONTYPE_PARALLEL = \"PARALLEL\";\n+\n+ public static final String PROPAGATIONTYPE_SERIAL = \"SERIAL\";\n+\n+ public static final String PROPAGATIONTYPE_DUMMY = \"DUMMY\";\n+ private String destination;\n+ private String type;\n+ private String propagationType = PROPAGATIONTYPE_PARALLEL;\n+\n+\n+ public Destination() {\n+  super();\n+ }\n+\n+ public Destination(int id, String destination) {\n+  super(id);\n+  this.destination = destination;\n+ }\n+\n+ public Destination(int id, String destination, String type) {\n+  this(id, destination);\n+  this.type = type;\n+ }\n+\n+ public Destination(int id, String destination, String type, String propagationType) {\n+  this(id, destination, type);\n+  this.propagationType = propagationType;\n+ }\n+\n+ public Destination(int id, String destination, String type, String createdAt, String createdBy, String modifiedAt, String modifiedBy, Integer createdByUid, Integer modifiedByUid) {\n+  super(id, createdAt, createdBy, modifiedAt, modifiedBy, createdByUid, modifiedByUid);\n+  this.destination = destination;\n+  this.type = type;\n+ }\n+\n+ /**\n+  * Gets the destination for this instance.\n+  *\n+  * @return The name.\n+  */\n+\n+ public String getDestination() {\n+  return this.destination;\n+ }\n+\n+ /**\n+  * Sets the destination for this instance.\n+  *\n+  * @param destination The destination.\n+  */\n+\n+ public void setDestination(String destination) {\n+  this.destination = destination;\n+ }\n+\n+ /**\n+  * Gets the type for this instance.\n+  *\n+  * @return The type.\n+  */\n+\n+ public String getType() {\n+  return this.type;\n+ }\n+\n+ /**\n+  *  Gets the propagation type for this instance.\n+  *\n+  *  @return The propagation type, either \"PARALLEL\", \"SERIAL\" or \"DUMMY\"\n+  */\n+\n+ public String getPropagationType() {\n+  return this.propagationType;\n+ }\n+\n+ /**\n+  * Gets the hostname from destination\n+  * e.g. if destination is type user@host then return host\n+  * e.g. if destination is type user@host:port then return host\n+  * e.g. if destination is type user@host-windows then return host-windows\n+  * if destination is other type then these three, return destination without changes\n+  *\n+  * if there is no chars @ and :, return not changed type\n+  * if type is null, return this destination without changes\n+  * if destination null, return destination without changes (null)\n+  *\n+  * @return host from destination if possible to separate, in other case return destination without changes\n+  */\n+\n+ public String getHostNameFromDestination() {\n+  if (this.destination == null)\n+   return this.destination;\n+  if (this.type == null)\n+   return this.destination;\n+  if (this.type.equals(DESTINATIONUSERHOSTPORTTYPE) || this.type.equals(DESTINATIONUSERHOSTTYPE) || this.type.equals(DESTINATIONWINDOWS)) {\n+   int startIndex = this.destination.indexOf('@');\n+   int endIndex = this.destination.indexOf(':');\n+   if (startIndex == -1)\n+    return this.destination;\n+   if (endIndex == -1) endIndex = this.destination.length();\n+   String hostname = this.destination.substring(startIndex, endIndex);\n+   return hostname;\n+  } else return this.destination;\n+ }\n+\n+ /**\n+  * Sets the type for this instance.\n+  *\n+  * @param type The type.\n+  */\n+\n+ public void setType(String type) {\n+  this.type = type;\n+ }\n+\n+ /**\n+  * Sets the propagation type for this instance.\n+  *\n+  * @param type The propagation type.\n+  */\n+\n+ public void setPropagationType(String type) {\n+  this.propagationType = type;\n+ }\n+\n+ @Override\n+ public String serializeToString() {\n+  StringBuilder str = new StringBuilder();\n+  return str.append(this.getClass().getSimpleName()).append(\":[\").append(\"id=<\").append(getId()).append(\">\").append(\", destination=<\").append(getDestination() == null ? \"\\\\0\" : BeansUtils.createEscaping(getDestination())).append(\">\").append(\", type=<\").append(getType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getType())).append(\">\").append(\", propagationtype=<\").append(getPropagationType() == null ? \"\\\\0\" : BeansUtils.createEscaping(getPropagationType())).append(\">\").append(']').toString();\n+ }\n+\n+ public String toString() {\n+  StringBuilder str = new StringBuilder();\n+  return str.append(getClass().getSimpleName()).append(\":[\").append(\"id='\").append(getId()).append(\"', destination='\").append(destination).append(\"', type='\").append(type).append(\"', propagationtype='\").append(propagationType).append(\"']\").toString();\n+ }\n+\n+ @Override\n+ public int hashCode() {\n+  final int prime = 31;\n+  int result = 1;\n+  result = prime * result + ((type == null) ? 0 : type.hashCode());\n+  result = prime * result + getId();\n+  result = prime * result + ((destination == null) ? 0 : destination.hashCode());\n+  return result;\n+ }\n+\n+ @Override\n+ public boolean equals(Object obj) {\n+  if (this == obj) {\n+   return true;\n+  }\n+  if (obj == null) {\n+   return false;\n+  }\n+  if (getClass() != obj.getClass()) {\n+   return false;\n+  }\n+  Destination other = (Destination) obj;\n+  if (type == null) {\n+   if (other.type != null) {\n+    return false;\n+   }\n+  } else if (!type.equals(other.type)) {\n+   return false;\n+  }\n+  if (getId() != other.getId()) {\n+   return false;\n+  }\n+  if (destination == null) {\n+   if (other.destination != null) {\n+    return false;\n+   }\n+  } else if (!destination.equals(other.destination)) {\n+   return false;\n+  }\n+\n+  return true;\n+ }\n+\n+ @Override\n+ public int compareTo(PerunBean perunBean) {\n+  if (perunBean == null) throw new NullPointerException(\"PerunBean to compare with is null.\");\n+  if (perunBean instanceof Destination) {\n+   Destination destination = (Destination) perunBean;\n+   if (this.getDestination() == null && destination.getDestination() != null)\n+    return -1;\n+   if (destination.getDestination() == null && this.getDestination() != null)\n+    return 1;\n+   if (this.getDestination() == null && destination.getDestination() == null)\n+    return 0;\n+   return this.getDestination().compareToIgnoreCase(destination.getDestination());\n+  } else {\n+   return (this.getId()- perunBean.getId());\n+  }\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 216
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/173/Destination.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/173/Destination.java\nindex 3d36b5639af..91abffc734a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/173/Destination.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/173/Destination.java\n@@ -76,12 +76,12 @@ public class Destination extends Auditable implements Comparable<PerunBean> {\n \tpublic String getType() {\n \t\treturn this.type;\n \t}\n-\n-\t/**\n+\t\t/**\n \t * \tGets the propagation type for this instance.\n \t *\n \t *  @return The propagation type, either \"PARALLEL\", \"SERIAL\" or \"DUMMY\"\n \t */\n+\n \tpublic String getPropagationType() {\n \t\treturn this.propagationType;\n \t}\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}