{
    "project_name": "graphfoundation-ongdb",
    "error_id": "371",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/371/HighestTransactionId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/371/HighestTransactionId.java\nindex 15680a63552..955d402acbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/371/HighestTransactionId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/371/HighestTransactionId.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.util.concurrent.atomic.AtomicReference;\n@@ -27,61 +28,61 @@ import java.util.concurrent.atomic.AtomicReference;\n  */\n public class HighestTransactionId\n {\n-    private final AtomicReference<TransactionId> highest = new AtomicReference<>();\n-\n-    public HighestTransactionId( long initialTransactionId, long initialChecksum, long commitTimestamp )\n-    {\n-        set( initialTransactionId, initialChecksum, commitTimestamp );\n-    }\n+  private final AtomicReference<TransactionId> highest = new AtomicReference<>();\n \n-    /**\n-     * Offers a transaction id. Will be accepted if this is higher than the current highest.\n-     * This method is thread-safe.\n-     *\n-     * @param transactionId transaction id to compare for highest.\n-     * @param checksum checksum of the transaction.\n-     * @param commitTimestamp commit time for transaction with {@code transactionId}.\n-     * @return {@code true} if the given transaction id was higher than the current highest,\n-     * {@code false}.\n-     */\n-    public boolean offer( long transactionId, long checksum, long commitTimestamp )\n-    {\n-        TransactionId high = highest.get();\n-        if ( transactionId < high.transactionId() )\n-        {   // a higher id has already been offered\n-            return false;\n-        }\n+  public HighestTransactionId(long initialTransactionId, long initialChecksum, long commitTimestamp)\n+  {\n+    set(initialTransactionId, initialChecksum, commitTimestamp);\n+  }\n \n-        TransactionId update = new TransactionId( transactionId, checksum, commitTimestamp );\n-        while ( !highest.compareAndSet( high, update ) )\n-        {\n-            high = highest.get();\n-            if ( high.transactionId() >= transactionId )\n-            {   // apparently someone else set a higher id while we were trying to set this id\n-                return false;\n-            }\n-        }\n-        // we set our id as the highest\n-        return true;\n+  /**\n+   * Offers a transaction id. Will be accepted if this is higher than the current highest.\n+   * This method is thread-safe.\n+   *\n+   * @param transactionId   transaction id to compare for highest.\n+   * @param checksum        checksum of the transaction.\n+   * @param commitTimestamp commit time for transaction with {@code transactionId}.\n+   * @return {@code true} if the given transaction id was higher than the current highest,\n+   * {@code false}.\n+   */\n+  public boolean offer(long transactionId, long checksum, long commitTimestamp)\n+  {\n+    TransactionId high = highest.get();\n+    if (transactionId < high.transactionId())\n+    {   // a higher id has already been offered\n+      return false;\n     }\n \n-    /**\n-     * Overrides the highest transaction id value, no matter what it currently is. Used for initialization purposes.\n-     *\n-     * @param transactionId id of the transaction.\n-     * @param checksum checksum of the transaction.\n-     * @param commitTimestamp commit time for transaction with {@code transactionId}.\n-     */\n-    public final void set( long transactionId, long checksum, long commitTimestamp )\n+    TransactionId update = new TransactionId(transactionId, checksum, commitTimestamp);\n+    while (!highest.compareAndSet(high, update))\n     {\n-        highest.set( new TransactionId( transactionId, checksum, commitTimestamp ) );\n+      high = highest.get();\n+      if (high.transactionId() >= transactionId)\n+      {   // apparently someone else set a higher id while we were trying to set this id\n+        return false;\n+      }\n     }\n+    // we set our id as the highest\n+    return true;\n+  }\n \n-    /**\n-     * @return the currently highest transaction together with its checksum.\n-     */\n-    public TransactionId get()\n-    {\n-        return highest.get();\n-    }\n+  /**\n+   * Overrides the highest transaction id value, no matter what it currently is. Used for initialization purposes.\n+   *\n+   * @param transactionId   id of the transaction.\n+   * @param checksum        checksum of the transaction.\n+   * @param commitTimestamp commit time for transaction with {@code transactionId}.\n+   */\n+  public final void set(long transactionId, long checksum, long commitTimestamp)\n+  {\n+    highest.set(new TransactionId(transactionId, checksum, commitTimestamp));\n+  }\n+\n+  /**\n+   * @return the currently highest transaction together with its checksum.\n+   */\n+  public TransactionId get()\n+  {\n+    return highest.get();\n+  }\n }\n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/371/HighestTransactionId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/371/HighestTransactionId.java\nindex 15680a63552..540d78cd5ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/371/HighestTransactionId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/371/HighestTransactionId.java\n@@ -48,7 +48,8 @@ public class HighestTransactionId\n     {\n         TransactionId high = highest.get();\n         if ( transactionId < high.transactionId() )\n-        {   // a higher id has already been offered\n+        {\n+    // a higher id has already been offered\n             return false;\n         }\n \n@@ -57,7 +58,8 @@ public class HighestTransactionId\n         {\n             high = highest.get();\n             if ( high.transactionId() >= transactionId )\n-            {   // apparently someone else set a higher id while we were trying to set this id\n+            {\n+    // apparently someone else set a higher id while we were trying to set this id\n                 return false;\n             }\n         }\n@@ -84,4 +86,4 @@ public class HighestTransactionId\n     {\n         return highest.get();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}