{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3750",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3750/ZonedTimeSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3750/ZonedTimeSchemaKey.java\nindex a5c6e28c8b8..99eaf5a1ec6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3750/ZonedTimeSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3750/ZonedTimeSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.time.ZoneOffset;\n@@ -30,77 +31,77 @@ import static org.neo4j.values.storable.Values.NO_VALUE;\n \n /**\n  * Includes value and entity id (to be able to handle non-unique values). A value can be any {@link TimeValue}.\n- *\n+ * <p>\n  * With these keys the TimeValues are sorted by UTC time of day, and then by time zone.\n  */\n class ZonedTimeSchemaKey extends NativeSchemaKey<ZonedTimeSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES +    /* nanosOfDayUTC */\n-            Integer.BYTES + /* zoneOffsetSeconds */\n-            Long.BYTES;     /* entityId */\n+  static final int SIZE =\n+      Long.BYTES +    /* nanosOfDayUTC */\n+          Integer.BYTES + /* zoneOffsetSeconds */\n+          Long.BYTES;     /* entityId */\n \n-    long nanosOfDayUTC;\n-    int zoneOffsetSeconds;\n+  long nanosOfDayUTC;\n+  int zoneOffsetSeconds;\n \n-    @Override\n-    public Value asValue()\n+  @Override\n+  public Value asValue()\n+  {\n+    // We need to check validity upfront without throwing exceptions, because the PageCursor might give garbage bytes\n+    if (TimeZones.validZoneOffset(zoneOffsetSeconds))\n     {\n-        // We need to check validity upfront without throwing exceptions, because the PageCursor might give garbage bytes\n-        if ( TimeZones.validZoneOffset( zoneOffsetSeconds ) )\n-        {\n-            return TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( zoneOffsetSeconds ) );\n-        }\n-        return NO_VALUE;\n+      return TimeValue.time(nanosOfDayUTC, ZoneOffset.ofTotalSeconds(zoneOffsetSeconds));\n     }\n+    return NO_VALUE;\n+  }\n \n-    @Override\n-    public void initValueAsLowest()\n-    {\n-        nanosOfDayUTC = Long.MIN_VALUE;\n-        zoneOffsetSeconds = Integer.MIN_VALUE;\n-    }\n+  @Override\n+  public void initValueAsLowest()\n+  {\n+    nanosOfDayUTC = Long.MIN_VALUE;\n+    zoneOffsetSeconds = Integer.MIN_VALUE;\n+  }\n \n-    @Override\n-    public void initValueAsHighest()\n-    {\n-        nanosOfDayUTC = Long.MAX_VALUE;\n-        zoneOffsetSeconds = Integer.MAX_VALUE;\n-    }\n+  @Override\n+  public void initValueAsHighest()\n+  {\n+    nanosOfDayUTC = Long.MAX_VALUE;\n+    zoneOffsetSeconds = Integer.MAX_VALUE;\n+  }\n \n-    @Override\n-    public int compareValueTo( ZonedTimeSchemaKey other )\n+  @Override\n+  public int compareValueTo(ZonedTimeSchemaKey other)\n+  {\n+    int compare = Long.compare(nanosOfDayUTC, other.nanosOfDayUTC);\n+    if (compare == 0)\n     {\n-        int compare = Long.compare( nanosOfDayUTC, other.nanosOfDayUTC );\n-        if ( compare == 0 )\n-        {\n-            compare = Integer.compare( zoneOffsetSeconds, other.zoneOffsetSeconds );\n-        }\n-        return compare;\n+      compare = Integer.compare(zoneOffsetSeconds, other.zoneOffsetSeconds);\n     }\n+    return compare;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"value=%s,entityId=%d,nanosOfDayUTC=%d,zoneOffsetSeconds=%d\",\n-                        asValue(), getEntityId(), nanosOfDayUTC, zoneOffsetSeconds );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"value=%s,entityId=%d,nanosOfDayUTC=%d,zoneOffsetSeconds=%d\",\n+        asValue(), getEntityId(), nanosOfDayUTC, zoneOffsetSeconds);\n+  }\n \n-    @Override\n-    public void writeTime( long nanosOfDayUTC, int offsetSeconds )\n-    {\n-        this.nanosOfDayUTC = nanosOfDayUTC;\n-        this.zoneOffsetSeconds = offsetSeconds;\n-    }\n+  @Override\n+  public void writeTime(long nanosOfDayUTC, int offsetSeconds)\n+  {\n+    this.nanosOfDayUTC = nanosOfDayUTC;\n+    this.zoneOffsetSeconds = offsetSeconds;\n+  }\n \n-    @Override\n-    protected Value assertCorrectType( Value value )\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!(value instanceof TimeValue))\n     {\n-        if ( !(value instanceof TimeValue) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support TimeValue, tried to create key from \" + value );\n-        }\n-        return value;\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support TimeValue, tried to create key from \" + value);\n     }\n+    return value;\n+  }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3750/ZonedTimeSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3750/ZonedTimeSchemaKey.java\nindex a5c6e28c8b8..3d1d4df273c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3750/ZonedTimeSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3750/ZonedTimeSchemaKey.java\n@@ -35,12 +35,11 @@ import static org.neo4j.values.storable.Values.NO_VALUE;\n  */\n class ZonedTimeSchemaKey extends NativeSchemaKey<ZonedTimeSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES +    /* nanosOfDayUTC */\n+    static final int SIZE = Long.BYTES + /* nanosOfDayUTC */\n             Integer.BYTES + /* zoneOffsetSeconds */\n-            Long.BYTES;     /* entityId */\n-\n-    long nanosOfDayUTC;\n+            Long.BYTES;\n+/* entityId */\n+long nanosOfDayUTC;\n     int zoneOffsetSeconds;\n \n     @Override\n@@ -51,7 +50,8 @@ class ZonedTimeSchemaKey extends NativeSchemaKey<ZonedTimeSchemaKey>\n         {\n             return TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( zoneOffsetSeconds ) );\n         }\n-        return NO_VALUE;\n+\n+return NO_VALUE;\n     }\n \n     @Override\n@@ -76,14 +76,14 @@ class ZonedTimeSchemaKey extends NativeSchemaKey<ZonedTimeSchemaKey>\n         {\n             compare = Integer.compare( zoneOffsetSeconds, other.zoneOffsetSeconds );\n         }\n-        return compare;\n+\n+return compare;\n     }\n \n     @Override\n     public String toString()\n     {\n-        return format( \"value=%s,entityId=%d,nanosOfDayUTC=%d,zoneOffsetSeconds=%d\",\n-                        asValue(), getEntityId(), nanosOfDayUTC, zoneOffsetSeconds );\n+        return format( \"value=%s,entityId=%d,nanosOfDayUTC=%d,zoneOffsetSeconds=%d\", asValue(), getEntityId(), nanosOfDayUTC, zoneOffsetSeconds );\n     }\n \n     @Override\n@@ -96,11 +96,11 @@ class ZonedTimeSchemaKey extends NativeSchemaKey<ZonedTimeSchemaKey>\n     @Override\n     protected Value assertCorrectType( Value value )\n     {\n-        if ( !(value instanceof TimeValue) )\n+        if ( !( value instanceof TimeValue) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support TimeValue, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support TimeValue, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}