{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1183",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1183/NumberAwareStringComparator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1183/NumberAwareStringComparator.java\nindex 881943a008b..6c84ea4b4a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1183/NumberAwareStringComparator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1183/NumberAwareStringComparator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.util.Comparator;\n@@ -39,65 +40,65 @@ import org.neo4j.helpers.collection.PrefetchingIterator;\n  */\n public class NumberAwareStringComparator implements Comparator<String>\n {\n-    public static final Comparator<String> INSTANCE = new NumberAwareStringComparator();\n+  public static final Comparator<String> INSTANCE = new NumberAwareStringComparator();\n \n-    @SuppressWarnings( { \"rawtypes\", \"unchecked\" } )\n-    @Override\n-    public int compare( String o1, String o2 )\n+  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+  @Override\n+  public int compare(String o1, String o2)\n+  {\n+    Iterator<Comparable> c1 = comparables(o1);\n+    Iterator<Comparable> c2 = comparables(o2);\n+    // Single \"|\" to get both expressions always evaluated, you know, it's a good pattern to\n+    // call hasNext before next on iterators.\n+    boolean c1Has;\n+    boolean c2Has;\n+    while ((c1Has = c1.hasNext()) | (c2Has = c2.hasNext()))\n     {\n-        Iterator<Comparable> c1 = comparables( o1 );\n-        Iterator<Comparable> c2 = comparables( o2 );\n-        // Single \"|\" to get both expressions always evaluated, you know, it's a good pattern to\n-        // call hasNext before next on iterators.\n-        boolean c1Has;\n-        boolean c2Has;\n-        while ( (c1Has = c1.hasNext()) | (c2Has = c2.hasNext()) )\n-        {\n-            if ( !c1Has )\n-            {\n-                return -1;\n-            }\n-            if ( !c2Has )\n-            {\n-                return 1;\n-            }\n+      if (!c1Has)\n+      {\n+        return -1;\n+      }\n+      if (!c2Has)\n+      {\n+        return 1;\n+      }\n \n-            int diff = c1.next().compareTo( c2.next() );\n-            if ( diff != 0 )\n-            {\n-                return diff;\n-            }\n-            // else continue\n-        }\n-        // All elements are comparable with each other\n-        return 0;\n+      int diff = c1.next().compareTo(c2.next());\n+      if (diff != 0)\n+      {\n+        return diff;\n+      }\n+      // else continue\n     }\n+    // All elements are comparable with each other\n+    return 0;\n+  }\n \n-    @SuppressWarnings( \"rawtypes\" )\n-    private Iterator<Comparable> comparables( final String string )\n+  @SuppressWarnings(\"rawtypes\")\n+  private Iterator<Comparable> comparables(final String string)\n+  {\n+    return new PrefetchingIterator<Comparable>()\n     {\n-        return new PrefetchingIterator<Comparable>()\n-        {\n-            private int index;\n+      private int index;\n \n-            @Override\n-            protected Comparable fetchNextOrNull()\n-            {\n-                if ( index >= string.length() )\n-                {   // End reached\n-                    return null;\n-                }\n+      @Override\n+      protected Comparable fetchNextOrNull()\n+      {\n+        if (index >= string.length())\n+        {   // End reached\n+          return null;\n+        }\n \n-                int startIndex = index;\n-                char ch = string.charAt( index );\n-                boolean isNumber = Character.isDigit( ch );\n-                while ( Character.isDigit( ch ) == isNumber && ++index < string.length() )\n-                {\n-                    ch = string.charAt( index );\n-                }\n-                String substring = string.substring( startIndex, index );\n-                return isNumber ? Long.valueOf( substring ) : substring;\n-            }\n-        };\n-    }\n+        int startIndex = index;\n+        char ch = string.charAt(index);\n+        boolean isNumber = Character.isDigit(ch);\n+        while (Character.isDigit(ch) == isNumber && ++index < string.length())\n+        {\n+          ch = string.charAt(index);\n+        }\n+        String substring = string.substring(startIndex, index);\n+        return isNumber ? Long.valueOf(substring) : substring;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1183/NumberAwareStringComparator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1183/NumberAwareStringComparator.java\nindex 881943a008b..34513d26e6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1183/NumberAwareStringComparator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1183/NumberAwareStringComparator.java\n@@ -57,7 +57,8 @@ public class NumberAwareStringComparator implements Comparator<String>\n             {\n                 return -1;\n             }\n-            if ( !c2Has )\n+\n+if ( !c2Has )\n             {\n                 return 1;\n             }\n@@ -84,20 +85,22 @@ public class NumberAwareStringComparator implements Comparator<String>\n             protected Comparable fetchNextOrNull()\n             {\n                 if ( index >= string.length() )\n-                {   // End reached\n+                {\n+    // End reached\n                     return null;\n                 }\n \n                 int startIndex = index;\n                 char ch = string.charAt( index );\n                 boolean isNumber = Character.isDigit( ch );\n-                while ( Character.isDigit( ch ) == isNumber && ++index < string.length() )\n+                while ( Character.isDigit( ch ) == isNumber && ++ index < string.length() )\n                 {\n                     ch = string.charAt( index );\n                 }\n-                String substring = string.substring( startIndex, index );\n+\n+String substring = string.substring( startIndex, index );\n                 return isNumber ? Long.valueOf( substring ) : substring;\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}