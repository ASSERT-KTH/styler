{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1452",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1452/IndexSpecifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1452/IndexSpecifier.java\nindex ba6393880d9..37c011599b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1452/IndexSpecifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1452/IndexSpecifier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.builtinprocs;\n \n import java.util.regex.Matcher;\n@@ -27,90 +28,88 @@ import org.neo4j.helpers.collection.Pair;\n public class IndexSpecifier\n {\n \n-    private final String specification;\n-    private final String label;\n-    private final String[] properties;\n+  private final String specification;\n+  private final String label;\n+  private final String[] properties;\n \n-    public IndexSpecifier( String specification )\n-    {\n-        this.specification = specification;\n-        Pair<String,String[]> components = parse();\n-        label = components.first();\n-        properties = components.other();\n-    }\n+  public IndexSpecifier(String specification)\n+  {\n+    this.specification = specification;\n+    Pair<String, String[]> components = parse();\n+    label = components.first();\n+    properties = components.other();\n+  }\n \n-    public String label()\n-    {\n-        return label;\n-    }\n+  public String label()\n+  {\n+    return label;\n+  }\n \n-    public String[] properties()\n-    {\n-        return properties;\n-    }\n+  public String[] properties()\n+  {\n+    return properties;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return specification;\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return specification;\n+  }\n \n-    private Pair<String,String[]> parse()\n+  private Pair<String, String[]> parse()\n+  {\n+    // Note that this now matches all properties in a single group, in order to split them later.\n+    Pattern pattern = Pattern.compile(\n+        \":\\\\s*\" + or(identifier(true), qoutedIdentifier(true)) + // Match the label\n+            \"\\\\((\" + or(identifier(false), qoutedIdentifier(false)) + // Match the first property\n+            \"(?:,\\\\s*\" + or(identifier(false), qoutedIdentifier(false)) + \")*)\\\\)\" // Match following properties\n+    );\n+    Matcher matcher = pattern.matcher(specification);\n+    if (!matcher.find())\n     {\n-        // Note that this now matches all properties in a single group, in order to split them later.\n-        Pattern pattern = Pattern.compile(\n-                \":\\\\s*\" + or( identifier(true), qoutedIdentifier(true) ) + // Match the label\n-                \"\\\\((\" + or( identifier(false), qoutedIdentifier(false) ) + // Match the first property\n-                \"(?:,\\\\s*\" + or( identifier(false), qoutedIdentifier(false) ) + \")*)\\\\)\" // Match following properties\n-        );\n-        Matcher matcher = pattern.matcher( specification );\n-        if ( !matcher.find() )\n-        {\n-            throw new IllegalArgumentException( \"Cannot parse index specification \" + specification );\n-        }\n-        String label = either( matcher.group( 1 ), matcher.group( 2 ) );\n-        String propertyString = matcher.group( 3 );\n-        //Split string on commas, but ignore commas in quotes\n-        String[] properties = propertyString.split(\",\\\\s*(?=(?:[^`]*`[^`]*`)*[^`]*$)\");\n-        //Strip quotes from property names\n-        for ( int i = 0; i < properties.length ; i++ )\n-        {\n-            properties[i] = properties[i].replaceAll( \"(^`)|(`$)\", \"\" );\n-        }\n-        return Pair.of( label, properties );\n+      throw new IllegalArgumentException(\"Cannot parse index specification \" + specification);\n     }\n-\n-    private String either( String first, String second )\n+    String label = either(matcher.group(1), matcher.group(2));\n+    String propertyString = matcher.group(3);\n+    //Split string on commas, but ignore commas in quotes\n+    String[] properties = propertyString.split(\",\\\\s*(?=(?:[^`]*`[^`]*`)*[^`]*$)\");\n+    //Strip quotes from property names\n+    for (int i = 0; i < properties.length; i++)\n     {\n-        return first != null ? first : second;\n+      properties[i] = properties[i].replaceAll(\"(^`)|(`$)\", \"\");\n     }\n+    return Pair.of(label, properties);\n+  }\n \n-    private static String or( String first, String second )\n-    {\n-        return \"(?:\" + first + \"|\" + second + \")\";\n-    }\n+  private String either(String first, String second)\n+  {\n+    return first != null ? first : second;\n+  }\n \n-    private static String identifier( boolean capture )\n+  private static String or(String first, String second)\n+  {\n+    return \"(?:\" + first + \"|\" + second + \")\";\n+  }\n+\n+  private static String identifier(boolean capture)\n+  {\n+    if (capture)\n+    {\n+      return \"([A-Za-z0-9_]+)\";\n+    } else\n     {\n-        if ( capture )\n-        {\n-            return \"([A-Za-z0-9_]+)\";\n-        }\n-        else\n-        {\n-            return \"(?:[A-Za-z0-9_]+)\";\n-        }\n+      return \"(?:[A-Za-z0-9_]+)\";\n     }\n+  }\n \n-    private static String qoutedIdentifier( boolean capture )\n+  private static String qoutedIdentifier(boolean capture)\n+  {\n+    if (capture)\n+    {\n+      return \"(?:`((?:[^`]|``)+)`)\";\n+    } else\n     {\n-        if ( capture )\n-        {\n-            return \"(?:`((?:[^`]|``)+)`)\";\n-        }\n-        else\n-        {\n-            return \"(?:`(?:(?:[^`]|``)+)`)\";\n-        }\n+      return \"(?:`(?:(?:[^`]|``)+)`)\";\n     }\n+  }\n }\n",
            "diff_size": 103
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}