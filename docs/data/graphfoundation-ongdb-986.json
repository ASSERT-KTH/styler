{
    "project_name": "graphfoundation-ongdb",
    "error_id": "986",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "121",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "210",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/986/OutputMappers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/986/OutputMappers.java\nindex c2eea8e76cc..81aa44e352b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/986/OutputMappers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/986/OutputMappers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import java.lang.invoke.MethodHandle;\n@@ -47,207 +48,204 @@ import static java.util.stream.Collectors.toList;\n  */\n public class OutputMappers\n {\n-    public OutputMappers( TypeMappers typeMappers )\n+  public OutputMappers(TypeMappers typeMappers)\n+  {\n+    this.typeMappers = typeMappers;\n+  }\n+\n+  /**\n+   * A compiled mapper, takes an instance of a java class, and converts it to an Object[] matching\n+   * the specified {@link #signature()}.\n+   */\n+  public static class OutputMapper\n+  {\n+    private final List<FieldSignature> signature;\n+    private final FieldMapper[] fieldMappers;\n+\n+    public OutputMapper(FieldSignature[] signature, FieldMapper[] fieldMappers)\n     {\n-        this.typeMappers = typeMappers;\n+      this.signature = asList(signature);\n+      this.fieldMappers = fieldMappers;\n     }\n \n-    /**\n-     * A compiled mapper, takes an instance of a java class, and converts it to an Object[] matching\n-     * the specified {@link #signature()}.\n-     */\n-    public static class OutputMapper\n+    public List<FieldSignature> signature()\n     {\n-        private final List<FieldSignature> signature;\n-        private final FieldMapper[] fieldMappers;\n-\n-        public OutputMapper( FieldSignature[] signature, FieldMapper[] fieldMappers )\n-        {\n-            this.signature = asList( signature );\n-            this.fieldMappers = fieldMappers;\n-        }\n-\n-        public List<FieldSignature> signature()\n-        {\n-            return signature;\n-        }\n-\n-        public Object[] apply( Object record ) throws ProcedureException\n-        {\n-            Object[] output = new Object[fieldMappers.length];\n-            for ( int i = 0; i < fieldMappers.length; i++ )\n-            {\n-                output[i] = fieldMappers[i].apply( record );\n-            }\n-            return output;\n-        }\n+      return signature;\n     }\n \n-    private static final OutputMapper VOID_MAPPER = new OutputMapper( new FieldSignature[0], new FieldMapper[0] )\n+    public Object[] apply(Object record) throws ProcedureException\n     {\n-        @Override\n-        public List<FieldSignature> signature()\n-        {\n-            return ProcedureSignature.VOID;\n-        }\n-    };\n-\n-    /**\n-     * Extracts field value from an instance and converts it to a Neo4j typed value.\n-     */\n-    private static class FieldMapper\n+      Object[] output = new Object[fieldMappers.length];\n+      for (int i = 0; i < fieldMappers.length; i++)\n+      {\n+        output[i] = fieldMappers[i].apply(record);\n+      }\n+      return output;\n+    }\n+  }\n+\n+  private static final OutputMapper VOID_MAPPER = new OutputMapper(new FieldSignature[0], new FieldMapper[0])\n+  {\n+    @Override\n+    public List<FieldSignature> signature()\n     {\n-        private final MethodHandle getter;\n-        private final TypeMappers.TypeChecker checker;\n-\n-        FieldMapper( MethodHandle getter, TypeMappers.TypeChecker checker )\n-        {\n-            this.getter = getter;\n-            this.checker = checker;\n-        }\n-\n-        Object apply( Object record ) throws ProcedureException\n-        {\n-            Object invoke = getValue( record );\n-            return checker.typeCheck( invoke );\n-        }\n-\n-        private Object getValue( Object record ) throws ProcedureException\n-        {\n-            try\n-            {\n-                return getter.invoke( record );\n-            }\n-            catch ( Throwable throwable )\n-            {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                        \"Unable to read value from record `%s`: %s\", record, throwable.getMessage() );\n-            }\n-        }\n+      return ProcedureSignature.VOID;\n     }\n+  };\n \n-    private final Lookup lookup = MethodHandles.lookup();\n-    private final TypeMappers typeMappers;\n-\n-    /**\n-     * Build an output mapper for the return type of a given method.\n-     *\n-     * @param method the procedure method\n-     * @return an output mapper for the return type of the method.\n-     * @throws ProcedureException\n-     */\n-    public OutputMapper mapper( Method method ) throws ProcedureException\n+  /**\n+   * Extracts field value from an instance and converts it to a Neo4j typed value.\n+   */\n+  private static class FieldMapper\n+  {\n+    private final MethodHandle getter;\n+    private final TypeMappers.TypeChecker checker;\n+\n+    FieldMapper(MethodHandle getter, TypeMappers.TypeChecker checker)\n     {\n-        Class<?> cls = method.getReturnType();\n-        if ( cls == Void.class || cls == void.class )\n-        {\n-            return OutputMappers.VOID_MAPPER;\n-        }\n-\n-        if ( cls != Stream.class )\n-        {\n-            throw invalidReturnType( cls );\n-        }\n-\n-        Type genericReturnType = method.getGenericReturnType();\n-        if ( !(genericReturnType instanceof ParameterizedType) )\n-        {\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                            \"that you define and not a raw Stream.\" );\n-        }\n-\n-        ParameterizedType genType = (ParameterizedType) genericReturnType;\n-        Type recordType = genType.getActualTypeArguments()[0];\n-        if ( recordType instanceof WildcardType )\n-        {\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                    \"that you define and not a Stream<?>.\" );\n-        }\n-        if ( recordType instanceof ParameterizedType )\n-        {\n-            ParameterizedType type = (ParameterizedType) recordType;\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                            \"that you define and not a parameterized type such as %s.\", type );\n-        }\n-\n-        return mapper( (Class<?>) recordType );\n+      this.getter = getter;\n+      this.checker = checker;\n     }\n \n-    public OutputMapper mapper( Class<?> userClass ) throws ProcedureException\n+    Object apply(Object record) throws ProcedureException\n     {\n-        assertIsValidRecordClass( userClass );\n-\n-        List<Field> fields = instanceFields( userClass );\n-        FieldSignature[] signature = new FieldSignature[fields.size()];\n-        FieldMapper[] fieldMappers = new FieldMapper[fields.size()];\n-\n-        for ( int i = 0; i < fields.size(); i++ )\n-        {\n-            Field field = fields.get( i );\n-            if ( !isPublic( field.getModifiers() ) )\n-            {\n-                throw new ProcedureException( Status.Procedure.TypeError,\n-                        \"Field `%s` in record `%s` cannot be accessed. Please ensure the field is marked as `public`.\", field.getName(),\n-                        userClass.getSimpleName() );\n-            }\n-\n-            try\n-            {\n-                TypeMappers.TypeChecker checker = typeMappers.checkerFor( field.getGenericType() );\n-                MethodHandle getter = lookup.unreflectGetter( field );\n-                FieldMapper fieldMapper = new FieldMapper( getter, checker );\n-\n-                fieldMappers[i] = fieldMapper;\n-                signature[i] = FieldSignature.outputField( field.getName(), checker.type(), field.isAnnotationPresent( Deprecated.class ) );\n-            }\n-            catch ( ProcedureException e )\n-            {\n-                throw new ProcedureException( e.status(), e,\n-                        \"Field `%s` in record `%s` cannot be converted to a Neo4j type: %s\", field.getName(),\n-                        userClass.getSimpleName(), e.getMessage() );\n-            }\n-            catch ( IllegalAccessException e )\n-            {\n-                throw new ProcedureException( Status.Procedure.TypeError, e,\n-                        \"Field `%s` in record `%s` cannot be accessed: %s\", field.getName(), userClass.getSimpleName(),\n-                        e.getMessage() );\n-            }\n-        }\n-\n-        return new OutputMapper( signature, fieldMappers );\n+      Object invoke = getValue(record);\n+      return checker.typeCheck(invoke);\n     }\n \n-    private void assertIsValidRecordClass( Class<?> userClass ) throws ProcedureException\n+    private Object getValue(Object record) throws ProcedureException\n+    {\n+      try\n+      {\n+        return getter.invoke(record);\n+      } catch (Throwable throwable)\n+      {\n+        throw new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+            \"Unable to read value from record `%s`: %s\", record, throwable.getMessage());\n+      }\n+    }\n+  }\n+\n+  private final Lookup lookup = MethodHandles.lookup();\n+  private final TypeMappers typeMappers;\n+\n+  /**\n+   * Build an output mapper for the return type of a given method.\n+   *\n+   * @param method the procedure method\n+   * @return an output mapper for the return type of the method.\n+   * @throws ProcedureException\n+   */\n+  public OutputMapper mapper(Method method) throws ProcedureException\n+  {\n+    Class<?> cls = method.getReturnType();\n+    if (cls == Void.class || cls == void.class)\n     {\n-        if ( userClass.isPrimitive() || userClass.isArray() ||\n-                userClass.getPackage() != null && userClass.getPackage().getName().startsWith( \"java.\" ) )\n-        {\n-            throw invalidReturnType( userClass );\n-        }\n+      return OutputMappers.VOID_MAPPER;\n     }\n \n-    private ProcedureException invalidReturnType( Class<?> userClass )\n+    if (cls != Stream.class)\n     {\n-        return new ProcedureException( Status.Procedure.TypeError,\n-                \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                \"that you define, with public non-final fields defining the fields in the record.%n\" +\n-                \"If you''d like your procedure to return `%s`, you could define a record class like:%n\" +\n-                \"public class Output '{'%n\" +\n-                \"    public %s out;%n\" +\n-                \"'}'%n\" +\n-                \"%n\" +\n-                \"And then define your procedure as returning `Stream<Output>`.\", userClass.getSimpleName(),\n-                userClass.getSimpleName() );\n+      throw invalidReturnType(cls);\n     }\n \n-    private List<Field> instanceFields( Class<?> userClass )\n+    Type genericReturnType = method.getGenericReturnType();\n+    if (!(genericReturnType instanceof ParameterizedType))\n+    {\n+      throw new ProcedureException(Status.Procedure.TypeError,\n+          \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+              \"that you define and not a raw Stream.\");\n+    }\n+\n+    ParameterizedType genType = (ParameterizedType) genericReturnType;\n+    Type recordType = genType.getActualTypeArguments()[0];\n+    if (recordType instanceof WildcardType)\n+    {\n+      throw new ProcedureException(Status.Procedure.TypeError,\n+          \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+              \"that you define and not a Stream<?>.\");\n+    }\n+    if (recordType instanceof ParameterizedType)\n+    {\n+      ParameterizedType type = (ParameterizedType) recordType;\n+      throw new ProcedureException(Status.Procedure.TypeError,\n+          \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+              \"that you define and not a parameterized type such as %s.\", type);\n+    }\n+\n+    return mapper((Class<?>) recordType);\n+  }\n+\n+  public OutputMapper mapper(Class<?> userClass) throws ProcedureException\n+  {\n+    assertIsValidRecordClass(userClass);\n+\n+    List<Field> fields = instanceFields(userClass);\n+    FieldSignature[] signature = new FieldSignature[fields.size()];\n+    FieldMapper[] fieldMappers = new FieldMapper[fields.size()];\n+\n+    for (int i = 0; i < fields.size(); i++)\n+    {\n+      Field field = fields.get(i);\n+      if (!isPublic(field.getModifiers()))\n+      {\n+        throw new ProcedureException(Status.Procedure.TypeError,\n+            \"Field `%s` in record `%s` cannot be accessed. Please ensure the field is marked as `public`.\", field.getName(),\n+            userClass.getSimpleName());\n+      }\n+\n+      try\n+      {\n+        TypeMappers.TypeChecker checker = typeMappers.checkerFor(field.getGenericType());\n+        MethodHandle getter = lookup.unreflectGetter(field);\n+        FieldMapper fieldMapper = new FieldMapper(getter, checker);\n+\n+        fieldMappers[i] = fieldMapper;\n+        signature[i] = FieldSignature.outputField(field.getName(), checker.type(), field.isAnnotationPresent(Deprecated.class));\n+      } catch (ProcedureException e)\n+      {\n+        throw new ProcedureException(e.status(), e,\n+            \"Field `%s` in record `%s` cannot be converted to a Neo4j type: %s\", field.getName(),\n+            userClass.getSimpleName(), e.getMessage());\n+      } catch (IllegalAccessException e)\n+      {\n+        throw new ProcedureException(Status.Procedure.TypeError, e,\n+            \"Field `%s` in record `%s` cannot be accessed: %s\", field.getName(), userClass.getSimpleName(),\n+            e.getMessage());\n+      }\n+    }\n+\n+    return new OutputMapper(signature, fieldMappers);\n+  }\n+\n+  private void assertIsValidRecordClass(Class<?> userClass) throws ProcedureException\n+  {\n+    if (userClass.isPrimitive() || userClass.isArray() ||\n+        userClass.getPackage() != null && userClass.getPackage().getName().startsWith(\"java.\"))\n     {\n-        return Arrays.stream( userClass.getDeclaredFields() )\n-                .filter( f -> !isStatic( f.getModifiers() ) &&\n-                                  !f.isSynthetic( ) )\n-                .collect( toList() );\n+      throw invalidReturnType(userClass);\n     }\n+  }\n+\n+  private ProcedureException invalidReturnType(Class<?> userClass)\n+  {\n+    return new ProcedureException(Status.Procedure.TypeError,\n+        \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n+            \"that you define, with public non-final fields defining the fields in the record.%n\" +\n+            \"If you''d like your procedure to return `%s`, you could define a record class like:%n\" +\n+            \"public class Output '{'%n\" +\n+            \"    public %s out;%n\" +\n+            \"'}'%n\" +\n+            \"%n\" +\n+            \"And then define your procedure as returning `Stream<Output>`.\", userClass.getSimpleName(),\n+        userClass.getSimpleName());\n+  }\n+\n+  private List<Field> instanceFields(Class<?> userClass)\n+  {\n+    return Arrays.stream(userClass.getDeclaredFields())\n+        .filter(f -> !isStatic(f.getModifiers()) &&\n+            !f.isSynthetic())\n+        .collect(toList());\n+  }\n }\n",
            "diff_size": 319
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "column": "61",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 521).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "226",
                    "column": "106",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/986/OutputMappers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/986/OutputMappers.java\nindex c2eea8e76cc..f0bb38f44ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/986/OutputMappers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/986/OutputMappers.java\n@@ -79,7 +79,8 @@ public class OutputMappers\n             {\n                 output[i] = fieldMappers[i].apply( record );\n             }\n-            return output;\n+\n+return output;\n         }\n     }\n \n@@ -120,9 +121,8 @@ public class OutputMappers\n             }\n             catch ( Throwable throwable )\n             {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                        \"Unable to read value from record `%s`: %s\", record, throwable.getMessage() );\n-            }\n+                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable, \"Unable to read value from record `%s`: %s\", record, throwable.getMessage() );\n+    }\n         }\n     }\n \n@@ -150,28 +150,23 @@ public class OutputMappers\n         }\n \n         Type genericReturnType = method.getGenericReturnType();\n-        if ( !(genericReturnType instanceof ParameterizedType) )\n+        if ( !( genericReturnType instanceof ParameterizedType) )\n         {\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                            \"that you define and not a raw Stream.\" );\n-        }\n+            throw new ProcedureException( Status.Procedure.TypeError, \"Procedures must return a Stream of records, where a record is a concrete class%n\" + \"that you define and not a raw Stream.\" );\n+    }\n \n         ParameterizedType genType = (ParameterizedType) genericReturnType;\n         Type recordType = genType.getActualTypeArguments()[0];\n         if ( recordType instanceof WildcardType )\n         {\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                    \"that you define and not a Stream<?>.\" );\n+            throw new ProcedureException( Status.Procedure.TypeError, \"Procedures must return a Stream of records, where a record is a concrete class%n\" + \"that you define and not a Stream<?>.\" );\n         }\n-        if ( recordType instanceof ParameterizedType )\n+\n+if ( recordType instanceof ParameterizedType )\n         {\n             ParameterizedType type = (ParameterizedType) recordType;\n-            throw new ProcedureException( Status.Procedure.TypeError,\n-                    \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                            \"that you define and not a parameterized type such as %s.\", type );\n-        }\n+            throw new ProcedureException( Status.Procedure.TypeError, \"Procedures must return a Stream of records, where a record is a concrete class%n\" + \"that you define and not a parameterized type such as %s.\", type );\n+    }\n \n         return mapper( (Class<?>) recordType );\n     }\n@@ -183,15 +178,12 @@ public class OutputMappers\n         List<Field> fields = instanceFields( userClass );\n         FieldSignature[] signature = new FieldSignature[fields.size()];\n         FieldMapper[] fieldMappers = new FieldMapper[fields.size()];\n-\n-        for ( int i = 0; i < fields.size(); i++ )\n+for ( int i = 0; i < fields.size(); i++ )\n         {\n             Field field = fields.get( i );\n             if ( !isPublic( field.getModifiers() ) )\n             {\n-                throw new ProcedureException( Status.Procedure.TypeError,\n-                        \"Field `%s` in record `%s` cannot be accessed. Please ensure the field is marked as `public`.\", field.getName(),\n-                        userClass.getSimpleName() );\n+                throw new ProcedureException( Status.Procedure.TypeError, \"Field `%s` in record `%s` cannot be accessed. Please ensure the field is marked as `public`.\", field.getName(), userClass.getSimpleName() );\n             }\n \n             try\n@@ -205,16 +197,12 @@ public class OutputMappers\n             }\n             catch ( ProcedureException e )\n             {\n-                throw new ProcedureException( e.status(), e,\n-                        \"Field `%s` in record `%s` cannot be converted to a Neo4j type: %s\", field.getName(),\n-                        userClass.getSimpleName(), e.getMessage() );\n-            }\n+                throw new ProcedureException( e.status(), e, \"Field `%s` in record `%s` cannot be converted to a Neo4j type: %s\", field.getName(), userClass.getSimpleName(), e.getMessage() );\n+    }\n             catch ( IllegalAccessException e )\n             {\n-                throw new ProcedureException( Status.Procedure.TypeError, e,\n-                        \"Field `%s` in record `%s` cannot be accessed: %s\", field.getName(), userClass.getSimpleName(),\n-                        e.getMessage() );\n-            }\n+                throw new ProcedureException( Status.Procedure.TypeError, e, \"Field `%s` in record `%s` cannot be accessed: %s\", field.getName(), userClass.getSimpleName(), e.getMessage() );\n+    }\n         }\n \n         return new OutputMapper( signature, fieldMappers );\n@@ -222,32 +210,19 @@ public class OutputMappers\n \n     private void assertIsValidRecordClass( Class<?> userClass ) throws ProcedureException\n     {\n-        if ( userClass.isPrimitive() || userClass.isArray() ||\n-                userClass.getPackage() != null && userClass.getPackage().getName().startsWith( \"java.\" ) )\n-        {\n+        if ( userClass.isPrimitive() || userClass.isArray() ||userClass.getPackage() != null && userClass.getPackage().getName().startsWith( \"java.\" ) )\n+{\n             throw invalidReturnType( userClass );\n         }\n     }\n \n     private ProcedureException invalidReturnType( Class<?> userClass )\n     {\n-        return new ProcedureException( Status.Procedure.TypeError,\n-                \"Procedures must return a Stream of records, where a record is a concrete class%n\" +\n-                \"that you define, with public non-final fields defining the fields in the record.%n\" +\n-                \"If you''d like your procedure to return `%s`, you could define a record class like:%n\" +\n-                \"public class Output '{'%n\" +\n-                \"    public %s out;%n\" +\n-                \"'}'%n\" +\n-                \"%n\" +\n-                \"And then define your procedure as returning `Stream<Output>`.\", userClass.getSimpleName(),\n-                userClass.getSimpleName() );\n+        return new ProcedureException( Status.Procedure.TypeError, \"Procedures must return a Stream of records, where a record is a concrete class%n\" + \"that you define, with public non-final fields defining the fields in the record.%n\" + \"If you''d like your procedure to return `%s`, you could define a record class like:%n\" + \"public class Output '{'%n\" + \"    public %s out;%n\" + \"'}'%n\" + \"%n\" + \"And then define your procedure as returning `Stream<Output>`.\", userClass.getSimpleName(), userClass.getSimpleName() );\n     }\n \n     private List<Field> instanceFields( Class<?> userClass )\n     {\n-        return Arrays.stream( userClass.getDeclaredFields() )\n-                .filter( f -> !isStatic( f.getModifiers() ) &&\n-                                  !f.isSynthetic( ) )\n-                .collect( toList() );\n+        return Arrays.stream( userClass.getDeclaredFields() ).filter( f -> !isStatic( f.getModifiers() ) &&!f.isSynthetic() ).collect( toList() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}