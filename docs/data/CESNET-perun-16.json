{
    "project_name": "CESNET-perun",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "129",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t */\n\tvoid onTaskDestinationComplete(int clientID, String string);\n\t\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/16/SchedulingPool.java\nindex f7c8dec3e95..744464e5053 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/16/SchedulingPool.java\n@@ -126,5 +126,4 @@ public interface SchedulingPool extends TaskStore {\n \t * @param string Serialized TaskResult object\n \t */\n \tvoid onTaskDestinationComplete(int clientID, String string);\n-\t\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/16/SchedulingPool.java\nindex f7c8dec3e95..967a0a8dd50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/16/SchedulingPool.java\n@@ -10,121 +10,120 @@ import java.util.List;\n \n /**\n  * In-memory pool of all Tasks. On application start, all Tasks are reloaded from DB.\n- *\n+ * <p>\n  * New Tasks are added by EventProcessor, existing Tasks are updated.\n- *\n+ * <p>\n  * Tasks can be then pushed to waitingTasksQueue by EventProcessor (new Task), TaskScheduler or PropagationMaintainer.\n- *\n+ * <p>\n  * Allows association of Tasks with Engines (EngineMessageProducer queues).\n  *\n- * @see cz.metacentrum.perun.dispatcher.processing.EventProcessor\n- * @see cz.metacentrum.perun.dispatcher.scheduling.TaskScheduler\n- * @see cz.metacentrum.perun.dispatcher.scheduling.PropagationMaintainer\n- * @see cz.metacentrum.perun.taskslib.model.Task\n- *\n  * @author Michal Voc\u016f\n  * @author Michal Babacek\n  * @author David \u0160arman\n  * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n+ * @see cz.metacentrum.perun.dispatcher.processing.EventProcessor\n+ * @see cz.metacentrum.perun.dispatcher.scheduling.TaskScheduler\n+ * @see cz.metacentrum.perun.dispatcher.scheduling.PropagationMaintainer\n+ * @see cz.metacentrum.perun.taskslib.model.Task\n  */\n public interface SchedulingPool extends TaskStore {\n \n-\t/**\n-\t * Add Task associated with some engine (or null) to DB and internal scheduling pool.\n-\t *\n-\t * @param task Task to be added\n-\t * @param engineMessageProducer Message queue producer of some Engine or null\n-\t * @return Current size of pool after adding\n-\t * @throws InternalErrorException When implementation fails.\n-\t * @throws TaskStoreException When Task can't be added.\n-\t */\n-\tint addToPool(Task task, EngineMessageProducer engineMessageProducer) throws InternalErrorException, TaskStoreException;\n+    /**\n+     * Add Task associated with some engine (or null) to DB and internal scheduling pool.\n+     *\n+     * @param task                  Task to be added\n+     * @param engineMessageProducer Message queue producer of some Engine or null\n+     * @return Current size of pool after adding\n+     * @throws InternalErrorException When implementation fails.\n+     * @throws TaskStoreException     When Task can't be added.\n+     */\n+    int addToPool(Task task, EngineMessageProducer engineMessageProducer) throws InternalErrorException, TaskStoreException;\n+\n+    /**\n+     * Adds supplied Task into DelayQueue and reset its source updated flag to false if Task is eligible for running.\n+     * <p>\n+     * Forced Tasks will have delay set to 0, other will use system property: \"dispatcher.task.delay.time\"\n+     * Also forced Tasks will have delayCount set to 0.\n+     * <p>\n+     * Always retrieve Service/Facility from DB to cross-check actual data.\n+     * Check if Service/Facility exists and has connection and is not blocked.\n+     * <p>\n+     * If check fails, Task is not scheduled.\n+     * If passes, status is changed to WAITING and timestamps are re-set.\n+     * If Task was already in WAITING, timestamps are kept (so we could tell, when it was scheduled first time).\n+     *\n+     * @param task       Task to schedule propagation for\n+     * @param delayCount How long to wait before sending to engine\n+     */\n+    void scheduleTask(Task task, int delayCount);\n \n-\t/**\n-\t * Adds supplied Task into DelayQueue and reset its source updated flag to false if Task is eligible for running.\n-\t *\n-\t * Forced Tasks will have delay set to 0, other will use system property: \"dispatcher.task.delay.time\"\n-\t * Also forced Tasks will have delayCount set to 0.\n-\t *\n-\t * Always retrieve Service/Facility from DB to cross-check actual data.\n-\t * Check if Service/Facility exists and has connection and is not blocked.\n-\t *\n-\t * If check fails, Task is not scheduled.\n-\t * If passes, status is changed to WAITING and timestamps are re-set.\n-\t * If Task was already in WAITING, timestamps are kept (so we could tell, when it was scheduled first time).\n-\t *\n-\t * @param task Task to schedule propagation for\n-\t * @param delayCount How long to wait before sending to engine\n-\t */\n-\tvoid scheduleTask(Task task, int delayCount);\n+    /**\n+     * Loads Tasks persisted in the database into internal scheduling pool maps.\n+     * Immediately restart propagation of previously processing Tasks.\n+     * Error and Done Tasks might be reschedule later by PropagationMaintainer.\n+     */\n+    void reloadTasks();\n \n-\t/**\n-\t * Loads Tasks persisted in the database into internal scheduling pool maps.\n-\t * Immediately restart propagation of previously processing Tasks.\n-\t * Error and Done Tasks might be reschedule later by PropagationMaintainer.\n-\t */\n-\tvoid reloadTasks();\n+    /**\n+     * Clear all in-memory state of Tasks. Called during reloading of Tasks from DB.\n+     */\n+    void clear();\n \n-\t/**\n-\t * Clear all in-memory state of Tasks. Called during reloading of Tasks from DB.\n-\t */\n-\tvoid clear();\n+    /**\n+     * Return string representation of pool content like \"TaskStatus = tasks count\" for each TaskStatus.\n+     *\n+     * @return String representation of pool content\n+     */\n+    String getReport();\n \n-\t/**\n-\t * Return string representation of pool content like \"TaskStatus = tasks count\" for each TaskStatus.\n-\t *\n-\t * @return String representation of pool content\n-\t */\n-\tString getReport();\n+    /**\n+     * Return EngineMessageProducer queue associated with a Task\n+     *\n+     * @param task Task to get EngineMessageProducer for\n+     * @return EngineMessageProducer queue or throws exception\n+     * @throws InternalErrorException When Task has no EngineMessageProducer associated\n+     */\n+    EngineMessageProducer getEngineMessageProducerForTask(Task task) throws InternalErrorException;\n \n-\t/**\n-\t * Return EngineMessageProducer queue associated with a Task\n-\t *\n-\t * @param task Task to get EngineMessageProducer for\n-\t * @return EngineMessageProducer queue or throws exception\n-\t * @throws InternalErrorException When Task has no EngineMessageProducer associated\n-\t */\n-\tEngineMessageProducer getEngineMessageProducerForTask(Task task) throws InternalErrorException;\n+    /**\n+     * Set EngineMessageProducer queue for a Task.\n+     *\n+     * @param task         Task to set EngineMessageProducer queue\n+     * @param queueForTask EngineMessageProducer queue to set\n+     * @throws InternalErrorException When Task doesn't exists in a pool\n+     */\n+    void setEngineMessageProducerForTask(Task task, EngineMessageProducer queueForTask) throws InternalErrorException;\n \n-\t/**\n-\t * Set EngineMessageProducer queue for a Task.\n-\t *\n-\t * @param task Task to set EngineMessageProducer queue\n-\t * @param queueForTask EngineMessageProducer queue to set\n-\t * @throws InternalErrorException When Task doesn't exists in a pool\n-\t */\n-\tvoid setEngineMessageProducerForTask(Task task, EngineMessageProducer queueForTask) throws InternalErrorException;\n+    /**\n+     * Get all Tasks associated with Engine by its ID\n+     *\n+     * @param clientID ID of Engine\n+     * @return Tasks associated with Engine by its ID\n+     */\n+    List<Task> getTasksForEngine(int clientID);\n \n-\t/**\n-\t * Get all Tasks associated with Engine by its ID\n-\t *\n-\t * @param clientID ID of Engine\n-\t * @return Tasks associated with Engine by its ID\n-\t */\n-\tList<Task> getTasksForEngine(int clientID);\n+    /**\n+     * Switch all processing Tasks to ERROR if engine was restarted.\n+     *\n+     * @param clientID ID of Engine\n+     */\n+    void closeTasksForEngine(int clientID);\n \n-\t/**\n-\t * Switch all processing Tasks to ERROR if engine was restarted.\n-\t *\n-\t * @param clientID ID of Engine\n-\t */\n-\tvoid closeTasksForEngine(int clientID);\n+    /**\n+     * Store change in Task status sent from Engine.\n+     *\n+     * @param taskId ID of Task to update\n+     * @param status TaskStatus to set\n+     * @param date   Timestamp of change (string)\n+     */\n+    void onTaskStatusChange(int taskId, String status, String date);\n \n-\t/**\n-\t * Store change in Task status sent from Engine.\n-\t *\n-\t * @param taskId ID of Task to update\n-\t * @param status TaskStatus to set\n-\t * @param date Timestamp of change (string)\n-\t */\n-\tvoid onTaskStatusChange(int taskId, String status, String date);\n+    /**\n+     * Store TaskResult sent from Engine.\n+     *\n+     * @param clientID ID of Engine\n+     * @param string   Serialized TaskResult object\n+     */\n+    void onTaskDestinationComplete(int clientID, String string);\n \n-\t/**\n-\t * Store TaskResult sent from Engine.\n-\t *\n-\t * @param clientID ID of Engine\n-\t * @param string Serialized TaskResult object\n-\t */\n-\tvoid onTaskDestinationComplete(int clientID, String string);\n-\t\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/16/SchedulingPool.java\nindex f7c8dec3e95..38bc5138556 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/16/SchedulingPool.java\n@@ -5,7 +5,6 @@ import cz.metacentrum.perun.dispatcher.jms.EngineMessageProducer;\n import cz.metacentrum.perun.taskslib.exceptions.TaskStoreException;\n import cz.metacentrum.perun.taskslib.model.Task;\n import cz.metacentrum.perun.taskslib.service.TaskStore;\n-\n import java.util.List;\n \n /**\n@@ -27,104 +26,128 @@ import java.util.List;\n  * @author David \u0160arman\n  * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n  */\n+\n+\n public interface SchedulingPool extends TaskStore {\n \n-\t/**\n-\t * Add Task associated with some engine (or null) to DB and internal scheduling pool.\n-\t *\n-\t * @param task Task to be added\n-\t * @param engineMessageProducer Message queue producer of some Engine or null\n-\t * @return Current size of pool after adding\n-\t * @throws InternalErrorException When implementation fails.\n-\t * @throws TaskStoreException When Task can't be added.\n-\t */\n-\tint addToPool(Task task, EngineMessageProducer engineMessageProducer) throws InternalErrorException, TaskStoreException;\n-\n-\t/**\n-\t * Adds supplied Task into DelayQueue and reset its source updated flag to false if Task is eligible for running.\n-\t *\n-\t * Forced Tasks will have delay set to 0, other will use system property: \"dispatcher.task.delay.time\"\n-\t * Also forced Tasks will have delayCount set to 0.\n-\t *\n-\t * Always retrieve Service/Facility from DB to cross-check actual data.\n-\t * Check if Service/Facility exists and has connection and is not blocked.\n-\t *\n-\t * If check fails, Task is not scheduled.\n-\t * If passes, status is changed to WAITING and timestamps are re-set.\n-\t * If Task was already in WAITING, timestamps are kept (so we could tell, when it was scheduled first time).\n-\t *\n-\t * @param task Task to schedule propagation for\n-\t * @param delayCount How long to wait before sending to engine\n-\t */\n-\tvoid scheduleTask(Task task, int delayCount);\n-\n-\t/**\n-\t * Loads Tasks persisted in the database into internal scheduling pool maps.\n-\t * Immediately restart propagation of previously processing Tasks.\n-\t * Error and Done Tasks might be reschedule later by PropagationMaintainer.\n-\t */\n-\tvoid reloadTasks();\n-\n-\t/**\n-\t * Clear all in-memory state of Tasks. Called during reloading of Tasks from DB.\n-\t */\n-\tvoid clear();\n-\n-\t/**\n-\t * Return string representation of pool content like \"TaskStatus = tasks count\" for each TaskStatus.\n-\t *\n-\t * @return String representation of pool content\n-\t */\n-\tString getReport();\n-\n-\t/**\n-\t * Return EngineMessageProducer queue associated with a Task\n-\t *\n-\t * @param task Task to get EngineMessageProducer for\n-\t * @return EngineMessageProducer queue or throws exception\n-\t * @throws InternalErrorException When Task has no EngineMessageProducer associated\n-\t */\n-\tEngineMessageProducer getEngineMessageProducerForTask(Task task) throws InternalErrorException;\n-\n-\t/**\n-\t * Set EngineMessageProducer queue for a Task.\n-\t *\n-\t * @param task Task to set EngineMessageProducer queue\n-\t * @param queueForTask EngineMessageProducer queue to set\n-\t * @throws InternalErrorException When Task doesn't exists in a pool\n-\t */\n-\tvoid setEngineMessageProducerForTask(Task task, EngineMessageProducer queueForTask) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all Tasks associated with Engine by its ID\n-\t *\n-\t * @param clientID ID of Engine\n-\t * @return Tasks associated with Engine by its ID\n-\t */\n-\tList<Task> getTasksForEngine(int clientID);\n-\n-\t/**\n-\t * Switch all processing Tasks to ERROR if engine was restarted.\n-\t *\n-\t * @param clientID ID of Engine\n-\t */\n-\tvoid closeTasksForEngine(int clientID);\n-\n-\t/**\n-\t * Store change in Task status sent from Engine.\n-\t *\n-\t * @param taskId ID of Task to update\n-\t * @param status TaskStatus to set\n-\t * @param date Timestamp of change (string)\n-\t */\n-\tvoid onTaskStatusChange(int taskId, String status, String date);\n-\n-\t/**\n-\t * Store TaskResult sent from Engine.\n-\t *\n-\t * @param clientID ID of Engine\n-\t * @param string Serialized TaskResult object\n-\t */\n-\tvoid onTaskDestinationComplete(int clientID, String string);\n-\t\n-}\n+ /**\n+  * Add Task associated with some engine (or null) to DB and internal scheduling pool.\n+  *\n+  * @param task Task to be added\n+  * @param engineMessageProducer Message queue producer of some Engine or null\n+  * @return Current size of pool after adding\n+  * @throws InternalErrorException When implementation fails.\n+  * @throws TaskStoreException When Task can't be added.\n+  */\n+\n+\n+ int addToPool(Task task, EngineMessageProducer engineMessageProducer) throws InternalErrorException, TaskStoreException;\n+\n+ /**\n+  * Adds supplied Task into DelayQueue and reset its source updated flag to false if Task is eligible for running.\n+  *\n+  * Forced Tasks will have delay set to 0, other will use system property: \"dispatcher.task.delay.time\"\n+  * Also forced Tasks will have delayCount set to 0.\n+  *\n+  * Always retrieve Service/Facility from DB to cross-check actual data.\n+  * Check if Service/Facility exists and has connection and is not blocked.\n+  *\n+  * If check fails, Task is not scheduled.\n+  * If passes, status is changed to WAITING and timestamps are re-set.\n+  * If Task was already in WAITING, timestamps are kept (so we could tell, when it was scheduled first time).\n+  *\n+  * @param task Task to schedule propagation for\n+  * @param delayCount How long to wait before sending to engine\n+  */\n+\n+\n+ void scheduleTask(Task task, int delayCount);\n+\n+ /**\n+  * Loads Tasks persisted in the database into internal scheduling pool maps.\n+  * Immediately restart propagation of previously processing Tasks.\n+  * Error and Done Tasks might be reschedule later by PropagationMaintainer.\n+  */\n+\n+\n+ void reloadTasks();\n+\n+ /**\n+  * Clear all in-memory state of Tasks. Called during reloading of Tasks from DB.\n+  */\n+\n+\n+ void clear();\n+\n+ /**\n+  * Return string representation of pool content like \"TaskStatus = tasks count\" for each TaskStatus.\n+  *\n+  * @return String representation of pool content\n+  */\n+\n+\n+ String getReport();\n+\n+ /**\n+  * Return EngineMessageProducer queue associated with a Task\n+  *\n+  * @param task Task to get EngineMessageProducer for\n+  * @return EngineMessageProducer queue or throws exception\n+  * @throws InternalErrorException When Task has no EngineMessageProducer associated\n+  */\n+\n+\n+ EngineMessageProducer getEngineMessageProducerForTask(Task task) throws InternalErrorException;\n+\n+ /**\n+  * Set EngineMessageProducer queue for a Task.\n+  *\n+  * @param task Task to set EngineMessageProducer queue\n+  * @param queueForTask EngineMessageProducer queue to set\n+  * @throws InternalErrorException When Task doesn't exists in a pool\n+  */\n+\n+\n+ void setEngineMessageProducerForTask(Task task, EngineMessageProducer queueForTask) throws InternalErrorException;\n+\n+ /**\n+  * Get all Tasks associated with Engine by its ID\n+  *\n+  * @param clientID ID of Engine\n+  * @return Tasks associated with Engine by its ID\n+  */\n+\n+\n+ List<Task> getTasksForEngine(int clientID);\n+\n+ /**\n+  * Switch all processing Tasks to ERROR if engine was restarted.\n+  *\n+  * @param clientID ID of Engine\n+  */\n+\n+\n+ void closeTasksForEngine(int clientID);\n+\n+ /**\n+  * Store change in Task status sent from Engine.\n+  *\n+  * @param taskId ID of Task to update\n+  * @param status TaskStatus to set\n+  * @param date Timestamp of change (string)\n+  */\n+\n+\n+ void onTaskStatusChange(int taskId, String status, String date);\n+\n+ /**\n+  * Store TaskResult sent from Engine.\n+  *\n+  * @param clientID ID of Engine\n+  * @param string Serialized TaskResult object\n+  */\n+\n+\n+ void onTaskDestinationComplete(int clientID, String string);\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/16/SchedulingPool.java\nindex f7c8dec3e95..744464e5053 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/16/SchedulingPool.java\n@@ -126,5 +126,4 @@ public interface SchedulingPool extends TaskStore {\n \t * @param string Serialized TaskResult object\n \t */\n \tvoid onTaskDestinationComplete(int clientID, String string);\n-\t\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/16/SchedulingPool.java\nindex f7c8dec3e95..e6ec86354ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/16/SchedulingPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/16/SchedulingPool.java\n@@ -125,6 +125,7 @@ public interface SchedulingPool extends TaskStore {\n \t * @param clientID ID of Engine\n \t * @param string Serialized TaskResult object\n \t */\n-\tvoid onTaskDestinationComplete(int clientID, String string);\n-\t\n-}\n+\tvoid onTaskDestinationComplete(int clientID, String string)\n+\n+;\n+ }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}