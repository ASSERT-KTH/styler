{
    "project_name": "apache-ignite-3",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "{\n    private final List<BytecodeExpression> parameters;\n    private final List<ParameterizedType> parameterTypes;\n\n    NewInstanceBytecodeExpression(\n            ParameterizedType type,",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/64/NewInstanceBytecodeExpression.java\nindex 53c09b73705..29ea088eb2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/64/NewInstanceBytecodeExpression.java\n@@ -27,6 +27,7 @@ class NewInstanceBytecodeExpression\n         extends BytecodeExpression\n {\n     private final List<BytecodeExpression> parameters;\n+\n     private final List<ParameterizedType> parameterTypes;\n \n     NewInstanceBytecodeExpression(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/64/NewInstanceBytecodeExpression.java\nindex 53c09b73705..ceffc28ede7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/64/NewInstanceBytecodeExpression.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.expression;\n \n import com.facebook.presto.bytecode.BytecodeBlock;\n@@ -24,44 +25,40 @@ import java.util.stream.Collectors;\n import static java.util.Objects.requireNonNull;\n \n class NewInstanceBytecodeExpression\n-        extends BytecodeExpression\n-{\n-    private final List<BytecodeExpression> parameters;\n-    private final List<ParameterizedType> parameterTypes;\n+    extends BytecodeExpression {\n+  private final List<BytecodeExpression> parameters;\n \n-    NewInstanceBytecodeExpression(\n-            ParameterizedType type,\n-            Collection<ParameterizedType> parameterTypes,\n-            Collection<? extends BytecodeExpression> parameters)\n-    {\n-        super(type);\n-        this.parameterTypes = List.copyOf(requireNonNull(parameterTypes, \"parameterTypes is null\"));\n-        this.parameters = List.copyOf(requireNonNull(parameters, \"parameters is null\"));\n-    }\n+  private final List<ParameterizedType> parameterTypes;\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext)\n-    {\n-        BytecodeBlock block = new BytecodeBlock()\n-                .newObject(getType())\n-                .dup();\n+  NewInstanceBytecodeExpression(\n+      ParameterizedType type,\n+      Collection<ParameterizedType> parameterTypes,\n+      Collection<? extends BytecodeExpression> parameters) {\n+    super(type);\n+    this.parameterTypes = List.copyOf(requireNonNull(parameterTypes, \"parameterTypes is null\"));\n+    this.parameters = List.copyOf(requireNonNull(parameters, \"parameters is null\"));\n+  }\n \n-        for (BytecodeExpression parameter : parameters) {\n-            block.append(parameter);\n-        }\n-        return block.invokeConstructor(getType(), parameterTypes);\n-    }\n+  @Override\n+  public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+    BytecodeBlock block = new BytecodeBlock()\n+        .newObject(getType())\n+        .dup();\n \n-    @Override\n-    protected String formatOneLine()\n-    {\n-        return \"new \" + getType().getSimpleName() + \"(\" +\n-            parameters.stream().map(BytecodeExpression::toString).collect(Collectors.joining(\", \")) + \")\";\n+    for (BytecodeExpression parameter : parameters) {\n+      block.append(parameter);\n     }\n+    return block.invokeConstructor(getType(), parameterTypes);\n+  }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes()\n-    {\n-        return List.copyOf(parameters);\n-    }\n+  @Override\n+  protected String formatOneLine() {\n+    return \"new \" + getType().getSimpleName() + \"(\" +\n+        parameters.stream().map(BytecodeExpression::toString).collect(Collectors.joining(\", \")) + \")\";\n+  }\n+\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.copyOf(parameters);\n+  }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/64/NewInstanceBytecodeExpression.java\nindex 53c09b73705..c8bb5d87b28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/64/NewInstanceBytecodeExpression.java\n@@ -29,11 +29,9 @@ class NewInstanceBytecodeExpression\n     private final List<BytecodeExpression> parameters;\n     private final List<ParameterizedType> parameterTypes;\n \n-    NewInstanceBytecodeExpression(\n-            ParameterizedType type,\n+    NewInstanceBytecodeExpression(ParameterizedType type,\n             Collection<ParameterizedType> parameterTypes,\n-            Collection<? extends BytecodeExpression> parameters)\n-    {\n+            Collection<? extends BytecodeExpression> parameters) {\n         super(type);\n         this.parameterTypes = List.copyOf(requireNonNull(parameterTypes, \"parameterTypes is null\"));\n         this.parameters = List.copyOf(requireNonNull(parameters, \"parameters is null\"));\n@@ -46,7 +44,7 @@ class NewInstanceBytecodeExpression\n                 .newObject(getType())\n                 .dup();\n \n-        for (BytecodeExpression parameter : parameters) {\n+for (BytecodeExpression parameter : parameters) {\n             block.append(parameter);\n         }\n         return block.invokeConstructor(getType(), parameterTypes);\n@@ -64,4 +62,4 @@ class NewInstanceBytecodeExpression\n     {\n         return List.copyOf(parameters);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "45",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "63",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/64/NewInstanceBytecodeExpression.java\nindex 53c09b73705..54fcff3094c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/64/NewInstanceBytecodeExpression.java\n@@ -23,45 +23,44 @@ import java.util.stream.Collectors;\n \n import static java.util.Objects.requireNonNull;\n \n-class NewInstanceBytecodeExpression\n-        extends BytecodeExpression\n-{\n+class NewInstanceBytecodeExpression extends BytecodeExpression {\n+\n     private final List<BytecodeExpression> parameters;\n+\n+\n     private final List<ParameterizedType> parameterTypes;\n \n+\n     NewInstanceBytecodeExpression(\n-            ParameterizedType type,\n-            Collection<ParameterizedType> parameterTypes,\n-            Collection<? extends BytecodeExpression> parameters)\n-    {\n-        super(type);\n-        this.parameterTypes = List.copyOf(requireNonNull(parameterTypes, \"parameterTypes is null\"));\n-        this.parameters = List.copyOf(requireNonNull(parameters, \"parameters is null\"));\n-    }\n+        ParameterizedType type,\n+        Collection<ParameterizedType> parameterTypes, Collection<? extends BytecodeExpression> parameters\n+    ) {\n+          super(type);\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext)\n-    {\n-        BytecodeBlock block = new BytecodeBlock()\n-                .newObject(getType())\n-                .dup();\n+          this.parameterTypes = List.copyOf(requireNonNull(parameterTypes, \"parameterTypes is null\"));\n+          this.parameters = List.copyOf(requireNonNull(parameters, \"parameters is null\"));\n+      }\n+\n+\n+    @Override public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+        BytecodeBlock block = new BytecodeBlock().newObject(getType())\n+                                                 .dup();\n \n         for (BytecodeExpression parameter : parameters) {\n             block.append(parameter);\n         }\n+\n         return block.invokeConstructor(getType(), parameterTypes);\n     }\n \n-    @Override\n-    protected String formatOneLine()\n-    {\n-        return \"new \" + getType().getSimpleName() + \"(\" +\n-            parameters.stream().map(BytecodeExpression::toString).collect(Collectors.joining(\", \")) + \")\";\n+\n+    @Override protected String formatOneLine() {\n+        return \"new \" + getType().getSimpleName() + \"(\" + parameters.stream().map(BytecodeExpression::toString)\n+                                                                             .collect(Collectors.joining(\", \")) + \")\";\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes()\n-    {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.copyOf(parameters);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/64/NewInstanceBytecodeExpression.java\nindex 53c09b73705..29ea088eb2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/64/NewInstanceBytecodeExpression.java\n@@ -27,6 +27,7 @@ class NewInstanceBytecodeExpression\n         extends BytecodeExpression\n {\n     private final List<BytecodeExpression> parameters;\n+\n     private final List<ParameterizedType> parameterTypes;\n \n     NewInstanceBytecodeExpression(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/64/NewInstanceBytecodeExpression.java\nindex 53c09b73705..29ea088eb2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/64/NewInstanceBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/64/NewInstanceBytecodeExpression.java\n@@ -27,6 +27,7 @@ class NewInstanceBytecodeExpression\n         extends BytecodeExpression\n {\n     private final List<BytecodeExpression> parameters;\n+\n     private final List<ParameterizedType> parameterTypes;\n \n     NewInstanceBytecodeExpression(\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}