{
    "project_name": "intuit-Tank",
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "79",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 179).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        logicTestData = new LogicTestData(step, scriptEditor.getScript());\n        // dd\n        script = step.getData().stream().filter(requestData -> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst().map(RequestData::getValue).orElseGet(() -> script);\n        buttonLabel = EDIT_LABEL;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/92/LogicStepEditor.java\nindex 6f6c5d2ae0e..9cb8a08e809 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/92/LogicStepEditor.java\n@@ -47,258 +47,256 @@ import com.intuit.tank.vm.settings.TankConfig;\n @ConversationScoped\n public class LogicStepEditor implements Serializable {\n \n-    private static final String DASHES = \"-------------\";\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    @Inject\n-    private ScriptEditor scriptEditor;\n-\n-    @Inject\n-    private Messages messages;\n-\n-    private String script;\n-    private String name;\n-    private String output;\n-    private String groupName;\n-    private LogicTestData logicTestData;\n-    private ScriptStep step;\n-    private String buttonLabel = ADD_LABEL;\n-    private ScriptStep previousRequest = null;\n-\n-    private boolean editMode;\n-\n-    public void editLogicStep(ScriptStep step) {\n-        this.step = step;\n-        this.editMode = true;\n-        this.name = step.getName();\n-        this.previousRequest = scriptEditor.getPreviousRequest(step);\n-        this.groupName = step.getScriptGroupName();\n-        logicTestData = new LogicTestData(step, scriptEditor.getScript());\n-        // dd\n-        script = step.getData().stream().filter(requestData -> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst().map(RequestData::getValue).orElseGet(() -> script);\n-        buttonLabel = EDIT_LABEL;\n+  private static final String DASHES = \"-------------\";\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Inject\n+  private ScriptEditor scriptEditor;\n+\n+  @Inject\n+  private Messages messages;\n+\n+  private String script;\n+  private String name;\n+  private String output;\n+  private String groupName;\n+  private LogicTestData logicTestData;\n+  private ScriptStep step;\n+  private String buttonLabel = ADD_LABEL;\n+  private ScriptStep previousRequest = null;\n+\n+  private boolean editMode;\n+\n+  public void editLogicStep(ScriptStep step) {\n+    this.step = step;\n+    this.editMode = true;\n+    this.name = step.getName();\n+    this.previousRequest = scriptEditor.getPreviousRequest(step);\n+    this.groupName = step.getScriptGroupName();\n+    logicTestData = new LogicTestData(step, scriptEditor.getScript());\n+    // dd\n+    script =\n+      step.getData().stream().filter(requestData -> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst()\n+        .map(RequestData::getValue).orElseGet(() -> script);\n+    buttonLabel = EDIT_LABEL;\n+  }\n+\n+  public void insertLogicStep() {\n+    this.previousRequest = scriptEditor.getPreviousRequest(null);\n+    this.editMode = false;\n+    script = \"\";\n+    name = \"\";\n+    output = \"\";\n+    groupName = \"\";\n+    logicTestData = new LogicTestData(previousRequest, scriptEditor.getScript());\n+    buttonLabel = ADD_LABEL;\n+  }\n+\n+  public void addToScript() {\n+    if (validate()) {\n+      if (editMode) {\n+        done();\n+      } else {\n+        insert();\n+      }\n     }\n-\n-    public void insertLogicStep() {\n-        this.previousRequest = scriptEditor.getPreviousRequest(null);\n-        this.editMode = false;\n-        script = \"\";\n-        name = \"\";\n-        output = \"\";\n-        groupName = \"\";\n-        logicTestData = new LogicTestData(previousRequest, scriptEditor.getScript());\n-        buttonLabel = ADD_LABEL;\n-    }\n-\n-    public void addToScript() {\n-        if (validate()) {\n-            if (editMode) {\n-                done();\n-            } else {\n-                insert();\n-            }\n-        }\n-    }\n-\n-    public void insert() {\n-        ScriptStep newStep = ScriptStepFactory.createLogic(name, script);\n-        newStep.setScriptGroupName(groupName);\n-        logicTestData.setInStep(newStep);\n-        scriptEditor.insert(newStep);\n-        groupName = null;\n-        script = null;\n-        name = null;\n-        output = null;\n-    }\n-\n-    public void done() {\n-        RequestData rd = new RequestData();\n-        rd.setKey(ScriptConstants.SCRIPT);\n-        rd.setValue(script);\n-        rd.setType(ScriptConstants.SCRIPT);\n-\n-        Set<RequestData> datas = new HashSet<RequestData>();\n-        datas.add(rd);\n-\n-        step.setData(datas);\n-        logicTestData.setInStep(step);\n-        step.setName(name);\n-        step.setScriptGroupName(groupName);\n-        step.setComments(\"Logic Step: \" + name);\n-        ScriptUtil.updateStepLabel(step);\n-        script = null;\n-        groupName = null;\n-        name = null;\n-        output = null;\n-        logicTestData = null;\n-    }\n-\n-    public String getInsertBefore() {\n-        return new TankConfig().getLogicStepConfig().getInsertBefore();\n-    }\n-\n-    public void setValuesFromPrevious() {\n-        if (previousRequest != null) {\n-            logicTestData = new LogicTestData(previousRequest, scriptEditor.getScript());\n-        }\n-    }\n-\n-    private boolean validate() {\n-        boolean retVal = true;\n-\n-        if (StringUtils.isBlank(name)) {\n-            retVal = false;\n-            messages.error(\"Name cannot be empty\");\n-        }\n-        return retVal;\n-    }\n-\n-    public void testScript() {\n-        StringOutputLogger outputLogger = new StringOutputLogger();\n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        Variables vars = new Variables();\n-        for (Entry<String, String> entry : logicTestData.getVariables()) {\n-            vars.addVariable(entry.getKey(), entry.getValue());\n-        }\n-        inputs.put(\"variables\", vars);\n-        inputs.put(\"request\", createRequest());\n-        inputs.put(\"response\", createResponse());\n-        try {\n-            String scriptToRun = new LogicScriptUtil().buildScript(script);\n-            logMap(\"Variables\", vars.getVaribleValues(), outputLogger);\n-            outputLogger.logLine(DASHES + \" script \" + DASHES);\n-            ScriptIOBean ioBean = new ScriptRunner().runScript(name, scriptToRun,\n-                    new ScriptEngineManager().getEngineByExtension(\"js\"), inputs, outputLogger);\n-            logMap(\"Outputs\", ioBean.getOutputs(), outputLogger);\n-            logMap(\"Variables\", vars.getVaribleValues(), outputLogger);\n-        } catch (Exception e) {\n-            outputLogger.logLine(\"\\nException thrown: \" + e);\n-        }\n-        this.output = outputLogger.getOutput();\n-    }\n-\n-    private BaseResponse createResponse() {\n-        BaseResponse ret = new BaseResponse() {\n-\n-            @Override\n-            public String getValue(String key) {\n-                return null;\n-            }\n-        };\n-        ret.setResponseBody(logicTestData.getResponseBody());\n-        for (Entry<String, String> entry : logicTestData.getResponseHeaders()) {\n-            ret.getHeaders().put(entry.getKey(), entry.getValue());\n-        }\n-        return ret;\n+  }\n+\n+  public void insert() {\n+    ScriptStep newStep = ScriptStepFactory.createLogic(name, script);\n+    newStep.setScriptGroupName(groupName);\n+    logicTestData.setInStep(newStep);\n+    scriptEditor.insert(newStep);\n+    groupName = null;\n+    script = null;\n+    name = null;\n+    output = null;\n+  }\n+\n+  public void done() {\n+    RequestData rd = new RequestData();\n+    rd.setKey(ScriptConstants.SCRIPT);\n+    rd.setValue(script);\n+    rd.setType(ScriptConstants.SCRIPT);\n+\n+    Set<RequestData> datas = new HashSet<RequestData>();\n+    datas.add(rd);\n+\n+    step.setData(datas);\n+    logicTestData.setInStep(step);\n+    step.setName(name);\n+    step.setScriptGroupName(groupName);\n+    step.setComments(\"Logic Step: \" + name);\n+    ScriptUtil.updateStepLabel(step);\n+    script = null;\n+    groupName = null;\n+    name = null;\n+    output = null;\n+    logicTestData = null;\n+  }\n+\n+  public String getInsertBefore() {\n+    return new TankConfig().getLogicStepConfig().getInsertBefore();\n+  }\n+\n+  public void setValuesFromPrevious() {\n+    if (previousRequest != null) {\n+      logicTestData = new LogicTestData(previousRequest, scriptEditor.getScript());\n     }\n+  }\n \n-    private BaseRequest createRequest() {\n-        BaseRequest ret = new BaseRequest(null, null) {\n-\n-            @Override\n-            public void setNamespace(String name, String value) {\n-            }\n-\n-            @Override\n-            public void setKey(String key, String value) {\n-            }\n-\n-            @Override\n-            public String getKey(String key) {\n-                return null;\n-            }\n-        };\n-\n-        ret.setBody(logicTestData.getRequestBody());\n-        ret.addHeader(\"Test\", \"LoadTest\");\n-        for (Entry<String, String> entry : logicTestData.getRequestHeaders()) {\n-            ret.addHeader(entry.getKey(), entry.getValue());\n-        }\n-        return ret;\n-    }\n+  private boolean validate() {\n+    boolean retVal = true;\n \n-    private void logMap(String label, Map<String, ? extends Object> map, StringOutputLogger outputLogger) {\n-        if (!map.isEmpty()) {\n-            outputLogger.logLine(DASHES + \" \" + label + \" \" + DASHES);\n-            for (Entry<String, ? extends Object> entry : map.entrySet()) {\n-                outputLogger.logLine(entry.getKey() + \" = \" + entry.getValue());\n-            }\n-        }\n+    if (StringUtils.isBlank(name)) {\n+      retVal = false;\n+      messages.error(\"Name cannot be empty\");\n     }\n-\n-    /**\n-     * @return the buttonLabel\n-     */\n-    public String getButtonLabel() {\n-        return buttonLabel;\n+    return retVal;\n+  }\n+\n+  public void testScript() {\n+    StringOutputLogger outputLogger = new StringOutputLogger();\n+    Map<String, Object> inputs = new HashMap<String, Object>();\n+    Variables vars = new Variables();\n+    for (Entry<String, String> entry : logicTestData.getVariables()) {\n+      vars.addVariable(entry.getKey(), entry.getValue());\n     }\n-\n-    /**\n-     * @param buttonLabel\n-     *            the buttonLabel to set\n-     */\n-    public void setButtonLabel(String buttonLabel) {\n-        this.buttonLabel = buttonLabel;\n+    inputs.put(\"variables\", vars);\n+    inputs.put(\"request\", createRequest());\n+    inputs.put(\"response\", createResponse());\n+    try {\n+      String scriptToRun = new LogicScriptUtil().buildScript(script);\n+      logMap(\"Variables\", vars.getVaribleValues(), outputLogger);\n+      outputLogger.logLine(DASHES + \" script \" + DASHES);\n+      ScriptIOBean ioBean = new ScriptRunner().runScript(name, scriptToRun,\n+        new ScriptEngineManager().getEngineByExtension(\"js\"), inputs, outputLogger);\n+      logMap(\"Outputs\", ioBean.getOutputs(), outputLogger);\n+      logMap(\"Variables\", vars.getVaribleValues(), outputLogger);\n+    } catch (Exception e) {\n+      outputLogger.logLine(\"\\nException thrown: \" + e);\n     }\n-\n-    /**\n-     * @return the script\n-     */\n-    public String getScript() {\n-        return script;\n+    this.output = outputLogger.getOutput();\n+  }\n+\n+  private BaseResponse createResponse() {\n+    BaseResponse ret = new BaseResponse() {\n+\n+      @Override\n+      public String getValue(String key) {\n+        return null;\n+      }\n+    };\n+    ret.setResponseBody(logicTestData.getResponseBody());\n+    for (Entry<String, String> entry : logicTestData.getResponseHeaders()) {\n+      ret.getHeaders().put(entry.getKey(), entry.getValue());\n     }\n-\n-    /**\n-     * @param script\n-     *            the script to set\n-     */\n-    public void setScript(String script) {\n-        this.script = script;\n-    }\n-\n-    /**\n-     * @return the name\n-     */\n-    public String getName() {\n-        return name;\n+    return ret;\n+  }\n+\n+  private BaseRequest createRequest() {\n+    BaseRequest ret = new BaseRequest(null, null) {\n+\n+      @Override\n+      public void setNamespace(String name, String value) {\n+      }\n+\n+      @Override\n+      public void setKey(String key, String value) {\n+      }\n+\n+      @Override\n+      public String getKey(String key) {\n+        return null;\n+      }\n+    };\n+\n+    ret.setBody(logicTestData.getRequestBody());\n+    ret.addHeader(\"Test\", \"LoadTest\");\n+    for (Entry<String, String> entry : logicTestData.getRequestHeaders()) {\n+      ret.addHeader(entry.getKey(), entry.getValue());\n     }\n-\n-    /**\n-     * @return the output\n-     */\n-    public String getOutput() {\n-        return output;\n-    }\n-\n-    /**\n-     * @param name\n-     *            the name to set\n-     */\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    /**\n-     * @return the groupName\n-     */\n-    public String getGroupName() {\n-        return groupName;\n-    }\n-\n-    /**\n-     * @param groupName\n-     *            the groupName to set\n-     */\n-    public void setGroupName(String groupName) {\n-        this.groupName = groupName;\n-    }\n-\n-    /**\n-     * @return the logicTestData\n-     */\n-    public LogicTestData getLogicTestData() {\n-        return logicTestData;\n+    return ret;\n+  }\n+\n+  private void logMap(String label, Map<String, ? extends Object> map, StringOutputLogger outputLogger) {\n+    if (!map.isEmpty()) {\n+      outputLogger.logLine(DASHES + \" \" + label + \" \" + DASHES);\n+      for (Entry<String, ? extends Object> entry : map.entrySet()) {\n+        outputLogger.logLine(entry.getKey() + \" = \" + entry.getValue());\n+      }\n     }\n+  }\n+\n+  /**\n+   * @return the buttonLabel\n+   */\n+  public String getButtonLabel() {\n+    return buttonLabel;\n+  }\n+\n+  /**\n+   * @param buttonLabel the buttonLabel to set\n+   */\n+  public void setButtonLabel(String buttonLabel) {\n+    this.buttonLabel = buttonLabel;\n+  }\n+\n+  /**\n+   * @return the script\n+   */\n+  public String getScript() {\n+    return script;\n+  }\n+\n+  /**\n+   * @param script the script to set\n+   */\n+  public void setScript(String script) {\n+    this.script = script;\n+  }\n+\n+  /**\n+   * @return the name\n+   */\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * @return the output\n+   */\n+  public String getOutput() {\n+    return output;\n+  }\n+\n+  /**\n+   * @param name the name to set\n+   */\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * @return the groupName\n+   */\n+  public String getGroupName() {\n+    return groupName;\n+  }\n+\n+  /**\n+   * @param groupName the groupName to set\n+   */\n+  public void setGroupName(String groupName) {\n+    this.groupName = groupName;\n+  }\n+\n+  /**\n+   * @return the logicTestData\n+   */\n+  public LogicTestData getLogicTestData() {\n+    return logicTestData;\n+  }\n \n }\n",
            "diff_size": 364
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/92/LogicStepEditor.java\nindex 6f6c5d2ae0e..bd0792276b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/92/LogicStepEditor.java\n@@ -301,4 +301,4 @@ public class LogicStepEditor implements Serializable {\n         return logicTestData;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/92/LogicStepEditor.java\nindex 6f6c5d2ae0e..1fdf853cd42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/92/LogicStepEditor.java\n@@ -13,6 +13,8 @@ package com.intuit.tank.script;\n  * #L%\n  */\n \n+\n+\n import static com.intuit.tank.util.ButtonLabel.ADD_LABEL;\n import static com.intuit.tank.util.ButtonLabel.EDIT_LABEL;\n \n@@ -22,15 +24,12 @@ import java.util.HashSet;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n-\n import javax.enterprise.context.ConversationScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n import javax.script.ScriptEngineManager;\n-\n import org.apache.commons.lang3.StringUtils;\n import com.intuit.tank.util.Messages;\n-\n import com.intuit.tank.common.ScriptUtil;\n import com.intuit.tank.harness.test.data.Variables;\n import com.intuit.tank.http.BaseRequest;\n@@ -48,7 +47,6 @@ import com.intuit.tank.vm.settings.TankConfig;\n public class LogicStepEditor implements Serializable {\n \n     private static final String DASHES = \"-------------\";\n-\n     private static final long serialVersionUID = 1L;\n \n     @Inject\n@@ -56,7 +54,6 @@ public class LogicStepEditor implements Serializable {\n \n     @Inject\n     private Messages messages;\n-\n     private String script;\n     private String name;\n     private String output;\n@@ -65,9 +62,9 @@ public class LogicStepEditor implements Serializable {\n     private ScriptStep step;\n     private String buttonLabel = ADD_LABEL;\n     private ScriptStep previousRequest = null;\n-\n     private boolean editMode;\n \n+\n     public void editLogicStep(ScriptStep step) {\n         this.step = step;\n         this.editMode = true;\n@@ -76,10 +73,11 @@ public class LogicStepEditor implements Serializable {\n         this.groupName = step.getScriptGroupName();\n         logicTestData = new LogicTestData(step, scriptEditor.getScript());\n         // dd\n-        script = step.getData().stream().filter(requestData -> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst().map(RequestData::getValue).orElseGet(() -> script);\n+        script = step.getData().stream().filter(requestData-> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst().map(RequestData::getValue).orElseGet(()-> script);\n         buttonLabel = EDIT_LABEL;\n     }\n \n+\n     public void insertLogicStep() {\n         this.previousRequest = scriptEditor.getPreviousRequest(null);\n         this.editMode = false;\n@@ -91,6 +89,7 @@ public class LogicStepEditor implements Serializable {\n         buttonLabel = ADD_LABEL;\n     }\n \n+\n     public void addToScript() {\n         if (validate()) {\n             if (editMode) {\n@@ -101,6 +100,7 @@ public class LogicStepEditor implements Serializable {\n         }\n     }\n \n+\n     public void insert() {\n         ScriptStep newStep = ScriptStepFactory.createLogic(name, script);\n         newStep.setScriptGroupName(groupName);\n@@ -112,15 +112,14 @@ public class LogicStepEditor implements Serializable {\n         output = null;\n     }\n \n+\n     public void done() {\n         RequestData rd = new RequestData();\n         rd.setKey(ScriptConstants.SCRIPT);\n         rd.setValue(script);\n         rd.setType(ScriptConstants.SCRIPT);\n-\n         Set<RequestData> datas = new HashSet<RequestData>();\n         datas.add(rd);\n-\n         step.setData(datas);\n         logicTestData.setInStep(step);\n         step.setName(name);\n@@ -134,10 +133,12 @@ public class LogicStepEditor implements Serializable {\n         logicTestData = null;\n     }\n \n+\n     public String getInsertBefore() {\n         return new TankConfig().getLogicStepConfig().getInsertBefore();\n     }\n \n+\n     public void setValuesFromPrevious() {\n         if (previousRequest != null) {\n             logicTestData = new LogicTestData(previousRequest, scriptEditor.getScript());\n@@ -146,7 +147,6 @@ public class LogicStepEditor implements Serializable {\n \n     private boolean validate() {\n         boolean retVal = true;\n-\n         if (StringUtils.isBlank(name)) {\n             retVal = false;\n             messages.error(\"Name cannot be empty\");\n@@ -154,6 +154,7 @@ public class LogicStepEditor implements Serializable {\n         return retVal;\n     }\n \n+\n     public void testScript() {\n         StringOutputLogger outputLogger = new StringOutputLogger();\n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -168,8 +169,7 @@ public class LogicStepEditor implements Serializable {\n             String scriptToRun = new LogicScriptUtil().buildScript(script);\n             logMap(\"Variables\", vars.getVaribleValues(), outputLogger);\n             outputLogger.logLine(DASHES + \" script \" + DASHES);\n-            ScriptIOBean ioBean = new ScriptRunner().runScript(name, scriptToRun,\n-                    new ScriptEngineManager().getEngineByExtension(\"js\"), inputs, outputLogger);\n+            ScriptIOBean ioBean = new ScriptRunner().runScript(name, scriptToRun, new ScriptEngineManager().getEngineByExtension(\"js\"), inputs, outputLogger);\n             logMap(\"Outputs\", ioBean.getOutputs(), outputLogger);\n             logMap(\"Variables\", vars.getVaribleValues(), outputLogger);\n         } catch (Exception e) {\n@@ -180,12 +180,11 @@ public class LogicStepEditor implements Serializable {\n \n     private BaseResponse createResponse() {\n         BaseResponse ret = new BaseResponse() {\n-\n-            @Override\n-            public String getValue(String key) {\n-                return null;\n-            }\n-        };\n+                         @Override\n+                         public String getValue(String key) {\n+                             return null;\n+                         }\n+                     };\n         ret.setResponseBody(logicTestData.getResponseBody());\n         for (Entry<String, String> entry : logicTestData.getResponseHeaders()) {\n             ret.getHeaders().put(entry.getKey(), entry.getValue());\n@@ -195,21 +194,21 @@ public class LogicStepEditor implements Serializable {\n \n     private BaseRequest createRequest() {\n         BaseRequest ret = new BaseRequest(null, null) {\n+                        @Override\n+                        public void setNamespace(String name, String value) {\n \n-            @Override\n-            public void setNamespace(String name, String value) {\n-            }\n+                        }\n \n-            @Override\n-            public void setKey(String key, String value) {\n-            }\n+                        @Override\n+                        public void setKey(String key, String value) {\n \n-            @Override\n-            public String getKey(String key) {\n-                return null;\n-            }\n-        };\n+                        }\n \n+                        @Override\n+                        public String getKey(String key) {\n+                            return null;\n+                        }\n+                          };\n         ret.setBody(logicTestData.getRequestBody());\n         ret.addHeader(\"Test\", \"LoadTest\");\n         for (Entry<String, String> entry : logicTestData.getRequestHeaders()) {\n@@ -230,6 +229,8 @@ public class LogicStepEditor implements Serializable {\n     /**\n      * @return the buttonLabel\n      */\n+\n+\n     public String getButtonLabel() {\n         return buttonLabel;\n     }\n@@ -238,6 +239,8 @@ public class LogicStepEditor implements Serializable {\n      * @param buttonLabel\n      *            the buttonLabel to set\n      */\n+\n+\n     public void setButtonLabel(String buttonLabel) {\n         this.buttonLabel = buttonLabel;\n     }\n@@ -245,6 +248,8 @@ public class LogicStepEditor implements Serializable {\n     /**\n      * @return the script\n      */\n+\n+\n     public String getScript() {\n         return script;\n     }\n@@ -253,6 +258,8 @@ public class LogicStepEditor implements Serializable {\n      * @param script\n      *            the script to set\n      */\n+\n+\n     public void setScript(String script) {\n         this.script = script;\n     }\n@@ -260,6 +267,8 @@ public class LogicStepEditor implements Serializable {\n     /**\n      * @return the name\n      */\n+\n+\n     public String getName() {\n         return name;\n     }\n@@ -267,6 +276,8 @@ public class LogicStepEditor implements Serializable {\n     /**\n      * @return the output\n      */\n+\n+\n     public String getOutput() {\n         return output;\n     }\n@@ -275,6 +286,8 @@ public class LogicStepEditor implements Serializable {\n      * @param name\n      *            the name to set\n      */\n+\n+\n     public void setName(String name) {\n         this.name = name;\n     }\n@@ -282,6 +295,8 @@ public class LogicStepEditor implements Serializable {\n     /**\n      * @return the groupName\n      */\n+\n+\n     public String getGroupName() {\n         return groupName;\n     }\n@@ -290,6 +305,8 @@ public class LogicStepEditor implements Serializable {\n      * @param groupName\n      *            the groupName to set\n      */\n+\n+\n     public void setGroupName(String groupName) {\n         this.groupName = groupName;\n     }\n@@ -297,8 +314,9 @@ public class LogicStepEditor implements Serializable {\n     /**\n      * @return the logicTestData\n      */\n+\n+\n     public LogicTestData getLogicTestData() {\n         return logicTestData;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/92/LogicStepEditor.java\nindex 6f6c5d2ae0e..6f8e236fee0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/92/LogicStepEditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/92/LogicStepEditor.java\n@@ -76,7 +76,8 @@ public class LogicStepEditor implements Serializable {\n         this.groupName = step.getScriptGroupName();\n         logicTestData = new LogicTestData(step, scriptEditor.getScript());\n         // dd\n-        script = step.getData().stream().filter(requestData -> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst().map(RequestData::getValue).orElseGet(() -> script);\n+        script = step .getData().stream().filter(\n+        requestData -> ScriptConstants.SCRIPT.equals(requestData.getKey())).findFirst().map(RequestData::getValue).orElseGet(() -> script);\n         buttonLabel = EDIT_LABEL;\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}