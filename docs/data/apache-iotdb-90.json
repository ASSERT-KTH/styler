{
    "project_name": "apache-iotdb",
    "error_id": "90",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.auth.role;\n\nimport org.apache.iotdb.db.auth.entity.PathPrivilege;\nimport org.apache.iotdb.db.auth.entity.Role;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/90/LocalFileRoleAccessor.java\nindex d7266912342..cc272fd61bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/90/LocalFileRoleAccessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.auth.role;\n \n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/90/LocalFileRoleAccessor.java\nindex d7266912342..1a095864a86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/90/LocalFileRoleAccessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.auth.role;\n \n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n@@ -86,7 +87,7 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n     }\n     FileInputStream inputStream = new FileInputStream(roleProfile);\n     try (DataInputStream dataInputStream =\n-        new DataInputStream(new BufferedInputStream(inputStream))) {\n+             new DataInputStream(new BufferedInputStream(inputStream))) {\n       Role role = new Role();\n       role.setName(IOUtils.readString(dataInputStream, STRING_ENCODING, strBufferLocal));\n \n@@ -116,7 +117,7 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n                 + IoTDBConstant.PROFILE_SUFFIX\n                 + TEMP_SUFFIX);\n     try (BufferedOutputStream outputStream =\n-        new BufferedOutputStream(new FileOutputStream(roleProfile))) {\n+             new BufferedOutputStream(new FileOutputStream(roleProfile))) {\n       try {\n         IOUtils.writeString(outputStream, role.getName(), STRING_ENCODING, encodingBufferLocal);\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 6, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 6, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'+' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/90/LocalFileRoleAccessor.java\nindex d7266912342..93397c47550 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/90/LocalFileRoleAccessor.java\n@@ -23,10 +23,8 @@ import org.apache.iotdb.db.auth.entity.Role;\n import org.apache.iotdb.db.conf.IoTDBConstant;\n import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n import org.apache.iotdb.db.utils.IOUtils;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.BufferedInputStream;\n import java.io.BufferedOutputStream;\n import java.io.DataInputStream;\n@@ -49,11 +47,12 @@ import java.util.Set;\n  * Utf-8 seriesPath[n] bytes Int32 privilege num kn Int32 privilege[n][1] Int32 privilege[n][2] ...\n  * Int32 privilege[n][kn]\n  */\n+\n public class LocalFileRoleAccessor implements IRoleAccessor {\n+\n   private static final Logger logger = LoggerFactory.getLogger(LocalFileRoleAccessor.class);\n   private static final String TEMP_SUFFIX = \".temp\";\n   private static final String STRING_ENCODING = \"utf-8\";\n-\n   private String roleDirPath;\n \n   /**\n@@ -61,7 +60,6 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n    * ThreadLocal for thread safety.\n    */\n   private ThreadLocal<ByteBuffer> encodingBufferLocal = new ThreadLocal<>();\n-\n   private ThreadLocal<byte[]> strBufferLocal = new ThreadLocal<>();\n \n   public LocalFileRoleAccessor(String roleDirPath) {\n@@ -70,14 +68,13 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n \n   @Override\n   public Role loadRole(String rolename) throws IOException {\n-    File roleProfile =\n-        SystemFileFactory.INSTANCE.getFile(\n-            roleDirPath + File.separator + rolename + IoTDBConstant.PROFILE_SUFFIX);\n+    File roleProfile = SystemFileFactory.INSTANCE.getFile(roleDirPath + File.separator\n+    + rolename + IoTDBConstant.PROFILE_SUFFIX);\n     if (!roleProfile.exists() || !roleProfile.isFile()) {\n       // System may crush before a newer file is written, so search for back-up file.\n-      File backProfile =\n-          SystemFileFactory.INSTANCE.getFile(\n-              roleDirPath + File.separator + rolename + IoTDBConstant.PROFILE_SUFFIX + TEMP_SUFFIX);\n+      File backProfile = SystemFileFactory.INSTANCE.getFile(roleDirPath + File.separator\n+      + rolename\n+      + IoTDBConstant.PROFILE_SUFFIX + TEMP_SUFFIX);\n       if (backProfile.exists() && backProfile.isFile()) {\n         roleProfile = backProfile;\n       } else {\n@@ -85,19 +82,15 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n       }\n     }\n     FileInputStream inputStream = new FileInputStream(roleProfile);\n-    try (DataInputStream dataInputStream =\n-        new DataInputStream(new BufferedInputStream(inputStream))) {\n+    try (DataInputStream dataInputStream = new DataInputStream(new BufferedInputStream(inputStream))) {\n       Role role = new Role();\n       role.setName(IOUtils.readString(dataInputStream, STRING_ENCODING, strBufferLocal));\n-\n       int privilegeNum = dataInputStream.readInt();\n       List<PathPrivilege> pathPrivilegeList = new ArrayList<>();\n       for (int i = 0; i < privilegeNum; i++) {\n-        pathPrivilegeList.add(\n-            IOUtils.readPathPrivilege(dataInputStream, STRING_ENCODING, strBufferLocal));\n+        pathPrivilegeList.add(IOUtils.readPathPrivilege(dataInputStream, STRING_ENCODING, strBufferLocal));\n       }\n       role.setPrivilegeList(pathPrivilegeList);\n-\n       return role;\n     } catch (Exception e) {\n       throw new IOException(e);\n@@ -108,25 +101,18 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n \n   @Override\n   public void saveRole(Role role) throws IOException {\n-    File roleProfile =\n-        SystemFileFactory.INSTANCE.getFile(\n-            roleDirPath\n-                + File.separator\n-                + role.getName()\n-                + IoTDBConstant.PROFILE_SUFFIX\n-                + TEMP_SUFFIX);\n-    try (BufferedOutputStream outputStream =\n-        new BufferedOutputStream(new FileOutputStream(roleProfile))) {\n+    File roleProfile = SystemFileFactory.INSTANCE.getFile(roleDirPath + File.separator\n+    + role.getName()\n+    + IoTDBConstant.PROFILE_SUFFIX + TEMP_SUFFIX);\n+    try (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(roleProfile))) {\n       try {\n         IOUtils.writeString(outputStream, role.getName(), STRING_ENCODING, encodingBufferLocal);\n-\n         role.getPrivilegeList().sort(PathPrivilege.REFERENCE_DESCENT_SORTER);\n         int privilegeNum = role.getPrivilegeList().size();\n         IOUtils.writeInt(outputStream, privilegeNum, encodingBufferLocal);\n         for (int i = 0; i < privilegeNum; i++) {\n           PathPrivilege pathPrivilege = role.getPrivilegeList().get(i);\n-          IOUtils.writePathPrivilege(\n-              outputStream, pathPrivilege, STRING_ENCODING, encodingBufferLocal);\n+          IOUtils.writePathPrivilege(outputStream, pathPrivilege, STRING_ENCODING, encodingBufferLocal);\n         }\n         outputStream.flush();\n       } catch (Exception e) {\n@@ -135,26 +121,23 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n     } finally {\n       encodingBufferLocal.remove();\n     }\n-\n-    File oldFile =\n-        SystemFileFactory.INSTANCE.getFile(\n-            roleDirPath + File.separator + role.getName() + IoTDBConstant.PROFILE_SUFFIX);\n+    File oldFile = SystemFileFactory.INSTANCE.getFile(roleDirPath + File.separator\n+    + role.getName()\n+    + IoTDBConstant.PROFILE_SUFFIX);\n     IOUtils.replaceFile(roleProfile, oldFile);\n   }\n \n   @Override\n   public boolean deleteRole(String rolename) throws IOException {\n-    File roleProfile =\n-        SystemFileFactory.INSTANCE.getFile(\n-            roleDirPath + File.separator + rolename + IoTDBConstant.PROFILE_SUFFIX);\n-    File backFile =\n-        SystemFileFactory.INSTANCE.getFile(\n-            roleDirPath + File.separator + rolename + IoTDBConstant.PROFILE_SUFFIX + TEMP_SUFFIX);\n+    File roleProfile = SystemFileFactory.INSTANCE.getFile(roleDirPath + File.separator\n+    + rolename + IoTDBConstant.PROFILE_SUFFIX);\n+    File backFile = SystemFileFactory.INSTANCE.getFile(roleDirPath + File.separator\n+    + rolename\n+    + IoTDBConstant.PROFILE_SUFFIX + TEMP_SUFFIX);\n     if (!roleProfile.exists() && !backFile.exists()) {\n       return false;\n     }\n-    if ((roleProfile.exists() && !roleProfile.delete())\n-        || (backFile.exists() && !backFile.delete())) {\n+    if ((roleProfile.exists() && !roleProfile.delete()) || (backFile.exists() && !backFile.delete())) {\n       throw new IOException(String.format(\"Cannot delete role file of %s\", rolename));\n     }\n     return true;\n@@ -163,10 +146,7 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n   @Override\n   public List<String> listAllRoles() {\n     File roleDir = SystemFileFactory.INSTANCE.getFile(roleDirPath);\n-    String[] names =\n-        roleDir.list(\n-            (dir, name) ->\n-                name.endsWith(IoTDBConstant.PROFILE_SUFFIX) || name.endsWith(TEMP_SUFFIX));\n+    String[] names = roleDir.list((dir, name) -> name.endsWith(IoTDBConstant.PROFILE_SUFFIX) || name.endsWith(TEMP_SUFFIX));\n     List<String> retList = new ArrayList<>();\n     if (names != null) {\n       // in very rare situations, normal file and backup file may exist at the same time\n@@ -188,4 +168,4 @@ public class LocalFileRoleAccessor implements IRoleAccessor {\n       logger.error(\"role info dir {} can not be created\", roleDirPath);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/90/LocalFileRoleAccessor.java\nindex d7266912342..cc272fd61bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/90/LocalFileRoleAccessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.auth.role;\n \n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/90/LocalFileRoleAccessor.java\nindex d7266912342..cc272fd61bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/90/LocalFileRoleAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/90/LocalFileRoleAccessor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.auth.role;\n \n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}