{
    "project_name": "graphfoundation-ongdb",
    "error_id": "811",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/811/KernelImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/811/KernelImpl.java\nindex e687cce2dd2..143c30d96ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/811/KernelImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/811/KernelImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n \n@@ -45,103 +46,102 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.transaction_timeou\n /**\n  * This is the Neo4j Kernel, an implementation of the Kernel API which is an internal component used by Cypher and the\n  * Core API (the API under org.neo4j.graphdb).\n- *\n+ * <p>\n  * WARNING: This class is under transition.\n  *\n  * <h1>Structure</h1>\n- *\n+ * <p>\n  * The Kernel lets you start transactions. The transactions allow you to create \"statements\", which, in turn, operate\n  * against the database. Statements and transactions are separate concepts due to isolation requirements. A single\n  * cypher query will normally use one statement, and there can be multiple statements executed in one transaction.\n- *\n+ * <p>\n  * Please refer to the {@link KernelTransaction} javadoc for details.\n- *\n  */\n public class KernelImpl extends LifecycleAdapter implements InwardKernel\n {\n-    private final KernelTransactions transactions;\n-    private final TransactionHooks hooks;\n-    private final DatabaseHealth health;\n-    private final TransactionMonitor transactionMonitor;\n-    private final Procedures procedures;\n-    private final Config config;\n-\n-    private final NewKernel newKernel;\n-\n-    public KernelImpl( KernelTransactions transactionFactory, TransactionHooks hooks, DatabaseHealth health,\n-            TransactionMonitor transactionMonitor, Procedures procedures, Config config, StorageEngine engine )\n-    {\n-        this.transactions = transactionFactory;\n-        this.hooks = hooks;\n-        this.health = health;\n-        this.transactionMonitor = transactionMonitor;\n-        this.procedures = procedures;\n-        this.config = config;\n-        this.newKernel = new NewKernel( engine, this );\n-    }\n-\n-    @Override\n-    public KernelTransaction newTransaction( Transaction.Type type, LoginContext loginContext )\n-            throws TransactionFailureException\n-    {\n-        return newTransaction( type, loginContext, config.get( transaction_timeout ).toMillis() );\n-    }\n-\n-    @Override\n-    public KernelTransaction newTransaction( Transaction.Type type, LoginContext loginContext, long timeout ) throws\n-            TransactionFailureException\n-    {\n-        health.assertHealthy( TransactionFailureException.class );\n-        KernelTransaction transaction = transactions.newInstance( type, loginContext, timeout );\n-        transactionMonitor.transactionStarted();\n-        return transaction;\n-    }\n-\n-    @Override\n-    public void registerTransactionHook( TransactionHook hook )\n-    {\n-        hooks.register( hook );\n-    }\n-\n-    @Override\n-    public void registerProcedure( CallableProcedure procedure ) throws ProcedureException\n-    {\n-        procedures.register( procedure );\n-    }\n-\n-    @Override\n-    public void registerUserFunction( CallableUserFunction function ) throws ProcedureException\n-    {\n-        procedures.register( function );\n-    }\n-\n-    @Override\n-    public void registerUserAggregationFunction( CallableUserAggregationFunction function ) throws ProcedureException\n-    {\n-        procedures.register( function );\n-    }\n-\n-    @Override\n-    public void start()\n-    {\n-        newKernel.start();\n-    }\n-\n-    @Override\n-    public void stop()\n-    {\n-        newKernel.stop();\n-    }\n-\n-    @Override\n-    public Session beginSession( LoginContext loginContext )\n-    {\n-        return newKernel.beginSession( loginContext );\n-    }\n-\n-    @Override\n-    public Modes modes()\n-    {\n-        return newKernel;\n-    }\n+  private final KernelTransactions transactions;\n+  private final TransactionHooks hooks;\n+  private final DatabaseHealth health;\n+  private final TransactionMonitor transactionMonitor;\n+  private final Procedures procedures;\n+  private final Config config;\n+\n+  private final NewKernel newKernel;\n+\n+  public KernelImpl(KernelTransactions transactionFactory, TransactionHooks hooks, DatabaseHealth health,\n+                    TransactionMonitor transactionMonitor, Procedures procedures, Config config, StorageEngine engine)\n+  {\n+    this.transactions = transactionFactory;\n+    this.hooks = hooks;\n+    this.health = health;\n+    this.transactionMonitor = transactionMonitor;\n+    this.procedures = procedures;\n+    this.config = config;\n+    this.newKernel = new NewKernel(engine, this);\n+  }\n+\n+  @Override\n+  public KernelTransaction newTransaction(Transaction.Type type, LoginContext loginContext)\n+      throws TransactionFailureException\n+  {\n+    return newTransaction(type, loginContext, config.get(transaction_timeout).toMillis());\n+  }\n+\n+  @Override\n+  public KernelTransaction newTransaction(Transaction.Type type, LoginContext loginContext, long timeout) throws\n+      TransactionFailureException\n+  {\n+    health.assertHealthy(TransactionFailureException.class);\n+    KernelTransaction transaction = transactions.newInstance(type, loginContext, timeout);\n+    transactionMonitor.transactionStarted();\n+    return transaction;\n+  }\n+\n+  @Override\n+  public void registerTransactionHook(TransactionHook hook)\n+  {\n+    hooks.register(hook);\n+  }\n+\n+  @Override\n+  public void registerProcedure(CallableProcedure procedure) throws ProcedureException\n+  {\n+    procedures.register(procedure);\n+  }\n+\n+  @Override\n+  public void registerUserFunction(CallableUserFunction function) throws ProcedureException\n+  {\n+    procedures.register(function);\n+  }\n+\n+  @Override\n+  public void registerUserAggregationFunction(CallableUserAggregationFunction function) throws ProcedureException\n+  {\n+    procedures.register(function);\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    newKernel.start();\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    newKernel.stop();\n+  }\n+\n+  @Override\n+  public Session beginSession(LoginContext loginContext)\n+  {\n+    return newKernel.beginSession(loginContext);\n+  }\n+\n+  @Override\n+  public Modes modes()\n+  {\n+    return newKernel;\n+  }\n }\n",
            "diff_size": 90
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/811/KernelImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/811/KernelImpl.java\nindex e687cce2dd2..c3963fac170 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/811/KernelImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/811/KernelImpl.java\n@@ -18,8 +18,6 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n package org.neo4j.kernel.impl.api;\n-\n-\n import org.neo4j.internal.kernel.api.Modes;\n import org.neo4j.internal.kernel.api.Session;\n import org.neo4j.internal.kernel.api.Transaction;\n@@ -81,15 +79,13 @@ public class KernelImpl extends LifecycleAdapter implements InwardKernel\n     }\n \n     @Override\n-    public KernelTransaction newTransaction( Transaction.Type type, LoginContext loginContext )\n-            throws TransactionFailureException\n-    {\n+    public KernelTransaction newTransaction( Transaction.Type type, LoginContext loginContext ) throws TransactionFailureException\n+{\n         return newTransaction( type, loginContext, config.get( transaction_timeout ).toMillis() );\n     }\n \n     @Override\n-    public KernelTransaction newTransaction( Transaction.Type type, LoginContext loginContext, long timeout ) throws\n-            TransactionFailureException\n+    public KernelTransaction newTransaction( Transaction.Type type, LoginContext loginContext, long timeout ) throws TransactionFailureException\n     {\n         health.assertHealthy( TransactionFailureException.class );\n         KernelTransaction transaction = transactions.newInstance( type, loginContext, timeout );\n@@ -144,4 +140,4 @@ public class KernelImpl extends LifecycleAdapter implements InwardKernel\n     {\n         return newKernel;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}