{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3169",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "79",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "268",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3169/DebugUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3169/DebugUtil.java\nindex e58a7c92856..4d6a7d93d6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3169/DebugUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3169/DebugUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.io.BufferedReader;\n@@ -40,348 +41,343 @@ import static org.neo4j.helpers.Format.duration;\n \n public class DebugUtil\n {\n-    private DebugUtil()\n+  private DebugUtil()\n+  {\n+  }\n+\n+  public static void logTrace(String fmt, Object... args)\n+  {\n+    logTrace(2, 5, fmt, args);\n+  }\n+\n+  public static void logTrace(int skip, int limit, String fmt, Object... args)\n+  {\n+    if (enabledAssertions())\n     {\n+      Thread thread = Thread.currentThread();\n+      String threadName = thread.getName();\n+      ThreadGroup group = thread.getThreadGroup();\n+      String groupPart = group != null ? \" in group \" + group.getName() : \"\";\n+      String message = \"[\" + threadName + groupPart + \"] \" + String.format(fmt, args);\n+      TraceLog traceLog = new TraceLog(message);\n+      printLimitedStackTrace(System.err, traceLog, skip, limit);\n     }\n+  }\n \n-    public static void logTrace( String fmt, Object... args )\n+  private static void printLimitedStackTrace(PrintStream out, Throwable cause, int skip, int limit)\n+  {\n+    synchronized (out)\n     {\n-        logTrace( 2, 5, fmt, args );\n-    }\n-\n-    public static void logTrace( int skip, int limit, String fmt, Object... args )\n-    {\n-        if ( enabledAssertions() )\n+      String[] lines = stringify(cause).split(lineSeparator());\n+      for (String line : lines)\n+      {\n+        if (line.startsWith(\"\\tat \"))\n+        {\n+          if (skip > 0)\n+          {\n+            skip--;\n+          } else if (limit > 0)\n+          {\n+            limit--;\n+            out.println(line);\n+          } else\n+          {\n+            break;\n+          }\n+        } else\n         {\n-            Thread thread = Thread.currentThread();\n-            String threadName = thread.getName();\n-            ThreadGroup group = thread.getThreadGroup();\n-            String groupPart = group != null ? \" in group \" + group.getName() : \"\";\n-            String message = \"[\" + threadName + groupPart + \"] \" + String.format( fmt, args );\n-            TraceLog traceLog = new TraceLog( message );\n-            printLimitedStackTrace( System.err, traceLog, skip, limit );\n+          out.println(line);\n         }\n+      }\n     }\n-\n-    private static void printLimitedStackTrace( PrintStream out, Throwable cause, int skip, int limit )\n+  }\n+\n+  public static void printShortStackTrace(Throwable cause, int maxNumberOfStackLines)\n+  {\n+    System.out.println(firstLinesOf(stringify(cause), maxNumberOfStackLines + 1));\n+  }\n+\n+  public static String firstLinesOf(String string, int maxNumberOfLines)\n+  {\n+    // Totally verbose implementation of this functionality :)\n+    StringWriter stringWriter = new StringWriter();\n+    PrintWriter writer = new PrintWriter(stringWriter);\n+    try\n     {\n-        synchronized ( out )\n-        {\n-            String[] lines = stringify( cause ).split( lineSeparator() );\n-            for ( String line : lines )\n-            {\n-                if ( line.startsWith( \"\\tat \" ) )\n-                {\n-                    if ( skip > 0 )\n-                    {\n-                        skip--;\n-                    }\n-                    else if ( limit > 0 )\n-                    {\n-                        limit--;\n-                        out.println( line );\n-                    }\n-                    else\n-                    {\n-                        break;\n-                    }\n-                }\n-                else\n-                {\n-                    out.println( line );\n-                }\n-            }\n-        }\n+      BufferedReader reader = new BufferedReader(new StringReader(string));\n+      String line = null;\n+      for (int count = 0; (line = reader.readLine()) != null && count < maxNumberOfLines;\n+           count++)\n+      {\n+        writer.println(line);\n+      }\n+      writer.close();\n+      return stringWriter.getBuffer().toString();\n+    } catch (IOException e)\n+    {\n+      throw new RuntimeException(\"Can't happen\", e);\n     }\n+  }\n \n-    public static void printShortStackTrace( Throwable cause, int maxNumberOfStackLines )\n+  public static boolean stackTraceContains(Thread thread, Predicate<StackTraceElement> predicate)\n+  {\n+    for (StackTraceElement element : thread.getStackTrace())\n     {\n-        System.out.println( firstLinesOf( stringify( cause ), maxNumberOfStackLines + 1 ) );\n+      if (predicate.test(element))\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n+\n+  public static boolean currentStackTraceContains(Predicate<StackTraceElement> predicate)\n+  {\n+    return stackTraceContains(Thread.currentThread(), predicate);\n+  }\n+\n+  public static Predicate<StackTraceElement> classNameIs(final String className)\n+  {\n+    return item -> item.getClassName().equals(className);\n+  }\n+\n+  public static Predicate<StackTraceElement> classNameContains(final String classNamePart)\n+  {\n+    return item -> item.getClassName().contains(classNamePart);\n+  }\n+\n+  public static Predicate<StackTraceElement> classIs(final Class<?> cls)\n+  {\n+    return item -> item.getClassName().equals(cls.getName());\n+  }\n+\n+  public static Predicate<StackTraceElement> classNameAndMethodAre(final String className,\n+                                                                   final String methodName)\n+  {\n+    return item -> item.getClassName().equals(className) && item.getMethodName().equals(methodName);\n+  }\n+\n+  public static Predicate<StackTraceElement> classAndMethodAre(final Class<?> cls, final String methodName)\n+  {\n+    return item -> item.getClassName().equals(cls.getName()) && item.getMethodName().equals(methodName);\n+  }\n+\n+  public static Predicate<StackTraceElement> methodIs(String methodName)\n+  {\n+    return item -> item.getMethodName().equals(methodName);\n+  }\n+\n+  public static class StackTracer\n+  {\n+    private final Map<CallStack, AtomicInteger> uniqueStackTraces = new HashMap<>();\n+    private boolean considerMessages = true;\n \n-    public static String firstLinesOf( String string, int maxNumberOfLines )\n+    /**\n+     * Returns {@link AtomicInteger} for the unique stack trace provided. It gets updated\n+     * as more are added.\n+     */\n+    public AtomicInteger add(Throwable t)\n     {\n-        // Totally verbose implementation of this functionality :)\n-        StringWriter stringWriter = new StringWriter();\n-        PrintWriter writer = new PrintWriter( stringWriter );\n-        try\n-        {\n-            BufferedReader reader = new BufferedReader( new StringReader( string ) );\n-            String line = null;\n-            for ( int count = 0; ( line = reader.readLine() ) != null && count < maxNumberOfLines;\n-                    count++ )\n-            {\n-                writer.println( line );\n-            }\n-            writer.close();\n-            return stringWriter.getBuffer().toString();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( \"Can't happen\", e );\n-        }\n+      CallStack key = new CallStack(t, considerMessages);\n+      AtomicInteger count = uniqueStackTraces.computeIfAbsent(key, k -> new AtomicInteger());\n+      count.incrementAndGet();\n+      return count;\n     }\n \n-    public static boolean stackTraceContains( Thread thread, Predicate<StackTraceElement> predicate )\n+    public void print(PrintStream out, int interestThreshold)\n     {\n-        for ( StackTraceElement element : thread.getStackTrace() )\n+      System.out.println(\"Printing stack trace counts:\");\n+      long total = 0;\n+      for (Map.Entry<CallStack, AtomicInteger> entry : uniqueStackTraces.entrySet())\n+      {\n+        if (entry.getValue().get() >= interestThreshold)\n         {\n-            if ( predicate.test( element ) )\n-            {\n-                return true;\n-            }\n+          out.println(entry.getValue() + \" times:\");\n+          entry.getKey().stackTrace.printStackTrace(out);\n         }\n-        return false;\n+        total += entry.getValue().get();\n+      }\n+      out.println(\"------\");\n+      out.println(\"Total:\" + total);\n     }\n \n-    public static boolean currentStackTraceContains( Predicate<StackTraceElement> predicate )\n+    public StackTracer printAtShutdown(final PrintStream out, final int interestThreshold)\n     {\n-        return stackTraceContains( Thread.currentThread(), predicate );\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> print(out, interestThreshold)));\n+      return this;\n     }\n \n-    public static Predicate<StackTraceElement> classNameIs( final String className )\n+    public StackTracer ignoreMessages()\n     {\n-        return item -> item.getClassName().equals( className );\n+      considerMessages = false;\n+      return this;\n     }\n+  }\n \n-    public static Predicate<StackTraceElement> classNameContains( final String classNamePart )\n-    {\n-        return item -> item.getClassName().contains( classNamePart );\n-    }\n+  public static class CallStack\n+  {\n+    private final String message;\n+    private final Throwable stackTrace;\n+    private final StackTraceElement[] elements;\n+    private final boolean considerMessage;\n \n-    public static Predicate<StackTraceElement> classIs( final Class<?> cls )\n+    public CallStack(Throwable stackTrace, boolean considerMessage)\n     {\n-        return item -> item.getClassName().equals( cls.getName() );\n+      this.message = stackTrace.getMessage();\n+      this.stackTrace = stackTrace;\n+      this.considerMessage = considerMessage;\n+      this.elements = stackTrace.getStackTrace();\n     }\n \n-    public static Predicate<StackTraceElement> classNameAndMethodAre( final String className,\n-            final String methodName )\n+    public CallStack(StackTraceElement[] elements, String message)\n     {\n-        return item -> item.getClassName().equals( className ) && item.getMethodName().equals( methodName );\n+      this.message = message;\n+      this.stackTrace = null;\n+      this.elements = elements;\n+      this.considerMessage = true;\n     }\n \n-    public static Predicate<StackTraceElement> classAndMethodAre( final Class<?> cls, final String methodName )\n+    @Override\n+    public int hashCode()\n     {\n-        return item -> item.getClassName().equals( cls.getName() ) && item.getMethodName().equals( methodName );\n+      int hashCode = message == null || !considerMessage ? 31 : message.hashCode();\n+      for (StackTraceElement element : elements)\n+      {\n+        hashCode = hashCode * 9 + element.hashCode();\n+      }\n+      return hashCode;\n     }\n \n-    public static Predicate<StackTraceElement> methodIs( String methodName )\n+    @Override\n+    public boolean equals(Object obj)\n     {\n-        return item -> item.getMethodName().equals( methodName );\n-    }\n+      if (!(obj instanceof CallStack))\n+      {\n+        return false;\n+      }\n \n-    public static class StackTracer\n-    {\n-        private final Map<CallStack, AtomicInteger> uniqueStackTraces = new HashMap<>();\n-        private boolean considerMessages = true;\n-\n-        /**\n-         * Returns {@link AtomicInteger} for the unique stack trace provided. It gets updated\n-         * as more are added.\n-         */\n-        public AtomicInteger add( Throwable t )\n+      CallStack o = (CallStack) obj;\n+      if (considerMessage)\n+      {\n+        if (message == null)\n         {\n-            CallStack key = new CallStack( t, considerMessages );\n-            AtomicInteger count = uniqueStackTraces.computeIfAbsent( key, k -> new AtomicInteger() );\n-            count.incrementAndGet();\n-            return count;\n-        }\n-\n-        public void print( PrintStream out, int interestThreshold )\n+          if (o.message != null)\n+          {\n+            return false;\n+          }\n+        } else if (!message.equals(o.message))\n         {\n-            System.out.println( \"Printing stack trace counts:\" );\n-            long total = 0;\n-            for ( Map.Entry<CallStack, AtomicInteger> entry : uniqueStackTraces.entrySet() )\n-            {\n-                if ( entry.getValue().get() >= interestThreshold )\n-                {\n-                    out.println( entry.getValue() + \" times:\" );\n-                    entry.getKey().stackTrace.printStackTrace( out );\n-                }\n-                total += entry.getValue().get();\n-            }\n-            out.println( \"------\" );\n-            out.println( \"Total:\" + total );\n+          return false;\n         }\n-\n-        public StackTracer printAtShutdown( final PrintStream out, final int interestThreshold )\n-        {\n-            Runtime.getRuntime().addShutdownHook( new Thread( () -> print( out, interestThreshold ) ) );\n-            return this;\n-        }\n-\n-        public StackTracer ignoreMessages()\n+      }\n+      if (elements.length != o.elements.length)\n+      {\n+        return false;\n+      }\n+      for (int i = 0; i < elements.length; i++)\n+      {\n+        if (!elements[i].equals(o.elements[i]))\n         {\n-            considerMessages = false;\n-            return this;\n+          return false;\n         }\n+      }\n+      return true;\n     }\n \n-    public static class CallStack\n+    @Override\n+    public String toString()\n     {\n-        private final String message;\n-        private final Throwable stackTrace;\n-        private final StackTraceElement[] elements;\n-        private final boolean considerMessage;\n-\n-        public CallStack( Throwable stackTrace, boolean considerMessage )\n-        {\n-            this.message = stackTrace.getMessage();\n-            this.stackTrace = stackTrace;\n-            this.considerMessage = considerMessage;\n-            this.elements = stackTrace.getStackTrace();\n-        }\n-\n-        public CallStack( StackTraceElement[] elements, String message )\n-        {\n-            this.message = message;\n-            this.stackTrace = null;\n-            this.elements = elements;\n-            this.considerMessage = true;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            int hashCode = message == null || !considerMessage ? 31 : message.hashCode();\n-            for ( StackTraceElement element : elements )\n-            {\n-                hashCode = hashCode * 9 + element.hashCode();\n-            }\n-            return hashCode;\n-        }\n+      StringBuilder builder = new StringBuilder();\n+      builder.append(stackTrace != null ? stackTrace.getClass().getName() + \": \" : \"\")\n+          .append(message != null ? message : \"\");\n+      for (StackTraceElement element : elements)\n+      {\n+        builder.append(format(\"%n\")).append(\"    at \").append(element.toString());\n+      }\n+      return builder.toString();\n+    }\n+  }\n+\n+  private static boolean enabledAssertions()\n+  {\n+    boolean enabled = false;\n+    //noinspection AssertWithSideEffects,ConstantConditions\n+    assert enabled = true : \"A trick to set this variable to true if assertions are enabled\";\n+    //noinspection ConstantConditions\n+    return enabled;\n+  }\n+\n+  /**\n+   * Super simple utility for determining where most time is spent when you don't know where to even start.\n+   * It could be used to home in on right place in a test or in a sequence of operations or similar.\n+   */\n+  public abstract static class Timer\n+  {\n+    private final TimeUnit unit;\n+    private long startTime;\n+\n+    protected Timer(TimeUnit unit)\n+    {\n+      this.unit = unit;\n+      this.startTime = currentTime();\n+    }\n \n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            if ( !( obj instanceof CallStack) )\n-            {\n-                return false;\n-            }\n-\n-            CallStack o = (CallStack) obj;\n-            if ( considerMessage )\n-            {\n-                if ( message == null )\n-                {\n-                    if ( o.message != null )\n-                    {\n-                        return false;\n-                    }\n-                }\n-                else if ( !message.equals( o.message ) )\n-                {\n-                    return false;\n-                }\n-            }\n-            if ( elements.length != o.elements.length )\n-            {\n-                return false;\n-            }\n-            for ( int i = 0; i < elements.length; i++ )\n-            {\n-                if ( !elements[i].equals( o.elements[i] ) )\n-                {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n+    protected abstract long currentTime();\n \n-        @Override\n-        public String toString()\n-        {\n-            StringBuilder builder = new StringBuilder();\n-            builder.append( stackTrace != null ? stackTrace.getClass().getName() + \": \" : \"\" )\n-                    .append( message != null ? message : \"\" );\n-            for ( StackTraceElement element : elements )\n-            {\n-                builder.append( format( \"%n\" ) ).append( \"    at \" ).append( element.toString() );\n-            }\n-            return builder.toString();\n-        }\n+    public void reset()\n+    {\n+      startTime = currentTime();\n     }\n \n-    private static boolean enabledAssertions()\n+    public void at(String point)\n     {\n-        boolean enabled = false;\n-        //noinspection AssertWithSideEffects,ConstantConditions\n-        assert enabled = true : \"A trick to set this variable to true if assertions are enabled\";\n-        //noinspection ConstantConditions\n-        return enabled;\n+      long duration = currentTime() - startTime;\n+      System.out.println(duration(unit.toMillis(duration)) + \" @ \" + point);\n+      startTime = currentTime();\n     }\n \n-    /**\n-     * Super simple utility for determining where most time is spent when you don't know where to even start.\n-     * It could be used to home in on right place in a test or in a sequence of operations or similar.\n-     */\n-    public abstract static class Timer\n+    public static Timer millis()\n     {\n-        private final TimeUnit unit;\n-        private long startTime;\n-\n-        protected Timer( TimeUnit unit )\n-        {\n-            this.unit = unit;\n-            this.startTime = currentTime();\n-        }\n-\n-        protected abstract long currentTime();\n-\n-        public void reset()\n-        {\n-            startTime = currentTime();\n-        }\n-\n-        public void at( String point )\n-        {\n-            long duration = currentTime() - startTime;\n-            System.out.println( duration( unit.toMillis( duration ) ) + \" @ \" + point );\n-            startTime = currentTime();\n-        }\n-\n-        public static Timer millis()\n-        {\n-            return new Millis();\n-        }\n-\n-        private static class Millis extends Timer\n-        {\n-            Millis()\n-            {\n-                super( TimeUnit.MILLISECONDS );\n-            }\n-\n-            @Override\n-            protected long currentTime()\n-            {\n-                return currentTimeMillis();\n-            }\n-        }\n+      return new Millis();\n+    }\n \n-        public static Timer nanos()\n-        {\n-            return new Nanos();\n-        }\n+    private static class Millis extends Timer\n+    {\n+      Millis()\n+      {\n+        super(TimeUnit.MILLISECONDS);\n+      }\n+\n+      @Override\n+      protected long currentTime()\n+      {\n+        return currentTimeMillis();\n+      }\n+    }\n \n-        private static class Nanos extends Timer\n-        {\n-            Nanos()\n-            {\n-                super( TimeUnit.NANOSECONDS );\n-            }\n-\n-            @Override\n-            protected long currentTime()\n-            {\n-                return nanoTime();\n-            }\n-        }\n+    public static Timer nanos()\n+    {\n+      return new Nanos();\n     }\n \n-    public static long time( long startTime, String message )\n+    private static class Nanos extends Timer\n     {\n-        System.out.println( duration( currentTimeMillis() - startTime ) + \": \" + message );\n-        return currentTimeMillis();\n+      Nanos()\n+      {\n+        super(TimeUnit.NANOSECONDS);\n+      }\n+\n+      @Override\n+      protected long currentTime()\n+      {\n+        return nanoTime();\n+      }\n     }\n+  }\n+\n+  public static long time(long startTime, String message)\n+  {\n+    System.out.println(duration(currentTimeMillis() - startTime) + \": \" + message);\n+    return currentTimeMillis();\n+  }\n }\n",
            "diff_size": 438
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3169/DebugUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3169/DebugUtil.java\nindex e58a7c92856..7b4126949b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3169/DebugUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3169/DebugUtil.java\n@@ -108,8 +108,7 @@ public class DebugUtil\n         {\n             BufferedReader reader = new BufferedReader( new StringReader( string ) );\n             String line = null;\n-            for ( int count = 0; ( line = reader.readLine() ) != null && count < maxNumberOfLines;\n-                    count++ )\n+            for ( int count = 0; ( line = reader.readLine() ) != null && count < maxNumberOfLines; count++ )\n             {\n                 writer.println( line );\n             }\n@@ -154,8 +153,7 @@ public class DebugUtil\n         return item -> item.getClassName().equals( cls.getName() );\n     }\n \n-    public static Predicate<StackTraceElement> classNameAndMethodAre( final String className,\n-            final String methodName )\n+    public static Predicate<StackTraceElement> classNameAndMethodAre( final String className, final String methodName )\n     {\n         return item -> item.getClassName().equals( className ) && item.getMethodName().equals( methodName );\n     }\n@@ -172,7 +170,7 @@ public class DebugUtil\n \n     public static class StackTracer\n     {\n-        private final Map<CallStack, AtomicInteger> uniqueStackTraces = new HashMap<>();\n+        private final Map<CallStack,AtomicInteger> uniqueStackTraces = new HashMap<>();\n         private boolean considerMessages = true;\n \n         /**\n@@ -191,14 +189,15 @@ public class DebugUtil\n         {\n             System.out.println( \"Printing stack trace counts:\" );\n             long total = 0;\n-            for ( Map.Entry<CallStack, AtomicInteger> entry : uniqueStackTraces.entrySet() )\n+            for ( Map.Entry<CallStack,AtomicInteger> entry : uniqueStackTraces.entrySet() )\n             {\n                 if ( entry.getValue().get() >= interestThreshold )\n                 {\n                     out.println( entry.getValue() + \" times:\" );\n                     entry.getKey().stackTrace.printStackTrace( out );\n                 }\n-                total += entry.getValue().get();\n+\n+total += entry.getValue().get();\n             }\n             out.println( \"------\" );\n             out.println( \"Total:\" + total );\n@@ -248,7 +247,8 @@ public class DebugUtil\n             {\n                 hashCode = hashCode * 9 + element.hashCode();\n             }\n-            return hashCode;\n+\n+return hashCode;\n         }\n \n         @Override\n@@ -292,13 +292,13 @@ public class DebugUtil\n         public String toString()\n         {\n             StringBuilder builder = new StringBuilder();\n-            builder.append( stackTrace != null ? stackTrace.getClass().getName() + \": \" : \"\" )\n-                    .append( message != null ? message : \"\" );\n-            for ( StackTraceElement element : elements )\n+            builder.append( stackTrace != null ? stackTrace.getClass().getName() + \": \" : \"\" ).append( message != null ? message : \"\" );\n+for ( StackTraceElement element : elements )\n             {\n                 builder.append( format( \"%n\" ) ).append( \"    at \" ).append( element.toString() );\n             }\n-            return builder.toString();\n+\n+return builder.toString();\n         }\n     }\n \n@@ -384,4 +384,4 @@ public class DebugUtil\n         System.out.println( duration( currentTimeMillis() - startTime ) + \": \" + message );\n         return currentTimeMillis();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}