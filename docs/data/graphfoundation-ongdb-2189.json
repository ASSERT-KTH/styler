{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2189",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2189/Variables.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2189/Variables.java\nindex 0d2bfcd387e..abbe8b192ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2189/Variables.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2189/Variables.java\n@@ -17,60 +17,61 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell;\n \n import java.util.regex.Pattern;\n \n public class Variables\n {\n-    /**\n-     * The {@link org.neo4j.shell.Session} key to use to store the current node and working\n-     * directory (i.e. the path which the client got to it).\n-     */\n-    public static final String WORKING_DIR_KEY = \"WORKING_DIR\";\n-    public static final String CURRENT_KEY = \"CURRENT_DIR\";\n-    private static final Pattern IDENTIFIER = Pattern.compile( \"^\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*$\" );\n-    public static final String TX_COUNT = \"TX_COUNT\";\n-    /**\n-     * The session key for the prompt key, just like in Bash.\n-     */\n-    public static final String PROMPT_KEY = \"PS1\";\n-    /**\n-     * The session key for whether or not to print stack traces for exceptions.\n-     */\n-    public static final String STACKTRACES_KEY = \"STACKTRACES\";\n-    /**\n-     * When displaying node ids this variable is also used for getting an\n-     * appropriate property value from that node to display as the title.\n-     * This variable can contain many property keys (w/ regex) separated by\n-     * comma prioritized in order.\n-     */\n-    public static final String TITLE_KEYS_KEY = \"TITLE_KEYS\";\n-    /**\n-     * The maximum length of titles to be displayed.\n-     */\n-    public static final String TITLE_MAX_LENGTH = \"TITLE_MAX_LENGTH\";\n+  /**\n+   * The {@link org.neo4j.shell.Session} key to use to store the current node and working\n+   * directory (i.e. the path which the client got to it).\n+   */\n+  public static final String WORKING_DIR_KEY = \"WORKING_DIR\";\n+  public static final String CURRENT_KEY = \"CURRENT_DIR\";\n+  private static final Pattern IDENTIFIER = Pattern.compile(\"^\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*$\");\n+  public static final String TX_COUNT = \"TX_COUNT\";\n+  /**\n+   * The session key for the prompt key, just like in Bash.\n+   */\n+  public static final String PROMPT_KEY = \"PS1\";\n+  /**\n+   * The session key for whether or not to print stack traces for exceptions.\n+   */\n+  public static final String STACKTRACES_KEY = \"STACKTRACES\";\n+  /**\n+   * When displaying node ids this variable is also used for getting an\n+   * appropriate property value from that node to display as the title.\n+   * This variable can contain many property keys (w/ regex) separated by\n+   * comma prioritized in order.\n+   */\n+  public static final String TITLE_KEYS_KEY = \"TITLE_KEYS\";\n+  /**\n+   * The maximum length of titles to be displayed.\n+   */\n+  public static final String TITLE_MAX_LENGTH = \"TITLE_MAX_LENGTH\";\n \n-    private Variables()\n-    {\n-    }\n+  private Variables()\n+  {\n+  }\n \n-    /**\n-     * @param key a variable name\n-     * @throws org.neo4j.shell.ShellException if key doesn't match a valid identifier name\n-     */\n-    public static void checkIsValidVariableName( String key ) throws\n-        ShellException\n+  /**\n+   * @param key a variable name\n+   * @throws org.neo4j.shell.ShellException if key doesn't match a valid identifier name\n+   */\n+  public static void checkIsValidVariableName(String key) throws\n+      ShellException\n+  {\n+    if (!isIdentifier(key))\n     {\n-        if ( !isIdentifier( key ) )\n-        {\n-            throw new ShellException( key + \" is no valid variable name. May only contain \" +\n-                    \"alphanumeric characters and underscores.\" );\n-        }\n+      throw new ShellException(key + \" is no valid variable name. May only contain \" +\n+          \"alphanumeric characters and underscores.\");\n     }\n+  }\n \n-    public static boolean isIdentifier( String key )\n-    {\n-        return IDENTIFIER.matcher( key ).matches();\n-    }\n+  public static boolean isIdentifier(String key)\n+  {\n+    return IDENTIFIER.matcher(key).matches();\n+  }\n }\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2189/Variables.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2189/Variables.java\nindex 0d2bfcd387e..487d6bfbc96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2189/Variables.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2189/Variables.java\n@@ -28,25 +28,30 @@ public class Variables\n      * directory (i.e. the path which the client got to it).\n      */\n     public static final String WORKING_DIR_KEY = \"WORKING_DIR\";\n-    public static final String CURRENT_KEY = \"CURRENT_DIR\";\n+\n+public static final String CURRENT_KEY = \"CURRENT_DIR\";\n     private static final Pattern IDENTIFIER = Pattern.compile( \"^\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*$\" );\n     public static final String TX_COUNT = \"TX_COUNT\";\n-    /**\n+\n+/**\n      * The session key for the prompt key, just like in Bash.\n      */\n     public static final String PROMPT_KEY = \"PS1\";\n-    /**\n+\n+/**\n      * The session key for whether or not to print stack traces for exceptions.\n      */\n     public static final String STACKTRACES_KEY = \"STACKTRACES\";\n-    /**\n+\n+/**\n      * When displaying node ids this variable is also used for getting an\n      * appropriate property value from that node to display as the title.\n      * This variable can contain many property keys (w/ regex) separated by\n      * comma prioritized in order.\n      */\n     public static final String TITLE_KEYS_KEY = \"TITLE_KEYS\";\n-    /**\n+\n+/**\n      * The maximum length of titles to be displayed.\n      */\n     public static final String TITLE_MAX_LENGTH = \"TITLE_MAX_LENGTH\";\n@@ -59,18 +64,16 @@ public class Variables\n      * @param key a variable name\n      * @throws org.neo4j.shell.ShellException if key doesn't match a valid identifier name\n      */\n-    public static void checkIsValidVariableName( String key ) throws\n-        ShellException\n-    {\n+    public static void checkIsValidVariableName( String key ) throws ShellException\n+{\n         if ( !isIdentifier( key ) )\n         {\n-            throw new ShellException( key + \" is no valid variable name. May only contain \" +\n-                    \"alphanumeric characters and underscores.\" );\n-        }\n+            throw new ShellException( key + \" is no valid variable name. May only contain \" + \"alphanumeric characters and underscores.\" );\n+    }\n     }\n \n     public static boolean isIdentifier( String key )\n     {\n         return IDENTIFIER.matcher( key ).matches();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}