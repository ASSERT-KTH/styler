{
    "project_name": "codefollower-H2-Research",
    "error_id": "545",
    "information": {
        "errors": [
            {
                "line": "100",
                "column": "9",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            querySQL = selectSQL;\n        } else {\n        \t//\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n    \t\t//org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n    \t\t//\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n            ArrayList<Parameter> params = select.getParameters();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "102",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/545/CreateView.java\nindex 418222ec7e9..5c7e333137a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/545/CreateView.java\n@@ -97,8 +97,8 @@ public class CreateView extends SchemaCommand {\n         if (select == null) {\n             querySQL = selectSQL;\n         } else {\n-        \t//\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n-    \t\t//org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n+        //\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n+        //org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n     \t\t//\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n             ArrayList<Parameter> params = select.getParameters();\n             if (params != null && !params.isEmpty()) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "139",
                    "column": "17",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/545/CreateView.java\nindex 418222ec7e9..a6654aad541 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/545/CreateView.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import java.util.ArrayList;\n+\n import org.h2.api.ErrorCode;\n import org.h2.command.CommandInterface;\n import org.h2.command.dml.Query;\n@@ -26,86 +28,86 @@ import org.h2.value.Value;\n  */\n public class CreateView extends SchemaCommand {\n \n-    private Query select;\n-    private String viewName;\n-    private boolean ifNotExists;\n-    private String selectSQL;\n-    private String[] columnNames;\n-    private String comment;\n-    private boolean orReplace;\n-    private boolean force;\n-    private boolean isTableExpression;\n-\n-    public CreateView(Session session, Schema schema) {\n-        super(session, schema);\n-    }\n-\n-    public void setViewName(String name) {\n-        viewName = name;\n-    }\n-\n-    public void setSelect(Query select) {\n-        this.select = select;\n-    }\n-\n-    public void setIfNotExists(boolean ifNotExists) {\n-        this.ifNotExists = ifNotExists;\n-    }\n-\n-    public void setSelectSQL(String selectSQL) {\n-        this.selectSQL = selectSQL;\n-    }\n-\n-    public void setColumnNames(String[] cols) {\n-        this.columnNames = cols;\n-    }\n-\n-    public void setComment(String comment) {\n-        this.comment = comment;\n-    }\n-\n-    public void setOrReplace(boolean orReplace) {\n-        this.orReplace = orReplace;\n+  private Query select;\n+  private String viewName;\n+  private boolean ifNotExists;\n+  private String selectSQL;\n+  private String[] columnNames;\n+  private String comment;\n+  private boolean orReplace;\n+  private boolean force;\n+  private boolean isTableExpression;\n+\n+  public CreateView(Session session, Schema schema) {\n+    super(session, schema);\n+  }\n+\n+  public void setViewName(String name) {\n+    viewName = name;\n+  }\n+\n+  public void setSelect(Query select) {\n+    this.select = select;\n+  }\n+\n+  public void setIfNotExists(boolean ifNotExists) {\n+    this.ifNotExists = ifNotExists;\n+  }\n+\n+  public void setSelectSQL(String selectSQL) {\n+    this.selectSQL = selectSQL;\n+  }\n+\n+  public void setColumnNames(String[] cols) {\n+    this.columnNames = cols;\n+  }\n+\n+  public void setComment(String comment) {\n+    this.comment = comment;\n+  }\n+\n+  public void setOrReplace(boolean orReplace) {\n+    this.orReplace = orReplace;\n+  }\n+\n+  public void setForce(boolean force) {\n+    this.force = force;\n+  }\n+\n+  public void setTableExpression(boolean isTableExpression) {\n+    this.isTableExpression = isTableExpression;\n+  }\n+\n+  @Override\n+  public int update() {\n+    session.commit(true);\n+    session.getUser().checkAdmin();\n+    Database db = session.getDatabase();\n+    TableView view = null;\n+    Table old = getSchema().findTableOrView(session, viewName);\n+    if (old != null) {\n+      if (ifNotExists) {\n+        return 0;\n+      }\n+      if (!orReplace || TableType.VIEW != old.getTableType()) {\n+        throw DbException.get(ErrorCode.VIEW_ALREADY_EXISTS_1, viewName);\n+      }\n+      view = (TableView) old;\n     }\n-\n-    public void setForce(boolean force) {\n-        this.force = force;\n+    int id = getObjectId();\n+    String querySQL;\n+    if (select == null) {\n+      querySQL = selectSQL;\n+    } else {\n+      //\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n+      //org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n+      //\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n+      ArrayList<Parameter> params = select.getParameters();\n+      if (params != null && !params.isEmpty()) {\n+        throw DbException.getUnsupportedException(\"parameters in views\");\n+      }\n+      querySQL = select.getPlanSQL();\n     }\n-\n-    public void setTableExpression(boolean isTableExpression) {\n-        this.isTableExpression = isTableExpression;\n-    }\n-\n-    @Override\n-    public int update() {\n-        session.commit(true);\n-        session.getUser().checkAdmin();\n-        Database db = session.getDatabase();\n-        TableView view = null;\n-        Table old = getSchema().findTableOrView(session, viewName);\n-        if (old != null) {\n-            if (ifNotExists) {\n-                return 0;\n-            }\n-            if (!orReplace || TableType.VIEW != old.getTableType()) {\n-                throw DbException.get(ErrorCode.VIEW_ALREADY_EXISTS_1, viewName);\n-            }\n-            view = (TableView) old;\n-        }\n-        int id = getObjectId();\n-        String querySQL;\n-        if (select == null) {\n-            querySQL = selectSQL;\n-        } else {\n-        \t//\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n-    \t\t//org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n-    \t\t//\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n-            ArrayList<Parameter> params = select.getParameters();\n-            if (params != null && !params.isEmpty()) {\n-                throw DbException.getUnsupportedException(\"parameters in views\");\n-            }\n-            querySQL = select.getPlanSQL();\n-        }\n //<<<<<<< HEAD\n //        // The view creates a Prepared command object, which belongs to a\n //        // session, so we pass the system session down.\n@@ -141,51 +143,51 @@ public class CreateView extends SchemaCommand {\n //            } finally {\n //                sysSession.setCurrentSchema(db.getSchema(Constants.SCHEMA_MAIN));\n //=======\n-        Column[] columnTemplatesAsUnknowns = null;\n-        Column[] columnTemplatesAsStrings = null;\n-        if (columnNames != null) {\n-            columnTemplatesAsUnknowns = new Column[columnNames.length];\n-            columnTemplatesAsStrings = new Column[columnNames.length];\n-            for (int i = 0; i < columnNames.length; ++i) {\n-                // non table expressions are fine to use unknown column type\n-                columnTemplatesAsUnknowns[i] = new Column(columnNames[i], Value.UNKNOWN);\n-                // table expressions can't have unknown types - so we use string instead\n-                columnTemplatesAsStrings[i] = new Column(columnNames[i], Value.STRING);\n-            }\n-        }\n-        if (view == null) {\n-            if (isTableExpression) {\n-                view = TableView.createTableViewMaybeRecursive(getSchema(), id, viewName, querySQL, null,\n-                        columnTemplatesAsStrings, session, false /* literalsChecked */, isTableExpression,\n-                        false/*isTemporary*/, db);\n-            } else {\n-                view = new TableView(getSchema(), id, viewName, querySQL, null, columnTemplatesAsUnknowns, session,\n-                        false/* allow recursive */, false/* literalsChecked */, isTableExpression, false/*temporary*/);\n-            }\n-        } else {\n-            // TODO support isTableExpression in replace function...\n-            view.replace(querySQL, columnTemplatesAsUnknowns, session, false, force, false);\n-            view.setModified();\n-        }\n-        if (comment != null) {\n-            view.setComment(comment);\n-        }\n-        if (old == null) {\n-            db.addSchemaObject(session, view);\n-            db.unlockMeta(session);\n-        } else {\n-            db.updateMeta(session, view);\n-        }\n-\n-        // TODO: if we added any table expressions that aren't used by this view, detect them\n-        // and drop them - otherwise they will leak and never get cleaned up.\n-\n-        return 0;\n+    Column[] columnTemplatesAsUnknowns = null;\n+    Column[] columnTemplatesAsStrings = null;\n+    if (columnNames != null) {\n+      columnTemplatesAsUnknowns = new Column[columnNames.length];\n+      columnTemplatesAsStrings = new Column[columnNames.length];\n+      for (int i = 0; i < columnNames.length; ++i) {\n+        // non table expressions are fine to use unknown column type\n+        columnTemplatesAsUnknowns[i] = new Column(columnNames[i], Value.UNKNOWN);\n+        // table expressions can't have unknown types - so we use string instead\n+        columnTemplatesAsStrings[i] = new Column(columnNames[i], Value.STRING);\n+      }\n     }\n-\n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_VIEW;\n+    if (view == null) {\n+      if (isTableExpression) {\n+        view = TableView.createTableViewMaybeRecursive(getSchema(), id, viewName, querySQL, null,\n+            columnTemplatesAsStrings, session, false /* literalsChecked */, isTableExpression,\n+            false/*isTemporary*/, db);\n+      } else {\n+        view = new TableView(getSchema(), id, viewName, querySQL, null, columnTemplatesAsUnknowns, session,\n+            false/* allow recursive */, false/* literalsChecked */, isTableExpression, false/*temporary*/);\n+      }\n+    } else {\n+      // TODO support isTableExpression in replace function...\n+      view.replace(querySQL, columnTemplatesAsUnknowns, session, false, force, false);\n+      view.setModified();\n+    }\n+    if (comment != null) {\n+      view.setComment(comment);\n+    }\n+    if (old == null) {\n+      db.addSchemaObject(session, view);\n+      db.unlockMeta(session);\n+    } else {\n+      db.updateMeta(session, view);\n     }\n \n+    // TODO: if we added any table expressions that aren't used by this view, detect them\n+    // and drop them - otherwise they will leak and never get cleaned up.\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return CommandInterface.CREATE_VIEW;\n+  }\n+\n }\n",
            "diff_size": 188
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/545/CreateView.java\nindex 418222ec7e9..85a96cc6a74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/545/CreateView.java\n@@ -24,6 +24,8 @@ import org.h2.value.Value;\n  * This class represents the statement\n  * CREATE VIEW\n  */\n+\n+\n public class CreateView extends SchemaCommand {\n \n     private Query select;\n@@ -40,38 +42,47 @@ public class CreateView extends SchemaCommand {\n         super(session, schema);\n     }\n \n+\n     public void setViewName(String name) {\n         viewName = name;\n     }\n \n+\n     public void setSelect(Query select) {\n         this.select = select;\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n+\n     public void setSelectSQL(String selectSQL) {\n         this.selectSQL = selectSQL;\n     }\n \n+\n     public void setColumnNames(String[] cols) {\n         this.columnNames = cols;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n \n+\n     public void setOrReplace(boolean orReplace) {\n         this.orReplace = orReplace;\n     }\n \n+\n     public void setForce(boolean force) {\n         this.force = force;\n     }\n \n+\n     public void setTableExpression(boolean isTableExpression) {\n         this.isTableExpression = isTableExpression;\n     }\n@@ -97,9 +108,9 @@ public class CreateView extends SchemaCommand {\n         if (select == null) {\n             querySQL = selectSQL;\n         } else {\n-        \t//\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n-    \t\t//org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n-    \t\t//\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n+            //\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n+            //org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n+            //\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n             ArrayList<Parameter> params = select.getParameters();\n             if (params != null && !params.isEmpty()) {\n                 throw DbException.getUnsupportedException(\"parameters in views\");\n@@ -134,7 +145,7 @@ public class CreateView extends SchemaCommand {\n ////                view = new TableView(getSchema(), id, viewName, querySQL, null,\n ////                        columnTemplates, sysSession, false);\n ////            } else {\n-////            \t//sysSession = session; //\u6211\u52a0\u4e0a\u7684\n+////                //sysSession = session; //\u6211\u52a0\u4e0a\u7684\n ////                view.replace(querySQL, columnNames, sysSession, false, force);\n ////                view.setModified();\n ////=======\n@@ -155,12 +166,9 @@ public class CreateView extends SchemaCommand {\n         }\n         if (view == null) {\n             if (isTableExpression) {\n-                view = TableView.createTableViewMaybeRecursive(getSchema(), id, viewName, querySQL, null,\n-                        columnTemplatesAsStrings, session, false /* literalsChecked */, isTableExpression,\n-                        false/*isTemporary*/, db);\n+                view = TableView.createTableViewMaybeRecursive(getSchema(), id, viewName, querySQL, null, columnTemplatesAsStrings, session, false /* literalsChecked */, isTableExpression, false/*isTemporary*/, db);\n             } else {\n-                view = new TableView(getSchema(), id, viewName, querySQL, null, columnTemplatesAsUnknowns, session,\n-                        false/* allow recursive */, false/* literalsChecked */, isTableExpression, false/*temporary*/);\n+                view = new TableView(getSchema(), id, viewName, querySQL, null, columnTemplatesAsUnknowns, session, false/* allow recursive */, false/* literalsChecked */, isTableExpression, false/*temporary*/);\n             }\n         } else {\n             // TODO support isTableExpression in replace function...\n@@ -179,7 +187,6 @@ public class CreateView extends SchemaCommand {\n \n         // TODO: if we added any table expressions that aren't used by this view, detect them\n         // and drop them - otherwise they will leak and never get cleaned up.\n-\n         return 0;\n     }\n \n@@ -188,4 +195,4 @@ public class CreateView extends SchemaCommand {\n         return CommandInterface.CREATE_VIEW;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "102",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/545/CreateView.java\nindex 418222ec7e9..5c7e333137a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/545/CreateView.java\n@@ -97,8 +97,8 @@ public class CreateView extends SchemaCommand {\n         if (select == null) {\n             querySQL = selectSQL;\n         } else {\n-        \t//\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n-    \t\t//org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n+        //\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n+        //org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n     \t\t//\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n             ArrayList<Parameter> params = select.getParameters();\n             if (params != null && !params.isEmpty()) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "102",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/545/CreateView.java\nindex 418222ec7e9..4d174614e2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/545/CreateView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/545/CreateView.java\n@@ -97,8 +97,8 @@ public class CreateView extends SchemaCommand {\n         if (select == null) {\n             querySQL = selectSQL;\n         } else {\n-        \t//\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n-    \t\t//org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n+            //\u76ee\u524d\u4e0d\u652f\u6301\u53c2\u6570:\n+        //org.h2.jdbc.JdbcSQLException: Feature not supported: \"parameters in views\"; SQL statement:\n     \t\t//\u5982:CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view (f1,f2) AS SELECT id,name FROM CreateViewTest where id=?\"\n             ArrayList<Parameter> params = select.getParameters();\n             if (params != null && !params.isEmpty()) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}