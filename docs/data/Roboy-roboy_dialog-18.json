{
    "project_name": "Roboy-roboy_dialog",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "60",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public synchronized void updateValue(V value) {\n        if(data.size() >= getMaxLimit()) {\n            data.remove(counter - getMaxLimit());\n        }\n        data.put(generateKey(), value);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler/18/ValueHistory.java\nindex 4f3b1e301b2..273347515bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler/18/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/intellij/18/ValueHistory.java\nindex 4f3b1e301b2..273347515bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/intellij/18/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/naturalize/18/ValueHistory.java\nindex 4f3b1e301b2..4c49f501e66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/naturalize/18/ValueHistory.java\n@@ -44,7 +44,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n         int responseCounter = Math.min(n, data.size());\n         int lastToRetrieve = counter - responseCounter;\n         for (int i = counter - 1; i >= lastToRetrieve; i--) {\n-            responseCounter--;\n+  responseCounter--;\n             response.put(responseCounter, getValue(i));\n         }\n         return response;\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n@@ -110,4 +110,4 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n     public int getNumberOfValuesSinceStart() {\n         return counter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/codebuff/18/ValueHistory.java\nindex 4f3b1e301b2..9730ceaaa5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/codebuff/18/ValueHistory.java\n@@ -5,30 +5,33 @@ import java.util.HashMap;\n /**\n  * HashMap implementation of a value history with unique Integer keys.\n  */\n+\n+\n public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n     /**\n      * This counter tracks the number of values, indices still start from 0.\n      * Reading is allowed without synchronization, modifications only through generateKey().\n      */\n-    private volatile int counter;\n-    private HashMap<Integer, V> data;\n+  private volatile int counter;\n+  private HashMap<Integer, V> data;\n \n-    public ValueHistory() {\n-        data = new HashMap<>();\n-        counter = 0;\n-    }\n+  public ValueHistory() {\n+    data = new HashMap<>();\n+    counter = 0;\n+  }\n \n     /**\n      * @return The last element added to this history.\n      */\n-    @Override\n-    public V getValue() {\n-        if (counter == 0) {\n-            return null;\n-        } else {\n-            return getValue(counter - 1);\n-        }\n+\n+  @Override\n+  public V getValue() {\n+    if (counter == 0) {\n+      return null;\n+    } else {\n+      return getValue(counter - 1);\n     }\n+  }\n \n     /**\n      * Get a copy of the last n entries added to the history.\n@@ -38,30 +41,32 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param n The number of instances to retrieve.\n      * @return A hashmap of n last values added to the history.\n      */\n-    @Override\n-    public synchronized HashMap<Integer, V> getLastNValues(int n) {\n-        HashMap<Integer, V> response = new HashMap<>();\n-        int responseCounter = Math.min(n, data.size());\n-        int lastToRetrieve = counter - responseCounter;\n-        for (int i = counter - 1; i >= lastToRetrieve; i--) {\n-            responseCounter--;\n-            response.put(responseCounter, getValue(i));\n-        }\n-        return response;\n+\n+  @Override\n+  public synchronized HashMap<Integer, V> getLastNValues(int n) {\n+    HashMap<Integer, V> response = new HashMap<>();\n+    int responseCounter = Math.min(n, data.size());\n+    int lastToRetrieve = counter - responseCounter;\n+    for (int i = counter - 1; i >= lastToRetrieve; i--) {\n+      responseCounter--;\n+      response.put(responseCounter, getValue(i));\n     }\n+    return response;\n+  }\n \n     /**\n      * Puts a value into the history in the last place.\n      *\n      * @param value The value to be added.\n      */\n-    @Override\n-    public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n-            data.remove(counter - getMaxLimit());\n-        }\n-        data.put(generateKey(), value);\n+\n+  @Override\n+  public synchronized void updateValue(V value) {\n+    if (data.size() >= getMaxLimit()) {\n+      data.remove(counter - getMaxLimit());\n     }\n+    data.put(generateKey(), value);\n+  }\n \n     /**\n      * Checks if the value is contained in the history.\n@@ -69,31 +74,34 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param value The value to be checked if exists.\n      * @return true if such value is in the history and false otherwise\n      */\n-    @Override\n-    public synchronized boolean contains(V value) {\n-        return data.containsValue(value);\n-    }\n+\n+  @Override\n+  public synchronized boolean contains(V value) {\n+    return data.containsValue(value);\n+  }\n \n     /**\n      * Removes all values from the history.\n      *\n      * @return true if the history was emptied and false otherwise\n      */\n-    @Override\n-    public synchronized boolean purgeHistory() {\n-        data.clear();\n-        counter = 0;\n-        return data.isEmpty();\n-    }\n+\n+  @Override\n+  public synchronized boolean purgeHistory() {\n+    data.clear();\n+    counter = 0;\n+    return data.isEmpty();\n+  }\n \n     /**\n      * Generates a key that is unique through incrementing an internal counter.\n      *\n      * @return A key which is unique in this list instance.\n      */\n-    private synchronized int generateKey() {\n-        return counter++;\n-    }\n+\n+  private synchronized int generateKey() {\n+    return counter++;\n+  }\n \n     /**\n      * In a ValueList, only getValue() and updateValue() directly access the HashMap data.\n@@ -102,12 +110,13 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param key The key of the value.\n      * @return The value, or <code>null</code> if not found.\n      */\n-    private synchronized V getValue(int key) {\n-        return data.getOrDefault(key, null);\n-    }\n \n-    @Override\n-    public int getNumberOfValuesSinceStart() {\n-        return counter;\n-    }\n-}\n+  private synchronized V getValue(int key) {\n+    return data.getOrDefault(key, null);\n+  }\n+\n+  @Override\n+  public int getNumberOfValuesSinceStart() {\n+    return counter;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_random/18/ValueHistory.java\nindex 4f3b1e301b2..273347515bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_random/18/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_three_grams/18/ValueHistory.java\nindex 4f3b1e301b2..273347515bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/18/ValueHistory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_three_grams/18/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}