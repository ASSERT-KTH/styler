{
    "project_name": "neo4j-neo4j",
    "error_id": "496",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/496/AbstractStreamingMessage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/496/AbstractStreamingMessage.java\nindex d5c2a2e90e4..251bbd6849c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/496/AbstractStreamingMessage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/496/AbstractStreamingMessage.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v4.messaging;\n \n import java.util.Objects;\n@@ -44,41 +45,39 @@ public abstract class AbstractStreamingMessage implements RequestMessage\n     private final long n;\n     private final int statementId;\n \n-    public AbstractStreamingMessage( MapValue meta, String name ) throws BoltIOException\n+    public AbstractStreamingMessage(MapValue meta, String name) throws BoltIOException\n     {\n-        this.meta = requireNonNull( meta );\n-        this.n = parseN( meta, name );\n-        this.statementId = parseStatementId( meta );\n+        this.meta = requireNonNull(meta);\n+        this.n = parseN(meta, name);\n+        this.statementId = parseStatementId(meta);\n     }\n \n-    private static long parseN( MapValue meta, String name ) throws BoltIOException\n+    private static long parseN(MapValue meta, String name) throws BoltIOException\n     {\n-        AnyValue anyValue = meta.get( STREAM_LIMIT_KEY );\n-        if ( anyValue != Values.NO_VALUE && anyValue instanceof LongValue )\n+        AnyValue anyValue = meta.get(STREAM_LIMIT_KEY);\n+        if (anyValue != Values.NO_VALUE && anyValue instanceof LongValue)\n         {\n             long size = ((LongValue) anyValue).longValue();\n-            if ( size != STREAM_LIMIT_UNLIMITED && size < STREAM_LIMIT_MINIMAL )\n+            if (size != STREAM_LIMIT_UNLIMITED && size < STREAM_LIMIT_MINIMAL)\n             {\n-                throw new BoltIOException( Status.Request.Invalid,\n-                        format( \"Expecting %s size to be at least %s, but got: %s\", name, STREAM_LIMIT_MINIMAL, size ) );\n+                throw new BoltIOException(Status.Request.Invalid,\n+                  format(\"Expecting %s size to be at least %s, but got: %s\", name, STREAM_LIMIT_MINIMAL, size));\n             }\n             return size;\n-        }\n-        else\n+        } else\n         {\n-            throw new BoltIOException( Status.Request.Invalid, format( \"Expecting %s size n to be a Long value, but got: %s\", name, anyValue ) );\n+            throw new BoltIOException(Status.Request.Invalid, format(\"Expecting %s size n to be a Long value, but got: %s\", name, anyValue));\n         }\n     }\n \n-    private int parseStatementId( MapValue meta )\n+    private int parseStatementId(MapValue meta)\n     {\n-        AnyValue anyValue = meta.get( QUERY_ID_KEY );\n-        if ( anyValue != Values.NO_VALUE && anyValue instanceof LongValue )\n+        AnyValue anyValue = meta.get(QUERY_ID_KEY);\n+        if (anyValue != Values.NO_VALUE && anyValue instanceof LongValue)\n         {\n             long id = ((LongValue) anyValue).longValue();\n-            return Math.toIntExact( id );\n-        }\n-        else\n+            return Math.toIntExact(id);\n+        } else\n         {\n             return StatementMetadata.ABSENT_QUERY_ID;\n         }\n@@ -106,30 +105,30 @@ public abstract class AbstractStreamingMessage implements RequestMessage\n     }\n \n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n         AbstractStreamingMessage that = (AbstractStreamingMessage) o;\n-        return Objects.equals( meta, that.meta );\n+        return Objects.equals(meta, that.meta);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash( meta );\n+        return Objects.hash(meta);\n     }\n \n     @Override\n     public String toString()\n     {\n-        return String.format( \"%s %s\", name(), meta() );\n+        return String.format(\"%s %s\", name(), meta());\n     }\n \n     abstract String name();\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}