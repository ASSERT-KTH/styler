{
    "project_name": "intuit-Tank",
    "error_id": "128",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Inject\n    private Identity identity;\n\t\n    @Inject \n    private IdentityManager identityManager;\n    ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "61",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/128/ScriptFilterCreationBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/128/ScriptFilterCreationBean.java\nindex 57c3416502a..2658d6f8a2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/128/ScriptFilterCreationBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/128/ScriptFilterCreationBean.java\n@@ -44,268 +44,266 @@ import com.intuit.tank.vm.settings.AccessRight;\n @ConversationScoped\n public class ScriptFilterCreationBean implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-\n-    private ScriptFilter filter;\n-    private String name;\n-    private String productName;\n-    private ScriptFilterType creationMode = ScriptFilterType.INTERNAL;\n-    private Integer selectedExternalScript;\n-    private List<ExternalScript> externalScripts;\n-\n-    @Inject\n-    private ExceptionHandler exceptionHandler;\n-\n-    @Inject\n-    private Identity identity;\n-\t\n-    @Inject \n-    private IdentityManager identityManager;\n-    \n-    @Inject\n-    private Security security;\n-\n-    @Inject\n-    private Messages messages;\n-    \n-    @Inject\n-    private Conversation conversation;\n-\n-    private boolean conditionProcessed = false;\n-    private boolean allConditionsPass;\n-    private String saveAsName;\n-    private boolean editing;\n-\n-    public ScriptFilterType[] getScriptFilterTypeList() {\n-        return ScriptFilterType.values();\n-    }\n-\n-    /**\n-     * @return the isEditing\n-     */\n-    public boolean isEditing() {\n-        return editing;\n-    }\n-\n-    /**\n-     * @return the saveAsName\n-     */\n-    public String getSaveAsName() {\n-        return saveAsName;\n-    }\n-\n-    /**\n-     * @param saveAsName\n-     *            the saveAsName to set\n-     */\n-    public void setSaveAsName(String saveAsName) {\n-        this.saveAsName = saveAsName;\n-    }\n-\n-    public boolean isConditionProcessed() {\n-        return conditionProcessed;\n-    }\n-\n-    public void setConditionProcessed(boolean isConditionProcessed) {\n-        this.conditionProcessed = isConditionProcessed;\n-    }\n-\n-    public ScriptFilter getFilter() {\n-        return filter;\n-    }\n-\n-    public void setFilter(ScriptFilter filter) {\n-        this.filter = filter;\n-    }\n-\n-    public void editFilter(ScriptFilter filter) {\n-    \tconversation.begin();\n-        this.editing = true;\n-        this.filter = filter;\n-        this.setName(filter.getName());\n-        this.setSelectedExternalScript(filter.getExternalScriptId());\n-        this.setCreationMode(filter.getFilterType());\n-        this.productName = filter.getProductName();\n-        if (!canEditFilter()) {\n-            messages.warn(\"You do not have permission to edit this filter.\");\n-        }\n-    }\n-\n-    public void newFilter() {\n-    \tconversation.begin();\n-        this.editing = false;\n-        this.filter = new ScriptFilter();\n-        filter.setCreator(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n-    }\n-\n-    public void removeCondition(ScriptFilterCondition condition) {\n-        getFilter().getConditions().remove(condition);\n-    }\n-\n-    public void removeAction(ScriptFilterAction action) {\n-        getFilter().getActions().remove(action);\n-    }\n-\n-    @TsLoggedIn\n-    public String save() {\n-        ScriptFilterDao sfDao = new ScriptFilterDao();\n-\n-        if (creationMode == ScriptFilterType.INTERNAL) {\n-            validate();\n-            if (messages.isEmpty()) {\n-                try {\n-                    filter.setProductName(productName);\n-                    filter.setName(name);\n-                    filter.setFilterType(creationMode);\n-                    sfDao.saveOrUpdate(filter);\n-                    conversation.end();\n-                    return \"success\";\n-                } catch (Exception e) {\n-                    exceptionHandler.handle(e);\n-                }\n-            }\n-        } else {\n-            if (messages.isEmpty()) {\n-                try {\n-                    filter.setProductName(productName);\n-                    filter.setName(name);\n-                    filter.setExternalScriptId(selectedExternalScript);\n-                    filter.setFilterType(creationMode);\n-                    sfDao.saveOrUpdate(filter);\n-                    conversation.end();\n-                    return \"success\";\n-                } catch (Exception e) {\n-                    exceptionHandler.handle(e);\n-                }\n-            }\n-        }\n-        return \"fail\";\n-    }\n-\n-    @TsLoggedIn\n-    public void saveAs() {\n-        if (StringUtils.isEmpty(saveAsName)) {\n-            messages.error(\"You must give the Filter a name.\");\n-            return;\n+  private static final long serialVersionUID = 1L;\n+\n+  private ScriptFilter filter;\n+  private String name;\n+  private String productName;\n+  private ScriptFilterType creationMode = ScriptFilterType.INTERNAL;\n+  private Integer selectedExternalScript;\n+  private List<ExternalScript> externalScripts;\n+\n+  @Inject\n+  private ExceptionHandler exceptionHandler;\n+\n+  @Inject\n+  private Identity identity;\n+\n+  @Inject\n+  private IdentityManager identityManager;\n+\n+  @Inject\n+  private Security security;\n+\n+  @Inject\n+  private Messages messages;\n+\n+  @Inject\n+  private Conversation conversation;\n+\n+  private boolean conditionProcessed = false;\n+  private boolean allConditionsPass;\n+  private String saveAsName;\n+  private boolean editing;\n+\n+  public ScriptFilterType[] getScriptFilterTypeList() {\n+    return ScriptFilterType.values();\n+  }\n+\n+  /**\n+   * @return the isEditing\n+   */\n+  public boolean isEditing() {\n+    return editing;\n+  }\n+\n+  /**\n+   * @return the saveAsName\n+   */\n+  public String getSaveAsName() {\n+    return saveAsName;\n+  }\n+\n+  /**\n+   * @param saveAsName the saveAsName to set\n+   */\n+  public void setSaveAsName(String saveAsName) {\n+    this.saveAsName = saveAsName;\n+  }\n+\n+  public boolean isConditionProcessed() {\n+    return conditionProcessed;\n+  }\n+\n+  public void setConditionProcessed(boolean isConditionProcessed) {\n+    this.conditionProcessed = isConditionProcessed;\n+  }\n+\n+  public ScriptFilter getFilter() {\n+    return filter;\n+  }\n+\n+  public void setFilter(ScriptFilter filter) {\n+    this.filter = filter;\n+  }\n+\n+  public void editFilter(ScriptFilter filter) {\n+    conversation.begin();\n+    this.editing = true;\n+    this.filter = filter;\n+    this.setName(filter.getName());\n+    this.setSelectedExternalScript(filter.getExternalScriptId());\n+    this.setCreationMode(filter.getFilterType());\n+    this.productName = filter.getProductName();\n+    if (!canEditFilter()) {\n+      messages.warn(\"You do not have permission to edit this filter.\");\n+    }\n+  }\n+\n+  public void newFilter() {\n+    conversation.begin();\n+    this.editing = false;\n+    this.filter = new ScriptFilter();\n+    filter.setCreator(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n+  }\n+\n+  public void removeCondition(ScriptFilterCondition condition) {\n+    getFilter().getConditions().remove(condition);\n+  }\n+\n+  public void removeAction(ScriptFilterAction action) {\n+    getFilter().getActions().remove(action);\n+  }\n+\n+  @TsLoggedIn\n+  public String save() {\n+    ScriptFilterDao sfDao = new ScriptFilterDao();\n+\n+    if (creationMode == ScriptFilterType.INTERNAL) {\n+      validate();\n+      if (messages.isEmpty()) {\n+        try {\n+          filter.setProductName(productName);\n+          filter.setName(name);\n+          filter.setFilterType(creationMode);\n+          sfDao.saveOrUpdate(filter);\n+          conversation.end();\n+          return \"success\";\n+        } catch (Exception e) {\n+          exceptionHandler.handle(e);\n         }\n+      }\n+    } else {\n+      if (messages.isEmpty()) {\n         try {\n-            String originalName = name;\n-            if (originalName.equals(saveAsName)) {\n-                save();\n-            } else {\n-                ScriptFilter copied = new ScriptFilter();\n-                copied.setCreator(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n-                copied.setName(saveAsName);\n-                copied.setProductName(productName);\n-                copied.setAllConditionsMustPass(allConditionsPass);\n-                copied.setPersist(filter.getPersist());\n-                copied.setFilterType(filter.getFilterType());\n-                copied.setExternalScriptId(filter.getExternalScriptId());\n-                for (ScriptFilterAction action : filter.getActions()) {\n-                    ScriptFilterAction ca = new ScriptFilterAction();\n-                    ca.setAction(action.getAction());\n-                    ca.setKey(action.getKey());\n-                    ca.setValue(action.getValue());\n-                    ca.setScope(action.getScope());\n-                    copied.addAction(ca);\n-                }\n-                for (ScriptFilterCondition condition : filter.getConditions()) {\n-                    ScriptFilterCondition cc = new ScriptFilterCondition();\n-                    cc.setCondition(condition.getCondition());\n-                    cc.setValue(condition.getValue());\n-                    cc.setScope(condition.getScope());\n-                    copied.addCondition(cc);\n-                }\n-                copied = new ScriptFilterDao().saveOrUpdate(copied);\n-                messages.info(\"Filter \" + originalName + \" has been saved as \" + copied.getName() + \".\");\n-                editFilter(copied);\n-            }\n+          filter.setProductName(productName);\n+          filter.setName(name);\n+          filter.setExternalScriptId(selectedExternalScript);\n+          filter.setFilterType(creationMode);\n+          sfDao.saveOrUpdate(filter);\n+          conversation.end();\n+          return \"success\";\n         } catch (Exception e) {\n-            messages.error(e.getMessage());\n+          exceptionHandler.handle(e);\n         }\n-    }\n-\n-    public void cancel() {\n-    \tconversation.end();\n-    }\n-\n-    private void validate() {\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getProductName() {\n-        return productName;\n-    }\n-\n-    public void setProductName(String productName) {\n-        this.productName = productName;\n-    }\n-\n-    public ScriptFilterType getCreationMode() {\n-        return creationMode;\n-    }\n-\n-    public void setCreationMode(ScriptFilterType creationMode) {\n-        this.creationMode = creationMode;\n-    }\n-\n-    public Integer getSelectedExternalScript() {\n-        return selectedExternalScript;\n-    }\n-\n-    public void setSelectedExternalScript(Integer selectedExternalScript) {\n-        this.selectedExternalScript = selectedExternalScript;\n-    }\n-\n-    public List<ExternalScript> getExternalScripts() {\n-        ExternalScriptDao externalScriptDao = new ExternalScriptDao();\n-        externalScripts = externalScriptDao.findAll();\n-        return externalScripts;\n-    }\n-\n-    public void setExternalScripts(List<ExternalScript> externalScripts) {\n-        this.externalScripts = externalScripts;\n-    }\n-\n-    public List<ScriptFilterCondition> getConditions() {\n-        return new ArrayList<ScriptFilterCondition>(filter.getConditions());\n-    }\n-\n-    public List<ScriptFilterAction> getActions() {\n-        return new ArrayList<ScriptFilterAction>(filter.getActions());\n-    }\n-\n-    /**\n-     * @return the allConditionsPass\n-     */\n-    public boolean isAllConditionsPass() {\n-        allConditionsPass = filter.getAllConditionsMustPass();\n-        return allConditionsPass;\n-    }\n-\n-    /**\n-     * @param allConditionsPass\n-     *            the allConditionsPass to set\n-     */\n-    public void setAllConditionsPass(boolean allConditionsPass) {\n-        this.allConditionsPass = allConditionsPass;\n-        filter.setAllConditionsMustPass(allConditionsPass);\n-    }\n-\n-    public boolean canCreateFilter() {\n-        return security.hasRight(AccessRight.CREATE_FILTER);\n-    }\n-\n-    public boolean canEditFilter() {\n-        return security.hasRight(AccessRight.EDIT_FILTER)\n-                || security.isOwner(filter);\n-    }\n+      }\n+    }\n+    return \"fail\";\n+  }\n+\n+  @TsLoggedIn\n+  public void saveAs() {\n+    if (StringUtils.isEmpty(saveAsName)) {\n+      messages.error(\"You must give the Filter a name.\");\n+      return;\n+    }\n+    try {\n+      String originalName = name;\n+      if (originalName.equals(saveAsName)) {\n+        save();\n+      } else {\n+        ScriptFilter copied = new ScriptFilter();\n+        copied.setCreator(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n+        copied.setName(saveAsName);\n+        copied.setProductName(productName);\n+        copied.setAllConditionsMustPass(allConditionsPass);\n+        copied.setPersist(filter.getPersist());\n+        copied.setFilterType(filter.getFilterType());\n+        copied.setExternalScriptId(filter.getExternalScriptId());\n+        for (ScriptFilterAction action : filter.getActions()) {\n+          ScriptFilterAction ca = new ScriptFilterAction();\n+          ca.setAction(action.getAction());\n+          ca.setKey(action.getKey());\n+          ca.setValue(action.getValue());\n+          ca.setScope(action.getScope());\n+          copied.addAction(ca);\n+        }\n+        for (ScriptFilterCondition condition : filter.getConditions()) {\n+          ScriptFilterCondition cc = new ScriptFilterCondition();\n+          cc.setCondition(condition.getCondition());\n+          cc.setValue(condition.getValue());\n+          cc.setScope(condition.getScope());\n+          copied.addCondition(cc);\n+        }\n+        copied = new ScriptFilterDao().saveOrUpdate(copied);\n+        messages.info(\"Filter \" + originalName + \" has been saved as \" + copied.getName() + \".\");\n+        editFilter(copied);\n+      }\n+    } catch (Exception e) {\n+      messages.error(e.getMessage());\n+    }\n+  }\n+\n+  public void cancel() {\n+    conversation.end();\n+  }\n+\n+  private void validate() {\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+  public String getProductName() {\n+    return productName;\n+  }\n+\n+  public void setProductName(String productName) {\n+    this.productName = productName;\n+  }\n+\n+  public ScriptFilterType getCreationMode() {\n+    return creationMode;\n+  }\n+\n+  public void setCreationMode(ScriptFilterType creationMode) {\n+    this.creationMode = creationMode;\n+  }\n+\n+  public Integer getSelectedExternalScript() {\n+    return selectedExternalScript;\n+  }\n+\n+  public void setSelectedExternalScript(Integer selectedExternalScript) {\n+    this.selectedExternalScript = selectedExternalScript;\n+  }\n+\n+  public List<ExternalScript> getExternalScripts() {\n+    ExternalScriptDao externalScriptDao = new ExternalScriptDao();\n+    externalScripts = externalScriptDao.findAll();\n+    return externalScripts;\n+  }\n+\n+  public void setExternalScripts(List<ExternalScript> externalScripts) {\n+    this.externalScripts = externalScripts;\n+  }\n+\n+  public List<ScriptFilterCondition> getConditions() {\n+    return new ArrayList<ScriptFilterCondition>(filter.getConditions());\n+  }\n+\n+  public List<ScriptFilterAction> getActions() {\n+    return new ArrayList<ScriptFilterAction>(filter.getActions());\n+  }\n+\n+  /**\n+   * @return the allConditionsPass\n+   */\n+  public boolean isAllConditionsPass() {\n+    allConditionsPass = filter.getAllConditionsMustPass();\n+    return allConditionsPass;\n+  }\n+\n+  /**\n+   * @param allConditionsPass the allConditionsPass to set\n+   */\n+  public void setAllConditionsPass(boolean allConditionsPass) {\n+    this.allConditionsPass = allConditionsPass;\n+    filter.setAllConditionsMustPass(allConditionsPass);\n+  }\n+\n+  public boolean canCreateFilter() {\n+    return security.hasRight(AccessRight.CREATE_FILTER);\n+  }\n+\n+  public boolean canEditFilter() {\n+    return security.hasRight(AccessRight.EDIT_FILTER)\n+      || security.isOwner(filter);\n+  }\n \n }\n",
            "diff_size": 307
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/128/ScriptFilterCreationBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/128/ScriptFilterCreationBean.java\nindex 57c3416502a..e474b6a24fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/128/ScriptFilterCreationBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/128/ScriptFilterCreationBean.java\n@@ -58,18 +58,18 @@ public class ScriptFilterCreationBean implements Serializable {\n \n     @Inject\n     private Identity identity;\n-\t\n-    @Inject \n-    private IdentityManager identityManager;\n-    \n-    @Inject\n-    private Security security;\n+\n+@Inject\n+private IdentityManager identityManager;\n+\n+@Inject\n+private Security security;\n \n     @Inject\n     private Messages messages;\n     \n     @Inject\n-    private Conversation conversation;\n+private Conversation conversation;\n \n     private boolean conditionProcessed = false;\n     private boolean allConditionsPass;\n@@ -119,8 +119,8 @@ public class ScriptFilterCreationBean implements Serializable {\n     }\n \n     public void editFilter(ScriptFilter filter) {\n-    \tconversation.begin();\n-        this.editing = true;\n+    conversation.begin();\n+this.editing = true;\n         this.filter = filter;\n         this.setName(filter.getName());\n         this.setSelectedExternalScript(filter.getExternalScriptId());\n@@ -132,8 +132,8 @@ public class ScriptFilterCreationBean implements Serializable {\n     }\n \n     public void newFilter() {\n-    \tconversation.begin();\n-        this.editing = false;\n+    conversation.begin();\n+this.editing = false;\n         this.filter = new ScriptFilter();\n         filter.setCreator(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n     }\n@@ -226,7 +226,7 @@ public class ScriptFilterCreationBean implements Serializable {\n     }\n \n     public void cancel() {\n-    \tconversation.end();\n+    conversation.end();\n     }\n \n     private void validate() {\n@@ -308,4 +308,4 @@ public class ScriptFilterCreationBean implements Serializable {\n                 || security.isOwner(filter);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/128/ScriptFilterCreationBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/128/ScriptFilterCreationBean.java\nindex 57c3416502a..8b8fba18d8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/128/ScriptFilterCreationBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/128/ScriptFilterCreationBean.java\n@@ -13,21 +13,20 @@ package com.intuit.tank.filter;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.enterprise.context.Conversation;\n import javax.enterprise.context.ConversationScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import org.apache.commons.lang3.StringUtils;\n import com.intuit.tank.util.Messages;\n import org.picketlink.Identity;\n import org.picketlink.idm.IdentityManager;\n import org.picketlink.idm.model.basic.User;\n-\n import com.intuit.tank.auth.Security;\n import com.intuit.tank.config.TsLoggedIn;\n import com.intuit.tank.dao.ExternalScriptDao;\n@@ -45,7 +44,6 @@ import com.intuit.tank.vm.settings.AccessRight;\n public class ScriptFilterCreationBean implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n-\n     private ScriptFilter filter;\n     private String name;\n     private String productName;\n@@ -58,24 +56,24 @@ public class ScriptFilterCreationBean implements Serializable {\n \n     @Inject\n     private Identity identity;\n-\t\n-    @Inject \n+\n+    @Inject\n     private IdentityManager identityManager;\n-    \n+\n     @Inject\n     private Security security;\n \n     @Inject\n     private Messages messages;\n-    \n+\n     @Inject\n     private Conversation conversation;\n-\n     private boolean conditionProcessed = false;\n     private boolean allConditionsPass;\n     private String saveAsName;\n     private boolean editing;\n \n+\n     public ScriptFilterType[] getScriptFilterTypeList() {\n         return ScriptFilterType.values();\n     }\n@@ -83,6 +81,8 @@ public class ScriptFilterCreationBean implements Serializable {\n     /**\n      * @return the isEditing\n      */\n+\n+\n     public boolean isEditing() {\n         return editing;\n     }\n@@ -90,6 +90,8 @@ public class ScriptFilterCreationBean implements Serializable {\n     /**\n      * @return the saveAsName\n      */\n+\n+\n     public String getSaveAsName() {\n         return saveAsName;\n     }\n@@ -98,28 +100,35 @@ public class ScriptFilterCreationBean implements Serializable {\n      * @param saveAsName\n      *            the saveAsName to set\n      */\n+\n+\n     public void setSaveAsName(String saveAsName) {\n         this.saveAsName = saveAsName;\n     }\n \n+\n     public boolean isConditionProcessed() {\n         return conditionProcessed;\n     }\n \n+\n     public void setConditionProcessed(boolean isConditionProcessed) {\n         this.conditionProcessed = isConditionProcessed;\n     }\n \n+\n     public ScriptFilter getFilter() {\n         return filter;\n     }\n \n+\n     public void setFilter(ScriptFilter filter) {\n         this.filter = filter;\n     }\n \n+\n     public void editFilter(ScriptFilter filter) {\n-    \tconversation.begin();\n+        conversation.begin();\n         this.editing = true;\n         this.filter = filter;\n         this.setName(filter.getName());\n@@ -131,17 +140,20 @@ public class ScriptFilterCreationBean implements Serializable {\n         }\n     }\n \n+\n     public void newFilter() {\n-    \tconversation.begin();\n+        conversation.begin();\n         this.editing = false;\n         this.filter = new ScriptFilter();\n         filter.setCreator(identityManager.lookupById(User.class, identity.getAccount().getId()).getLoginName());\n     }\n \n+\n     public void removeCondition(ScriptFilterCondition condition) {\n         getFilter().getConditions().remove(condition);\n     }\n \n+\n     public void removeAction(ScriptFilterAction action) {\n         getFilter().getActions().remove(action);\n     }\n@@ -149,7 +161,6 @@ public class ScriptFilterCreationBean implements Serializable {\n     @TsLoggedIn\n     public String save() {\n         ScriptFilterDao sfDao = new ScriptFilterDao();\n-\n         if (creationMode == ScriptFilterType.INTERNAL) {\n             validate();\n             if (messages.isEmpty()) {\n@@ -225,59 +236,73 @@ public class ScriptFilterCreationBean implements Serializable {\n         }\n     }\n \n+\n     public void cancel() {\n-    \tconversation.end();\n+        conversation.end();\n     }\n \n     private void validate() {\n+\n     }\n \n+\n     public String getName() {\n         return name;\n     }\n \n+\n     public void setName(String name) {\n         this.name = name;\n     }\n \n+\n     public String getProductName() {\n         return productName;\n     }\n \n+\n     public void setProductName(String productName) {\n         this.productName = productName;\n     }\n \n+\n     public ScriptFilterType getCreationMode() {\n         return creationMode;\n     }\n \n+\n     public void setCreationMode(ScriptFilterType creationMode) {\n         this.creationMode = creationMode;\n     }\n \n+\n     public Integer getSelectedExternalScript() {\n         return selectedExternalScript;\n     }\n \n+\n     public void setSelectedExternalScript(Integer selectedExternalScript) {\n         this.selectedExternalScript = selectedExternalScript;\n     }\n \n+\n     public List<ExternalScript> getExternalScripts() {\n         ExternalScriptDao externalScriptDao = new ExternalScriptDao();\n         externalScripts = externalScriptDao.findAll();\n         return externalScripts;\n     }\n \n+\n     public void setExternalScripts(List<ExternalScript> externalScripts) {\n         this.externalScripts = externalScripts;\n     }\n \n+\n     public List<ScriptFilterCondition> getConditions() {\n         return new ArrayList<ScriptFilterCondition>(filter.getConditions());\n     }\n \n+\n     public List<ScriptFilterAction> getActions() {\n         return new ArrayList<ScriptFilterAction>(filter.getActions());\n     }\n@@ -285,6 +310,8 @@ public class ScriptFilterCreationBean implements Serializable {\n     /**\n      * @return the allConditionsPass\n      */\n+\n+\n     public boolean isAllConditionsPass() {\n         allConditionsPass = filter.getAllConditionsMustPass();\n         return allConditionsPass;\n@@ -294,18 +321,21 @@ public class ScriptFilterCreationBean implements Serializable {\n      * @param allConditionsPass\n      *            the allConditionsPass to set\n      */\n+\n+\n     public void setAllConditionsPass(boolean allConditionsPass) {\n         this.allConditionsPass = allConditionsPass;\n         filter.setAllConditionsMustPass(allConditionsPass);\n     }\n \n+\n     public boolean canCreateFilter() {\n         return security.hasRight(AccessRight.CREATE_FILTER);\n     }\n \n+\n     public boolean canEditFilter() {\n-        return security.hasRight(AccessRight.EDIT_FILTER)\n-                || security.isOwner(filter);\n+        return security.hasRight(AccessRight.EDIT_FILTER) || security.isOwner(filter);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}