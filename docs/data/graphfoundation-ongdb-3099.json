{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3099",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3099/StringSchemaIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3099/StringSchemaIndexReader.java\nindex c38c3e50916..68eef28c021 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3099/StringSchemaIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3099/StringSchemaIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.index.internal.gbptree.GBPTree;\n@@ -32,91 +33,89 @@ import org.neo4j.values.storable.Values;\n \n import static org.neo4j.internal.kernel.api.IndexQuery.StringPrefixPredicate;\n \n-class StringSchemaIndexReader extends NativeSchemaIndexReader<StringSchemaKey,NativeSchemaValue>\n+class StringSchemaIndexReader extends NativeSchemaIndexReader<StringSchemaKey, NativeSchemaValue>\n {\n-    StringSchemaIndexReader( GBPTree<StringSchemaKey,NativeSchemaValue> tree, Layout<StringSchemaKey,NativeSchemaValue> layout,\n-            IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor )\n-    {\n-        super( tree, layout, samplingConfig, descriptor );\n-    }\n+  StringSchemaIndexReader(GBPTree<StringSchemaKey, NativeSchemaValue> tree, Layout<StringSchemaKey, NativeSchemaValue> layout,\n+                          IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor)\n+  {\n+    super(tree, layout, samplingConfig, descriptor);\n+  }\n \n-    @Override\n-    void validateQuery( IndexOrder indexOrder, IndexQuery[] predicates )\n+  @Override\n+  void validateQuery(IndexOrder indexOrder, IndexQuery[] predicates)\n+  {\n+    if (predicates.length != 1)\n     {\n-        if ( predicates.length != 1 )\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        CapabilityValidator.validateQuery( StringIndexProvider.CAPABILITY, indexOrder, predicates );\n+      throw new UnsupportedOperationException();\n     }\n \n-    @Override\n-    boolean initializeRangeForQuery( StringSchemaKey treeKeyFrom, StringSchemaKey treeKeyTo, IndexQuery[] predicates )\n-    {\n-        IndexQuery predicate = predicates[0];\n-        switch ( predicate.type() )\n-        {\n-        case exists:\n-            treeKeyFrom.initAsLowest();\n-            treeKeyTo.initAsHighest();\n-            return false;\n-        case exact:\n-            ExactPredicate exactPredicate = (ExactPredicate) predicate;\n-            treeKeyFrom.from( Long.MIN_VALUE, exactPredicate.value() );\n-            treeKeyTo.from( Long.MAX_VALUE, exactPredicate.value() );\n-            return false;\n-        case range:\n-            RangePredicate<?> rangePredicate = (RangePredicate<?>)predicate;\n-            initFromForRange( rangePredicate, treeKeyFrom );\n-            initToForRange( rangePredicate, treeKeyTo );\n-            return false;\n-        case stringPrefix:\n-            StringPrefixPredicate prefixPredicate = (StringPrefixPredicate) predicate;\n-            treeKeyFrom.initAsPrefixLow( prefixPredicate.prefix() );\n-            treeKeyTo.initAsPrefixHigh( prefixPredicate.prefix() );\n-            return false;\n-        case stringSuffix:\n-        case stringContains:\n-            treeKeyFrom.initAsLowest();\n-            treeKeyTo.initAsHighest();\n-            return true;\n-        default:\n-            throw new IllegalArgumentException( \"IndexQuery of type \" + predicate.type() + \" is not supported.\" );\n-        }\n-    }\n+    CapabilityValidator.validateQuery(StringIndexProvider.CAPABILITY, indexOrder, predicates);\n+  }\n \n-    private void initFromForRange( RangePredicate<?> rangePredicate, StringSchemaKey treeKeyFrom )\n+  @Override\n+  boolean initializeRangeForQuery(StringSchemaKey treeKeyFrom, StringSchemaKey treeKeyTo, IndexQuery[] predicates)\n+  {\n+    IndexQuery predicate = predicates[0];\n+    switch (predicate.type())\n     {\n-        Value fromValue = rangePredicate.fromValue();\n-        if ( fromValue == Values.NO_VALUE )\n-        {\n-            treeKeyFrom.initAsLowest();\n-        }\n-        else\n-        {\n-            treeKeyFrom.from( rangePredicate.fromInclusive() ? Long.MIN_VALUE : Long.MAX_VALUE, fromValue );\n-            treeKeyFrom.setCompareId( true );\n-        }\n+      case exists:\n+        treeKeyFrom.initAsLowest();\n+        treeKeyTo.initAsHighest();\n+        return false;\n+      case exact:\n+        ExactPredicate exactPredicate = (ExactPredicate) predicate;\n+        treeKeyFrom.from(Long.MIN_VALUE, exactPredicate.value());\n+        treeKeyTo.from(Long.MAX_VALUE, exactPredicate.value());\n+        return false;\n+      case range:\n+        RangePredicate<?> rangePredicate = (RangePredicate<?>) predicate;\n+        initFromForRange(rangePredicate, treeKeyFrom);\n+        initToForRange(rangePredicate, treeKeyTo);\n+        return false;\n+      case stringPrefix:\n+        StringPrefixPredicate prefixPredicate = (StringPrefixPredicate) predicate;\n+        treeKeyFrom.initAsPrefixLow(prefixPredicate.prefix());\n+        treeKeyTo.initAsPrefixHigh(prefixPredicate.prefix());\n+        return false;\n+      case stringSuffix:\n+      case stringContains:\n+        treeKeyFrom.initAsLowest();\n+        treeKeyTo.initAsHighest();\n+        return true;\n+      default:\n+        throw new IllegalArgumentException(\"IndexQuery of type \" + predicate.type() + \" is not supported.\");\n     }\n+  }\n \n-    private void initToForRange( RangePredicate<?> rangePredicate, StringSchemaKey treeKeyTo )\n+  private void initFromForRange(RangePredicate<?> rangePredicate, StringSchemaKey treeKeyFrom)\n+  {\n+    Value fromValue = rangePredicate.fromValue();\n+    if (fromValue == Values.NO_VALUE)\n+    {\n+      treeKeyFrom.initAsLowest();\n+    } else\n     {\n-        Value toValue = rangePredicate.toValue();\n-        if ( toValue == Values.NO_VALUE )\n-        {\n-            treeKeyTo.initAsHighest();\n-        }\n-        else\n-        {\n-            treeKeyTo.from( rangePredicate.toInclusive() ? Long.MAX_VALUE : Long.MIN_VALUE, toValue );\n-            treeKeyTo.setCompareId( true );\n-        }\n+      treeKeyFrom.from(rangePredicate.fromInclusive() ? Long.MIN_VALUE : Long.MAX_VALUE, fromValue);\n+      treeKeyFrom.setCompareId(true);\n     }\n+  }\n \n-    @Override\n-    public boolean hasFullValuePrecision( IndexQuery... predicates )\n+  private void initToForRange(RangePredicate<?> rangePredicate, StringSchemaKey treeKeyTo)\n+  {\n+    Value toValue = rangePredicate.toValue();\n+    if (toValue == Values.NO_VALUE)\n     {\n-        return true;\n+      treeKeyTo.initAsHighest();\n+    } else\n+    {\n+      treeKeyTo.from(rangePredicate.toInclusive() ? Long.MAX_VALUE : Long.MIN_VALUE, toValue);\n+      treeKeyTo.setCompareId(true);\n     }\n+  }\n+\n+  @Override\n+  public boolean hasFullValuePrecision(IndexQuery... predicates)\n+  {\n+    return true;\n+  }\n }\n",
            "diff_size": 117
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3099/StringSchemaIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3099/StringSchemaIndexReader.java\nindex c38c3e50916..53428aad6dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3099/StringSchemaIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3099/StringSchemaIndexReader.java\n@@ -119,4 +119,4 @@ class StringSchemaIndexReader extends NativeSchemaIndexReader<StringSchemaKey,Na\n     {\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}