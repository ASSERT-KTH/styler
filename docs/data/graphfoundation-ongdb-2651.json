{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2651",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "175",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2651/PathValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2651/PathValue.java\nindex 5642a1e2b73..5f641fb05a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2651/PathValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2651/PathValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import java.util.Arrays;\n@@ -29,189 +30,188 @@ import org.neo4j.values.VirtualValue;\n \n public abstract class PathValue extends VirtualValue\n {\n-    public abstract NodeValue startNode();\n+  public abstract NodeValue startNode();\n \n-    public abstract NodeValue endNode();\n+  public abstract NodeValue endNode();\n \n-    public abstract RelationshipValue lastRelationship();\n+  public abstract RelationshipValue lastRelationship();\n \n-    public abstract NodeValue[] nodes();\n+  public abstract NodeValue[] nodes();\n \n-    public abstract RelationshipValue[] relationships();\n+  public abstract RelationshipValue[] relationships();\n \n-    @Override\n-    public boolean equals( VirtualValue other )\n+  @Override\n+  public boolean equals(VirtualValue other)\n+  {\n+    if (other == null || !(other instanceof PathValue))\n     {\n-        if ( other == null || !(other instanceof PathValue) )\n-        {\n-            return false;\n-        }\n-        PathValue that = (PathValue) other;\n-        return size() == that.size() &&\n-               Arrays.equals( nodes(), that.nodes() ) &&\n-               Arrays.equals( relationships(), that.relationships() );\n+      return false;\n     }\n-\n-    @Override\n-    public int computeHash()\n+    PathValue that = (PathValue) other;\n+    return size() == that.size() &&\n+        Arrays.equals(nodes(), that.nodes()) &&\n+        Arrays.equals(relationships(), that.relationships());\n+  }\n+\n+  @Override\n+  public int computeHash()\n+  {\n+    NodeValue[] nodes = nodes();\n+    RelationshipValue[] relationships = relationships();\n+    int result = nodes[0].hashCode();\n+    for (int i = 1; i < nodes.length; i++)\n     {\n-        NodeValue[] nodes = nodes();\n-        RelationshipValue[] relationships = relationships();\n-        int result = nodes[0].hashCode();\n-        for ( int i = 1; i < nodes.length; i++ )\n-        {\n-            result += 31 * (result + relationships[i - 1].hashCode());\n-            result += 31 * (result + nodes[i].hashCode());\n-        }\n-        return result;\n+      result += 31 * (result + relationships[i - 1].hashCode());\n+      result += 31 * (result + nodes[i].hashCode());\n     }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n+    return result;\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+  {\n+    writer.writePath(nodes(), relationships());\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapPath(this);\n+  }\n+\n+  @Override\n+  public VirtualValueGroup valueGroup()\n+  {\n+    return VirtualValueGroup.PATH;\n+  }\n+\n+  @Override\n+  public int compareTo(VirtualValue other, Comparator<AnyValue> comparator)\n+  {\n+    if (other == null || !(other instanceof PathValue))\n     {\n-        writer.writePath( nodes(), relationships() );\n+      throw new IllegalArgumentException(\"Cannot compare different virtual values\");\n     }\n \n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    PathValue otherPath = (PathValue) other;\n+    NodeValue[] nodes = nodes();\n+    RelationshipValue[] relationships = relationships();\n+    NodeValue[] otherNodes = otherPath.nodes();\n+    RelationshipValue[] otherRelationships = otherPath.relationships();\n+\n+    int x = nodes[0].compareTo(otherNodes[0], comparator);\n+    if (x == 0)\n     {\n-        return mapper.mapPath( this );\n+      int i = 0;\n+      int length = Math.min(relationships.length, otherRelationships.length);\n+\n+      while (x == 0 && i < length)\n+      {\n+        x = relationships[i].compareTo(otherRelationships[i], comparator);\n+        ++i;\n+      }\n+\n+      if (x == 0)\n+      {\n+        x = Integer.compare(relationships.length, otherRelationships.length);\n+      }\n     }\n \n-    @Override\n-    public VirtualValueGroup valueGroup()\n+    return x;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    NodeValue[] nodes = nodes();\n+    RelationshipValue[] relationships = relationships();\n+    StringBuilder sb = new StringBuilder(getTypeName() + \"{\");\n+    int i = 0;\n+    for (; i < relationships.length; i++)\n+    {\n+      sb.append(nodes[i]);\n+      sb.append(relationships[i]);\n+    }\n+    sb.append(nodes[i]);\n+    sb.append('}');\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Path\";\n+  }\n+\n+  public ListValue asList()\n+  {\n+    NodeValue[] nodes = nodes();\n+    RelationshipValue[] relationships = relationships();\n+    int size = nodes.length + relationships.length;\n+    AnyValue[] anyValues = new AnyValue[size];\n+    for (int i = 0; i < size; i++)\n     {\n-        return VirtualValueGroup.PATH;\n+      if (i % 2 == 0)\n+      {\n+        anyValues[i] = nodes[i / 2];\n+      } else\n+      {\n+        anyValues[i] = relationships[i / 2];\n+      }\n     }\n+    return VirtualValues.list(anyValues);\n+  }\n \n-    @Override\n-    public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n+  public int size()\n+  {\n+    return relationships().length;\n+  }\n+\n+  public static class DirectPathValue extends PathValue\n+  {\n+    private final NodeValue[] nodes;\n+    private final RelationshipValue[] edges;\n+\n+    DirectPathValue(NodeValue[] nodes, RelationshipValue[] edges)\n     {\n-        if ( other == null || !(other instanceof PathValue) )\n-        {\n-            throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n-        }\n-\n-        PathValue otherPath = (PathValue) other;\n-        NodeValue[] nodes = nodes();\n-        RelationshipValue[] relationships = relationships();\n-        NodeValue[] otherNodes = otherPath.nodes();\n-        RelationshipValue[] otherRelationships = otherPath.relationships();\n-\n-        int x = nodes[0].compareTo( otherNodes[0], comparator );\n-        if ( x == 0 )\n-        {\n-            int i = 0;\n-            int length = Math.min( relationships.length, otherRelationships.length );\n-\n-            while ( x == 0 && i < length )\n-            {\n-                x = relationships[i].compareTo( otherRelationships[i], comparator );\n-                ++i;\n-            }\n-\n-            if ( x == 0 )\n-            {\n-                x = Integer.compare( relationships.length, otherRelationships.length );\n-            }\n-        }\n-\n-        return x;\n+      assert nodes != null;\n+      assert edges != null;\n+      assert nodes.length == edges.length + 1;\n+\n+      this.nodes = nodes;\n+      this.edges = edges;\n     }\n \n     @Override\n-    public String toString()\n+    public NodeValue startNode()\n     {\n-        NodeValue[] nodes = nodes();\n-        RelationshipValue[] relationships = relationships();\n-        StringBuilder sb = new StringBuilder( getTypeName() + \"{\" );\n-        int i = 0;\n-        for ( ; i < relationships.length; i++ )\n-        {\n-            sb.append( nodes[i] );\n-            sb.append( relationships[i] );\n-        }\n-        sb.append( nodes[i] );\n-        sb.append( '}' );\n-        return sb.toString();\n+      return nodes[0];\n     }\n \n     @Override\n-    public String getTypeName()\n+    public NodeValue endNode()\n     {\n-        return \"Path\";\n+      return nodes[nodes.length - 1];\n     }\n \n-    public ListValue asList()\n+    @Override\n+    public RelationshipValue lastRelationship()\n     {\n-        NodeValue[] nodes = nodes();\n-        RelationshipValue[] relationships = relationships();\n-        int size = nodes.length + relationships.length;\n-        AnyValue[] anyValues = new AnyValue[size];\n-        for ( int i = 0; i < size; i++ )\n-        {\n-            if ( i % 2 == 0 )\n-            {\n-                anyValues[i] = nodes[i / 2];\n-            }\n-            else\n-            {\n-                anyValues[i] = relationships[i / 2];\n-            }\n-        }\n-        return VirtualValues.list( anyValues );\n+      assert edges.length > 0;\n+      return edges[edges.length - 1];\n     }\n \n-    public int size()\n+    @Override\n+    public NodeValue[] nodes()\n     {\n-        return relationships().length;\n+      return nodes;\n     }\n \n-    public static class DirectPathValue extends PathValue\n+    @Override\n+    public RelationshipValue[] relationships()\n     {\n-        private final NodeValue[] nodes;\n-        private final RelationshipValue[] edges;\n-\n-        DirectPathValue( NodeValue[] nodes, RelationshipValue[] edges )\n-        {\n-            assert nodes != null;\n-            assert edges != null;\n-            assert nodes.length == edges.length + 1;\n-\n-            this.nodes = nodes;\n-            this.edges = edges;\n-        }\n-\n-        @Override\n-        public NodeValue startNode()\n-        {\n-            return nodes[0];\n-        }\n-\n-        @Override\n-        public NodeValue endNode()\n-        {\n-            return nodes[nodes.length - 1];\n-        }\n-\n-        @Override\n-        public RelationshipValue lastRelationship()\n-        {\n-            assert edges.length > 0;\n-            return edges[edges.length - 1];\n-        }\n-\n-        @Override\n-        public NodeValue[] nodes()\n-        {\n-            return nodes;\n-        }\n-\n-        @Override\n-        public RelationshipValue[] relationships()\n-        {\n-            return edges;\n-        }\n-\n+      return edges;\n     }\n+\n+  }\n }\n",
            "diff_size": 254
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "200",
                    "column": "32",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2651/PathValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2651/PathValue.java\nindex 5642a1e2b73..4862050a417 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2651/PathValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2651/PathValue.java\n@@ -42,13 +42,13 @@ public abstract class PathValue extends VirtualValue\n     @Override\n     public boolean equals( VirtualValue other )\n     {\n-        if ( other == null || !(other instanceof PathValue) )\n+        if ( other == null || !( other instanceof PathValue) )\n         {\n             return false;\n         }\n-        PathValue that = (PathValue) other;\n-        return size() == that.size() &&\n-               Arrays.equals( nodes(), that.nodes() ) &&\n+\n+PathValue that = (PathValue) other;\n+        return size() == that.size() &&Arrays.equals( nodes(), that.nodes() ) &&\n                Arrays.equals( relationships(), that.relationships() );\n     }\n \n@@ -60,10 +60,11 @@ public abstract class PathValue extends VirtualValue\n         int result = nodes[0].hashCode();\n         for ( int i = 1; i < nodes.length; i++ )\n         {\n-            result += 31 * (result + relationships[i - 1].hashCode());\n-            result += 31 * (result + nodes[i].hashCode());\n+            result += 31 * (result + relationships[i - 1].hashCode() );\n+            result += 31 * (result + nodes[i].hashCode() );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     @Override\n@@ -87,7 +88,7 @@ public abstract class PathValue extends VirtualValue\n     @Override\n     public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n     {\n-        if ( other == null || !(other instanceof PathValue) )\n+        if ( other == null || !( other instanceof PathValue) )\n         {\n             throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n         }\n@@ -177,8 +178,7 @@ public abstract class PathValue extends VirtualValue\n             assert nodes != null;\n             assert edges != null;\n             assert nodes.length == edges.length + 1;\n-\n-            this.nodes = nodes;\n+this.nodes = nodes;\n             this.edges = edges;\n         }\n \n@@ -197,7 +197,7 @@ public abstract class PathValue extends VirtualValue\n         @Override\n         public RelationshipValue lastRelationship()\n         {\n-            assert edges.length > 0;\n+            assert edges.length> 0;\n             return edges[edges.length - 1];\n         }\n \n@@ -212,6 +212,5 @@ public abstract class PathValue extends VirtualValue\n         {\n             return edges;\n         }\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}