{
    "project_name": "neo4j-neo4j",
    "error_id": "1942",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1942/Step.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1942/Step.java\nindex e119d2c1029..1a362a337b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1942/Step.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1942/Step.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.staging;\n \n import org.neo4j.internal.batchimport.Parallelizable;\n@@ -28,7 +29,7 @@ import org.neo4j.internal.batchimport.stats.StepStats;\n  * Batches are typically received from an upstream step, or produced in the step itself. If there are more steps\n  * {@link #setDownstream(Step) downstream} then processed batches are passed down. Each step has maximum\n  * \"work-ahead\" size where it awaits the downstream step to catch up if the queue size goes beyond that number.\n- *\n+ * <p>\n  * Batches are associated with a ticket, which is simply a long value incremented for each batch.\n  * It's the first step that is responsible for generating these tickets, which will stay unchanged with\n  * each batch all the way through the stage. Steps that have multiple threads processing batches can process\n@@ -50,7 +51,7 @@ public interface Step<T> extends Parallelizable, AutoCloseable, Panicable\n      *\n      * @param orderingGuarantees which ordering guarantees that will be upheld.\n      */\n-    void start( int orderingGuarantees );\n+    void start(int orderingGuarantees);\n \n     /**\n      * @return name of this step.\n@@ -61,11 +62,11 @@ public interface Step<T> extends Parallelizable, AutoCloseable, Panicable\n      * Receives a batch from upstream, queues it for processing.\n      *\n      * @param ticket ticket associates with the batch. Tickets are generated by producing steps and must follow\n-     * each batch all the way through a stage.\n-     * @param batch the batch object to queue for processing.\n+     *               each batch all the way through a stage.\n+     * @param batch  the batch object to queue for processing.\n      * @return how long it time (millis) was spent waiting for a spot in the queue.\n      */\n-    long receive( long ticket, T batch );\n+    long receive(long ticket, T batch);\n \n     /**\n      * @return statistics about this step at this point in time.\n@@ -78,9 +79,9 @@ public interface Step<T> extends Parallelizable, AutoCloseable, Panicable\n      * @param key key to get stat for.\n      * @return long stat for the given {@code key}.\n      */\n-    default long longStat( Key key )\n+    default long longStat(Key key)\n     {\n-        return stats().stat( key ).asLong();\n+        return stats().stat(key).asLong();\n     }\n \n     /**\n@@ -111,9 +112,10 @@ public interface Step<T> extends Parallelizable, AutoCloseable, Panicable\n     /**\n      * Called by the {@link Stage} when setting up the stage. This will form a pipeline of steps,\n      * making up the stage.\n+     *\n      * @param downstreamStep {@link Step} to send batches to downstream.\n      */\n-    void setDownstream( Step<?> downstreamStep );\n+    void setDownstream(Step<?> downstreamStep);\n \n     /**\n      * Closes any resources kept open by this step. Called after a {@link Stage} is executed, whether successful or not.\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}