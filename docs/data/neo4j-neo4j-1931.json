{
    "project_name": "neo4j-neo4j",
    "error_id": "1931",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1931/IndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1931/IndexReader.java\nindex a9b38bf08e4..8908f6c616d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1931/IndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1931/IndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import org.neo4j.graphdb.Resource;\n@@ -33,30 +34,31 @@ import org.neo4j.values.storable.Value;\n public interface IndexReader extends Resource\n {\n     /**\n-     * @param entityId entity id to match.\n-     * @param cursorTracer underlying page cursor tracer\n+     * @param entityId       entity id to match.\n+     * @param cursorTracer   underlying page cursor tracer\n      * @param propertyKeyIds the property key ids that correspond to each of the property values.\n      * @param propertyValues property values to match.\n      * @return number of index entries for the given {@code entityId} and {@code propertyValues}.\n      */\n-    long countIndexedEntities( long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues );\n+    long countIndexedEntities(long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues);\n \n     IndexSampler createSampler();\n \n     /**\n      * Queries the index for the given {@link IndexQuery} predicates.\n-     * @param client the client which will control the progression though query results.\n+     *\n+     * @param client      the client which will control the progression though query results.\n      * @param constraints constraints upon the query result, like ordering and whether the index should fetch property values alongside the entity ids.\n-     * @param query the query so serve.\n+     * @param query       the query so serve.\n      */\n-    void query( QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n-            IndexQuery... query ) throws IndexNotApplicableKernelException;\n+    void query(QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n+               IndexQuery... query) throws IndexNotApplicableKernelException;\n \n     IndexReader EMPTY = new IndexReader()\n     {\n         // Used for checking index correctness\n         @Override\n-        public long countIndexedEntities( long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues )\n+        public long countIndexedEntities(long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues)\n         {\n             return 0;\n         }\n@@ -68,8 +70,8 @@ public interface IndexReader extends Resource\n         }\n \n         @Override\n-        public void query( QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n-                IndexQuery... query )\n+        public void query(QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n+                          IndexQuery... query)\n         {\n             // do nothing\n         }\n@@ -83,7 +85,7 @@ public interface IndexReader extends Resource\n     class Adaptor implements IndexReader\n     {\n         @Override\n-        public long countIndexedEntities( long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues )\n+        public long countIndexedEntities(long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues)\n         {\n             return 0;\n         }\n@@ -95,8 +97,8 @@ public interface IndexReader extends Resource\n         }\n \n         @Override\n-        public void query( QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n-                IndexQuery... query )\n+        public void query(QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n+                          IndexQuery... query)\n         {\n         }\n \n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}