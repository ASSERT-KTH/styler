{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1904",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "264",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "392",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1904/ConcurrentMapState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1904/ConcurrentMapState.java\nindex ba912265320..59ec22518fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1904/ConcurrentMapState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1904/ConcurrentMapState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.kvstore;\n \n import java.io.File;\n@@ -36,449 +37,446 @@ import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;\n \n class ConcurrentMapState<Key> extends ActiveState<Key>\n {\n-    private final ConcurrentMap<Key,ChangeEntry> changes;\n-    private final VersionContextSupplier versionContextSupplier;\n-    private final File file;\n-    private final AtomicLong highestAppliedVersion;\n-    private final AtomicLong appliedChanges;\n-    private final AtomicBoolean hasTrackedChanges;\n-    private final long previousVersion;\n-\n-    ConcurrentMapState( ReadableState<Key> store, File file, VersionContextSupplier versionContextSupplier )\n+  private final ConcurrentMap<Key, ChangeEntry> changes;\n+  private final VersionContextSupplier versionContextSupplier;\n+  private final File file;\n+  private final AtomicLong highestAppliedVersion;\n+  private final AtomicLong appliedChanges;\n+  private final AtomicBoolean hasTrackedChanges;\n+  private final long previousVersion;\n+\n+  ConcurrentMapState(ReadableState<Key> store, File file, VersionContextSupplier versionContextSupplier)\n+  {\n+    super(store, versionContextSupplier);\n+    this.previousVersion = store.version();\n+    this.file = file;\n+    this.versionContextSupplier = versionContextSupplier;\n+    this.highestAppliedVersion = new AtomicLong(previousVersion);\n+    this.changes = new ConcurrentHashMap<>();\n+    this.appliedChanges = new AtomicLong();\n+    hasTrackedChanges = new AtomicBoolean();\n+  }\n+\n+  private ConcurrentMapState(Prototype<Key> prototype, ReadableState<Key> store, File file, VersionContextSupplier versionContextSupplier)\n+  {\n+    super(store, versionContextSupplier);\n+    this.previousVersion = store.version();\n+    this.versionContextSupplier = versionContextSupplier;\n+    this.file = file;\n+    this.hasTrackedChanges = prototype.hasTrackedChanges;\n+    this.changes = prototype.changes;\n+    this.highestAppliedVersion = prototype.highestAppliedVersion;\n+    this.appliedChanges = prototype.appliedChanges;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return super.toString() + \"[\" + file + \"]\";\n+  }\n+\n+  @Override\n+  public EntryUpdater<Key> updater(long version, Lock lock)\n+  {\n+    if (version <= previousVersion)\n     {\n-        super( store, versionContextSupplier );\n-        this.previousVersion = store.version();\n-        this.file = file;\n-        this.versionContextSupplier = versionContextSupplier;\n-        this.highestAppliedVersion = new AtomicLong( previousVersion );\n-        this.changes = new ConcurrentHashMap<>();\n-        this.appliedChanges = new AtomicLong();\n-        hasTrackedChanges = new AtomicBoolean();\n+      return EntryUpdater.noUpdates();\n     }\n-\n-    private ConcurrentMapState( Prototype<Key> prototype, ReadableState<Key> store, File file, VersionContextSupplier versionContextSupplier )\n+    update(highestAppliedVersion, version);\n+    hasTrackedChanges.set(true);\n+    return new Updater<>(lock, store, changes, appliedChanges, version);\n+  }\n+\n+  @Override\n+  public EntryUpdater<Key> unsafeUpdater(Lock lock)\n+  {\n+    hasTrackedChanges.set(true);\n+    return new Updater<>(lock, store, changes, null, TransactionIdStore.BASE_TX_ID);\n+  }\n+\n+  private static class Updater<Key> extends EntryUpdater<Key>\n+  {\n+    private AtomicLong changeCounter;\n+    private final ReadableState<Key> store;\n+    private final ConcurrentMap<Key, ChangeEntry> changes;\n+    private final long version;\n+\n+    Updater(Lock lock, ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes, AtomicLong changeCounter,\n+            long version)\n     {\n-        super( store, versionContextSupplier );\n-        this.previousVersion = store.version();\n-        this.versionContextSupplier = versionContextSupplier;\n-        this.file = file;\n-        this.hasTrackedChanges = prototype.hasTrackedChanges;\n-        this.changes = prototype.changes;\n-        this.highestAppliedVersion = prototype.highestAppliedVersion;\n-        this.appliedChanges = prototype.appliedChanges;\n+      super(lock);\n+      this.changeCounter = changeCounter;\n+      this.store = store;\n+      this.changes = changes;\n+      this.version = version;\n     }\n \n     @Override\n-    public String toString()\n+    public void apply(Key key, ValueUpdate update) throws IOException\n     {\n-        return super.toString() + \"[\" + file + \"]\";\n+      ensureOpenOnSameThread();\n+      applyUpdate(store, changes, key, update, false, version);\n     }\n \n     @Override\n-    public EntryUpdater<Key> updater( long version, Lock lock )\n+    public void close()\n     {\n-        if ( version <= previousVersion )\n-        {\n-            return EntryUpdater.noUpdates();\n-        }\n-        update( highestAppliedVersion, version );\n-        hasTrackedChanges.set( true );\n-        return new Updater<>( lock, store, changes, appliedChanges, version );\n+      if (changeCounter != null)\n+      {\n+        changeCounter.incrementAndGet();\n+        changeCounter = null;\n+      }\n+      super.close();\n     }\n-\n-    @Override\n-    public EntryUpdater<Key> unsafeUpdater( Lock lock )\n+  }\n+\n+  @Override\n+  protected long storedVersion()\n+  {\n+    return previousVersion;\n+  }\n+\n+  @Override\n+  protected EntryUpdater<Key> resettingUpdater(Lock lock, final Runnable closeAction)\n+  {\n+    if (hasChanges())\n     {\n-        hasTrackedChanges.set( true );\n-        return new Updater<>( lock, store, changes, null, TransactionIdStore.BASE_TX_ID );\n+      throw new IllegalStateException(\"Cannot reset when there are changes!\");\n     }\n-\n-    private static class Updater<Key> extends EntryUpdater<Key>\n+    return new EntryUpdater<Key>(lock)\n     {\n-        private AtomicLong changeCounter;\n-        private final ReadableState<Key> store;\n-        private final ConcurrentMap<Key, ChangeEntry> changes;\n-        private final long version;\n-\n-        Updater( Lock lock, ReadableState<Key> store, ConcurrentMap<Key,ChangeEntry> changes, AtomicLong changeCounter,\n-                long version )\n+      @Override\n+      public void apply(Key key, ValueUpdate update) throws IOException\n+      {\n+        ensureOpen();\n+        applyUpdate(store, changes, key, update, true, highestAppliedVersion.get());\n+      }\n+\n+      @Override\n+      public void close()\n+      {\n+        try\n         {\n-            super( lock );\n-            this.changeCounter = changeCounter;\n-            this.store = store;\n-            this.changes = changes;\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public void apply( Key key, ValueUpdate update ) throws IOException\n+          closeAction.run();\n+        } finally\n         {\n-            ensureOpenOnSameThread();\n-            applyUpdate( store, changes, key, update, false, version );\n+          super.close();\n         }\n-\n-        @Override\n-        public void close()\n+      }\n+    };\n+  }\n+\n+  @Override\n+  protected PrototypeState<Key> prototype(long version)\n+  {\n+    return new Prototype<>(this, version);\n+  }\n+\n+  @SuppressWarnings(\"SynchronizationOnLocalVariableOrMethodParameter\")\n+  static <Key> void applyUpdate(ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes,\n+                                Key key, ValueUpdate update, boolean reset, long version) throws IOException\n+  {\n+    ChangeEntry value = changes.get(key);\n+    if (value == null)\n+    {\n+      ChangeEntry newEntry = ChangeEntry.of(new byte[store.keyFormat().valueSize()], version);\n+      synchronized (newEntry)\n+      {\n+        value = changes.putIfAbsent(key, newEntry);\n+        if (value == null)\n         {\n-            if ( changeCounter != null )\n+          BigEndianByteArrayBuffer buffer = new BigEndianByteArrayBuffer(newEntry.data);\n+          if (!reset)\n+          {\n+            PreviousValue lookup = new PreviousValue(newEntry.data);\n+            if (!store.lookup(key, lookup))\n             {\n-                changeCounter.incrementAndGet();\n-                changeCounter = null;\n+              buffer.clear();\n             }\n-            super.close();\n+          }\n+          update.update(buffer);\n+          return;\n         }\n+      }\n     }\n-\n-    @Override\n-    protected long storedVersion()\n+    synchronized (value)\n     {\n-        return previousVersion;\n+      BigEndianByteArrayBuffer target = new BigEndianByteArrayBuffer(value.data);\n+      value.version = version;\n+      if (reset)\n+      {\n+        target.clear();\n+      }\n+      update.update(target);\n     }\n+  }\n \n-    @Override\n-    protected EntryUpdater<Key> resettingUpdater( Lock lock, final Runnable closeAction )\n+  private static void update(AtomicLong highestAppliedVersion, long version)\n+  {\n+    for (long high; ; )\n     {\n-        if ( hasChanges() )\n-        {\n-            throw new IllegalStateException( \"Cannot reset when there are changes!\" );\n-        }\n-        return new EntryUpdater<Key>( lock )\n-        {\n-            @Override\n-            public void apply( Key key, ValueUpdate update ) throws IOException\n-            {\n-                ensureOpen();\n-                applyUpdate( store, changes, key, update, true, highestAppliedVersion.get() );\n-            }\n-\n-            @Override\n-            public void close()\n-            {\n-                try\n-                {\n-                    closeAction.run();\n-                }\n-                finally\n-                {\n-                    super.close();\n-                }\n-            }\n-        };\n+      high = highestAppliedVersion.get();\n+      if (version <= high)\n+      {\n+        return;\n+      }\n+      if (highestAppliedVersion.compareAndSet(high, version))\n+      {\n+        return;\n+      }\n     }\n-\n-    @Override\n-    protected PrototypeState<Key> prototype( long version )\n+  }\n+\n+  private static class Prototype<Key> extends PrototypeState<Key>\n+  {\n+    final ConcurrentMap<Key, ChangeEntry> changes = new ConcurrentHashMap<>();\n+    final AtomicLong highestAppliedVersion;\n+    final AtomicLong appliedChanges = new AtomicLong();\n+    final VersionContextSupplier versionContextSupplier;\n+    final AtomicBoolean hasTrackedChanges;\n+    private final long threshold;\n+\n+    Prototype(ConcurrentMapState<Key> state, long version)\n     {\n-        return new Prototype<>( this, version );\n+      super(state);\n+      this.versionContextSupplier = state.versionContextSupplier;\n+      threshold = version;\n+      hasTrackedChanges = new AtomicBoolean();\n+      this.highestAppliedVersion = new AtomicLong(version);\n     }\n \n-    @SuppressWarnings( \"SynchronizationOnLocalVariableOrMethodParameter\" )\n-    static <Key> void applyUpdate( ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes,\n-                                   Key key, ValueUpdate update, boolean reset, long version ) throws IOException\n+    @Override\n+    protected ActiveState<Key> create(ReadableState<Key> sub, File file, VersionContextSupplier versionContextSupplier)\n     {\n-       ChangeEntry value = changes.get( key );\n-        if ( value == null )\n-        {\n-            ChangeEntry newEntry = ChangeEntry.of( new byte[store.keyFormat().valueSize()], version );\n-            synchronized ( newEntry )\n-            {\n-                value = changes.putIfAbsent( key, newEntry );\n-                if ( value == null )\n-                {\n-                    BigEndianByteArrayBuffer buffer = new BigEndianByteArrayBuffer( newEntry.data );\n-                    if ( !reset )\n-                    {\n-                        PreviousValue lookup = new PreviousValue( newEntry.data );\n-                        if ( !store.lookup( key, lookup ) )\n-                        {\n-                            buffer.clear();\n-                        }\n-                    }\n-                    update.update( buffer );\n-                    return;\n-                }\n-            }\n-        }\n-        synchronized ( value )\n-        {\n-            BigEndianByteArrayBuffer target = new BigEndianByteArrayBuffer( value.data );\n-            value.version = version;\n-            if ( reset )\n-            {\n-                target.clear();\n-            }\n-            update.update( target );\n-        }\n+      return new ConcurrentMapState<>(this, sub, file, versionContextSupplier);\n     }\n \n-    private static void update( AtomicLong highestAppliedVersion, long version )\n+    @Override\n+    protected EntryUpdater<Key> updater(long version, Lock lock)\n     {\n-        for ( long high; ; )\n-        {\n-            high = highestAppliedVersion.get();\n-            if ( version <= high )\n-            {\n-                return;\n-            }\n-            if ( highestAppliedVersion.compareAndSet( high, version ) )\n-            {\n-                return;\n-            }\n-        }\n+      update(highestAppliedVersion, version);\n+      if (version > threshold)\n+      {\n+        hasTrackedChanges.set(true);\n+        return new Updater<>(lock, store, changes, appliedChanges, version);\n+      } else\n+      {\n+        return new Updater<>(lock, store, changes, null, version);\n+      }\n     }\n \n-    private static class Prototype<Key> extends PrototypeState<Key>\n+    @Override\n+    protected EntryUpdater<Key> unsafeUpdater(Lock lock)\n     {\n-        final ConcurrentMap<Key, ChangeEntry> changes = new ConcurrentHashMap<>();\n-        final AtomicLong highestAppliedVersion;\n-        final AtomicLong appliedChanges = new AtomicLong();\n-        final VersionContextSupplier versionContextSupplier;\n-        final AtomicBoolean hasTrackedChanges;\n-        private final long threshold;\n-\n-        Prototype( ConcurrentMapState<Key> state, long version )\n-        {\n-            super( state );\n-            this.versionContextSupplier = state.versionContextSupplier;\n-            threshold = version;\n-            hasTrackedChanges = new AtomicBoolean();\n-            this.highestAppliedVersion = new AtomicLong( version );\n-        }\n-\n-        @Override\n-        protected ActiveState<Key> create( ReadableState<Key> sub, File file, VersionContextSupplier versionContextSupplier )\n-        {\n-            return new ConcurrentMapState<>( this, sub, file, versionContextSupplier );\n-        }\n-\n-        @Override\n-        protected EntryUpdater<Key> updater( long version, Lock lock )\n-        {\n-            update( highestAppliedVersion, version );\n-            if ( version > threshold )\n-            {\n-                hasTrackedChanges.set( true );\n-                return new Updater<>( lock, store, changes, appliedChanges, version );\n-            }\n-            else\n-            {\n-                return new Updater<>( lock, store, changes, null, version );\n-            }\n-        }\n-\n-        @Override\n-        protected EntryUpdater<Key> unsafeUpdater( Lock lock )\n-        {\n-            hasTrackedChanges.set( true );\n-            return new Updater<>( lock, store, changes, null, highestAppliedVersion.get() );\n-        }\n-\n-        @Override\n-        protected boolean hasChanges()\n-        {\n-            return hasTrackedChanges.get() && !changes.isEmpty();\n-        }\n-\n-        @Override\n-        protected long version()\n-        {\n-            return highestAppliedVersion.get();\n-        }\n-\n-        @Override\n-        protected boolean lookup( Key key, ValueSink sink ) throws IOException\n-        {\n-            return performLookup( store, versionContextSupplier.getVersionContext(), changes, key, sink );\n-        }\n-\n-        @Override\n-        protected DataProvider dataProvider() throws IOException\n-        {\n-            return ConcurrentMapState.dataProvider( store, changes );\n-        }\n+      hasTrackedChanges.set(true);\n+      return new Updater<>(lock, store, changes, null, highestAppliedVersion.get());\n     }\n \n-    private static class PreviousValue extends ValueSink\n+    @Override\n+    protected boolean hasChanges()\n     {\n-        private final byte[] proposal;\n-\n-        PreviousValue( byte[] proposal )\n-        {\n-            this.proposal = proposal;\n-        }\n-\n-        @Override\n-        protected void value( ReadableBuffer value )\n-        {\n-            value.get( 0, proposal );\n-        }\n+      return hasTrackedChanges.get() && !changes.isEmpty();\n     }\n \n     @Override\n     protected long version()\n     {\n-        return highestAppliedVersion.get();\n+      return highestAppliedVersion.get();\n     }\n \n     @Override\n-    protected long applied()\n+    protected boolean lookup(Key key, ValueSink sink) throws IOException\n     {\n-        return appliedChanges.get();\n+      return performLookup(store, versionContextSupplier.getVersionContext(), changes, key, sink);\n     }\n \n     @Override\n-    protected boolean hasChanges()\n+    protected DataProvider dataProvider() throws IOException\n     {\n-        return hasTrackedChanges.get() && !changes.isEmpty();\n+      return ConcurrentMapState.dataProvider(store, changes);\n     }\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        store.close();\n-    }\n+  private static class PreviousValue extends ValueSink\n+  {\n+    private final byte[] proposal;\n \n-    @Override\n-    protected File file()\n+    PreviousValue(byte[] proposal)\n     {\n-        return file;\n+      this.proposal = proposal;\n     }\n \n     @Override\n-    protected Factory factory()\n+    protected void value(ReadableBuffer value)\n     {\n-        return State.Strategy.CONCURRENT_HASH_MAP;\n+      value.get(0, proposal);\n     }\n-\n-    @Override\n-    protected boolean lookup( Key key, ValueSink sink ) throws IOException\n+  }\n+\n+  @Override\n+  protected long version()\n+  {\n+    return highestAppliedVersion.get();\n+  }\n+\n+  @Override\n+  protected long applied()\n+  {\n+    return appliedChanges.get();\n+  }\n+\n+  @Override\n+  protected boolean hasChanges()\n+  {\n+    return hasTrackedChanges.get() && !changes.isEmpty();\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    store.close();\n+  }\n+\n+  @Override\n+  protected File file()\n+  {\n+    return file;\n+  }\n+\n+  @Override\n+  protected Factory factory()\n+  {\n+    return State.Strategy.CONCURRENT_HASH_MAP;\n+  }\n+\n+  @Override\n+  protected boolean lookup(Key key, ValueSink sink) throws IOException\n+  {\n+    return performLookup(store, versionContextSupplier.getVersionContext(), changes, key, sink);\n+  }\n+\n+  private static <Key> boolean performLookup(ReadableState<Key> store, VersionContext versionContext,\n+                                             ConcurrentMap<Key, ChangeEntry> changes, Key key, ValueSink sink) throws IOException\n+  {\n+    ChangeEntry change = changes.get(key);\n+    if (change != null)\n     {\n-        return performLookup( store, versionContextSupplier.getVersionContext(), changes, key, sink );\n+      if (change.version > versionContext.lastClosedTransactionId())\n+      {\n+        versionContext.markAsDirty();\n+      }\n+      sink.value(new BigEndianByteArrayBuffer(change.data));\n+      return true;\n     }\n-\n-    private static <Key> boolean performLookup( ReadableState<Key> store, VersionContext versionContext,\n-            ConcurrentMap<Key,ChangeEntry> changes, Key key, ValueSink sink  ) throws IOException\n+    return store.lookup(key, sink);\n+  }\n+\n+  /**\n+   * This method is expected to be called under a lock preventing modification to the state.\n+   */\n+  @Override\n+  public DataProvider dataProvider() throws IOException\n+  {\n+    return dataProvider(store, changes);\n+  }\n+\n+  private static <Key> DataProvider dataProvider(ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes)\n+      throws IOException\n+  {\n+    if (changes.isEmpty())\n     {\n-        ChangeEntry change = changes.get( key );\n-        if ( change != null )\n-        {\n-            if ( change.version > versionContext.lastClosedTransactionId() )\n-            {\n-                versionContext.markAsDirty();\n-            }\n-            sink.value( new BigEndianByteArrayBuffer( change.data ) );\n-            return true;\n-        }\n-        return store.lookup( key, sink );\n+      return store.dataProvider();\n+    } else\n+    {\n+      KeyFormat<Key> keys = store.keyFormat();\n+      return new KeyValueMerger(store.dataProvider(), new UpdateProvider(\n+          sortedUpdates(keys, changes)), keys.keySize(), keys.valueSize());\n     }\n+  }\n \n-    /**\n-     * This method is expected to be called under a lock preventing modification to the state.\n-     */\n-    @Override\n-    public DataProvider dataProvider() throws IOException\n+  private static <Key> byte[][] sortedUpdates(KeyFormat<Key> keys, ConcurrentMap<Key, ChangeEntry> changes)\n+  {\n+    Entry[] buffer = new Entry[changes.size()];\n+    Iterator<Map.Entry<Key, ChangeEntry>> entries = changes.entrySet().iterator();\n+    for (int i = 0; i < buffer.length; i++)\n     {\n-        return dataProvider( store, changes );\n+      Map.Entry<Key, ChangeEntry> next = entries.next(); // we hold the lock, so this should succeed\n+      byte[] key = new byte[keys.keySize()];\n+      keys.writeKey(next.getKey(), new BigEndianByteArrayBuffer(key));\n+      buffer[i] = new Entry(key, next.getValue().data);\n     }\n-\n-    private static <Key> DataProvider dataProvider( ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes )\n-            throws IOException\n+    Arrays.sort(buffer);\n+    assert !entries.hasNext() : \"We hold the lock, so we should see 'size' entries.\";\n+    byte[][] result = new byte[buffer.length * 2][];\n+    for (int i = 0; i < buffer.length; i++)\n     {\n-        if ( changes.isEmpty() )\n-        {\n-            return store.dataProvider();\n-        }\n-        else\n-        {\n-            KeyFormat<Key> keys = store.keyFormat();\n-            return new KeyValueMerger( store.dataProvider(), new UpdateProvider(\n-                    sortedUpdates( keys, changes ) ), keys.keySize(), keys.valueSize() );\n-        }\n+      result[i * 2] = buffer[i].key;\n+      result[i * 2 + 1] = buffer[i].value;\n     }\n+    return result;\n+  }\n \n-    private static <Key> byte[][] sortedUpdates( KeyFormat<Key> keys, ConcurrentMap<Key, ChangeEntry> changes )\n+  private static class Entry implements Comparable<Entry>\n+  {\n+    final byte[] key;\n+    final byte[] value;\n+\n+    private Entry(byte[] key, byte[] value)\n     {\n-        Entry[] buffer = new Entry[changes.size()];\n-        Iterator<Map.Entry<Key, ChangeEntry>> entries = changes.entrySet().iterator();\n-        for ( int i = 0; i < buffer.length; i++ )\n-        {\n-            Map.Entry<Key, ChangeEntry> next = entries.next(); // we hold the lock, so this should succeed\n-            byte[] key = new byte[keys.keySize()];\n-            keys.writeKey( next.getKey(), new BigEndianByteArrayBuffer( key ) );\n-            buffer[i] = new Entry( key, next.getValue().data );\n-        }\n-        Arrays.sort( buffer );\n-        assert !entries.hasNext() : \"We hold the lock, so we should see 'size' entries.\";\n-        byte[][] result = new byte[buffer.length * 2][];\n-        for ( int i = 0; i < buffer.length; i++ )\n-        {\n-            result[i * 2] = buffer[i].key;\n-            result[i * 2 + 1] = buffer[i].value;\n-        }\n-        return result;\n+      this.key = key;\n+      this.value = value;\n     }\n \n-    private static class Entry implements Comparable<Entry>\n+    @Override\n+    public int compareTo(Entry that)\n     {\n-        final byte[] key;\n-        final byte[] value;\n+      return BigEndianByteArrayBuffer.compare(this.key, that.key, 0);\n+    }\n+  }\n \n-        private Entry( byte[] key, byte[] value )\n-        {\n-            this.key = key;\n-            this.value = value;\n-        }\n+  private static class UpdateProvider implements DataProvider\n+  {\n+    private final byte[][] data;\n+    private int i;\n \n-        @Override\n-        public int compareTo( Entry that )\n-        {\n-            return BigEndianByteArrayBuffer.compare( this.key, that.key, 0 );\n-        }\n+    UpdateProvider(byte[][] data)\n+    {\n+      this.data = data;\n     }\n \n-    private static class UpdateProvider implements DataProvider\n+    @Override\n+    public boolean visit(WritableBuffer key, WritableBuffer value)\n     {\n-        private final byte[][] data;\n-        private int i;\n+      if (i < data.length)\n+      {\n+        key.put(0, data[i]);\n+        value.put(0, data[i + 1]);\n+        i += 2;\n+        return true;\n+      }\n+      return false;\n+    }\n \n-        UpdateProvider( byte[][] data )\n-        {\n-            this.data = data;\n-        }\n+    @Override\n+    public void close()\n+    {\n+    }\n+  }\n \n-        @Override\n-        public boolean visit( WritableBuffer key, WritableBuffer value )\n-        {\n-            if ( i < data.length )\n-            {\n-                key.put( 0, data[i] );\n-                value.put( 0, data[i + 1] );\n-                i += 2;\n-                return true;\n-            }\n-            return false;\n-        }\n+  private static class ChangeEntry\n+  {\n+    private byte[] data;\n+    private long version;\n \n-        @Override\n-        public void close()\n-        {\n-        }\n+    static ChangeEntry of(byte[] data, long version)\n+    {\n+      return new ChangeEntry(data, version);\n     }\n \n-    private static class ChangeEntry\n+    ChangeEntry(byte[] data, long version)\n     {\n-        private byte[] data;\n-        private long version;\n-\n-        static ChangeEntry of( byte[] data, long version )\n-        {\n-            return new ChangeEntry( data, version );\n-        }\n-\n-        ChangeEntry( byte[] data, long version )\n-        {\n-            this.data = data;\n-            this.version = version;\n-        }\n+      this.data = data;\n+      this.version = version;\n     }\n+  }\n }\n",
            "diff_size": 562
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "259",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "360",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "column": "32",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1904/ConcurrentMapState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1904/ConcurrentMapState.java\nindex ba912265320..7d04e424a9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1904/ConcurrentMapState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1904/ConcurrentMapState.java\n@@ -81,7 +81,8 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n         {\n             return EntryUpdater.noUpdates();\n         }\n-        update( highestAppliedVersion, version );\n+\n+update( highestAppliedVersion, version );\n         hasTrackedChanges.set( true );\n         return new Updater<>( lock, store, changes, appliedChanges, version );\n     }\n@@ -97,7 +98,7 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n     {\n         private AtomicLong changeCounter;\n         private final ReadableState<Key> store;\n-        private final ConcurrentMap<Key, ChangeEntry> changes;\n+        private final ConcurrentMap<Key,ChangeEntry> changes;\n         private final long version;\n \n         Updater( Lock lock, ReadableState<Key> store, ConcurrentMap<Key,ChangeEntry> changes, AtomicLong changeCounter,\n@@ -173,11 +174,10 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n     }\n \n     @SuppressWarnings( \"SynchronizationOnLocalVariableOrMethodParameter\" )\n-    static <Key> void applyUpdate( ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes,\n-                                   Key key, ValueUpdate update, boolean reset, long version ) throws IOException\n-    {\n-       ChangeEntry value = changes.get( key );\n-        if ( value == null )\n+    static <Key> void applyUpdate( ReadableState<Key> store, ConcurrentMap<Key,ChangeEntry> changes, Key key, ValueUpdate update, boolean reset, long version ) throws IOException\n+{\n+    ChangeEntry value = changes.get( key );\n+if ( value == null )\n         {\n             ChangeEntry newEntry = ChangeEntry.of( new byte[store.keyFormat().valueSize()], version );\n             synchronized ( newEntry )\n@@ -220,7 +220,8 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n             {\n                 return;\n             }\n-            if ( highestAppliedVersion.compareAndSet( high, version ) )\n+\n+if ( highestAppliedVersion.compareAndSet( high, version ) )\n             {\n                 return;\n             }\n@@ -229,7 +230,7 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n \n     private static class Prototype<Key> extends PrototypeState<Key>\n     {\n-        final ConcurrentMap<Key, ChangeEntry> changes = new ConcurrentHashMap<>();\n+        final ConcurrentMap<Key,ChangeEntry> changes = new ConcurrentHashMap<>();\n         final AtomicLong highestAppliedVersion;\n         final AtomicLong appliedChanges = new AtomicLong();\n         final VersionContextSupplier versionContextSupplier;\n@@ -255,7 +256,7 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n         protected EntryUpdater<Key> updater( long version, Lock lock )\n         {\n             update( highestAppliedVersion, version );\n-            if ( version > threshold )\n+            if ( version> threshold )\n             {\n                 hasTrackedChanges.set( true );\n                 return new Updater<>( lock, store, changes, appliedChanges, version );\n@@ -356,20 +357,20 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n         return performLookup( store, versionContextSupplier.getVersionContext(), changes, key, sink );\n     }\n \n-    private static <Key> boolean performLookup( ReadableState<Key> store, VersionContext versionContext,\n-            ConcurrentMap<Key,ChangeEntry> changes, Key key, ValueSink sink  ) throws IOException\n-    {\n+    private static <Key> boolean performLookup( ReadableState<Key> store, VersionContext versionContext, ConcurrentMap<Key,ChangeEntry> changes, Key key, ValueSink sink ) throws IOException\n+{\n         ChangeEntry change = changes.get( key );\n         if ( change != null )\n         {\n-            if ( change.version > versionContext.lastClosedTransactionId() )\n+            if ( change.version> versionContext.lastClosedTransactionId() )\n             {\n                 versionContext.markAsDirty();\n             }\n             sink.value( new BigEndianByteArrayBuffer( change.data ) );\n             return true;\n         }\n-        return store.lookup( key, sink );\n+\n+return store.lookup( key, sink );\n     }\n \n     /**\n@@ -381,9 +382,8 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n         return dataProvider( store, changes );\n     }\n \n-    private static <Key> DataProvider dataProvider( ReadableState<Key> store, ConcurrentMap<Key, ChangeEntry> changes )\n-            throws IOException\n-    {\n+    private static <Key> DataProvider dataProvider( ReadableState<Key> store, ConcurrentMap<Key,ChangeEntry> changes ) throws IOException\n+{\n         if ( changes.isEmpty() )\n         {\n             return store.dataProvider();\n@@ -391,18 +391,17 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n         else\n         {\n             KeyFormat<Key> keys = store.keyFormat();\n-            return new KeyValueMerger( store.dataProvider(), new UpdateProvider(\n-                    sortedUpdates( keys, changes ) ), keys.keySize(), keys.valueSize() );\n-        }\n+            return new KeyValueMerger( store.dataProvider(), new UpdateProvider( sortedUpdates( keys, changes ) ), keys.keySize(), keys.valueSize() );\n+    }\n     }\n \n-    private static <Key> byte[][] sortedUpdates( KeyFormat<Key> keys, ConcurrentMap<Key, ChangeEntry> changes )\n+    private static <Key> byte[][] sortedUpdates( KeyFormat<Key> keys, ConcurrentMap<Key,ChangeEntry> changes )\n     {\n         Entry[] buffer = new Entry[changes.size()];\n         Iterator<Map.Entry<Key, ChangeEntry>> entries = changes.entrySet().iterator();\n         for ( int i = 0; i < buffer.length; i++ )\n         {\n-            Map.Entry<Key, ChangeEntry> next = entries.next(); // we hold the lock, so this should succeed\n+            Map.Entry<Key,ChangeEntry> next = entries.next(); // we hold the lock, so this should succeed\n             byte[] key = new byte[keys.keySize()];\n             keys.writeKey( next.getKey(), new BigEndianByteArrayBuffer( key ) );\n             buffer[i] = new Entry( key, next.getValue().data );\n@@ -415,7 +414,8 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n             result[i * 2] = buffer[i].key;\n             result[i * 2 + 1] = buffer[i].value;\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private static class Entry implements Comparable<Entry>\n@@ -481,4 +481,4 @@ class ConcurrentMapState<Key> extends ActiveState<Key>\n             this.version = version;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}