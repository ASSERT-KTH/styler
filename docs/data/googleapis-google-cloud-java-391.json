{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "391",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.google.cloud.bigtable.data.v2.stub.readrows;\n\nimport com.google.api.core.InternalApi;\nimport com.google.api.gax.retrying.StreamResumptionStrategy;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/391/ReadRowsResumptionStrategy.java\nindex ab312ec41c2..a8da41394f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/391/ReadRowsResumptionStrategy.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub.readrows;\n \n import com.google.api.core.InternalApi;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/391/ReadRowsResumptionStrategy.java\nindex ab312ec41c2..a8da41394f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/391/ReadRowsResumptionStrategy.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub.readrows;\n \n import com.google.api.core.InternalApi;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/391/ReadRowsResumptionStrategy.java\nindex ab312ec41c2..8af33a254f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/391/ReadRowsResumptionStrategy.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub.readrows;\n \n import com.google.api.core.InternalApi;\n@@ -34,8 +35,8 @@ import com.google.protobuf.ByteString;\n  * applications.\n  */\n @InternalApi\n-public class ReadRowsResumptionStrategy<RowT>\n-    implements StreamResumptionStrategy<ReadRowsRequest, RowT> {\n+public class ReadRowsResumptionStrategy<RowT> implements StreamResumptionStrategy<ReadRowsRequest, RowT> {\n+\n   private final RowAdapter<RowT> rowAdapter;\n   private ByteString lastKey = ByteString.EMPTY;\n   // Number of rows processed excluding Marker row.\n@@ -92,20 +93,17 @@ public class ReadRowsResumptionStrategy<RowT>\n     // had a row limit, has seen enough rows. These requests are replaced with a marker request that\n     // will be handled by ReadRowsRetryCompletedCallable. See docs in ReadRowsRetryCompletedCallable\n     // for more details.\n-    if (remaining == null\n-        || (originalRequest.getRowsLimit() > 0 && originalRequest.getRowsLimit() == numProcessed)) {\n+    if (remaining == null || (originalRequest.getRowsLimit() > 0 && originalRequest.getRowsLimit() == numProcessed)) {\n       return ReadRowsRetryCompletedCallable.FULFILLED_REQUEST_MARKER;\n     }\n \n     Builder builder = originalRequest.toBuilder().setRows(remaining);\n-\n-    if (originalRequest.getRowsLimit() > 0) {\n+if (originalRequest.getRowsLimit() > 0) {\n       Preconditions.checkState(\n           originalRequest.getRowsLimit() > numProcessed,\n           \"Detected too many rows for the current row limit during a retry.\");\n       builder.setRowsLimit(originalRequest.getRowsLimit() - numProcessed);\n     }\n-\n-    return builder.build();\n+return builder.build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'implements' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'\"Detected too many rows for the current row limit during a retry.\"' has incorrect indentation level 8, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/391/ReadRowsResumptionStrategy.java\nindex ab312ec41c2..9d87a1169cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/391/ReadRowsResumptionStrategy.java\n@@ -33,9 +33,12 @@ import com.google.protobuf.ByteString;\n  * <p>This class is considered an internal implementation detail and not meant to be used by\n  * applications.\n  */\n+\n+\n @InternalApi\n public class ReadRowsResumptionStrategy<RowT>\n-    implements StreamResumptionStrategy<ReadRowsRequest, RowT> {\n+implements StreamResumptionStrategy<ReadRowsRequest, RowT> {\n+\n   private final RowAdapter<RowT> rowAdapter;\n   private ByteString lastKey = ByteString.EMPTY;\n   // Number of rows processed excluding Marker row.\n@@ -77,6 +80,7 @@ public class ReadRowsResumptionStrategy<RowT>\n    * implementation takes care to update the row limit of the request to account for all of the\n    * received rows.\n    */\n+\n   @Override\n   public ReadRowsRequest getResumeRequest(ReadRowsRequest originalRequest) {\n     // An empty lastKey means that we have not successfully read the first row,\n@@ -84,7 +88,6 @@ public class ReadRowsResumptionStrategy<RowT>\n     if (lastKey.isEmpty()) {\n       return originalRequest;\n     }\n-\n     RowSet remaining = RowSetUtil.split(originalRequest.getRows(), lastKey).getRight();\n \n     // Edge case: retrying a fulfilled request.\n@@ -92,20 +95,15 @@ public class ReadRowsResumptionStrategy<RowT>\n     // had a row limit, has seen enough rows. These requests are replaced with a marker request that\n     // will be handled by ReadRowsRetryCompletedCallable. See docs in ReadRowsRetryCompletedCallable\n     // for more details.\n-    if (remaining == null\n-        || (originalRequest.getRowsLimit() > 0 && originalRequest.getRowsLimit() == numProcessed)) {\n+    if (remaining == null || (originalRequest.getRowsLimit() > 0 && originalRequest.getRowsLimit() == numProcessed)) {\n       return ReadRowsRetryCompletedCallable.FULFILLED_REQUEST_MARKER;\n     }\n-\n     Builder builder = originalRequest.toBuilder().setRows(remaining);\n-\n     if (originalRequest.getRowsLimit() > 0) {\n-      Preconditions.checkState(\n-          originalRequest.getRowsLimit() > numProcessed,\n-          \"Detected too many rows for the current row limit during a retry.\");\n+      Preconditions.checkState(originalRequest.getRowsLimit() > numProcessed,\n+        \"Detected too many rows for the current row limit during a retry.\");\n       builder.setRowsLimit(originalRequest.getRowsLimit() - numProcessed);\n     }\n-\n     return builder.build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/391/ReadRowsResumptionStrategy.java\nindex ab312ec41c2..a8da41394f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/391/ReadRowsResumptionStrategy.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub.readrows;\n \n import com.google.api.core.InternalApi;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/391/ReadRowsResumptionStrategy.java\nindex ab312ec41c2..a8da41394f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/391/ReadRowsResumptionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/391/ReadRowsResumptionStrategy.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub.readrows;\n \n import com.google.api.core.InternalApi;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}