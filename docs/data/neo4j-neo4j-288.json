{
    "project_name": "neo4j-neo4j",
    "error_id": "288",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/288/ConstraintsProcedureUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/288/ConstraintsProcedureUtil.java\nindex 3cf141719e7..6c2e3c6d495 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/288/ConstraintsProcedureUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/288/ConstraintsProcedureUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.builtin;\n \n import java.util.function.IntFunction;\n@@ -29,87 +30,85 @@ import org.neo4j.internal.schema.SchemaDescriptor;\n \n public class ConstraintsProcedureUtil\n {\n-    static String prettyPrint( ConstraintDescriptor constraintDescriptor, TokenNameLookup tokenNameLookup )\n+    static String prettyPrint(ConstraintDescriptor constraintDescriptor, TokenNameLookup tokenNameLookup)\n     {\n         SchemaDescriptor schema = constraintDescriptor.schema();\n         int[] entityTokenIds = schema.getEntityTokenIds();\n-        if ( entityTokenIds.length != 1 )\n+        if (entityTokenIds.length != 1)\n         {\n-            throw new IllegalArgumentException( \"Cannot pretty-print multi-token constraints: \" + constraintDescriptor.userDescription( tokenNameLookup ) );\n+            throw new IllegalArgumentException(\"Cannot pretty-print multi-token constraints: \" + constraintDescriptor.userDescription(tokenNameLookup));\n         }\n-        String entityTypeName = schema.entityType() == EntityType.NODE ? tokenNameLookup.labelGetName( entityTokenIds[0] ) :\n-                                tokenNameLookup.relationshipTypeGetName( entityTokenIds[0] );\n-        entityTypeName = escapeLabelOrRelTyp( entityTypeName );\n+        String entityTypeName = schema.entityType() == EntityType.NODE ? tokenNameLookup.labelGetName(entityTokenIds[0]) :\n+          tokenNameLookup.relationshipTypeGetName(entityTokenIds[0]);\n+        entityTypeName = escapeLabelOrRelTyp(entityTypeName);\n         String entityName = entityTypeName.toLowerCase();\n-        String properties = formatProperties( schema.getPropertyIds(), tokenNameLookup, entityName );\n+        String properties = formatProperties(schema.getPropertyIds(), tokenNameLookup, entityName);\n \n         ConstraintType type = constraintDescriptor.type();\n-        switch ( type )\n+        switch (type)\n         {\n-        case EXISTS:\n-            switch ( schema.entityType() )\n-            {\n-            case NODE:\n-                return \"CONSTRAINT ON ( \" + entityName + \":\" + entityTypeName + \" ) ASSERT \" + properties + \" IS NOT NULL\";\n-            case RELATIONSHIP:\n-                return \"CONSTRAINT ON ()-[ \" + entityName + \":\" + entityTypeName + \" ]-() ASSERT \" + properties + \" IS NOT NULL\";\n+            case EXISTS:\n+                switch (schema.entityType())\n+                {\n+                    case NODE:\n+                        return \"CONSTRAINT ON ( \" + entityName + \":\" + entityTypeName + \" ) ASSERT \" + properties + \" IS NOT NULL\";\n+                    case RELATIONSHIP:\n+                        return \"CONSTRAINT ON ()-[ \" + entityName + \":\" + entityTypeName + \" ]-() ASSERT \" + properties + \" IS NOT NULL\";\n+                    default:\n+                        throw new IllegalStateException(\"Unknown schema entity type: \" + schema.entityType() + \".\");\n+                }\n+            case UNIQUE:\n+                return \"CONSTRAINT ON ( \" + entityName + \":\" + entityTypeName + \" ) ASSERT \" + properties + \" IS UNIQUE\";\n+            case UNIQUE_EXISTS:\n+                return \"CONSTRAINT ON ( \" + entityName + \":\" + entityTypeName + \" ) ASSERT \" + properties + \" IS NODE KEY\";\n             default:\n-                throw new IllegalStateException( \"Unknown schema entity type: \" + schema.entityType() + \".\" );\n-            }\n-        case UNIQUE:\n-            return \"CONSTRAINT ON ( \" + entityName + \":\" + entityTypeName + \" ) ASSERT \" + properties + \" IS UNIQUE\";\n-        case UNIQUE_EXISTS:\n-            return \"CONSTRAINT ON ( \" + entityName + \":\" + entityTypeName + \" ) ASSERT \" + properties + \" IS NODE KEY\";\n-        default:\n-            throw new IllegalStateException( \"Unknown constraint type: \" + type + \".\" );\n+                throw new IllegalStateException(\"Unknown constraint type: \" + type + \".\");\n         }\n     }\n \n-    private static String escapeLabelOrRelTyp( String name )\n+    private static String escapeLabelOrRelTyp(String name)\n     {\n-        if ( name.contains( \":\" ) )\n+        if (name.contains(\":\"))\n         {\n             return \"`\" + name + \"`\";\n-        }\n-        else\n+        } else\n         {\n             return name;\n         }\n     }\n \n-    private static String formatProperties( int[] propertyIds, TokenNameLookup tokenNameLookup, String nodeName )\n+    private static String formatProperties(int[] propertyIds, TokenNameLookup tokenNameLookup, String nodeName)\n     {\n-        return niceProperties( tokenNameLookup, propertyIds, nodeName + \".\" );\n+        return niceProperties(tokenNameLookup, propertyIds, nodeName + \".\");\n     }\n \n-    private static String niceProperties( TokenNameLookup lookup, int[] propertyIds, String prefix )\n+    private static String niceProperties(TokenNameLookup lookup, int[] propertyIds, String prefix)\n     {\n         StringBuilder out = new StringBuilder();\n-        out.append( '(' );\n-        format( out, prefix, \", \", lookup::propertyKeyGetName, propertyIds );\n-        out.append( ')' );\n+        out.append('(');\n+        format(out, prefix, \", \", lookup::propertyKeyGetName, propertyIds);\n+        out.append(')');\n         return out.toString();\n     }\n \n-    private static void format( StringBuilder out, String prefix, String separator, IntFunction<String> lookup, int[] ids )\n+    private static void format(StringBuilder out, String prefix, String separator, IntFunction<String> lookup, int[] ids)\n     {\n-        for ( int id : ids )\n+        for (int id : ids)\n         {\n-            String name = lookup.apply( id );\n-            out.append( prefix );\n-            if ( name.contains( \":\" ) )\n+            String name = lookup.apply(id);\n+            out.append(prefix);\n+            if (name.contains(\":\"))\n             {\n-                out.append( '`' ).append( name ).append( '`' );\n-            }\n-            else\n+                out.append('`').append(name).append('`');\n+            } else\n             {\n-                out.append( name );\n+                out.append(name);\n             }\n-            out.append( separator );\n+            out.append(separator);\n         }\n-        if ( ids.length > 0 )\n+        if (ids.length > 0)\n         {\n-            out.setLength( out.length() - separator.length() );\n+            out.setLength(out.length() - separator.length());\n         }\n     }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}