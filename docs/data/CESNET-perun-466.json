{
    "project_name": "CESNET-perun",
    "error_id": "466",
    "information": {
        "errors": [
            {
                "line": "136",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * Set last processed ID of message in consumer with consumerName.\n\t *\n\t * @param perunSession \n\t * @param consumerName name of consumer\n\t * @param lastProcessedId id of last processed message in consumer\n\t * @throws InternalErrorException",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/466/AuditMessagesManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/466/AuditMessagesManager.java\nindex ced444d36d2..fa1dc4d0559 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/466/AuditMessagesManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/466/AuditMessagesManager.java\n@@ -1,8 +1,10 @@\n package cz.metacentrum.perun.core.api;\n \n import java.util.List;\n+\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.PrivilegeException;\n+\n import java.util.Map;\n \n /**\n@@ -12,142 +14,142 @@ import java.util.Map;\n  */\n public interface AuditMessagesManager {\n \n-\tpublic final static Integer COUNTOFMESSAGES = 100;\n-\n-\t/**\n-\t * Returns reasonable number of messages from audit's logs which is determined by the constant <b>CountOfMessages<b/>.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return list of audit's messages\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns x messages from audit's logs, where x = count.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count Count of returned messages.\n-\t * @return list of audit's messages\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Return less than count or equals to count messages from audit's logs.\n-\t *\n-\t * <b>IMPORTANT:</b> This variant do not guarantee returning just count of messages!\n-\t * Return messages by Id from max_id to max_id-count (can be less then count messages).\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count Count of returned messages\n-\t * @return list of audit's messages\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of messages from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of messages\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<String> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>full</b> messages from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of full messages\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<String> pollConsumerFullMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of messages for parser from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of messages for parser\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\t List<String> pollConsumerMessagesForParserSimple(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>auditMessages</b> for parser from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of auditMessages for parser\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\t List<AuditMessage> pollConsumerMessagesForParser(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Creates new auditer consumer with last processed id which equals auditer log max id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName new name for consumer\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\t void createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Log auditer message.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param message message to be logged\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get all auditer consumers from database. In map is String = name and Integer = lastProcessedId.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return map string to integer where string is name of consumer and int is last_processed_id of consumer\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tMap<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get id of last message from auditer_log.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return last message id\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tint getLastMessageId(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Set last processed ID of message in consumer with consumerName.\n-\t *\n-\t * @param perunSession \n-\t * @param consumerName name of consumer\n-\t * @param lastProcessedId id of last processed message in consumer\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get number of messages in auditer log.\n-\t *\n-\t * @param perunSession\n-\t * @return number of messages in auditer log\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tint getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+    public final static Integer COUNTOFMESSAGES = 100;\n+\n+    /**\n+     * Returns reasonable number of messages from audit's logs which is determined by the constant <b>CountOfMessages<b/>.\n+     *\n+     * @param perunSession perun session\n+     * @return list of audit's messages\n+     * @throws InternalErrorException\n+     */\n+    List<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Returns x messages from audit's logs, where x = count.\n+     *\n+     * @param perunSession perun session\n+     * @param count        Count of returned messages.\n+     * @return list of audit's messages\n+     * @throws InternalErrorException\n+     */\n+    List<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+    /**\n+     * Return less than count or equals to count messages from audit's logs.\n+     *\n+     * <b>IMPORTANT:</b> This variant do not guarantee returning just count of messages!\n+     * Return messages by Id from max_id to max_id-count (can be less then count messages).\n+     *\n+     * @param perunSession perun session\n+     * @param count        Count of returned messages\n+     * @return list of audit's messages\n+     * @throws InternalErrorException\n+     */\n+    List<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of messages from audit's log which id is bigger than last processed id.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName consumer to get messages for\n+     * @return list of messages\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<String> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns list of <b>full</b> messages from audit's log which id is bigger than last processed id.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName consumer to get messages for\n+     * @return list of full messages\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<String> pollConsumerFullMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns list of messages for parser from audit's log which id is bigger than last processed id.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName consumer to get messages for\n+     * @return list of messages for parser\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<String> pollConsumerMessagesForParserSimple(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns list of <b>auditMessages</b> for parser from audit's log which id is bigger than last processed id.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName consumer to get messages for\n+     * @return list of auditMessages for parser\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<AuditMessage> pollConsumerMessagesForParser(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Creates new auditer consumer with last processed id which equals auditer log max id.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName new name for consumer\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    void createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Log auditer message.\n+     *\n+     * @param perunSession perun session\n+     * @param message      message to be logged\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    void log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Get all auditer consumers from database. In map is String = name and Integer = lastProcessedId.\n+     *\n+     * @param perunSession perun session\n+     * @return map string to integer where string is name of consumer and int is last_processed_id of consumer\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    Map<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Get id of last message from auditer_log.\n+     *\n+     * @param perunSession perun session\n+     * @return last message id\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    int getLastMessageId(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Set last processed ID of message in consumer with consumerName.\n+     *\n+     * @param perunSession\n+     * @param consumerName    name of consumer\n+     * @param lastProcessedId id of last processed message in consumer\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    void setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Get number of messages in auditer log.\n+     *\n+     * @param perunSession\n+     * @return number of messages in auditer log\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    int getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n }\n",
            "diff_size": 140
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/466/AuditMessagesManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/466/AuditMessagesManager.java\nindex ced444d36d2..b9b5ba597c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/466/AuditMessagesManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/466/AuditMessagesManager.java\n@@ -10,144 +10,173 @@ import java.util.Map;\n  *\n  * @author Michal Stava\n  */\n+\n+\n public interface AuditMessagesManager {\n \n-\tpublic final static Integer COUNTOFMESSAGES = 100;\n-\n-\t/**\n-\t * Returns reasonable number of messages from audit's logs which is determined by the constant <b>CountOfMessages<b/>.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return list of audit's messages\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns x messages from audit's logs, where x = count.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count Count of returned messages.\n-\t * @return list of audit's messages\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Return less than count or equals to count messages from audit's logs.\n-\t *\n-\t * <b>IMPORTANT:</b> This variant do not guarantee returning just count of messages!\n-\t * Return messages by Id from max_id to max_id-count (can be less then count messages).\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count Count of returned messages\n-\t * @return list of audit's messages\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of messages from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of messages\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<String> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>full</b> messages from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of full messages\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<String> pollConsumerFullMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of messages for parser from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of messages for parser\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\t List<String> pollConsumerMessagesForParserSimple(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>auditMessages</b> for parser from audit's log which id is bigger than last processed id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return list of auditMessages for parser\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\t List<AuditMessage> pollConsumerMessagesForParser(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Creates new auditer consumer with last processed id which equals auditer log max id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName new name for consumer\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\t void createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Log auditer message.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param message message to be logged\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get all auditer consumers from database. In map is String = name and Integer = lastProcessedId.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return map string to integer where string is name of consumer and int is last_processed_id of consumer\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tMap<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get id of last message from auditer_log.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return last message id\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tint getLastMessageId(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Set last processed ID of message in consumer with consumerName.\n-\t *\n-\t * @param perunSession \n-\t * @param consumerName name of consumer\n-\t * @param lastProcessedId id of last processed message in consumer\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get number of messages in auditer log.\n-\t *\n-\t * @param perunSession\n-\t * @return number of messages in auditer log\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tint getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-}\n+ public final static Integer COUNTOFMESSAGES = 100;\n+\n+ /**\n+  * Returns reasonable number of messages from audit's logs which is determined by the constant <b>CountOfMessages<b/>.\n+  *\n+  * @param perunSession perun session\n+  * @return list of audit's messages\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Returns x messages from audit's logs, where x = count.\n+  *\n+  * @param perunSession perun session\n+  * @param count Count of returned messages.\n+  * @return list of audit's messages\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+ /**\n+  * Return less than count or equals to count messages from audit's logs.\n+  *\n+  * <b>IMPORTANT:</b> This variant do not guarantee returning just count of messages!\n+  * Return messages by Id from max_id to max_id-count (can be less then count messages).\n+  *\n+  * @param perunSession perun session\n+  * @param count Count of returned messages\n+  * @return list of audit's messages\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of messages from audit's log which id is bigger than last processed id.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @return list of messages\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<String> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Returns list of <b>full</b> messages from audit's log which id is bigger than last processed id.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @return list of full messages\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<String> pollConsumerFullMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Returns list of messages for parser from audit's log which id is bigger than last processed id.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @return list of messages for parser\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<String> pollConsumerMessagesForParserSimple(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Returns list of <b>auditMessages</b> for parser from audit's log which id is bigger than last processed id.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @return list of auditMessages for parser\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<AuditMessage> pollConsumerMessagesForParser(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Creates new auditer consumer with last processed id which equals auditer log max id.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName new name for consumer\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ void createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Log auditer message.\n+  *\n+  * @param perunSession perun session\n+  * @param message message to be logged\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ void log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Get all auditer consumers from database. In map is String = name and Integer = lastProcessedId.\n+  *\n+  * @param perunSession perun session\n+  * @return map string to integer where string is name of consumer and int is last_processed_id of consumer\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Map<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Get id of last message from auditer_log.\n+  *\n+  * @param perunSession perun session\n+  * @return last message id\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ int getLastMessageId(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Set last processed ID of message in consumer with consumerName.\n+  *\n+  * @param perunSession \n+  * @param consumerName name of consumer\n+  * @param lastProcessedId id of last processed message in consumer\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ void setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Get number of messages in auditer log.\n+  *\n+  * @param perunSession\n+  * @return number of messages in auditer log\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ int getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 168
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}