{
    "project_name": "vostok-hercules",
    "error_id": "80",
    "information": {
        "errors": [
            {
                "line": "84",
                "column": "44",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n            Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n            if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n                events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n            }\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/80/BulkHandler.java\nindex ac3acc02d5a..4bc69347fec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/80/BulkHandler.java\n@@ -81,7 +81,7 @@ public class BulkHandler implements HttpHandler {\n             }\n \n             Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n-            if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n+            if (validator.validate(event)) { //TODO: Errors should be added to response as Elasticsearch do\n                 events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "84",
                    "column": "38",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/80/BulkHandler.java\nindex ac3acc02d5a..101fc14489e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/80/BulkHandler.java\n@@ -29,78 +29,78 @@ import java.util.Map;\n  * @author Gregory Koshelev\n  */\n public class BulkHandler implements HttpHandler {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(BulkHandler.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BulkHandler.class);\n \n-    private final IndexManager indexManager;\n-    private final GateSender gateSender;\n+  private final IndexManager indexManager;\n+  private final GateSender gateSender;\n \n-    private final EventValidator validator;\n+  private final EventValidator validator;\n \n-    public BulkHandler(IndexManager indexManager, GateSender gateSender) {\n-        this.indexManager = indexManager;\n-        this.gateSender = gateSender;\n+  public BulkHandler(IndexManager indexManager, GateSender gateSender) {\n+    this.indexManager = indexManager;\n+    this.gateSender = gateSender;\n \n-        validator = new EventValidator();\n-    }\n-\n-    @Override\n-    public void handle(HttpServerRequest request) {\n-        final String defaultIndex = request.getPathParameter(\"index\");\n-        final String defaultType = request.getPathParameter(\"type\");\n-\n-        request.readBodyAsync(\n-                (r, bytes) -> request.dispatchAsync(() -> {\n-                    try {\n-                        process(request, bytes, defaultIndex, defaultType);\n-                    } catch (Throwable throwable) {\n-                        LOGGER.error(\"Unknown error\", throwable);\n-                        tryComplete(request, HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                    }\n-                }),\n-                (r, exception) -> {\n-                    LOGGER.error(\"Read body failed with exception\", exception);\n-                    request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                });\n-    }\n-\n-    private void process(HttpServerRequest request, byte[] data, String defaultIndex, String defaultType) {\n-        Iterator<IndexRequest> iterator = BulkReader.read(data, defaultIndex, defaultType);\n+    validator = new EventValidator();\n+  }\n \n-        Map<String, List<Event>> events = new HashMap<>();\n+  @Override\n+  public void handle(HttpServerRequest request) {\n+    final String defaultIndex = request.getPathParameter(\"index\");\n+    final String defaultType = request.getPathParameter(\"type\");\n \n-        while (iterator.hasNext()) {\n-            IndexRequest indexRequest = iterator.next();\n-\n-            String index = indexRequest.getAction().getIndex();\n-            if (index == null) {\n-                continue;\n-            }\n-            IndexMeta meta = indexManager.meta(index);\n-            if (meta == null) {\n-                continue;\n-            }\n-\n-            Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n-            if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n-                events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n-            }\n-        }\n-\n-        for (Map.Entry<String, List<Event>> batch : events.entrySet()) {\n-            GateStatus status = gateSender.send(batch.getValue(), false, batch.getKey());\n-            if (status != GateStatus.OK) {\n-                //TODO: should retry the request or send 503 back\n-            }\n+    request.readBodyAsync(\n+      (r, bytes) -> request.dispatchAsync(() -> {\n+        try {\n+          process(request, bytes, defaultIndex, defaultType);\n+        } catch (Throwable throwable) {\n+          LOGGER.error(\"Unknown error\", throwable);\n+          tryComplete(request, HttpStatusCodes.INTERNAL_SERVER_ERROR);\n         }\n+      }),\n+      (r, exception) -> {\n+        LOGGER.error(\"Read body failed with exception\", exception);\n+        request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+      });\n+  }\n+\n+  private void process(HttpServerRequest request, byte[] data, String defaultIndex, String defaultType) {\n+    Iterator<IndexRequest> iterator = BulkReader.read(data, defaultIndex, defaultType);\n+\n+    Map<String, List<Event>> events = new HashMap<>();\n+\n+    while (iterator.hasNext()) {\n+      IndexRequest indexRequest = iterator.next();\n+\n+      String index = indexRequest.getAction().getIndex();\n+      if (index == null) {\n+        continue;\n+      }\n+      IndexMeta meta = indexManager.meta(index);\n+      if (meta == null) {\n+        continue;\n+      }\n+\n+      Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n+      if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n+        events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n+      }\n+    }\n \n-        tryComplete(request, HttpStatusCodes.OK);//TODO: Make response like Elasticsearch does\n+    for (Map.Entry<String, List<Event>> batch : events.entrySet()) {\n+      GateStatus status = gateSender.send(batch.getValue(), false, batch.getKey());\n+      if (status != GateStatus.OK) {\n+        //TODO: should retry the request or send 503 back\n+      }\n     }\n \n-    private void tryComplete(HttpServerRequest request, int code) {\n-        try {\n-            request.complete(code);\n-        } catch (Exception ex) {\n-            LOGGER.error(\"Error on request completion\", ex);\n-        }\n+    tryComplete(request, HttpStatusCodes.OK);//TODO: Make response like Elasticsearch does\n+  }\n+\n+  private void tryComplete(HttpServerRequest request, int code) {\n+    try {\n+      request.complete(code);\n+    } catch (Exception ex) {\n+      LOGGER.error(\"Error on request completion\", ex);\n     }\n+  }\n }\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/80/BulkHandler.java\nindex ac3acc02d5a..205731d6308 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/80/BulkHandler.java\n@@ -81,7 +81,7 @@ public class BulkHandler implements HttpHandler {\n             }\n \n             Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n-            if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n+            if (validator.validate(event)) { //TODO: Errors should be added to response as Elasticsearch do\n                 events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n             }\n         }\n@@ -103,4 +103,4 @@ public class BulkHandler implements HttpHandler {\n             LOGGER.error(\"Error on request completion\", ex);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/80/BulkHandler.java\nindex ac3acc02d5a..4bc69347fec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/80/BulkHandler.java\n@@ -81,7 +81,7 @@ public class BulkHandler implements HttpHandler {\n             }\n \n             Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n-            if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n+            if (validator.validate(event)) { //TODO: Errors should be added to response as Elasticsearch do\n                 events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/80/BulkHandler.java\nindex ac3acc02d5a..4bc69347fec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/80/BulkHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/80/BulkHandler.java\n@@ -81,7 +81,7 @@ public class BulkHandler implements HttpHandler {\n             }\n \n             Event event = JsonToEventFormatter.format(indexRequest.getDocument(), index, meta);\n-            if (validator.validate(event)) {//TODO: Errors should be added to response as Elasticsearch do\n+            if (validator.validate(event)) { //TODO: Errors should be added to response as Elasticsearch do\n                 events.computeIfAbsent(meta.getStream(), k -> new ArrayList<>(1_000)).add(event);//TODO: Magic number\n             }\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}