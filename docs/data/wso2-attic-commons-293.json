{
    "project_name": "wso2-attic-commons",
    "error_id": "293",
    "information": {
        "errors": [
            {
                "line": "51",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 140).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  protected String addressLocation = ContentGenerator.ADDRESS_LOCATION;\n\n  protected final static String[] requiredNamespaces = { \"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\" };\n\n  public void setVerb(int verb)\n  {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/293/HTTPContentGenerator.java\nindex 46aa513a8dd..86744214ff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/293/HTTPContentGenerator.java\n@@ -48,9 +48,10 @@ public class HTTPContentGenerator implements ContentGenerator\n \n   protected String addressLocation = ContentGenerator.ADDRESS_LOCATION;\n \n-  protected final static String[] requiredNamespaces = { \"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\" };\n+  protected final static String[] requiredNamespaces = {\n+      \"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\" };\n \n-  public void setVerb(int verb)\n+   public void setVerb(int verb)\n   {\n     verbOption = verb;\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/293/HTTPContentGenerator.java\nindex 46aa513a8dd..ed5bec29d73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/293/HTTPContentGenerator.java\n@@ -4,10 +4,11 @@\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsdl.binding.http.internal.generator;\n \n \n@@ -36,8 +37,7 @@ import org.eclipse.wst.wsdl.internal.generator.ContentGenerator;\n import org.w3c.dom.Element;\n \n \n-public class HTTPContentGenerator implements ContentGenerator\n-{\n+public class HTTPContentGenerator implements ContentGenerator {\n   public static final int VERB_POST = 0;\n \n   public static final int VERB_GET = 1;\n@@ -48,39 +48,32 @@ public class HTTPContentGenerator implements ContentGenerator\n \n   protected String addressLocation = ContentGenerator.ADDRESS_LOCATION;\n \n-  protected final static String[] requiredNamespaces = { \"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\" };\n+  protected final static String[] requiredNamespaces =\n+    {\"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\"};\n \n-  public void setVerb(int verb)\n-  {\n+  public void setVerb(int verb) {\n     verbOption = verb;\n   }\n \n-  public void setAddressLocation(String addressLocation)\n-  {\n+  public void setAddressLocation(String addressLocation) {\n     this.addressLocation = addressLocation;\n   }\n \n-  public String[] getRequiredNamespaces()\n-  {\n+  public String[] getRequiredNamespaces() {\n     return requiredNamespaces;\n   }\n \n-  public String getPreferredNamespacePrefix(String namespace)\n-  {\n-    if (namespace.equals(\"http://schemas.xmlsoap.org/wsdl/mime/\"))\n-    {\n+  public String getPreferredNamespacePrefix(String namespace) {\n+    if (namespace.equals(\"http://schemas.xmlsoap.org/wsdl/mime/\")) {\n       return \"mime\";\n-    }\n-    else if (namespace.equals(\"http://schemas.xmlsoap.org/wsdl/http/\"))\n-    {\n+    } else if (namespace.equals(\"http://schemas.xmlsoap.org/wsdl/http/\")) {\n       return \"http\";\n     }\n \n     return \"\";\n   }\n \n-  public void generatePortContent(Port port)\n-  {\n+  public void generatePortContent(Port port) {\n     // We blow away any existing ExtensibilityElements/content before we generate it\n     // Is it worth being smarter?  Look for matching content first and create those which aren't found????\n     List removeList = new ArrayList(port.getEExtensibilityElements());\n@@ -91,8 +84,7 @@ public class HTTPContentGenerator implements ContentGenerator\n     port.addExtensibilityElement(httpAddress);\n   }\n \n-  public void generateBindingContent(Binding binding, PortType portType)\n-  {\n+  public void generateBindingContent(Binding binding, PortType portType) {\n     // We blow away any existing ExtensibilityElements/content before we generate it\n     // Is it worth being smarter?  Look for matching content first and create those which aren't found????\n     List removeList = new ArrayList(binding.getEExtensibilityElements());\n@@ -104,8 +96,7 @@ public class HTTPContentGenerator implements ContentGenerator\n     binding.addExtensibilityElement(httpBinding);\n   }\n \n-  public void generateBindingOperationContent(BindingOperation bindingOperation, Operation operation)\n-  {\n+  public void generateBindingOperationContent(BindingOperation bindingOperation, Operation operation) {\n     // We blow away any existing ExtensibilityElements/content before we generate it\n     // Is it worth being smarter?  Look for matching content first and create those which aren't found????\n     List removeList = new ArrayList(bindingOperation.getEExtensibilityElements());\n@@ -116,8 +107,7 @@ public class HTTPContentGenerator implements ContentGenerator\n     bindingOperation.addExtensibilityElement(httpOperation);\n   }\n \n-  public void generateBindingInputContent(BindingInput bindingInput, Input input)\n-  {\n+  public void generateBindingInputContent(BindingInput bindingInput, Input input) {\n     // We blow away any existing ExtensibilityElements/content before we generate it\n     // Is it worth being smarter?  Look for matching content first and create those which aren't found????\n     List removeList = new ArrayList(bindingInput.getEExtensibilityElements());\n@@ -126,21 +116,17 @@ public class HTTPContentGenerator implements ContentGenerator\n     int option = getVerbOption(bindingInput);\n     removeExtensebilityElements(bindingInput.getEExtensibilityElements(), removeList);\n \n-    if (option == VERB_POST)\n-    {\n+    if (option == VERB_POST) {\n       // TODO: Is there an equivalent HTTP Model Object for this?....\n       Element element = createElement(bindingInput.getElement(), \"mime\", \"content\");\n       element.setAttribute(\"type\", \"application/x-www-form-urlencoded\");\n-    }\n-    else\n-    {\n+    } else {\n       HTTPUrlEncoded urlEncoded = HTTPFactory.eINSTANCE.createHTTPUrlEncoded();\n       bindingInput.addExtensibilityElement(urlEncoded);\n     }\n   }\n \n-  public void generateBindingOutputContent(BindingOutput bindingOutput, Output output)\n-  {\n+  public void generateBindingOutputContent(BindingOutput bindingOutput, Output output) {\n     // We blow away any existing ExtensibilityElements/content before we generate it\n     // Is it worth being smarter?  Look for matching content first and create those which aren't found????\n     List removeList = new ArrayList(bindingOutput.getEExtensibilityElements());\n@@ -155,13 +141,11 @@ public class HTTPContentGenerator implements ContentGenerator\n     element.setAttribute(\"type\", \"text/xml\");\n   }\n \n-  public void generateBindingFaultContent(BindingFault bindingFault, Fault fault)\n-  {\n+  public void generateBindingFaultContent(BindingFault bindingFault, Fault fault) {\n     //TODO!!\n   }\n \n-  protected Element createElement(Element parentElement, String prefix, String elementName)\n-  {\n+  protected Element createElement(Element parentElement, String prefix, String elementName) {\n     String name = prefix != null ? (prefix + \":\" + elementName) : elementName;\n     Element result = parentElement.getOwnerDocument().createElement(name);\n     parentElement.insertBefore(result, parentElement.getFirstChild());\n@@ -170,59 +154,47 @@ public class HTTPContentGenerator implements ContentGenerator\n   }\n \n   /////////////////////  \n-  private int getVerbOption(Object genericBindingObject)\n-  {\n-    if (verbOption == VERB_NOT_SET && genericBindingObject != null)\n-    {\n+  private int getVerbOption(Object genericBindingObject) {\n+    if (verbOption == VERB_NOT_SET && genericBindingObject != null) {\n       // init() was never called, try to determine the 'verb' based on what we have/know\n       Binding binding = getBindingObject(genericBindingObject);\n \n       // Try to determine the verb from the Binding Object\n-      if (binding != null)\n-      {\n+      if (binding != null) {\n         List list = binding.getEExtensibilityElements();\n         Iterator valuesIt = getExtensibilityElementAttributeValue(list, \"verb\").iterator();\n \n-        while (valuesIt.hasNext())\n-        {\n-          String verb = (String)valuesIt.next();\n+        while (valuesIt.hasNext()) {\n+          String verb = (String) valuesIt.next();\n \n-          if (verb.equals(\"POST\"))\n-          {\n+          if (verb.equals(\"POST\")) {\n             verbOption = VERB_POST;\n-          }\n-          else if (verb.equals(\"GET\"))\n-          {\n+          } else if (verb.equals(\"GET\")) {\n             verbOption = VERB_GET;\n           }\n \n-          if (verbOption != VERB_NOT_SET)\n-          {\n+          if (verbOption != VERB_NOT_SET) {\n             break;\n           }\n         }\n       }\n     }\n \n-    if (verbOption == VERB_NOT_SET)\n-    {\n+    if (verbOption == VERB_NOT_SET) {\n       verbOption = VERB_GET;\n     }\n \n     return verbOption;\n   }\n \n-  private List getExtensibilityElementAttributeValue(List eeList, String attributeKey)\n-  {\n+  private List getExtensibilityElementAttributeValue(List eeList, String attributeKey) {\n     List values = new ArrayList();\n     Iterator eeElementsIt = eeList.iterator();\n \n-    while (eeElementsIt.hasNext())\n-    {\n-      ExtensibilityElement eeElement = (ExtensibilityElement)eeElementsIt.next();\n+    while (eeElementsIt.hasNext()) {\n+      ExtensibilityElement eeElement = (ExtensibilityElement) eeElementsIt.next();\n       String attributeValue = eeElement.getElement().getAttribute(attributeKey);\n-      if (attributeValue != null && !attributeValue.equals(\"\"))\n-      {\n+      if (attributeValue != null && !attributeValue.equals(\"\")) {\n         values.add(attributeValue);\n       }\n     }\n@@ -230,62 +202,47 @@ public class HTTPContentGenerator implements ContentGenerator\n     return values;\n   }\n \n-  private Binding getBindingObject(Object genericBindingObject)\n-  {\n+  private Binding getBindingObject(Object genericBindingObject) {\n     Object parent = genericBindingObject;\n \n     int index = 0;\n-    while (parent != null && index < 5)\n-    {\n+    while (parent != null && index < 5) {\n       parent = getGenericBindingObjectParent(parent);\n-      if (parent instanceof Binding)\n-      {\n+      if (parent instanceof Binding) {\n         break;\n       }\n       index++;\n     }\n \n-    return (parent instanceof Binding) ? (Binding)parent : null;\n+    return (parent instanceof Binding) ? (Binding) parent : null;\n   }\n \n-  private Object getGenericBindingObjectParent(Object genericBindingObject)\n-  {\n+  private Object getGenericBindingObjectParent(Object genericBindingObject) {\n     Object parent = null;\n \n-    if (genericBindingObject != null)\n-    {\n-      if (genericBindingObject instanceof BindingOperation)\n-      {\n-        parent = ((BindingOperation)genericBindingObject).getContainer();\n-      }\n-      else if (genericBindingObject instanceof BindingInput)\n-      {\n-        parent = ((BindingInput)genericBindingObject).getContainer();\n-      }\n-      else if (genericBindingObject instanceof BindingOutput)\n-      {\n-        parent = ((BindingOutput)genericBindingObject).getContainer();\n-      }\n-      else if (genericBindingObject instanceof BindingFault)\n-      {\n-        parent = ((BindingFault)genericBindingObject).getContainer();\n+    if (genericBindingObject != null) {\n+      if (genericBindingObject instanceof BindingOperation) {\n+        parent = ((BindingOperation) genericBindingObject).getContainer();\n+      } else if (genericBindingObject instanceof BindingInput) {\n+        parent = ((BindingInput) genericBindingObject).getContainer();\n+      } else if (genericBindingObject instanceof BindingOutput) {\n+        parent = ((BindingOutput) genericBindingObject).getContainer();\n+      } else if (genericBindingObject instanceof BindingFault) {\n+        parent = ((BindingFault) genericBindingObject).getContainer();\n       }\n     }\n \n     return parent;\n   }\n \n-  private void removeExtensebilityElements(List originalList, List removeList)\n-  {\n+  private void removeExtensebilityElements(List originalList, List removeList) {\n     Iterator removeIt = removeList.iterator();\n-    while (removeIt.hasNext())\n-    {\n+    while (removeIt.hasNext()) {\n       originalList.remove(removeIt.next());\n     }\n   }\n \n-  public String getProtocol()\n-  {\n+  public String getProtocol() {\n     return \"HTTP\";\n   }\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/293/HTTPContentGenerator.java\nindex 46aa513a8dd..1230f931070 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/293/HTTPContentGenerator.java\n@@ -288,4 +288,4 @@ public class HTTPContentGenerator implements ContentGenerator\n   {\n     return \"HTTP\";\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/293/HTTPContentGenerator.java\nindex 46aa513a8dd..86744214ff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/293/HTTPContentGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/293/HTTPContentGenerator.java\n@@ -48,9 +48,10 @@ public class HTTPContentGenerator implements ContentGenerator\n \n   protected String addressLocation = ContentGenerator.ADDRESS_LOCATION;\n \n-  protected final static String[] requiredNamespaces = { \"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\" };\n+  protected final static String[] requiredNamespaces = {\n+      \"http://schemas.xmlsoap.org/wsdl/mime/\", \"http://schemas.xmlsoap.org/wsdl/http/\" };\n \n-  public void setVerb(int verb)\n+   public void setVerb(int verb)\n   {\n     verbOption = verb;\n   }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}