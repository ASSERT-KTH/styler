{
    "project_name": "wso2-attic-commons",
    "error_id": "235",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * Per <a href=\"http://www.ietf.org/rfc/rfc2616.txt\">RFC 2616 section 4.3</a>, some responses can never contain a message\n     * body.\n     *\n     * @param status - the HTTP status code",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/235/HttpUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/235/HttpUtils.java\nindex bb6a0e942df..f7283339c89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/235/HttpUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/235/HttpUtils.java\n@@ -22,37 +22,36 @@ package org.apache.ode.utils.http;\n import java.util.regex.Pattern;\n \n /**\n- *\n  *\n  */\n public class HttpUtils {\n-    public static final String XML_MIME_TYPE_REGEX = \"((text/xml)|(application/xml)|((.*)\\\\+xml))(;.*)*\";\n-    public static final String TEXT_MIME_TYPE_REGEX = \"text/(?!xml(;(.*)*))(.*)\";\n-    public static final Pattern XML_MIME_TYPE_PATTERN = Pattern.compile(XML_MIME_TYPE_REGEX);\n-    public static final Pattern TEXT_MIME_TYPE_PATTERN = Pattern.compile(TEXT_MIME_TYPE_REGEX);\n+  public static final String XML_MIME_TYPE_REGEX = \"((text/xml)|(application/xml)|((.*)\\\\+xml))(;.*)*\";\n+  public static final String TEXT_MIME_TYPE_REGEX = \"text/(?!xml(;(.*)*))(.*)\";\n+  public static final Pattern XML_MIME_TYPE_PATTERN = Pattern.compile(XML_MIME_TYPE_REGEX);\n+  public static final Pattern TEXT_MIME_TYPE_PATTERN = Pattern.compile(TEXT_MIME_TYPE_REGEX);\n \n-    public static boolean isXml(String contentType) {\n-        return XML_MIME_TYPE_PATTERN.matcher(contentType).matches();\n-    }\n+  public static boolean isXml(String contentType) {\n+    return XML_MIME_TYPE_PATTERN.matcher(contentType).matches();\n+  }\n \n-    public static boolean isText(String contentType) {\n-        return TEXT_MIME_TYPE_PATTERN.matcher(contentType).matches();\n-    }\n+  public static boolean isText(String contentType) {\n+    return TEXT_MIME_TYPE_PATTERN.matcher(contentType).matches();\n+  }\n \n-    /**\n-     * Per <a href=\"http://www.ietf.org/rfc/rfc2616.txt\">RFC 2616 section 4.3</a>, some responses can never contain a message\n-     * body.\n-     *\n-     * @param status - the HTTP status code\n-     * @return <tt>true</tt> if the message may contain a body, <tt>false</tt> if it can not\n-     *         contain a message body\n-     */\n-    public static boolean bodyAllowed(int status) {\n-        if (status >= 100 && status < 200\n-                || status == StatusCode._204_NO_CONTENT\n-                || status == StatusCode._304_NOT_MODIFIED) {\n-            return false;\n-        }\n-        return true;\n+  /**\n+   * Per <a href=\"http://www.ietf.org/rfc/rfc2616.txt\">RFC 2616 section 4.3</a>, some responses can never contain a message\n+   * body.\n+   *\n+   * @param status - the HTTP status code\n+   * @return <tt>true</tt> if the message may contain a body, <tt>false</tt> if it can not\n+   * contain a message body\n+   */\n+  public static boolean bodyAllowed(int status) {\n+    if (status >= 100 && status < 200\n+      || status == StatusCode._204_NO_CONTENT\n+      || status == StatusCode._304_NOT_MODIFIED) {\n+      return false;\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/235/HttpUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/235/HttpUtils.java\nindex bb6a0e942df..c0a16045452 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/235/HttpUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/235/HttpUtils.java\n@@ -48,11 +48,10 @@ public class HttpUtils {\n      *         contain a message body\n      */\n     public static boolean bodyAllowed(int status) {\n-        if (status >= 100 && status < 200\n-                || status == StatusCode._204_NO_CONTENT\n+        if (status >= 100 && status < 200 || status == StatusCode._204_NO_CONTENT\n                 || status == StatusCode._304_NOT_MODIFIED) {\n             return false;\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}