{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "232",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class ParticleWildcardExpression implements ValidationExpr\n{\n\tprivate final SchemaParticle m_particle;\n\tprivate final SchemaWildcard m_wildcard;\n\n\tpublic ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/232/ParticleWildcardExpression.java\nindex a14b249289f..cdc57090c9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/232/ParticleWildcardExpression.java\n@@ -27,7 +27,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ParticleWildcardExpression implements ValidationExpr\n {\n-\tprivate final SchemaParticle m_particle;\n+private final SchemaParticle m_particle;\n \tprivate final SchemaWildcard m_wildcard;\n \n \tpublic ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/232/ParticleWildcardExpression.java\nindex a14b249289f..fb8f5503af1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/232/ParticleWildcardExpression.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.Collections;\n@@ -25,104 +26,85 @@ import org.genxdm.xs.components.ParticleTerm;\n import org.genxdm.xs.components.SchemaParticle;\n import org.genxdm.xs.components.SchemaWildcard;\n \n-final class ParticleWildcardExpression implements ValidationExpr\n-{\n-\tprivate final SchemaParticle m_particle;\n-\tprivate final SchemaWildcard m_wildcard;\n-\n-\tpublic ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)\n-\t{\n-\t\tm_particle = PreCondition.assertArgumentNotNull(particle, \"particle\");\n-\t\tm_wildcard = PreCondition.assertArgumentNotNull(wildcard, \"wildcard\");\n-\t}\n-\n-\tpublic ParticleTerm getParticleTerm()\n-\t{\n-\t\treturn m_wildcard;\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\t// We are not building a deep finite state machine.\n-\t\treturn Collections.emptyList();\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\tif (other.isGroup())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal ParticleTerm term = other.getParticleTerm();\n-\n-\t\tif (term instanceof ElementDefinition)\n-\t\t{\n-\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n-\t\t\treturn m_wildcard.getNamespaceConstraint().allowsNamespaceName(element.getName().getNamespaceURI());\n-\t\t}\n-\t\telse if (term instanceof SchemaWildcard)\n-\t\t{\n-\t\t\tthrow new UnsupportedOperationException(\"TODO\");\n-\t\t\t// return m_wildcard.intersects((SchemaWildcard)term);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tSystem.out.println(\"Don't know how to deal with nameless \" + other.getClass().getName());\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn m_particle.isMaxOccursUnbounded();\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean matches(final QName token)\n-\t{\n-\t\tif (null != token)\n-\t\t{\n-\t\t\treturn m_wildcard.getNamespaceConstraint().allowsNamespaceName(token.getNamespaceURI());\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn m_particle.getMaxOccurs();\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn m_particle.getMinOccurs();\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\treturn m_wildcard.toString();\n-\t}\n+final class ParticleWildcardExpression implements ValidationExpr {\n+    private final SchemaParticle m_particle;\n+\n+    private final SchemaWildcard m_wildcard;\n+\n+    public ParticleWildcardExpression(final SchemaParticle particle,\n+                                      final SchemaWildcard wildcard) {\n+        m_particle = PreCondition.assertArgumentNotNull(particle, \"particle\");\n+        m_wildcard = PreCondition.assertArgumentNotNull(wildcard, \"wildcard\");\n+    }\n+\n+    public ParticleTerm getParticleTerm() {\n+        return m_wildcard;\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms() {\n+        // We are not building a deep finite state machine.\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean intersects(final ValidationExpr other) {\n+        if (other.isGroup()) {\n+            return false;\n+        }\n+\n+        final ParticleTerm term = other.getParticleTerm();\n+\n+        if (term instanceof ElementDefinition) {\n+            final ElementDefinition element = (ElementDefinition) term;\n+            return m_wildcard.getNamespaceConstraint()\n+                .allowsNamespaceName(element.getName().getNamespaceURI());\n+        } else if (term instanceof SchemaWildcard) {\n+            throw new UnsupportedOperationException(\"TODO\");\n+            // return m_wildcard.intersects((SchemaWildcard)term);\n+        } else {\n+            System.out\n+                .println(\"Don't know how to deal with nameless \" + other.getClass().getName());\n+            return false;\n+        }\n+    }\n+\n+    public boolean isChoice() {\n+        return false;\n+    }\n+\n+    public boolean isGroup() {\n+        return false;\n+    }\n+\n+    public boolean isInterleave() {\n+        return false;\n+    }\n+\n+    public boolean isMaxOccursUnbounded() {\n+        return m_particle.isMaxOccursUnbounded();\n+    }\n+\n+    public boolean isSequence() {\n+        return false;\n+    }\n+\n+    public boolean matches(final QName token) {\n+        if (null != token) {\n+            return m_wildcard.getNamespaceConstraint().allowsNamespaceName(token.getNamespaceURI());\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    public int maxOccurs() {\n+        return m_particle.getMaxOccurs();\n+    }\n+\n+    public int minOccurs() {\n+        return m_particle.getMinOccurs();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return m_wildcard.toString();\n+    }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/232/ParticleWildcardExpression.java\nindex a14b249289f..528fed61f59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/232/ParticleWildcardExpression.java\n@@ -16,9 +16,7 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.Collections;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.xs.components.ElementDefinition;\n import org.genxdm.xs.components.ParticleTerm;\n@@ -27,102 +25,101 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ParticleWildcardExpression implements ValidationExpr\n {\n-\tprivate final SchemaParticle m_particle;\n-\tprivate final SchemaWildcard m_wildcard;\n-\n-\tpublic ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)\n-\t{\n-\t\tm_particle = PreCondition.assertArgumentNotNull(particle, \"particle\");\n-\t\tm_wildcard = PreCondition.assertArgumentNotNull(wildcard, \"wildcard\");\n-\t}\n-\n-\tpublic ParticleTerm getParticleTerm()\n-\t{\n-\t\treturn m_wildcard;\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\t// We are not building a deep finite state machine.\n-\t\treturn Collections.emptyList();\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\tif (other.isGroup())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal ParticleTerm term = other.getParticleTerm();\n-\n-\t\tif (term instanceof ElementDefinition)\n-\t\t{\n-\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n-\t\t\treturn m_wildcard.getNamespaceConstraint().allowsNamespaceName(element.getName().getNamespaceURI());\n-\t\t}\n-\t\telse if (term instanceof SchemaWildcard)\n-\t\t{\n-\t\t\tthrow new UnsupportedOperationException(\"TODO\");\n-\t\t\t// return m_wildcard.intersects((SchemaWildcard)term);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tSystem.out.println(\"Don't know how to deal with nameless \" + other.getClass().getName());\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn m_particle.isMaxOccursUnbounded();\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean matches(final QName token)\n-\t{\n-\t\tif (null != token)\n-\t\t{\n-\t\t\treturn m_wildcard.getNamespaceConstraint().allowsNamespaceName(token.getNamespaceURI());\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn m_particle.getMaxOccurs();\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn m_particle.getMinOccurs();\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\treturn m_wildcard.toString();\n-\t}\n-}\n+    private final SchemaParticle m_particle;\n+    private final SchemaWildcard m_wildcard;\n+\n+    public ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)\n+    {\n+        m_particle = PreCondition.assertArgumentNotNull(particle, \"particle\");\n+        m_wildcard = PreCondition.assertArgumentNotNull(wildcard, \"wildcard\");\n+    }\n+\n+    public ParticleTerm getParticleTerm()\n+    {\n+        return m_wildcard;\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms()\n+    {\n+        // We are not building a deep finite state machine.\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean intersects(final ValidationExpr other)\n+    {\n+        if (other.isGroup())\n+        {\n+            return false;\n+        }\n+\n+        final ParticleTerm term = other.getParticleTerm();\n+        if (term instanceof ElementDefinition)\n+        {\n+            final ElementDefinition element = (ElementDefinition)term;\n+            return m_wildcard.getNamespaceConstraint().allowsNamespaceName(element.getName().getNamespaceURI());\n+        }\n+        else if (term instanceof SchemaWildcard)\n+        {\n+            throw new UnsupportedOperationException(\"TODO\");\n+            // return m_wildcard.intersects((SchemaWildcard)term);\n+        }\n+        else\n+        {\n+            System.out.println(\"Don't know how to deal with nameless \" + other.getClass().getName());\n+            return false;\n+        }\n+    }\n+\n+    public boolean isChoice()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isGroup()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isInterleave()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isMaxOccursUnbounded()\n+    {\n+        return m_particle.isMaxOccursUnbounded();\n+    }\n+\n+    public boolean isSequence()\n+    {\n+        return false;\n+    }\n+\n+    public boolean matches(final QName token)\n+    {\n+        if (null != token)\n+        {\n+            return m_wildcard.getNamespaceConstraint().allowsNamespaceName(token.getNamespaceURI());\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+    }\n+\n+    public int maxOccurs()\n+    {\n+        return m_particle.getMaxOccurs();\n+    }\n+\n+    public int minOccurs()\n+    {\n+        return m_particle.getMinOccurs();\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return m_wildcard.toString();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 101
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/232/ParticleWildcardExpression.java\nindex a14b249289f..cdc57090c9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/232/ParticleWildcardExpression.java\n@@ -27,7 +27,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ParticleWildcardExpression implements ValidationExpr\n {\n-\tprivate final SchemaParticle m_particle;\n+private final SchemaParticle m_particle;\n \tprivate final SchemaWildcard m_wildcard;\n \n \tpublic ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/232/ParticleWildcardExpression.java\nindex a14b249289f..3233d6ff7e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/232/ParticleWildcardExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/232/ParticleWildcardExpression.java\n@@ -27,7 +27,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ParticleWildcardExpression implements ValidationExpr\n {\n-\tprivate final SchemaParticle m_particle;\n+    private final SchemaParticle m_particle;\n \tprivate final SchemaWildcard m_wildcard;\n \n \tpublic ParticleWildcardExpression(final SchemaParticle particle, final SchemaWildcard wildcard)\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}