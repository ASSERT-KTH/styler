{
    "project_name": "wso2-attic-commons",
    "error_id": "501",
    "information": {
        "errors": [
            {
                "line": "87",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        AbstractDefinition definition = streamTableDefinitionMap.get(streamId);\n        if (definition == null) {\n            throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" + streamId);\n        }\n        if (definition instanceof TableDefinition) {\n            throw new SourceNotExistException(streamId + \" is not a Stream but a Table, and it cant have window\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/501/WindowStream.java\nindex 59e418010b1..13ab1057cf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/501/WindowStream.java\n@@ -84,9 +84,10 @@ public class WindowStream implements SingleStream {\n             List<QueryEventSource> queryEventSources) {\n         AbstractDefinition definition = streamTableDefinitionMap.get(streamId);\n         if (definition == null) {\n-            throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" + streamId);\n-        }\n-        if (definition instanceof TableDefinition) {\n+            throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" +\n+                    streamId);\n+         }\n+         if (definition instanceof TableDefinition) {\n             throw new SourceNotExistException(streamId + \" is not a Stream but a Table, and it cant have window\");\n         }\n         streamDefinition = (StreamDefinition) definition;\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/501/WindowStream.java\nindex 59e418010b1..391b017be61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/501/WindowStream.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.query.api.query.input;\n \n import org.wso2.siddhi.query.api.definition.AbstractDefinition;\n@@ -32,87 +33,87 @@ import java.util.concurrent.ConcurrentMap;\n \n public class WindowStream implements SingleStream {\n \n-    protected String streamId;\n-    protected StreamDefinition streamDefinition;\n-    protected String streamReferenceId;\n-    protected Filter filter = null;\n-    protected Window window = null;\n-    protected Transformer transformer = null;\n-    protected QueryEventSource queryEventSource = null;\n-\n-    public WindowStream(BasicStream basicStream, Window window) {\n-        this.streamId = basicStream.getStreamId();\n-        this.streamDefinition = (StreamDefinition) basicStream.getDefinition();\n-        this.streamReferenceId = basicStream.getStreamReferenceId();\n-        this.filter = basicStream.getFilter();\n-        this.transformer = basicStream.getTransformer();\n-        this.window = window;\n-    }\n-\n-    public StreamDefinition getStreamDefinition() {\n-        return streamDefinition;\n-    }\n-\n-    public void setStreamDefinition(StreamDefinition streamDefinition) {\n-        this.streamDefinition = streamDefinition;\n-    }\n-\n-    public String getStreamId() {\n-        return streamId;\n-    }\n-\n-    public String getStreamReferenceId() {\n-        return streamReferenceId;\n+  protected String streamId;\n+  protected StreamDefinition streamDefinition;\n+  protected String streamReferenceId;\n+  protected Filter filter = null;\n+  protected Window window = null;\n+  protected Transformer transformer = null;\n+  protected QueryEventSource queryEventSource = null;\n+\n+  public WindowStream(BasicStream basicStream, Window window) {\n+    this.streamId = basicStream.getStreamId();\n+    this.streamDefinition = (StreamDefinition) basicStream.getDefinition();\n+    this.streamReferenceId = basicStream.getStreamReferenceId();\n+    this.filter = basicStream.getFilter();\n+    this.transformer = basicStream.getTransformer();\n+    this.window = window;\n+  }\n+\n+  public StreamDefinition getStreamDefinition() {\n+    return streamDefinition;\n+  }\n+\n+  public void setStreamDefinition(StreamDefinition streamDefinition) {\n+    this.streamDefinition = streamDefinition;\n+  }\n+\n+  public String getStreamId() {\n+    return streamId;\n+  }\n+\n+  public String getStreamReferenceId() {\n+    return streamReferenceId;\n+  }\n+\n+  public WindowStream setStreamReferenceId(String streamReferenceId) {\n+    this.streamReferenceId = streamReferenceId;\n+    return this;\n+  }\n+\n+  @Override\n+  public List<String> getStreamIds() {\n+    List<String> list = new ArrayList<String>();\n+    list.add(streamId);\n+    return list;\n+  }\n+\n+\n+  @Override\n+  public List<QueryEventSource> constructQueryEventSourceList(\n+    ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap,\n+    List<QueryEventSource> queryEventSources) {\n+    AbstractDefinition definition = streamTableDefinitionMap.get(streamId);\n+    if (definition == null) {\n+      throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" + streamId);\n     }\n-\n-    public WindowStream setStreamReferenceId(String streamReferenceId) {\n-        this.streamReferenceId = streamReferenceId;\n-        return this;\n+    if (definition instanceof TableDefinition) {\n+      throw new SourceNotExistException(streamId + \" is not a Stream but a Table, and it cant have window\");\n     }\n+    streamDefinition = (StreamDefinition) definition;\n+    queryEventSource = new QueryEventSource(streamId, streamReferenceId,\n+      streamDefinition,\n+      filter, transformer, window);\n \n-    @Override\n-    public List<String> getStreamIds() {\n-        List<String> list = new ArrayList<String>();\n-        list.add(streamId);\n-        return list;\n-    }\n+    queryEventSources.add(queryEventSource);\n+    return queryEventSources;\n+  }\n \n \n-    @Override\n-    public List<QueryEventSource> constructQueryEventSourceList(\n-            ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap,\n-            List<QueryEventSource> queryEventSources) {\n-        AbstractDefinition definition = streamTableDefinitionMap.get(streamId);\n-        if (definition == null) {\n-            throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" + streamId);\n-        }\n-        if (definition instanceof TableDefinition) {\n-            throw new SourceNotExistException(streamId + \" is not a Stream but a Table, and it cant have window\");\n-        }\n-        streamDefinition = (StreamDefinition) definition;\n-        queryEventSource = new QueryEventSource(streamId, streamReferenceId,\n-                                                streamDefinition,\n-                                                filter, transformer, window);\n-\n-        queryEventSources.add(queryEventSource);\n-        return queryEventSources;\n-    }\n+  public Filter getFilter() {\n+    return filter;\n+  }\n \n+  @Override\n+  public QueryEventSource getQueryEventSource() {\n+    return queryEventSource;\n+  }\n \n-    public Filter getFilter() {\n-        return filter;\n-    }\n+  public Window getWindow() {\n+    return window;\n+  }\n \n-    @Override\n-    public QueryEventSource getQueryEventSource() {\n-        return queryEventSource;\n-    }\n-\n-    public Window getWindow() {\n-        return window;\n-    }\n-\n-    public Transformer getTransformer() {\n-        return transformer;\n-    }\n+  public Transformer getTransformer() {\n+    return transformer;\n+  }\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/501/WindowStream.java\nindex 59e418010b1..f13725e6fc9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/501/WindowStream.java\n@@ -93,8 +93,7 @@ public class WindowStream implements SingleStream {\n         queryEventSource = new QueryEventSource(streamId, streamReferenceId,\n                                                 streamDefinition,\n                                                 filter, transformer, window);\n-\n-        queryEventSources.add(queryEventSource);\n+queryEventSources.add(queryEventSource);\n         return queryEventSources;\n     }\n \n@@ -115,4 +114,4 @@ public class WindowStream implements SingleStream {\n     public Transformer getTransformer() {\n         return transformer;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/501/WindowStream.java\nindex 59e418010b1..13ab1057cf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/501/WindowStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/501/WindowStream.java\n@@ -84,9 +84,10 @@ public class WindowStream implements SingleStream {\n             List<QueryEventSource> queryEventSources) {\n         AbstractDefinition definition = streamTableDefinitionMap.get(streamId);\n         if (definition == null) {\n-            throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" + streamId);\n-        }\n-        if (definition instanceof TableDefinition) {\n+            throw new SourceNotExistException(\"Stream definition not exist! No steam defined with stream ID: \" +\n+                    streamId);\n+         }\n+         if (definition instanceof TableDefinition) {\n             throw new SourceNotExistException(streamId + \" is not a Stream but a Table, and it cant have window\");\n         }\n         streamDefinition = (StreamDefinition) definition;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}