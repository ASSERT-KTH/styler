{
    "project_name": "Activiti-Activiti",
    "error_id": "175",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/175/ServiceTask.java\nindex a73bf54ac00..021bd18f790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/175/ServiceTask.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/175/ServiceTask.java\nindex a73bf54ac00..b3b8609d7cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/175/ServiceTask.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -17,114 +18,114 @@ import java.util.List;\n \n public class ServiceTask extends TaskWithFieldExtensions {\n \n-  public static final String DMN_TASK = \"dmn\";\n-  public static final String MAIL_TASK = \"mail\";\n-\n-  protected String implementation;\n-  protected String implementationType;\n-  protected String resultVariableName;\n-  protected String type;\n-  protected String operationRef;\n-  protected String extensionId;\n-  protected List<CustomProperty> customProperties = new ArrayList<CustomProperty>();\n-  protected String skipExpression;\n-\n-  public String getImplementation() {\n-    return implementation;\n-  }\n-\n-  public void setImplementation(String implementation) {\n-    this.implementation = implementation;\n-  }\n-\n-  public String getImplementationType() {\n-    return implementationType;\n-  }\n-\n-  public void setImplementationType(String implementationType) {\n-    this.implementationType = implementationType;\n-  }\n-\n-  public String getResultVariableName() {\n-    return resultVariableName;\n-  }\n-\n-  public void setResultVariableName(String resultVariableName) {\n-    this.resultVariableName = resultVariableName;\n-  }\n-\n-  public String getType() {\n-    return type;\n-  }\n-\n-  public void setType(String type) {\n-    this.type = type;\n-  }\n-\n-  public List<CustomProperty> getCustomProperties() {\n-    return customProperties;\n-  }\n-\n-  public void setCustomProperties(List<CustomProperty> customProperties) {\n-    this.customProperties = customProperties;\n-  }\n-\n-  public String getOperationRef() {\n-    return operationRef;\n-  }\n-\n-  public void setOperationRef(String operationRef) {\n-    this.operationRef = operationRef;\n-  }\n-\n-  public String getExtensionId() {\n-    return extensionId;\n-  }\n-\n-  public void setExtensionId(String extensionId) {\n-    this.extensionId = extensionId;\n-  }\n-\n-  public boolean isExtended() {\n-    return extensionId != null && !extensionId.isEmpty();\n-  }\n-\n-  public String getSkipExpression() {\n-    return skipExpression;\n-  }\n-\n-  public void setSkipExpression(String skipExpression) {\n-    this.skipExpression = skipExpression;\n-  }\n-\n-  public ServiceTask clone() {\n-    ServiceTask clone = new ServiceTask();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(ServiceTask otherElement) {\n-    super.setValues(otherElement);\n-    setImplementation(otherElement.getImplementation());\n-    setImplementationType(otherElement.getImplementationType());\n-    setResultVariableName(otherElement.getResultVariableName());\n-    setType(otherElement.getType());\n-    setOperationRef(otherElement.getOperationRef());\n-    setExtensionId(otherElement.getExtensionId());\n-    setSkipExpression(otherElement.getSkipExpression());\n-\n-    fieldExtensions = new ArrayList<FieldExtension>();\n-    if (otherElement.getFieldExtensions() != null && !otherElement.getFieldExtensions().isEmpty()) {\n-      for (FieldExtension extension : otherElement.getFieldExtensions()) {\n-        fieldExtensions.add(extension.clone());\n-      }\n-    }\n-\n-    customProperties = new ArrayList<CustomProperty>();\n-    if (otherElement.getCustomProperties() != null && !otherElement.getCustomProperties().isEmpty()) {\n-      for (CustomProperty property : otherElement.getCustomProperties()) {\n-        customProperties.add(property.clone());\n-      }\n-    }\n-  }\n+    public static final String DMN_TASK = \"dmn\";\n+    public static final String MAIL_TASK = \"mail\";\n+\n+    protected String implementation;\n+    protected String implementationType;\n+    protected String resultVariableName;\n+    protected String type;\n+    protected String operationRef;\n+    protected String extensionId;\n+    protected List<CustomProperty> customProperties = new ArrayList<CustomProperty>();\n+    protected String skipExpression;\n+\n+    public String getImplementation() {\n+        return implementation;\n+    }\n+\n+    public void setImplementation(String implementation) {\n+        this.implementation = implementation;\n+    }\n+\n+    public String getImplementationType() {\n+        return implementationType;\n+    }\n+\n+    public void setImplementationType(String implementationType) {\n+        this.implementationType = implementationType;\n+    }\n+\n+    public String getResultVariableName() {\n+        return resultVariableName;\n+    }\n+\n+    public void setResultVariableName(String resultVariableName) {\n+        this.resultVariableName = resultVariableName;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public List<CustomProperty> getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public void setCustomProperties(List<CustomProperty> customProperties) {\n+        this.customProperties = customProperties;\n+    }\n+\n+    public String getOperationRef() {\n+        return operationRef;\n+    }\n+\n+    public void setOperationRef(String operationRef) {\n+        this.operationRef = operationRef;\n+    }\n+\n+    public String getExtensionId() {\n+        return extensionId;\n+    }\n+\n+    public void setExtensionId(String extensionId) {\n+        this.extensionId = extensionId;\n+    }\n+\n+    public boolean isExtended() {\n+        return extensionId != null && !extensionId.isEmpty();\n+    }\n+\n+    public String getSkipExpression() {\n+        return skipExpression;\n+    }\n+\n+    public void setSkipExpression(String skipExpression) {\n+        this.skipExpression = skipExpression;\n+    }\n+\n+    public ServiceTask clone() {\n+        ServiceTask clone = new ServiceTask();\n+        clone.setValues(this);\n+        return clone;\n+    }\n+\n+    public void setValues(ServiceTask otherElement) {\n+        super.setValues(otherElement);\n+        setImplementation(otherElement.getImplementation());\n+        setImplementationType(otherElement.getImplementationType());\n+        setResultVariableName(otherElement.getResultVariableName());\n+        setType(otherElement.getType());\n+        setOperationRef(otherElement.getOperationRef());\n+        setExtensionId(otherElement.getExtensionId());\n+        setSkipExpression(otherElement.getSkipExpression());\n+\n+        fieldExtensions = new ArrayList<FieldExtension>();\n+        if (otherElement.getFieldExtensions() != null && !otherElement.getFieldExtensions().isEmpty()) {\n+            for (FieldExtension extension : otherElement.getFieldExtensions()) {\n+                fieldExtensions.add(extension.clone());\n+            }\n+        }\n+\n+        customProperties = new ArrayList<CustomProperty>();\n+        if (otherElement.getCustomProperties() != null && !otherElement.getCustomProperties().isEmpty()) {\n+            for (CustomProperty property : otherElement.getCustomProperties()) {\n+                customProperties.add(property.clone());\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/175/ServiceTask.java\nindex a73bf54ac00..da1235b487d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/175/ServiceTask.java\n@@ -15,11 +15,11 @@ package org.activiti.bpmn.model;\n import java.util.ArrayList;\n import java.util.List;\n \n+\n public class ServiceTask extends TaskWithFieldExtensions {\n \n   public static final String DMN_TASK = \"dmn\";\n   public static final String MAIL_TASK = \"mail\";\n-\n   protected String implementation;\n   protected String implementationType;\n   protected String resultVariableName;\n@@ -28,7 +28,6 @@ public class ServiceTask extends TaskWithFieldExtensions {\n   protected String extensionId;\n   protected List<CustomProperty> customProperties = new ArrayList<CustomProperty>();\n   protected String skipExpression;\n-\n   public String getImplementation() {\n     return implementation;\n   }\n@@ -112,19 +111,18 @@ public class ServiceTask extends TaskWithFieldExtensions {\n     setOperationRef(otherElement.getOperationRef());\n     setExtensionId(otherElement.getExtensionId());\n     setSkipExpression(otherElement.getSkipExpression());\n-\n     fieldExtensions = new ArrayList<FieldExtension>();\n     if (otherElement.getFieldExtensions() != null && !otherElement.getFieldExtensions().isEmpty()) {\n-      for (FieldExtension extension : otherElement.getFieldExtensions()) {\n-        fieldExtensions.add(extension.clone());\n-      }\n+        for (FieldExtension extension : otherElement.getFieldExtensions()) {\n+            fieldExtensions.add(extension.clone());\n+        }\n     }\n-\n     customProperties = new ArrayList<CustomProperty>();\n     if (otherElement.getCustomProperties() != null && !otherElement.getCustomProperties().isEmpty()) {\n-      for (CustomProperty property : otherElement.getCustomProperties()) {\n-        customProperties.add(property.clone());\n-      }\n+        for (CustomProperty property : otherElement.getCustomProperties()) {\n+            customProperties.add(property.clone());\n+        }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/175/ServiceTask.java\nindex a73bf54ac00..021bd18f790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/175/ServiceTask.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/175/ServiceTask.java\nindex a73bf54ac00..021bd18f790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/175/ServiceTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/175/ServiceTask.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}