{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1733",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "216",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "281",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1733/LearnerState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1733/LearnerState.java\nindex 873114490a6..22040d4ba16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1733/LearnerState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1733/LearnerState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.atomicbroadcast.multipaxos;\n \n import java.io.IOException;\n@@ -34,256 +35,251 @@ import org.neo4j.logging.Log;\n  * State machine for Paxos Learner\n  */\n public enum LearnerState\n-        implements State<LearnerContext, LearnerMessage>\n+    implements State<LearnerContext, LearnerMessage>\n {\n-    start\n-            {\n-                @Override\n-                public LearnerState handle( LearnerContext context,\n-                                            Message<LearnerMessage> message,\n-                                            MessageHolder outgoing\n-                )\n-                {\n-                    if ( message.getMessageType() == LearnerMessage.join )\n-                    {\n-                        return learner;\n-                    }\n+  start\n+      {\n+        @Override\n+        public LearnerState handle(LearnerContext context,\n+                                   Message<LearnerMessage> message,\n+                                   MessageHolder outgoing\n+        )\n+        {\n+          if (message.getMessageType() == LearnerMessage.join)\n+          {\n+            return learner;\n+          }\n \n-                    return this;\n-                }\n-            },\n+          return this;\n+        }\n+      },\n \n-    learner\n+  learner\n+      {\n+        @Override\n+        public LearnerState handle(LearnerContext context,\n+                                   Message<LearnerMessage> message,\n+                                   MessageHolder outgoing\n+        ) throws IOException, ClassNotFoundException, URISyntaxException\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case learn:\n             {\n-                @Override\n-                public LearnerState handle( LearnerContext context,\n-                                            Message<LearnerMessage> message,\n-                                            MessageHolder outgoing\n-                ) throws IOException, ClassNotFoundException, URISyntaxException\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case learn:\n-                        {\n-                            LearnerMessage.LearnState learnState = message.getPayload();\n-                            InstanceId instanceId = new InstanceId( message );\n-                            PaxosInstance instance = context.getPaxosInstance( instanceId );\n+              LearnerMessage.LearnState learnState = message.getPayload();\n+              InstanceId instanceId = new InstanceId(message);\n+              PaxosInstance instance = context.getPaxosInstance(instanceId);\n \n-                            Log log = context.getLog( getClass() );\n+              Log log = context.getLog(getClass());\n \n-                            // Skip if we already know about this\n-                            if ( instanceId.getId() <= context.getLastDeliveredInstanceId() )\n-                            {\n-                                break;\n-                            }\n+              // Skip if we already know about this\n+              if (instanceId.getId() <= context.getLastDeliveredInstanceId())\n+              {\n+                break;\n+              }\n \n-                            context.learnedInstanceId( instanceId.getId() );\n+              context.learnedInstanceId(instanceId.getId());\n \n-                            instance.closed( learnState.getValue(), message.getHeader( Message.HEADER_CONVERSATION_ID ) );\n+              instance.closed(learnState.getValue(), message.getHeader(Message.HEADER_CONVERSATION_ID));\n \n-                            /*\n-                             * The conditional below is simply so that no expensive deserialization will happen if we\n-                             * are not to print anything anyway if debug is not enabled.\n-                             */\n-                            if ( log.isDebugEnabled() )\n-                            {\n-                                String description;\n-                                if ( instance.value_2 instanceof Payload )\n-                                {\n-                                    AtomicBroadcastSerializer atomicBroadcastSerializer = context.newSerializer();\n+              /*\n+               * The conditional below is simply so that no expensive deserialization will happen if we\n+               * are not to print anything anyway if debug is not enabled.\n+               */\n+              if (log.isDebugEnabled())\n+              {\n+                String description;\n+                if (instance.value_2 instanceof Payload)\n+                {\n+                  AtomicBroadcastSerializer atomicBroadcastSerializer = context.newSerializer();\n \n-                                    description = atomicBroadcastSerializer.receive( (Payload) instance.value_2 ).toString();\n-                                }\n-                                else\n-                                {\n-                                    description = instance.value_2.toString();\n-                                }\n-                                log.debug(\n-                                        \"Learned and closed instance \" + instance.id +\n-                                                \" from conversation \" +\n-                                                instance.conversationIdHeader +\n-                                                \" and the content was \" +\n-                                                description );\n-                            }\n-                            // If this is the next instance to be learned, then do so and check if we have anything\n-                            // pending to be learned\n-                            if ( instanceId.getId() == context.getLastDeliveredInstanceId() + 1 )\n-                            {\n-                                instance.delivered();\n-                                outgoing.offer( Message.internal( AtomicBroadcastMessage.broadcastResponse,\n-                                        learnState.getValue() )\n-                                        .setHeader( InstanceId.INSTANCE, instance.id.toString() )\n-                                        .setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader ));\n-                                context.setLastDeliveredInstanceId( instanceId.getId() );\n+                  description = atomicBroadcastSerializer.receive((Payload) instance.value_2).toString();\n+                } else\n+                {\n+                  description = instance.value_2.toString();\n+                }\n+                log.debug(\n+                    \"Learned and closed instance \" + instance.id +\n+                        \" from conversation \" +\n+                        instance.conversationIdHeader +\n+                        \" and the content was \" +\n+                        description);\n+              }\n+              // If this is the next instance to be learned, then do so and check if we have anything\n+              // pending to be learned\n+              if (instanceId.getId() == context.getLastDeliveredInstanceId() + 1)\n+              {\n+                instance.delivered();\n+                outgoing.offer(Message.internal(AtomicBroadcastMessage.broadcastResponse,\n+                    learnState.getValue())\n+                    .setHeader(InstanceId.INSTANCE, instance.id.toString())\n+                    .setHeader(Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader));\n+                context.setLastDeliveredInstanceId(instanceId.getId());\n \n-                                long checkInstanceId = instanceId.getId() + 1;\n-                                while ( (instance = context.getPaxosInstance( new InstanceId(\n-                                        checkInstanceId ) )).isState( PaxosInstance.State.closed ) )\n-                                {\n-                                    instance.delivered();\n-                                    context.setLastDeliveredInstanceId( checkInstanceId );\n-                                    Message<AtomicBroadcastMessage> learnMessage = Message.internal(\n-                                            AtomicBroadcastMessage.broadcastResponse, instance.value_2 )\n-                                            .setHeader( InstanceId.INSTANCE, instance.id.toString() )\n-                                            .setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader );\n-                                    outgoing.offer( learnMessage );\n+                long checkInstanceId = instanceId.getId() + 1;\n+                while ((instance = context.getPaxosInstance(new InstanceId(\n+                    checkInstanceId))).isState(PaxosInstance.State.closed))\n+                {\n+                  instance.delivered();\n+                  context.setLastDeliveredInstanceId(checkInstanceId);\n+                  Message<AtomicBroadcastMessage> learnMessage = Message.internal(\n+                      AtomicBroadcastMessage.broadcastResponse, instance.value_2)\n+                      .setHeader(InstanceId.INSTANCE, instance.id.toString())\n+                      .setHeader(Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader);\n+                  outgoing.offer(learnMessage);\n \n-                                    checkInstanceId++;\n-                                }\n+                  checkInstanceId++;\n+                }\n \n-                                if ( checkInstanceId == context.getLastKnownLearnedInstanceInCluster() + 1 )\n-                                {\n-                                    // No hole - all is ok\n-                                    // Cancel potential timeout, if one is active\n-                                    context.cancelTimeout( \"learn\" );\n-                                }\n-                                else\n-                                {\n-                                    // Found hole - we're waiting for this to be filled, i.e. timeout already set\n-                                    context.getLog( LearnerState.class ).debug( \"*** HOLE! WAITING \" +\n-                                            \"FOR \" + (context.getLastDeliveredInstanceId() + 1) );\n-                                }\n-                            }\n-                            else\n-                            {\n-                                // Found hole - we're waiting for this to be filled, i.e. timeout already set\n-                                context.getLog( LearnerState.class ).debug( \"*** GOT \" + instanceId\n-                                        + \", WAITING FOR \" + (context.getLastDeliveredInstanceId() + 1) );\n+                if (checkInstanceId == context.getLastKnownLearnedInstanceInCluster() + 1)\n+                {\n+                  // No hole - all is ok\n+                  // Cancel potential timeout, if one is active\n+                  context.cancelTimeout(\"learn\");\n+                } else\n+                {\n+                  // Found hole - we're waiting for this to be filled, i.e. timeout already set\n+                  context.getLog(LearnerState.class).debug(\"*** HOLE! WAITING \" +\n+                      \"FOR \" + (context.getLastDeliveredInstanceId() + 1));\n+                }\n+              } else\n+              {\n+                // Found hole - we're waiting for this to be filled, i.e. timeout already set\n+                context.getLog(LearnerState.class).debug(\"*** GOT \" + instanceId\n+                    + \", WAITING FOR \" + (context.getLastDeliveredInstanceId() + 1));\n \n-                                context.setTimeout( \"learn\", Message.timeout( LearnerMessage.learnTimedout,\n-                                        message ) );\n-                            }\n-                            break;\n-                        }\n+                context.setTimeout(\"learn\", Message.timeout(LearnerMessage.learnTimedout,\n+                    message));\n+              }\n+              break;\n+            }\n \n-                        case learnTimedout:\n-                        {\n-                            // Timed out waiting for learned values - send explicit request to everyone that is not failed\n-                            if ( !context.hasDeliveredAllKnownInstances() )\n-                            {\n-                                for ( long instanceId = context.getLastDeliveredInstanceId() + 1;\n-                                      instanceId < context.getLastKnownLearnedInstanceInCluster();\n-                                      instanceId++ )\n-                                {\n-                                    InstanceId id = new InstanceId( instanceId );\n-                                    PaxosInstance instance = context.getPaxosInstance( id );\n-                                    if ( !instance.isState( PaxosInstance.State.closed ) && !instance.isState(\n-                                            PaxosInstance.State.delivered ) )\n-                                    {\n-                                        for ( org.neo4j.cluster.InstanceId node : context.getAlive() )\n-                                        {\n-                                            URI nodeUri = context.getUriForId( node );\n-                                            if ( !node.equals( context.getMyId() ) )\n-                                            {\n-                                                outgoing.offer( Message.to( LearnerMessage.learnRequest, nodeUri,\n-                                                        new LearnerMessage.LearnRequestState() ).setHeader(\n-                                                        InstanceId.INSTANCE,\n-                                                        id.toString() ) );\n-                                            }\n-                                        }\n-                                    }\n-                                }\n+            case learnTimedout:\n+            {\n+              // Timed out waiting for learned values - send explicit request to everyone that is not failed\n+              if (!context.hasDeliveredAllKnownInstances())\n+              {\n+                for (long instanceId = context.getLastDeliveredInstanceId() + 1;\n+                     instanceId < context.getLastKnownLearnedInstanceInCluster();\n+                     instanceId++)\n+                {\n+                  InstanceId id = new InstanceId(instanceId);\n+                  PaxosInstance instance = context.getPaxosInstance(id);\n+                  if (!instance.isState(PaxosInstance.State.closed) && !instance.isState(\n+                      PaxosInstance.State.delivered))\n+                  {\n+                    for (org.neo4j.cluster.InstanceId node : context.getAlive())\n+                    {\n+                      URI nodeUri = context.getUriForId(node);\n+                      if (!node.equals(context.getMyId()))\n+                      {\n+                        outgoing.offer(Message.to(LearnerMessage.learnRequest, nodeUri,\n+                            new LearnerMessage.LearnRequestState()).setHeader(\n+                            InstanceId.INSTANCE,\n+                            id.toString()));\n+                      }\n+                    }\n+                  }\n+                }\n \n-                                // Set another timeout\n-                                context.setTimeout( \"learn\", Message.timeout( LearnerMessage.learnTimedout,\n-                                        message ) );\n-                            }\n-                            break;\n-                        }\n+                // Set another timeout\n+                context.setTimeout(\"learn\", Message.timeout(LearnerMessage.learnTimedout,\n+                    message));\n+              }\n+              break;\n+            }\n \n-                        case learnRequest:\n-                        {\n-                            // Someone wants to learn a value that we might have\n-                            InstanceId instanceId = new InstanceId( message );\n-                            PaxosInstance instance = context.getPaxosInstance( instanceId );\n-                            if ( instance.isState( PaxosInstance.State.closed ) ||\n-                                    instance.isState( PaxosInstance.State.delivered ) )\n-                            {\n-                                outgoing.offer( Message.respond( LearnerMessage.learn, message,\n-                                        new LearnerMessage.LearnState( instance.value_2 ) ).\n-                                        setHeader( InstanceId.INSTANCE, instanceId.toString() ).\n-                                        setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader ) );\n-                            }\n-                            else\n-                            {\n-                                outgoing.offer( message.copyHeadersTo( Message.respond( LearnerMessage.learnFailed,\n-                                        message,\n-                                        new LearnerMessage.LearnFailedState() ), org.neo4j.cluster.protocol\n-                                  .atomicbroadcast.multipaxos.InstanceId.INSTANCE ) );\n-                            }\n-                            break;\n-                        }\n+            case learnRequest:\n+            {\n+              // Someone wants to learn a value that we might have\n+              InstanceId instanceId = new InstanceId(message);\n+              PaxosInstance instance = context.getPaxosInstance(instanceId);\n+              if (instance.isState(PaxosInstance.State.closed) ||\n+                  instance.isState(PaxosInstance.State.delivered))\n+              {\n+                outgoing.offer(Message.respond(LearnerMessage.learn, message,\n+                    new LearnerMessage.LearnState(instance.value_2)).\n+                    setHeader(InstanceId.INSTANCE, instanceId.toString()).\n+                    setHeader(Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader));\n+              } else\n+              {\n+                outgoing.offer(message.copyHeadersTo(Message.respond(LearnerMessage.learnFailed,\n+                    message,\n+                    new LearnerMessage.LearnFailedState()), org.neo4j.cluster.protocol\n+                    .atomicbroadcast.multipaxos.InstanceId.INSTANCE));\n+              }\n+              break;\n+            }\n \n-                        case learnFailed:\n-                        {\n-                            InstanceId instanceId = new InstanceId( message );\n-                            context.notifyLearnMiss( instanceId );\n-                            break;\n-                        }\n+            case learnFailed:\n+            {\n+              InstanceId instanceId = new InstanceId(message);\n+              context.notifyLearnMiss(instanceId);\n+              break;\n+            }\n \n-                        case catchUp:\n-                        {\n-                            long catchUpTo = message.<Long>getPayload();\n+            case catchUp:\n+            {\n+              long catchUpTo = message.<Long>getPayload();\n \n-                            if ( context.getLastKnownLearnedInstanceInCluster() < catchUpTo )\n-                            {\n-                                context.setNextInstanceId( catchUpTo + 1 );\n+              if (context.getLastKnownLearnedInstanceInCluster() < catchUpTo)\n+              {\n+                context.setNextInstanceId(catchUpTo + 1);\n \n-                                // Try to get up to date\n-                                for ( long instanceId = context.getLastLearnedInstanceId() + 1;\n-                                      instanceId <= catchUpTo; instanceId++ )\n-                                {\n-                                    InstanceId id = new InstanceId( instanceId );\n-                                    PaxosInstance instance = context.getPaxosInstance( id );\n-                                    if ( !instance.isState( PaxosInstance.State.closed ) &&\n-                                            !instance.isState( PaxosInstance.State.delivered ) )\n-                                    {\n-                                        outgoing.offer( Message.to( LearnerMessage.learnRequest,\n-                                                lastKnownAliveUriOrSenderUri( context, message ),\n-                                                new LearnerMessage.LearnRequestState() ).setHeader(\n-                                                InstanceId.INSTANCE,\n-                                                id.toString() ) );\n-                                        context.setTimeout( \"learn\",\n-                                                Message.timeout( LearnerMessage.learnTimedout, message ) );\n-                                        break;\n-                                    }\n-                                }\n+                // Try to get up to date\n+                for (long instanceId = context.getLastLearnedInstanceId() + 1;\n+                     instanceId <= catchUpTo; instanceId++)\n+                {\n+                  InstanceId id = new InstanceId(instanceId);\n+                  PaxosInstance instance = context.getPaxosInstance(id);\n+                  if (!instance.isState(PaxosInstance.State.closed) &&\n+                      !instance.isState(PaxosInstance.State.delivered))\n+                  {\n+                    outgoing.offer(Message.to(LearnerMessage.learnRequest,\n+                        lastKnownAliveUriOrSenderUri(context, message),\n+                        new LearnerMessage.LearnRequestState()).setHeader(\n+                        InstanceId.INSTANCE,\n+                        id.toString()));\n+                    context.setTimeout(\"learn\",\n+                        Message.timeout(LearnerMessage.learnTimedout, message));\n+                    break;\n+                  }\n+                }\n \n-                                org.neo4j.cluster.InstanceId instanceId =\n-                                        message.hasHeader( Message.HEADER_INSTANCE_ID )\n-                                        ? new org.neo4j.cluster.InstanceId(\n-                                                Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) )\n-                                        : context.getMyId();\n-                                context.setLastKnownLearnedInstanceInCluster( catchUpTo, instanceId );\n-                            }\n-                            break;\n-                        }\n+                org.neo4j.cluster.InstanceId instanceId =\n+                    message.hasHeader(Message.HEADER_INSTANCE_ID)\n+                        ? new org.neo4j.cluster.InstanceId(\n+                        Integer.parseInt(message.getHeader(Message.HEADER_INSTANCE_ID)))\n+                        : context.getMyId();\n+                context.setLastKnownLearnedInstanceInCluster(catchUpTo, instanceId);\n+              }\n+              break;\n+            }\n \n-                        case leave:\n-                        {\n-                            context.leave();\n-                            return start;\n-                        }\n+            case leave:\n+            {\n+              context.leave();\n+              return start;\n+            }\n \n-                        default:\n-                            break;\n-                    }\n+            default:\n+              break;\n+          }\n \n-                    return this;\n-                }\n+          return this;\n+        }\n \n-                private URI lastKnownAliveUriOrSenderUri( LearnerContext context, Message<LearnerMessage> message )\n-                        throws URISyntaxException\n-                {\n-                    org.neo4j.cluster.InstanceId lastKnownAliveInstance = context.getLastKnownAliveUpToDateInstance();\n-                    if ( lastKnownAliveInstance != null )\n-                    {\n-                        return context.getUriForId( lastKnownAliveInstance );\n-                    }\n-                    else\n-                    {\n-                        return new URI( message.getHeader( Message.HEADER_FROM ) );\n-                    }\n-                }\n-            }\n+        private URI lastKnownAliveUriOrSenderUri(LearnerContext context, Message<LearnerMessage> message)\n+            throws URISyntaxException\n+        {\n+          org.neo4j.cluster.InstanceId lastKnownAliveInstance = context.getLastKnownAliveUpToDateInstance();\n+          if (lastKnownAliveInstance != null)\n+          {\n+            return context.getUriForId(lastKnownAliveInstance);\n+          } else\n+          {\n+            return new URI(message.getHeader(Message.HEADER_FROM));\n+          }\n+        }\n+      }\n }\n",
            "diff_size": 237
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 294).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "column": "50",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "column": "81",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 281).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "column": "59",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1733/LearnerState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1733/LearnerState.java\nindex 873114490a6..6e462ee476d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1733/LearnerState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1733/LearnerState.java\n@@ -33,16 +33,13 @@ import org.neo4j.logging.Log;\n /**\n  * State machine for Paxos Learner\n  */\n-public enum LearnerState\n-        implements State<LearnerContext, LearnerMessage>\n+public enum LearnerState implements State<LearnerContext, LearnerMessage>\n {\n     start\n-            {\n+{\n                 @Override\n-                public LearnerState handle( LearnerContext context,\n-                                            Message<LearnerMessage> message,\n-                                            MessageHolder outgoing\n-                )\n+                public LearnerState handle( LearnerContext context, Message<LearnerMessage> message,\n+                                            MessageHolder outgoing )\n                 {\n                     if ( message.getMessageType() == LearnerMessage.join )\n                     {\n@@ -51,25 +48,20 @@ public enum LearnerState\n \n                     return this;\n                 }\n-            },\n-\n-    learner\n-            {\n+            }, learner\n+{\n                 @Override\n-                public LearnerState handle( LearnerContext context,\n-                                            Message<LearnerMessage> message,\n-                                            MessageHolder outgoing\n-                ) throws IOException, ClassNotFoundException, URISyntaxException\n+                public LearnerState handle( LearnerContext context, Message<LearnerMessage> message,\n+                                            MessageHolder outgoing ) throws IOException, ClassNotFoundException, URISyntaxException\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case learn:\n+case learn:\n                         {\n                             LearnerMessage.LearnState learnState = message.getPayload();\n                             InstanceId instanceId = new InstanceId( message );\n                             PaxosInstance instance = context.getPaxosInstance( instanceId );\n-\n-                            Log log = context.getLog( getClass() );\n+Log log = context.getLog( getClass() );\n \n                             // Skip if we already know about this\n                             if ( instanceId.getId() <= context.getLastDeliveredInstanceId() )\n@@ -78,8 +70,7 @@ public enum LearnerState\n                             }\n \n                             context.learnedInstanceId( instanceId.getId() );\n-\n-                            instance.closed( learnState.getValue(), message.getHeader( Message.HEADER_CONVERSATION_ID ) );\n+instance.closed( learnState.getValue(), message.getHeader( Message.HEADER_CONVERSATION_ID ) );\n \n                             /*\n                              * The conditional below is simply so that no expensive deserialization will happen if we\n@@ -98,37 +89,24 @@ public enum LearnerState\n                                 {\n                                     description = instance.value_2.toString();\n                                 }\n-                                log.debug(\n-                                        \"Learned and closed instance \" + instance.id +\n-                                                \" from conversation \" +\n-                                                instance.conversationIdHeader +\n-                                                \" and the content was \" +\n-                                                description );\n-                            }\n+                                log.debug( \"Learned and closed instance \" + instance.id + \" from conversation \" + instance.conversationIdHeader + \" and the content was \" + description );\n+    }\n                             // If this is the next instance to be learned, then do so and check if we have anything\n                             // pending to be learned\n                             if ( instanceId.getId() == context.getLastDeliveredInstanceId() + 1 )\n                             {\n                                 instance.delivered();\n                                 outgoing.offer( Message.internal( AtomicBroadcastMessage.broadcastResponse,\n-                                        learnState.getValue() )\n-                                        .setHeader( InstanceId.INSTANCE, instance.id.toString() )\n-                                        .setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader ));\n-                                context.setLastDeliveredInstanceId( instanceId.getId() );\n+                                        learnState.getValue() ).setHeader( InstanceId.INSTANCE, instance.id.toString() ).setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader ));\n+context.setLastDeliveredInstanceId( instanceId.getId() );\n \n                                 long checkInstanceId = instanceId.getId() + 1;\n-                                while ( (instance = context.getPaxosInstance( new InstanceId(\n-                                        checkInstanceId ) )).isState( PaxosInstance.State.closed ) )\n+                                while ( (instance = context.getPaxosInstance( new InstanceId( checkInstanceId ) )).isState( PaxosInstance.State.closed ) )\n                                 {\n                                     instance.delivered();\n                                     context.setLastDeliveredInstanceId( checkInstanceId );\n-                                    Message<AtomicBroadcastMessage> learnMessage = Message.internal(\n-                                            AtomicBroadcastMessage.broadcastResponse, instance.value_2 )\n-                                            .setHeader( InstanceId.INSTANCE, instance.id.toString() )\n-                                            .setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader );\n-                                    outgoing.offer( learnMessage );\n-\n-                                    checkInstanceId++;\n+                                    Message<AtomicBroadcastMessage> learnMessage = Message.internal( AtomicBroadcastMessage.broadcastResponse, instance.value_2 ).setHeader( InstanceId.INSTANCE, instance.id.toString() ).setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader );\n+outgoing.offer( learnMessage ); checkInstanceId++;\n                                 }\n \n                                 if ( checkInstanceId == context.getLastKnownLearnedInstanceInCluster() + 1 )\n@@ -140,46 +118,38 @@ public enum LearnerState\n                                 else\n                                 {\n                                     // Found hole - we're waiting for this to be filled, i.e. timeout already set\n-                                    context.getLog( LearnerState.class ).debug( \"*** HOLE! WAITING \" +\n-                                            \"FOR \" + (context.getLastDeliveredInstanceId() + 1) );\n-                                }\n+                                    context.getLog( LearnerState.class ).debug( \"*** HOLE! WAITING \" + \"FOR \" + (context.getLastDeliveredInstanceId() + 1 ) );\n+    }\n                             }\n                             else\n                             {\n                                 // Found hole - we're waiting for this to be filled, i.e. timeout already set\n-                                context.getLog( LearnerState.class ).debug( \"*** GOT \" + instanceId\n-                                        + \", WAITING FOR \" + (context.getLastDeliveredInstanceId() + 1) );\n-\n-                                context.setTimeout( \"learn\", Message.timeout( LearnerMessage.learnTimedout,\n+                                context.getLog( LearnerState.class ).debug( \"*** GOT \" + instanceId + \", WAITING FOR \" + (context.getLastDeliveredInstanceId() + 1 ) );\n+context.setTimeout( \"learn\", Message.timeout( LearnerMessage.learnTimedout,\n                                         message ) );\n                             }\n                             break;\n                         }\n-\n-                        case learnTimedout:\n+    case learnTimedout:\n                         {\n                             // Timed out waiting for learned values - send explicit request to everyone that is not failed\n                             if ( !context.hasDeliveredAllKnownInstances() )\n                             {\n-                                for ( long instanceId = context.getLastDeliveredInstanceId() + 1;\n-                                      instanceId < context.getLastKnownLearnedInstanceInCluster();\n+                                for ( long instanceId = context.getLastDeliveredInstanceId() + 1; instanceId < context.getLastKnownLearnedInstanceInCluster();\n                                       instanceId++ )\n-                                {\n+{\n                                     InstanceId id = new InstanceId( instanceId );\n                                     PaxosInstance instance = context.getPaxosInstance( id );\n-                                    if ( !instance.isState( PaxosInstance.State.closed ) && !instance.isState(\n-                                            PaxosInstance.State.delivered ) )\n+                                    if ( !instance.isState( PaxosInstance.State.closed ) && !instance.isState( PaxosInstance.State.delivered ) )\n                                     {\n                                         for ( org.neo4j.cluster.InstanceId node : context.getAlive() )\n                                         {\n                                             URI nodeUri = context.getUriForId( node );\n                                             if ( !node.equals( context.getMyId() ) )\n                                             {\n-                                                outgoing.offer( Message.to( LearnerMessage.learnRequest, nodeUri,\n-                                                        new LearnerMessage.LearnRequestState() ).setHeader(\n-                                                        InstanceId.INSTANCE,\n+                                                outgoing.offer( Message.to( LearnerMessage.learnRequest, nodeUri, new LearnerMessage.LearnRequestState() ).setHeader( InstanceId.INSTANCE,\n                                                         id.toString() ) );\n-                                            }\n+    }\n                                         }\n                                     }\n                                 }\n@@ -190,91 +160,72 @@ public enum LearnerState\n                             }\n                             break;\n                         }\n-\n-                        case learnRequest:\n+    case learnRequest:\n                         {\n                             // Someone wants to learn a value that we might have\n                             InstanceId instanceId = new InstanceId( message );\n                             PaxosInstance instance = context.getPaxosInstance( instanceId );\n-                            if ( instance.isState( PaxosInstance.State.closed ) ||\n-                                    instance.isState( PaxosInstance.State.delivered ) )\n+                            if ( instance.isState( PaxosInstance.State.closed ) ||instance.isState( PaxosInstance.State.delivered ) )\n                             {\n-                                outgoing.offer( Message.respond( LearnerMessage.learn, message,\n-                                        new LearnerMessage.LearnState( instance.value_2 ) ).\n-                                        setHeader( InstanceId.INSTANCE, instanceId.toString() ).\n-                                        setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader ) );\n+                                outgoing.offer( Message.respond( LearnerMessage.learn, message, new LearnerMessage.LearnState( instance.value_2 ) ).setHeader( InstanceId.INSTANCE, instanceId.toString() ).setHeader( Message.HEADER_CONVERSATION_ID, instance.conversationIdHeader ) );\n                             }\n                             else\n                             {\n                                 outgoing.offer( message.copyHeadersTo( Message.respond( LearnerMessage.learnFailed,\n-                                        message,\n-                                        new LearnerMessage.LearnFailedState() ), org.neo4j.cluster.protocol\n-                                  .atomicbroadcast.multipaxos.InstanceId.INSTANCE ) );\n-                            }\n+                                        message, new LearnerMessage.LearnFailedState() ), org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId.INSTANCE ) );\n+    }\n                             break;\n                         }\n-\n-                        case learnFailed:\n+    case learnFailed:\n                         {\n                             InstanceId instanceId = new InstanceId( message );\n                             context.notifyLearnMiss( instanceId );\n                             break;\n                         }\n-\n-                        case catchUp:\n+    case catchUp:\n                         {\n-                            long catchUpTo = message.<Long>getPayload();\n-\n-                            if ( context.getLastKnownLearnedInstanceInCluster() < catchUpTo )\n+                            long catchUpTo = message.<Long> getPayload();\n+if ( context.getLastKnownLearnedInstanceInCluster() < catchUpTo )\n                             {\n                                 context.setNextInstanceId( catchUpTo + 1 );\n \n                                 // Try to get up to date\n-                                for ( long instanceId = context.getLastLearnedInstanceId() + 1;\n-                                      instanceId <= catchUpTo; instanceId++ )\n-                                {\n+                                for ( long instanceId = context.getLastLearnedInstanceId() + 1; instanceId <= catchUpTo; instanceId++ )\n+{\n                                     InstanceId id = new InstanceId( instanceId );\n                                     PaxosInstance instance = context.getPaxosInstance( id );\n                                     if ( !instance.isState( PaxosInstance.State.closed ) &&\n                                             !instance.isState( PaxosInstance.State.delivered ) )\n                                     {\n                                         outgoing.offer( Message.to( LearnerMessage.learnRequest,\n-                                                lastKnownAliveUriOrSenderUri( context, message ),\n-                                                new LearnerMessage.LearnRequestState() ).setHeader(\n-                                                InstanceId.INSTANCE,\n+                                                lastKnownAliveUriOrSenderUri( context, message ), new LearnerMessage.LearnRequestState() ).setHeader( InstanceId.INSTANCE,\n                                                 id.toString() ) );\n-                                        context.setTimeout( \"learn\",\n+context.setTimeout( \"learn\",\n                                                 Message.timeout( LearnerMessage.learnTimedout, message ) );\n-                                        break;\n+break;\n                                     }\n                                 }\n \n-                                org.neo4j.cluster.InstanceId instanceId =\n-                                        message.hasHeader( Message.HEADER_INSTANCE_ID )\n-                                        ? new org.neo4j.cluster.InstanceId(\n-                                                Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) )\n-                                        : context.getMyId();\n-                                context.setLastKnownLearnedInstanceInCluster( catchUpTo, instanceId );\n+                                org.neo4j.cluster.InstanceId instanceId = message.hasHeader( Message.HEADER_INSTANCE_ID )\n+                                        ? new org.neo4j.cluster.InstanceId( Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) ) : context.getMyId();\n+context.setLastKnownLearnedInstanceInCluster( catchUpTo, instanceId );\n                             }\n                             break;\n                         }\n-\n-                        case leave:\n+    case leave:\n                         {\n                             context.leave();\n                             return start;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n \n-                private URI lastKnownAliveUriOrSenderUri( LearnerContext context, Message<LearnerMessage> message )\n-                        throws URISyntaxException\n-                {\n+                private URI lastKnownAliveUriOrSenderUri( LearnerContext context, Message<LearnerMessage> message ) throws URISyntaxException\n+{\n                     org.neo4j.cluster.InstanceId lastKnownAliveInstance = context.getLastKnownAliveUpToDateInstance();\n                     if ( lastKnownAliveInstance != null )\n                     {\n@@ -286,4 +237,4 @@ public enum LearnerState\n                     }\n                 }\n             }\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 100
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}