{
    "project_name": "eclipse-kura",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "36",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n\n    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n    private String destinationInterface;\t\t\t\t// i.e. ppp0\n    private String protocol;\t// protocol (i.e. all, tcp, udp)\n    private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "column": "41",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/21/NATRule.java\nindex 288f74bbd33..34915d13b85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/21/NATRule.java\n@@ -25,7 +25,8 @@ public class NATRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n \n-    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n+    private String sourceInterface;\n+    // i.e. eth0\n     private String destinationInterface;\t\t\t\t// i.e. ppp0\n     private String protocol;\t// protocol (i.e. all, tcp, udp)\n     private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/21/NATRule.java\nindex 288f74bbd33..0cde2822115 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/21/NATRule.java\n@@ -9,6 +9,7 @@\n  * Contributors:\n  *     Eurotech\n  *******************************************************************************/\n+\n package org.eclipse.kura.linux.net.iptables;\n \n import java.util.List;\n@@ -19,15 +20,14 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * Creates an iptables command for a NAT Rule.\n- *\n  */\n public class NATRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n \n-    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n-    private String destinationInterface;\t\t\t\t// i.e. ppp0\n-    private String protocol;\t// protocol (i.e. all, tcp, udp)\n+    private String sourceInterface;                        // i.e. eth0\n+    private String destinationInterface;                // i.e. ppp0\n+    private String protocol;    // protocol (i.e. all, tcp, udp)\n     private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n     private String destination; // destination network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n     private boolean masquerade;\n@@ -35,12 +35,9 @@ public class NATRule {\n     /**\n      * Constructor of <code>NATRule</code> object.\n      *\n-     * @param sourceInterface\n-     *            interface name of source network (such as eth0)\n-     * @param destinationInterface\n-     *            interface name of destination network to be reached via NAT (such as ppp0)\n-     * @param masquerade\n-     *            add masquerade entry\n+     * @param sourceInterface      interface name of source network (such as eth0)\n+     * @param destinationInterface interface name of destination network to be reached via NAT (such as ppp0)\n+     * @param masquerade           add masquerade entry\n      */\n     public NATRule(String sourceInterface, String destinationInterface, boolean masquerade) {\n         this.sourceInterface = sourceInterface;\n@@ -49,7 +46,7 @@ public class NATRule {\n     }\n \n     public NATRule(String sourceInterface, String destinationInterface, String protocol, String source,\n-            String destination, boolean masquerade) {\n+                   String destination, boolean masquerade) {\n         this(sourceInterface, destinationInterface, masquerade);\n         this.source = source;\n         this.destination = destination;\n@@ -102,8 +99,7 @@ public class NATRule {\n     /**\n      * Setter for the sourceInterface.\n      *\n-     * @param sourceInterface\n-     *            A String representing the sourceInterface.\n+     * @param sourceInterface A String representing the sourceInterface.\n      */\n     public void setSourceInterface(String sourceInterface) {\n         this.sourceInterface = sourceInterface;\n@@ -112,8 +108,7 @@ public class NATRule {\n     /**\n      * Setter for the destinationInterface.\n      *\n-     * @param destinationInterface\n-     *            A String representing the destinationInterface.\n+     * @param destinationInterface A String representing the destinationInterface.\n      */\n     public void setDestinationInterface(String destinationInterface) {\n         this.destinationInterface = destinationInterface;\n@@ -122,8 +117,7 @@ public class NATRule {\n     /**\n      * Setter for the masquerade.\n      *\n-     * @param masquerade\n-     *            A boolean representing the masquerade.\n+     * @param masquerade A boolean representing the masquerade.\n      */\n     public void setMasquerade(boolean masquerade) {\n         this.masquerade = masquerade;\n@@ -175,7 +169,7 @@ public class NATRule {\n         } else {\n             try {\n                 ret = new NatPostroutingChainRule(this.destinationInterface, this.protocol, this.destination,\n-                        this.source, this.masquerade);\n+                    this.source, this.masquerade);\n             } catch (KuraException e) {\n                 ret = null;\n                 logger.error(\"failed to obtain NatPostroutingChainRule\", e);\n@@ -198,7 +192,7 @@ public class NATRule {\n             dstMask = Short.parseShort(this.destination.split(\"/\")[1]);\n         }\n         return new FilterForwardChainRule(this.sourceInterface, this.destinationInterface, srcNetwork, srcMask,\n-                dstNetwork, dstMask, this.protocol, null, 0, 0);\n+            dstNetwork, dstMask, this.protocol, null, 0, 0);\n     }\n \n     @Override\n@@ -229,9 +223,9 @@ public class NATRule {\n         NATRule other = (NATRule) o;\n \n         return compareObjects(this.sourceInterface, other.sourceInterface)\n-                && compareObjects(this.destinationInterface, other.destinationInterface)\n-                && this.masquerade == other.masquerade && compareObjects(this.protocol, other.protocol)\n-                && compareObjects(this.source, other.source) && compareObjects(this.destination, other.destination);\n+            && compareObjects(this.destinationInterface, other.destinationInterface)\n+            && this.masquerade == other.masquerade && compareObjects(this.protocol, other.protocol)\n+            && compareObjects(this.source, other.source) && compareObjects(this.destination, other.destination);\n     }\n \n     private boolean compareObjects(Object obj1, Object obj2) {\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/21/NATRule.java\nindex 288f74bbd33..9ebf12a05bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/21/NATRule.java\n@@ -25,9 +25,9 @@ public class NATRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n \n-    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n-    private String destinationInterface;\t\t\t\t// i.e. ppp0\n-    private String protocol;\t// protocol (i.e. all, tcp, udp)\n+    private String sourceInterface;     // i.e. eth0\n+    private String destinationInterface;     // i.e. ppp0\n+    private String protocol;     // protocol (i.e. all, tcp, udp)\n     private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n     private String destination; // destination network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n     private boolean masquerade;\n@@ -242,4 +242,4 @@ public class NATRule {\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/21/NATRule.java\nindex 288f74bbd33..a538f6164ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/21/NATRule.java\n@@ -12,7 +12,6 @@\n package org.eclipse.kura.linux.net.iptables;\n \n import java.util.List;\n-\n import org.eclipse.kura.KuraException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -21,13 +20,13 @@ import org.slf4j.LoggerFactory;\n  * Creates an iptables command for a NAT Rule.\n  *\n  */\n+\n public class NATRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n-\n-    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n-    private String destinationInterface;\t\t\t\t// i.e. ppp0\n-    private String protocol;\t// protocol (i.e. all, tcp, udp)\n+    private String sourceInterface;                     // i.e. eth0\n+    private String destinationInterface;                // i.e. ppp0\n+    private String protocol;    // protocol (i.e. all, tcp, udp)\n     private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n     private String destination; // destination network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n     private boolean masquerade;\n@@ -42,14 +41,14 @@ public class NATRule {\n      * @param masquerade\n      *            add masquerade entry\n      */\n+\n     public NATRule(String sourceInterface, String destinationInterface, boolean masquerade) {\n         this.sourceInterface = sourceInterface;\n         this.destinationInterface = destinationInterface;\n         this.masquerade = masquerade;\n     }\n \n-    public NATRule(String sourceInterface, String destinationInterface, String protocol, String source,\n-            String destination, boolean masquerade) {\n+    public NATRule(String sourceInterface, String destinationInterface, String protocol, String source, String destination, boolean masquerade) {\n         this(sourceInterface, destinationInterface, masquerade);\n         this.source = source;\n         this.destination = destination;\n@@ -59,6 +58,7 @@ public class NATRule {\n     /**\n      * Constructor of <code>NATRule</code> object.\n      */\n+\n     public NATRule() {\n         this.sourceInterface = null;\n         this.destinationInterface = null;\n@@ -69,6 +69,7 @@ public class NATRule {\n      *\n      * @return A boolean representing whether all parameters have been set.\n      */\n+\n     public boolean isComplete() {\n         if (this.sourceInterface != null && this.destinationInterface != null) {\n             return true;\n@@ -88,6 +89,7 @@ public class NATRule {\n      *\n      * @return A String representation of the <code>NATRule</code>.\n      */\n+\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n@@ -105,6 +107,7 @@ public class NATRule {\n      * @param sourceInterface\n      *            A String representing the sourceInterface.\n      */\n+\n     public void setSourceInterface(String sourceInterface) {\n         this.sourceInterface = sourceInterface;\n     }\n@@ -115,6 +118,7 @@ public class NATRule {\n      * @param destinationInterface\n      *            A String representing the destinationInterface.\n      */\n+\n     public void setDestinationInterface(String destinationInterface) {\n         this.destinationInterface = destinationInterface;\n     }\n@@ -125,6 +129,7 @@ public class NATRule {\n      * @param masquerade\n      *            A boolean representing the masquerade.\n      */\n+\n     public void setMasquerade(boolean masquerade) {\n         this.masquerade = masquerade;\n     }\n@@ -146,6 +151,7 @@ public class NATRule {\n      *\n      * @return sourceInterface A String representing the sourceInterface.\n      */\n+\n     public String getSourceInterface() {\n         return this.sourceInterface;\n     }\n@@ -155,6 +161,7 @@ public class NATRule {\n      *\n      * @return destinationInterface A String representing the destinationInterface.\n      */\n+\n     public String getDestinationInterface() {\n         return this.destinationInterface;\n     }\n@@ -164,6 +171,7 @@ public class NATRule {\n      *\n      * @return masquerade A boolean representing the masquerade.\n      */\n+\n     public boolean isMasquerade() {\n         return this.masquerade;\n     }\n@@ -174,8 +182,11 @@ public class NATRule {\n             ret = new NatPostroutingChainRule(this.destinationInterface, this.masquerade);\n         } else {\n             try {\n-                ret = new NatPostroutingChainRule(this.destinationInterface, this.protocol, this.destination,\n-                        this.source, this.masquerade);\n+                ret = new NatPostroutingChainRule(this.destinationInterface,\n+                    this.protocol,\n+                        this.destination,\n+                            this.source,\n+                                this.masquerade);\n             } catch (KuraException e) {\n                 ret = null;\n                 logger.error(\"failed to obtain NatPostroutingChainRule\", e);\n@@ -197,27 +208,25 @@ public class NATRule {\n             dstNetwork = this.destination.split(\"/\")[0];\n             dstMask = Short.parseShort(this.destination.split(\"/\")[1]);\n         }\n-        return new FilterForwardChainRule(this.sourceInterface, this.destinationInterface, srcNetwork, srcMask,\n-                dstNetwork, dstMask, this.protocol, null, 0, 0);\n+        return new FilterForwardChainRule(this.sourceInterface,\n+            this.destinationInterface,\n+                srcNetwork,\n+                    srcMask,\n+                        dstNetwork,\n+                            dstMask,\n+                                this.protocol, null, 0, 0);\n     }\n \n     @Override\n     public int hashCode() {\n         final int prime = 71;\n         int result = 1;\n-\n         result = prime * result + (this.sourceInterface == null ? 0 : this.sourceInterface.hashCode());\n-\n         result = prime * result + (this.destinationInterface == null ? 0 : this.destinationInterface.hashCode());\n-\n         result = prime * result + (this.source == null ? 0 : this.source.hashCode());\n-\n         result = prime * result + (this.destination == null ? 0 : this.destination.hashCode());\n-\n         result = prime * result + (this.protocol == null ? 0 : this.protocol.hashCode());\n-\n         result = prime * result + (this.masquerade ? 1277 : 1279);\n-\n         return result;\n     }\n \n@@ -226,12 +235,12 @@ public class NATRule {\n         if (!(o instanceof NATRule)) {\n             return false;\n         }\n-        NATRule other = (NATRule) o;\n \n-        return compareObjects(this.sourceInterface, other.sourceInterface)\n-                && compareObjects(this.destinationInterface, other.destinationInterface)\n-                && this.masquerade == other.masquerade && compareObjects(this.protocol, other.protocol)\n-                && compareObjects(this.source, other.source) && compareObjects(this.destination, other.destination);\n+        NATRule other = (NATRule) o;\n+        return compareObjects(this.sourceInterface, other.sourceInterface) && compareObjects(this.destinationInterface, other.destinationInterface)\n+        && this.masquerade == other.masquerade && compareObjects(this.protocol, other.protocol)\n+        && compareObjects(this.source, other.source)\n+            && compareObjects(this.destination, other.destination);\n     }\n \n     private boolean compareObjects(Object obj1, Object obj2) {\n@@ -242,4 +251,4 @@ public class NATRule {\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "column": "41",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/21/NATRule.java\nindex 288f74bbd33..34915d13b85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/21/NATRule.java\n@@ -25,7 +25,8 @@ public class NATRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n \n-    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n+    private String sourceInterface;\n+    // i.e. eth0\n     private String destinationInterface;\t\t\t\t// i.e. ppp0\n     private String protocol;\t// protocol (i.e. all, tcp, udp)\n     private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "column": "41",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/21/NATRule.java\nindex 288f74bbd33..34915d13b85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/21/NATRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/21/NATRule.java\n@@ -25,7 +25,8 @@ public class NATRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(NATRule.class);\n \n-    private String sourceInterface;\t\t\t\t\t\t// i.e. eth0\n+    private String sourceInterface;\n+    // i.e. eth0\n     private String destinationInterface;\t\t\t\t// i.e. ppp0\n     private String protocol;\t// protocol (i.e. all, tcp, udp)\n     private String source; // source network/host (i.e. 192.168.1.0/24 or 192.168.1.1/32)\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}